
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a8 f9 00 00       	call   c000f9c8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 8f 02 00       	call   c0028f78 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0e 9c 02 c0       	mov    ebx,0xc0029c0e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 1c 9c 02 c0    	cmp    ebx,0xc0029c1c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 e7 02 c0       	mov    eax,0xc002e7d8
c0000049:	3d d8 e7 02 c0       	cmp    eax,0xc002e7d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 e7 02 c0       	push   0xc002e7d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 e7 02 c0       	mov    eax,0xc002e7d8
c0000075:	2d d8 e7 02 c0       	sub    eax,0xc002e7d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 e7 02 c0       	push   0xc002e7d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 24 9c 02 c0       	mov    ebx,0xc0029c24
c00000bb:	81 eb 20 9c 02 c0    	sub    ebx,0xc0029c20
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 20 9c 02 c0       	mov    esi,0xc0029c20
c00000ca:	a1 0c ee 02 c0       	mov    eax,ds:0xc002ee0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c ee 02 c0       	mov    ds:0xc002ee0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c ee 02 c0       	mov    eax,ds:0xc002ee0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 e7 02 c0       	push   0xc002e7d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 ee 02 c0       	push   0xc002ee10
c000012c:	68 d8 e7 02 c0       	push   0xc002e7d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 71 d6 01 00       	call   c001da14 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 1e 23 01 00       	call   c00126d9 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 4f d6 01 00       	call   c001da14 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 f7 da 01 00       	call   c001dedb <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 55 e1 01 00       	call   c001e542 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 f2 02 c0 	lgdtd  ds:0xc002f250
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 2f 40 01 00       	call   c0014611 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 28 ee 02 c0       	mov    ds:0xc002ee28,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 28 ee 02 c0    	mov    DWORD PTR ds:0xc002ee28,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 28 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee28
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 9c 02 c0 02 	test   BYTE PTR [edx-0x3ffd63c0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63c0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 9c 02 c0 08 	test   BYTE PTR [edx-0x3ffd63c0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 9c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd63c0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63c0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 40 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee40
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 40 ee 02 c0    	mov    DWORD PTR ds:0xc002ee40,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 44 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd11bc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 44 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11bc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 40 ee 02 c0    	mov    DWORD PTR ds:0xc002ee40,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 7c ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee7c
c0000e38:	c7 42 0c 74 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ee74
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 7c ee 02 c0    	mov    DWORD PTR ds:0xc002ee7c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 6c ee 02 c0    	mov    DWORD PTR ds:0xc002ee6c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 40 ee 02 c0 02 	test   BYTE PTR ds:0xc002ee40,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 45 e8 00 00       	call   c000f75e <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 87 e7 00 00       	call   c000f75e <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 71 e7 00 00       	call   c000f75e <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 4d e7 00 00       	call   c000f75e <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 40 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002ee40
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 44 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd11bc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 44 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd11bc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 74 ee 02 c0 	lea    edx,[eax*8-0x3ffd118c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 80 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee80
c00011ba:	81 fb 74 ee 02 c0    	cmp    ebx,0xc002ee74
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 74 ee 02 c0       	cmp    eax,0xc002ee74
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 70 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee70,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 7c ee 02 c0       	mov    ds:0xc002ee7c,eax
c00011f6:	a3 80 ee 02 c0       	mov    ds:0xc002ee80,eax
c00011fb:	a3 70 ee 02 c0       	mov    ds:0xc002ee70,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 74 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ee74
c0001209:	c7 40 0c 74 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ee74
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 80 ee 02 c0       	mov    ds:0xc002ee80,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 74 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ee74
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 38 ee 02 c0 	lea    ebp,[edx*4-0x3ffd11c8]
c000125a:	8b 14 95 40 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd11c0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 40 ee 02 c0 	lea    ecx,[edx*4-0x3ffd11c0]
c0001275:	8b 14 95 40 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd11c0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 74 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e8c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 74 ee 02 c0 	lea    eax,[eax*8-0x3ffd118c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 7c ee 02 c0    	mov    DWORD PTR ds:0xc002ee7c,ecx
c000132f:	89 0d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,ecx
c0001335:	c7 41 08 74 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ee74
c000133c:	c7 41 0c 74 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ee74
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 6c ee 02 c0 	lea    edx,[ecx*8-0x3ffd1194]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 74 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e8c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 74 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e8c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 6c ee 02 c0 	lea    edx,[eax*4-0x3ffd1194]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 74 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e8c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 7c ee 02 c0    	mov    DWORD PTR ds:0xc002ee7c,edi
c0001402:	89 3d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,edi
c0001408:	c7 47 08 74 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ee74
c000140f:	c7 47 0c 74 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ee74
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 70 ee 02 c0    	mov    DWORD PTR ds:0xc002ee70,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 6c ee 02 c0       	mov    eax,ds:0xc002ee6c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 6c ee 02 c0    	mov    DWORD PTR ds:0xc002ee6c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 40 ee 02 c0       	mov    edx,0xc002ee40
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 40 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee40,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 94 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f194
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 94 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 94 f1 02 c0    	mov    DWORD PTR ds:0xc002f194,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 6c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee6c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 6c ee 02 c0    	mov    DWORD PTR ds:0xc002ee6c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 40 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee40,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 9c f1 02 c0    	push   DWORD PTR ds:0xc002f19c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 40 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee40,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 9c f1 02 c0       	mov    eax,ds:0xc002f19c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 6c ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee6c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 6c ee 02 c0       	mov    eax,ds:0xc002ee6c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 44 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd11bc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 74 ee 02 c0       	mov    eax,0xc002ee74
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 6c f1 02 c0       	cmp    eax,0xc002f16c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 90 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f190
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 a4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1a4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 b4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1b4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 40 ee 02 c0       	mov    eax,0xc002ee40
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd62bc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 40 ee 02 c0       	mov    eax,ds:0xc002ee40
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 40 ee 02 c0       	mov    ds:0xc002ee40,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 84 f1 02 c0    	mov    DWORD PTR ds:0xc002f184,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 88 f1 02 c0    	mov    DWORD PTR ds:0xc002f188,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 8c f1 02 c0    	mov    DWORD PTR ds:0xc002f18c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 94 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd700]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 a0 f4 01 00       	jmp    c0021092 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd700]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 d1 f4 01 00       	jmp    c00210d9 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd700]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 f9 f4 01 00       	jmp    c0021120 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ca 53 02 00       	call   c00272d4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 9e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd61a0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 9e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd61a0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 9e 02 c0       	mov    edx,0xc0029e80
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 38 d3 02 c0       	mov    edx,0xc002d338
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 9e 02 c0       	mov    edx,0xc0029e8c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 9e 02 c0       	mov    edx,0xc0029e70
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 e0 f1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0e20]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 c0 f1 02 c0    	mov    ax,ds:0xc002f1c0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 c0 f1 02 c0    	mov    ds:0xc002f1c0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 c7 41 02 00       	call   c00272d4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 9e 02 c0       	mov    eax,0xc0029e92
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6220]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 9e 02 c0       	mov    eax,0xc0029e9b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 9e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd61a0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 92 2b 02 00       	call   c00272d4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 9e 02 c0       	mov    edx,0xc0029e70
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 e0 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0e20]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 e0 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0e20],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 59 15 02 00       	call   c00272d4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 3f 15 02 00       	call   c00272d4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 9d 02 c0       	mov    eax,0xc0029db7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 e0 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e20]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 9d 02 c0       	mov    esi,0xc0029da0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 82 fc 01 00       	call   c00272d4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 9e 02 c0       	mov    edx,0xc0029e80
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 9e 02 c0       	mov    edx,0xc0029ea2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 9e 02 c0       	mov    edx,0xc0029eae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 9e 02 c0       	mov    edx,0xc0029ec2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 99 74 00 00       	call   c000f902 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 93 74 00 00       	call   c000f912 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a1e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 9f 02 c0       	mov    eax,0xc0029fe0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6120]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 d8 71 00 00       	call   c000f912 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 c2 71 00 00       	call   c000f912 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 d6 05 02 00       	call   c0028da7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 99 05 02 00       	call   c0028d89 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 6d 05 02 00       	call   c0028da7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 20 fc 01 00       	call   c00284ac <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 a2 06 02 00       	call   c0028f40 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 e7 04 02 00       	call   c0028da7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 29 04 02 00       	call   c0028da7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 f6 03 02 00       	call   c0028d89 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 e3 02 02 00       	call   c0028da7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 ab 02 02 00       	call   c0028d89 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 a1 6d 00 00       	call   c000f932 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 3c 6d 00 00       	call   c000f912 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 a2 02 c0       	mov    eax,0xc002a2e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 b7 00 02 00       	call   c0028da7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 7c 00 02 00       	call   c0028d89 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 8c fd 01 00       	call   c0028b3b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 0a f7 01 00       	call   c00284d8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 c6 ff 01 00       	call   c0028dab <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 b4 00 02 00       	call   c0028ecf <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 9e f6 01 00       	call   c00284d8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 49 ff 01 00       	call   c0028da5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 2a ff 01 00       	call   c0028da9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 c0 00 02 00       	call   c0028f60 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 6a fc 01 00       	call   c0028b3b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 e8 f5 01 00       	call   c00284d8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 a4 fe 01 00       	call   c0028dab <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 92 ff 01 00       	call   c0028ecf <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 7c f5 01 00       	call   c00284d8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 27 fe 01 00       	call   c0028da5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 07 fe 01 00       	call   c0028da9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 9c ff 01 00       	call   c0028f60 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 42 fd 01 00       	call   c0028da7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 00 fd 01 00       	call   c0028d89 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 e8 fc 01 00       	call   c0028da7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 5a fa 01 00       	call   c0028b3b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 5c ed 01 00       	call   c0027e5b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 bf f3 01 00       	call   c00284d8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 11 fa 01 00       	call   c0028b3b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 17 ed 01 00       	call   c0027e5b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 e6 f9 01 00       	call   c0028b3b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 36 fc 01 00       	call   c0028da5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 13 f3 01 00       	call   c00284ac <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 95 fd 01 00       	call   c0028f40 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 bc fb 01 00       	call   c0028d89 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 b7 f2 01 00       	call   c00284ac <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 35 f9 01 00       	call   c0028b3b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 b8 f2 01 00       	call   c00284d8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 0a f9 01 00       	call   c0028b3b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 71 f5 01 00       	call   c00287bc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 f0 eb 01 00       	call   c0027e5b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 50 e5 01 00       	call   c00277f0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 27 fc 01 00       	call   c0028ecf <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 10 f2 01 00       	call   c00284d8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 f7 fb 01 00       	call   c0028ecf <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 69 eb 01 00       	call   c0027e5b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 a2 fa 01 00       	call   c0028dab <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 8a f4 01 00       	call   c00287bc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 10 eb 01 00       	call   c0027e5b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 fe fb 01 00       	call   c0028f60 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 d0 f7 01 00       	call   c0028b3b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 27 f1 01 00       	call   c00284ac <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 06 fa 01 00       	call   c0028da7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 9f ea 01 00       	call   c0027e5b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 cb f0 01 00       	call   c00284ac <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 6d fb 01 00       	call   c0028f60 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 1e f7 01 00       	call   c0028b3b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 9b f0 01 00       	call   c00284d8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 ee f6 01 00       	call   c0028b3b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 f4 e9 01 00       	call   c0027e5b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 c4 f6 01 00       	call   c0028b3b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 16 f9 01 00       	call   c0028da7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 ed ef 01 00       	call   c00284ac <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 6f fa 01 00       	call   c0028f40 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 96 f8 01 00       	call   c0028d89 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 90 ef 01 00       	call   c00284ac <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 0e f6 01 00       	call   c0028b3b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 91 ef 01 00       	call   c00284d8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 e3 f5 01 00       	call   c0028b3b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 4a f2 01 00       	call   c00287bc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 c9 e8 01 00       	call   c0027e5b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 19 e2 01 00       	call   c00277f0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 f0 f8 01 00       	call   c0028ecf <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 d9 ee 01 00       	call   c00284d8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 c0 f8 01 00       	call   c0028ecf <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 32 e8 01 00       	call   c0027e5b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 6b f7 01 00       	call   c0028dab <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 52 f1 01 00       	call   c00287bc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 d1 e7 01 00       	call   c0027e5b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 bf f8 01 00       	call   c0028f60 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 91 f4 01 00       	call   c0028b3b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 e8 ed 01 00       	call   c00284ac <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 c7 f6 01 00       	call   c0028da7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 60 e7 01 00       	call   c0027e5b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 8c ed 01 00       	call   c00284ac <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 01 f4 01 00       	call   c0028b3b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 07 e7 01 00       	call   c0027e5b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 a7 02 c0       	mov    eax,0xc002a7a0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 a7 02 c0       	mov    eax,0xc002a7b4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 d5 60 00 00       	call   c000f912 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 d7 60 00 00       	call   c000f932 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 7c f2 01 00       	call   c0028b3b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 fa eb 01 00       	call   c00284d8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 8c de 01 00       	call   c00277f0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 63 f5 01 00       	call   c0028ecf <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 4c eb 01 00       	call   c00284d8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 2f f5 01 00       	call   c0028ecf <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 a1 e4 01 00       	call   c0027e5b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 01 f5 01 00       	call   c0028ecf <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 f0 ea 01 00       	call   c00284d8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 59 e4 01 00       	call   c0027e5b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 7a dd 01 00       	call   c00277f0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 51 f4 01 00       	call   c0028ecf <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 3a ea 01 00       	call   c00284d8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 1d f4 01 00       	call   c0028ecf <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 8f e3 01 00       	call   c0027e5b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ef f3 01 00       	call   c0028ecf <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 de e9 01 00       	call   c00284d8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 47 e3 01 00       	call   c0027e5b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 25 e3 01 00       	call   c0027e5b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 01 dc 01 00       	call   c00277f0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 d8 f2 01 00       	call   c0028ecf <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 c1 e8 01 00       	call   c00284d8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 a4 f2 01 00       	call   c0028ecf <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 16 e2 01 00       	call   c0027e5b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 76 f2 01 00       	call   c0028ecf <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 5f e8 01 00       	call   c00284d8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 c8 e1 01 00       	call   c0027e5b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 28 f2 01 00       	call   c0028ecf <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 11 e8 01 00       	call   c00284d8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 7a e1 01 00       	call   c0027e5b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 8f da 01 00       	call   c00277f0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 66 f1 01 00       	call   c0028ecf <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 4f e7 01 00       	call   c00284d8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 36 f1 01 00       	call   c0028ecf <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 a8 e0 01 00       	call   c0027e5b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 08 f1 01 00       	call   c0028ecf <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 f1 e6 01 00       	call   c00284d8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 5a e0 01 00       	call   c0027e5b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ba f0 01 00       	call   c0028ecf <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 a3 e6 01 00       	call   c00284d8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 0c e0 01 00       	call   c0027e5b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 e0 df 01 00       	call   c0027e5b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 3d e6 01 00       	call   c00284d8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 f9 ee 01 00       	call   c0028dab <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 88 df 01 00       	call   c0027e5b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 e5 e5 01 00       	call   c00284d8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 a1 ee 01 00       	call   c0028dab <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 1b d8 01 00       	call   c00277f0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 f2 ee 01 00       	call   c0028ecf <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 db e4 01 00       	call   c00284d8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 be ee 01 00       	call   c0028ecf <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 30 de 01 00       	call   c0027e5b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 90 ee 01 00       	call   c0028ecf <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 79 e4 01 00       	call   c00284d8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 e2 dd 01 00       	call   c0027e5b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 42 ee 01 00       	call   c0028ecf <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 2b e4 01 00       	call   c00284d8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 94 dd 01 00       	call   c0027e5b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 f4 ed 01 00       	call   c0028ecf <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 dd e3 01 00       	call   c00284d8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 46 dd 01 00       	call   c0027e5b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 a6 ed 01 00       	call   c0028ecf <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 8f e3 01 00       	call   c00284d8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 f8 dc 01 00       	call   c0027e5b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 fa d5 01 00       	call   c00277f0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 d1 ec 01 00       	call   c0028ecf <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ba e2 01 00       	call   c00284d8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 a1 ec 01 00       	call   c0028ecf <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 13 dc 01 00       	call   c0027e5b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 73 ec 01 00       	call   c0028ecf <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 5c e2 01 00       	call   c00284d8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 c5 db 01 00       	call   c0027e5b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 25 ec 01 00       	call   c0028ecf <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 0e e2 01 00       	call   c00284d8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 77 db 01 00       	call   c0027e5b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 d7 eb 01 00       	call   c0028ecf <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 c0 e1 01 00       	call   c00284d8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 29 db 01 00       	call   c0027e5b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 89 eb 01 00       	call   c0028ecf <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 72 e1 01 00       	call   c00284d8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 db da 01 00       	call   c0027e5b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 af da 01 00       	call   c0027e5b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 0c e1 01 00       	call   c00284d8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 c8 e9 01 00       	call   c0028dab <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 57 da 01 00       	call   c0027e5b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 b4 e0 01 00       	call   c00284d8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 70 e9 01 00       	call   c0028dab <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 fe d9 01 00       	call   c0027e5b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 5b e0 01 00       	call   c00284d8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 17 e9 01 00       	call   c0028dab <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 a5 d9 01 00       	call   c0027e5b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 02 e0 01 00       	call   c00284d8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 be e8 01 00       	call   c0028dab <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 1c d2 01 00       	call   c00277f0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 f3 e8 01 00       	call   c0028ecf <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 dc de 01 00       	call   c00284d8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 bf e8 01 00       	call   c0028ecf <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 31 d8 01 00       	call   c0027e5b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 91 e8 01 00       	call   c0028ecf <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 7a de 01 00       	call   c00284d8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 e3 d7 01 00       	call   c0027e5b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 43 e8 01 00       	call   c0028ecf <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 2c de 01 00       	call   c00284d8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 95 d7 01 00       	call   c0027e5b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 f5 e7 01 00       	call   c0028ecf <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 de dd 01 00       	call   c00284d8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 47 d7 01 00       	call   c0027e5b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 a7 e7 01 00       	call   c0028ecf <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 90 dd 01 00       	call   c00284d8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 f9 d6 01 00       	call   c0027e5b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 59 e7 01 00       	call   c0028ecf <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 42 dd 01 00       	call   c00284d8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 a8 d6 01 00       	call   c0027e5b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 08 e7 01 00       	call   c0028ecf <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 f1 dc 01 00       	call   c00284d8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 5a d6 01 00       	call   c0027e5b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 54 cf 01 00       	call   c00277f0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 2b e6 01 00       	call   c0028ecf <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 14 dc 01 00       	call   c00284d8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 f4 e5 01 00       	call   c0028ecf <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 66 d5 01 00       	call   c0027e5b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 c6 e5 01 00       	call   c0028ecf <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 af db 01 00       	call   c00284d8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 18 d5 01 00       	call   c0027e5b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 78 e5 01 00       	call   c0028ecf <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 61 db 01 00       	call   c00284d8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ca d4 01 00       	call   c0027e5b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 2a e5 01 00       	call   c0028ecf <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 13 db 01 00       	call   c00284d8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 7c d4 01 00       	call   c0027e5b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 dc e4 01 00       	call   c0028ecf <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 c5 da 01 00       	call   c00284d8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 2e d4 01 00       	call   c0027e5b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 8e e4 01 00       	call   c0028ecf <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 77 da 01 00       	call   c00284d8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 dd d3 01 00       	call   c0027e5b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 3d e4 01 00       	call   c0028ecf <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 26 da 01 00       	call   c00284d8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 95 d3 01 00       	call   c0027e5b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 6e d3 01 00       	call   c0027e5b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 cc d9 01 00       	call   c00284d8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 88 e2 01 00       	call   c0028dab <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 17 d3 01 00       	call   c0027e5b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 75 d9 01 00       	call   c00284d8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 31 e2 01 00       	call   c0028dab <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 bf d2 01 00       	call   c0027e5b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 1d d9 01 00       	call   c00284d8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 d9 e1 01 00       	call   c0028dab <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 67 d2 01 00       	call   c0027e5b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 c5 d8 01 00       	call   c00284d8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 81 e1 01 00       	call   c0028dab <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 0f d2 01 00       	call   c0027e5b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 6d d8 01 00       	call   c00284d8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 29 e1 01 00       	call   c0028dab <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 bd d1 01 00       	call   c0027e5b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 1b d8 01 00       	call   c00284d8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 d7 e0 01 00       	call   c0028dab <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 eb c9 01 00       	call   c00277f0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 c2 e0 01 00       	call   c0028ecf <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 ab d6 01 00       	call   c00284d8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 92 e0 01 00       	call   c0028ecf <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 04 d0 01 00       	call   c0027e5b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd581c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 38 e0 01 00       	call   c0028ecf <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 21 d6 01 00       	call   c00284d8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 8c cf 01 00       	call   c0027e5b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 d9 df 01 00       	call   c0028ecf <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 c2 d5 01 00       	call   c00284d8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 2d cf 01 00       	call   c0027e5b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 7a df 01 00       	call   c0028ecf <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 63 d5 01 00       	call   c00284d8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ce ce 01 00       	call   c0027e5b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 1b df 01 00       	call   c0028ecf <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 04 d5 01 00       	call   c00284d8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 6f ce 01 00       	call   c0027e5b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 bc de 01 00       	call   c0028ecf <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 a5 d4 01 00       	call   c00284d8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 10 ce 01 00       	call   c0027e5b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 5d de 01 00       	call   c0028ecf <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 46 d4 01 00       	call   c00284d8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 b1 cd 01 00       	call   c0027e5b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 fe dd 01 00       	call   c0028ecf <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 e7 d3 01 00       	call   c00284d8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 52 cd 01 00       	call   c0027e5b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 9f dd 01 00       	call   c0028ecf <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 88 d3 01 00       	call   c00284d8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 f3 cc 01 00       	call   c0027e5b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 fd c5 01 00       	call   c00277f0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 d4 dc 01 00       	call   c0028ecf <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 bd d2 01 00       	call   c00284d8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 a4 dc 01 00       	call   c0028ecf <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 16 cc 01 00       	call   c0027e5b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5800]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 49 dc 01 00       	call   c0028ecf <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 32 d2 01 00       	call   c00284d8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 9d cb 01 00       	call   c0027e5b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 e9 db 01 00       	call   c0028ecf <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 d2 d1 01 00       	call   c00284d8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 3d cb 01 00       	call   c0027e5b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 89 db 01 00       	call   c0028ecf <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 72 d1 01 00       	call   c00284d8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 dd ca 01 00       	call   c0027e5b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 29 db 01 00       	call   c0028ecf <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 12 d1 01 00       	call   c00284d8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 7d ca 01 00       	call   c0027e5b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 c9 da 01 00       	call   c0028ecf <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 b2 d0 01 00       	call   c00284d8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 1d ca 01 00       	call   c0027e5b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 69 da 01 00       	call   c0028ecf <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 52 d0 01 00       	call   c00284d8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 bd c9 01 00       	call   c0027e5b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 09 da 01 00       	call   c0028ecf <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 f2 cf 01 00       	call   c00284d8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 5d c9 01 00       	call   c0027e5b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 a9 d9 01 00       	call   c0028ecf <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 92 cf 01 00       	call   c00284d8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 fd c8 01 00       	call   c0027e5b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd57e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 a2 c8 01 00       	call   c0027e5b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 ff ce 01 00       	call   c00284d8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 bb d7 01 00       	call   c0028dab <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 45 c8 01 00       	call   c0027e5b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 a2 ce 01 00       	call   c00284d8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 5e d7 01 00       	call   c0028dab <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 e8 c7 01 00       	call   c0027e5b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 45 ce 01 00       	call   c00284d8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 01 d7 01 00       	call   c0028dab <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 8b c7 01 00       	call   c0027e5b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 e8 cd 01 00       	call   c00284d8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 a4 d6 01 00       	call   c0028dab <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 2e c7 01 00       	call   c0027e5b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 8b cd 01 00       	call   c00284d8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 47 d6 01 00       	call   c0028dab <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 d1 c6 01 00       	call   c0027e5b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 2e cd 01 00       	call   c00284d8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ea d5 01 00       	call   c0028dab <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 74 c6 01 00       	call   c0027e5b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 d1 cc 01 00       	call   c00284d8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 8d d5 01 00       	call   c0028dab <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 17 c6 01 00       	call   c0027e5b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 74 cc 01 00       	call   c00284d8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 30 d5 01 00       	call   c0028dab <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 2c cc 01 00       	call   c00284d8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 a4 d6 01 00       	jmp    c0028f60 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 0e d3 01 00       	call   c0028da7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 cc d2 01 00       	call   c0028d89 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 63 d0 01 00       	call   c0028b3b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 64 c3 01 00       	call   c0027e5b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 33 d0 01 00       	call   c0028b3b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 9a cc 01 00       	call   c00287bc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 39 d2 01 00       	call   c0028d89 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 3c d2 01 00       	call   c0028da7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 0f d2 01 00       	call   c0028da7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 08 cc 01 00       	call   c00287bc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 92 d3 01 00       	call   c0028f60 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 6d d3 01 00       	call   c0028f60 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 3f cf 01 00       	call   c0028b3b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 96 c8 01 00       	call   c00284ac <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 75 d1 01 00       	call   c0028da7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 0e c2 01 00       	call   c0027e5b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 32 c8 01 00       	call   c00284ac <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 d4 d2 01 00       	call   c0028f60 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 0c cb 01 00       	call   c00287bc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 89 c1 01 00       	call   c0027e5b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 b5 cd 01 00       	call   c0028b3b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 b5 c0 01 00       	call   c0027e5b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 95 c0 01 00       	call   c0027e5b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 65 cd 01 00       	call   c0028b3b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 b5 cf 01 00       	call   c0028da5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 94 c6 01 00       	call   c00284ac <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 16 d1 01 00       	call   c0028f40 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 3d cf 01 00       	call   c0028d89 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 3b c6 01 00       	call   c00284ac <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 b9 cc 01 00       	call   c0028b3b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 3c c6 01 00       	call   c00284d8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 8e cc 01 00       	call   c0028b3b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 f5 c8 01 00       	call   c00287bc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 74 bf 01 00       	call   c0027e5b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 3e cc 01 00       	call   c0028b3b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 8a ce 01 00       	call   c0028da7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 7f c5 01 00       	call   c00284d8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 51 c5 01 00       	call   c00284d8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 8a cb 01 00       	call   c0028b3b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 ee c7 01 00       	call   c00287bc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 b6 c7 01 00       	call   c00287bc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 35 be 01 00       	call   c0027e5b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 22 cf 01 00       	call   c0028f60 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 f4 ca 01 00       	call   c0028b3b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 4b c4 01 00       	call   c00284ac <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 2a cd 01 00       	call   c0028da7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 c2 bd 01 00       	call   c0027e5b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 e6 c3 01 00       	call   c00284ac <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 88 ce 01 00       	call   c0028f60 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 49 cc 01 00       	call   c0028da7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 07 cc 01 00       	call   c0028d89 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 9e c9 01 00       	call   c0028b3b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 9f bc 01 00       	call   c0027e5b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 6e c9 01 00       	call   c0028b3b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 d5 c5 01 00       	call   c00287bc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 74 cb 01 00       	call   c0028d89 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 77 cb 01 00       	call   c0028da7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 4a cb 01 00       	call   c0028da7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 43 c5 01 00       	call   c00287bc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 cd cc 01 00       	call   c0028f60 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 a8 cc 01 00       	call   c0028f60 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 7a c8 01 00       	call   c0028b3b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 d1 c1 01 00       	call   c00284ac <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 b0 ca 01 00       	call   c0028da7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 49 bb 01 00       	call   c0027e5b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 6d c1 01 00       	call   c00284ac <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 0f cc 01 00       	call   c0028f60 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 47 c4 01 00       	call   c00287bc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 c4 ba 01 00       	call   c0027e5b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ef c6 01 00       	call   c0028b3b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ef b9 01 00       	call   c0027e5b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 cf b9 01 00       	call   c0027e5b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 9f c6 01 00       	call   c0028b3b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ef c8 01 00       	call   c0028da5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 cd bf 01 00       	call   c00284ac <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 4f ca 01 00       	call   c0028f40 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 76 c8 01 00       	call   c0028d89 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 73 bf 01 00       	call   c00284ac <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 f1 c5 01 00       	call   c0028b3b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 74 bf 01 00       	call   c00284d8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 c6 c5 01 00       	call   c0028b3b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 2d c2 01 00       	call   c00287bc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ac b8 01 00       	call   c0027e5b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 76 c5 01 00       	call   c0028b3b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 c2 c7 01 00       	call   c0028da7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 b7 be 01 00       	call   c00284d8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 89 be 01 00       	call   c00284d8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 c0 c4 01 00       	call   c0028b3b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 24 c1 01 00       	call   c00287bc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 f1 c0 01 00       	call   c00287bc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 70 b7 01 00       	call   c0027e5b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 5d c8 01 00       	call   c0028f60 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 2f c4 01 00       	call   c0028b3b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 86 bd 01 00       	call   c00284ac <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 65 c6 01 00       	call   c0028da7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 fd b6 01 00       	call   c0027e5b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 21 bd 01 00       	call   c00284ac <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 c3 c7 01 00       	call   c0028f60 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 84 c5 01 00       	call   c0028da7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 42 c5 01 00       	call   c0028d89 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 d9 c2 01 00       	call   c0028b3b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 da b5 01 00       	call   c0027e5b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 a9 c2 01 00       	call   c0028b3b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 10 bf 01 00       	call   c00287bc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 af c4 01 00       	call   c0028d89 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 b2 c4 01 00       	call   c0028da7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 85 c4 01 00       	call   c0028da7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 7e be 01 00       	call   c00287bc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 08 c6 01 00       	call   c0028f60 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 e3 c5 01 00       	call   c0028f60 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 b5 c1 01 00       	call   c0028b3b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 0c bb 01 00       	call   c00284ac <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 eb c3 01 00       	call   c0028da7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 84 b4 01 00       	call   c0027e5b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 a8 ba 01 00       	call   c00284ac <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 4a c5 01 00       	call   c0028f60 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 82 bd 01 00       	call   c00287bc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 ff b3 01 00       	call   c0027e5b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 2a c0 01 00       	call   c0028b3b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 2a b3 01 00       	call   c0027e5b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 0a b3 01 00       	call   c0027e5b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 da bf 01 00       	call   c0028b3b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 2a c2 01 00       	call   c0028da5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 08 b9 01 00       	call   c00284ac <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 8a c3 01 00       	call   c0028f40 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 b1 c1 01 00       	call   c0028d89 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ae b8 01 00       	call   c00284ac <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 2c bf 01 00       	call   c0028b3b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 af b8 01 00       	call   c00284d8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 01 bf 01 00       	call   c0028b3b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 68 bb 01 00       	call   c00287bc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 e7 b1 01 00       	call   c0027e5b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 b1 be 01 00       	call   c0028b3b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 fd c0 01 00       	call   c0028da7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 f2 b7 01 00       	call   c00284d8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 c4 b7 01 00       	call   c00284d8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 fb bd 01 00       	call   c0028b3b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 5f ba 01 00       	call   c00287bc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 2c ba 01 00       	call   c00287bc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 ab b0 01 00       	call   c0027e5b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 98 c1 01 00       	call   c0028f60 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 6a bd 01 00       	call   c0028b3b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 c1 b6 01 00       	call   c00284ac <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 a0 bf 01 00       	call   c0028da7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 38 b0 01 00       	call   c0027e5b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 5c b6 01 00       	call   c00284ac <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 fe c0 01 00       	call   c0028f60 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 bf be 01 00       	call   c0028da7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 7d be 01 00       	call   c0028d89 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 14 bc 01 00       	call   c0028b3b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 15 af 01 00       	call   c0027e5b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 e4 bb 01 00       	call   c0028b3b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 4b b8 01 00       	call   c00287bc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ea bd 01 00       	call   c0028d89 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 ed bd 01 00       	call   c0028da7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 c0 bd 01 00       	call   c0028da7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 b9 b7 01 00       	call   c00287bc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 43 bf 01 00       	call   c0028f60 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 1e bf 01 00       	call   c0028f60 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 f0 ba 01 00       	call   c0028b3b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 47 b4 01 00       	call   c00284ac <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 26 bd 01 00       	call   c0028da7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 bf ad 01 00       	call   c0027e5b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 e3 b3 01 00       	call   c00284ac <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 85 be 01 00       	call   c0028f60 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 bd b6 01 00       	call   c00287bc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 3a ad 01 00       	call   c0027e5b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 65 b9 01 00       	call   c0028b3b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 65 ac 01 00       	call   c0027e5b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 45 ac 01 00       	call   c0027e5b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 15 b9 01 00       	call   c0028b3b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 65 bb 01 00       	call   c0028da5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 43 b2 01 00       	call   c00284ac <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 c5 bc 01 00       	call   c0028f40 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 ec ba 01 00       	call   c0028d89 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 e9 b1 01 00       	call   c00284ac <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 67 b8 01 00       	call   c0028b3b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ea b1 01 00       	call   c00284d8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 3c b8 01 00       	call   c0028b3b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 a3 b4 01 00       	call   c00287bc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 22 ab 01 00       	call   c0027e5b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 ec b7 01 00       	call   c0028b3b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 38 ba 01 00       	call   c0028da7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 2d b1 01 00       	call   c00284d8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 ff b0 01 00       	call   c00284d8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 36 b7 01 00       	call   c0028b3b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 9a b3 01 00       	call   c00287bc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 67 b3 01 00       	call   c00287bc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 e6 a9 01 00       	call   c0027e5b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 d3 ba 01 00       	call   c0028f60 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 a5 b6 01 00       	call   c0028b3b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 fc af 01 00       	call   c00284ac <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 db b8 01 00       	call   c0028da7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 73 a9 01 00       	call   c0027e5b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 97 af 01 00       	call   c00284ac <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 39 ba 01 00       	call   c0028f60 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 f7 b7 01 00       	call   c0028da7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 b5 b7 01 00       	call   c0028d89 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 4c b5 01 00       	call   c0028b3b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 4d a8 01 00       	call   c0027e5b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 1c b5 01 00       	call   c0028b3b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 83 b1 01 00       	call   c00287bc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 22 b7 01 00       	call   c0028d89 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 25 b7 01 00       	call   c0028da7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 f8 b6 01 00       	call   c0028da7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 f1 b0 01 00       	call   c00287bc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 7b b8 01 00       	call   c0028f60 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 52 b8 01 00       	call   c0028f60 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 24 b4 01 00       	call   c0028b3b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 7b ad 01 00       	call   c00284ac <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 5a b6 01 00       	call   c0028da7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 f3 a6 01 00       	call   c0027e5b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 1b ad 01 00       	call   c00284ac <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 bd b7 01 00       	call   c0028f60 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 f6 af 01 00       	call   c00287bc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 73 a6 01 00       	call   c0027e5b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 9f b2 01 00       	call   c0028b3b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 9f a5 01 00       	call   c0027e5b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 7f a5 01 00       	call   c0027e5b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 4f b2 01 00       	call   c0028b3b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 83 b4 01 00       	call   c0028d89 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 7a ab 01 00       	call   c00284ac <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 fc b5 01 00       	call   c0028f40 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 23 b4 01 00       	call   c0028d89 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 1d ab 01 00       	call   c00284ac <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 9b b1 01 00       	call   c0028b3b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 1e ab 01 00       	call   c00284d8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 70 b1 01 00       	call   c0028b3b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 d7 ad 01 00       	call   c00287bc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 56 a4 01 00       	call   c0027e5b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 20 b1 01 00       	call   c0028b3b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 6c b3 01 00       	call   c0028da7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 61 aa 01 00       	call   c00284d8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 33 aa 01 00       	call   c00284d8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 77 b0 01 00       	call   c0028b3b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 de ac 01 00       	call   c00287bc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 c7 a9 01 00       	call   c00284d8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 83 b2 01 00       	call   c0028dab <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 76 ac 01 00       	call   c00287bc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 f5 a2 01 00       	call   c0027e5b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 e2 b3 01 00       	call   c0028f60 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 b4 af 01 00       	call   c0028b3b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 0b a9 01 00       	call   c00284ac <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ea b1 01 00       	call   c0028da7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 82 a2 01 00       	call   c0027e5b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 aa a8 01 00       	call   c00284ac <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 4c b3 01 00       	call   c0028f60 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 9b 1c 00 00       	call   c000f912 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 ff af 01 00       	call   c0028da7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 bd af 01 00       	call   c0028d89 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 a9 af 01 00       	call   c0028da7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 1b ad 01 00       	call   c0028b3b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 99 a6 01 00       	call   c00284d8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 eb ac 01 00       	call   c0028b3b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 f1 9f 01 00       	call   c0027e5b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 c0 ac 01 00       	call   c0028b3b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 10 af 01 00       	call   c0028da5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 f1 a5 01 00       	call   c00284ac <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 73 b0 01 00       	call   c0028f40 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 9a ae 01 00       	call   c0028d89 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 99 a5 01 00       	call   c00284ac <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 17 ac 01 00       	call   c0028b3b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 9a a5 01 00       	call   c00284d8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 ec ab 01 00       	call   c0028b3b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 53 a8 01 00       	call   c00287bc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 d2 9e 01 00       	call   c0027e5b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 fa a7 01 00       	call   c00287bc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 80 9e 01 00       	call   c0027e5b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 6e af 01 00       	call   c0028f60 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 40 ab 01 00       	call   c0028b3b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 97 a4 01 00       	call   c00284ac <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 76 ad 01 00       	call   c0028da7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 0f 9e 01 00       	call   c0027e5b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 3b a4 01 00       	call   c00284ac <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 dd ae 01 00       	call   c0028f60 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 8a aa 01 00       	call   c0028b3b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 07 a4 01 00       	call   c00284d8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 58 aa 01 00       	call   c0028b3b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 5e 9d 01 00       	call   c0027e5b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 2e aa 01 00       	call   c0028b3b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 82 ac 01 00       	call   c0028da9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 5b a3 01 00       	call   c00284ac <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 dd ad 01 00       	call   c0028f40 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 04 ac 01 00       	call   c0028d89 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 02 a3 01 00       	call   c00284ac <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 80 a9 01 00       	call   c0028b3b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 03 a3 01 00       	call   c00284d8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 55 a9 01 00       	call   c0028b3b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 bc a5 01 00       	call   c00287bc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 3b 9c 01 00       	call   c0027e5b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 57 a5 01 00       	call   c00287bc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 d6 9b 01 00       	call   c0027e5b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 c4 ac 01 00       	call   c0028f60 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 96 a8 01 00       	call   c0028b3b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 ed a1 01 00       	call   c00284ac <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 cc aa 01 00       	call   c0028da7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 65 9b 01 00       	call   c0027e5b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 91 a1 01 00       	call   c00284ac <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 02 a8 01 00       	call   c0028b3b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 08 9b 01 00       	call   c0027e5b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e a9 02 c0       	mov    eax,0xc002a95e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f a9 02 c0       	mov    eax,0xc002a96f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 dd 14 00 00       	call   c000f912 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 df 14 00 00       	call   c000f932 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 59 14 00 00       	jmp    c000f902 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 74 14 00 00       	jmp    c000f922 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c000e4e3:	ff 05 64 27 03 c0    	inc    DWORD PTR ds:0xc0032764
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 60 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032760,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c000e50d:	e8 56 fc 00 00       	call   c001e168 <schedule()>
c000e512:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000e517:	48                   	dec    eax
c000e518:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 a9 02 c0       	push   0xc002a9a6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 48 f2 02 c0       	mov    eax,0xc002f248
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af a9 02 c0       	push   0xc002a9af
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 d4 72 02 c0       	mov    eax,0xc00272d4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 a9 02 c0       	push   0xc002a9b9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 08 70 02 c0       	mov    eax,0xc0027008
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 a9 02 c0       	push   0xc002a9c2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 d4 73 02 c0       	mov    eax,0xc00273d4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc a9 02 c0       	push   0xc002a9cc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 54 71 02 c0       	mov    eax,0xc0027154
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 a9 02 c0       	push   0xc002a9d5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 4c f2 02 c0       	mov    eax,0xc002f24c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 a9 02 c0       	push   0xc002a9e2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 4d f2 02 c0       	mov    eax,0xc002f24d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 51 58 00 00       	call   c0013ebe <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef a9 02 c0       	push   0xc002a9ef
c000e69e:	e8 b9 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 53 12 00 00       	call   c000f902 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c000e6be:	68 08 aa 02 c0       	push   0xc002aa08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 61 f6 00 00       	call   c001dd2c <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 95 f2 00 c0       	push   0xc000f295
c000e6da:	53                   	push   ebx
c000e6db:	e8 44 f8 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 a2 e9 01 c0       	push   0xc001e9a2
c000e6e9:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c000e6ef:	e8 30 f8 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 48 27 03 c0       	mov    ds:0xc0032748,eax
c000e6fc:	68 38 ac 02 c0       	push   0xc002ac38
c000e701:	c6 05 4d f2 02 c0 01 	mov    BYTE PTR ds:0xc002f24d,0x1
c000e708:	e8 4f 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e70d:	e8 c7 06 01 00       	call   c001edd9 <Vm::initialise8086()>
c000e712:	e8 6f 45 00 00       	call   c0012c86 <Fs::initVFS()>
c000e717:	c7 04 24 15 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa15
c000e71e:	e8 39 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e723:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 38 ac 02 c0       	push   0xc002ac38
c000e742:	e8 15 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e747:	e8 6d de 00 00       	call   c001c5b9 <Sys::loadSyscalls()>
c000e74c:	e8 25 bb 00 00       	call   c001a276 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f aa 02 c0       	push   0xc002aa2f
c000e75b:	68 38 aa 02 c0       	push   0xc002aa38
c000e760:	e8 06 ca 00 00       	call   c001b16b <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 09 50 00 00       	call   c0013776 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 5c ac 02 c0 	mov    DWORD PTR [esp],0xc002ac5c
c000e774:	e8 e3 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 f4 56 00 00       	call   c0013e7e <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa40
c000e791:	e8 c6 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e796:	e8 27 b6 00 00       	call   c0019dc2 <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a aa 02 c0 	mov    DWORD PTR [esp],0xc002aa5a
c000e7a2:	e8 b5 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b aa 02 c0       	push   0xc002aa6b
c000e7b6:	e8 ce ef 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 f0 f1 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 96 fb 00 00       	call   c001e367 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 aa 02 c0       	push   0xc002aa87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 4d 57 00 00       	call   c0013f38 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 61 f2 02 c0 04 	test   BYTE PTR ds:0xc002f261,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 17 86 01 00       	call   c0026f96 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 18 a1 00 00       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 f1 a0 00 00       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 cf a0 00 00       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 ad a0 00 00       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 60 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f260,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 bb 9f 00 00       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 96 9f 00 00       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 81 84 01 00       	call   c0026f50 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 3e 84 01 00       	call   c0026f30 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 b2 9f 00 00       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	53                   	push   ebx
c000eb3f:	83 ec 14             	sub    esp,0x14
c000eb42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb46:	68 97 aa 02 c0       	push   0xc002aa97
c000eb4b:	e8 ab 3d 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb5a:	0f 85 73 02 00 00    	jne    c000edd3 <Computer::displayFeatures()+0x295>
c000eb60:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000eb65:	83 ec 08             	sub    esp,0x8
c000eb68:	50                   	push   eax
c000eb69:	68 aa aa 02 c0       	push   0xc002aaaa
c000eb6e:	e8 88 3d 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb7d:	0f 85 8c 02 00 00    	jne    c000ee0f <Computer::displayFeatures()+0x2d1>
c000eb83:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	50                   	push   eax
c000eb8c:	68 bb aa 02 c0       	push   0xc002aabb
c000eb91:	e8 65 3d 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eba0:	0f 85 5f 02 00 00    	jne    c000ee05 <Computer::displayFeatures()+0x2c7>
c000eba6:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ebab:	83 ec 08             	sub    esp,0x8
c000ebae:	50                   	push   eax
c000ebaf:	68 cc aa 02 c0       	push   0xc002aacc
c000ebb4:	e8 42 3d 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebc3:	0f 85 32 02 00 00    	jne    c000edfb <Computer::displayFeatures()+0x2bd>
c000ebc9:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ebce:	83 ec 08             	sub    esp,0x8
c000ebd1:	50                   	push   eax
c000ebd2:	68 dd aa 02 c0       	push   0xc002aadd
c000ebd7:	e8 1f 3d 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ebdc:	83 c4 10             	add    esp,0x10
c000ebdf:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebe6:	0f 85 05 02 00 00    	jne    c000edf1 <Computer::displayFeatures()+0x2b3>
c000ebec:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ebf1:	83 ec 08             	sub    esp,0x8
c000ebf4:	50                   	push   eax
c000ebf5:	68 ee aa 02 c0       	push   0xc002aaee
c000ebfa:	e8 fc 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec09:	0f 85 d8 01 00 00    	jne    c000ede7 <Computer::displayFeatures()+0x2a9>
c000ec0f:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ec14:	83 ec 08             	sub    esp,0x8
c000ec17:	50                   	push   eax
c000ec18:	68 ff aa 02 c0       	push   0xc002aaff
c000ec1d:	e8 d9 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ec22:	83 c4 10             	add    esp,0x10
c000ec25:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec2c:	0f 85 ab 01 00 00    	jne    c000eddd <Computer::displayFeatures()+0x29f>
c000ec32:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ec37:	83 ec 08             	sub    esp,0x8
c000ec3a:	50                   	push   eax
c000ec3b:	68 10 ab 02 c0       	push   0xc002ab10
c000ec40:	e8 b6 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec4f:	0f 88 1b 02 00 00    	js     c000ee70 <Computer::displayFeatures()+0x332>
c000ec55:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ec5a:	83 ec 08             	sub    esp,0x8
c000ec5d:	50                   	push   eax
c000ec5e:	68 21 ab 02 c0       	push   0xc002ab21
c000ec63:	e8 93 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ec68:	83 c4 10             	add    esp,0x10
c000ec6b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec72:	0f 85 a1 01 00 00    	jne    c000ee19 <Computer::displayFeatures()+0x2db>
c000ec78:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ec7d:	83 ec 08             	sub    esp,0x8
c000ec80:	50                   	push   eax
c000ec81:	68 32 ab 02 c0       	push   0xc002ab32
c000ec86:	e8 70 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ec8b:	83 c4 10             	add    esp,0x10
c000ec8e:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec95:	0f 85 cb 01 00 00    	jne    c000ee66 <Computer::displayFeatures()+0x328>
c000ec9b:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000eca0:	83 ec 08             	sub    esp,0x8
c000eca3:	50                   	push   eax
c000eca4:	68 43 ab 02 c0       	push   0xc002ab43
c000eca9:	e8 4d 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ecae:	83 c4 10             	add    esp,0x10
c000ecb1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecb8:	0f 85 9e 01 00 00    	jne    c000ee5c <Computer::displayFeatures()+0x31e>
c000ecbe:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ecc3:	83 ec 08             	sub    esp,0x8
c000ecc6:	50                   	push   eax
c000ecc7:	68 54 ab 02 c0       	push   0xc002ab54
c000eccc:	e8 2a 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ecd1:	83 c4 10             	add    esp,0x10
c000ecd4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecdb:	0f 85 71 01 00 00    	jne    c000ee52 <Computer::displayFeatures()+0x314>
c000ece1:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ece6:	83 ec 08             	sub    esp,0x8
c000ece9:	50                   	push   eax
c000ecea:	68 65 ab 02 c0       	push   0xc002ab65
c000ecef:	e8 07 3c 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ecf4:	83 c4 10             	add    esp,0x10
c000ecf7:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecfe:	0f 85 44 01 00 00    	jne    c000ee48 <Computer::displayFeatures()+0x30a>
c000ed04:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ed09:	83 ec 08             	sub    esp,0x8
c000ed0c:	50                   	push   eax
c000ed0d:	68 76 ab 02 c0       	push   0xc002ab76
c000ed12:	e8 e4 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed21:	0f 85 17 01 00 00    	jne    c000ee3e <Computer::displayFeatures()+0x300>
c000ed27:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ed2c:	83 ec 08             	sub    esp,0x8
c000ed2f:	50                   	push   eax
c000ed30:	68 87 ab 02 c0       	push   0xc002ab87
c000ed35:	e8 c1 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ed3a:	83 c4 10             	add    esp,0x10
c000ed3d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed44:	0f 85 ea 00 00 00    	jne    c000ee34 <Computer::displayFeatures()+0x2f6>
c000ed4a:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ed4f:	83 ec 08             	sub    esp,0x8
c000ed52:	50                   	push   eax
c000ed53:	68 98 ab 02 c0       	push   0xc002ab98
c000ed58:	e8 9e 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ed5d:	83 c4 10             	add    esp,0x10
c000ed60:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed67:	0f 88 0d 01 00 00    	js     c000ee7a <Computer::displayFeatures()+0x33c>
c000ed6d:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ed72:	83 ec 08             	sub    esp,0x8
c000ed75:	50                   	push   eax
c000ed76:	68 a9 ab 02 c0       	push   0xc002aba9
c000ed7b:	e8 7b 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed8a:	0f 85 9a 00 00 00    	jne    c000ee2a <Computer::displayFeatures()+0x2ec>
c000ed90:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000ed95:	83 ec 08             	sub    esp,0x8
c000ed98:	50                   	push   eax
c000ed99:	68 ba ab 02 c0       	push   0xc002abba
c000ed9e:	e8 58 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edad:	75 74                	jne    c000ee23 <Computer::displayFeatures()+0x2e5>
c000edaf:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c000edb4:	83 ec 08             	sub    esp,0x8
c000edb7:	50                   	push   eax
c000edb8:	68 cb ab 02 c0       	push   0xc002abcb
c000edbd:	e8 39 3b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000edc2:	c7 44 24 20 bc c6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c6bc
c000edca:	83 c4 18             	add    esp,0x18
c000edcd:	5b                   	pop    ebx
c000edce:	e9 28 3b 00 00       	jmp    c00128fb <Dbg::kprintf(char const*, ...)>
c000edd3:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000edd8:	e9 88 fd ff ff       	jmp    c000eb65 <Computer::displayFeatures()+0x27>
c000eddd:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ede2:	e9 50 fe ff ff       	jmp    c000ec37 <Computer::displayFeatures()+0xf9>
c000ede7:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000edec:	e9 23 fe ff ff       	jmp    c000ec14 <Computer::displayFeatures()+0xd6>
c000edf1:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000edf6:	e9 f6 fd ff ff       	jmp    c000ebf1 <Computer::displayFeatures()+0xb3>
c000edfb:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee00:	e9 c9 fd ff ff       	jmp    c000ebce <Computer::displayFeatures()+0x90>
c000ee05:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee0a:	e9 9c fd ff ff       	jmp    c000ebab <Computer::displayFeatures()+0x6d>
c000ee0f:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee14:	e9 6f fd ff ff       	jmp    c000eb88 <Computer::displayFeatures()+0x4a>
c000ee19:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee1e:	e9 5a fe ff ff       	jmp    c000ec7d <Computer::displayFeatures()+0x13f>
c000ee23:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee28:	eb 8a                	jmp    c000edb4 <Computer::displayFeatures()+0x276>
c000ee2a:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee2f:	e9 61 ff ff ff       	jmp    c000ed95 <Computer::displayFeatures()+0x257>
c000ee34:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee39:	e9 11 ff ff ff       	jmp    c000ed4f <Computer::displayFeatures()+0x211>
c000ee3e:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee43:	e9 e4 fe ff ff       	jmp    c000ed2c <Computer::displayFeatures()+0x1ee>
c000ee48:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee4d:	e9 b7 fe ff ff       	jmp    c000ed09 <Computer::displayFeatures()+0x1cb>
c000ee52:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee57:	e9 8a fe ff ff       	jmp    c000ece6 <Computer::displayFeatures()+0x1a8>
c000ee5c:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee61:	e9 5d fe ff ff       	jmp    c000ecc3 <Computer::displayFeatures()+0x185>
c000ee66:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee6b:	e9 30 fe ff ff       	jmp    c000eca0 <Computer::displayFeatures()+0x162>
c000ee70:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee75:	e9 e0 fd ff ff       	jmp    c000ec5a <Computer::displayFeatures()+0x11c>
c000ee7a:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c000ee7f:	e9 ee fe ff ff       	jmp    c000ed72 <Computer::displayFeatures()+0x234>

c000ee84 <Computer::rdmsr(unsigned int)>:
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee8b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee92:	74 0a                	je     c000ee9e <Computer::rdmsr(unsigned int)+0x1a>
c000ee94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee98:	0f 32                	rdmsr  
c000ee9a:	83 c4 0c             	add    esp,0xc
c000ee9d:	c3                   	ret    
c000ee9e:	83 ec 0c             	sub    esp,0xc
c000eea1:	68 dc ab 02 c0       	push   0xc002abdc
c000eea6:	e8 04 b5 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	eb e4                	jmp    c000ee94 <Computer::rdmsr(unsigned int)+0x10>

c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeb0:	57                   	push   edi
c000eeb1:	56                   	push   esi
c000eeb2:	52                   	push   edx
c000eeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeb7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eebb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eebf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eec6:	74 0e                	je     c000eed6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eec8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eecc:	89 f0                	mov    eax,esi
c000eece:	89 fa                	mov    edx,edi
c000eed0:	0f 30                	wrmsr  
c000eed2:	58                   	pop    eax
c000eed3:	5e                   	pop    esi
c000eed4:	5f                   	pop    edi
c000eed5:	c3                   	ret    
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	68 e2 ab 02 c0       	push   0xc002abe2
c000eede:	e8 cc b4 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	eb e0                	jmp    c000eec8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eee8 <Computer::nmiEnabled()>:
c000eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeec:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eef2:	c3                   	ret    
c000eef3:	90                   	nop

c000eef4 <Computer::readCMOS(unsigned char)>:
c000eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eeff:	19 c0                	sbb    eax,eax
c000ef01:	83 e0 80             	and    eax,0xffffff80
c000ef04:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef08:	e6 70                	out    0x70,al
c000ef0a:	e4 71                	in     al,0x71
c000ef0c:	c3                   	ret    
c000ef0d:	90                   	nop

c000ef0e <Computer::enableNMI(bool)>:
c000ef0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef16:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef1c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef24:	eb ce                	jmp    c000eef4 <Computer::readCMOS(unsigned char)>

c000ef26 <Computer::open(int, int, void*)>:
c000ef26:	56                   	push   esi
c000ef27:	53                   	push   ebx
c000ef28:	83 ec 10             	sub    esp,0x10
c000ef2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef2f:	68 7c ac 02 c0       	push   0xc002ac7c
c000ef34:	e8 23 0a 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000ef39:	f6 05 60 f2 02 c0 04 	test   BYTE PTR ds:0xc002f260,0x4
c000ef40:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ef47:	0f 94 05 80 e1 02 c0 	sete   BYTE PTR ds:0xc002e180
c000ef4e:	e8 af 09 00 00       	call   c000f902 <malloc>
c000ef53:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef56:	89 c6                	mov    esi,eax
c000ef58:	e8 33 8e 00 00       	call   c0017d90 <ACPI::ACPI()>
c000ef5d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef63:	58                   	pop    eax
c000ef64:	5a                   	pop    edx
c000ef65:	56                   	push   esi
c000ef66:	53                   	push   ebx
c000ef67:	e8 c8 4d 00 00       	call   c0013d34 <Device::addChild(Device*)>
c000ef6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef6f:	e8 c0 f9 ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ef74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef77:	e8 c2 fb ff ff       	call   c000eb3e <Computer::displayFeatures()>
c000ef7c:	59                   	pop    ecx
c000ef7d:	5e                   	pop    esi
c000ef7e:	6a 01                	push   0x1
c000ef80:	53                   	push   ebx
c000ef81:	e8 88 ff ff ff       	call   c000ef0e <Computer::enableNMI(bool)>
c000ef86:	c7 04 24 40 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa40
c000ef8d:	e8 ca 09 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000ef92:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef99:	e8 64 09 00 00       	call   c000f902 <malloc>
c000ef9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000efa1:	89 c6                	mov    esi,eax
c000efa3:	e8 e2 9b 00 00       	call   c0018b8a <CPU::CPU()>
c000efa8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efae:	58                   	pop    eax
c000efaf:	5a                   	pop    edx
c000efb0:	56                   	push   esi
c000efb1:	53                   	push   ebx
c000efb2:	e8 7d 4d 00 00       	call   c0013d34 <Device::addChild(Device*)>
c000efb7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efbd:	8b 10                	mov    edx,DWORD PTR [eax]
c000efbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efc3:	6a 00                	push   0x0
c000efc5:	6a 00                	push   0x0
c000efc7:	50                   	push   eax
c000efc8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efcb:	83 c4 20             	add    esp,0x20
c000efce:	e8 09 53 00 00       	call   c00142dc <setupFPU()>
c000efd3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efd9:	85 c0                	test   eax,eax
c000efdb:	74 1f                	je     c000effc <Computer::open(int, int, void*)+0xd6>
c000efdd:	83 ec 08             	sub    esp,0x8
c000efe0:	50                   	push   eax
c000efe1:	53                   	push   ebx
c000efe2:	e8 4d 4d 00 00       	call   c0013d34 <Device::addChild(Device*)>
c000efe7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efed:	8b 10                	mov    edx,DWORD PTR [eax]
c000efef:	6a 00                	push   0x0
c000eff1:	6a 00                	push   0x0
c000eff3:	6a 00                	push   0x0
c000eff5:	50                   	push   eax
c000eff6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	83 ec 0c             	sub    esp,0xc
c000efff:	68 e8 ab 02 c0       	push   0xc002abe8
c000f004:	e8 53 09 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000f009:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000f010:	e8 31 f0 00 00       	call   c001e046 <setupMultitasking(void (*)())>
c000f015:	83 c4 14             	add    esp,0x14
c000f018:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f01d:	5b                   	pop    ebx
c000f01e:	5e                   	pop    esi
c000f01f:	c3                   	ret    

c000f020 <Computer::disableNMI()>:
c000f020:	6a 00                	push   0x0
c000f022:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f026:	e8 e3 fe ff ff       	call   c000ef0e <Computer::enableNMI(bool)>
c000f02b:	58                   	pop    eax
c000f02c:	5a                   	pop    edx
c000f02d:	c3                   	ret    

c000f02e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f032:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f039:	19 c0                	sbb    eax,eax
c000f03b:	83 e0 80             	and    eax,0xffffff80
c000f03e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f042:	e6 70                	out    0x70,al
c000f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f048:	e6 71                	out    0x71,al
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <Computer::handleNMI()>:
c000f04c:	56                   	push   esi
c000f04d:	53                   	push   ebx
c000f04e:	83 ec 10             	sub    esp,0x10
c000f051:	e4 92                	in     al,0x92
c000f053:	89 c6                	mov    esi,eax
c000f055:	e4 61                	in     al,0x61
c000f057:	68 03 ac 02 c0       	push   0xc002ac03
c000f05c:	88 c3                	mov    bl,al
c000f05e:	e8 98 38 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000f063:	83 c4 10             	add    esp,0x10
c000f066:	83 e6 10             	and    esi,0x10
c000f069:	75 0d                	jne    c000f078 <Computer::handleNMI()+0x2c>
c000f06b:	f6 c3 40             	test   bl,0x40
c000f06e:	75 1d                	jne    c000f08d <Computer::handleNMI()+0x41>
c000f070:	84 db                	test   bl,bl
c000f072:	78 2d                	js     c000f0a1 <Computer::handleNMI()+0x55>
c000f074:	58                   	pop    eax
c000f075:	5b                   	pop    ebx
c000f076:	5e                   	pop    esi
c000f077:	c3                   	ret    
c000f078:	83 ec 0c             	sub    esp,0xc
c000f07b:	68 14 ac 02 c0       	push   0xc002ac14
c000f080:	e8 2a b3 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	f6 c3 40             	test   bl,0x40
c000f08b:	74 e3                	je     c000f070 <Computer::handleNMI()+0x24>
c000f08d:	83 ec 0c             	sub    esp,0xc
c000f090:	68 21 ac 02 c0       	push   0xc002ac21
c000f095:	e8 15 b3 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000f09a:	83 c4 10             	add    esp,0x10
c000f09d:	84 db                	test   bl,bl
c000f09f:	79 d3                	jns    c000f074 <Computer::handleNMI()+0x28>
c000f0a1:	c7 44 24 10 2b ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac2b
c000f0a9:	5a                   	pop    edx
c000f0aa:	5b                   	pop    ebx
c000f0ab:	5e                   	pop    esi
c000f0ac:	e9 fe b2 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c000f0b1:	90                   	nop

c000f0b2 <Computer::setDiskActivityLight(int, bool)>:
c000f0b2:	56                   	push   esi
c000f0b3:	53                   	push   ebx
c000f0b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0b8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0bd:	77 1b                	ja     c000f0da <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0bf:	e4 92                	in     al,0x92
c000f0c1:	bb 40 00 00 00       	mov    ebx,0x40
c000f0c6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0ca:	89 da                	mov    edx,ebx
c000f0cc:	d3 e2                	shl    edx,cl
c000f0ce:	89 f1                	mov    ecx,esi
c000f0d0:	f7 d2                	not    edx
c000f0d2:	d3 e3                	shl    ebx,cl
c000f0d4:	21 d0                	and    eax,edx
c000f0d6:	09 d8                	or     eax,ebx
c000f0d8:	e6 92                	out    0x92,al
c000f0da:	5b                   	pop    ebx
c000f0db:	5e                   	pop    esi
c000f0dc:	c3                   	ret    
c000f0dd:	90                   	nop

c000f0de <GDTEntry::setBase(unsigned int)>:
c000f0de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0e6:	89 c1                	mov    ecx,eax
c000f0e8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0ec:	c1 e9 10             	shr    ecx,0x10
c000f0ef:	c1 e8 18             	shr    eax,0x18
c000f0f2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0f5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0f8:	c3                   	ret    
c000f0f9:	90                   	nop

c000f0fa <GDTEntry::setLimit(unsigned int)>:
c000f0fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f102:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f105:	66 89 01             	mov    WORD PTR [ecx],ax
c000f108:	83 e2 f0             	and    edx,0xfffffff0
c000f10b:	c1 e8 10             	shr    eax,0x10
c000f10e:	83 e0 0f             	and    eax,0xf
c000f111:	09 d0                	or     eax,edx
c000f113:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <GDT::GDT()>:
c000f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f126:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f12c:	90                   	nop
c000f12d:	c3                   	ret    

c000f12e <GDT::addEntry(GDTEntry)>:
c000f12e:	53                   	push   ebx
c000f12f:	83 ec 0c             	sub    esp,0xc
c000f132:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f136:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f138:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f13f:	52                   	push   edx
c000f140:	50                   	push   eax
c000f141:	68 cc ac 02 c0       	push   0xc002accc
c000f146:	e8 b0 37 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000f14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f14d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f151:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f155:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f159:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f15d:	8d 50 01             	lea    edx,[eax+0x1]
c000f160:	c1 e0 03             	shl    eax,0x3
c000f163:	89 13                	mov    DWORD PTR [ebx],edx
c000f165:	83 c4 18             	add    esp,0x18
c000f168:	5b                   	pop    ebx
c000f169:	c3                   	ret    

c000f16a <GDT::getNumberOfEntries()>:
c000f16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f16e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f170:	c3                   	ret    
c000f171:	90                   	nop

c000f172 <GDT::flush()>:
c000f172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f176:	8b 10                	mov    edx,DWORD PTR [eax]
c000f178:	83 c0 04             	add    eax,0x4
c000f17b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f182:	a3 52 f2 02 c0       	mov    ds:0xc002f252,eax
c000f187:	66 89 15 50 f2 02 c0 	mov    WORD PTR ds:0xc002f250,dx
c000f18e:	e9 bd 12 ff ff       	jmp    c0000450 <loadGDT>
c000f193:	90                   	nop

c000f194 <GDT::setup()>:
c000f194:	55                   	push   ebp
c000f195:	57                   	push   edi
c000f196:	56                   	push   esi
c000f197:	53                   	push   ebx
c000f198:	83 ec 3c             	sub    esp,0x3c
c000f19b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f19f:	6a 00                	push   0x0
c000f1a1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 33 ff ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 47 ff ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1b3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1bb:	6a 00                	push   0x0
c000f1bd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1c1:	53                   	push   ebx
c000f1c2:	e8 17 ff ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1c7:	68 ff ff ff 00       	push   0xffffff
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 28 ff ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1d6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1db:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1e4:	83 c4 20             	add    esp,0x20
c000f1e7:	6a 00                	push   0x0
c000f1e9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 eb fe ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1f3:	68 ff ff ff 00       	push   0xffffff
c000f1f8:	53                   	push   ebx
c000f1f9:	e8 fc fe ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1fe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f202:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f206:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f20a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f20e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f212:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f217:	0d 00 92 c0 00       	or     eax,0xc09200
c000f21c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f220:	89 d8                	mov    eax,ebx
c000f222:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f226:	80 cc 60             	or     ah,0x60
c000f229:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f22d:	83 c4 0c             	add    esp,0xc
c000f230:	89 f8                	mov    eax,edi
c000f232:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f236:	80 cc 60             	or     ah,0x60
c000f239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f23d:	89 c7                	mov    edi,eax
c000f23f:	55                   	push   ebp
c000f240:	e8 e9 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f245:	83 c4 0c             	add    esp,0xc
c000f248:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f24c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f250:	55                   	push   ebp
c000f251:	e8 d8 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f256:	83 c4 0c             	add    esp,0xc
c000f259:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f25d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f261:	55                   	push   ebp
c000f262:	e8 c7 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f267:	83 c4 0c             	add    esp,0xc
c000f26a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f26e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f272:	53                   	push   ebx
c000f273:	51                   	push   ecx
c000f274:	55                   	push   ebp
c000f275:	e8 b4 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f27a:	83 c4 0c             	add    esp,0xc
c000f27d:	57                   	push   edi
c000f27e:	56                   	push   esi
c000f27f:	55                   	push   ebp
c000f280:	e8 a9 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f285:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f288:	e8 e5 fe ff ff       	call   c000f172 <GDT::flush()>
c000f28d:	83 c4 4c             	add    esp,0x4c
c000f290:	5b                   	pop    ebx
c000f291:	5e                   	pop    esi
c000f292:	5f                   	pop    edi
c000f293:	5d                   	pop    ebp
c000f294:	c3                   	ret    

c000f295 <idleFunction(void*)>:
c000f295:	53                   	push   ebx
c000f296:	83 ec 08             	sub    esp,0x8
c000f299:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000f29e:	48                   	dec    eax
c000f29f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000f2a4:	75 01                	jne    c000f2a7 <idleFunction(void*)+0x12>
c000f2a6:	fb                   	sti    
c000f2a7:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c000f2ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2b2:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2b9:	74 3c                	je     c000f2f7 <idleFunction(void*)+0x62>
c000f2bb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2c2:	74 33                	je     c000f2f7 <idleFunction(void*)+0x62>
c000f2c4:	31 db                	xor    ebx,ebx
c000f2c6:	52                   	push   edx
c000f2c7:	52                   	push   edx
c000f2c8:	68 e1 00 00 00       	push   0xe1
c000f2cd:	50                   	push   eax
c000f2ce:	e8 b1 fb ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c000f2d3:	53                   	push   ebx
c000f2d4:	83 e0 02             	and    eax,0x2
c000f2d7:	50                   	push   eax
c000f2d8:	68 e1 00 00 00       	push   0xe1
c000f2dd:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c000f2e3:	e8 c8 fb ff ff       	call   c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2e8:	83 c4 20             	add    esp,0x20
c000f2eb:	e8 8f 0f ff ff       	call   c000027f <doTPAUSE>
c000f2f0:	e8 eb 9c 01 00       	call   c0028fe0 <idleCommon()>
c000f2f5:	eb f4                	jmp    c000f2eb <idleFunction(void*)+0x56>
c000f2f7:	fb                   	sti    
c000f2f8:	f4                   	hlt    
c000f2f9:	e8 e2 9c 01 00       	call   c0028fe0 <idleCommon()>
c000f2fe:	eb f7                	jmp    c000f2f7 <idleFunction(void*)+0x62>

c000f300 <IDTEntry::IDTEntry(bool)>:
c000f300:	83 ec 04             	sub    esp,0x4
c000f303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f307:	88 04 24             	mov    BYTE PTR [esp],al
c000f30a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f318:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f31c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f320:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f323:	83 e2 f0             	and    edx,0xfffffff0
c000f326:	83 ca 0e             	or     edx,0xe
c000f329:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f32c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f330:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f333:	83 e2 ef             	and    edx,0xffffffef
c000f336:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f339:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f33d:	74 04                	je     c000f343 <IDTEntry::IDTEntry(bool)+0x43>
c000f33f:	b2 03                	mov    dl,0x3
c000f341:	eb 02                	jmp    c000f345 <IDTEntry::IDTEntry(bool)+0x45>
c000f343:	b2 00                	mov    dl,0x0
c000f345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f349:	83 e2 03             	and    edx,0x3
c000f34c:	88 d1                	mov    cl,dl
c000f34e:	c1 e1 05             	shl    ecx,0x5
c000f351:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f354:	83 e2 9f             	and    edx,0xffffff9f
c000f357:	09 ca                	or     edx,ecx
c000f359:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f35c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f360:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f363:	83 ca 80             	or     edx,0xffffff80
c000f366:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f369:	90                   	nop
c000f36a:	83 c4 04             	add    esp,0x4
c000f36d:	c3                   	ret    

c000f36e <IDTEntry::setOffset(unsigned int)>:
c000f36e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f376:	66 89 02             	mov    WORD PTR [edx],ax
c000f379:	c1 e8 10             	shr    eax,0x10
c000f37c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f380:	c3                   	ret    
c000f381:	90                   	nop

c000f382 <IDT::IDT()>:
c000f382:	90                   	nop
c000f383:	c3                   	ret    

c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f388:	83 c0 30             	add    eax,0x30
c000f38b:	c3                   	ret    

c000f38c <IDT::addEntry(IDTEntry, int)>:
c000f38c:	53                   	push   ebx
c000f38d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f391:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f39d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3a0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3a4:	5b                   	pop    ebx
c000f3a5:	c3                   	ret    

c000f3a6 <IDT::addEntry(int, void (*)(), bool)>:
c000f3a6:	53                   	push   ebx
c000f3a7:	83 ec 10             	sub    esp,0x10
c000f3aa:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3af:	50                   	push   eax
c000f3b0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3b4:	53                   	push   ebx
c000f3b5:	e8 46 ff ff ff       	call   c000f300 <IDTEntry::IDTEntry(bool)>
c000f3ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3be:	53                   	push   ebx
c000f3bf:	e8 aa ff ff ff       	call   c000f36e <IDTEntry::setOffset(unsigned int)>
c000f3c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3d4:	e8 b3 ff ff ff       	call   c000f38c <IDT::addEntry(IDTEntry, int)>
c000f3d9:	83 c4 30             	add    esp,0x30
c000f3dc:	5b                   	pop    ebx
c000f3dd:	c3                   	ret    

c000f3de <IDT::flush()>:
c000f3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3e2:	66 c7 05 58 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f258,0x7ff
c000f3eb:	a3 5a f2 02 c0       	mov    ds:0xc002f25a,eax
c000f3f0:	0f 01 1d 58 f2 02 c0 	lidtd  ds:0xc002f258
c000f3f7:	c3                   	ret    

c000f3f8 <IDT::setup()>:
c000f3f8:	57                   	push   edi
c000f3f9:	56                   	push   esi
c000f3fa:	53                   	push   ebx
c000f3fb:	83 ec 10             	sub    esp,0x10
c000f3fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f402:	6a 00                	push   0x0
c000f404:	68 70 04 00 c0       	push   0xc0000470
c000f409:	6a 00                	push   0x0
c000f40b:	53                   	push   ebx
c000f40c:	e8 95 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f411:	6a 00                	push   0x0
c000f413:	68 80 04 00 c0       	push   0xc0000480
c000f418:	6a 01                	push   0x1
c000f41a:	53                   	push   ebx
c000f41b:	e8 86 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f420:	83 c4 20             	add    esp,0x20
c000f423:	6a 00                	push   0x0
c000f425:	68 8a 04 00 c0       	push   0xc000048a
c000f42a:	6a 02                	push   0x2
c000f42c:	53                   	push   ebx
c000f42d:	e8 74 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	6a 00                	push   0x0
c000f434:	68 94 04 00 c0       	push   0xc0000494
c000f439:	6a 03                	push   0x3
c000f43b:	53                   	push   ebx
c000f43c:	e8 65 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f441:	83 c4 20             	add    esp,0x20
c000f444:	6a 00                	push   0x0
c000f446:	68 9e 04 00 c0       	push   0xc000049e
c000f44b:	6a 04                	push   0x4
c000f44d:	53                   	push   ebx
c000f44e:	e8 53 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	6a 00                	push   0x0
c000f455:	68 a8 04 00 c0       	push   0xc00004a8
c000f45a:	6a 05                	push   0x5
c000f45c:	53                   	push   ebx
c000f45d:	e8 44 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f462:	83 c4 20             	add    esp,0x20
c000f465:	6a 00                	push   0x0
c000f467:	68 b2 04 00 c0       	push   0xc00004b2
c000f46c:	6a 06                	push   0x6
c000f46e:	53                   	push   ebx
c000f46f:	e8 32 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	6a 00                	push   0x0
c000f476:	68 bc 04 00 c0       	push   0xc00004bc
c000f47b:	6a 07                	push   0x7
c000f47d:	53                   	push   ebx
c000f47e:	e8 23 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f483:	83 c4 20             	add    esp,0x20
c000f486:	6a 00                	push   0x0
c000f488:	68 c6 04 00 c0       	push   0xc00004c6
c000f48d:	6a 08                	push   0x8
c000f48f:	53                   	push   ebx
c000f490:	e8 11 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	6a 00                	push   0x0
c000f497:	68 ce 04 00 c0       	push   0xc00004ce
c000f49c:	6a 09                	push   0x9
c000f49e:	53                   	push   ebx
c000f49f:	e8 02 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4a4:	83 c4 20             	add    esp,0x20
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 d8 04 00 c0       	push   0xc00004d8
c000f4ae:	6a 0a                	push   0xa
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 f0 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	6a 00                	push   0x0
c000f4b8:	68 e0 04 00 c0       	push   0xc00004e0
c000f4bd:	6a 0b                	push   0xb
c000f4bf:	53                   	push   ebx
c000f4c0:	e8 e1 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4c5:	83 c4 20             	add    esp,0x20
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 e8 04 00 c0       	push   0xc00004e8
c000f4cf:	6a 0c                	push   0xc
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 cf fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 f0 04 00 c0       	push   0xc00004f0
c000f4de:	6a 0d                	push   0xd
c000f4e0:	53                   	push   ebx
c000f4e1:	e8 c0 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4e6:	83 c4 20             	add    esp,0x20
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 f8 04 00 c0       	push   0xc00004f8
c000f4f0:	6a 0e                	push   0xe
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 ae fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	6a 00                	push   0x0
c000f4fa:	68 00 05 00 c0       	push   0xc0000500
c000f4ff:	6a 0f                	push   0xf
c000f501:	53                   	push   ebx
c000f502:	e8 9f fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f507:	83 c4 20             	add    esp,0x20
c000f50a:	6a 00                	push   0x0
c000f50c:	68 0a 05 00 c0       	push   0xc000050a
c000f511:	6a 10                	push   0x10
c000f513:	53                   	push   ebx
c000f514:	e8 8d fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	6a 00                	push   0x0
c000f51b:	68 14 05 00 c0       	push   0xc0000514
c000f520:	6a 11                	push   0x11
c000f522:	53                   	push   ebx
c000f523:	e8 7e fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	6a 00                	push   0x0
c000f52d:	68 1e 05 00 c0       	push   0xc000051e
c000f532:	6a 12                	push   0x12
c000f534:	53                   	push   ebx
c000f535:	e8 6c fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	6a 01                	push   0x1
c000f53c:	68 b8 05 00 c0       	push   0xc00005b8
c000f541:	6a 60                	push   0x60
c000f543:	53                   	push   ebx
c000f544:	e8 5d fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f549:	83 c4 20             	add    esp,0x20
c000f54c:	6a 00                	push   0x0
c000f54e:	68 bf 05 00 c0       	push   0xc00005bf
c000f553:	6a 20                	push   0x20
c000f555:	53                   	push   ebx
c000f556:	e8 4b fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	6a 00                	push   0x0
c000f55d:	68 aa 05 00 c0       	push   0xc00005aa
c000f562:	6a 21                	push   0x21
c000f564:	53                   	push   ebx
c000f565:	e8 3c fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f56a:	83 c4 20             	add    esp,0x20
c000f56d:	6a 00                	push   0x0
c000f56f:	68 b1 05 00 c0       	push   0xc00005b1
c000f574:	6a 22                	push   0x22
c000f576:	53                   	push   ebx
c000f577:	e8 2a fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	6a 00                	push   0x0
c000f57e:	68 28 05 00 c0       	push   0xc0000528
c000f583:	6a 23                	push   0x23
c000f585:	53                   	push   ebx
c000f586:	e8 1b fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f58b:	83 c4 20             	add    esp,0x20
c000f58e:	6a 00                	push   0x0
c000f590:	68 32 05 00 c0       	push   0xc0000532
c000f595:	6a 24                	push   0x24
c000f597:	53                   	push   ebx
c000f598:	e8 09 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	6a 00                	push   0x0
c000f59f:	68 3c 05 00 c0       	push   0xc000053c
c000f5a4:	6a 25                	push   0x25
c000f5a6:	53                   	push   ebx
c000f5a7:	e8 fa fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5ac:	83 c4 20             	add    esp,0x20
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 46 05 00 c0       	push   0xc0000546
c000f5b6:	6a 26                	push   0x26
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 e8 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	6a 00                	push   0x0
c000f5c0:	68 50 05 00 c0       	push   0xc0000550
c000f5c5:	6a 27                	push   0x27
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 d9 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5cd:	83 c4 20             	add    esp,0x20
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 5a 05 00 c0       	push   0xc000055a
c000f5d7:	6a 28                	push   0x28
c000f5d9:	53                   	push   ebx
c000f5da:	e8 c7 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	6a 00                	push   0x0
c000f5e1:	68 64 05 00 c0       	push   0xc0000564
c000f5e6:	6a 29                	push   0x29
c000f5e8:	53                   	push   ebx
c000f5e9:	e8 b8 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 6e 05 00 c0       	push   0xc000056e
c000f5f8:	6a 2a                	push   0x2a
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 a6 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	6a 00                	push   0x0
c000f602:	68 78 05 00 c0       	push   0xc0000578
c000f607:	6a 2b                	push   0x2b
c000f609:	53                   	push   ebx
c000f60a:	e8 97 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f60f:	83 c4 20             	add    esp,0x20
c000f612:	6a 00                	push   0x0
c000f614:	68 82 05 00 c0       	push   0xc0000582
c000f619:	6a 2c                	push   0x2c
c000f61b:	53                   	push   ebx
c000f61c:	e8 85 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	6a 00                	push   0x0
c000f623:	68 8c 05 00 c0       	push   0xc000058c
c000f628:	6a 2d                	push   0x2d
c000f62a:	53                   	push   ebx
c000f62b:	e8 76 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	6a 00                	push   0x0
c000f635:	68 96 05 00 c0       	push   0xc0000596
c000f63a:	6a 2e                	push   0x2e
c000f63c:	53                   	push   ebx
c000f63d:	e8 64 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	6a 00                	push   0x0
c000f644:	68 a0 05 00 c0       	push   0xc00005a0
c000f649:	6a 2f                	push   0x2f
c000f64b:	53                   	push   ebx
c000f64c:	e8 55 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f651:	83 c4 20             	add    esp,0x20
c000f654:	6a 00                	push   0x0
c000f656:	68 f6 05 00 c0       	push   0xc00005f6
c000f65b:	6a 30                	push   0x30
c000f65d:	53                   	push   ebx
c000f65e:	e8 43 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f663:	6a 00                	push   0x0
c000f665:	68 00 06 00 c0       	push   0xc0000600
c000f66a:	6a 31                	push   0x31
c000f66c:	53                   	push   ebx
c000f66d:	e8 34 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f672:	83 c4 20             	add    esp,0x20
c000f675:	6a 00                	push   0x0
c000f677:	68 0a 06 00 c0       	push   0xc000060a
c000f67c:	6a 32                	push   0x32
c000f67e:	53                   	push   ebx
c000f67f:	e8 22 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f684:	6a 00                	push   0x0
c000f686:	68 14 06 00 c0       	push   0xc0000614
c000f68b:	6a 33                	push   0x33
c000f68d:	53                   	push   ebx
c000f68e:	e8 13 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f693:	83 c4 20             	add    esp,0x20
c000f696:	6a 00                	push   0x0
c000f698:	68 1e 06 00 c0       	push   0xc000061e
c000f69d:	6a 34                	push   0x34
c000f69f:	53                   	push   ebx
c000f6a0:	e8 01 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6a5:	6a 00                	push   0x0
c000f6a7:	68 28 06 00 c0       	push   0xc0000628
c000f6ac:	6a 35                	push   0x35
c000f6ae:	53                   	push   ebx
c000f6af:	e8 f2 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6b4:	83 c4 20             	add    esp,0x20
c000f6b7:	6a 00                	push   0x0
c000f6b9:	68 32 06 00 c0       	push   0xc0000632
c000f6be:	6a 36                	push   0x36
c000f6c0:	53                   	push   ebx
c000f6c1:	e8 e0 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6c6:	6a 00                	push   0x0
c000f6c8:	68 3c 06 00 c0       	push   0xc000063c
c000f6cd:	6a 37                	push   0x37
c000f6cf:	53                   	push   ebx
c000f6d0:	e8 d1 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6d5:	83 c4 1c             	add    esp,0x1c
c000f6d8:	6a 03                	push   0x3
c000f6da:	6a 02                	push   0x2
c000f6dc:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c000f6e2:	e8 47 27 00 00       	call   c0011e2e <VAS::allocatePages(int, int)>
c000f6e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6ee:	89 c6                	mov    esi,eax
c000f6f0:	e8 0d 02 00 00       	call   c000f902 <malloc>
c000f6f5:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6fe:	89 c7                	mov    edi,eax
c000f700:	e8 21 17 00 00       	call   c0010e26 <TSS::TSS()>
c000f705:	83 c4 0c             	add    esp,0xc
c000f708:	68 c6 04 00 c0       	push   0xc00004c6
c000f70d:	56                   	push   esi
c000f70e:	57                   	push   edi
c000f70f:	e8 52 17 00 00       	call   c0010e66 <TSS::setup(unsigned long, unsigned long)>
c000f714:	89 c6                	mov    esi,eax
c000f716:	58                   	pop    eax
c000f717:	5a                   	pop    edx
c000f718:	6a 00                	push   0x0
c000f71a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f71e:	50                   	push   eax
c000f71f:	e8 dc fb ff ff       	call   c000f300 <IDTEntry::IDTEntry(bool)>
c000f724:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f728:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f72d:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f734:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f73a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f73e:	80 ce 05             	or     dh,0x5
c000f741:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f744:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f748:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f74c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f752:	e8 87 fc ff ff       	call   c000f3de <IDT::flush()>
c000f757:	83 c4 20             	add    esp,0x20
c000f75a:	5b                   	pop    ebx
c000f75b:	5e                   	pop    esi
c000f75c:	5f                   	pop    edi
c000f75d:	c3                   	ret    

c000f75e <sbrk>:
c000f75e:	55                   	push   ebp
c000f75f:	57                   	push   edi
c000f760:	56                   	push   esi
c000f761:	53                   	push   ebx
c000f762:	83 ec 1c             	sub    esp,0x1c
c000f765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f769:	85 c0                	test   eax,eax
c000f76b:	74 3e                	je     c000f7ab <sbrk+0x4d>
c000f76d:	78 43                	js     c000f7b2 <sbrk+0x54>
c000f76f:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c000f775:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f77b:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f781:	83 e2 01             	and    edx,0x1
c000f784:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f788:	8b 0d 1c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e01c
c000f78e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f792:	05 ff 0f 00 00       	add    eax,0xfff
c000f797:	89 c2                	mov    edx,eax
c000f799:	78 2f                	js     c000f7ca <sbrk+0x6c>
c000f79b:	c1 fa 0c             	sar    edx,0xc
c000f79e:	89 d7                	mov    edi,edx
c000f7a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7a4:	be 00 00 00 00       	mov    esi,0x0
c000f7a9:	eb 36                	jmp    c000f7e1 <sbrk+0x83>
c000f7ab:	a1 1c e0 02 c0       	mov    eax,ds:0xc002e01c
c000f7b0:	eb 73                	jmp    c000f825 <sbrk+0xc7>
c000f7b2:	83 ec 08             	sub    esp,0x8
c000f7b5:	50                   	push   eax
c000f7b6:	68 e8 ac 02 c0       	push   0xc002ace8
c000f7bb:	e8 3b 31 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000f7c0:	83 c4 10             	add    esp,0x10
c000f7c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7c8:	eb 5b                	jmp    c000f825 <sbrk+0xc7>
c000f7ca:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7d0:	eb c9                	jmp    c000f79b <sbrk+0x3d>
c000f7d2:	81 05 1c e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e01c,0x1000
c000f7dc:	46                   	inc    esi
c000f7dd:	39 f7                	cmp    edi,esi
c000f7df:	74 33                	je     c000f814 <sbrk+0xb6>
c000f7e1:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c000f7e7:	8b 2d 1c e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e01c
c000f7ed:	e8 b4 04 00 00       	call   c000fca6 <Phys::allocatePage()>
c000f7f2:	68 01 0c 00 00       	push   0xc01
c000f7f7:	55                   	push   ebp
c000f7f8:	50                   	push   eax
c000f7f9:	53                   	push   ebx
c000f7fa:	e8 2d 25 00 00       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7ff:	83 c4 10             	add    esp,0x10
c000f802:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f807:	74 c9                	je     c000f7d2 <sbrk+0x74>
c000f809:	8b 1d 1c e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e01c
c000f80f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f812:	eb be                	jmp    c000f7d2 <sbrk+0x74>
c000f814:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f819:	75 12                	jne    c000f82d <sbrk+0xcf>
c000f81b:	0f 20 d8             	mov    eax,cr3
c000f81e:	0f 22 d8             	mov    cr3,eax
c000f821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f825:	83 c4 1c             	add    esp,0x1c
c000f828:	5b                   	pop    ebx
c000f829:	5e                   	pop    esi
c000f82a:	5f                   	pop    edi
c000f82b:	5d                   	pop    ebp
c000f82c:	c3                   	ret    
c000f82d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f831:	89 cb                	mov    ebx,ecx
c000f833:	c1 eb 0a             	shr    ebx,0xa
c000f836:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f83c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f846:	c1 e0 0c             	shl    eax,0xc
c000f849:	01 c8                	add    eax,ecx
c000f84b:	c1 e8 0a             	shr    eax,0xa
c000f84e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f853:	2d 00 00 40 00       	sub    eax,0x400000
c000f858:	39 c3                	cmp    ebx,eax
c000f85a:	77 c5                	ja     c000f821 <sbrk+0xc3>
c000f85c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f85f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f865:	39 d8                	cmp    eax,ebx
c000f867:	73 f3                	jae    c000f85c <sbrk+0xfe>
c000f869:	eb b6                	jmp    c000f821 <sbrk+0xc3>

c000f86b <mmap>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	68 18 ad 02 c0       	push   0xc002ad18
c000f873:	e8 37 ab 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000f878:	b8 00 00 00 00       	mov    eax,0x0
c000f87d:	83 c4 1c             	add    esp,0x1c
c000f880:	c3                   	ret    

c000f881 <munmap>:
c000f881:	83 ec 18             	sub    esp,0x18
c000f884:	68 1d ad 02 c0       	push   0xc002ad1d
c000f889:	e8 21 ab 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000f88e:	b8 00 00 00 00       	mov    eax,0x0
c000f893:	83 c4 1c             	add    esp,0x1c
c000f896:	c3                   	ret    

c000f897 <liballoc_lock()>:
c000f897:	fa                   	cli    
c000f898:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c000f89e:	b8 00 00 00 00       	mov    eax,0x0
c000f8a3:	c3                   	ret    

c000f8a4 <liballoc_unlock()>:
c000f8a4:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000f8a9:	48                   	dec    eax
c000f8aa:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000f8af:	75 01                	jne    c000f8b2 <liballoc_unlock()+0xe>
c000f8b1:	fb                   	sti    
c000f8b2:	b8 00 00 00 00       	mov    eax,0x0
c000f8b7:	c3                   	ret    

c000f8b8 <liballoc_alloc(int)>:
c000f8b8:	83 ec 10             	sub    esp,0x10
c000f8bb:	68 01 08 00 00       	push   0x801
c000f8c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c4:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c000f8ca:	e8 5f 25 00 00       	call   c0011e2e <VAS::allocatePages(int, int)>
c000f8cf:	83 c4 1c             	add    esp,0x1c
c000f8d2:	c3                   	ret    

c000f8d3 <liballoc_free(void*, int)>:
c000f8d3:	83 ec 14             	sub    esp,0x14
c000f8d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8da:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c000f8e0:	e8 f3 21 00 00       	call   c0011ad8 <VAS::freeAllocatedPages(unsigned long)>
c000f8e5:	b8 00 00 00 00       	mov    eax,0x0
c000f8ea:	83 c4 1c             	add    esp,0x1c
c000f8ed:	c3                   	ret    

c000f8ee <realloc>:
c000f8ee:	83 ec 14             	sub    esp,0x14
c000f8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f9:	e8 2e 1d ff ff       	call   c000162c <dlrealloc>
c000f8fe:	83 c4 1c             	add    esp,0x1c
c000f901:	c3                   	ret    

c000f902 <malloc>:
c000f902:	83 ec 18             	sub    esp,0x18
c000f905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f909:	e8 e1 17 ff ff       	call   c00010ef <dlmalloc>
c000f90e:	83 c4 1c             	add    esp,0x1c
c000f911:	c3                   	ret    

c000f912 <free>:
c000f912:	83 ec 18             	sub    esp,0x18
c000f915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f919:	e8 76 14 ff ff       	call   c0000d94 <dlfree>
c000f91e:	83 c4 1c             	add    esp,0x1c
c000f921:	c3                   	ret    

c000f922 <rfree>:
c000f922:	83 ec 18             	sub    esp,0x18
c000f925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f929:	e8 66 14 ff ff       	call   c0000d94 <dlfree>
c000f92e:	83 c4 1c             	add    esp,0x1c
c000f931:	c3                   	ret    

c000f932 <calloc>:
c000f932:	56                   	push   esi
c000f933:	53                   	push   ebx
c000f934:	83 ec 10             	sub    esp,0x10
c000f937:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f93b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f940:	53                   	push   ebx
c000f941:	e8 bc ff ff ff       	call   c000f902 <malloc>
c000f946:	89 c6                	mov    esi,eax
c000f948:	83 c4 0c             	add    esp,0xc
c000f94b:	53                   	push   ebx
c000f94c:	6a 00                	push   0x0
c000f94e:	50                   	push   eax
c000f94f:	e8 fc 0d ff ff       	call   c0000750 <memset>
c000f954:	89 f0                	mov    eax,esi
c000f956:	83 c4 14             	add    esp,0x14
c000f959:	5b                   	pop    ebx
c000f95a:	5e                   	pop    esi
c000f95b:	c3                   	ret    

c000f95c <Krnl::setBootMessage(char const*)>:
c000f95c:	57                   	push   edi
c000f95d:	56                   	push   esi
c000f95e:	53                   	push   ebx
c000f95f:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f965:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f96c:	68 9e 00 00 00       	push   0x9e
c000f971:	6a 00                	push   0x0
c000f973:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f977:	56                   	push   esi
c000f978:	e8 d3 0d ff ff       	call   c0000750 <memset>
c000f97d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f980:	e8 e7 0d ff ff       	call   c000076c <strlen>
c000f985:	ba 50 00 00 00       	mov    edx,0x50
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	29 c2                	sub    edx,eax
c000f98f:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f993:	d1 ea                	shr    edx,1
c000f995:	84 c0                	test   al,al
c000f997:	74 19                	je     c000f9b2 <Krnl::setBootMessage(char const*)+0x56>
c000f999:	01 d2                	add    edx,edx
c000f99b:	43                   	inc    ebx
c000f99c:	01 f2                	add    edx,esi
c000f99e:	80 cc 0f             	or     ah,0xf
c000f9a1:	83 c2 02             	add    edx,0x2
c000f9a4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f9a8:	43                   	inc    ebx
c000f9a9:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f9ae:	84 c0                	test   al,al
c000f9b0:	75 ec                	jne    c000f99e <Krnl::setBootMessage(char const*)+0x42>
c000f9b2:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f9b7:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f9bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9be:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	5f                   	pop    edi
c000f9c7:	c3                   	ret    

c000f9c8 <kernel_main>:
c000f9c8:	57                   	push   edi
c000f9c9:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9ce:	56                   	push   esi
c000f9cf:	89 fa                	mov    edx,edi
c000f9d1:	53                   	push   ebx
c000f9d2:	31 f6                	xor    esi,esi
c000f9d4:	83 ec 2c             	sub    esp,0x2c
c000f9d7:	89 f0                	mov    eax,esi
c000f9d9:	ee                   	out    dx,al
c000f9da:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9df:	b0 80                	mov    al,0x80
c000f9e1:	89 da                	mov    edx,ebx
c000f9e3:	ee                   	out    dx,al
c000f9e4:	b1 03                	mov    cl,0x3
c000f9e6:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9eb:	88 c8                	mov    al,cl
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 f0                	mov    eax,esi
c000f9f0:	89 fa                	mov    edx,edi
c000f9f2:	ee                   	out    dx,al
c000f9f3:	88 c8                	mov    al,cl
c000f9f5:	89 da                	mov    edx,ebx
c000f9f7:	ee                   	out    dx,al
c000f9f8:	b0 c7                	mov    al,0xc7
c000f9fa:	ba fa 03 00 00       	mov    edx,0x3fa
c000f9ff:	ee                   	out    dx,al
c000fa00:	b0 0b                	mov    al,0xb
c000fa02:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa07:	ee                   	out    dx,al
c000fa08:	68 24 ad 02 c0       	push   0xc002ad24
c000fa0d:	e8 e9 2e 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000fa12:	e8 11 09 00 00       	call   c0010328 <installVgaTextImplementation()>
c000fa17:	0f b6 05 20 e0 02 c0 	movzx  eax,BYTE PTR ds:0xc002e020
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	84 c0                	test   al,al
c000fa23:	74 6c                	je     c000fa91 <kernel_main+0xc9>
c000fa25:	31 db                	xor    ebx,ebx
c000fa27:	bf 0a 00 00 00       	mov    edi,0xa
c000fa2c:	be 05 00 00 00       	mov    esi,0x5
c000fa31:	31 c9                	xor    ecx,ecx
c000fa33:	eb 2a                	jmp    c000fa5f <kernel_main+0x97>
c000fa35:	3c 0d                	cmp    al,0xd
c000fa37:	74 1a                	je     c000fa53 <kernel_main+0x8b>
c000fa39:	3c 0a                	cmp    al,0xa
c000fa3b:	74 40                	je     c000fa7d <kernel_main+0xb5>
c000fa3d:	8d 14 b6             	lea    edx,[esi+esi*4]
c000fa40:	80 cc 0e             	or     ah,0xe
c000fa43:	c1 e2 04             	shl    edx,0x4
c000fa46:	01 ca                	add    edx,ecx
c000fa48:	41                   	inc    ecx
c000fa49:	01 fa                	add    edx,edi
c000fa4b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000fa53:	43                   	inc    ebx
c000fa54:	0f b6 83 20 e0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd1fe0]
c000fa5b:	84 c0                	test   al,al
c000fa5d:	74 32                	je     c000fa91 <kernel_main+0xc9>
c000fa5f:	80 b9 56 e0 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd1faa],0xdb
c000fa66:	75 cd                	jne    c000fa35 <kernel_main+0x6d>
c000fa68:	0f b6 91 55 e0 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd1fab]
c000fa6f:	83 e2 fe             	and    edx,0xfffffffe
c000fa72:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa78:	75 bb                	jne    c000fa35 <kernel_main+0x6d>
c000fa7a:	47                   	inc    edi
c000fa7b:	eb b8                	jmp    c000fa35 <kernel_main+0x6d>
c000fa7d:	43                   	inc    ebx
c000fa7e:	46                   	inc    esi
c000fa7f:	31 c9                	xor    ecx,ecx
c000fa81:	0f b6 83 20 e0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd1fe0]
c000fa88:	bf 0a 00 00 00       	mov    edi,0xa
c000fa8d:	84 c0                	test   al,al
c000fa8f:	75 ce                	jne    c000fa5f <kernel_main+0x97>
c000fa91:	83 ec 0c             	sub    esp,0xc
c000fa94:	68 3c ad 02 c0       	push   0xc002ad3c
c000fa99:	e8 be fe ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000fa9e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000faa3:	a3 60 f2 02 c0       	mov    ds:0xc002f260,eax
c000faa8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000faad:	05 ff 0f 00 00       	add    eax,0xfff
c000fab2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fab7:	89 04 24             	mov    DWORD PTR [esp],eax
c000faba:	e8 30 03 00 00       	call   c000fdef <Phys::physicalMemorySetup(unsigned int)>
c000fabf:	e8 f0 1b 00 00       	call   c00116b4 <Virt::virtualMemorySetup()>
c000fac4:	58                   	pop    eax
c000fac5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fac9:	53                   	push   ebx
c000faca:	e8 31 1e 00 00       	call   c0011900 <VAS::VAS()>
c000facf:	89 1d b0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3b0,ebx
c000fad5:	e8 46 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fada:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fae1:	e8 1c fe ff ff       	call   c000f902 <malloc>
c000fae6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fae9:	89 c6                	mov    esi,eax
c000faeb:	e8 e6 ec ff ff       	call   c000e7d6 <Computer::Computer()>
c000faf0:	6a 00                	push   0x0
c000faf2:	89 35 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,esi
c000faf8:	6a 00                	push   0x0
c000fafa:	6a 00                	push   0x0
c000fafc:	56                   	push   esi
c000fafd:	e8 24 f4 ff ff       	call   c000ef26 <Computer::open(int, int, void*)>
c000fb02:	83 c4 14             	add    esp,0x14
c000fb05:	53                   	push   ebx
c000fb06:	e8 a5 20 00 00       	call   c0011bb0 <VAS::~VAS()>
c000fb0b:	83 c4 30             	add    esp,0x30
c000fb0e:	5b                   	pop    ebx
c000fb0f:	5e                   	pop    esi
c000fb10:	5f                   	pop    edi
c000fb11:	c3                   	ret    

c000fb12 <Phys::allocateDMA(unsigned long)>:
c000fb12:	55                   	push   ebp
c000fb13:	31 d2                	xor    edx,edx
c000fb15:	57                   	push   edi
c000fb16:	31 ed                	xor    ebp,ebp
c000fb18:	56                   	push   esi
c000fb19:	31 c9                	xor    ecx,ecx
c000fb1b:	53                   	push   ebx
c000fb1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb20:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb26:	31 c0                	xor    eax,eax
c000fb28:	c1 ee 0c             	shr    esi,0xc
c000fb2b:	eb 17                	jmp    c000fb44 <Phys::allocateDMA(unsigned long)+0x32>
c000fb2d:	85 c9                	test   ecx,ecx
c000fb2f:	75 04                	jne    c000fb35 <Phys::allocateDMA(unsigned long)+0x23>
c000fb31:	89 d5                	mov    ebp,edx
c000fb33:	89 d0                	mov    eax,edx
c000fb35:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb38:	39 de                	cmp    esi,ebx
c000fb3a:	74 20                	je     c000fb5c <Phys::allocateDMA(unsigned long)+0x4a>
c000fb3c:	42                   	inc    edx
c000fb3d:	89 d9                	mov    ecx,ebx
c000fb3f:	83 fa 2f             	cmp    edx,0x2f
c000fb42:	7f 11                	jg     c000fb55 <Phys::allocateDMA(unsigned long)+0x43>
c000fb44:	80 ba a0 f2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0d60],0x0
c000fb4b:	74 e0                	je     c000fb2d <Phys::allocateDMA(unsigned long)+0x1b>
c000fb4d:	31 c9                	xor    ecx,ecx
c000fb4f:	42                   	inc    edx
c000fb50:	83 fa 2f             	cmp    edx,0x2f
c000fb53:	7e ef                	jle    c000fb44 <Phys::allocateDMA(unsigned long)+0x32>
c000fb55:	5b                   	pop    ebx
c000fb56:	31 c0                	xor    eax,eax
c000fb58:	5e                   	pop    esi
c000fb59:	5f                   	pop    edi
c000fb5a:	5d                   	pop    ebp
c000fb5b:	c3                   	ret    
c000fb5c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb5f:	89 d7                	mov    edi,edx
c000fb61:	4f                   	dec    edi
c000fb62:	79 03                	jns    c000fb67 <Phys::allocateDMA(unsigned long)+0x55>
c000fb64:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb67:	c1 ff 04             	sar    edi,0x4
c000fb6a:	89 c2                	mov    edx,eax
c000fb6c:	c1 fa 04             	sar    edx,0x4
c000fb6f:	39 fa                	cmp    edx,edi
c000fb71:	75 2f                	jne    c000fba2 <Phys::allocateDMA(unsigned long)+0x90>
c000fb73:	85 db                	test   ebx,ebx
c000fb75:	74 1a                	je     c000fb91 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb77:	be a0 f2 02 c0       	mov    esi,0xc002f2a0
c000fb7c:	8d 90 a0 f2 02 c0    	lea    edx,[eax-0x3ffd0d60]
c000fb82:	f7 d6                	not    esi
c000fb84:	29 c6                	sub    esi,eax
c000fb86:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb89:	42                   	inc    edx
c000fb8a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb8d:	39 d9                	cmp    ecx,ebx
c000fb8f:	7f f5                	jg     c000fb86 <Phys::allocateDMA(unsigned long)+0x74>
c000fb91:	85 ff                	test   edi,edi
c000fb93:	74 13                	je     c000fba8 <Phys::allocateDMA(unsigned long)+0x96>
c000fb95:	5b                   	pop    ebx
c000fb96:	05 50 20 0c 00       	add    eax,0xc2050
c000fb9b:	5e                   	pop    esi
c000fb9c:	c1 e0 0c             	shl    eax,0xc
c000fb9f:	5f                   	pop    edi
c000fba0:	5d                   	pop    ebp
c000fba1:	c3                   	ret    
c000fba2:	89 ea                	mov    edx,ebp
c000fba4:	31 c9                	xor    ecx,ecx
c000fba6:	eb a7                	jmp    c000fb4f <Phys::allocateDMA(unsigned long)+0x3d>
c000fba8:	5b                   	pop    ebx
c000fba9:	c1 e0 0c             	shl    eax,0xc
c000fbac:	5e                   	pop    esi
c000fbad:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fbb2:	5f                   	pop    edi
c000fbb3:	5d                   	pop    ebp
c000fbb4:	c3                   	ret    

c000fbb5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fbb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fbbd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbc3:	c1 e9 0c             	shr    ecx,0xc
c000fbc6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbcb:	76 25                	jbe    c000fbf2 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbcd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbd2:	c1 e8 0c             	shr    eax,0xc
c000fbd5:	8d 50 10             	lea    edx,[eax+0x10]
c000fbd8:	85 c9                	test   ecx,ecx
c000fbda:	74 15                	je     c000fbf1 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbdc:	8d 82 a0 f2 02 c0    	lea    eax,[edx-0x3ffd0d60]
c000fbe2:	8d 94 11 a0 f2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0d60]
c000fbe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbec:	40                   	inc    eax
c000fbed:	39 d0                	cmp    eax,edx
c000fbef:	75 f8                	jne    c000fbe9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbf1:	c3                   	ret    
c000fbf2:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbf8:	c1 ea 0c             	shr    edx,0xc
c000fbfb:	eb db                	jmp    c000fbd8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbfd <Phys::setPageState(unsigned long, bool)>:
c000fbfd:	56                   	push   esi
c000fbfe:	ba 01 00 00 00       	mov    edx,0x1
c000fc03:	53                   	push   ebx
c000fc04:	8b 35 64 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e164
c000fc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc12:	89 c8                	mov    eax,ecx
c000fc14:	83 e1 07             	and    ecx,0x7
c000fc17:	c1 e8 03             	shr    eax,0x3
c000fc1a:	d3 e3                	shl    ebx,cl
c000fc1c:	01 c6                	add    esi,eax
c000fc1e:	d3 e2                	shl    edx,cl
c000fc20:	f7 d2                	not    edx
c000fc22:	20 16                	and    BYTE PTR [esi],dl
c000fc24:	03 05 64 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e164
c000fc2a:	08 18                	or     BYTE PTR [eax],bl
c000fc2c:	5b                   	pop    ebx
c000fc2d:	5e                   	pop    esi
c000fc2e:	c3                   	ret    

c000fc2f <Phys::getPageState(unsigned long)>:
c000fc2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc33:	8b 15 64 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e164
c000fc39:	89 c8                	mov    eax,ecx
c000fc3b:	83 e1 07             	and    ecx,0x7
c000fc3e:	c1 e8 03             	shr    eax,0x3
c000fc41:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc45:	d3 f8                	sar    eax,cl
c000fc47:	83 e0 01             	and    eax,0x1
c000fc4a:	c3                   	ret    

c000fc4b <Phys::freePage(unsigned long)>:
c000fc4b:	53                   	push   ebx
c000fc4c:	83 ec 08             	sub    esp,0x8
c000fc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc53:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fc58:	76 3a                	jbe    c000fc94 <Phys::freePage(unsigned long)+0x49>
c000fc5a:	c1 e8 0c             	shr    eax,0xc
c000fc5d:	50                   	push   eax
c000fc5e:	89 c3                	mov    ebx,eax
c000fc60:	e8 ca ff ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fc65:	5a                   	pop    edx
c000fc66:	84 c0                	test   al,al
c000fc68:	74 19                	je     c000fc83 <Phys::freePage(unsigned long)+0x38>
c000fc6a:	83 ec 08             	sub    esp,0x8
c000fc6d:	ff 0d 90 f2 02 c0    	dec    DWORD PTR ds:0xc002f290
c000fc73:	6a 00                	push   0x0
c000fc75:	53                   	push   ebx
c000fc76:	e8 82 ff ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	83 c4 08             	add    esp,0x8
c000fc81:	5b                   	pop    ebx
c000fc82:	c3                   	ret    
c000fc83:	c7 44 24 10 5b ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad5b
c000fc8b:	83 c4 08             	add    esp,0x8
c000fc8e:	5b                   	pop    ebx
c000fc8f:	e9 1b a7 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c000fc94:	68 00 10 00 00       	push   0x1000
c000fc99:	50                   	push   eax
c000fc9a:	e8 16 ff ff ff       	call   c000fbb5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc9f:	59                   	pop    ecx
c000fca0:	5b                   	pop    ebx
c000fca1:	83 c4 08             	add    esp,0x8
c000fca4:	5b                   	pop    ebx
c000fca5:	c3                   	ret    

c000fca6 <Phys::allocatePage()>:
c000fca6:	56                   	push   esi
c000fca7:	53                   	push   ebx
c000fca8:	51                   	push   ecx
c000fca9:	8b 35 84 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f284
c000fcaf:	89 f3                	mov    ebx,esi
c000fcb1:	eb 0a                	jmp    c000fcbd <Phys::allocatePage()+0x17>
c000fcb3:	89 1d 84 f2 02 c0    	mov    DWORD PTR ds:0xc002f284,ebx
c000fcb9:	39 de                	cmp    esi,ebx
c000fcbb:	74 24                	je     c000fce1 <Phys::allocatePage()+0x3b>
c000fcbd:	53                   	push   ebx
c000fcbe:	e8 6c ff ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fcc3:	5a                   	pop    edx
c000fcc4:	84 c0                	test   al,al
c000fcc6:	74 77                	je     c000fd3f <Phys::allocatePage()+0x99>
c000fcc8:	43                   	inc    ebx
c000fcc9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fccf:	75 e2                	jne    c000fcb3 <Phys::allocatePage()+0xd>
c000fcd1:	31 db                	xor    ebx,ebx
c000fcd3:	c7 05 84 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f284,0x0
c000fcdd:	39 de                	cmp    esi,ebx
c000fcdf:	75 dc                	jne    c000fcbd <Phys::allocatePage()+0x17>
c000fce1:	83 ec 0c             	sub    esp,0xc
c000fce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fce9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fcec:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fcf2:	e8 31 29 00 00       	call   c0012628 <VAS::scanForEviction()>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	85 c0                	test   eax,eax
c000fcfc:	75 59                	jne    c000fd57 <Phys::allocatePage()+0xb1>
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 71 ad 02 c0       	push   0xc002ad71
c000fd06:	e8 f0 2b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000fd0b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd12:	e8 fb fd ff ff       	call   c000fb12 <Phys::allocateDMA(unsigned long)>
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	85 c0                	test   eax,eax
c000fd1c:	75 39                	jne    c000fd57 <Phys::allocatePage()+0xb1>
c000fd1e:	83 ec 0c             	sub    esp,0xc
c000fd21:	68 82 ad 02 c0       	push   0xc002ad82
c000fd26:	e8 84 a6 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	8b 1d 84 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f284
c000fd34:	53                   	push   ebx
c000fd35:	e8 f5 fe ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fd3a:	5a                   	pop    edx
c000fd3b:	84 c0                	test   al,al
c000fd3d:	75 89                	jne    c000fcc8 <Phys::allocatePage()+0x22>
c000fd3f:	6a 01                	push   0x1
c000fd41:	53                   	push   ebx
c000fd42:	e8 b6 fe ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fd47:	a1 84 f2 02 c0       	mov    eax,ds:0xc002f284
c000fd4c:	59                   	pop    ecx
c000fd4d:	ff 05 90 f2 02 c0    	inc    DWORD PTR ds:0xc002f290
c000fd53:	c1 e0 0c             	shl    eax,0xc
c000fd56:	5b                   	pop    ebx
c000fd57:	5a                   	pop    edx
c000fd58:	5b                   	pop    ebx
c000fd59:	5e                   	pop    esi
c000fd5a:	c3                   	ret    

c000fd5b <Phys::allocateContiguousPages(int)>:
c000fd5b:	57                   	push   edi
c000fd5c:	56                   	push   esi
c000fd5d:	53                   	push   ebx
c000fd5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd62:	fa                   	cli    
c000fd63:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c000fd69:	31 db                	xor    ebx,ebx
c000fd6b:	85 db                	test   ebx,ebx
c000fd6d:	75 11                	jne    c000fd80 <Phys::allocateContiguousPages(int)+0x25>
c000fd6f:	e8 32 ff ff ff       	call   c000fca6 <Phys::allocatePage()>
c000fd74:	83 fe 01             	cmp    esi,0x1
c000fd77:	89 c7                	mov    edi,eax
c000fd79:	74 21                	je     c000fd9c <Phys::allocateContiguousPages(int)+0x41>
c000fd7b:	bb 01 00 00 00       	mov    ebx,0x1
c000fd80:	e8 21 ff ff ff       	call   c000fca6 <Phys::allocatePage()>
c000fd85:	89 da                	mov    edx,ebx
c000fd87:	c1 e2 0c             	shl    edx,0xc
c000fd8a:	01 fa                	add    edx,edi
c000fd8c:	39 c2                	cmp    edx,eax
c000fd8e:	74 20                	je     c000fdb0 <Phys::allocateContiguousPages(int)+0x55>
c000fd90:	bb 01 00 00 00       	mov    ebx,0x1
c000fd95:	89 c7                	mov    edi,eax
c000fd97:	83 fe 01             	cmp    esi,0x1
c000fd9a:	75 e4                	jne    c000fd80 <Phys::allocateContiguousPages(int)+0x25>
c000fd9c:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c000fda1:	48                   	dec    eax
c000fda2:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000fda7:	75 01                	jne    c000fdaa <Phys::allocateContiguousPages(int)+0x4f>
c000fda9:	fb                   	sti    
c000fdaa:	89 f8                	mov    eax,edi
c000fdac:	5b                   	pop    ebx
c000fdad:	5e                   	pop    esi
c000fdae:	5f                   	pop    edi
c000fdaf:	c3                   	ret    
c000fdb0:	43                   	inc    ebx
c000fdb1:	39 f3                	cmp    ebx,esi
c000fdb3:	75 b6                	jne    c000fd6b <Phys::allocateContiguousPages(int)+0x10>
c000fdb5:	eb e5                	jmp    c000fd9c <Phys::allocateContiguousPages(int)+0x41>

c000fdb7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdb7:	56                   	push   esi
c000fdb8:	53                   	push   ebx
c000fdb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdbd:	39 1d 88 f2 02 c0    	cmp    DWORD PTR ds:0xc002f288,ebx
c000fdc3:	73 06                	jae    c000fdcb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdc5:	89 1d 88 f2 02 c0    	mov    DWORD PTR ds:0xc002f288,ebx
c000fdcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcf:	c1 eb 0c             	shr    ebx,0xc
c000fdd2:	c1 e8 0c             	shr    eax,0xc
c000fdd5:	39 d8                	cmp    eax,ebx
c000fdd7:	73 13                	jae    c000fdec <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fdd9:	6a 00                	push   0x0
c000fddb:	8d 70 01             	lea    esi,[eax+0x1]
c000fdde:	50                   	push   eax
c000fddf:	e8 19 fe ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fde4:	5a                   	pop    edx
c000fde5:	89 f0                	mov    eax,esi
c000fde7:	59                   	pop    ecx
c000fde8:	39 f3                	cmp    ebx,esi
c000fdea:	75 ed                	jne    c000fdd9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdec:	5b                   	pop    ebx
c000fded:	5e                   	pop    esi
c000fdee:	c3                   	ret    

c000fdef <Phys::physicalMemorySetup(unsigned int)>:
c000fdef:	55                   	push   ebp
c000fdf0:	57                   	push   edi
c000fdf1:	56                   	push   esi
c000fdf2:	53                   	push   ebx
c000fdf3:	31 db                	xor    ebx,ebx
c000fdf5:	83 ec 40             	sub    esp,0x40
c000fdf8:	6a 30                	push   0x30
c000fdfa:	6a 00                	push   0x0
c000fdfc:	68 a0 f2 02 c0       	push   0xc002f2a0
c000fe01:	e8 4a 09 ff ff       	call   c0000750 <memset>
c000fe06:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe0f:	05 00 10 00 00       	add    eax,0x1000
c000fe14:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	83 ec 08             	sub    esp,0x8
c000fe1e:	6a 01                	push   0x1
c000fe20:	53                   	push   ebx
c000fe21:	43                   	inc    ebx
c000fe22:	e8 d6 fd ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe30:	75 e9                	jne    c000fe1b <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe32:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe39:	66 85 c0             	test   ax,ax
c000fe3c:	0f 84 8e 01 00 00    	je     c000ffd0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe46:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe52:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe5b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe63:	eb 15                	jmp    c000fe7a <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe65:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe69:	83 c3 18             	add    ebx,0x18
c000fe6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe70:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe74:	0f 84 66 01 00 00    	je     c000ffe0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe80:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe8b:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe8d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe90:	01 f0                	add    eax,esi
c000fe92:	55                   	push   ebp
c000fe93:	11 fa                	adc    edx,edi
c000fe95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe99:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fea1:	56                   	push   esi
c000fea2:	68 bc ad 02 c0       	push   0xc002adbc
c000fea7:	e8 4f 2a 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000feac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feb0:	83 c4 10             	add    esp,0x10
c000feb3:	09 f8                	or     eax,edi
c000feb5:	0f 85 25 01 00 00    	jne    c000ffe0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000febb:	4d                   	dec    ebp
c000febc:	75 a7                	jne    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000febe:	ba 00 00 08 00       	mov    edx,0x80000
c000fec3:	89 c1                	mov    ecx,eax
c000fec5:	39 f2                	cmp    edx,esi
c000fec7:	19 f9                	sbb    ecx,edi
c000fec9:	0f 82 a7 00 00 00    	jb     c000ff76 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fecf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fed3:	89 c1                	mov    ecx,eax
c000fed5:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fed9:	0f 83 97 00 00 00    	jae    c000ff76 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fedf:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fee4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fee8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000feec:	39 fa                	cmp    edx,edi
c000feee:	19 e8                	sbb    eax,ebp
c000fef0:	0f 82 14 01 00 00    	jb     c001000a <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fef6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fefa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fefe:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff04:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff09:	83 d5 ff             	adc    ebp,0xffffffff
c000ff0c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff10:	31 c0                	xor    eax,eax
c000ff12:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff16:	39 fa                	cmp    edx,edi
c000ff18:	89 c1                	mov    ecx,eax
c000ff1a:	19 e9                	sbb    ecx,ebp
c000ff1c:	0f 83 43 ff ff ff    	jae    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff22:	be 00 00 08 00       	mov    esi,0x80000
c000ff27:	50                   	push   eax
c000ff28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff2c:	57                   	push   edi
c000ff2d:	56                   	push   esi
c000ff2e:	68 e0 ad 02 c0       	push   0xc002ade0
c000ff33:	e8 c3 29 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ff38:	5a                   	pop    edx
c000ff39:	59                   	pop    ecx
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	e8 76 fe ff ff       	call   c000fdb7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff49:	83 c4 0c             	add    esp,0xc
c000ff4c:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff50:	03 05 94 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f294
c000ff56:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff5d:	a3 94 f2 02 c0       	mov    ds:0xc002f294,eax
c000ff62:	52                   	push   edx
c000ff63:	50                   	push   eax
c000ff64:	68 9e ad 02 c0       	push   0xc002ad9e
c000ff69:	e8 8d 29 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	e9 ef fe ff ff       	jmp    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff76:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff82:	39 ea                	cmp    edx,ebp
c000ff84:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff88:	0f 82 d7 fe ff ff    	jb     c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff8e:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff93:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff97:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff9b:	0f 83 c4 fe ff ff    	jae    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa1:	39 ee                	cmp    esi,ebp
c000ffa3:	89 f8                	mov    eax,edi
c000ffa5:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffa9:	0f 83 78 ff ff ff    	jae    c000ff27 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffb7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffbb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffbf:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffcb:	e9 57 ff ff ff       	jmp    c000ff27 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	68 90 ad 02 c0       	push   0xc002ad90
c000ffd8:	e8 d2 a3 00 00       	call   c001a3af <Krnl::panic(char const*)>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	bb 40 01 00 00       	mov    ebx,0x140
c000ffe5:	83 ec 08             	sub    esp,0x8
c000ffe8:	6a 00                	push   0x0
c000ffea:	53                   	push   ebx
c000ffeb:	43                   	inc    ebx
c000ffec:	e8 0c fc ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fff1:	ff 05 94 f2 02 c0    	inc    DWORD PTR ds:0xc002f294
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010000:	75 e3                	jne    c000ffe5 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010002:	83 c4 3c             	add    esp,0x3c
c0010005:	5b                   	pop    ebx
c0010006:	5e                   	pop    esi
c0010007:	5f                   	pop    edi
c0010008:	5d                   	pop    ebp
c0010009:	c3                   	ret    
c001000a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010012:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001001a:	e9 d7 fe ff ff       	jmp    c000fef6 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001001f:	90                   	nop

c0010020 <Pipe::isAtty()>:
c0010020:	31 c0                	xor    eax,eax
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <Pipe::~Pipe()>:
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	ba 4c ae 02 c0       	mov    edx,0xc002ae4c
c001002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010030:	89 10                	mov    DWORD PTR [eax],edx
c0010032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	50                   	push   eax
c001003a:	e8 55 12 00 00       	call   c0011294 <UnixFile::~UnixFile()>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	90                   	nop
c0010043:	83 c4 0c             	add    esp,0xc
c0010046:	c3                   	ret    
c0010047:	90                   	nop

c0010048 <Pipe::~Pipe()>:
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	83 ec 0c             	sub    esp,0xc
c001004e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010052:	e8 cd ff ff ff       	call   c0010024 <Pipe::~Pipe()>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 20                	push   0x20
c001005f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010063:	e8 b3 27 00 00       	call   c001281b <operator delete(void*, unsigned long)>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	83 c4 0c             	add    esp,0xc
c001006e:	c3                   	ret    
c001006f:	90                   	nop

c0010070 <Pipe::read(unsigned long long, void*, int*)>:
c0010070:	55                   	push   ebp
c0010071:	57                   	push   edi
c0010072:	56                   	push   esi
c0010073:	53                   	push   ebx
c0010074:	83 ec 1c             	sub    esp,0x1c
c0010077:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001007b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001007f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010083:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010086:	89 c8                	mov    eax,ecx
c0010088:	99                   	cdq    
c0010089:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001008d:	74 24                	je     c00100b3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001008f:	39 f9                	cmp    ecx,edi
c0010091:	89 d1                	mov    ecx,edx
c0010093:	19 f1                	sbb    ecx,esi
c0010095:	73 1c                	jae    c00100b3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010097:	fa                   	cli    
c0010098:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001009e:	e8 c5 e0 00 00       	call   c001e168 <schedule()>
c00100a3:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00100a8:	48                   	dec    eax
c00100a9:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00100ae:	75 d3                	jne    c0010083 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b0:	fb                   	sti    
c00100b1:	eb d0                	jmp    c0010083 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b3:	39 f8                	cmp    eax,edi
c00100b5:	89 d1                	mov    ecx,edx
c00100b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100ba:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100be:	19 f1                	sbb    ecx,esi
c00100c0:	73 07                	jae    c00100c9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00100c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100c9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00100cc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00100cf:	29 f7                	sub    edi,esi
c00100d1:	89 f8                	mov    eax,edi
c00100d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100d7:	99                   	cdq    
c00100d8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00100db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100df:	19 d0                	sbb    eax,edx
c00100e1:	73 07                	jae    c00100ea <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100ea:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100ed:	89 ea                	mov    edx,ebp
c00100ef:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100f8:	74 0d                	je     c0010107 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100fa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100fd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010105:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010107:	85 d2                	test   edx,edx
c0010109:	74 11                	je     c001011c <Pipe::read(unsigned long long, void*, int*)+0xac>
c001010b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001010f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010112:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010116:	89 d1                	mov    ecx,edx
c0010118:	89 c7                	mov    edi,eax
c001011a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001011f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010122:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010125:	99                   	cdq    
c0010126:	89 f7                	mov    edi,esi
c0010128:	03 04 24             	add    eax,DWORD PTR [esp]
c001012b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001012f:	c1 ff 1f             	sar    edi,0x1f
c0010132:	57                   	push   edi
c0010133:	56                   	push   esi
c0010134:	52                   	push   edx
c0010135:	50                   	push   eax
c0010136:	e8 99 72 01 00       	call   c00273d4 <__umoddi3>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010141:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010146:	75 10                	jne    c0010158 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	68 09 ae 02 c0       	push   0xc002ae09
c0010150:	e8 5a a2 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0010155:	83 c4 10             	add    esp,0x10
c0010158:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001015c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001015f:	89 10                	mov    DWORD PTR [eax],edx
c0010161:	83 c4 1c             	add    esp,0x1c
c0010164:	31 c0                	xor    eax,eax
c0010166:	5b                   	pop    ebx
c0010167:	5e                   	pop    esi
c0010168:	5f                   	pop    edi
c0010169:	5d                   	pop    ebp
c001016a:	c3                   	ret    
c001016b:	90                   	nop

c001016c <Pipe::write(unsigned long long, void*, int*)>:
c001016c:	55                   	push   ebp
c001016d:	57                   	push   edi
c001016e:	56                   	push   esi
c001016f:	53                   	push   ebx
c0010170:	83 ec 1c             	sub    esp,0x1c
c0010173:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010177:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001017b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001017e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010182:	89 04 24             	mov    DWORD PTR [esp],eax
c0010185:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010189:	89 d8                	mov    eax,ebx
c001018b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001018e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010192:	89 d6                	mov    esi,edx
c0010194:	89 d7                	mov    edi,edx
c0010196:	c1 ff 1f             	sar    edi,0x1f
c0010199:	03 34 24             	add    esi,DWORD PTR [esp]
c001019c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00101a0:	c1 f8 1f             	sar    eax,0x1f
c00101a3:	39 f3                	cmp    ebx,esi
c00101a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101ad:	19 f8                	sbb    eax,edi
c00101af:	b8 01 00 00 00       	mov    eax,0x1
c00101b4:	72 6e                	jb     c0010224 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00101b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101b9:	01 d0                	add    eax,edx
c00101bb:	99                   	cdq    
c00101bc:	f7 fb                	idiv   ebx
c00101be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c2:	29 d3                	sub    ebx,edx
c00101c4:	89 d7                	mov    edi,edx
c00101c6:	89 de                	mov    esi,ebx
c00101c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00101cb:	c1 fb 1f             	sar    ebx,0x1f
c00101ce:	39 f2                	cmp    edx,esi
c00101d0:	19 d8                	sbb    eax,ebx
c00101d2:	b8 00 00 00 00       	mov    eax,0x0
c00101d7:	72 04                	jb     c00101dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00101d9:	89 d0                	mov    eax,edx
c00101db:	29 f0                	sub    eax,esi
c00101dd:	89 d3                	mov    ebx,edx
c00101df:	29 c3                	sub    ebx,eax
c00101e1:	74 0b                	je     c00101ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101ea:	89 d9                	mov    ecx,ebx
c00101ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ee:	85 c0                	test   eax,eax
c00101f0:	74 0d                	je     c00101ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101f9:	89 de                	mov    esi,ebx
c00101fb:	89 c1                	mov    ecx,eax
c00101fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010202:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010207:	75 10                	jne    c0010219 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010209:	83 ec 0c             	sub    esp,0xc
c001020c:	68 25 ae 02 c0       	push   0xc002ae25
c0010211:	e8 99 a1 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0010216:	83 c4 10             	add    esp,0x10
c0010219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001021d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010220:	89 08                	mov    DWORD PTR [eax],ecx
c0010222:	31 c0                	xor    eax,eax
c0010224:	83 c4 1c             	add    esp,0x1c
c0010227:	5b                   	pop    ebx
c0010228:	5e                   	pop    esi
c0010229:	5f                   	pop    edi
c001022a:	5d                   	pop    ebp
c001022b:	c3                   	ret    

c001022c <Pipe::Pipe(int)>:
c001022c:	83 ec 0c             	sub    esp,0xc
c001022f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010233:	83 ec 08             	sub    esp,0x8
c0010236:	6a 00                	push   0x0
c0010238:	50                   	push   eax
c0010239:	e8 74 0e 00 00       	call   c00110b2 <UnixFile::UnixFile(int)>
c001023e:	83 c4 10             	add    esp,0x10
c0010241:	ba 4c ae 02 c0       	mov    edx,0xc002ae4c
c0010246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024a:	89 10                	mov    DWORD PTR [eax],edx
c001024c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010250:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010254:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010266:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001026d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010271:	83 ec 0c             	sub    esp,0xc
c0010274:	50                   	push   eax
c0010275:	e8 88 f6 ff ff       	call   c000f902 <malloc>
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	89 c2                	mov    edx,eax
c001027f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010283:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001028a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001028e:	90                   	nop
c001028f:	83 c4 0c             	add    esp,0xc
c0010292:	c3                   	ret    
c0010293:	90                   	nop

c0010294 <VgaText::isAtty()>:
c0010294:	b0 01                	mov    al,0x1
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <VgaText::~VgaText()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 e1 0f 00 00       	call   c0011294 <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <VgaText::~VgaText()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <VgaText::~VgaText()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	68 c4 02 00 00       	push   0x2c4
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	e8 3c 25 00 00       	call   c001281b <operator delete(void*, unsigned long)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	83 c4 0c             	add    esp,0xc
c00102e5:	c3                   	ret    

c00102e6 <VgaText::read(unsigned long long, void*, int*)>:
c00102e6:	83 ec 10             	sub    esp,0x10
c00102e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f5:	e8 b6 5a 00 00       	call   c0015db0 <readKeyboard(VgaText*, char*, unsigned long)>
c00102fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102fe:	89 02                	mov    DWORD PTR [edx],eax
c0010300:	31 c0                	xor    eax,eax
c0010302:	83 c4 1c             	add    esp,0x1c
c0010305:	c3                   	ret    

c0010306 <setTerminalScrollLock(bool)>:
c0010306:	c3                   	ret    

c0010307 <addToTerminalCycle(VgaText*)>:
c0010307:	8b 15 00 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f300
c001030d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010311:	85 d2                	test   edx,edx
c0010313:	75 09                	jne    c001031e <addToTerminalCycle(VgaText*)+0x17>
c0010315:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010318:	a3 00 f3 02 c0       	mov    ds:0xc002f300,eax
c001031d:	c3                   	ret    
c001031e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010321:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010324:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010327:	c3                   	ret    

c0010328 <installVgaTextImplementation()>:
c0010328:	83 ec 10             	sub    esp,0x10
c001032b:	6a 20                	push   0x20
c001032d:	6a 00                	push   0x0
c001032f:	68 e0 f2 02 c0       	push   0xc002f2e0
c0010334:	e8 17 04 ff ff       	call   c0000750 <memset>
c0010339:	83 c4 1c             	add    esp,0x1c
c001033c:	c3                   	ret    

c001033d <scrollTerminalScrollLock(int)>:
c001033d:	c3                   	ret    

c001033e <VgaText::updateTitle()>:
c001033e:	53                   	push   ebx
c001033f:	31 c0                	xor    eax,eax
c0010341:	83 ec 58             	sub    esp,0x58
c0010344:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010348:	89 e1                	mov    ecx,esp
c001034a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001034e:	40                   	inc    eax
c001034f:	83 f8 50             	cmp    eax,0x50
c0010352:	75 f6                	jne    c001034a <VgaText::updateTitle()+0xc>
c0010354:	31 c0                	xor    eax,eax
c0010356:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001035d:	84 db                	test   bl,bl
c001035f:	74 06                	je     c0010367 <VgaText::updateTitle()+0x29>
c0010361:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010364:	40                   	inc    eax
c0010365:	eb ef                	jmp    c0010356 <VgaText::updateTitle()+0x18>
c0010367:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001036a:	85 c0                	test   eax,eax
c001036c:	74 09                	je     c0010377 <VgaText::updateTitle()+0x39>
c001036e:	53                   	push   ebx
c001036f:	53                   	push   ebx
c0010370:	51                   	push   ecx
c0010371:	52                   	push   edx
c0010372:	ff d0                	call   eax
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	83 c4 58             	add    esp,0x58
c001037a:	5b                   	pop    ebx
c001037b:	c3                   	ret    

c001037c <VgaText::load()>:
c001037c:	53                   	push   ebx
c001037d:	31 c0                	xor    eax,eax
c001037f:	83 ec 58             	sub    esp,0x58
c0010382:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010386:	89 e2                	mov    edx,esp
c0010388:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001038c:	40                   	inc    eax
c001038d:	83 f8 50             	cmp    eax,0x50
c0010390:	75 f6                	jne    c0010388 <VgaText::load()+0xc>
c0010392:	31 c0                	xor    eax,eax
c0010394:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001039b:	84 c9                	test   cl,cl
c001039d:	74 06                	je     c00103a5 <VgaText::load()+0x29>
c001039f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00103a2:	40                   	inc    eax
c00103a3:	eb ef                	jmp    c0010394 <VgaText::load()+0x18>
c00103a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00103a8:	85 c0                	test   eax,eax
c00103aa:	74 09                	je     c00103b5 <VgaText::load()+0x39>
c00103ac:	51                   	push   ecx
c00103ad:	51                   	push   ecx
c00103ae:	52                   	push   edx
c00103af:	53                   	push   ebx
c00103b0:	ff d0                	call   eax
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00103b8:	85 c0                	test   eax,eax
c00103ba:	74 09                	je     c00103c5 <VgaText::load()+0x49>
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	53                   	push   ebx
c00103c0:	ff d0                	call   eax
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	83 c4 58             	add    esp,0x58
c00103c8:	5b                   	pop    ebx
c00103c9:	c3                   	ret    

c00103ca <VgaText::updateCursor()>:
c00103ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ce:	39 05 04 f3 02 c0    	cmp    DWORD PTR ds:0xc002f304,eax
c00103d4:	75 09                	jne    c00103df <VgaText::updateCursor()+0x15>
c00103d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00103d9:	85 c0                	test   eax,eax
c00103db:	74 02                	je     c00103df <VgaText::updateCursor()+0x15>
c00103dd:	ff e0                	jmp    eax
c00103df:	c3                   	ret    

c00103e0 <VgaText::doANSI_SGR(int)>:
c00103e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e8:	85 d2                	test   edx,edx
c00103ea:	75 0b                	jne    c00103f7 <VgaText::doANSI_SGR(int)+0x17>
c00103ec:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103ef:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103f2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103f5:	eb 59                	jmp    c0010450 <VgaText::doANSI_SGR(int)+0x70>
c00103f7:	83 fa 07             	cmp    edx,0x7
c00103fa:	75 0b                	jne    c0010407 <VgaText::doANSI_SGR(int)+0x27>
c00103fc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103ff:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010402:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010405:	eb 49                	jmp    c0010450 <VgaText::doANSI_SGR(int)+0x70>
c0010407:	83 fa 1b             	cmp    edx,0x1b
c001040a:	74 e0                	je     c00103ec <VgaText::doANSI_SGR(int)+0xc>
c001040c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001040f:	83 f9 07             	cmp    ecx,0x7
c0010412:	77 09                	ja     c001041d <VgaText::doANSI_SGR(int)+0x3d>
c0010414:	8b 14 8d a0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e60]
c001041b:	eb 20                	jmp    c001043d <VgaText::doANSI_SGR(int)+0x5d>
c001041d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010420:	83 f9 07             	cmp    ecx,0x7
c0010423:	77 09                	ja     c001042e <VgaText::doANSI_SGR(int)+0x4e>
c0010425:	8b 14 8d a0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e60]
c001042c:	eb 22                	jmp    c0010450 <VgaText::doANSI_SGR(int)+0x70>
c001042e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010431:	83 f9 07             	cmp    ecx,0x7
c0010434:	77 0b                	ja     c0010441 <VgaText::doANSI_SGR(int)+0x61>
c0010436:	8b 14 95 58 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa8]
c001043d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010440:	c3                   	ret    
c0010441:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010444:	83 f9 07             	cmp    ecx,0x7
c0010447:	77 0a                	ja     c0010453 <VgaText::doANSI_SGR(int)+0x73>
c0010449:	8b 14 95 30 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fd0]
c0010450:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010453:	c3                   	ret    

c0010454 <VgaText::setDefaultBgColour(VgaColour)>:
c0010454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001045f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010462:	c3                   	ret    
c0010463:	90                   	nop

c0010464 <VgaText::setDefaultFgColour(VgaColour)>:
c0010464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010468:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001046f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010472:	c3                   	ret    
c0010473:	90                   	nop

c0010474 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010474:	53                   	push   ebx
c0010475:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001047d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010481:	51                   	push   ecx
c0010482:	e8 cd ff ff ff       	call   c0010454 <VgaText::setDefaultBgColour(VgaColour)>
c0010487:	58                   	pop    eax
c0010488:	5a                   	pop    edx
c0010489:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001048d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010491:	5b                   	pop    ebx
c0010492:	eb d0                	jmp    c0010464 <VgaText::setDefaultFgColour(VgaColour)>

c0010494 <VgaText::setTitleTextColour(VgaColour)>:
c0010494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001049c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001049f:	e9 9a fe ff ff       	jmp    c001033e <VgaText::updateTitle()>

c00104a4 <VgaText::setTitleColour(VgaColour)>:
c00104a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00104af:	e9 8a fe ff ff       	jmp    c001033e <VgaText::updateTitle()>

c00104b4 <VgaText::setTitle(char*)>:
c00104b4:	53                   	push   ebx
c00104b5:	83 ec 10             	sub    esp,0x10
c00104b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c0:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00104c6:	50                   	push   eax
c00104c7:	e8 40 03 ff ff       	call   c000080c <strcpy>
c00104cc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104d0:	83 c4 18             	add    esp,0x18
c00104d3:	5b                   	pop    ebx
c00104d4:	e9 65 fe ff ff       	jmp    c001033e <VgaText::updateTitle()>
c00104d9:	90                   	nop

c00104da <VgaText::combineColours(unsigned char, unsigned char)>:
c00104da:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104de:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104e3:	83 e0 0f             	and    eax,0xf
c00104e6:	c1 e2 04             	shl    edx,0x4
c00104e9:	09 d0                	or     eax,edx
c00104eb:	c3                   	ret    

c00104ec <VgaText::scrollScreen()>:
c00104ec:	55                   	push   ebp
c00104ed:	b9 01 00 00 00       	mov    ecx,0x1
c00104f2:	57                   	push   edi
c00104f3:	56                   	push   esi
c00104f4:	53                   	push   ebx
c00104f5:	83 ec 0c             	sub    esp,0xc
c00104f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104fc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010502:	31 ff                	xor    edi,edi
c0010504:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010507:	83 f9 17             	cmp    ecx,0x17
c001050a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001050d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010514:	75 27                	jne    c001053d <VgaText::scrollScreen()+0x51>
c0010516:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010519:	01 f5                	add    ebp,esi
c001051b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010521:	74 16                	je     c0010539 <VgaText::scrollScreen()+0x4d>
c0010523:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010527:	50                   	push   eax
c0010528:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001052c:	50                   	push   eax
c001052d:	e8 a8 ff ff ff       	call   c00104da <VgaText::combineColours(unsigned char, unsigned char)>
c0010532:	5a                   	pop    edx
c0010533:	5a                   	pop    edx
c0010534:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010537:	eb 04                	jmp    c001053d <VgaText::scrollScreen()+0x51>
c0010539:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001053d:	47                   	inc    edi
c001053e:	46                   	inc    esi
c001053f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010545:	75 bd                	jne    c0010504 <VgaText::scrollScreen()+0x18>
c0010547:	41                   	inc    ecx
c0010548:	83 f9 18             	cmp    ecx,0x18
c001054b:	75 af                	jne    c00104fc <VgaText::scrollScreen()+0x10>
c001054d:	39 1d 04 f3 02 c0    	cmp    DWORD PTR ds:0xc002f304,ebx
c0010553:	75 1b                	jne    c0010570 <VgaText::scrollScreen()+0x84>
c0010555:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010559:	74 05                	je     c0010560 <VgaText::scrollScreen()+0x74>
c001055b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001055e:	eb 10                	jmp    c0010570 <VgaText::scrollScreen()+0x84>
c0010560:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010563:	85 c0                	test   eax,eax
c0010565:	74 09                	je     c0010570 <VgaText::scrollScreen()+0x84>
c0010567:	83 ec 0c             	sub    esp,0xc
c001056a:	53                   	push   ebx
c001056b:	ff d0                	call   eax
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010574:	83 c4 0c             	add    esp,0xc
c0010577:	5b                   	pop    ebx
c0010578:	5e                   	pop    esi
c0010579:	5f                   	pop    edi
c001057a:	5d                   	pop    ebp
c001057b:	e9 4a fe ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c0010580 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010580:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010585:	c1 e0 08             	shl    eax,0x8
c0010588:	89 c2                	mov    edx,eax
c001058a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001058f:	09 d0                	or     eax,edx
c0010591:	c3                   	ret    

c0010592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010592:	56                   	push   esi
c0010593:	53                   	push   ebx
c0010594:	51                   	push   ecx
c0010595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010599:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001059e:	50                   	push   eax
c001059f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105a4:	50                   	push   eax
c00105a5:	e8 30 ff ff ff       	call   c00104da <VgaText::combineColours(unsigned char, unsigned char)>
c00105aa:	5b                   	pop    ebx
c00105ab:	0f b6 c0             	movzx  eax,al
c00105ae:	5e                   	pop    esi
c00105af:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105b4:	50                   	push   eax
c00105b5:	53                   	push   ebx
c00105b6:	e8 c5 ff ff ff       	call   c0010580 <VgaText::combineCharAndColour(char, unsigned char)>
c00105bb:	5a                   	pop    edx
c00105bc:	5e                   	pop    esi
c00105bd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00105c0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105c6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105ca:	0f b7 d2             	movzx  edx,dx
c00105cd:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00105d1:	39 0d 04 f3 02 c0    	cmp    DWORD PTR ds:0xc002f304,ecx
c00105d7:	75 10                	jne    c00105e9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105d9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00105dc:	85 c0                	test   eax,eax
c00105de:	74 09                	je     c00105e9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105e4:	5a                   	pop    edx
c00105e5:	5b                   	pop    ebx
c00105e6:	5e                   	pop    esi
c00105e7:	ff e0                	jmp    eax
c00105e9:	58                   	pop    eax
c00105ea:	5b                   	pop    ebx
c00105eb:	5e                   	pop    esi
c00105ec:	c3                   	ret    
c00105ed:	90                   	nop

c00105ee <VgaText::getCursorX()>:
c00105ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105f5:	c3                   	ret    

c00105f6 <VgaText::getCursorY()>:
c00105f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105fa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105fd:	c3                   	ret    

c00105fe <VgaText::setCursor(int, int)>:
c00105fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010602:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010606:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010609:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001060d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010610:	e9 b5 fd ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c0010615 <setActiveTerminal(VgaText*)>:
c0010615:	53                   	push   ebx
c0010616:	83 ec 08             	sub    esp,0x8
c0010619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061d:	85 db                	test   ebx,ebx
c001061f:	75 11                	jne    c0010632 <setActiveTerminal(VgaText*)+0x1d>
c0010621:	c7 44 24 10 60 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae60
c0010629:	83 c4 08             	add    esp,0x8
c001062c:	5b                   	pop    ebx
c001062d:	e9 7d 9d 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c0010632:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0010637:	85 c0                	test   eax,eax
c0010639:	74 0c                	je     c0010647 <setActiveTerminal(VgaText*)+0x32>
c001063b:	83 ec 0c             	sub    esp,0xc
c001063e:	50                   	push   eax
c001063f:	e8 86 fd ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	89 1d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,ebx
c001064d:	51                   	push   ecx
c001064e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010651:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010654:	53                   	push   ebx
c0010655:	e8 a4 ff ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010661:	75 07                	jne    c001066a <setActiveTerminal(VgaText*)+0x55>
c0010663:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001066a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001066e:	83 c4 08             	add    esp,0x8
c0010671:	5b                   	pop    ebx
c0010672:	e9 05 fd ff ff       	jmp    c001037c <VgaText::load()>

c0010677 <doTerminalCycle()>:
c0010677:	83 ec 18             	sub    esp,0x18
c001067a:	a1 00 f3 02 c0       	mov    eax,ds:0xc002f300
c001067f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010682:	50                   	push   eax
c0010683:	a3 00 f3 02 c0       	mov    ds:0xc002f300,eax
c0010688:	e8 88 ff ff ff       	call   c0010615 <setActiveTerminal(VgaText*)>
c001068d:	83 c4 1c             	add    esp,0x1c
c0010690:	c3                   	ret    
c0010691:	90                   	nop

c0010692 <VgaText::setCursorX(int)>:
c0010692:	83 ec 10             	sub    esp,0x10
c0010695:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010699:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001069c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a0:	50                   	push   eax
c00106a1:	e8 58 ff ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c00106a6:	83 c4 1c             	add    esp,0x1c
c00106a9:	c3                   	ret    

c00106aa <VgaText::setCursorY(int)>:
c00106aa:	83 ec 10             	sub    esp,0x10
c00106ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106b5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00106b8:	50                   	push   eax
c00106b9:	e8 40 ff ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c00106be:	83 c4 1c             	add    esp,0x1c
c00106c1:	c3                   	ret    

c00106c2 <VgaText::incrementCursor(bool)>:
c00106c2:	56                   	push   esi
c00106c3:	53                   	push   ebx
c00106c4:	51                   	push   ecx
c00106c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00106d0:	40                   	inc    eax
c00106d1:	83 f8 50             	cmp    eax,0x50
c00106d4:	74 05                	je     c00106db <VgaText::incrementCursor(bool)+0x19>
c00106d6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00106d9:	eb 24                	jmp    c00106ff <VgaText::incrementCursor(bool)+0x3d>
c00106db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00106de:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106e5:	8d 50 01             	lea    edx,[eax+0x1]
c00106e8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106eb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106ee:	75 0f                	jne    c00106ff <VgaText::incrementCursor(bool)+0x3d>
c00106f0:	83 ec 0c             	sub    esp,0xc
c00106f3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106f6:	53                   	push   ebx
c00106f7:	e8 f0 fd ff ff       	call   c00104ec <VgaText::scrollScreen()>
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	89 f0                	mov    eax,esi
c0010701:	84 c0                	test   al,al
c0010703:	74 0c                	je     c0010711 <VgaText::incrementCursor(bool)+0x4f>
c0010705:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010709:	5a                   	pop    edx
c001070a:	5b                   	pop    ebx
c001070b:	5e                   	pop    esi
c001070c:	e9 b9 fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010711:	58                   	pop    eax
c0010712:	5b                   	pop    ebx
c0010713:	5e                   	pop    esi
c0010714:	c3                   	ret    
c0010715:	90                   	nop

c0010716 <VgaText::decrementCursor(bool)>:
c0010716:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001071a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001071e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010721:	85 c0                	test   eax,eax
c0010723:	74 04                	je     c0010729 <VgaText::decrementCursor(bool)+0x13>
c0010725:	48                   	dec    eax
c0010726:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010729:	84 c9                	test   cl,cl
c001072b:	74 09                	je     c0010736 <VgaText::decrementCursor(bool)+0x20>
c001072d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010731:	e9 94 fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010736:	c3                   	ret    
c0010737:	90                   	nop

c0010738 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010738:	53                   	push   ebx
c0010739:	83 ec 08             	sub    esp,0x8
c001073c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010740:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010744:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010748:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001074c:	3c 07                	cmp    al,0x7
c001074e:	75 2a                	jne    c001077a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010750:	a1 b8 f3 02 c0       	mov    eax,ds:0xc002f3b8
c0010755:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001075d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010765:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001076d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010771:	83 c4 08             	add    esp,0x8
c0010774:	5b                   	pop    ebx
c0010775:	e9 8e 2f 00 00       	jmp    c0013708 <Buzzer::beep(int, int, bool)>
c001077a:	3c 0d                	cmp    al,0xd
c001077c:	75 09                	jne    c0010787 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001077e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010785:	eb 2c                	jmp    c00107b3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010787:	3c 0a                	cmp    al,0xa
c0010789:	75 31                	jne    c00107bc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001078b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001078e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010795:	8d 50 01             	lea    edx,[eax+0x1]
c0010798:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001079b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001079e:	75 0f                	jne    c00107af <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00107a0:	83 ec 0c             	sub    esp,0xc
c00107a3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00107a6:	53                   	push   ebx
c00107a7:	e8 40 fd ff ff       	call   c00104ec <VgaText::scrollScreen()>
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107b3:	83 c4 08             	add    esp,0x8
c00107b6:	5b                   	pop    ebx
c00107b7:	e9 0e fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00107bc:	3c 08                	cmp    al,0x8
c00107be:	75 25                	jne    c00107e5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00107c0:	50                   	push   eax
c00107c1:	50                   	push   eax
c00107c2:	6a 01                	push   0x1
c00107c4:	53                   	push   ebx
c00107c5:	e8 4c ff ff ff       	call   c0010716 <VgaText::decrementCursor(bool)>
c00107ca:	5a                   	pop    edx
c00107cb:	59                   	pop    ecx
c00107cc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107cf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107d2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107d5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107d8:	6a 20                	push   0x20
c00107da:	53                   	push   ebx
c00107db:	e8 b2 fd ff ff       	call   c0010592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107e0:	83 c4 28             	add    esp,0x28
c00107e3:	5b                   	pop    ebx
c00107e4:	c3                   	ret    
c00107e5:	83 ec 08             	sub    esp,0x8
c00107e8:	0f be c0             	movsx  eax,al
c00107eb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107ee:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107f1:	51                   	push   ecx
c00107f2:	52                   	push   edx
c00107f3:	50                   	push   eax
c00107f4:	53                   	push   ebx
c00107f5:	e8 98 fd ff ff       	call   c0010592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107fa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107fe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010806:	83 c4 28             	add    esp,0x28
c0010809:	5b                   	pop    ebx
c001080a:	e9 b3 fe ff ff       	jmp    c00106c2 <VgaText::incrementCursor(bool)>
c001080f:	90                   	nop

c0010810 <VgaText::doUpdate()>:
c0010810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010814:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010817:	85 c0                	test   eax,eax
c0010819:	74 02                	je     c001081d <VgaText::doUpdate()+0xd>
c001081b:	ff e0                	jmp    eax
c001081d:	c3                   	ret    

c001081e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001081e:	55                   	push   ebp
c001081f:	31 ed                	xor    ebp,ebp
c0010821:	57                   	push   edi
c0010822:	56                   	push   esi
c0010823:	53                   	push   ebx
c0010824:	83 ec 1c             	sub    esp,0x1c
c0010827:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001082b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010830:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010837:	50                   	push   eax
c0010838:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001083d:	50                   	push   eax
c001083e:	e8 97 fc ff ff       	call   c00104da <VgaText::combineColours(unsigned char, unsigned char)>
c0010843:	59                   	pop    ecx
c0010844:	0f b6 c0             	movzx  eax,al
c0010847:	5e                   	pop    esi
c0010848:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001084d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010851:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010854:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010858:	0f b7 f6             	movzx  esi,si
c001085b:	01 f6                	add    esi,esi
c001085d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010860:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010863:	84 c0                	test   al,al
c0010865:	0f 84 fd 00 00 00    	je     c0010968 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001086b:	3c 0d                	cmp    al,0xd
c001086d:	75 0c                	jne    c001087b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001086f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010876:	e9 e7 00 00 00       	jmp    c0010962 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001087b:	3c 0a                	cmp    al,0xa
c001087d:	75 47                	jne    c00108c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001087f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010882:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010889:	8d 48 01             	lea    ecx,[eax+0x1]
c001088c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001088f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010892:	75 0f                	jne    c00108a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010894:	83 ec 0c             	sub    esp,0xc
c0010897:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001089a:	53                   	push   ebx
c001089b:	e8 4c fc ff ff       	call   c00104ec <VgaText::scrollScreen()>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	83 ec 0c             	sub    esp,0xc
c00108a6:	31 ed                	xor    ebp,ebp
c00108a8:	53                   	push   ebx
c00108a9:	e8 1c fb ff ff       	call   c00103ca <VgaText::updateCursor()>
c00108ae:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108b3:	83 c4 10             	add    esp,0x10
c00108b6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108b9:	0f b7 f6             	movzx  esi,si
c00108bc:	01 f6                	add    esi,esi
c00108be:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108c1:	e9 9c 00 00 00       	jmp    c0010962 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108c6:	3c 08                	cmp    al,0x8
c00108c8:	75 35                	jne    c00108ff <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00108ca:	56                   	push   esi
c00108cb:	56                   	push   esi
c00108cc:	6a 01                	push   0x1
c00108ce:	53                   	push   ebx
c00108cf:	e8 42 fe ff ff       	call   c0010716 <VgaText::decrementCursor(bool)>
c00108d4:	58                   	pop    eax
c00108d5:	5a                   	pop    edx
c00108d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108dc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108e2:	6a 20                	push   0x20
c00108e4:	53                   	push   ebx
c00108e5:	e8 a8 fc ff ff       	call   c0010592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108ea:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108ef:	83 c4 20             	add    esp,0x20
c00108f2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108f5:	0f b7 f6             	movzx  esi,si
c00108f8:	01 f6                	add    esi,esi
c00108fa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108fd:	eb 63                	jmp    c0010962 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108ff:	51                   	push   ecx
c0010900:	51                   	push   ecx
c0010901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010905:	50                   	push   eax
c0010906:	e8 75 fc ff ff       	call   c0010580 <VgaText::combineCharAndColour(char, unsigned char)>
c001090b:	83 c4 10             	add    esp,0x10
c001090e:	66 89 06             	mov    WORD PTR [esi],ax
c0010911:	39 1d 04 f3 02 c0    	cmp    DWORD PTR ds:0xc002f304,ebx
c0010917:	75 21                	jne    c001093a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010919:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001091c:	85 c0                	test   eax,eax
c001091e:	74 1a                	je     c001093a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010920:	52                   	push   edx
c0010921:	52                   	push   edx
c0010922:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010925:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010928:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001092c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010930:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010933:	51                   	push   ecx
c0010934:	53                   	push   ebx
c0010935:	ff d0                	call   eax
c0010937:	83 c4 20             	add    esp,0x20
c001093a:	83 c6 02             	add    esi,0x2
c001093d:	50                   	push   eax
c001093e:	50                   	push   eax
c001093f:	6a 00                	push   0x0
c0010941:	53                   	push   ebx
c0010942:	e8 7b fd ff ff       	call   c00106c2 <VgaText::incrementCursor(bool)>
c0010947:	83 c4 10             	add    esp,0x10
c001094a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001094e:	75 0d                	jne    c001095d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010950:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010955:	0f b7 f6             	movzx  esi,si
c0010958:	01 f6                	add    esi,esi
c001095a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001095d:	bd 01 00 00 00       	mov    ebp,0x1
c0010962:	47                   	inc    edi
c0010963:	e9 f8 fe ff ff       	jmp    c0010860 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	53                   	push   ebx
c001096c:	e8 59 fa ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	89 e8                	mov    eax,ebp
c0010976:	84 c0                	test   al,al
c0010978:	74 0c                	je     c0010986 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	53                   	push   ebx
c001097e:	e8 8d fe ff ff       	call   c0010810 <VgaText::doUpdate()>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001098d:	83 c4 1c             	add    esp,0x1c
c0010990:	5b                   	pop    ebx
c0010991:	5e                   	pop    esi
c0010992:	5f                   	pop    edi
c0010993:	5d                   	pop    ebp
c0010994:	c3                   	ret    
c0010995:	90                   	nop

c0010996 <VgaText::clearScreen()>:
c0010996:	57                   	push   edi
c0010997:	56                   	push   esi
c0010998:	31 f6                	xor    esi,esi
c001099a:	53                   	push   ebx
c001099b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001099f:	52                   	push   edx
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	53                   	push   ebx
c00109a5:	e8 54 fc ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c00109aa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00109b7:	7e 20                	jle    c00109d9 <VgaText::clearScreen()+0x43>
c00109b9:	31 ff                	xor    edi,edi
c00109bb:	50                   	push   eax
c00109bc:	50                   	push   eax
c00109bd:	56                   	push   esi
c00109be:	57                   	push   edi
c00109bf:	47                   	inc    edi
c00109c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00109c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00109c6:	6a 20                	push   0x20
c00109c8:	53                   	push   ebx
c00109c9:	e8 c4 fb ff ff       	call   c0010592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109ce:	83 c4 20             	add    esp,0x20
c00109d1:	83 ff 50             	cmp    edi,0x50
c00109d4:	75 e5                	jne    c00109bb <VgaText::clearScreen()+0x25>
c00109d6:	46                   	inc    esi
c00109d7:	eb db                	jmp    c00109b4 <VgaText::clearScreen()+0x1e>
c00109d9:	83 ec 0c             	sub    esp,0xc
c00109dc:	53                   	push   ebx
c00109dd:	e8 2e fe ff ff       	call   c0010810 <VgaText::doUpdate()>
c00109e2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	5b                   	pop    ebx
c00109ed:	5e                   	pop    esi
c00109ee:	5f                   	pop    edi
c00109ef:	c3                   	ret    

c00109f0 <VgaText::putchar(char)>:
c00109f0:	56                   	push   esi
c00109f1:	53                   	push   ebx
c00109f2:	83 ec 14             	sub    esp,0x14
c00109f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109fd:	3c 5b                	cmp    al,0x5b
c00109ff:	75 18                	jne    c0010a19 <VgaText::putchar(char)+0x29>
c0010a01:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010a05:	74 1f                	je     c0010a26 <VgaText::putchar(char)+0x36>
c0010a07:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010a0d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010a14:	e9 bd 00 00 00       	jmp    c0010ad6 <VgaText::putchar(char)+0xe6>
c0010a19:	3c 1b                	cmp    al,0x1b
c0010a1b:	75 09                	jne    c0010a26 <VgaText::putchar(char)+0x36>
c0010a1d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010a21:	e9 b0 00 00 00       	jmp    c0010ad6 <VgaText::putchar(char)+0xe6>
c0010a26:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010a29:	84 c9                	test   cl,cl
c0010a2b:	0f 84 92 00 00 00    	je     c0010ac3 <VgaText::putchar(char)+0xd3>
c0010a31:	8d 50 c0             	lea    edx,[eax-0x40]
c0010a34:	80 fa 3e             	cmp    dl,0x3e
c0010a37:	77 76                	ja     c0010aaf <VgaText::putchar(char)+0xbf>
c0010a39:	3c 6d                	cmp    al,0x6d
c0010a3b:	75 47                	jne    c0010a84 <VgaText::putchar(char)+0x94>
c0010a3d:	31 f6                	xor    esi,esi
c0010a3f:	31 d2                	xor    edx,edx
c0010a41:	31 c0                	xor    eax,eax
c0010a43:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a46:	7e 2d                	jle    c0010a75 <VgaText::putchar(char)+0x85>
c0010a48:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a4d:	80 fa 3b             	cmp    dl,0x3b
c0010a50:	75 17                	jne    c0010a69 <VgaText::putchar(char)+0x79>
c0010a52:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a56:	50                   	push   eax
c0010a57:	53                   	push   ebx
c0010a58:	e8 83 f9 ff ff       	call   c00103e0 <VgaText::doANSI_SGR(int)>
c0010a5d:	59                   	pop    ecx
c0010a5e:	31 d2                	xor    edx,edx
c0010a60:	58                   	pop    eax
c0010a61:	31 c0                	xor    eax,eax
c0010a63:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a67:	eb 09                	jmp    c0010a72 <VgaText::putchar(char)+0x82>
c0010a69:	6b c0 0a             	imul   eax,eax,0xa
c0010a6c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a70:	88 ca                	mov    dl,cl
c0010a72:	46                   	inc    esi
c0010a73:	eb ce                	jmp    c0010a43 <VgaText::putchar(char)+0x53>
c0010a75:	84 d2                	test   dl,dl
c0010a77:	74 2e                	je     c0010aa7 <VgaText::putchar(char)+0xb7>
c0010a79:	50                   	push   eax
c0010a7a:	53                   	push   ebx
c0010a7b:	e8 60 f9 ff ff       	call   c00103e0 <VgaText::doANSI_SGR(int)>
c0010a80:	58                   	pop    eax
c0010a81:	5a                   	pop    edx
c0010a82:	eb 23                	jmp    c0010aa7 <VgaText::putchar(char)+0xb7>
c0010a84:	3c 4a                	cmp    al,0x4a
c0010a86:	75 1f                	jne    c0010aa7 <VgaText::putchar(char)+0xb7>
c0010a88:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a8c:	75 19                	jne    c0010aa7 <VgaText::putchar(char)+0xb7>
c0010a8e:	83 ec 0c             	sub    esp,0xc
c0010a91:	53                   	push   ebx
c0010a92:	e8 ff fe ff ff       	call   c0010996 <VgaText::clearScreen()>
c0010a97:	83 c4 0c             	add    esp,0xc
c0010a9a:	6a 00                	push   0x0
c0010a9c:	6a 00                	push   0x0
c0010a9e:	53                   	push   ebx
c0010a9f:	e8 5a fb ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c0010aa4:	83 c4 10             	add    esp,0x10
c0010aa7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010aad:	eb 27                	jmp    c0010ad6 <VgaText::putchar(char)+0xe6>
c0010aaf:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010ab2:	83 fa 0e             	cmp    edx,0xe
c0010ab5:	7f 1f                	jg     c0010ad6 <VgaText::putchar(char)+0xe6>
c0010ab7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010aba:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010abd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010ac1:	eb 13                	jmp    c0010ad6 <VgaText::putchar(char)+0xe6>
c0010ac3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ac6:	0f be c0             	movsx  eax,al
c0010ac9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010acc:	50                   	push   eax
c0010acd:	53                   	push   ebx
c0010ace:	e8 65 fc ff ff       	call   c0010738 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 c4 14             	add    esp,0x14
c0010ad9:	5b                   	pop    ebx
c0010ada:	5e                   	pop    esi
c0010adb:	c3                   	ret    

c0010adc <VgaText::putx(unsigned int)>:
c0010adc:	57                   	push   edi
c0010add:	b9 11 00 00 00       	mov    ecx,0x11
c0010ae2:	56                   	push   esi
c0010ae3:	be 6e ae 02 c0       	mov    esi,0xc002ae6e
c0010ae8:	53                   	push   ebx
c0010ae9:	83 ec 20             	sub    esp,0x20
c0010aec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010af0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010af4:	fc                   	cld    
c0010af5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af7:	be 08 00 00 00       	mov    esi,0x8
c0010afc:	50                   	push   eax
c0010afd:	50                   	push   eax
c0010afe:	89 d8                	mov    eax,ebx
c0010b00:	c1 e3 04             	shl    ebx,0x4
c0010b03:	c1 e8 1c             	shr    eax,0x1c
c0010b06:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010b0b:	50                   	push   eax
c0010b0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010b10:	e8 db fe ff ff       	call   c00109f0 <VgaText::putchar(char)>
c0010b15:	83 c4 10             	add    esp,0x10
c0010b18:	4e                   	dec    esi
c0010b19:	75 e1                	jne    c0010afc <VgaText::putx(unsigned int)+0x20>
c0010b1b:	83 c4 20             	add    esp,0x20
c0010b1e:	5b                   	pop    ebx
c0010b1f:	5e                   	pop    esi
c0010b20:	5f                   	pop    edi
c0010b21:	c3                   	ret    

c0010b22 <VgaText::puts(char const*)>:
c0010b22:	53                   	push   ebx
c0010b23:	83 ec 08             	sub    esp,0x8
c0010b26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b2a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010b2d:	84 c0                	test   al,al
c0010b2f:	74 12                	je     c0010b43 <VgaText::puts(char const*)+0x21>
c0010b31:	43                   	inc    ebx
c0010b32:	51                   	push   ecx
c0010b33:	51                   	push   ecx
c0010b34:	50                   	push   eax
c0010b35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b39:	e8 b2 fe ff ff       	call   c00109f0 <VgaText::putchar(char)>
c0010b3e:	83 c4 10             	add    esp,0x10
c0010b41:	eb e7                	jmp    c0010b2a <VgaText::puts(char const*)+0x8>
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	5b                   	pop    ebx
c0010b47:	c3                   	ret    

c0010b48 <VgaText::VgaText(char const*)>:
c0010b48:	57                   	push   edi
c0010b49:	56                   	push   esi
c0010b4a:	53                   	push   ebx
c0010b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4f:	83 ec 08             	sub    esp,0x8
c0010b52:	6a 00                	push   0x0
c0010b54:	50                   	push   eax
c0010b55:	e8 58 05 00 00       	call   c00110b2 <UnixFile::UnixFile(int)>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c0010b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b66:	89 10                	mov    DWORD PTR [eax],edx
c0010b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b77:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b82:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b92:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbe:	8d 50 60             	lea    edx,[eax+0x60]
c0010bc1:	bb e0 f2 02 c0       	mov    ebx,0xc002f2e0
c0010bc6:	b8 08 00 00 00       	mov    eax,0x8
c0010bcb:	fc                   	cld    
c0010bcc:	89 d7                	mov    edi,edx
c0010bce:	89 de                	mov    esi,ebx
c0010bd0:	89 c1                	mov    ecx,eax
c0010bd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd8:	05 82 00 00 00       	add    eax,0x82
c0010bdd:	83 ec 08             	sub    esp,0x8
c0010be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be4:	50                   	push   eax
c0010be5:	e8 22 fc fe ff       	call   c000080c <strcpy>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	6a 01                	push   0x1
c0010bfd:	e8 f3 08 00 00       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0010c02:	83 c4 10             	add    esp,0x10
c0010c05:	89 c2                	mov    edx,eax
c0010c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c0e:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c0010c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c1b:	89 c6                	mov    esi,eax
c0010c1d:	e8 84 f0 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0010c22:	6a 05                	push   0x5
c0010c24:	56                   	push   esi
c0010c25:	50                   	push   eax
c0010c26:	53                   	push   ebx
c0010c27:	e8 00 11 00 00       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c36:	83 ec 04             	sub    esp,0x4
c0010c39:	68 00 0f 00 00       	push   0xf00
c0010c3e:	6a 00                	push   0x0
c0010c40:	50                   	push   eax
c0010c41:	e8 0a fb fe ff       	call   c0000750 <memset>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	83 ec 04             	sub    esp,0x4
c0010c4c:	6a 00                	push   0x0
c0010c4e:	6a 07                	push   0x7
c0010c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c54:	e8 1b f8 ff ff       	call   c0010474 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	83 ec 04             	sub    esp,0x4
c0010c5f:	6a 00                	push   0x0
c0010c61:	6a 00                	push   0x0
c0010c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c67:	e8 92 f9 ff ff       	call   c00105fe <VgaText::setCursor(int, int)>
c0010c6c:	83 c4 10             	add    esp,0x10
c0010c6f:	83 ec 0c             	sub    esp,0xc
c0010c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c76:	e8 1b fd ff ff       	call   c0010996 <VgaText::clearScreen()>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c82:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c8a:	05 02 01 00 00       	add    eax,0x102
c0010c8f:	83 ec 04             	sub    esp,0x4
c0010c92:	68 96 00 00 00       	push   0x96
c0010c97:	6a 00                	push   0x0
c0010c99:	50                   	push   eax
c0010c9a:	e8 b1 fa fe ff       	call   c0000750 <memset>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca6:	05 98 01 00 00       	add    eax,0x198
c0010cab:	83 ec 04             	sub    esp,0x4
c0010cae:	68 2c 01 00 00       	push   0x12c
c0010cb3:	6a 00                	push   0x0
c0010cb5:	50                   	push   eax
c0010cb6:	e8 95 fa fe ff       	call   c0000750 <memset>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	90                   	nop
c0010cbf:	5b                   	pop    ebx
c0010cc0:	5e                   	pop    esi
c0010cc1:	5f                   	pop    edi
c0010cc2:	c3                   	ret    
c0010cc3:	90                   	nop

c0010cc4 <VgaText::receiveKey(unsigned char)>:
c0010cc4:	55                   	push   ebp
c0010cc5:	57                   	push   edi
c0010cc6:	56                   	push   esi
c0010cc7:	53                   	push   ebx
c0010cc8:	83 ec 1c             	sub    esp,0x1c
c0010ccb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ccf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cd3:	84 db                	test   bl,bl
c0010cd5:	0f 84 c9 00 00 00    	je     c0010da4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010cdb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010ce1:	80 fb 08             	cmp    bl,0x8
c0010ce4:	75 2c                	jne    c0010d12 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	57                   	push   edi
c0010cea:	e8 7d fa fe ff       	call   c000076c <strlen>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	85 c0                	test   eax,eax
c0010cf4:	74 41                	je     c0010d37 <VgaText::receiveKey(unsigned char)+0x73>
c0010cf6:	50                   	push   eax
c0010cf7:	50                   	push   eax
c0010cf8:	6a 08                	push   0x8
c0010cfa:	56                   	push   esi
c0010cfb:	e8 f0 fc ff ff       	call   c00109f0 <VgaText::putchar(char)>
c0010d00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d03:	e8 64 fa fe ff       	call   c000076c <strlen>
c0010d08:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010d10:	eb 22                	jmp    c0010d34 <VgaText::receiveKey(unsigned char)+0x70>
c0010d12:	0f be c3             	movsx  eax,bl
c0010d15:	52                   	push   edx
c0010d16:	52                   	push   edx
c0010d17:	50                   	push   eax
c0010d18:	56                   	push   esi
c0010d19:	e8 d2 fc ff ff       	call   c00109f0 <VgaText::putchar(char)>
c0010d1e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d27:	59                   	pop    ecx
c0010d28:	5d                   	pop    ebp
c0010d29:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d2d:	50                   	push   eax
c0010d2e:	57                   	push   edi
c0010d2f:	e8 18 fc fe ff       	call   c000094c <strcat>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d3e:	75 05                	jne    c0010d45 <VgaText::receiveKey(unsigned char)+0x81>
c0010d40:	80 fb 0a             	cmp    bl,0xa
c0010d43:	75 53                	jne    c0010d98 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d4e:	53                   	push   ebx
c0010d4f:	e8 18 fa fe ff       	call   c000076c <strlen>
c0010d54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d57:	89 c5                	mov    ebp,eax
c0010d59:	e8 0e fa fe ff       	call   c000076c <strlen>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d65:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d6a:	76 10                	jbe    c0010d7c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d6c:	83 ec 0c             	sub    esp,0xc
c0010d6f:	68 7f ae 02 c0       	push   0xc002ae7f
c0010d74:	e8 36 96 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	50                   	push   eax
c0010d7d:	50                   	push   eax
c0010d7e:	57                   	push   edi
c0010d7f:	53                   	push   ebx
c0010d80:	e8 c7 fb fe ff       	call   c000094c <strcat>
c0010d85:	83 c4 0c             	add    esp,0xc
c0010d88:	68 96 00 00 00       	push   0x96
c0010d8d:	6a 00                	push   0x0
c0010d8f:	57                   	push   edi
c0010d90:	e8 bb f9 fe ff       	call   c0000750 <memset>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	56                   	push   esi
c0010d9c:	e8 6f fa ff ff       	call   c0010810 <VgaText::doUpdate()>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	83 c4 1c             	add    esp,0x1c
c0010da7:	5b                   	pop    ebx
c0010da8:	5e                   	pop    esi
c0010da9:	5f                   	pop    edi
c0010daa:	5d                   	pop    ebp
c0010dab:	c3                   	ret    

c0010dac <VgaText::write(unsigned long long, void*, int*)>:
c0010dac:	55                   	push   ebp
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010db7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010dbb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dbf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010dc6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010dc9:	39 eb                	cmp    ebx,ebp
c0010dcb:	74 13                	je     c0010de0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010dcd:	43                   	inc    ebx
c0010dce:	50                   	push   eax
c0010dcf:	50                   	push   eax
c0010dd0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010dd4:	50                   	push   eax
c0010dd5:	56                   	push   esi
c0010dd6:	e8 15 fc ff ff       	call   c00109f0 <VgaText::putchar(char)>
c0010ddb:	83 c4 10             	add    esp,0x10
c0010dde:	eb e9                	jmp    c0010dc9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dea:	56                   	push   esi
c0010deb:	e8 20 fa ff ff       	call   c0010810 <VgaText::doUpdate()>
c0010df0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010df4:	89 38                	mov    DWORD PTR [eax],edi
c0010df6:	83 c4 1c             	add    esp,0x1c
c0010df9:	31 c0                	xor    eax,eax
c0010dfb:	5b                   	pop    ebx
c0010dfc:	5e                   	pop    esi
c0010dfd:	5f                   	pop    edi
c0010dfe:	5d                   	pop    ebp
c0010dff:	c3                   	ret    

c0010e00 <newTerminal(char*)>:
c0010e00:	83 ec 28             	sub    esp,0x28
c0010e03:	68 c4 02 00 00       	push   0x2c4
c0010e08:	e8 f5 ea ff ff       	call   c000f902 <malloc>
c0010e0d:	5a                   	pop    edx
c0010e0e:	59                   	pop    ecx
c0010e0f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e13:	50                   	push   eax
c0010e14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e18:	e8 2b fd ff ff       	call   c0010b48 <VgaText::VgaText(char const*)>
c0010e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e21:	83 c4 2c             	add    esp,0x2c
c0010e24:	c3                   	ret    
c0010e25:	90                   	nop

c0010e26 <TSS::TSS()>:
c0010e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e31:	90                   	nop
c0010e32:	c3                   	ret    
c0010e33:	90                   	nop

c0010e34 <TSS::setESP(unsigned long)>:
c0010e34:	55                   	push   ebp
c0010e35:	89 e5                	mov    ebp,esp
c0010e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e43:	90                   	nop
c0010e44:	5d                   	pop    ebp
c0010e45:	c3                   	ret    

c0010e46 <TSS::flush()>:
c0010e46:	55                   	push   ebp
c0010e47:	89 e5                	mov    ebp,esp
c0010e49:	83 ec 10             	sub    esp,0x10
c0010e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e51:	83 c8 03             	or     eax,0x3
c0010e54:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e58:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e5c:	66 89 d0             	mov    ax,dx
c0010e5f:	0f 00 d8             	ltr    ax
c0010e62:	90                   	nop
c0010e63:	c9                   	leave  
c0010e64:	c3                   	ret    
c0010e65:	90                   	nop

c0010e66 <TSS::setup(unsigned long, unsigned long)>:
c0010e66:	55                   	push   ebp
c0010e67:	89 e5                	mov    ebp,esp
c0010e69:	83 ec 18             	sub    esp,0x18
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	6a 68                	push   0x68
c0010e71:	e8 8c ea ff ff       	call   c000f902 <malloc>
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	89 c2                	mov    edx,eax
c0010e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e87:	83 ec 04             	sub    esp,0x4
c0010e8a:	6a 68                	push   0x68
c0010e8c:	6a 00                	push   0x0
c0010e8e:	50                   	push   eax
c0010e8f:	e8 bc f8 fe ff       	call   c0000750 <memset>
c0010e94:	83 c4 10             	add    esp,0x10
c0010e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010efa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010efd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f09:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010f0c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f21:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f2e:	0f 20 da             	mov    edx,cr3
c0010f31:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f37:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f40:	83 ec 08             	sub    esp,0x8
c0010f43:	50                   	push   eax
c0010f44:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f47:	50                   	push   eax
c0010f48:	e8 91 e1 ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	83 ec 08             	sub    esp,0x8
c0010f53:	6a 68                	push   0x68
c0010f55:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f58:	50                   	push   eax
c0010f59:	e8 9c e1 ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f65:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f68:	83 e0 0f             	and    eax,0xf
c0010f6b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f6e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f71:	83 c8 40             	or     eax,0x40
c0010f74:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f77:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0010f7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f82:	05 78 01 00 00       	add    eax,0x178
c0010f87:	83 ec 04             	sub    esp,0x4
c0010f8a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f8d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f90:	50                   	push   eax
c0010f91:	e8 98 e1 ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	89 c2                	mov    edx,eax
c0010f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9e:	89 10                	mov    DWORD PTR [eax],edx
c0010fa0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0010fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fab:	05 78 01 00 00       	add    eax,0x178
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	50                   	push   eax
c0010fb4:	e8 b9 e1 ff ff       	call   c000f172 <GDT::flush()>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fc1:	83 ec 08             	sub    esp,0x8
c0010fc4:	50                   	push   eax
c0010fc5:	68 e8 ae 02 c0       	push   0xc002aee8
c0010fca:	e8 2c 19 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0010fcf:	83 c4 10             	add    esp,0x10
c0010fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fd7:	c9                   	leave  
c0010fd8:	c3                   	ret    
c0010fd9:	90                   	nop

c0010fda <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fea:	75 08                	jne    c0010ff4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010ff2:	eb 38                	jmp    c001102c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ff4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ff9:	75 17                	jne    c0011012 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011000:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011003:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011009:	8b 10                	mov    edx,DWORD PTR [eax]
c001100b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001100f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011012:	89 c1                	mov    ecx,eax
c0011014:	83 e1 fd             	and    ecx,0xfffffffd
c0011017:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001101d:	74 cd                	je     c0010fec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001101f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011024:	83 e0 ef             	and    eax,0xffffffef
c0011027:	83 f8 08             	cmp    eax,0x8
c001102a:	76 c0                	jbe    c0010fec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001102c:	31 c0                	xor    eax,eax
c001102e:	c3                   	ret    
c001102f:	90                   	nop

c0011030 <ReservedFilename::isAtty()>:
c0011030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011034:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011037:	31 c0                	xor    eax,eax
c0011039:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001103f:	74 09                	je     c001104a <ReservedFilename::isAtty()+0x1a>
c0011041:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011047:	0f 94 c0             	sete   al
c001104a:	c3                   	ret    
c001104b:	90                   	nop

c001104c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001104c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001105b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011060:	75 08                	jne    c001106a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011062:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011068:	eb 3d                	jmp    c00110a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001106a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001106f:	75 17                	jne    c0011088 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011076:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011079:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001107f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011085:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011088:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001108d:	75 04                	jne    c0011093 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001108f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011091:	eb 14                	jmp    c00110a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011093:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011098:	74 c8                	je     c0011062 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001109a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001109f:	83 e0 ef             	and    eax,0xffffffef
c00110a2:	83 f8 08             	cmp    eax,0x8
c00110a5:	76 bb                	jbe    c0011062 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00110a7:	31 c0                	xor    eax,eax
c00110a9:	c3                   	ret    

c00110aa <UnixFile::getFileDescriptor()>:
c00110aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b1:	c3                   	ret    

c00110b2 <UnixFile::UnixFile(int)>:
c00110b2:	53                   	push   ebx
c00110b3:	83 ec 28             	sub    esp,0x28
c00110b6:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c00110bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110bf:	89 10                	mov    DWORD PTR [eax],edx
c00110c1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00110c9:	0f 8f 8c 01 00 00    	jg     c001125b <UnixFile::UnixFile(int)+0x1a9>
c00110cf:	a1 e0 e1 02 c0       	mov    eax,ds:0xc002e1e0
c00110d4:	8d 50 01             	lea    edx,[eax+0x1]
c00110d7:	89 15 e0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e0,edx
c00110dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110e4:	83 ec 08             	sub    esp,0x8
c00110e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110eb:	68 98 f3 02 c0       	push   0xc002f398
c00110f0:	e8 67 7f 01 00       	call   c002905c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	a0 94 f3 02 c0       	mov    al,ds:0xc002f394
c00110fd:	83 f0 01             	xor    eax,0x1
c0011100:	84 c0                	test   al,al
c0011102:	0f 84 54 01 00 00    	je     c001125c <UnixFile::UnixFile(int)+0x1aa>
c0011108:	c6 05 94 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f394,0x1
c001110f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011117:	83 ec 0c             	sub    esp,0xc
c001111a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001111e:	e8 df e7 ff ff       	call   c000f902 <malloc>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	89 c3                	mov    ebx,eax
c0011128:	83 ec 08             	sub    esp,0x8
c001112b:	68 03 ff ff 0f       	push   0xfffff03
c0011130:	53                   	push   ebx
c0011131:	e8 2c 01 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c0011136:	83 c4 10             	add    esp,0x10
c0011139:	89 1d 8c f3 02 c0    	mov    DWORD PTR ds:0xc002f38c,ebx
c001113f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011147:	83 ec 0c             	sub    esp,0xc
c001114a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001114e:	e8 af e7 ff ff       	call   c000f902 <malloc>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	89 c3                	mov    ebx,eax
c0011158:	83 ec 08             	sub    esp,0x8
c001115b:	68 01 ff ff 0f       	push   0xfffff01
c0011160:	53                   	push   ebx
c0011161:	e8 fc 00 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	89 1d 90 f3 02 c0    	mov    DWORD PTR ds:0xc002f390,ebx
c001116f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011177:	83 ec 0c             	sub    esp,0xc
c001117a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001117e:	e8 7f e7 ff ff       	call   c000f902 <malloc>
c0011183:	83 c4 10             	add    esp,0x10
c0011186:	89 c3                	mov    ebx,eax
c0011188:	83 ec 08             	sub    esp,0x8
c001118b:	68 00 ff ff 0f       	push   0xfffff00
c0011190:	53                   	push   ebx
c0011191:	e8 cc 00 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c0011196:	83 c4 10             	add    esp,0x10
c0011199:	89 1d 84 f3 02 c0    	mov    DWORD PTR ds:0xc002f384,ebx
c001119f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00111a7:	83 ec 0c             	sub    esp,0xc
c00111aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111ae:	e8 4f e7 ff ff       	call   c000f902 <malloc>
c00111b3:	83 c4 10             	add    esp,0x10
c00111b6:	89 c3                	mov    ebx,eax
c00111b8:	83 ec 08             	sub    esp,0x8
c00111bb:	68 02 ff ff 0f       	push   0xfffff02
c00111c0:	53                   	push   ebx
c00111c1:	e8 9c 00 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	89 1d 88 f3 02 c0    	mov    DWORD PTR ds:0xc002f388,ebx
c00111cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111d7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111dc:	7f 7e                	jg     c001125c <UnixFile::UnixFile(int)+0x1aa>
c00111de:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111ed:	e8 10 e7 ff ff       	call   c000f902 <malloc>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	89 c3                	mov    ebx,eax
c00111f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111fb:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011200:	83 ec 08             	sub    esp,0x8
c0011203:	50                   	push   eax
c0011204:	53                   	push   ebx
c0011205:	e8 58 00 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011211:	89 1c 85 60 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ca0],ebx
c0011218:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011220:	83 ec 0c             	sub    esp,0xc
c0011223:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011227:	e8 d6 e6 ff ff       	call   c000f902 <malloc>
c001122c:	83 c4 10             	add    esp,0x10
c001122f:	89 c3                	mov    ebx,eax
c0011231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011235:	05 20 ff ff 0f       	add    eax,0xfffff20
c001123a:	83 ec 08             	sub    esp,0x8
c001123d:	50                   	push   eax
c001123e:	53                   	push   ebx
c001123f:	e8 1e 00 00 00       	call   c0011262 <ReservedFilename::ReservedFilename(int)>
c0011244:	83 c4 10             	add    esp,0x10
c0011247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001124b:	89 1c 85 20 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ce0],ebx
c0011252:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011256:	e9 7c ff ff ff       	jmp    c00111d7 <UnixFile::UnixFile(int)+0x125>
c001125b:	90                   	nop
c001125c:	83 c4 28             	add    esp,0x28
c001125f:	5b                   	pop    ebx
c0011260:	c3                   	ret    
c0011261:	90                   	nop

c0011262 <ReservedFilename::ReservedFilename(int)>:
c0011262:	83 ec 0c             	sub    esp,0xc
c0011265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011269:	83 ec 08             	sub    esp,0x8
c001126c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011270:	50                   	push   eax
c0011271:	e8 3c fe ff ff       	call   c00110b2 <UnixFile::UnixFile(int)>
c0011276:	83 c4 10             	add    esp,0x10
c0011279:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c001127e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011282:	89 10                	mov    DWORD PTR [eax],edx
c0011284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011288:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001128c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128f:	90                   	nop
c0011290:	83 c4 0c             	add    esp,0xc
c0011293:	c3                   	ret    

c0011294 <UnixFile::~UnixFile()>:
c0011294:	83 ec 1c             	sub    esp,0x1c
c0011297:	ba d4 af 02 c0       	mov    edx,0xc002afd4
c001129c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a0:	89 10                	mov    DWORD PTR [eax],edx
c00112a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00112ae:	7f 73                	jg     c0011323 <UnixFile::~UnixFile()+0x8f>
c00112b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112b8:	83 ec 0c             	sub    esp,0xc
c00112bb:	68 98 f3 02 c0       	push   0xc002f398
c00112c0:	e8 6b 7e 01 00       	call   c0029130 <LinkedList<UnixFile>::getFirstElement()>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112cc:	83 ec 0c             	sub    esp,0xc
c00112cf:	68 98 f3 02 c0       	push   0xc002f398
c00112d4:	e8 5f 7e 01 00       	call   c0029138 <LinkedList<UnixFile>::removeFirst()>
c00112d9:	83 c4 10             	add    esp,0x10
c00112dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112e0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112e4:	74 40                	je     c0011326 <UnixFile::~UnixFile()+0x92>
c00112e6:	83 ec 08             	sub    esp,0x8
c00112e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112ed:	68 98 f3 02 c0       	push   0xc002f398
c00112f2:	e8 65 7d 01 00       	call   c002905c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112fe:	8d 50 01             	lea    edx,[eax+0x1]
c0011301:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011305:	3d 88 13 00 00       	cmp    eax,0x1388
c001130a:	0f 94 c0             	sete   al
c001130d:	84 c0                	test   al,al
c001130f:	74 a7                	je     c00112b8 <UnixFile::~UnixFile()+0x24>
c0011311:	83 ec 0c             	sub    esp,0xc
c0011314:	68 ac af 02 c0       	push   0xc002afac
c0011319:	e8 91 90 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001131e:	83 c4 10             	add    esp,0x10
c0011321:	eb 95                	jmp    c00112b8 <UnixFile::~UnixFile()+0x24>
c0011323:	90                   	nop
c0011324:	eb 01                	jmp    c0011327 <UnixFile::~UnixFile()+0x93>
c0011326:	90                   	nop
c0011327:	90                   	nop
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	c3                   	ret    

c001132c <UnixFile::~UnixFile()>:
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	83 ec 0c             	sub    esp,0xc
c0011332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011336:	e8 59 ff ff ff       	call   c0011294 <UnixFile::~UnixFile()>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	6a 0c                	push   0xc
c0011343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011347:	e8 cf 14 00 00       	call   c001281b <operator delete(void*, unsigned long)>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	83 c4 0c             	add    esp,0xc
c0011352:	c3                   	ret    
c0011353:	90                   	nop

c0011354 <ReservedFilename::~ReservedFilename()>:
c0011354:	83 ec 0c             	sub    esp,0xc
c0011357:	ba f0 af 02 c0       	mov    edx,0xc002aff0
c001135c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011360:	89 10                	mov    DWORD PTR [eax],edx
c0011362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	50                   	push   eax
c001136a:	e8 25 ff ff ff       	call   c0011294 <UnixFile::~UnixFile()>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	90                   	nop
c0011373:	83 c4 0c             	add    esp,0xc
c0011376:	c3                   	ret    
c0011377:	90                   	nop

c0011378 <ReservedFilename::~ReservedFilename()>:
c0011378:	83 ec 0c             	sub    esp,0xc
c001137b:	83 ec 0c             	sub    esp,0xc
c001137e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011382:	e8 cd ff ff ff       	call   c0011354 <ReservedFilename::~ReservedFilename()>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	6a 0c                	push   0xc
c001138f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011393:	e8 83 14 00 00       	call   c001281b <operator delete(void*, unsigned long)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	83 c4 0c             	add    esp,0xc
c001139e:	c3                   	ret    

c001139f <getFromFileDescriptor(int)>:
c001139f:	53                   	push   ebx
c00113a0:	83 ec 08             	sub    esp,0x8
c00113a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113a7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00113ad:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00113b3:	7f 2c                	jg     c00113e1 <getFromFileDescriptor(int)+0x42>
c00113b5:	83 ec 0c             	sub    esp,0xc
c00113b8:	68 98 f3 02 c0       	push   0xc002f398
c00113bd:	e8 6e 7d 01 00       	call   c0029130 <LinkedList<UnixFile>::getFirstElement()>
c00113c2:	83 c4 10             	add    esp,0x10
c00113c5:	85 c0                	test   eax,eax
c00113c7:	75 04                	jne    c00113cd <getFromFileDescriptor(int)+0x2e>
c00113c9:	31 c0                	xor    eax,eax
c00113cb:	eb 6e                	jmp    c001143b <getFromFileDescriptor(int)+0x9c>
c00113cd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113d0:	74 69                	je     c001143b <getFromFileDescriptor(int)+0x9c>
c00113d2:	52                   	push   edx
c00113d3:	52                   	push   edx
c00113d4:	50                   	push   eax
c00113d5:	68 98 f3 02 c0       	push   0xc002f398
c00113da:	e8 fb 7d 01 00       	call   c00291da <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113df:	eb e1                	jmp    c00113c2 <getFromFileDescriptor(int)+0x23>
c00113e1:	a1 8c f3 02 c0       	mov    eax,ds:0xc002f38c
c00113e6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113ec:	74 4d                	je     c001143b <getFromFileDescriptor(int)+0x9c>
c00113ee:	a1 90 f3 02 c0       	mov    eax,ds:0xc002f390
c00113f3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113f9:	74 40                	je     c001143b <getFromFileDescriptor(int)+0x9c>
c00113fb:	a1 88 f3 02 c0       	mov    eax,ds:0xc002f388
c0011400:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011406:	74 33                	je     c001143b <getFromFileDescriptor(int)+0x9c>
c0011408:	a1 84 f3 02 c0       	mov    eax,ds:0xc002f384
c001140d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011413:	74 26                	je     c001143b <getFromFileDescriptor(int)+0x9c>
c0011415:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001141b:	83 f8 08             	cmp    eax,0x8
c001141e:	77 09                	ja     c0011429 <getFromFileDescriptor(int)+0x8a>
c0011420:	8b 04 85 60 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ca0]
c0011427:	eb 12                	jmp    c001143b <getFromFileDescriptor(int)+0x9c>
c0011429:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001142f:	83 fb 08             	cmp    ebx,0x8
c0011432:	77 95                	ja     c00113c9 <getFromFileDescriptor(int)+0x2a>
c0011434:	8b 04 9d 20 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0ce0]
c001143b:	83 c4 08             	add    esp,0x8
c001143e:	5b                   	pop    ebx
c001143f:	c3                   	ret    

c0011440 <__static_initialization_and_destruction_0(int, int)>:
c0011440:	83 ec 0c             	sub    esp,0xc
c0011443:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011448:	75 34                	jne    c001147e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001144a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011452:	75 2a                	jne    c001147e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	68 98 f3 02 c0       	push   0xc002f398
c001145c:	e8 a3 7b 01 00       	call   c0029004 <LinkedList<UnixFile>::LinkedList()>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	83 ec 04             	sub    esp,0x4
c0011467:	68 18 e0 02 c0       	push   0xc002e018
c001146c:	68 98 f3 02 c0       	push   0xc002f398
c0011471:	68 02 90 02 c0       	push   0xc0029002
c0011476:	e8 1a 13 00 00       	call   c0012795 <__cxa_atexit>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	90                   	nop
c001147f:	83 c4 0c             	add    esp,0xc
c0011482:	c3                   	ret    

c0011483 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011483:	83 ec 0c             	sub    esp,0xc
c0011486:	83 ec 08             	sub    esp,0x8
c0011489:	68 ff ff 00 00       	push   0xffff
c001148e:	6a 01                	push   0x1
c0011490:	e8 ab ff ff ff       	call   c0011440 <__static_initialization_and_destruction_0(int, int)>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	83 c4 0c             	add    esp,0xc
c001149b:	c3                   	ret    

c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001149c:	53                   	push   ebx
c001149d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00114a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114a5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00114ab:	89 c8                	mov    eax,ecx
c00114ad:	d1 e8                	shr    eax,1
c00114af:	03 05 e8 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1e8
c00114b5:	83 e1 01             	and    ecx,0x1
c00114b8:	8a 10                	mov    dl,BYTE PTR [eax]
c00114ba:	75 09                	jne    c00114c5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00114bc:	83 e2 f0             	and    edx,0xfffffff0
c00114bf:	09 da                	or     edx,ebx
c00114c1:	88 10                	mov    BYTE PTR [eax],dl
c00114c3:	5b                   	pop    ebx
c00114c4:	c3                   	ret    
c00114c5:	c1 e3 04             	shl    ebx,0x4
c00114c8:	83 e2 0f             	and    edx,0xf
c00114cb:	09 da                	or     edx,ebx
c00114cd:	88 10                	mov    BYTE PTR [eax],dl
c00114cf:	5b                   	pop    ebx
c00114d0:	c3                   	ret    

c00114d1 <Virt::getPageState(unsigned long)>:
c00114d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d5:	8b 0d e8 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1e8
c00114db:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114e1:	89 d0                	mov    eax,edx
c00114e3:	d1 e8                	shr    eax,1
c00114e5:	83 e2 01             	and    edx,0x1
c00114e8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114eb:	75 04                	jne    c00114f1 <Virt::getPageState(unsigned long)+0x20>
c00114ed:	83 e0 0f             	and    eax,0xf
c00114f0:	c3                   	ret    
c00114f1:	c0 e8 04             	shr    al,0x4
c00114f4:	c3                   	ret    

c00114f5 <Virt::allocateKernelVirtualPages(int)>:
c00114f5:	55                   	push   ebp
c00114f6:	31 ed                	xor    ebp,ebp
c00114f8:	57                   	push   edi
c00114f9:	56                   	push   esi
c00114fa:	53                   	push   ebx
c00114fb:	31 db                	xor    ebx,ebx
c00114fd:	83 ec 1c             	sub    esp,0x1c
c0011500:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011504:	8b 3d e4 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1e4
c001150a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001150f:	57                   	push   edi
c0011510:	e8 bc ff ff ff       	call   c00114d1 <Virt::getPageState(unsigned long)>
c0011515:	5a                   	pop    edx
c0011516:	84 c0                	test   al,al
c0011518:	75 3a                	jne    c0011554 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001151a:	85 db                	test   ebx,ebx
c001151c:	75 02                	jne    c0011520 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001151e:	89 fd                	mov    ebp,edi
c0011520:	43                   	inc    ebx
c0011521:	39 f3                	cmp    ebx,esi
c0011523:	74 5a                	je     c001157f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011525:	47                   	inc    edi
c0011526:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001152c:	76 31                	jbe    c001155f <Virt::allocateKernelVirtualPages(int)+0x6a>
c001152e:	c7 05 e4 e1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e1e4,0xc8000
c0011538:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001153d:	75 28                	jne    c0011567 <Virt::allocateKernelVirtualPages(int)+0x72>
c001153f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011544:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011549:	57                   	push   edi
c001154a:	e8 82 ff ff ff       	call   c00114d1 <Virt::getPageState(unsigned long)>
c001154f:	5a                   	pop    edx
c0011550:	84 c0                	test   al,al
c0011552:	74 c6                	je     c001151a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011554:	31 db                	xor    ebx,ebx
c0011556:	47                   	inc    edi
c0011557:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001155d:	77 cf                	ja     c001152e <Virt::allocateKernelVirtualPages(int)+0x39>
c001155f:	89 3d e4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e4,edi
c0011565:	eb a8                	jmp    c001150f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	68 04 b0 02 c0       	push   0xc002b004
c001156f:	e8 3b 8e 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011574:	8b 3d e4 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1e4
c001157a:	83 c4 10             	add    esp,0x10
c001157d:	eb 90                	jmp    c001150f <Virt::allocateKernelVirtualPages(int)+0x1a>
c001157f:	89 2d e4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e4,ebp
c0011585:	4b                   	dec    ebx
c0011586:	74 5f                	je     c00115e7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011588:	85 f6                	test   esi,esi
c001158a:	74 3d                	je     c00115c9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001158c:	89 e8                	mov    eax,ebp
c001158e:	31 db                	xor    ebx,ebx
c0011590:	8d 7e ff             	lea    edi,[esi-0x1]
c0011593:	eb 14                	jmp    c00115a9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011595:	6a 01                	push   0x1
c0011597:	43                   	inc    ebx
c0011598:	50                   	push   eax
c0011599:	e8 fe fe ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001159e:	58                   	pop    eax
c001159f:	39 f3                	cmp    ebx,esi
c00115a1:	5a                   	pop    edx
c00115a2:	74 25                	je     c00115c9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00115a4:	a1 e4 e1 02 c0       	mov    eax,ds:0xc002e1e4
c00115a9:	8d 50 01             	lea    edx,[eax+0x1]
c00115ac:	85 db                	test   ebx,ebx
c00115ae:	89 15 e4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e4,edx
c00115b4:	74 20                	je     c00115d6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00115b6:	39 df                	cmp    edi,ebx
c00115b8:	75 db                	jne    c0011595 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00115ba:	6a 03                	push   0x3
c00115bc:	43                   	inc    ebx
c00115bd:	50                   	push   eax
c00115be:	e8 d9 fe ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115c3:	59                   	pop    ecx
c00115c4:	39 f3                	cmp    ebx,esi
c00115c6:	58                   	pop    eax
c00115c7:	75 db                	jne    c00115a4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115c9:	83 c4 1c             	add    esp,0x1c
c00115cc:	89 e8                	mov    eax,ebp
c00115ce:	5b                   	pop    ebx
c00115cf:	c1 e0 0c             	shl    eax,0xc
c00115d2:	5e                   	pop    esi
c00115d3:	5f                   	pop    edi
c00115d4:	5d                   	pop    ebp
c00115d5:	c3                   	ret    
c00115d6:	6a 02                	push   0x2
c00115d8:	bb 01 00 00 00       	mov    ebx,0x1
c00115dd:	50                   	push   eax
c00115de:	e8 b9 fe ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115e3:	58                   	pop    eax
c00115e4:	5a                   	pop    edx
c00115e5:	eb bd                	jmp    c00115a4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115e7:	6a 04                	push   0x4
c00115e9:	8d 45 01             	lea    eax,[ebp+0x1]
c00115ec:	55                   	push   ebp
c00115ed:	a3 e4 e1 02 c0       	mov    ds:0xc002e1e4,eax
c00115f2:	e8 a5 fe ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115f7:	59                   	pop    ecx
c00115f8:	89 e8                	mov    eax,ebp
c00115fa:	5b                   	pop    ebx
c00115fb:	c1 e0 0c             	shl    eax,0xc
c00115fe:	83 c4 1c             	add    esp,0x1c
c0011601:	5b                   	pop    ebx
c0011602:	5e                   	pop    esi
c0011603:	5f                   	pop    edi
c0011604:	5d                   	pop    ebp
c0011605:	c3                   	ret    

c0011606 <Virt::freeSwapfilePage(unsigned long)>:
c0011606:	53                   	push   ebx
c0011607:	8b 15 ac f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3ac
c001160d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011611:	b8 01 00 00 00       	mov    eax,0x1
c0011616:	89 cb                	mov    ebx,ecx
c0011618:	d3 e0                	shl    eax,cl
c001161a:	c1 eb 05             	shr    ebx,0x5
c001161d:	f7 d0                	not    eax
c001161f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011622:	5b                   	pop    ebx
c0011623:	c3                   	ret    

c0011624 <Virt::swapIDToSector(unsigned long)>:
c0011624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011628:	0f af 05 ec e1 02 c0 	imul   eax,DWORD PTR ds:0xc002e1ec
c001162f:	03 05 f4 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1f4
c0011635:	c3                   	ret    

c0011636 <Virt::allocateSwapfilePage()>:
c0011636:	55                   	push   ebp
c0011637:	31 d2                	xor    edx,edx
c0011639:	57                   	push   edi
c001163a:	56                   	push   esi
c001163b:	53                   	push   ebx
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	8b 0d ec e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1ec
c0011645:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c001164a:	f7 f1                	div    ecx
c001164c:	39 0d f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,ecx
c0011652:	72 2d                	jb     c0011681 <Virt::allocateSwapfilePage()+0x4b>
c0011654:	8b 35 ac f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f3ac
c001165a:	8b 16                	mov    edx,DWORD PTR [esi]
c001165c:	f6 c2 01             	test   dl,0x1
c001165f:	74 3c                	je     c001169d <Virt::allocateSwapfilePage()+0x67>
c0011661:	31 c9                	xor    ecx,ecx
c0011663:	bf 01 00 00 00       	mov    edi,0x1
c0011668:	eb 12                	jmp    c001167c <Virt::allocateSwapfilePage()+0x46>
c001166a:	89 fd                	mov    ebp,edi
c001166c:	89 ca                	mov    edx,ecx
c001166e:	d3 e5                	shl    ebp,cl
c0011670:	c1 ea 05             	shr    edx,0x5
c0011673:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011676:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011678:	85 ea                	test   edx,ebp
c001167a:	74 2a                	je     c00116a6 <Virt::allocateSwapfilePage()+0x70>
c001167c:	41                   	inc    ecx
c001167d:	39 c8                	cmp    eax,ecx
c001167f:	77 e9                	ja     c001166a <Virt::allocateSwapfilePage()+0x34>
c0011681:	83 ec 0c             	sub    esp,0xc
c0011684:	68 8b b1 02 c0       	push   0xc002b18b
c0011689:	e8 21 8d 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001168e:	83 c4 10             	add    esp,0x10
c0011691:	31 c9                	xor    ecx,ecx
c0011693:	83 c4 0c             	add    esp,0xc
c0011696:	89 c8                	mov    eax,ecx
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	5d                   	pop    ebp
c001169c:	c3                   	ret    
c001169d:	89 f3                	mov    ebx,esi
c001169f:	bd 01 00 00 00       	mov    ebp,0x1
c00116a4:	31 c9                	xor    ecx,ecx
c00116a6:	09 ea                	or     edx,ebp
c00116a8:	89 c8                	mov    eax,ecx
c00116aa:	89 13                	mov    DWORD PTR [ebx],edx
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	5b                   	pop    ebx
c00116b0:	5e                   	pop    esi
c00116b1:	5f                   	pop    edi
c00116b2:	5d                   	pop    ebp
c00116b3:	c3                   	ret    

c00116b4 <Virt::virtualMemorySetup()>:
c00116b4:	53                   	push   ebx
c00116b5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116ba:	83 ec 08             	sub    esp,0x8
c00116bd:	6a 0f                	push   0xf
c00116bf:	53                   	push   ebx
c00116c0:	43                   	inc    ebx
c00116c1:	e8 d6 fd ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c6:	59                   	pop    ecx
c00116c7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116cd:	58                   	pop    eax
c00116ce:	75 ed                	jne    c00116bd <Virt::virtualMemorySetup()+0x9>
c00116d0:	83 ec 08             	sub    esp,0x8
c00116d3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116d8:	68 00 00 00 c8       	push   0xc8000000
c00116dd:	68 a2 b1 02 c0       	push   0xc002b1a2
c00116e2:	e8 14 12 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00116e7:	58                   	pop    eax
c00116e8:	5a                   	pop    edx
c00116e9:	68 00 f0 ff ef       	push   0xeffff000
c00116ee:	68 b6 b1 02 c0       	push   0xc002b1b6
c00116f3:	e8 03 12 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	83 ec 08             	sub    esp,0x8
c00116fe:	6a 00                	push   0x0
c0011700:	53                   	push   ebx
c0011701:	43                   	inc    ebx
c0011702:	e8 95 fd ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011707:	83 c4 10             	add    esp,0x10
c001170a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011710:	75 e9                	jne    c00116fb <Virt::virtualMemorySetup()+0x47>
c0011712:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011717:	83 ec 08             	sub    esp,0x8
c001171a:	6a 0f                	push   0xf
c001171c:	53                   	push   ebx
c001171d:	43                   	inc    ebx
c001171e:	e8 79 fd ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001172c:	75 e9                	jne    c0011717 <Virt::virtualMemorySetup()+0x63>
c001172e:	83 c4 08             	add    esp,0x8
c0011731:	5b                   	pop    ebx
c0011732:	c3                   	ret    

c0011733 <Virt::setupPageSwapping(int)>:
c0011733:	57                   	push   edi
c0011734:	56                   	push   esi
c0011735:	53                   	push   ebx
c0011736:	83 ec 1c             	sub    esp,0x1c
c0011739:	68 ca b1 02 c0       	push   0xc002b1ca
c001173e:	e8 b8 11 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0011743:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001174a:	e8 b3 e1 ff ff       	call   c000f902 <malloc>
c001174f:	83 c4 0c             	add    esp,0xc
c0011752:	89 c6                	mov    esi,eax
c0011754:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001175a:	68 de b1 02 c0       	push   0xc002b1de
c001175f:	50                   	push   eax
c0011760:	e8 f5 16 00 00       	call   c0012e5a <File::File(char const*, Process*)>
c0011765:	89 34 24             	mov    DWORD PTR [esp],esi
c0011768:	e8 c9 18 00 00       	call   c0013036 <File::unlink()>
c001176d:	59                   	pop    ecx
c001176e:	5b                   	pop    ebx
c001176f:	6a 12                	push   0x12
c0011771:	56                   	push   esi
c0011772:	e8 47 17 00 00       	call   c0012ebe <File::open(FileOpenMode)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	85 c0                	test   eax,eax
c001177c:	0f 85 5b 01 00 00    	jne    c00118dd <Virt::setupPageSwapping(int)+0x1aa>
c0011782:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011786:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001178e:	c1 e3 08             	shl    ebx,0x8
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	68 00 00 01 00       	push   0x10000
c0011799:	e8 64 e1 ff ff       	call   c000f902 <malloc>
c001179e:	83 c4 0c             	add    esp,0xc
c00117a1:	89 c7                	mov    edi,eax
c00117a3:	68 00 00 01 00       	push   0x10000
c00117a8:	68 ee 00 00 00       	push   0xee
c00117ad:	50                   	push   eax
c00117ae:	e8 9d ef fe ff       	call   c0000750 <memset>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	85 db                	test   ebx,ebx
c00117b8:	79 03                	jns    c00117bd <Virt::setupPageSwapping(int)+0x8a>
c00117ba:	83 c3 0f             	add    ebx,0xf
c00117bd:	c1 fb 04             	sar    ebx,0x4
c00117c0:	4b                   	dec    ebx
c00117c1:	83 fb ff             	cmp    ebx,0xffffffff
c00117c4:	74 4f                	je     c0011815 <Virt::setupPageSwapping(int)+0xe2>
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00117cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117cf:	52                   	push   edx
c00117d0:	57                   	push   edi
c00117d1:	6a 00                	push   0x0
c00117d3:	68 00 00 01 00       	push   0x10000
c00117d8:	56                   	push   esi
c00117d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117dc:	83 c4 20             	add    esp,0x20
c00117df:	85 c0                	test   eax,eax
c00117e1:	0f 85 e0 00 00 00    	jne    c00118c7 <Virt::setupPageSwapping(int)+0x194>
c00117e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117eb:	3d 00 00 01 00       	cmp    eax,0x10000
c00117f0:	74 ce                	je     c00117c0 <Virt::setupPageSwapping(int)+0x8d>
c00117f2:	83 ec 08             	sub    esp,0x8
c00117f5:	4b                   	dec    ebx
c00117f6:	50                   	push   eax
c00117f7:	68 31 b2 02 c0       	push   0xc002b231
c00117fc:	e8 fa 10 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0011801:	c7 04 24 3a b2 02 c0 	mov    DWORD PTR [esp],0xc002b23a
c0011808:	e8 a2 8b 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	83 fb ff             	cmp    ebx,0xffffffff
c0011813:	75 b1                	jne    c00117c6 <Virt::setupPageSwapping(int)+0x93>
c0011815:	83 ec 0c             	sub    esp,0xc
c0011818:	56                   	push   esi
c0011819:	e8 fe 16 00 00       	call   c0012f1c <File::close()>
c001181e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011821:	e8 fc e0 ff ff       	call   c000f922 <rfree>
c0011826:	83 c4 10             	add    esp,0x10
c0011829:	85 f6                	test   esi,esi
c001182b:	74 0c                	je     c0011839 <Virt::setupPageSwapping(int)+0x106>
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	8b 06                	mov    eax,DWORD PTR [esi]
c0011832:	56                   	push   esi
c0011833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	83 ec 08             	sub    esp,0x8
c001183c:	a1 48 f8 02 c0       	mov    eax,ds:0xc002f848
c0011841:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011847:	8b 10                	mov    edx,DWORD PTR [eax]
c0011849:	68 de b1 02 c0       	push   0xc002b1de
c001184e:	50                   	push   eax
c001184f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011852:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011856:	c6 05 f8 e1 02 c0 43 	mov    BYTE PTR ds:0xc002e1f8,0x43
c001185d:	c1 e2 0b             	shl    edx,0xb
c0011860:	a3 f4 e1 02 c0       	mov    ds:0xc002e1f4,eax
c0011865:	89 15 f0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f0,edx
c001186b:	c7 05 ec e1 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e1ec,0x8
c0011875:	c1 ea 08             	shr    edx,0x8
c0011878:	89 14 24             	mov    DWORD PTR [esp],edx
c001187b:	e8 82 e0 ff ff       	call   c000f902 <malloc>
c0011880:	83 c4 0c             	add    esp,0xc
c0011883:	89 c1                	mov    ecx,eax
c0011885:	a3 ac f3 02 c0       	mov    ds:0xc002f3ac,eax
c001188a:	31 d2                	xor    edx,edx
c001188c:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c0011891:	f7 35 ec e1 02 c0    	div    DWORD PTR ds:0xc002e1ec
c0011897:	c1 e8 05             	shr    eax,0x5
c001189a:	50                   	push   eax
c001189b:	6a 00                	push   0x0
c001189d:	51                   	push   ecx
c001189e:	e8 ad ee fe ff       	call   c0000750 <memset>
c00118a3:	58                   	pop    eax
c00118a4:	a1 f0 e1 02 c0       	mov    eax,ds:0xc002e1f0
c00118a9:	5a                   	pop    edx
c00118aa:	31 d2                	xor    edx,edx
c00118ac:	f7 35 ec e1 02 c0    	div    DWORD PTR ds:0xc002e1ec
c00118b2:	c1 e8 05             	shr    eax,0x5
c00118b5:	50                   	push   eax
c00118b6:	68 40 b2 02 c0       	push   0xc002b240
c00118bb:	e8 3b 10 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00118c0:	83 c4 20             	add    esp,0x20
c00118c3:	5b                   	pop    ebx
c00118c4:	5e                   	pop    esi
c00118c5:	5f                   	pop    edi
c00118c6:	c3                   	ret    
c00118c7:	83 ec 08             	sub    esp,0x8
c00118ca:	50                   	push   eax
c00118cb:	68 19 b2 02 c0       	push   0xc002b219
c00118d0:	e8 26 10 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00118d5:	83 c4 10             	add    esp,0x10
c00118d8:	e9 0a ff ff ff       	jmp    c00117e7 <Virt::setupPageSwapping(int)+0xb4>
c00118dd:	83 ec 08             	sub    esp,0x8
c00118e0:	50                   	push   eax
c00118e1:	68 f5 b1 02 c0       	push   0xc002b1f5
c00118e6:	e8 10 10 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00118eb:	c7 04 24 fe b1 02 c0 	mov    DWORD PTR [esp],0xc002b1fe
c00118f2:	e8 b8 8a 00 00       	call   c001a3af <Krnl::panic(char const*)>
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	e9 83 fe ff ff       	jmp    c0011782 <Virt::setupPageSwapping(int)+0x4f>
c00118ff:	90                   	nop

c0011900 <VAS::VAS()>:
c0011900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001190b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001191a:	a3 b0 f3 02 c0       	mov    ds:0xc002f3b0,eax
c001191f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011923:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001192e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011932:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011939:	90                   	nop
c001193a:	c3                   	ret    
c001193b:	90                   	nop

c001193c <VAS::VAS(VAS*)>:
c001193c:	83 ec 0c             	sub    esp,0xc
c001193f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011943:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001194a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011955:	83 ec 0c             	sub    esp,0xc
c0011958:	68 24 b0 02 c0       	push   0xc002b024
c001195d:	e8 4d 8a 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	90                   	nop
c0011966:	83 c4 0c             	add    esp,0xc
c0011969:	c3                   	ret    

c001196a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001196a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001196e:	89 c2                	mov    edx,eax
c0011970:	c1 e8 0a             	shr    eax,0xa
c0011973:	c1 ea 16             	shr    edx,0x16
c0011976:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001197b:	19 c9                	sbb    ecx,ecx
c001197d:	c1 e2 0c             	shl    edx,0xc
c0011980:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011986:	25 fc 0f 00 00       	and    eax,0xffc
c001198b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011992:	01 d0                	add    eax,edx
c0011994:	c3                   	ret    
c0011995:	90                   	nop

c0011996 <VAS::getPageTableEntry(unsigned long)>:
c0011996:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001199a:	89 ca                	mov    edx,ecx
c001199c:	c1 e9 0a             	shr    ecx,0xa
c001199f:	c1 ea 16             	shr    edx,0x16
c00119a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119ae:	c1 e0 0c             	shl    eax,0xc
c00119b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119b4:	c3                   	ret    

c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119b5:	57                   	push   edi
c00119b6:	56                   	push   esi
c00119b7:	be 01 00 00 00       	mov    esi,0x1
c00119bc:	53                   	push   ebx
c00119bd:	83 ec 10             	sub    esp,0x10
c00119c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119c4:	c1 eb 0c             	shr    ebx,0xc
c00119c7:	eb 3f                	jmp    c0011a08 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119c9:	83 ec 08             	sub    esp,0x8
c00119cc:	57                   	push   edi
c00119cd:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c00119d3:	e8 be ff ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	8b 00                	mov    eax,DWORD PTR [eax]
c00119dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119e1:	f6 c4 04             	test   ah,0x4
c00119e4:	75 5f                	jne    c0011a45 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119e6:	80 fa 04             	cmp    dl,0x4
c00119e9:	74 78                	je     c0011a63 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119eb:	80 fa 02             	cmp    dl,0x2
c00119ee:	0f 84 88 00 00 00    	je     c0011a7c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119f4:	80 fa 03             	cmp    dl,0x3
c00119f7:	0f 84 ad 00 00 00    	je     c0011aaa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119fd:	fe ca                	dec    dl
c00119ff:	0f 84 92 00 00 00    	je     c0011a97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a05:	43                   	inc    ebx
c0011a06:	31 f6                	xor    esi,esi
c0011a08:	53                   	push   ebx
c0011a09:	89 df                	mov    edi,ebx
c0011a0b:	e8 c1 fa ff ff       	call   c00114d1 <Virt::getPageState(unsigned long)>
c0011a10:	c1 e7 0c             	shl    edi,0xc
c0011a13:	59                   	pop    ecx
c0011a14:	84 c0                	test   al,al
c0011a16:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a1a:	75 ad                	jne    c00119c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	68 5b b2 02 c0       	push   0xc002b25b
c0011a24:	e8 86 89 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011a29:	58                   	pop    eax
c0011a2a:	5a                   	pop    edx
c0011a2b:	57                   	push   edi
c0011a2c:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c0011a32:	e8 5f ff ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a3c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a40:	f6 c4 04             	test   ah,0x4
c0011a43:	74 c0                	je     c0011a05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a45:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	50                   	push   eax
c0011a52:	e8 f4 e1 ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a5e:	80 fa 04             	cmp    dl,0x4
c0011a61:	75 88                	jne    c00119eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a63:	89 f0                	mov    eax,esi
c0011a65:	84 c0                	test   al,al
c0011a67:	75 47                	jne    c0011ab0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a69:	c7 44 24 20 48 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b048
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	5b                   	pop    ebx
c0011a75:	5e                   	pop    esi
c0011a76:	5f                   	pop    edi
c0011a77:	e9 33 89 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c0011a7c:	89 f0                	mov    eax,esi
c0011a7e:	84 c0                	test   al,al
c0011a80:	75 15                	jne    c0011a97 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	68 77 b2 02 c0       	push   0xc002b277
c0011a8a:	e8 20 89 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	e9 6e ff ff ff       	jmp    c0011a05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a97:	83 ec 08             	sub    esp,0x8
c0011a9a:	6a 00                	push   0x0
c0011a9c:	53                   	push   ebx
c0011a9d:	e8 fa f9 ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	e9 5b ff ff ff       	jmp    c0011a05 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aaa:	89 f0                	mov    eax,esi
c0011aac:	84 c0                	test   al,al
c0011aae:	75 15                	jne    c0011ac5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	6a 00                	push   0x0
c0011ab5:	53                   	push   ebx
c0011ab6:	e8 e1 f9 ff ff       	call   c001149c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	5b                   	pop    ebx
c0011ac2:	5e                   	pop    esi
c0011ac3:	5f                   	pop    edi
c0011ac4:	c3                   	ret    
c0011ac5:	c7 44 24 20 93 b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b293
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	5b                   	pop    ebx
c0011ad1:	5e                   	pop    esi
c0011ad2:	5f                   	pop    edi
c0011ad3:	e9 d7 88 00 00       	jmp    c001a3af <Krnl::panic(char const*)>

c0011ad8 <VAS::freeAllocatedPages(unsigned long)>:
c0011ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011adc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ae0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ae4:	74 09                	je     c0011aef <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ae6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011aea:	e9 c6 fe ff ff       	jmp    c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aef:	c7 44 24 04 6c b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b06c
c0011af7:	e9 ff 0d 00 00       	jmp    c00128fb <Dbg::kprintf(char const*, ...)>

c0011afc <VAS::virtualToPhysical(unsigned long)>:
c0011afc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b00:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b04:	e8 8d fe ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c0011b09:	5a                   	pop    edx
c0011b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b0c:	59                   	pop    ecx
c0011b0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b12:	c3                   	ret    
c0011b13:	90                   	nop

c0011b14 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b14:	55                   	push   ebp
c0011b15:	57                   	push   edi
c0011b16:	56                   	push   esi
c0011b17:	53                   	push   ebx
c0011b18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b1c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b24:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b28:	85 db                	test   ebx,ebx
c0011b2a:	7e 22                	jle    c0011b4e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b2c:	c1 e3 0c             	shl    ebx,0xc
c0011b2f:	01 f3                	add    ebx,esi
c0011b31:	56                   	push   esi
c0011b32:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b38:	55                   	push   ebp
c0011b39:	e8 58 fe ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c0011b3e:	5a                   	pop    edx
c0011b3f:	59                   	pop    ecx
c0011b40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b42:	21 f9                	and    ecx,edi
c0011b44:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b48:	39 f3                	cmp    ebx,esi
c0011b4a:	89 08                	mov    DWORD PTR [eax],ecx
c0011b4c:	75 e3                	jne    c0011b31 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b4e:	5b                   	pop    ebx
c0011b4f:	5e                   	pop    esi
c0011b50:	5f                   	pop    edi
c0011b51:	5d                   	pop    ebp
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b54:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0011b59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b5f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b66:	75 01                	jne    c0011b69 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b68:	c3                   	ret    
c0011b69:	68 80 00 00 00       	push   0x80
c0011b6e:	6a ff                	push   0xffffffff
c0011b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b7c:	e8 93 ff ff ff       	call   c0011b14 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b81:	83 c4 14             	add    esp,0x14
c0011b84:	c3                   	ret    
c0011b85:	90                   	nop

c0011b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b86:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b8f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b96:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b99:	19 c0                	sbb    eax,eax
c0011b9b:	83 ca 03             	or     edx,0x3
c0011b9e:	83 e0 fc             	and    eax,0xfffffffc
c0011ba1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ba8:	0f 20 d8             	mov    eax,cr3
c0011bab:	0f 22 d8             	mov    cr3,eax
c0011bae:	c3                   	ret    
c0011baf:	90                   	nop

c0011bb0 <VAS::~VAS()>:
c0011bb0:	83 ec 2c             	sub    esp,0x2c
c0011bb3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bbb:	fa                   	cli    
c0011bbc:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0011bc1:	40                   	inc    eax
c0011bc2:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0011bc7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bd1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011bdb:	6a 01                	push   0x1
c0011bdd:	50                   	push   eax
c0011bde:	e8 a3 ff ff ff       	call   c0011b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0011be3:	83 c4 0c             	add    esp,0xc
c0011be6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bf6:	0f 8f d4 00 00 00    	jg     c0011cd0 <VAS::~VAS()+0x120>
c0011bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c07:	c1 e2 02             	shl    edx,0x2
c0011c0a:	01 d0                	add    eax,edx
c0011c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c16:	83 e0 01             	and    eax,0x1
c0011c19:	0f 84 a8 00 00 00    	je     c0011cc7 <VAS::~VAS()+0x117>
c0011c1f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c27:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c2f:	7f 72                	jg     c0011ca3 <VAS::~VAS()+0xf3>
c0011c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c35:	c1 e0 0a             	shl    eax,0xa
c0011c38:	89 c2                	mov    edx,eax
c0011c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c3e:	01 d0                	add    eax,edx
c0011c40:	c1 e0 0c             	shl    eax,0xc
c0011c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c47:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c51:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c5b:	6a 01                	push   0x1
c0011c5d:	50                   	push   eax
c0011c5e:	e8 07 fd ff ff       	call   c001196a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c63:	83 c4 0c             	add    esp,0xc
c0011c66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c78:	25 01 04 00 00       	and    eax,0x401
c0011c7d:	3d 01 04 00 00       	cmp    eax,0x401
c0011c82:	75 19                	jne    c0011c9d <VAS::~VAS()+0xed>
c0011c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c8d:	83 ec 0c             	sub    esp,0xc
c0011c90:	50                   	push   eax
c0011c91:	e8 b5 df ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c9d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ca1:	eb 84                	jmp    c0011c27 <VAS::~VAS()+0x77>
c0011ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca7:	25 00 04 00 00       	and    eax,0x400
c0011cac:	74 19                	je     c0011cc7 <VAS::~VAS()+0x117>
c0011cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cb7:	83 ec 0c             	sub    esp,0xc
c0011cba:	50                   	push   eax
c0011cbb:	e8 8b df ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011cc0:	83 c4 10             	add    esp,0x10
c0011cc3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cc7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ccb:	e9 1e ff ff ff       	jmp    c0011bee <VAS::~VAS()+0x3e>
c0011cd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	50                   	push   eax
c0011cdb:	e8 d5 fc ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cea:	83 ec 0c             	sub    esp,0xc
c0011ced:	50                   	push   eax
c0011cee:	e8 58 df ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cfe:	c1 e0 02             	shl    eax,0x2
c0011d01:	83 ec 08             	sub    esp,0x8
c0011d04:	50                   	push   eax
c0011d05:	68 90 b0 02 c0       	push   0xc002b090
c0011d0a:	e8 ec 0b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0011d0f:	83 c4 10             	add    esp,0x10
c0011d12:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0011d17:	48                   	dec    eax
c0011d18:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0011d1d:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0011d22:	85 c0                	test   eax,eax
c0011d24:	75 01                	jne    c0011d27 <VAS::~VAS()+0x177>
c0011d26:	fb                   	sti    
c0011d27:	90                   	nop
c0011d28:	83 c4 2c             	add    esp,0x2c
c0011d2b:	c3                   	ret    

c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d2c:	55                   	push   ebp
c0011d2d:	57                   	push   edi
c0011d2e:	56                   	push   esi
c0011d2f:	53                   	push   ebx
c0011d30:	83 ec 1c             	sub    esp,0x1c
c0011d33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d3b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d41:	77 08                	ja     c0011d4b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d43:	0f 20 d8             	mov    eax,cr3
c0011d46:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d49:	75 47                	jne    c0011d92 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d4f:	09 d8                	or     eax,ebx
c0011d51:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d56:	75 57                	jne    c0011daf <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d58:	89 de                	mov    esi,ebx
c0011d5a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d5d:	c1 ee 16             	shr    esi,0x16
c0011d60:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d67:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d6b:	74 54                	je     c0011dc1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d71:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d77:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d7b:	c1 e6 0c             	shl    esi,0xc
c0011d7e:	c1 eb 0a             	shr    ebx,0xa
c0011d81:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d87:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d8a:	83 c4 1c             	add    esp,0x1c
c0011d8d:	5b                   	pop    ebx
c0011d8e:	5e                   	pop    esi
c0011d8f:	5f                   	pop    edi
c0011d90:	5d                   	pop    ebp
c0011d91:	c3                   	ret    
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	68 b0 b0 02 c0       	push   0xc002b0b0
c0011d9a:	e8 5c 0b 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011da6:	09 d8                	or     eax,ebx
c0011da8:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dad:	74 a9                	je     c0011d58 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011daf:	83 ec 0c             	sub    esp,0xc
c0011db2:	68 18 b1 02 c0       	push   0xc002b118
c0011db7:	e8 f3 85 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011dbc:	83 c4 10             	add    esp,0x10
c0011dbf:	eb 97                	jmp    c0011d58 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dc5:	e8 dc de ff ff       	call   c000fca6 <Phys::allocatePage()>
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	89 c5                	mov    ebp,eax
c0011dcf:	8b 0d b0 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3b0
c0011dd5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dd9:	6a 01                	push   0x1
c0011ddb:	e8 15 f7 ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0011de0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011de7:	6a 01                	push   0x1
c0011de9:	50                   	push   eax
c0011dea:	55                   	push   ebp
c0011deb:	81 cd 07 04 00 00    	or     ebp,0x407
c0011df1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011df5:	51                   	push   ecx
c0011df6:	e8 27 02 00 00       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dfb:	83 c4 1c             	add    esp,0x1c
c0011dfe:	68 00 10 00 00       	push   0x1000
c0011e03:	6a 00                	push   0x0
c0011e05:	50                   	push   eax
c0011e06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e0a:	e8 41 e9 fe ff       	call   c0000750 <memset>
c0011e0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e16:	e8 9a fb ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e1f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e22:	83 c4 10             	add    esp,0x10
c0011e25:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e28:	e9 40 ff ff ff       	jmp    c0011d6d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e2d:	90                   	nop

c0011e2e <VAS::allocatePages(int, int)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e39:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0011e3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e44:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e4a:	83 e0 01             	and    eax,0x1
c0011e4d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e51:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e55:	0f 85 cc 00 00 00    	jne    c0011f27 <VAS::allocatePages(int, int)+0xf9>
c0011e5b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e62:	85 c0                	test   eax,eax
c0011e64:	0f 84 a1 00 00 00    	je     c0011f0b <VAS::allocatePages(int, int)+0xdd>
c0011e6a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e72:	c1 e6 0c             	shl    esi,0xc
c0011e75:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e79:	85 c0                	test   eax,eax
c0011e7b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e7e:	7e 33                	jle    c0011eb3 <VAS::allocatePages(int, int)+0x85>
c0011e80:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e88:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e8e:	e8 13 de ff ff       	call   c000fca6 <Phys::allocatePage()>
c0011e93:	55                   	push   ebp
c0011e94:	53                   	push   ebx
c0011e95:	50                   	push   eax
c0011e96:	57                   	push   edi
c0011e97:	e8 90 fe ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e9c:	83 c4 10             	add    esp,0x10
c0011e9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ea4:	74 03                	je     c0011ea9 <VAS::allocatePages(int, int)+0x7b>
c0011ea6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ea9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eaf:	39 de                	cmp    esi,ebx
c0011eb1:	75 db                	jne    c0011e8e <VAS::allocatePages(int, int)+0x60>
c0011eb3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eb8:	75 12                	jne    c0011ecc <VAS::allocatePages(int, int)+0x9e>
c0011eba:	0f 20 d8             	mov    eax,cr3
c0011ebd:	0f 22 d8             	mov    cr3,eax
c0011ec0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec4:	83 c4 1c             	add    esp,0x1c
c0011ec7:	5b                   	pop    ebx
c0011ec8:	5e                   	pop    esi
c0011ec9:	5f                   	pop    edi
c0011eca:	5d                   	pop    ebp
c0011ecb:	c3                   	ret    
c0011ecc:	c1 ee 0a             	shr    esi,0xa
c0011ecf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ed3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ed9:	c1 eb 0a             	shr    ebx,0xa
c0011edc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ee2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ee8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011eee:	39 c3                	cmp    ebx,eax
c0011ef0:	77 ce                	ja     c0011ec0 <VAS::allocatePages(int, int)+0x92>
c0011ef2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ef5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011efb:	39 d8                	cmp    eax,ebx
c0011efd:	73 f3                	jae    c0011ef2 <VAS::allocatePages(int, int)+0xc4>
c0011eff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f03:	83 c4 1c             	add    esp,0x1c
c0011f06:	5b                   	pop    ebx
c0011f07:	5e                   	pop    esi
c0011f08:	5f                   	pop    edi
c0011f09:	5d                   	pop    ebp
c0011f0a:	c3                   	ret    
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	68 3c b1 02 c0       	push   0xc002b13c
c0011f13:	e8 97 84 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0011f18:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	e9 43 ff ff ff       	jmp    c0011e6a <VAS::allocatePages(int, int)+0x3c>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f2e:	e8 c2 f5 ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0011f33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f3f:	0f 87 9b 00 00 00    	ja     c0011fe0 <VAS::allocatePages(int, int)+0x1b2>
c0011f45:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f49:	85 d2                	test   edx,edx
c0011f4b:	7e 3c                	jle    c0011f89 <VAS::allocatePages(int, int)+0x15b>
c0011f4d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f51:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f59:	c1 e5 0c             	shl    ebp,0xc
c0011f5c:	81 ce 00 04 00 00    	or     esi,0x400
c0011f62:	01 dd                	add    ebp,ebx
c0011f64:	e8 3d dd ff ff       	call   c000fca6 <Phys::allocatePage()>
c0011f69:	56                   	push   esi
c0011f6a:	53                   	push   ebx
c0011f6b:	50                   	push   eax
c0011f6c:	57                   	push   edi
c0011f6d:	e8 ba fd ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f7a:	74 03                	je     c0011f7f <VAS::allocatePages(int, int)+0x151>
c0011f7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f85:	39 dd                	cmp    ebp,ebx
c0011f87:	75 db                	jne    c0011f64 <VAS::allocatePages(int, int)+0x136>
c0011f89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f8e:	0f 84 26 ff ff ff    	je     c0011eba <VAS::allocatePages(int, int)+0x8c>
c0011f94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f9c:	89 d3                	mov    ebx,edx
c0011f9e:	c1 e0 0c             	shl    eax,0xc
c0011fa1:	c1 eb 0a             	shr    ebx,0xa
c0011fa4:	01 d0                	add    eax,edx
c0011fa6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fac:	c1 e8 0a             	shr    eax,0xa
c0011faf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fb5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fba:	2d 00 00 40 00       	sub    eax,0x400000
c0011fbf:	39 c3                	cmp    ebx,eax
c0011fc1:	0f 87 f9 fe ff ff    	ja     c0011ec0 <VAS::allocatePages(int, int)+0x92>
c0011fc7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fca:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fd0:	39 d8                	cmp    eax,ebx
c0011fd2:	73 f3                	jae    c0011fc7 <VAS::allocatePages(int, int)+0x199>
c0011fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fd8:	83 c4 1c             	add    esp,0x1c
c0011fdb:	5b                   	pop    ebx
c0011fdc:	5e                   	pop    esi
c0011fdd:	5f                   	pop    edi
c0011fde:	5d                   	pop    ebp
c0011fdf:	c3                   	ret    
c0011fe0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0011fe5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011feb:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ff2:	0f 84 4d ff ff ff    	je     c0011f45 <VAS::allocatePages(int, int)+0x117>
c0011ff8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012000:	e9 40 ff ff ff       	jmp    c0011f45 <VAS::allocatePages(int, int)+0x117>
c0012005:	90                   	nop

c0012006 <VAS::setCPUSpecific(unsigned long)>:
c0012006:	83 ec 0c             	sub    esp,0xc
c0012009:	6a 05                	push   0x5
c001200b:	68 00 00 40 c2       	push   0xc2400000
c0012010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012018:	e8 0f fd ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001201d:	83 c4 1c             	add    esp,0x1c
c0012020:	c3                   	ret    
c0012021:	90                   	nop

c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012022:	55                   	push   ebp
c0012023:	57                   	push   edi
c0012024:	56                   	push   esi
c0012025:	53                   	push   ebx
c0012026:	83 ec 1c             	sub    esp,0x1c
c0012029:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001202e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012032:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012038:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001203c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012042:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012046:	83 e0 01             	and    eax,0x1
c0012049:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001204d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012051:	85 c0                	test   eax,eax
c0012053:	7e 39                	jle    c001208e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012055:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012059:	89 f3                	mov    ebx,esi
c001205b:	c1 e0 0c             	shl    eax,0xc
c001205e:	01 f0                	add    eax,esi
c0012060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012064:	55                   	push   ebp
c0012065:	53                   	push   ebx
c0012066:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001206a:	29 f0                	sub    eax,esi
c001206c:	01 d8                	add    eax,ebx
c001206e:	50                   	push   eax
c001206f:	57                   	push   edi
c0012070:	e8 b7 fc ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001207d:	74 03                	je     c0012082 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001207f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012082:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012088:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001208c:	75 d6                	jne    c0012064 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001208e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012093:	75 10                	jne    c00120a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012095:	0f 20 d8             	mov    eax,cr3
c0012098:	0f 22 d8             	mov    cr3,eax
c001209b:	83 c4 1c             	add    esp,0x1c
c001209e:	89 f0                	mov    eax,esi
c00120a0:	5b                   	pop    ebx
c00120a1:	5e                   	pop    esi
c00120a2:	5f                   	pop    edi
c00120a3:	5d                   	pop    ebp
c00120a4:	c3                   	ret    
c00120a5:	89 f3                	mov    ebx,esi
c00120a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120ab:	c1 eb 0a             	shr    ebx,0xa
c00120ae:	c1 e0 0c             	shl    eax,0xc
c00120b1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120b7:	01 f0                	add    eax,esi
c00120b9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120bf:	c1 e8 0a             	shr    eax,0xa
c00120c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c7:	2d 00 00 40 00       	sub    eax,0x400000
c00120cc:	39 c3                	cmp    ebx,eax
c00120ce:	77 cb                	ja     c001209b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120d9:	39 d8                	cmp    eax,ebx
c00120db:	73 f3                	jae    c00120d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120dd:	83 c4 1c             	add    esp,0x1c
c00120e0:	89 f0                	mov    eax,esi
c00120e2:	5b                   	pop    ebx
c00120e3:	5e                   	pop    esi
c00120e4:	5f                   	pop    edi
c00120e5:	5d                   	pop    ebp
c00120e6:	c3                   	ret    
c00120e7:	90                   	nop

c00120e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120e8:	55                   	push   ebp
c00120e9:	57                   	push   edi
c00120ea:	56                   	push   esi
c00120eb:	53                   	push   ebx
c00120ec:	83 ec 1c             	sub    esp,0x1c
c00120ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120f3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120f7:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120ff:	a9 ff 0f 00 00       	test   eax,0xfff
c0012104:	75 4a                	jne    c0012150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012106:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001210a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001210d:	c1 eb 16             	shr    ebx,0x16
c0012110:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012117:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001211b:	74 4d                	je     c001216a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001211d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012121:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012125:	c1 e8 0a             	shr    eax,0xa
c0012128:	80 fa 01             	cmp    dl,0x1
c001212b:	19 d2                	sbb    edx,edx
c001212d:	c1 e3 0c             	shl    ebx,0xc
c0012130:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012134:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001213a:	25 fc 0f 00 00       	and    eax,0xffc
c001213f:	01 d8                	add    eax,ebx
c0012141:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012148:	83 c4 1c             	add    esp,0x1c
c001214b:	5b                   	pop    ebx
c001214c:	5e                   	pop    esi
c001214d:	5f                   	pop    edi
c001214e:	5d                   	pop    ebp
c001214f:	c3                   	ret    
c0012150:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012154:	83 ec 0c             	sub    esp,0xc
c0012157:	68 68 b1 02 c0       	push   0xc002b168
c001215c:	e8 4e 82 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012168:	eb 9c                	jmp    c0012106 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001216a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001216e:	e8 33 db ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012173:	83 ec 0c             	sub    esp,0xc
c0012176:	89 c5                	mov    ebp,eax
c0012178:	8b 0d b0 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3b0
c001217e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012182:	6a 01                	push   0x1
c0012184:	e8 6c f3 ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0012189:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012190:	6a 01                	push   0x1
c0012192:	50                   	push   eax
c0012193:	55                   	push   ebp
c0012194:	81 cd 07 04 00 00    	or     ebp,0x407
c001219a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001219e:	51                   	push   ecx
c001219f:	e8 7e fe ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121a4:	83 c4 1c             	add    esp,0x1c
c00121a7:	68 00 10 00 00       	push   0x1000
c00121ac:	6a 00                	push   0x0
c00121ae:	50                   	push   eax
c00121af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121b3:	e8 98 e5 fe ff       	call   c0000750 <memset>
c00121b8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121bc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121bf:	e8 f1 f7 ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00121c4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00121c7:	83 c4 10             	add    esp,0x10
c00121ca:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121d1:	e9 47 ff ff ff       	jmp    c001211d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121d6 <VAS::VAS(bool)>:
c00121d6:	53                   	push   ebx
c00121d7:	83 ec 28             	sub    esp,0x28
c00121da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121fc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012200:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012203:	e8 9e da ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012208:	89 c2                	mov    edx,eax
c001220a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012211:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c0012217:	83 ec 0c             	sub    esp,0xc
c001221a:	6a 01                	push   0x1
c001221c:	e8 d4 f2 ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	89 c2                	mov    edx,eax
c0012226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001222d:	83 ec 0c             	sub    esp,0xc
c0012230:	6a 03                	push   0x3
c0012232:	6a 01                	push   0x1
c0012234:	52                   	push   edx
c0012235:	50                   	push   eax
c0012236:	53                   	push   ebx
c0012237:	e8 e6 fd ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001223c:	83 c4 20             	add    esp,0x20
c001223f:	89 c2                	mov    edx,eax
c0012241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012245:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012248:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012250:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012258:	7f 1c                	jg     c0012276 <VAS::VAS(bool)+0xa0>
c001225a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012261:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012265:	c1 e2 02             	shl    edx,0x2
c0012268:	01 d0                	add    eax,edx
c001226a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012270:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012274:	eb da                	jmp    c0012250 <VAS::VAS(bool)+0x7a>
c0012276:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001227e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012286:	7f 7a                	jg     c0012302 <VAS::VAS(bool)+0x12c>
c0012288:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228c:	2d 00 02 00 00       	sub    eax,0x200
c0012291:	c1 e0 0c             	shl    eax,0xc
c0012294:	83 c8 03             	or     eax,0x3
c0012297:	89 c2                	mov    edx,eax
c0012299:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001229e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122aa:	83 e0 10             	and    eax,0x10
c00122ad:	84 c0                	test   al,al
c00122af:	74 07                	je     c00122b8 <VAS::VAS(bool)+0xe2>
c00122b1:	b8 00 01 00 00       	mov    eax,0x100
c00122b6:	eb 05                	jmp    c00122bd <VAS::VAS(bool)+0xe7>
c00122b8:	b8 00 00 00 00       	mov    eax,0x0
c00122bd:	09 d0                	or     eax,edx
c00122bf:	89 c1                	mov    ecx,eax
c00122c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122cc:	c1 e2 02             	shl    edx,0x2
c00122cf:	01 d0                	add    eax,edx
c00122d1:	89 ca                	mov    edx,ecx
c00122d3:	89 10                	mov    DWORD PTR [eax],edx
c00122d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122d9:	2d 40 03 00 00       	sub    eax,0x340
c00122de:	83 f8 7f             	cmp    eax,0x7f
c00122e1:	77 16                	ja     c00122f9 <VAS::VAS(bool)+0x123>
c00122e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122ee:	c1 e2 02             	shl    edx,0x2
c00122f1:	01 d0                	add    eax,edx
c00122f3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122fd:	e9 7c ff ff ff       	jmp    c001227e <VAS::VAS(bool)+0xa8>
c0012302:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0012307:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001230d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012313:	83 e0 10             	and    eax,0x10
c0012316:	84 c0                	test   al,al
c0012318:	74 07                	je     c0012321 <VAS::VAS(bool)+0x14b>
c001231a:	b8 03 41 00 00       	mov    eax,0x4103
c001231f:	eb 05                	jmp    c0012326 <VAS::VAS(bool)+0x150>
c0012321:	b8 03 40 00 00       	mov    eax,0x4003
c0012326:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001232a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001232d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012333:	89 02                	mov    DWORD PTR [edx],eax
c0012335:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001233a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012340:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001234e:	e8 b3 fc ff ff       	call   c0012006 <VAS::setCPUSpecific(unsigned long)>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001235d:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0012362:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012368:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001236e:	83 e0 10             	and    eax,0x10
c0012371:	84 c0                	test   al,al
c0012373:	74 07                	je     c001237c <VAS::VAS(bool)+0x1a6>
c0012375:	b8 00 01 00 00       	mov    eax,0x100
c001237a:	eb 05                	jmp    c0012381 <VAS::VAS(bool)+0x1ab>
c001237c:	b8 00 00 00 00       	mov    eax,0x0
c0012381:	09 c2                	or     edx,eax
c0012383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012387:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001238a:	05 fc 0f 00 00       	add    eax,0xffc
c001238f:	83 ca 03             	or     edx,0x3
c0012392:	89 10                	mov    DWORD PTR [eax],edx
c0012394:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0012399:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001239f:	83 ec 0c             	sub    esp,0xc
c00123a2:	50                   	push   eax
c00123a3:	e8 8c 1c 00 00       	call   c0014034 <Device::getName()>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	83 ec 08             	sub    esp,0x8
c00123ae:	68 ad b2 02 c0       	push   0xc002b2ad
c00123b3:	50                   	push   eax
c00123b4:	e8 df e4 fe ff       	call   c0000898 <strcmp>
c00123b9:	83 c4 10             	add    esp,0x10
c00123bc:	85 c0                	test   eax,eax
c00123be:	0f 94 c0             	sete   al
c00123c1:	84 c0                	test   al,al
c00123c3:	0f 84 87 00 00 00    	je     c0012450 <VAS::VAS(bool)+0x27a>
c00123c9:	fa                   	cli    
c00123ca:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00123cf:	40                   	inc    eax
c00123d0:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00123d5:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00123da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123e0:	05 7c 09 00 00       	add    eax,0x97c
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	50                   	push   eax
c00123e9:	e8 96 cf ff ff       	call   c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f6:	89 c3                	mov    ebx,eax
c00123f8:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00123fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012403:	05 7c 09 00 00       	add    eax,0x97c
c0012408:	83 ec 0c             	sub    esp,0xc
c001240b:	50                   	push   eax
c001240c:	e8 73 cf ff ff       	call   c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	83 ec 08             	sub    esp,0x8
c0012417:	50                   	push   eax
c0012418:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001241c:	e8 75 f5 ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	8b 00                	mov    eax,DWORD PTR [eax]
c0012426:	25 00 f0 ff ff       	and    eax,0xfffff000
c001242b:	6a 11                	push   0x11
c001242d:	53                   	push   ebx
c001242e:	50                   	push   eax
c001242f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012433:	e8 f4 f8 ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0012440:	48                   	dec    eax
c0012441:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0012446:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001244b:	85 c0                	test   eax,eax
c001244d:	75 01                	jne    c0012450 <VAS::VAS(bool)+0x27a>
c001244f:	fb                   	sti    
c0012450:	90                   	nop
c0012451:	83 c4 28             	add    esp,0x28
c0012454:	5b                   	pop    ebx
c0012455:	c3                   	ret    

c0012456 <VAS::evict(unsigned long)>:
c0012456:	55                   	push   ebp
c0012457:	57                   	push   edi
c0012458:	56                   	push   esi
c0012459:	53                   	push   ebx
c001245a:	83 ec 1c             	sub    esp,0x1c
c001245d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012461:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012469:	e8 c8 f1 ff ff       	call   c0011636 <Virt::allocateSwapfilePage()>
c001246e:	89 c7                	mov    edi,eax
c0012470:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0012475:	85 c0                	test   eax,eax
c0012477:	7e 3d                	jle    c00124b6 <VAS::evict(unsigned long)+0x60>
c0012479:	89 ee                	mov    esi,ebp
c001247b:	31 db                	xor    ebx,ebx
c001247d:	83 ec 0c             	sub    esp,0xc
c0012480:	57                   	push   edi
c0012481:	e8 9e f1 ff ff       	call   c0011624 <Virt::swapIDToSector(unsigned long)>
c0012486:	89 34 24             	mov    DWORD PTR [esp],esi
c0012489:	01 d8                	add    eax,ebx
c001248b:	6a 01                	push   0x1
c001248d:	31 d2                	xor    edx,edx
c001248f:	43                   	inc    ebx
c0012490:	52                   	push   edx
c0012491:	81 c6 00 02 00 00    	add    esi,0x200
c0012497:	50                   	push   eax
c0012498:	0f be 05 f8 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e1f8
c001249f:	ff 34 85 3c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08c4]
c00124a6:	e8 39 3e 00 00       	call   c00162e4 <LogicalDisk::write(unsigned long long, int, void*)>
c00124ab:	83 c4 20             	add    esp,0x20
c00124ae:	39 1d ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,ebx
c00124b4:	7f c7                	jg     c001247d <VAS::evict(unsigned long)+0x27>
c00124b6:	83 ec 08             	sub    esp,0x8
c00124b9:	c1 e7 0b             	shl    edi,0xb
c00124bc:	55                   	push   ebp
c00124bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124c1:	e8 d0 f4 ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c00124c6:	83 c4 0c             	add    esp,0xc
c00124c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00124cb:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124d1:	09 d7                	or     edi,edx
c00124d3:	89 38                	mov    DWORD PTR [eax],edi
c00124d5:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c00124da:	40                   	inc    eax
c00124db:	a3 a8 f3 02 c0       	mov    ds:0xc002f3a8,eax
c00124e0:	0f 20 da             	mov    edx,cr3
c00124e3:	0f 22 da             	mov    cr3,edx
c00124e6:	50                   	push   eax
c00124e7:	55                   	push   ebp
c00124e8:	68 bb b2 02 c0       	push   0xc002b2bb
c00124ed:	e8 09 04 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00124f2:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00124f7:	c7 44 24 40 d0 b2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b2d0
c00124ff:	8d 50 01             	lea    edx,[eax+0x1]
c0012502:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012506:	89 15 a4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a4,edx
c001250c:	83 c4 2c             	add    esp,0x2c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	e9 e3 03 00 00       	jmp    c00128fb <Dbg::kprintf(char const*, ...)>

c0012518 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012518:	55                   	push   ebp
c0012519:	57                   	push   edi
c001251a:	56                   	push   esi
c001251b:	53                   	push   ebx
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012523:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012529:	0f 84 dc 00 00 00    	je     c001260b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001252f:	56                   	push   esi
c0012530:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012534:	e8 5d f4 ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c0012539:	5b                   	pop    ebx
c001253a:	85 c0                	test   eax,eax
c001253c:	5f                   	pop    edi
c001253d:	89 c3                	mov    ebx,eax
c001253f:	0f 84 c6 00 00 00    	je     c001260b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012545:	8b 38                	mov    edi,DWORD PTR [eax]
c0012547:	31 c0                	xor    eax,eax
c0012549:	89 fa                	mov    edx,edi
c001254b:	81 e2 01 04 00 00    	and    edx,0x401
c0012551:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012557:	0f 85 b0 00 00 00    	jne    c001260d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001255d:	e8 44 d7 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012562:	c1 ef 0b             	shr    edi,0xb
c0012565:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012567:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001256d:	09 c2                	or     edx,eax
c001256f:	81 ca 01 08 00 00    	or     edx,0x801
c0012575:	89 13                	mov    DWORD PTR [ebx],edx
c0012577:	8b 0d ec e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1ec
c001257d:	85 c9                	test   ecx,ecx
c001257f:	7e 3d                	jle    c00125be <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012581:	89 f5                	mov    ebp,esi
c0012583:	31 db                	xor    ebx,ebx
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	57                   	push   edi
c0012589:	e8 96 f0 ff ff       	call   c0011624 <Virt::swapIDToSector(unsigned long)>
c001258e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012591:	01 d8                	add    eax,ebx
c0012593:	6a 01                	push   0x1
c0012595:	31 d2                	xor    edx,edx
c0012597:	43                   	inc    ebx
c0012598:	52                   	push   edx
c0012599:	81 c5 00 02 00 00    	add    ebp,0x200
c001259f:	50                   	push   eax
c00125a0:	0f be 05 f8 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e1f8
c00125a7:	ff 34 85 3c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08c4]
c00125ae:	e8 c5 3c 00 00       	call   c0016278 <LogicalDisk::read(unsigned long long, int, void*)>
c00125b3:	83 c4 20             	add    esp,0x20
c00125b6:	39 1d ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,ebx
c00125bc:	7f c7                	jg     c0012585 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00125be:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c00125c3:	48                   	dec    eax
c00125c4:	52                   	push   edx
c00125c5:	a3 a8 f3 02 c0       	mov    ds:0xc002f3a8,eax
c00125ca:	50                   	push   eax
c00125cb:	56                   	push   esi
c00125cc:	68 e1 b2 02 c0       	push   0xc002b2e1
c00125d1:	e8 25 03 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00125d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125d9:	e8 28 f0 ff ff       	call   c0011606 <Virt::freeSwapfilePage(unsigned long)>
c00125de:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00125e3:	83 c4 10             	add    esp,0x10
c00125e6:	48                   	dec    eax
c00125e7:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00125ec:	85 c0                	test   eax,eax
c00125ee:	75 01                	jne    c00125f1 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125f0:	fb                   	sti    
c00125f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125f5:	25 ff 0f 00 00       	and    eax,0xfff
c00125fa:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125ff:	77 14                	ja     c0012615 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012601:	0f 20 d8             	mov    eax,cr3
c0012604:	0f 22 d8             	mov    cr3,eax
c0012607:	b0 01                	mov    al,0x1
c0012609:	eb 02                	jmp    c001260d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001260b:	31 c0                	xor    eax,eax
c001260d:	83 c4 0c             	add    esp,0xc
c0012610:	5b                   	pop    ebx
c0012611:	5e                   	pop    esi
c0012612:	5f                   	pop    edi
c0012613:	5d                   	pop    ebp
c0012614:	c3                   	ret    
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	68 f6 b2 02 c0       	push   0xc002b2f6
c001261d:	e8 d9 02 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	eb da                	jmp    c0012601 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012627:	90                   	nop

c0012628 <VAS::scanForEviction()>:
c0012628:	57                   	push   edi
c0012629:	56                   	push   esi
c001262a:	53                   	push   ebx
c001262b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001262f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012632:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012638:	75 0e                	jne    c0012648 <VAS::scanForEviction()+0x20>
c001263a:	89 da                	mov    edx,ebx
c001263c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001263f:	c1 ea 16             	shr    edx,0x16
c0012642:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012646:	74 48                	je     c0012690 <VAS::scanForEviction()+0x68>
c0012648:	53                   	push   ebx
c0012649:	56                   	push   esi
c001264a:	e8 47 f3 ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c001264f:	5a                   	pop    edx
c0012650:	8b 38                	mov    edi,DWORD PTR [eax]
c0012652:	59                   	pop    ecx
c0012653:	89 fa                	mov    edx,edi
c0012655:	81 e2 00 0c 00 00    	and    edx,0xc00
c001265b:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012661:	74 3d                	je     c00126a0 <VAS::scanForEviction()+0x78>
c0012663:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012669:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001266f:	76 2a                	jbe    c001269b <VAS::scanForEviction()+0x73>
c0012671:	31 db                	xor    ebx,ebx
c0012673:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001267a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012680:	75 c6                	jne    c0012648 <VAS::scanForEviction()+0x20>
c0012682:	89 da                	mov    edx,ebx
c0012684:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012687:	c1 ea 16             	shr    edx,0x16
c001268a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001268e:	75 b8                	jne    c0012648 <VAS::scanForEviction()+0x20>
c0012690:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012696:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012699:	eb 97                	jmp    c0012632 <VAS::scanForEviction()+0xa>
c001269b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001269e:	eb 92                	jmp    c0012632 <VAS::scanForEviction()+0xa>
c00126a0:	f7 c7 01 00 00 00    	test   edi,0x1
c00126a6:	74 bb                	je     c0012663 <VAS::scanForEviction()+0x3b>
c00126a8:	f7 c7 20 00 00 00    	test   edi,0x20
c00126ae:	74 0a                	je     c00126ba <VAS::scanForEviction()+0x92>
c00126b0:	83 e7 df             	and    edi,0xffffffdf
c00126b3:	89 38                	mov    DWORD PTR [eax],edi
c00126b5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126b8:	eb a9                	jmp    c0012663 <VAS::scanForEviction()+0x3b>
c00126ba:	83 ec 08             	sub    esp,0x8
c00126bd:	53                   	push   ebx
c00126be:	56                   	push   esi
c00126bf:	e8 92 fd ff ff       	call   c0012456 <VAS::evict(unsigned long)>
c00126c4:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00126cb:	83 c4 10             	add    esp,0x10
c00126ce:	89 f8                	mov    eax,edi
c00126d0:	5b                   	pop    ebx
c00126d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126d6:	5e                   	pop    esi
c00126d7:	5f                   	pop    edi
c00126d8:	c3                   	ret    

c00126d9 <mapVASFirstTime>:
c00126d9:	55                   	push   ebp
c00126da:	57                   	push   edi
c00126db:	56                   	push   esi
c00126dc:	53                   	push   ebx
c00126dd:	83 ec 0c             	sub    esp,0xc
c00126e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126e5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126e8:	4a                   	dec    edx
c00126e9:	0f 84 8e 00 00 00    	je     c001277d <mapVASFirstTime+0xa4>
c00126ef:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126f2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126f5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126fa:	c1 e5 15             	shl    ebp,0x15
c00126fd:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012702:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012708:	29 eb                	sub    ebx,ebp
c001270a:	29 ee                	sub    esi,ebp
c001270c:	e8 95 d5 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012711:	83 ec 0c             	sub    esp,0xc
c0012714:	68 03 04 00 00       	push   0x403
c0012719:	6a 01                	push   0x1
c001271b:	53                   	push   ebx
c001271c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012722:	50                   	push   eax
c0012723:	57                   	push   edi
c0012724:	e8 f9 f8 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012729:	83 c4 20             	add    esp,0x20
c001272c:	39 f3                	cmp    ebx,esi
c001272e:	75 dc                	jne    c001270c <mapVASFirstTime+0x33>
c0012730:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012735:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001273a:	29 ee                	sub    esi,ebp
c001273c:	29 e8                	sub    eax,ebp
c001273e:	89 c5                	mov    ebp,eax
c0012740:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012744:	19 db                	sbb    ebx,ebx
c0012746:	e8 5b d5 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001274b:	83 e3 04             	and    ebx,0x4
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	81 c3 03 04 00 00    	add    ebx,0x403
c0012757:	53                   	push   ebx
c0012758:	6a 01                	push   0x1
c001275a:	56                   	push   esi
c001275b:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012761:	50                   	push   eax
c0012762:	57                   	push   edi
c0012763:	e8 ba f8 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012768:	83 c4 20             	add    esp,0x20
c001276b:	39 f5                	cmp    ebp,esi
c001276d:	75 d1                	jne    c0012740 <mapVASFirstTime+0x67>
c001276f:	0f 20 d8             	mov    eax,cr3
c0012772:	0f 22 d8             	mov    cr3,eax
c0012775:	83 c4 0c             	add    esp,0xc
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	5d                   	pop    ebp
c001277c:	c3                   	ret    
c001277d:	83 ec 0c             	sub    esp,0xc
c0012780:	68 06 b3 02 c0       	push   0xc002b306
c0012785:	e8 71 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	83 c4 0c             	add    esp,0xc
c0012790:	5b                   	pop    ebx
c0012791:	5e                   	pop    esi
c0012792:	5f                   	pop    edi
c0012793:	5d                   	pop    ebp
c0012794:	c3                   	ret    

c0012795 <__cxa_atexit>:
c0012795:	31 c0                	xor    eax,eax
c0012797:	c3                   	ret    

c0012798 <__cxa_finalize>:
c0012798:	c3                   	ret    

c0012799 <__stack_chk_fail>:
c0012799:	55                   	push   ebp
c001279a:	89 e5                	mov    ebp,esp
c001279c:	83 ec 14             	sub    esp,0x14
c001279f:	68 1f b3 02 c0       	push   0xc002b31f
c00127a4:	e8 52 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00127a9:	58                   	pop    eax
c00127aa:	5a                   	pop    edx
c00127ab:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127ae:	68 6f b3 02 c0       	push   0xc002b36f
c00127b3:	e8 43 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00127b8:	59                   	pop    ecx
c00127b9:	58                   	pop    eax
c00127ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c0:	68 6f b3 02 c0       	push   0xc002b36f
c00127c5:	e8 31 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00127ca:	5a                   	pop    edx
c00127cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ce:	59                   	pop    ecx
c00127cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127d4:	68 6f b3 02 c0       	push   0xc002b36f
c00127d9:	e8 1d 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00127de:	5a                   	pop    edx
c00127df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127e2:	59                   	pop    ecx
c00127e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ea:	68 6f b3 02 c0       	push   0xc002b36f
c00127ef:	e8 07 01 00 00       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00127f4:	c7 04 24 77 b3 02 c0 	mov    DWORD PTR [esp],0xc002b377
c00127fb:	e8 af 7b 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0012800:	83 c4 10             	add    esp,0x10
c0012803:	c9                   	leave  
c0012804:	c3                   	ret    

c0012805 <__cxa_pure_virtual>:
c0012805:	83 ec 18             	sub    esp,0x18
c0012808:	68 8f b3 02 c0       	push   0xc002b38f
c001280d:	e8 9d 7b 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0012812:	83 c4 1c             	add    esp,0x1c
c0012815:	c3                   	ret    

c0012816 <operator new[](unsigned long)>:
c0012816:	e9 e7 d0 ff ff       	jmp    c000f902 <malloc>

c001281b <operator delete(void*, unsigned long)>:
c001281b:	e9 02 d1 ff ff       	jmp    c000f922 <rfree>

c0012820 <operator delete[](void*)>:
c0012820:	e9 fd d0 ff ff       	jmp    c000f922 <rfree>

c0012825 <operator delete[](void*, unsigned long)>:
c0012825:	e9 f8 d0 ff ff       	jmp    c000f922 <rfree>

c001282a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001282a:	57                   	push   edi
c001282b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012830:	56                   	push   esi
c0012831:	be a4 b3 02 c0       	mov    esi,0xc002b3a4
c0012836:	53                   	push   ebx
c0012837:	83 ec 40             	sub    esp,0x40
c001283a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001283e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012842:	fc                   	cld    
c0012843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012845:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012849:	83 f9 3e             	cmp    ecx,0x3e
c001284c:	7e 05                	jle    c0012853 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001284e:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012853:	89 df                	mov    edi,ebx
c0012855:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012859:	eb 02                	jmp    c001285d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001285b:	89 c7                	mov    edi,eax
c001285d:	31 d2                	xor    edx,edx
c001285f:	46                   	inc    esi
c0012860:	89 f8                	mov    eax,edi
c0012862:	f7 f1                	div    ecx
c0012864:	39 cf                	cmp    edi,ecx
c0012866:	73 f3                	jae    c001285b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012868:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001286b:	eb 02                	jmp    c001286f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001286d:	89 c3                	mov    ebx,eax
c001286f:	31 d2                	xor    edx,edx
c0012871:	4e                   	dec    esi
c0012872:	89 d8                	mov    eax,ebx
c0012874:	f7 f1                	div    ecx
c0012876:	39 cb                	cmp    ebx,ecx
c0012878:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001287c:	88 16                	mov    BYTE PTR [esi],dl
c001287e:	73 ed                	jae    c001286d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012880:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012884:	83 c4 40             	add    esp,0x40
c0012887:	5b                   	pop    ebx
c0012888:	5e                   	pop    esi
c0012889:	5f                   	pop    edi
c001288a:	c3                   	ret    

c001288b <Dbg::logc(char)>:
c001288b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001288f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012894:	ec                   	in     al,dx
c0012895:	a8 20                	test   al,0x20
c0012897:	74 fb                	je     c0012894 <Dbg::logc(char)+0x9>
c0012899:	ba f8 03 00 00       	mov    edx,0x3f8
c001289e:	88 c8                	mov    al,cl
c00128a0:	ee                   	out    dx,al
c00128a1:	c3                   	ret    

c00128a2 <Dbg::logs(char*)>:
c00128a2:	53                   	push   ebx
c00128a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128aa:	84 c0                	test   al,al
c00128ac:	74 0f                	je     c00128bd <Dbg::logs(char*)+0x1b>
c00128ae:	50                   	push   eax
c00128af:	43                   	inc    ebx
c00128b0:	e8 d6 ff ff ff       	call   c001288b <Dbg::logc(char)>
c00128b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128b8:	5a                   	pop    edx
c00128b9:	84 c0                	test   al,al
c00128bb:	75 f1                	jne    c00128ae <Dbg::logs(char*)+0xc>
c00128bd:	5b                   	pop    ebx
c00128be:	c3                   	ret    

c00128bf <Dbg::logWriteInt(unsigned int)>:
c00128bf:	83 ec 10             	sub    esp,0x10
c00128c2:	6a 0a                	push   0xa
c00128c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c8:	50                   	push   eax
c00128c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128cd:	e8 58 ff ff ff       	call   c001282a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128d2:	50                   	push   eax
c00128d3:	e8 ca ff ff ff       	call   c00128a2 <Dbg::logs(char*)>
c00128d8:	83 c4 20             	add    esp,0x20
c00128db:	c3                   	ret    

c00128dc <Dbg::logWriteIntBase(unsigned int, int)>:
c00128dc:	83 ec 10             	sub    esp,0x10
c00128df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128e7:	50                   	push   eax
c00128e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ec:	e8 39 ff ff ff       	call   c001282a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128f1:	50                   	push   eax
c00128f2:	e8 ab ff ff ff       	call   c00128a2 <Dbg::logs(char*)>
c00128f7:	83 c4 20             	add    esp,0x20
c00128fa:	c3                   	ret    

c00128fb <Dbg::kprintf(char const*, ...)>:
c00128fb:	55                   	push   ebp
c00128fc:	57                   	push   edi
c00128fd:	56                   	push   esi
c00128fe:	53                   	push   ebx
c00128ff:	83 ec 0c             	sub    esp,0xc
c0012902:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012906:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001290a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001290e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012911:	84 c0                	test   al,al
c0012913:	74 4a                	je     c001295f <Dbg::kprintf(char const*, ...)+0x64>
c0012915:	31 db                	xor    ebx,ebx
c0012917:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001291a:	3c 25                	cmp    al,0x25
c001291c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001291f:	0f 85 e4 00 00 00    	jne    c0012a09 <Dbg::kprintf(char const*, ...)+0x10e>
c0012925:	83 c3 02             	add    ebx,0x2
c0012928:	8a 07                	mov    al,BYTE PTR [edi]
c001292a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001292d:	83 e8 25             	sub    eax,0x25
c0012930:	3c 53                	cmp    al,0x53
c0012932:	0f 87 ba 00 00 00    	ja     c00129f2 <Dbg::kprintf(char const*, ...)+0xf7>
c0012938:	0f b6 c0             	movzx  eax,al
c001293b:	ff 24 85 e4 b3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4c1c]
c0012942:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012946:	89 c8                	mov    eax,ecx
c0012948:	83 c1 04             	add    ecx,0x4
c001294b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001294f:	ff 30                	push   DWORD PTR [eax]
c0012951:	e8 4c ff ff ff       	call   c00128a2 <Dbg::logs(char*)>
c0012956:	58                   	pop    eax
c0012957:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001295b:	84 c0                	test   al,al
c001295d:	75 b8                	jne    c0012917 <Dbg::kprintf(char const*, ...)+0x1c>
c001295f:	83 c4 0c             	add    esp,0xc
c0012962:	5b                   	pop    ebx
c0012963:	5e                   	pop    esi
c0012964:	5f                   	pop    edi
c0012965:	5d                   	pop    ebp
c0012966:	c3                   	ret    
c0012967:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001296b:	89 d0                	mov    eax,edx
c001296d:	83 c2 04             	add    edx,0x4
c0012970:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012974:	ff 30                	push   DWORD PTR [eax]
c0012976:	e8 44 ff ff ff       	call   c00128bf <Dbg::logWriteInt(unsigned int)>
c001297b:	58                   	pop    eax
c001297c:	eb d9                	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c001297e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012982:	89 d0                	mov    eax,edx
c0012984:	83 c2 04             	add    edx,0x4
c0012987:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001298a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001298e:	50                   	push   eax
c001298f:	e8 f7 fe ff ff       	call   c001288b <Dbg::logc(char)>
c0012994:	58                   	pop    eax
c0012995:	eb c0                	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c0012997:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001299b:	89 c8                	mov    eax,ecx
c001299d:	83 c1 04             	add    ecx,0x4
c00129a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129a4:	ff 30                	push   DWORD PTR [eax]
c00129a6:	e8 14 ff ff ff       	call   c00128bf <Dbg::logWriteInt(unsigned int)>
c00129ab:	5f                   	pop    edi
c00129ac:	eb a9                	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c00129ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129b2:	89 c8                	mov    eax,ecx
c00129b4:	83 c1 04             	add    ecx,0x4
c00129b7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129bb:	6a 10                	push   0x10
c00129bd:	ff 30                	push   DWORD PTR [eax]
c00129bf:	e8 18 ff ff ff       	call   c00128dc <Dbg::logWriteIntBase(unsigned int, int)>
c00129c4:	59                   	pop    ecx
c00129c5:	5f                   	pop    edi
c00129c6:	eb 8f                	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c00129c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129cc:	89 d0                	mov    eax,edx
c00129ce:	83 c2 08             	add    edx,0x8
c00129d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129d5:	6a 10                	push   0x10
c00129d7:	ff 30                	push   DWORD PTR [eax]
c00129d9:	e8 fe fe ff ff       	call   c00128dc <Dbg::logWriteIntBase(unsigned int, int)>
c00129de:	58                   	pop    eax
c00129df:	5a                   	pop    edx
c00129e0:	e9 72 ff ff ff       	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e5:	6a 25                	push   0x25
c00129e7:	e8 9f fe ff ff       	call   c001288b <Dbg::logc(char)>
c00129ec:	58                   	pop    eax
c00129ed:	e9 65 ff ff ff       	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f2:	6a 25                	push   0x25
c00129f4:	e8 92 fe ff ff       	call   c001288b <Dbg::logc(char)>
c00129f9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129fc:	50                   	push   eax
c00129fd:	e8 89 fe ff ff       	call   c001288b <Dbg::logc(char)>
c0012a02:	5a                   	pop    edx
c0012a03:	59                   	pop    ecx
c0012a04:	e9 4e ff ff ff       	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a09:	50                   	push   eax
c0012a0a:	89 eb                	mov    ebx,ebp
c0012a0c:	e8 7a fe ff ff       	call   c001288b <Dbg::logc(char)>
c0012a11:	89 fd                	mov    ebp,edi
c0012a13:	58                   	pop    eax
c0012a14:	e9 3e ff ff ff       	jmp    c0012957 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a19:	90                   	nop

c0012a1a <File::read(unsigned long long, void*, int*)>:
c0012a1a:	53                   	push   ebx
c0012a1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a2a:	3c 19                	cmp    al,0x19
c0012a2c:	77 35                	ja     c0012a63 <File::read(unsigned long long, void*, int*)+0x49>
c0012a2e:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0012a35:	85 c0                	test   eax,eax
c0012a37:	74 2a                	je     c0012a63 <File::read(unsigned long long, void*, int*)+0x49>
c0012a39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a3f:	85 c0                	test   eax,eax
c0012a41:	74 20                	je     c0012a63 <File::read(unsigned long long, void*, int*)+0x49>
c0012a43:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a47:	74 21                	je     c0012a6a <File::read(unsigned long long, void*, int*)+0x50>
c0012a49:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a4b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a4f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a5d:	5b                   	pop    ebx
c0012a5e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a61:	ff e0                	jmp    eax
c0012a63:	b8 0b 00 00 00       	mov    eax,0xb
c0012a68:	eb 05                	jmp    c0012a6f <File::read(unsigned long long, void*, int*)+0x55>
c0012a6a:	b8 05 00 00 00       	mov    eax,0x5
c0012a6f:	5b                   	pop    ebx
c0012a70:	c3                   	ret    
c0012a71:	90                   	nop

c0012a72 <File::write(unsigned long long, void*, int*)>:
c0012a72:	53                   	push   ebx
c0012a73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a77:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a7b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a82:	3c 19                	cmp    al,0x19
c0012a84:	77 35                	ja     c0012abb <File::write(unsigned long long, void*, int*)+0x49>
c0012a86:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0012a8d:	85 c0                	test   eax,eax
c0012a8f:	74 2a                	je     c0012abb <File::write(unsigned long long, void*, int*)+0x49>
c0012a91:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a97:	85 c0                	test   eax,eax
c0012a99:	74 20                	je     c0012abb <File::write(unsigned long long, void*, int*)+0x49>
c0012a9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a9f:	74 21                	je     c0012ac2 <File::write(unsigned long long, void*, int*)+0x50>
c0012aa1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012aa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aa7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ab1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ab5:	5b                   	pop    ebx
c0012ab6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ab9:	ff e0                	jmp    eax
c0012abb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ac0:	eb 05                	jmp    c0012ac7 <File::write(unsigned long long, void*, int*)+0x55>
c0012ac2:	b8 05 00 00 00       	mov    eax,0x5
c0012ac7:	5b                   	pop    ebx
c0012ac8:	c3                   	ret    
c0012ac9:	90                   	nop

c0012aca <Directory::read(unsigned long long, void*, int*)>:
c0012aca:	53                   	push   ebx
c0012acb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012acf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ad3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ada:	3c 19                	cmp    al,0x19
c0012adc:	77 35                	ja     c0012b13 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ade:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0012ae5:	85 c0                	test   eax,eax
c0012ae7:	74 2a                	je     c0012b13 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012aef:	85 c0                	test   eax,eax
c0012af1:	74 20                	je     c0012b13 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012af3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af7:	74 21                	je     c0012b1a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012af9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012afb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b0d:	5b                   	pop    ebx
c0012b0e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b11:	ff e0                	jmp    eax
c0012b13:	b8 0b 00 00 00       	mov    eax,0xb
c0012b18:	eb 05                	jmp    c0012b1f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b1a:	b8 05 00 00 00       	mov    eax,0x5
c0012b1f:	5b                   	pop    ebx
c0012b20:	c3                   	ret    
c0012b21:	90                   	nop

c0012b22 <Directory::write(unsigned long long, void*, int*)>:
c0012b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b26:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b32:	80 fa 19             	cmp    dl,0x19
c0012b35:	77 18                	ja     c0012b4f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b37:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c0012b3e:	85 d2                	test   edx,edx
c0012b40:	74 0d                	je     c0012b4f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b42:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b49:	19 c0                	sbb    eax,eax
c0012b4b:	83 e0 0a             	and    eax,0xa
c0012b4e:	40                   	inc    eax
c0012b4f:	c3                   	ret    

c0012b50 <File::isAtty()>:
c0012b50:	31 c0                	xor    eax,eax
c0012b52:	c3                   	ret    
c0012b53:	90                   	nop

c0012b54 <Directory::isAtty()>:
c0012b54:	31 c0                	xor    eax,eax
c0012b56:	c3                   	ret    
c0012b57:	90                   	nop

c0012b58 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b58:	b8 0a 00 00 00       	mov    eax,0xa
c0012b5d:	c3                   	ret    

c0012b5e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b5e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b63:	c3                   	ret    

c0012b64 <Filesystem::getFileFirstSector(char const*)>:
c0012b64:	31 c0                	xor    eax,eax
c0012b66:	31 d2                	xor    edx,edx
c0012b68:	c3                   	ret    
c0012b69:	90                   	nop

c0012b6a <File::~File()>:
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0012b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b76:	89 10                	mov    DWORD PTR [eax],edx
c0012b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7c:	83 ec 0c             	sub    esp,0xc
c0012b7f:	50                   	push   eax
c0012b80:	e8 0f e7 ff ff       	call   c0011294 <UnixFile::~UnixFile()>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	90                   	nop
c0012b89:	83 c4 0c             	add    esp,0xc
c0012b8c:	c3                   	ret    
c0012b8d:	90                   	nop

c0012b8e <File::~File()>:
c0012b8e:	83 ec 0c             	sub    esp,0xc
c0012b91:	83 ec 0c             	sub    esp,0xc
c0012b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b98:	e8 cd ff ff ff       	call   c0012b6a <File::~File()>
c0012b9d:	83 c4 10             	add    esp,0x10
c0012ba0:	83 ec 08             	sub    esp,0x8
c0012ba3:	68 14 01 00 00       	push   0x114
c0012ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bac:	e8 6a fc ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	83 c4 0c             	add    esp,0xc
c0012bb7:	c3                   	ret    

c0012bb8 <Directory::~Directory()>:
c0012bb8:	83 ec 0c             	sub    esp,0xc
c0012bbb:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0012bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc4:	89 10                	mov    DWORD PTR [eax],edx
c0012bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bca:	83 ec 0c             	sub    esp,0xc
c0012bcd:	50                   	push   eax
c0012bce:	e8 c1 e6 ff ff       	call   c0011294 <UnixFile::~UnixFile()>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	90                   	nop
c0012bd7:	83 c4 0c             	add    esp,0xc
c0012bda:	c3                   	ret    
c0012bdb:	90                   	nop

c0012bdc <Directory::~Directory()>:
c0012bdc:	83 ec 0c             	sub    esp,0xc
c0012bdf:	83 ec 0c             	sub    esp,0xc
c0012be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be6:	e8 cd ff ff ff       	call   c0012bb8 <Directory::~Directory()>
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	83 ec 08             	sub    esp,0x8
c0012bf1:	68 14 01 00 00       	push   0x114
c0012bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bfa:	e8 1c fc ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	83 c4 0c             	add    esp,0xc
c0012c05:	c3                   	ret    

c0012c06 <Filesystem::Filesystem()>:
c0012c06:	ba 3c b5 02 c0       	mov    edx,0xc002b53c
c0012c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0f:	89 10                	mov    DWORD PTR [eax],edx
c0012c11:	8b 15 b4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3b4
c0012c17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c22:	a3 b4 f3 02 c0       	mov    ds:0xc002f3b4,eax
c0012c27:	90                   	nop
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <Filesystem::~Filesystem()>:
c0012c2a:	ba 3c b5 02 c0       	mov    edx,0xc002b53c
c0012c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c33:	89 10                	mov    DWORD PTR [eax],edx
c0012c35:	90                   	nop
c0012c36:	c3                   	ret    
c0012c37:	90                   	nop

c0012c38 <Filesystem::~Filesystem()>:
c0012c38:	83 ec 0c             	sub    esp,0xc
c0012c3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c3f:	e8 e6 ff ff ff       	call   c0012c2a <Filesystem::~Filesystem()>
c0012c44:	83 c4 04             	add    esp,0x4
c0012c47:	83 ec 08             	sub    esp,0x8
c0012c4a:	6a 08                	push   0x8
c0012c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c50:	e8 c6 fb ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	83 c4 0c             	add    esp,0xc
c0012c5b:	c3                   	ret    

c0012c5c <Fs::getcwd(Process*, char*, int)>:
c0012c5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c60:	31 c0                	xor    eax,eax
c0012c62:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c65:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c69:	7d 15                	jge    c0012c80 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c6f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c76:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c79:	84 c9                	test   cl,cl
c0012c7b:	74 06                	je     c0012c83 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c7d:	40                   	inc    eax
c0012c7e:	eb e2                	jmp    c0012c62 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c80:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c83:	31 c0                	xor    eax,eax
c0012c85:	c3                   	ret    

c0012c86 <Fs::initVFS()>:
c0012c86:	83 ec 18             	sub    esp,0x18
c0012c89:	6a 08                	push   0x8
c0012c8b:	e8 72 cc ff ff       	call   c000f902 <malloc>
c0012c90:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c93:	e8 8c e5 00 00       	call   c0021224 <FAT::FAT()>
c0012c98:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c9f:	e8 5e cc ff ff       	call   c000f902 <malloc>
c0012ca4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ca7:	e8 b4 f7 00 00       	call   c0022460 <ISO9660::ISO9660()>
c0012cac:	83 c4 1c             	add    esp,0x1c
c0012caf:	c3                   	ret    

c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012cb0:	55                   	push   ebp
c0012cb1:	57                   	push   edi
c0012cb2:	56                   	push   esi
c0012cb3:	53                   	push   ebx
c0012cb4:	81 ec 10 04 00 00    	sub    esp,0x410
c0012cba:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cc1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cc8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ccf:	68 00 04 00 00       	push   0x400
c0012cd4:	6a 00                	push   0x0
c0012cd6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cda:	56                   	push   esi
c0012cdb:	e8 70 da fe ff       	call   c0000750 <memset>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ce7:	75 0b                	jne    c0012cf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ce9:	50                   	push   eax
c0012cea:	50                   	push   eax
c0012ceb:	57                   	push   edi
c0012cec:	56                   	push   esi
c0012ced:	e8 1a db fe ff       	call   c000080c <strcpy>
c0012cf2:	eb 41                	jmp    c0012d35 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cf4:	8a 07                	mov    al,BYTE PTR [edi]
c0012cf6:	3c 5c                	cmp    al,0x5c
c0012cf8:	74 04                	je     c0012cfe <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cfa:	3c 2f                	cmp    al,0x2f
c0012cfc:	75 18                	jne    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cfe:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012d01:	3c 60                	cmp    al,0x60
c0012d03:	7e 03                	jle    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012d05:	83 e8 20             	sub    eax,0x20
c0012d08:	88 04 24             	mov    BYTE PTR [esp],al
c0012d0b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d12:	50                   	push   eax
c0012d13:	50                   	push   eax
c0012d14:	eb 18                	jmp    c0012d2e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d16:	50                   	push   eax
c0012d17:	50                   	push   eax
c0012d18:	55                   	push   ebp
c0012d19:	56                   	push   esi
c0012d1a:	e8 ed da fe ff       	call   c000080c <strcpy>
c0012d1f:	5a                   	pop    edx
c0012d20:	59                   	pop    ecx
c0012d21:	68 b9 cd 02 c0       	push   0xc002cdb9
c0012d26:	56                   	push   esi
c0012d27:	e8 20 dc fe ff       	call   c000094c <strcat>
c0012d2c:	5d                   	pop    ebp
c0012d2d:	58                   	pop    eax
c0012d2e:	57                   	push   edi
c0012d2f:	56                   	push   esi
c0012d30:	e8 17 dc fe ff       	call   c000094c <strcat>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d3b:	3c 60                	cmp    al,0x60
c0012d3d:	7e 03                	jle    c0012d42 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d3f:	83 e8 20             	sub    eax,0x20
c0012d42:	88 04 24             	mov    BYTE PTR [esp],al
c0012d45:	88 03                	mov    BYTE PTR [ebx],al
c0012d47:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d4e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d54:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d58:	bf 03 00 00 00       	mov    edi,0x3
c0012d5d:	b8 03 00 00 00       	mov    eax,0x3
c0012d62:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d65:	84 d2                	test   dl,dl
c0012d67:	0f 84 91 00 00 00    	je     c0012dfe <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d6d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d70:	80 fa 5c             	cmp    dl,0x5c
c0012d73:	74 05                	je     c0012d7a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d75:	80 fa 2f             	cmp    dl,0x2f
c0012d78:	75 12                	jne    c0012d8c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d7a:	89 c5                	mov    ebp,eax
c0012d7c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d81:	74 09                	je     c0012d8c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d83:	40                   	inc    eax
c0012d84:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d88:	89 cf                	mov    edi,ecx
c0012d8a:	eb d6                	jmp    c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d8c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d91:	75 5b                	jne    c0012dee <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d93:	80 fa 2e             	cmp    dl,0x2e
c0012d96:	75 56                	jne    c0012dee <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d98:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d9c:	74 19                	je     c0012db7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d9e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012da3:	74 53                	je     c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012da5:	89 f9                	mov    ecx,edi
c0012da7:	41                   	inc    ecx
c0012da8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012dab:	80 fa 2f             	cmp    dl,0x2f
c0012dae:	74 f7                	je     c0012da7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012db0:	80 fa 5c             	cmp    dl,0x5c
c0012db3:	74 f2                	je     c0012da7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012db5:	eb d1                	jmp    c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dbc:	74 3a                	je     c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012dbe:	83 f8 03             	cmp    eax,0x3
c0012dc1:	74 c5                	je     c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc3:	41                   	inc    ecx
c0012dc4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012dc7:	80 fa 2f             	cmp    dl,0x2f
c0012dca:	74 f7                	je     c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dcc:	80 fa 5c             	cmp    dl,0x5c
c0012dcf:	74 f2                	je     c0012dc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dd1:	48                   	dec    eax
c0012dd2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd6:	75 06                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dd8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ddc:	eb f3                	jmp    c0012dd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dde:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012de2:	74 07                	je     c0012deb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012de4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012de8:	48                   	dec    eax
c0012de9:	eb f3                	jmp    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012deb:	40                   	inc    eax
c0012dec:	eb 9a                	jmp    c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dee:	80 fa 2f             	cmp    dl,0x2f
c0012df1:	74 95                	je     c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df3:	80 fa 5c             	cmp    dl,0x5c
c0012df6:	74 90                	je     c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dfb:	40                   	inc    eax
c0012dfc:	eb 8a                	jmp    c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dfe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	53                   	push   ebx
c0012e06:	e8 61 d9 fe ff       	call   c000076c <strlen>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e13:	75 26                	jne    c0012e3b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e15:	83 ec 0c             	sub    esp,0xc
c0012e18:	53                   	push   ebx
c0012e19:	e8 4e d9 fe ff       	call   c000076c <strlen>
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e26:	74 26                	je     c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	53                   	push   ebx
c0012e2c:	e8 3b d9 fe ff       	call   c000076c <strlen>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e39:	eb c7                	jmp    c0012e02 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e3b:	83 ec 0c             	sub    esp,0xc
c0012e3e:	53                   	push   ebx
c0012e3f:	e8 28 d9 fe ff       	call   c000076c <strlen>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e4c:	74 c7                	je     c0012e15 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e4e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e54:	5b                   	pop    ebx
c0012e55:	5e                   	pop    esi
c0012e56:	5f                   	pop    edi
c0012e57:	5d                   	pop    ebp
c0012e58:	c3                   	ret    
c0012e59:	90                   	nop

c0012e5a <File::File(char const*, Process*)>:
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e61:	83 ec 08             	sub    esp,0x8
c0012e64:	6a 00                	push   0x0
c0012e66:	50                   	push   eax
c0012e67:	e8 46 e2 ff ff       	call   c00110b2 <UnixFile::UnixFile(int)>
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	89 10                	mov    DWORD PTR [eax],edx
c0012e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e88:	83 c0 0d             	add    eax,0xd
c0012e8b:	83 ec 04             	sub    esp,0x4
c0012e8e:	52                   	push   edx
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	50                   	push   eax
c0012e94:	e8 17 fe ff ff       	call   c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e99:	83 c4 10             	add    esp,0x10
c0012e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ea3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eaa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012eb8:	90                   	nop
c0012eb9:	83 c4 0c             	add    esp,0xc
c0012ebc:	c3                   	ret    
c0012ebd:	90                   	nop

c0012ebe <File::open(FileOpenMode)>:
c0012ebe:	53                   	push   ebx
c0012ebf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ec4:	83 ec 08             	sub    esp,0x8
c0012ec7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ecb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ed2:	80 fa 19             	cmp    dl,0x19
c0012ed5:	77 40                	ja     c0012f17 <File::open(FileOpenMode)+0x59>
c0012ed7:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c0012ede:	85 d2                	test   edx,edx
c0012ee0:	74 35                	je     c0012f17 <File::open(FileOpenMode)+0x59>
c0012ee2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ee8:	85 d2                	test   edx,edx
c0012eea:	74 2b                	je     c0012f17 <File::open(FileOpenMode)+0x59>
c0012eec:	b8 06 00 00 00       	mov    eax,0x6
c0012ef1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ef5:	75 20                	jne    c0012f17 <File::open(FileOpenMode)+0x59>
c0012ef7:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ef9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f03:	51                   	push   ecx
c0012f04:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012f07:	51                   	push   ecx
c0012f08:	52                   	push   edx
c0012f09:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012f0c:	83 c4 10             	add    esp,0x10
c0012f0f:	85 c0                	test   eax,eax
c0012f11:	75 04                	jne    c0012f17 <File::open(FileOpenMode)+0x59>
c0012f13:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f17:	83 c4 08             	add    esp,0x8
c0012f1a:	5b                   	pop    ebx
c0012f1b:	c3                   	ret    

c0012f1c <File::close()>:
c0012f1c:	53                   	push   ebx
c0012f1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f22:	83 ec 08             	sub    esp,0x8
c0012f25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f29:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f30:	80 fa 19             	cmp    dl,0x19
c0012f33:	77 41                	ja     c0012f76 <File::close()+0x5a>
c0012f35:	8b 1c 95 40 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd07c0]
c0012f3c:	85 db                	test   ebx,ebx
c0012f3e:	74 36                	je     c0012f76 <File::close()+0x5a>
c0012f40:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f47:	74 2d                	je     c0012f76 <File::close()+0x5a>
c0012f49:	b8 05 00 00 00       	mov    eax,0x5
c0012f4e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f52:	74 22                	je     c0012f76 <File::close()+0x5a>
c0012f54:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f58:	8b 04 95 40 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd07c0]
c0012f5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f65:	53                   	push   ebx
c0012f66:	53                   	push   ebx
c0012f67:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f69:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f6f:	50                   	push   eax
c0012f70:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f73:	83 c4 10             	add    esp,0x10
c0012f76:	83 c4 08             	add    esp,0x8
c0012f79:	5b                   	pop    ebx
c0012f7a:	c3                   	ret    
c0012f7b:	90                   	nop

c0012f7c <File::seek(unsigned long long)>:
c0012f7c:	56                   	push   esi
c0012f7d:	53                   	push   ebx
c0012f7e:	b8 0b 00 00 00       	mov    eax,0xb
c0012f83:	51                   	push   ecx
c0012f84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f8c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f97:	80 fa 19             	cmp    dl,0x19
c0012f9a:	77 31                	ja     c0012fcd <File::seek(unsigned long long)+0x51>
c0012f9c:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c0012fa3:	85 d2                	test   edx,edx
c0012fa5:	74 26                	je     c0012fcd <File::seek(unsigned long long)+0x51>
c0012fa7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fad:	85 d2                	test   edx,edx
c0012faf:	74 1c                	je     c0012fcd <File::seek(unsigned long long)+0x51>
c0012fb1:	b8 05 00 00 00       	mov    eax,0x5
c0012fb6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fba:	74 11                	je     c0012fcd <File::seek(unsigned long long)+0x51>
c0012fbc:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fbe:	53                   	push   ebx
c0012fbf:	51                   	push   ecx
c0012fc0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fc6:	52                   	push   edx
c0012fc7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	5a                   	pop    edx
c0012fce:	5b                   	pop    ebx
c0012fcf:	5e                   	pop    esi
c0012fd0:	c3                   	ret    
c0012fd1:	90                   	nop

c0012fd2 <File::tell(unsigned long long*)>:
c0012fd2:	83 ec 0c             	sub    esp,0xc
c0012fd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fde:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fe5:	80 fa 19             	cmp    dl,0x19
c0012fe8:	77 34                	ja     c001301e <File::tell(unsigned long long*)+0x4c>
c0012fea:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c0012ff1:	85 d2                	test   edx,edx
c0012ff3:	74 29                	je     c001301e <File::tell(unsigned long long*)+0x4c>
c0012ff5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ffb:	85 d2                	test   edx,edx
c0012ffd:	74 1f                	je     c001301e <File::tell(unsigned long long*)+0x4c>
c0012fff:	b8 05 00 00 00       	mov    eax,0x5
c0013004:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013008:	74 14                	je     c001301e <File::tell(unsigned long long*)+0x4c>
c001300a:	50                   	push   eax
c001300b:	8b 02                	mov    eax,DWORD PTR [edx]
c001300d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013011:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013017:	52                   	push   edx
c0013018:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	83 c4 0c             	add    esp,0xc
c0013021:	c3                   	ret    

c0013022 <File::rewind()>:
c0013022:	83 ec 10             	sub    esp,0x10
c0013025:	6a 00                	push   0x0
c0013027:	6a 00                	push   0x0
c0013029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302d:	e8 4a ff ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c0013032:	83 c4 1c             	add    esp,0x1c
c0013035:	c3                   	ret    

c0013036 <File::unlink()>:
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	b8 0b 00 00 00       	mov    eax,0xb
c001303e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013042:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013049:	80 f9 19             	cmp    cl,0x19
c001304c:	77 2f                	ja     c001307d <File::unlink()+0x47>
c001304e:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013055:	85 c9                	test   ecx,ecx
c0013057:	74 24                	je     c001307d <File::unlink()+0x47>
c0013059:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001305f:	85 c9                	test   ecx,ecx
c0013061:	74 1a                	je     c001307d <File::unlink()+0x47>
c0013063:	b8 06 00 00 00       	mov    eax,0x6
c0013068:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001306c:	75 0f                	jne    c001307d <File::unlink()+0x47>
c001306e:	83 c2 0d             	add    edx,0xd
c0013071:	50                   	push   eax
c0013072:	50                   	push   eax
c0013073:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013075:	52                   	push   edx
c0013076:	51                   	push   ecx
c0013077:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	c3                   	ret    
c0013081:	90                   	nop

c0013082 <File::rename(char const*)>:
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	b8 0b 00 00 00       	mov    eax,0xb
c001308a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001308e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013095:	80 f9 19             	cmp    cl,0x19
c0013098:	77 32                	ja     c00130cc <File::rename(char const*)+0x4a>
c001309a:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c00130a1:	85 c9                	test   ecx,ecx
c00130a3:	74 27                	je     c00130cc <File::rename(char const*)+0x4a>
c00130a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130ab:	85 c9                	test   ecx,ecx
c00130ad:	74 1d                	je     c00130cc <File::rename(char const*)+0x4a>
c00130af:	b8 06 00 00 00       	mov    eax,0x6
c00130b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b8:	75 12                	jne    c00130cc <File::rename(char const*)+0x4a>
c00130ba:	83 c2 0d             	add    edx,0xd
c00130bd:	50                   	push   eax
c00130be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130c4:	52                   	push   edx
c00130c5:	51                   	push   ecx
c00130c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130c9:	83 c4 10             	add    esp,0x10
c00130cc:	83 c4 0c             	add    esp,0xc
c00130cf:	c3                   	ret    

c00130d0 <File::chfatattr(unsigned char, unsigned char)>:
c00130d0:	57                   	push   edi
c00130d1:	b8 0b 00 00 00       	mov    eax,0xb
c00130d6:	56                   	push   esi
c00130d7:	53                   	push   ebx
c00130d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130eb:	80 f9 19             	cmp    cl,0x19
c00130ee:	77 37                	ja     c0013127 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f0:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c00130f7:	85 c9                	test   ecx,ecx
c00130f9:	74 2c                	je     c0013127 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013101:	85 c9                	test   ecx,ecx
c0013103:	74 22                	je     c0013127 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013105:	b8 06 00 00 00       	mov    eax,0x6
c001310a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001310e:	75 17                	jne    c0013127 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013110:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013112:	89 f0                	mov    eax,esi
c0013114:	83 c2 0d             	add    edx,0xd
c0013117:	0f b6 f0             	movzx  esi,al
c001311a:	0f b6 db             	movzx  ebx,bl
c001311d:	56                   	push   esi
c001311e:	53                   	push   ebx
c001311f:	52                   	push   edx
c0013120:	51                   	push   ecx
c0013121:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	5b                   	pop    ebx
c0013128:	5e                   	pop    esi
c0013129:	5f                   	pop    edi
c001312a:	c3                   	ret    
c001312b:	90                   	nop

c001312c <File::exists()>:
c001312c:	83 ec 0c             	sub    esp,0xc
c001312f:	31 c0                	xor    eax,eax
c0013131:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013135:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001313c:	80 f9 19             	cmp    cl,0x19
c001313f:	77 24                	ja     c0013165 <File::exists()+0x39>
c0013141:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013148:	85 c9                	test   ecx,ecx
c001314a:	74 19                	je     c0013165 <File::exists()+0x39>
c001314c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013152:	85 c9                	test   ecx,ecx
c0013154:	74 0f                	je     c0013165 <File::exists()+0x39>
c0013156:	83 c2 0d             	add    edx,0xd
c0013159:	50                   	push   eax
c001315a:	50                   	push   eax
c001315b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001315d:	52                   	push   edx
c001315e:	51                   	push   ecx
c001315f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	83 c4 0c             	add    esp,0xc
c0013168:	c3                   	ret    
c0013169:	90                   	nop

c001316a <File::stat(unsigned long long*, bool*)>:
c001316a:	56                   	push   esi
c001316b:	53                   	push   ebx
c001316c:	50                   	push   eax
c001316d:	b8 0b 00 00 00       	mov    eax,0xb
c0013172:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013176:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001317a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013181:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013185:	80 f9 19             	cmp    cl,0x19
c0013188:	77 3d                	ja     c00131c7 <File::stat(unsigned long long*, bool*)+0x5d>
c001318a:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013191:	85 c9                	test   ecx,ecx
c0013193:	74 32                	je     c00131c7 <File::stat(unsigned long long*, bool*)+0x5d>
c0013195:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001319b:	85 c9                	test   ecx,ecx
c001319d:	74 28                	je     c00131c7 <File::stat(unsigned long long*, bool*)+0x5d>
c001319f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131a5:	74 13                	je     c00131ba <File::stat(unsigned long long*, bool*)+0x50>
c00131a7:	83 ec 04             	sub    esp,0x4
c00131aa:	56                   	push   esi
c00131ab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131b1:	51                   	push   ecx
c00131b2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131b5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131b8:	eb 0a                	jmp    c00131c4 <File::stat(unsigned long long*, bool*)+0x5a>
c00131ba:	53                   	push   ebx
c00131bb:	83 c2 0d             	add    edx,0xd
c00131be:	56                   	push   esi
c00131bf:	52                   	push   edx
c00131c0:	51                   	push   ecx
c00131c1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	5a                   	pop    edx
c00131c8:	5b                   	pop    ebx
c00131c9:	5e                   	pop    esi
c00131ca:	c3                   	ret    

c00131cb <Fs::setcwd(Process*, char*)>:
c00131cb:	55                   	push   ebp
c00131cc:	57                   	push   edi
c00131cd:	56                   	push   esi
c00131ce:	53                   	push   ebx
c00131cf:	81 ec 20 02 00 00    	sub    esp,0x220
c00131d5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131dc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131e2:	57                   	push   edi
c00131e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131ea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131ee:	56                   	push   esi
c00131ef:	e8 bc fa ff ff       	call   c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00131f7:	e8 70 d5 fe ff       	call   c000076c <strlen>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	83 f8 02             	cmp    eax,0x2
c0013202:	77 17                	ja     c001321b <Fs::setcwd(Process*, char*)+0x50>
c0013204:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013209:	83 e8 41             	sub    eax,0x41
c001320c:	83 f8 19             	cmp    eax,0x19
c001320f:	76 24                	jbe    c0013235 <Fs::setcwd(Process*, char*)+0x6a>
c0013211:	b8 03 00 00 00       	mov    eax,0x3
c0013216:	e9 e0 00 00 00       	jmp    c00132fb <Fs::setcwd(Process*, char*)+0x130>
c001321b:	83 ec 0c             	sub    esp,0xc
c001321e:	56                   	push   esi
c001321f:	e8 48 d5 fe ff       	call   c000076c <strlen>
c0013224:	83 c4 10             	add    esp,0x10
c0013227:	83 f8 03             	cmp    eax,0x3
c001322a:	75 34                	jne    c0013260 <Fs::setcwd(Process*, char*)+0x95>
c001322c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013231:	75 2d                	jne    c0013260 <Fs::setcwd(Process*, char*)+0x95>
c0013233:	eb cf                	jmp    c0013204 <Fs::setcwd(Process*, char*)+0x39>
c0013235:	8b 14 85 40 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd07c0]
c001323c:	b8 05 00 00 00       	mov    eax,0x5
c0013241:	85 d2                	test   edx,edx
c0013243:	0f 84 b2 00 00 00    	je     c00132fb <Fs::setcwd(Process*, char*)+0x130>
c0013249:	b8 06 00 00 00       	mov    eax,0x6
c001324e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013255:	0f 85 92 00 00 00    	jne    c00132ed <Fs::setcwd(Process*, char*)+0x122>
c001325b:	e9 9b 00 00 00       	jmp    c00132fb <Fs::setcwd(Process*, char*)+0x130>
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	68 14 01 00 00       	push   0x114
c0013268:	e8 95 c6 ff ff       	call   c000f902 <malloc>
c001326d:	83 c4 0c             	add    esp,0xc
c0013270:	89 c3                	mov    ebx,eax
c0013272:	55                   	push   ebp
c0013273:	56                   	push   esi
c0013274:	50                   	push   eax
c0013275:	e8 e0 fb ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001327a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001327f:	83 c4 0c             	add    esp,0xc
c0013282:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013286:	50                   	push   eax
c0013287:	8d 44 24 10          	lea    eax,[esp+0x10]
c001328b:	50                   	push   eax
c001328c:	53                   	push   ebx
c001328d:	e8 d8 fe ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	83 f8 02             	cmp    eax,0x2
c0013298:	74 04                	je     c001329e <Fs::setcwd(Process*, char*)+0xd3>
c001329a:	85 c0                	test   eax,eax
c001329c:	74 1c                	je     c00132ba <Fs::setcwd(Process*, char*)+0xef>
c001329e:	b8 01 00 00 00       	mov    eax,0x1
c00132a3:	85 db                	test   ebx,ebx
c00132a5:	74 54                	je     c00132fb <Fs::setcwd(Process*, char*)+0x130>
c00132a7:	83 ec 0c             	sub    esp,0xc
c00132aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132ac:	53                   	push   ebx
c00132ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	b8 01 00 00 00       	mov    eax,0x1
c00132b8:	eb 41                	jmp    c00132fb <Fs::setcwd(Process*, char*)+0x130>
c00132ba:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132bf:	75 1c                	jne    c00132dd <Fs::setcwd(Process*, char*)+0x112>
c00132c1:	b8 02 00 00 00       	mov    eax,0x2
c00132c6:	85 db                	test   ebx,ebx
c00132c8:	74 31                	je     c00132fb <Fs::setcwd(Process*, char*)+0x130>
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132cf:	53                   	push   ebx
c00132d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	b8 02 00 00 00       	mov    eax,0x2
c00132db:	eb 1e                	jmp    c00132fb <Fs::setcwd(Process*, char*)+0x130>
c00132dd:	85 db                	test   ebx,ebx
c00132df:	74 0c                	je     c00132ed <Fs::setcwd(Process*, char*)+0x122>
c00132e1:	83 ec 0c             	sub    esp,0xc
c00132e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132e6:	53                   	push   ebx
c00132e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	50                   	push   eax
c00132ee:	50                   	push   eax
c00132ef:	56                   	push   esi
c00132f0:	57                   	push   edi
c00132f1:	e8 16 d5 fe ff       	call   c000080c <strcpy>
c00132f6:	83 c4 10             	add    esp,0x10
c00132f9:	31 c0                	xor    eax,eax
c00132fb:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013301:	5b                   	pop    ebx
c0013302:	5e                   	pop    esi
c0013303:	5f                   	pop    edi
c0013304:	5d                   	pop    ebp
c0013305:	c3                   	ret    

c0013306 <Directory::Directory(char const*, Process*)>:
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330d:	83 ec 08             	sub    esp,0x8
c0013310:	6a 00                	push   0x0
c0013312:	50                   	push   eax
c0013313:	e8 9a dd ff ff       	call   c00110b2 <UnixFile::UnixFile(int)>
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	89 10                	mov    DWORD PTR [eax],edx
c0013326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001332a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	83 c0 0d             	add    eax,0xd
c0013337:	83 ec 04             	sub    esp,0x4
c001333a:	52                   	push   edx
c001333b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333f:	50                   	push   eax
c0013340:	e8 6b f9 ff ff       	call   c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001334f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001335c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013360:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013364:	90                   	nop
c0013365:	83 c4 0c             	add    esp,0xc
c0013368:	c3                   	ret    
c0013369:	90                   	nop

c001336a <Directory::open()>:
c001336a:	53                   	push   ebx
c001336b:	b8 0b 00 00 00       	mov    eax,0xb
c0013370:	83 ec 08             	sub    esp,0x8
c0013373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013377:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001337e:	80 fa 19             	cmp    dl,0x19
c0013381:	77 3d                	ja     c00133c0 <Directory::open()+0x56>
c0013383:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c001338a:	85 d2                	test   edx,edx
c001338c:	74 32                	je     c00133c0 <Directory::open()+0x56>
c001338e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013394:	85 d2                	test   edx,edx
c0013396:	74 28                	je     c00133c0 <Directory::open()+0x56>
c0013398:	b8 06 00 00 00       	mov    eax,0x6
c001339d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133a1:	75 1d                	jne    c00133c0 <Directory::open()+0x56>
c00133a3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133a9:	50                   	push   eax
c00133aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00133ac:	51                   	push   ecx
c00133ad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133b0:	51                   	push   ecx
c00133b1:	52                   	push   edx
c00133b2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	85 c0                	test   eax,eax
c00133ba:	75 04                	jne    c00133c0 <Directory::open()+0x56>
c00133bc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133c0:	83 c4 08             	add    esp,0x8
c00133c3:	5b                   	pop    ebx
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop

c00133c6 <Directory::close()>:
c00133c6:	53                   	push   ebx
c00133c7:	b8 0b 00 00 00       	mov    eax,0xb
c00133cc:	83 ec 08             	sub    esp,0x8
c00133cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133d3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133da:	80 fa 19             	cmp    dl,0x19
c00133dd:	77 41                	ja     c0013420 <Directory::close()+0x5a>
c00133df:	8b 1c 95 40 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd07c0]
c00133e6:	85 db                	test   ebx,ebx
c00133e8:	74 36                	je     c0013420 <Directory::close()+0x5a>
c00133ea:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133f1:	74 2d                	je     c0013420 <Directory::close()+0x5a>
c00133f3:	b8 05 00 00 00       	mov    eax,0x5
c00133f8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133fc:	74 22                	je     c0013420 <Directory::close()+0x5a>
c00133fe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013402:	8b 04 95 40 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd07c0]
c0013409:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001340f:	53                   	push   ebx
c0013410:	53                   	push   ebx
c0013411:	8b 10                	mov    edx,DWORD PTR [eax]
c0013413:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013419:	50                   	push   eax
c001341a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	83 c4 08             	add    esp,0x8
c0013423:	5b                   	pop    ebx
c0013424:	c3                   	ret    
c0013425:	90                   	nop

c0013426 <Directory::unlink()>:
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	b8 0b 00 00 00       	mov    eax,0xb
c001342e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013432:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013439:	80 f9 19             	cmp    cl,0x19
c001343c:	77 2f                	ja     c001346d <Directory::unlink()+0x47>
c001343e:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013445:	85 c9                	test   ecx,ecx
c0013447:	74 24                	je     c001346d <Directory::unlink()+0x47>
c0013449:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001344f:	85 c9                	test   ecx,ecx
c0013451:	74 1a                	je     c001346d <Directory::unlink()+0x47>
c0013453:	b8 06 00 00 00       	mov    eax,0x6
c0013458:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001345c:	75 0f                	jne    c001346d <Directory::unlink()+0x47>
c001345e:	83 c2 0d             	add    edx,0xd
c0013461:	50                   	push   eax
c0013462:	50                   	push   eax
c0013463:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013465:	52                   	push   edx
c0013466:	51                   	push   ecx
c0013467:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001346a:	83 c4 10             	add    esp,0x10
c001346d:	83 c4 0c             	add    esp,0xc
c0013470:	c3                   	ret    
c0013471:	90                   	nop

c0013472 <Directory::rename(char const*)>:
c0013472:	83 ec 0c             	sub    esp,0xc
c0013475:	b8 0b 00 00 00       	mov    eax,0xb
c001347a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001347e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013485:	80 f9 19             	cmp    cl,0x19
c0013488:	77 32                	ja     c00134bc <Directory::rename(char const*)+0x4a>
c001348a:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013491:	85 c9                	test   ecx,ecx
c0013493:	74 27                	je     c00134bc <Directory::rename(char const*)+0x4a>
c0013495:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001349b:	85 c9                	test   ecx,ecx
c001349d:	74 1d                	je     c00134bc <Directory::rename(char const*)+0x4a>
c001349f:	b8 06 00 00 00       	mov    eax,0x6
c00134a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134a8:	75 12                	jne    c00134bc <Directory::rename(char const*)+0x4a>
c00134aa:	83 c2 0d             	add    edx,0xd
c00134ad:	50                   	push   eax
c00134ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134b4:	52                   	push   edx
c00134b5:	51                   	push   ecx
c00134b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134b9:	83 c4 10             	add    esp,0x10
c00134bc:	83 c4 0c             	add    esp,0xc
c00134bf:	c3                   	ret    

c00134c0 <Directory::exists()>:
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	31 c0                	xor    eax,eax
c00134c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134d0:	80 f9 19             	cmp    cl,0x19
c00134d3:	77 24                	ja     c00134f9 <Directory::exists()+0x39>
c00134d5:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c00134dc:	85 c9                	test   ecx,ecx
c00134de:	74 19                	je     c00134f9 <Directory::exists()+0x39>
c00134e0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134e6:	85 c9                	test   ecx,ecx
c00134e8:	74 0f                	je     c00134f9 <Directory::exists()+0x39>
c00134ea:	83 c2 0d             	add    edx,0xd
c00134ed:	50                   	push   eax
c00134ee:	50                   	push   eax
c00134ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134f1:	52                   	push   edx
c00134f2:	51                   	push   ecx
c00134f3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	83 c4 0c             	add    esp,0xc
c00134fc:	c3                   	ret    
c00134fd:	90                   	nop

c00134fe <Directory::read(dirent*)>:
c00134fe:	83 ec 1c             	sub    esp,0x1c
c0013501:	b8 0b 00 00 00       	mov    eax,0xb
c0013506:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001350a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013511:	80 fa 19             	cmp    dl,0x19
c0013514:	77 30                	ja     c0013546 <Directory::read(dirent*)+0x48>
c0013516:	8b 14 95 40 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07c0]
c001351d:	85 d2                	test   edx,edx
c001351f:	74 25                	je     c0013546 <Directory::read(dirent*)+0x48>
c0013521:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013528:	74 1c                	je     c0013546 <Directory::read(dirent*)+0x48>
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001352f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013533:	52                   	push   edx
c0013534:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013538:	6a 00                	push   0x0
c001353a:	68 10 01 00 00       	push   0x110
c001353f:	51                   	push   ecx
c0013540:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013543:	83 c4 20             	add    esp,0x20
c0013546:	83 c4 1c             	add    esp,0x1c
c0013549:	c3                   	ret    

c001354a <Directory::create()>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	b8 0b 00 00 00       	mov    eax,0xb
c0013552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013556:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001355d:	80 f9 19             	cmp    cl,0x19
c0013560:	77 2f                	ja     c0013591 <Directory::create()+0x47>
c0013562:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c0013569:	85 c9                	test   ecx,ecx
c001356b:	74 24                	je     c0013591 <Directory::create()+0x47>
c001356d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 1a                	je     c0013591 <Directory::create()+0x47>
c0013577:	b8 06 00 00 00       	mov    eax,0x6
c001357c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013580:	75 0f                	jne    c0013591 <Directory::create()+0x47>
c0013582:	83 c2 0d             	add    edx,0xd
c0013585:	50                   	push   eax
c0013586:	50                   	push   eax
c0013587:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013589:	52                   	push   edx
c001358a:	51                   	push   ecx
c001358b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	83 c4 0c             	add    esp,0xc
c0013594:	c3                   	ret    
c0013595:	90                   	nop

c0013596 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013596:	b8 0a 00 00 00       	mov    eax,0xa
c001359b:	c3                   	ret    

c001359c <Bus::Bus(char const*)>:
c001359c:	83 ec 0c             	sub    esp,0xc
c001359f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a3:	83 ec 08             	sub    esp,0x8
c00135a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135aa:	50                   	push   eax
c00135ab:	e8 88 09 00 00       	call   c0013f38 <Device::Device(char const*)>
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	ba dc b5 02 c0       	mov    edx,0xc002b5dc
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	89 10                	mov    DWORD PTR [eax],edx
c00135be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135cc:	90                   	nop
c00135cd:	83 c4 0c             	add    esp,0xc
c00135d0:	c3                   	ret    
c00135d1:	90                   	nop

c00135d2 <Bus::~Bus()>:
c00135d2:	83 ec 0c             	sub    esp,0xc
c00135d5:	ba dc b5 02 c0       	mov    edx,0xc002b5dc
c00135da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135de:	89 10                	mov    DWORD PTR [eax],edx
c00135e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e4:	83 ec 0c             	sub    esp,0xc
c00135e7:	50                   	push   eax
c00135e8:	e8 15 06 00 00       	call   c0013c02 <Device::~Device()>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	90                   	nop
c00135f1:	83 c4 0c             	add    esp,0xc
c00135f4:	c3                   	ret    
c00135f5:	90                   	nop

c00135f6 <Bus::~Bus()>:
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	83 ec 0c             	sub    esp,0xc
c00135fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013600:	e8 cd ff ff ff       	call   c00135d2 <Bus::~Bus()>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	83 ec 08             	sub    esp,0x8
c001360b:	68 58 01 00 00       	push   0x158
c0013610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013614:	e8 02 f2 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0013619:	83 c4 10             	add    esp,0x10
c001361c:	83 c4 0c             	add    esp,0xc
c001361f:	c3                   	ret    

c0013620 <Buzzer::Buzzer(char const*)>:
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013627:	83 ec 08             	sub    esp,0x8
c001362a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001362e:	50                   	push   eax
c001362f:	e8 04 09 00 00       	call   c0013f38 <Device::Device(char const*)>
c0013634:	83 c4 10             	add    esp,0x10
c0013637:	ba 08 b6 02 c0       	mov    edx,0xc002b608
c001363c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013640:	89 10                	mov    DWORD PTR [eax],edx
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013654:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001365e:	90                   	nop
c001365f:	83 c4 0c             	add    esp,0xc
c0013662:	c3                   	ret    
c0013663:	90                   	nop

c0013664 <Buzzer::~Buzzer()>:
c0013664:	83 ec 0c             	sub    esp,0xc
c0013667:	ba 08 b6 02 c0       	mov    edx,0xc002b608
c001366c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013670:	89 10                	mov    DWORD PTR [eax],edx
c0013672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	50                   	push   eax
c001367a:	e8 83 05 00 00       	call   c0013c02 <Device::~Device()>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	90                   	nop
c0013683:	83 c4 0c             	add    esp,0xc
c0013686:	c3                   	ret    
c0013687:	90                   	nop

c0013688 <Buzzer::~Buzzer()>:
c0013688:	83 ec 0c             	sub    esp,0xc
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013692:	e8 cd ff ff ff       	call   c0013664 <Buzzer::~Buzzer()>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	83 ec 08             	sub    esp,0x8
c001369d:	68 5c 01 00 00       	push   0x15c
c00136a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a6:	e8 70 f1 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	83 c4 0c             	add    esp,0xc
c00136b1:	c3                   	ret    

c00136b2 <Buzzer::stop()>:
c00136b2:	83 ec 14             	sub    esp,0x14
c00136b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00136bb:	6a 00                	push   0x0
c00136bd:	50                   	push   eax
c00136be:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136c1:	83 c4 1c             	add    esp,0x1c
c00136c4:	c3                   	ret    

c00136c5 <beepThread(void*)>:
c00136c5:	53                   	push   ebx
c00136c6:	83 ec 08             	sub    esp,0x8
c00136c9:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00136ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136d2:	48                   	dec    eax
c00136d3:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00136d8:	75 01                	jne    c00136db <beepThread(void*)+0x16>
c00136da:	fb                   	sti    
c00136db:	50                   	push   eax
c00136dc:	50                   	push   eax
c00136dd:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136e2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136e8:	52                   	push   edx
c00136e9:	50                   	push   eax
c00136ea:	e8 7c ad 00 00       	call   c001e46b <nanoSleep(unsigned long long)>
c00136ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136f2:	e8 bb ff ff ff       	call   c00136b2 <Buzzer::stop()>
c00136f7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136ff:	83 c4 18             	add    esp,0x18
c0013702:	5b                   	pop    ebx
c0013703:	e9 5f ac 00 00       	jmp    c001e367 <blockTask(TaskState)>

c0013708 <Buzzer::beep(int, int, bool)>:
c0013708:	57                   	push   edi
c0013709:	56                   	push   esi
c001370a:	53                   	push   ebx
c001370b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001370f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013713:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013717:	52                   	push   edx
c0013718:	52                   	push   edx
c0013719:	8b 06                	mov    eax,DWORD PTR [esi]
c001371b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001371f:	56                   	push   esi
c0013720:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013723:	83 c4 10             	add    esp,0x10
c0013726:	89 f8                	mov    eax,edi
c0013728:	84 c0                	test   al,al
c001372a:	74 1f                	je     c001374b <Buzzer::beep(int, int, bool)+0x43>
c001372c:	50                   	push   eax
c001372d:	50                   	push   eax
c001372e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013734:	99                   	cdq    
c0013735:	52                   	push   edx
c0013736:	50                   	push   eax
c0013737:	e8 2f ad 00 00       	call   c001e46b <nanoSleep(unsigned long long)>
c001373c:	83 c4 10             	add    esp,0x10
c001373f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013743:	5b                   	pop    ebx
c0013744:	5e                   	pop    esi
c0013745:	5f                   	pop    edi
c0013746:	e9 67 ff ff ff       	jmp    c00136b2 <Buzzer::stop()>
c001374b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013751:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0013756:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001375e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013762:	c7 44 24 14 c5 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136c5
c001376a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001376e:	5b                   	pop    ebx
c001376f:	5e                   	pop    esi
c0013770:	5f                   	pop    edi
c0013771:	e9 ae a7 00 00       	jmp    c001df24 <Process::createThread(void (*)(void*), void*, int)>

c0013776 <User::loadClockSettings(int)>:
c0013776:	53                   	push   ebx
c0013777:	83 ec 14             	sub    esp,0x14
c001377a:	68 14 01 00 00       	push   0x114
c001377f:	e8 7e c1 ff ff       	call   c000f902 <malloc>
c0013784:	83 c4 0c             	add    esp,0xc
c0013787:	89 c3                	mov    ebx,eax
c0013789:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001378f:	68 30 b6 02 c0       	push   0xc002b630
c0013794:	50                   	push   eax
c0013795:	e8 c0 f6 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001379a:	58                   	pop    eax
c001379b:	5a                   	pop    edx
c001379c:	6a 01                	push   0x1
c001379e:	53                   	push   ebx
c001379f:	e8 1a f7 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c00137a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137a7:	e8 70 f7 ff ff       	call   c0012f1c <File::close()>
c00137ac:	83 c4 10             	add    esp,0x10
c00137af:	85 db                	test   ebx,ebx
c00137b1:	74 0f                	je     c00137c2 <User::loadClockSettings(int)+0x4c>
c00137b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137bc:	83 c4 08             	add    esp,0x8
c00137bf:	5b                   	pop    ebx
c00137c0:	ff e0                	jmp    eax
c00137c2:	83 c4 08             	add    esp,0x8
c00137c5:	5b                   	pop    ebx
c00137c6:	c3                   	ret    
c00137c7:	90                   	nop

c00137c8 <Clock::Clock(char const*)>:
c00137c8:	83 ec 0c             	sub    esp,0xc
c00137cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cf:	83 ec 08             	sub    esp,0x8
c00137d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d6:	50                   	push   eax
c00137d7:	e8 5c 07 00 00       	call   c0013f38 <Device::Device(char const*)>
c00137dc:	83 c4 10             	add    esp,0x10
c00137df:	ba 58 b6 02 c0       	mov    edx,0xc002b658
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	89 10                	mov    DWORD PTR [eax],edx
c00137ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ee:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137f8:	90                   	nop
c00137f9:	83 c4 0c             	add    esp,0xc
c00137fc:	c3                   	ret    
c00137fd:	90                   	nop

c00137fe <Clock::~Clock()>:
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	ba 58 b6 02 c0       	mov    edx,0xc002b658
c0013806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380a:	89 10                	mov    DWORD PTR [eax],edx
c001380c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	50                   	push   eax
c0013814:	e8 e9 03 00 00       	call   c0013c02 <Device::~Device()>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	90                   	nop
c001381d:	83 c4 0c             	add    esp,0xc
c0013820:	c3                   	ret    
c0013821:	90                   	nop

c0013822 <Clock::~Clock()>:
c0013822:	83 ec 0c             	sub    esp,0xc
c0013825:	83 ec 0c             	sub    esp,0xc
c0013828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382c:	e8 cd ff ff ff       	call   c00137fe <Clock::~Clock()>
c0013831:	83 c4 10             	add    esp,0x10
c0013834:	83 ec 08             	sub    esp,0x8
c0013837:	68 58 01 00 00       	push   0x158
c001383c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013840:	e8 d6 ef ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0013845:	83 c4 10             	add    esp,0x10
c0013848:	83 c4 0c             	add    esp,0xc
c001384b:	c3                   	ret    

c001384c <Clock::timeInSecondsLocal()>:
c001384c:	53                   	push   ebx
c001384d:	83 ec 14             	sub    esp,0x14
c0013850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013854:	8b 10                	mov    edx,DWORD PTR [eax]
c0013856:	50                   	push   eax
c0013857:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001385a:	0f b6 0d bc f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f3bc
c0013861:	03 0d c0 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f3c0
c0013867:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001386d:	89 cb                	mov    ebx,ecx
c001386f:	c1 fb 1f             	sar    ebx,0x1f
c0013872:	01 c8                	add    eax,ecx
c0013874:	11 da                	adc    edx,ebx
c0013876:	83 c4 10             	add    esp,0x10
c0013879:	31 c9                	xor    ecx,ecx
c001387b:	80 3d bd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3bd,0x0
c0013882:	74 05                	je     c0013889 <Clock::timeInSecondsLocal()+0x3d>
c0013884:	b9 08 07 00 00       	mov    ecx,0x708
c0013889:	31 db                	xor    ebx,ebx
c001388b:	01 c8                	add    eax,ecx
c001388d:	11 da                	adc    edx,ebx
c001388f:	83 c4 08             	add    esp,0x8
c0013892:	5b                   	pop    ebx
c0013893:	c3                   	ret    

c0013894 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013894:	57                   	push   edi
c0013895:	56                   	push   esi
c0013896:	53                   	push   ebx
c0013897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001389b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001389f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138a5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00138a8:	0f b6 05 bc f3 02 c0 	movzx  eax,BYTE PTR ds:0xc002f3bc
c00138af:	03 05 c0 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f3c0
c00138b5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138bb:	99                   	cdq    
c00138bc:	29 c6                	sub    esi,eax
c00138be:	19 d7                	sbb    edi,edx
c00138c0:	89 f0                	mov    eax,esi
c00138c2:	89 fa                	mov    edx,edi
c00138c4:	31 f6                	xor    esi,esi
c00138c6:	80 3d bd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3bd,0x0
c00138cd:	74 05                	je     c00138d4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138cf:	be 08 07 00 00       	mov    esi,0x708
c00138d4:	31 ff                	xor    edi,edi
c00138d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138da:	29 f0                	sub    eax,esi
c00138dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138e0:	19 fa                	sbb    edx,edi
c00138e2:	89 d8                	mov    eax,ebx
c00138e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138e8:	5b                   	pop    ebx
c00138e9:	5e                   	pop    esi
c00138ea:	5f                   	pop    edi
c00138eb:	ff e0                	jmp    eax

c00138ed <datetimeToSeconds(datetime_t)>:
c00138ed:	55                   	push   ebp
c00138ee:	57                   	push   edi
c00138ef:	56                   	push   esi
c00138f0:	53                   	push   ebx
c00138f1:	83 ec 14             	sub    esp,0x14
c00138f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138f8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138fc:	89 d3                	mov    ebx,edx
c00138fe:	0f b6 c6             	movzx  eax,dh
c0013901:	c1 eb 10             	shr    ebx,0x10
c0013904:	48                   	dec    eax
c0013905:	66 81 eb 6c 07       	sub    bx,0x76c
c001390a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001390e:	0f b6 f5             	movzx  esi,ch
c0013911:	89 cf                	mov    edi,ecx
c0013913:	6b f6 3c             	imul   esi,esi,0x3c
c0013916:	c1 ef 10             	shr    edi,0x10
c0013919:	0f b6 c9             	movzx  ecx,cl
c001391c:	89 f8                	mov    eax,edi
c001391e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013924:	0f b6 f8             	movzx  edi,al
c0013927:	0f b6 d2             	movzx  edx,dl
c001392a:	01 fe                	add    esi,edi
c001392c:	01 f1                	add    ecx,esi
c001392e:	0f b7 f3             	movzx  esi,bx
c0013931:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013935:	c1 f9 1f             	sar    ecx,0x1f
c0013938:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001393d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013941:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013946:	8b 0c 8d a0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4960]
c001394d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013951:	76 29                	jbe    c001397c <datetimeToSeconds(datetime_t)+0x8f>
c0013953:	f6 c3 03             	test   bl,0x3
c0013956:	75 24                	jne    c001397c <datetimeToSeconds(datetime_t)+0x8f>
c0013958:	31 d2                	xor    edx,edx
c001395a:	bf 64 00 00 00       	mov    edi,0x64
c001395f:	89 d8                	mov    eax,ebx
c0013961:	66 f7 f7             	div    di
c0013964:	66 85 d2             	test   dx,dx
c0013967:	75 12                	jne    c001397b <datetimeToSeconds(datetime_t)+0x8e>
c0013969:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001396f:	bf 90 01 00 00       	mov    edi,0x190
c0013974:	99                   	cdq    
c0013975:	f7 ff                	idiv   edi
c0013977:	85 d2                	test   edx,edx
c0013979:	75 01                	jne    c001397c <datetimeToSeconds(datetime_t)+0x8f>
c001397b:	41                   	inc    ecx
c001397c:	66 83 fb 46          	cmp    bx,0x46
c0013980:	76 45                	jbe    c00139c7 <datetimeToSeconds(datetime_t)+0xda>
c0013982:	bb 46 00 00 00       	mov    ebx,0x46
c0013987:	bf 64 00 00 00       	mov    edi,0x64
c001398c:	bd 90 01 00 00       	mov    ebp,0x190
c0013991:	b8 6d 01 00 00       	mov    eax,0x16d
c0013996:	f6 c3 03             	test   bl,0x3
c0013999:	75 23                	jne    c00139be <datetimeToSeconds(datetime_t)+0xd1>
c001399b:	89 d8                	mov    eax,ebx
c001399d:	99                   	cdq    
c001399e:	f7 ff                	idiv   edi
c00139a0:	b8 6e 01 00 00       	mov    eax,0x16e
c00139a5:	85 d2                	test   edx,edx
c00139a7:	75 15                	jne    c00139be <datetimeToSeconds(datetime_t)+0xd1>
c00139a9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00139af:	99                   	cdq    
c00139b0:	f7 fd                	idiv   ebp
c00139b2:	83 fa 01             	cmp    edx,0x1
c00139b5:	19 c0                	sbb    eax,eax
c00139b7:	f7 d0                	not    eax
c00139b9:	05 6e 01 00 00       	add    eax,0x16e
c00139be:	01 c1                	add    ecx,eax
c00139c0:	43                   	inc    ebx
c00139c1:	39 f3                	cmp    ebx,esi
c00139c3:	7c cc                	jl     c0013991 <datetimeToSeconds(datetime_t)+0xa4>
c00139c5:	eb 35                	jmp    c00139fc <datetimeToSeconds(datetime_t)+0x10f>
c00139c7:	74 33                	je     c00139fc <datetimeToSeconds(datetime_t)+0x10f>
c00139c9:	b8 45 00 00 00       	mov    eax,0x45
c00139ce:	89 c2                	mov    edx,eax
c00139d0:	83 e2 03             	and    edx,0x3
c00139d3:	39 f0                	cmp    eax,esi
c00139d5:	7e 0f                	jle    c00139e6 <datetimeToSeconds(datetime_t)+0xf9>
c00139d7:	83 fa 01             	cmp    edx,0x1
c00139da:	19 d2                	sbb    edx,edx
c00139dc:	48                   	dec    eax
c00139dd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139e4:	eb e8                	jmp    c00139ce <datetimeToSeconds(datetime_t)+0xe1>
c00139e6:	b8 6d 01 00 00       	mov    eax,0x16d
c00139eb:	85 d2                	test   edx,edx
c00139ed:	75 0b                	jne    c00139fa <datetimeToSeconds(datetime_t)+0x10d>
c00139ef:	66 83 fb 01          	cmp    bx,0x1
c00139f3:	19 c0                	sbb    eax,eax
c00139f5:	05 6e 01 00 00       	add    eax,0x16e
c00139fa:	29 c1                	sub    ecx,eax
c00139fc:	b8 80 51 01 00       	mov    eax,0x15180
c0013a01:	f7 e9                	imul   ecx
c0013a03:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013a07:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013a0b:	83 c4 14             	add    esp,0x14
c0013a0e:	5b                   	pop    ebx
c0013a0f:	5e                   	pop    esi
c0013a10:	5f                   	pop    edi
c0013a11:	5d                   	pop    ebp
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013a14:	57                   	push   edi
c0013a15:	56                   	push   esi
c0013a16:	53                   	push   ebx
c0013a17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a1d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a28:	e8 c0 fe ff ff       	call   c00138ed <datetimeToSeconds(datetime_t)>
c0013a2d:	59                   	pop    ecx
c0013a2e:	0f b6 0d bc f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f3bc
c0013a35:	5b                   	pop    ebx
c0013a36:	03 0d c0 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f3c0
c0013a3c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a42:	89 cb                	mov    ebx,ecx
c0013a44:	c1 fb 1f             	sar    ebx,0x1f
c0013a47:	29 c8                	sub    eax,ecx
c0013a49:	19 da                	sbb    edx,ebx
c0013a4b:	31 c9                	xor    ecx,ecx
c0013a4d:	80 3d bd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3bd,0x0
c0013a54:	74 05                	je     c0013a5b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a56:	b9 08 07 00 00       	mov    ecx,0x708
c0013a5b:	31 db                	xor    ebx,ebx
c0013a5d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a61:	29 c8                	sub    eax,ecx
c0013a63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a67:	19 da                	sbb    edx,ebx
c0013a69:	89 f8                	mov    eax,edi
c0013a6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a6f:	5b                   	pop    ebx
c0013a70:	5e                   	pop    esi
c0013a71:	5f                   	pop    edi
c0013a72:	ff e0                	jmp    eax

c0013a74 <secondsToDatetime(unsigned long long)>:
c0013a74:	55                   	push   ebp
c0013a75:	57                   	push   edi
c0013a76:	56                   	push   esi
c0013a77:	53                   	push   ebx
c0013a78:	83 ec 1c             	sub    esp,0x1c
c0013a7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a83:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a87:	6a 00                	push   0x0
c0013a89:	68 80 51 01 00       	push   0x15180
c0013a8e:	55                   	push   ebp
c0013a8f:	57                   	push   edi
c0013a90:	e8 3f 38 01 00       	call   c00272d4 <__udivdi3>
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aa2:	6a 00                	push   0x0
c0013aa4:	68 80 51 01 00       	push   0x15180
c0013aa9:	55                   	push   ebp
c0013aaa:	57                   	push   edi
c0013aab:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ab0:	e8 1f 39 01 00       	call   c00273d4 <__umoddi3>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	99                   	cdq    
c0013ab9:	f7 ff                	idiv   edi
c0013abb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ac0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ac3:	89 d0                	mov    eax,edx
c0013ac5:	99                   	cdq    
c0013ac6:	f7 ff                	idiv   edi
c0013ac8:	85 db                	test   ebx,ebx
c0013aca:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013acd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013ad0:	79 11                	jns    c0013ae3 <secondsToDatetime(unsigned long long)+0x6f>
c0013ad2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ad6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013adc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ae1:	eb 07                	jmp    c0013aea <secondsToDatetime(unsigned long long)+0x76>
c0013ae3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ae8:	89 d8                	mov    eax,ebx
c0013aea:	bf b4 05 00 00       	mov    edi,0x5b4
c0013aef:	99                   	cdq    
c0013af0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013af5:	f7 f9                	idiv   ecx
c0013af7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013afc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b00:	31 d2                	xor    edx,edx
c0013b02:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013b0a:	01 c3                	add    ebx,eax
c0013b0c:	89 d8                	mov    eax,ebx
c0013b0e:	f7 f1                	div    ecx
c0013b10:	31 d2                	xor    edx,edx
c0013b12:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013b15:	89 d8                	mov    eax,ebx
c0013b17:	f7 f7                	div    edi
c0013b19:	31 d2                	xor    edx,edx
c0013b1b:	29 c1                	sub    ecx,eax
c0013b1d:	89 d8                	mov    eax,ebx
c0013b1f:	f7 f5                	div    ebp
c0013b21:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b26:	29 c1                	sub    ecx,eax
c0013b28:	31 d2                	xor    edx,edx
c0013b2a:	89 c8                	mov    eax,ecx
c0013b2c:	f7 f5                	div    ebp
c0013b2e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b37:	31 d2                	xor    edx,edx
c0013b39:	89 c8                	mov    eax,ecx
c0013b3b:	f7 f5                	div    ebp
c0013b3d:	31 d2                	xor    edx,edx
c0013b3f:	01 c3                	add    ebx,eax
c0013b41:	89 c8                	mov    eax,ecx
c0013b43:	f7 f7                	div    edi
c0013b45:	bf 99 00 00 00       	mov    edi,0x99
c0013b4a:	29 c3                	sub    ebx,eax
c0013b4c:	31 d2                	xor    edx,edx
c0013b4e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b56:	29 c3                	sub    ebx,eax
c0013b58:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b5b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b5e:	bb 05 00 00 00       	mov    ebx,0x5
c0013b63:	83 c1 02             	add    ecx,0x2
c0013b66:	89 c8                	mov    eax,ecx
c0013b68:	f7 f7                	div    edi
c0013b6a:	31 d2                	xor    edx,edx
c0013b6c:	89 c7                	mov    edi,eax
c0013b6e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b74:	83 c0 02             	add    eax,0x2
c0013b77:	f7 f3                	div    ebx
c0013b79:	89 eb                	mov    ebx,ebp
c0013b7b:	29 c3                	sub    ebx,eax
c0013b7d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b83:	88 1e                	mov    BYTE PTR [esi],bl
c0013b85:	19 c0                	sbb    eax,eax
c0013b87:	31 d2                	xor    edx,edx
c0013b89:	83 e0 0c             	and    eax,0xc
c0013b8c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b90:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b98:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b9c:	83 f9 01             	cmp    ecx,0x1
c0013b9f:	0f 96 c2             	setbe  dl
c0013ba2:	41                   	inc    ecx
c0013ba3:	01 d0                	add    eax,edx
c0013ba5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013ba8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013bac:	83 c4 1c             	add    esp,0x1c
c0013baf:	89 f0                	mov    eax,esi
c0013bb1:	5b                   	pop    ebx
c0013bb2:	5e                   	pop    esi
c0013bb3:	5f                   	pop    edi
c0013bb4:	5d                   	pop    ebp
c0013bb5:	c2 04 00             	ret    0x4

c0013bb8 <Clock::timeInDatetimeLocal()>:
c0013bb8:	53                   	push   ebx
c0013bb9:	83 ec 14             	sub    esp,0x14
c0013bbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bc4:	e8 83 fc ff ff       	call   c001384c <Clock::timeInSecondsLocal()>
c0013bc9:	83 c4 0c             	add    esp,0xc
c0013bcc:	52                   	push   edx
c0013bcd:	50                   	push   eax
c0013bce:	53                   	push   ebx
c0013bcf:	e8 a0 fe ff ff       	call   c0013a74 <secondsToDatetime(unsigned long long)>
c0013bd4:	89 d8                	mov    eax,ebx
c0013bd6:	83 c4 14             	add    esp,0x14
c0013bd9:	5b                   	pop    ebx
c0013bda:	c2 04 00             	ret    0x4
c0013bdd:	90                   	nop

c0013bde <Device::hibernate()>:
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Device::wake()>:
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <Device::detect()>:
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <Device::disableLegacy()>:
c0013be4:	c3                   	ret    
c0013be5:	90                   	nop

c0013be6 <Device::powerSaving(PowerSavingLevel)>:
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <DriverlessDevice::close(int, int, void*)>:
c0013be8:	31 c0                	xor    eax,eax
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <DriverlessDevice::detect()>:
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <DriverlessDevice::open(int, int, void*)>:
c0013bee:	83 ec 18             	sub    esp,0x18
c0013bf1:	68 d0 b6 02 c0       	push   0xc002b6d0
c0013bf6:	e8 b4 67 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0013bfb:	83 c8 ff             	or     eax,0xffffffff
c0013bfe:	83 c4 1c             	add    esp,0x1c
c0013c01:	c3                   	ret    

c0013c02 <Device::~Device()>:
c0013c02:	ba 30 b7 02 c0       	mov    edx,0xc002b730
c0013c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c0b:	89 10                	mov    DWORD PTR [eax],edx
c0013c0d:	90                   	nop
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <Device::~Device()>:
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c17:	e8 e6 ff ff ff       	call   c0013c02 <Device::~Device()>
c0013c1c:	83 c4 04             	add    esp,0x4
c0013c1f:	83 ec 08             	sub    esp,0x8
c0013c22:	68 58 01 00 00       	push   0x158
c0013c27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2b:	e8 eb eb ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	83 c4 0c             	add    esp,0xc
c0013c36:	c3                   	ret    
c0013c37:	90                   	nop

c0013c38 <Device::findAndLoadDriver()>:
c0013c38:	c7 44 24 04 ee b6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b6ee
c0013c40:	e9 b6 ec ff ff       	jmp    c00128fb <Dbg::kprintf(char const*, ...)>
c0013c45:	90                   	nop

c0013c46 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c46:	57                   	push   edi
c0013c47:	b9 09 00 00 00       	mov    ecx,0x9
c0013c4c:	56                   	push   esi
c0013c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c51:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c55:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c5f:	81 c7 18 01 00 00    	add    edi,0x118
c0013c65:	fc                   	cld    
c0013c66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c68:	5e                   	pop    esi
c0013c69:	5f                   	pop    edi
c0013c6a:	c3                   	ret    
c0013c6b:	90                   	nop

c0013c6c <Device::preOpenACPI(void*, char*, char*)>:
c0013c6c:	57                   	push   edi
c0013c6d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c72:	56                   	push   esi
c0013c73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c7b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c85:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c8b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c97:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c9c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013ca2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ca6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ca8:	5e                   	pop    esi
c0013ca9:	5f                   	pop    edi
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cb0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cb5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cbc:	75 0b                	jne    c0013cc9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cc4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cc7:	eb 1e                	jmp    c0013ce7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cc9:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0013cce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cd4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cda:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cdc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ce0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ce4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ce7:	ff e0                	jmp    eax
c0013ce9:	90                   	nop

c0013cea <Device::getParent()>:
c0013cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cee:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013cf4:	c3                   	ret    
c0013cf5:	90                   	nop

c0013cf6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cfa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cff:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d06:	75 0b                	jne    c0013d13 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d0e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013d11:	eb 1e                	jmp    c0013d31 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013d13:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0013d18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d1e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d24:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d2e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d31:	ff e0                	jmp    eax
c0013d33:	90                   	nop

c0013d34 <Device::addChild(Device*)>:
c0013d34:	53                   	push   ebx
c0013d35:	83 ec 08             	sub    esp,0x8
c0013d38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d40:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d46:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d4e:	85 d2                	test   edx,edx
c0013d50:	74 04                	je     c0013d56 <Device::addChild(Device*)+0x22>
c0013d52:	89 d3                	mov    ebx,edx
c0013d54:	eb f6                	jmp    c0013d4c <Device::addChild(Device*)+0x18>
c0013d56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d59:	83 ec 0c             	sub    esp,0xc
c0013d5c:	6a 08                	push   0x8
c0013d5e:	e8 9f bb ff ff       	call   c000f902 <malloc>
c0013d63:	89 03                	mov    DWORD PTR [ebx],eax
c0013d65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d72:	83 c4 18             	add    esp,0x18
c0013d75:	5b                   	pop    ebx
c0013d76:	c3                   	ret    
c0013d77:	90                   	nop

c0013d78 <Device::removeAllChildren()>:
c0013d78:	56                   	push   esi
c0013d79:	53                   	push   ebx
c0013d7a:	52                   	push   edx
c0013d7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d7f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d88:	74 17                	je     c0013da1 <Device::removeAllChildren()+0x29>
c0013d8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d8d:	85 c0                	test   eax,eax
c0013d8f:	74 0c                	je     c0013d9d <Device::removeAllChildren()+0x25>
c0013d91:	83 ec 0c             	sub    esp,0xc
c0013d94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d96:	50                   	push   eax
c0013d97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d9f:	eb e4                	jmp    c0013d85 <Device::removeAllChildren()+0xd>
c0013da1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013da7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013db3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dba:	58                   	pop    eax
c0013dbb:	5b                   	pop    ebx
c0013dbc:	5e                   	pop    esi
c0013dbd:	c3                   	ret    

c0013dbe <Device::hibernateAll()>:
c0013dbe:	53                   	push   ebx
c0013dbf:	83 ec 14             	sub    esp,0x14
c0013dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc8:	53                   	push   ebx
c0013dc9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013dcc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd2:	83 c4 10             	add    esp,0x10
c0013dd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd8:	74 0f                	je     c0013de9 <Device::hibernateAll()+0x2b>
c0013dda:	83 ec 0c             	sub    esp,0xc
c0013ddd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013de0:	e8 d9 ff ff ff       	call   c0013dbe <Device::hibernateAll()>
c0013de5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de7:	eb e9                	jmp    c0013dd2 <Device::hibernateAll()+0x14>
c0013de9:	83 c4 08             	add    esp,0x8
c0013dec:	5b                   	pop    ebx
c0013ded:	c3                   	ret    

c0013dee <Device::wakeAll()>:
c0013dee:	53                   	push   ebx
c0013def:	83 ec 14             	sub    esp,0x14
c0013df2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df8:	53                   	push   ebx
c0013df9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dfc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e08:	74 0f                	je     c0013e19 <Device::wakeAll()+0x2b>
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e10:	e8 d9 ff ff ff       	call   c0013dee <Device::wakeAll()>
c0013e15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e17:	eb e9                	jmp    c0013e02 <Device::wakeAll()+0x14>
c0013e19:	83 c4 08             	add    esp,0x8
c0013e1c:	5b                   	pop    ebx
c0013e1d:	c3                   	ret    

c0013e1e <Device::detectAll()>:
c0013e1e:	53                   	push   ebx
c0013e1f:	83 ec 14             	sub    esp,0x14
c0013e22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e28:	53                   	push   ebx
c0013e29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e38:	74 0f                	je     c0013e49 <Device::detectAll()+0x2b>
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e40:	e8 d9 ff ff ff       	call   c0013e1e <Device::detectAll()>
c0013e45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e47:	eb e9                	jmp    c0013e32 <Device::detectAll()+0x14>
c0013e49:	83 c4 08             	add    esp,0x8
c0013e4c:	5b                   	pop    ebx
c0013e4d:	c3                   	ret    

c0013e4e <Device::disableLegacyAll()>:
c0013e4e:	53                   	push   ebx
c0013e4f:	83 ec 14             	sub    esp,0x14
c0013e52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e58:	53                   	push   ebx
c0013e59:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e5c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e68:	74 0f                	je     c0013e79 <Device::disableLegacyAll()+0x2b>
c0013e6a:	83 ec 0c             	sub    esp,0xc
c0013e6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e70:	e8 d9 ff ff ff       	call   c0013e4e <Device::disableLegacyAll()>
c0013e75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e77:	eb e9                	jmp    c0013e62 <Device::disableLegacyAll()+0x14>
c0013e79:	83 c4 08             	add    esp,0x8
c0013e7c:	5b                   	pop    ebx
c0013e7d:	c3                   	ret    

c0013e7e <Device::loadDriversForAll()>:
c0013e7e:	53                   	push   ebx
c0013e7f:	83 ec 08             	sub    esp,0x8
c0013e82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e86:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e8d:	75 0c                	jne    c0013e9b <Device::loadDriversForAll()+0x1d>
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	53                   	push   ebx
c0013e93:	e8 a0 fd ff ff       	call   c0013c38 <Device::findAndLoadDriver()>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea4:	74 12                	je     c0013eb8 <Device::loadDriversForAll()+0x3a>
c0013ea6:	83 ec 0c             	sub    esp,0xc
c0013ea9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eac:	e8 cd ff ff ff       	call   c0013e7e <Device::loadDriversForAll()>
c0013eb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb3:	83 c4 10             	add    esp,0x10
c0013eb6:	eb e9                	jmp    c0013ea1 <Device::loadDriversForAll()+0x23>
c0013eb8:	83 c4 08             	add    esp,0x8
c0013ebb:	5b                   	pop    ebx
c0013ebc:	c3                   	ret    
c0013ebd:	90                   	nop

c0013ebe <Device::closeAll()>:
c0013ebe:	53                   	push   ebx
c0013ebf:	83 ec 08             	sub    esp,0x8
c0013ec2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ec6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ec8:	6a 00                	push   0x0
c0013eca:	6a 00                	push   0x0
c0013ecc:	6a 00                	push   0x0
c0013ece:	53                   	push   ebx
c0013ecf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ed2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ede:	74 0f                	je     c0013eef <Device::closeAll()+0x31>
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee6:	e8 d3 ff ff ff       	call   c0013ebe <Device::closeAll()>
c0013eeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eed:	eb e9                	jmp    c0013ed8 <Device::closeAll()+0x1a>
c0013eef:	83 c4 08             	add    esp,0x8
c0013ef2:	5b                   	pop    ebx
c0013ef3:	c3                   	ret    

c0013ef4 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ef4:	56                   	push   esi
c0013ef5:	53                   	push   ebx
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013efd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f03:	56                   	push   esi
c0013f04:	53                   	push   ebx
c0013f05:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013f08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f14:	74 0f                	je     c0013f25 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013f16:	52                   	push   edx
c0013f17:	52                   	push   edx
c0013f18:	56                   	push   esi
c0013f19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f1c:	e8 d3 ff ff ff       	call   c0013ef4 <Device::powerSavingAll(PowerSavingLevel)>
c0013f21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f23:	eb e9                	jmp    c0013f0e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013f25:	58                   	pop    eax
c0013f26:	5b                   	pop    ebx
c0013f27:	5e                   	pop    esi
c0013f28:	c3                   	ret    
c0013f29:	90                   	nop

c0013f2a <Device::setName(char const*)>:
c0013f2a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f32:	e9 d5 c8 fe ff       	jmp    c000080c <strcpy>
c0013f37:	90                   	nop

c0013f38 <Device::Device(char const*)>:
c0013f38:	83 ec 1c             	sub    esp,0x1c
c0013f3b:	ba 30 b7 02 c0       	mov    edx,0xc002b730
c0013f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f44:	89 10                	mov    DWORD PTR [eax],edx
c0013f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f58:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f66:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f74:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f7e:	83 ec 08             	sub    esp,0x8
c0013f81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f89:	e8 9c ff ff ff       	call   c0013f2a <Device::setName(char const*)>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f99:	83 ec 0c             	sub    esp,0xc
c0013f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa0:	e8 5d b9 ff ff       	call   c000f902 <malloc>
c0013fa5:	83 c4 10             	add    esp,0x10
c0013fa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fb9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fef:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014008:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014016:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014024:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001402e:	90                   	nop
c001402f:	83 c4 1c             	add    esp,0x1c
c0014032:	c3                   	ret    
c0014033:	90                   	nop

c0014034 <Device::getName()>:
c0014034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014038:	05 d0 00 00 00       	add    eax,0xd0
c001403d:	c3                   	ret    

c001403e <DriverlessDevice::DriverlessDevice(char const*)>:
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014045:	83 ec 08             	sub    esp,0x8
c0014048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001404c:	50                   	push   eax
c001404d:	e8 e6 fe ff ff       	call   c0013f38 <Device::Device(char const*)>
c0014052:	83 c4 10             	add    esp,0x10
c0014055:	ba 5c b7 02 c0       	mov    edx,0xc002b75c
c001405a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405e:	89 10                	mov    DWORD PTR [eax],edx
c0014060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014064:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014074:	57                   	push   edi
c0014075:	56                   	push   esi
c0014076:	53                   	push   ebx
c0014077:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001407b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001407f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014083:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014089:	75 0c                	jne    c0014097 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001408b:	52                   	push   edx
c001408c:	52                   	push   edx
c001408d:	53                   	push   ebx
c001408e:	56                   	push   esi
c001408f:	e8 92 51 01 00       	call   c0029226 <LinkedList<Device>::addElement(Device*)>
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001409d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140a0:	74 12                	je     c00140b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00140a2:	50                   	push   eax
c00140a3:	57                   	push   edi
c00140a4:	56                   	push   esi
c00140a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140a8:	e8 c7 ff ff ff       	call   c0014074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	eb e9                	jmp    c001409d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00140b4:	5b                   	pop    ebx
c00140b5:	5e                   	pop    esi
c00140b6:	5f                   	pop    edi
c00140b7:	c3                   	ret    

c00140b8 <getDevicesOfType(DeviceType)>:
c00140b8:	53                   	push   ebx
c00140b9:	83 ec 14             	sub    esp,0x14
c00140bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140c0:	53                   	push   ebx
c00140c1:	e8 3c 52 01 00       	call   c0029302 <LinkedList<Device>::LinkedList()>
c00140c6:	83 c4 0c             	add    esp,0xc
c00140c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140cd:	53                   	push   ebx
c00140ce:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c00140d4:	e8 9b ff ff ff       	call   c0014074 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140d9:	89 d8                	mov    eax,ebx
c00140db:	83 c4 18             	add    esp,0x18
c00140de:	5b                   	pop    ebx
c00140df:	c2 04 00             	ret    0x4

c00140e2 <HardDiskController::HardDiskController(char const*)>:
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e9:	83 ec 08             	sub    esp,0x8
c00140ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f0:	50                   	push   eax
c00140f1:	e8 42 fe ff ff       	call   c0013f38 <Device::Device(char const*)>
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	89 10                	mov    DWORD PTR [eax],edx
c0014104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014108:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014112:	90                   	nop
c0014113:	83 c4 0c             	add    esp,0xc
c0014116:	c3                   	ret    
c0014117:	90                   	nop

c0014118 <HardDiskController::~HardDiskController()>:
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c0014120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014124:	89 10                	mov    DWORD PTR [eax],edx
c0014126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	50                   	push   eax
c001412e:	e8 cf fa ff ff       	call   c0013c02 <Device::~Device()>
c0014133:	83 c4 10             	add    esp,0x10
c0014136:	90                   	nop
c0014137:	83 c4 0c             	add    esp,0xc
c001413a:	c3                   	ret    
c001413b:	90                   	nop

c001413c <HardDiskController::~HardDiskController()>:
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014146:	e8 cd ff ff ff       	call   c0014118 <HardDiskController::~HardDiskController()>
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	83 ec 08             	sub    esp,0x8
c0014151:	68 58 01 00 00       	push   0x158
c0014156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001415a:	e8 bc e6 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	83 c4 0c             	add    esp,0xc
c0014165:	c3                   	ret    

c0014166 <PhysicalDisk::eject()>:
c0014166:	83 ec 18             	sub    esp,0x18
c0014169:	68 ac b7 02 c0       	push   0xc002b7ac
c001416e:	e8 88 e7 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014173:	83 c8 ff             	or     eax,0xffffffff
c0014176:	83 c4 1c             	add    esp,0x1c
c0014179:	c3                   	ret    

c001417a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014181:	83 ec 08             	sub    esp,0x8
c0014184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014188:	50                   	push   eax
c0014189:	e8 aa fd ff ff       	call   c0013f38 <Device::Device(char const*)>
c001418e:	83 c4 10             	add    esp,0x10
c0014191:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0014196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419a:	89 10                	mov    DWORD PTR [eax],edx
c001419c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00141a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00141b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00141c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141dc:	90                   	nop
c00141dd:	83 c4 0c             	add    esp,0xc
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <PhysicalDisk::startCache()>:
c00141e2:	56                   	push   esi
c00141e3:	53                   	push   ebx
c00141e4:	83 ec 10             	sub    esp,0x10
c00141e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141eb:	6a 44                	push   0x44
c00141ed:	e8 10 b7 ff ff       	call   c000f902 <malloc>
c00141f2:	89 c6                	mov    esi,eax
c00141f4:	58                   	pop    eax
c00141f5:	5a                   	pop    edx
c00141f6:	53                   	push   ebx
c00141f7:	56                   	push   esi
c00141f8:	e8 a9 28 00 00       	call   c0016aa6 <VCache::VCache(PhysicalDisk*)>
c00141fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014203:	83 c4 14             	add    esp,0x14
c0014206:	5b                   	pop    ebx
c0014207:	5e                   	pop    esi
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <PhysicalDisk::~PhysicalDisk()>:
c001420a:	83 ec 0c             	sub    esp,0xc
c001420d:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0014212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014216:	89 10                	mov    DWORD PTR [eax],edx
c0014218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	50                   	push   eax
c0014220:	e8 dd f9 ff ff       	call   c0013c02 <Device::~Device()>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	90                   	nop
c0014229:	83 c4 0c             	add    esp,0xc
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <PhysicalDisk::~PhysicalDisk()>:
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	83 ec 0c             	sub    esp,0xc
c0014234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014238:	e8 cd ff ff ff       	call   c001420a <PhysicalDisk::~PhysicalDisk()>
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	83 ec 08             	sub    esp,0x8
c0014243:	68 6c 01 00 00       	push   0x16c
c0014248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424c:	e8 ca e5 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	83 c4 0c             	add    esp,0xc
c0014257:	c3                   	ret    

c0014258 <FPU::FPU(char const*)>:
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425f:	83 ec 08             	sub    esp,0x8
c0014262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014266:	50                   	push   eax
c0014267:	e8 cc fc ff ff       	call   c0013f38 <Device::Device(char const*)>
c001426c:	83 c4 10             	add    esp,0x10
c001426f:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0014274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014278:	89 10                	mov    DWORD PTR [eax],edx
c001427a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001427e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014288:	90                   	nop
c0014289:	83 c4 0c             	add    esp,0xc
c001428c:	c3                   	ret    
c001428d:	90                   	nop

c001428e <FPU::~FPU()>:
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c0014296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001429a:	89 10                	mov    DWORD PTR [eax],edx
c001429c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142a0:	83 ec 0c             	sub    esp,0xc
c00142a3:	50                   	push   eax
c00142a4:	e8 59 f9 ff ff       	call   c0013c02 <Device::~Device()>
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	90                   	nop
c00142ad:	83 c4 0c             	add    esp,0xc
c00142b0:	c3                   	ret    
c00142b1:	90                   	nop

c00142b2 <FPU::~FPU()>:
c00142b2:	83 ec 0c             	sub    esp,0xc
c00142b5:	83 ec 0c             	sub    esp,0xc
c00142b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142bc:	e8 cd ff ff ff       	call   c001428e <FPU::~FPU()>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	83 ec 08             	sub    esp,0x8
c00142c7:	68 58 01 00 00       	push   0x158
c00142cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d0:	e8 46 e5 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c00142d5:	83 c4 10             	add    esp,0x10
c00142d8:	83 c4 0c             	add    esp,0xc
c00142db:	c3                   	ret    

c00142dc <setupFPU()>:
c00142dc:	53                   	push   ebx
c00142dd:	83 ec 08             	sub    esp,0x8
c00142e0:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c00142e6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142ed:	74 19                	je     c0014308 <setupFPU()+0x2c>
c00142ef:	83 ec 0c             	sub    esp,0xc
c00142f2:	68 58 01 00 00       	push   0x158
c00142f7:	e8 06 b6 ff ff       	call   c000f902 <malloc>
c00142fc:	89 c3                	mov    ebx,eax
c00142fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014301:	e8 52 1b 01 00       	call   c0025e58 <AVX::AVX()>
c0014306:	eb 5b                	jmp    c0014363 <setupFPU()+0x87>
c0014308:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001430e:	84 c0                	test   al,al
c0014310:	79 19                	jns    c001432b <setupFPU()+0x4f>
c0014312:	83 ec 0c             	sub    esp,0xc
c0014315:	68 58 01 00 00       	push   0x158
c001431a:	e8 e3 b5 ff ff       	call   c000f902 <malloc>
c001431f:	89 c3                	mov    ebx,eax
c0014321:	89 04 24             	mov    DWORD PTR [esp],eax
c0014324:	e8 55 1c 01 00       	call   c0025f7e <SSE::SSE()>
c0014329:	eb 38                	jmp    c0014363 <setupFPU()+0x87>
c001432b:	a8 20                	test   al,0x20
c001432d:	74 19                	je     c0014348 <setupFPU()+0x6c>
c001432f:	83 ec 0c             	sub    esp,0xc
c0014332:	68 58 01 00 00       	push   0x158
c0014337:	e8 c6 b5 ff ff       	call   c000f902 <malloc>
c001433c:	89 c3                	mov    ebx,eax
c001433e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014341:	e8 a2 1b 01 00       	call   c0025ee8 <MMX::MMX()>
c0014346:	eb 1b                	jmp    c0014363 <setupFPU()+0x87>
c0014348:	a8 10                	test   al,0x10
c001434a:	74 1c                	je     c0014368 <setupFPU()+0x8c>
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	68 58 01 00 00       	push   0x158
c0014354:	e8 a9 b5 ff ff       	call   c000f902 <malloc>
c0014359:	89 c3                	mov    ebx,eax
c001435b:	89 04 24             	mov    DWORD PTR [esp],eax
c001435e:	e8 a9 1c 01 00       	call   c002600c <x87::x87()>
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	eb 24                	jmp    c001438c <setupFPU()+0xb0>
c0014368:	83 e0 ef             	and    eax,0xffffffef
c001436b:	83 ec 0c             	sub    esp,0xc
c001436e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014374:	68 0c b8 02 c0       	push   0xc002b80c
c0014379:	e8 7d e5 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001437e:	0f 20 c0             	mov    eax,cr0
c0014381:	83 c8 04             	or     eax,0x4
c0014384:	0f 22 c0             	mov    cr0,eax
c0014387:	31 db                	xor    ebx,ebx
c0014389:	83 c4 10             	add    esp,0x10
c001438c:	89 d8                	mov    eax,ebx
c001438e:	83 c4 08             	add    esp,0x8
c0014391:	5b                   	pop    ebx
c0014392:	c3                   	ret    
c0014393:	90                   	nop

c0014394 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001439c:	c1 e0 04             	shl    eax,0x4
c001439f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00143a3:	8d 50 10             	lea    edx,[eax+0x10]
c00143a6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00143ac:	74 08                	je     c00143b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00143ae:	83 c0 04             	add    eax,0x4
c00143b1:	39 d0                	cmp    eax,edx
c00143b3:	75 f1                	jne    c00143a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00143b5:	c3                   	ret    
c00143b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143c0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143ca:	eb e2                	jmp    c00143ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143cc:	57                   	push   edi
c00143cd:	31 c0                	xor    eax,eax
c00143cf:	56                   	push   esi
c00143d0:	53                   	push   ebx
c00143d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143dd:	89 da                	mov    edx,ebx
c00143df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143e3:	c1 e2 04             	shl    edx,0x4
c00143e6:	01 ca                	add    edx,ecx
c00143e8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143f0:	74 16                	je     c0014408 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143f2:	40                   	inc    eax
c00143f3:	83 f8 04             	cmp    eax,0x4
c00143f6:	75 f0                	jne    c00143e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143f8:	c7 44 24 10 50 b8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b850
c0014400:	5b                   	pop    ebx
c0014401:	5e                   	pop    esi
c0014402:	5f                   	pop    edi
c0014403:	e9 a7 5f 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c0014408:	8d 04 98             	lea    eax,[eax+ebx*4]
c001440b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001440e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014414:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001441a:	5b                   	pop    ebx
c001441b:	5e                   	pop    esi
c001441c:	5f                   	pop    edi
c001441d:	c3                   	ret    

c001441e <doubleFault(regs*, void*)>:
c001441e:	55                   	push   ebp
c001441f:	89 e5                	mov    ebp,esp
c0014421:	83 ec 08             	sub    esp,0x8
c0014424:	83 ec 0c             	sub    esp,0xc
c0014427:	68 8b b8 02 c0       	push   0xc002b88b
c001442c:	e8 7e 5f 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	90                   	nop
c0014435:	c9                   	leave  
c0014436:	c3                   	ret    
c0014437:	90                   	nop

c0014438 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014438:	56                   	push   esi
c0014439:	53                   	push   ebx
c001443a:	50                   	push   eax
c001443b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001443f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014443:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014448:	75 35                	jne    c001447f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001444a:	8d 43 20             	lea    eax,[ebx+0x20]
c001444d:	31 d2                	xor    edx,edx
c001444f:	89 c1                	mov    ecx,eax
c0014451:	c1 e1 04             	shl    ecx,0x4
c0014454:	01 f1                	add    ecx,esi
c0014456:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001445e:	74 3e                	je     c001449e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014460:	42                   	inc    edx
c0014461:	83 fa 04             	cmp    edx,0x4
c0014464:	75 f0                	jne    c0014456 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	68 d0 b8 02 c0       	push   0xc002b8d0
c001446e:	e8 3c 5f 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001447b:	5a                   	pop    edx
c001447c:	5b                   	pop    ebx
c001447d:	5e                   	pop    esi
c001447e:	c3                   	ret    
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	56                   	push   esi
c0014483:	e8 ac fb ff ff       	call   c0014034 <Device::getName()>
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001448e:	75 ba                	jne    c001444a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014490:	83 fb 0f             	cmp    ebx,0xf
c0014493:	7f 29                	jg     c00144be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014495:	0f b6 9b a0 e4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1b60]
c001449c:	eb ac                	jmp    c001444a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001449e:	8d 04 82             	lea    eax,[edx+eax*4]
c00144a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00144a5:	8d 04 86             	lea    eax,[esi+eax*4]
c00144a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00144ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144b2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00144b8:	89 d8                	mov    eax,ebx
c00144ba:	5a                   	pop    edx
c00144bb:	5b                   	pop    ebx
c00144bc:	5e                   	pop    esi
c00144bd:	c3                   	ret    
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	68 98 b8 02 c0       	push   0xc002b898
c00144c6:	e8 e4 5e 00 00       	call   c001a3af <Krnl::panic(char const*)>
c00144cb:	83 c4 10             	add    esp,0x10
c00144ce:	e9 77 ff ff ff       	jmp    c001444a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144d3:	90                   	nop

c00144d4 <InterruptController::clearAllHandlers(int, bool)>:
c00144d4:	56                   	push   esi
c00144d5:	53                   	push   ebx
c00144d6:	52                   	push   edx
c00144d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144df:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144e4:	75 61                	jne    c0014547 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144e6:	8d 46 20             	lea    eax,[esi+0x20]
c00144e9:	c1 e6 04             	shl    esi,0x4
c00144ec:	c1 e0 04             	shl    eax,0x4
c00144ef:	01 de                	add    esi,ebx
c00144f1:	01 d8                	add    eax,ebx
c00144f3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144fd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014507:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014511:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001451b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014525:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001452f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014539:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014543:	58                   	pop    eax
c0014544:	5b                   	pop    ebx
c0014545:	5e                   	pop    esi
c0014546:	c3                   	ret    
c0014547:	83 ec 0c             	sub    esp,0xc
c001454a:	53                   	push   ebx
c001454b:	e8 e4 fa ff ff       	call   c0014034 <Device::getName()>
c0014550:	83 c4 10             	add    esp,0x10
c0014553:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014556:	75 8e                	jne    c00144e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014558:	83 fe 0f             	cmp    esi,0xf
c001455b:	7f 09                	jg     c0014566 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001455d:	0f b6 b6 a0 e4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1b60]
c0014564:	eb 80                	jmp    c00144e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	68 0c b9 02 c0       	push   0xc002b90c
c001456e:	e8 3c 5e 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	e9 6b ff ff ff       	jmp    c00144e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001457b:	90                   	nop

c001457c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001457c:	56                   	push   esi
c001457d:	53                   	push   ebx
c001457e:	52                   	push   edx
c001457f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014583:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014587:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001458c:	75 3a                	jne    c00145c8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001458e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014592:	8d 50 20             	lea    edx,[eax+0x20]
c0014595:	c1 e2 04             	shl    edx,0x4
c0014598:	8d 04 16             	lea    eax,[esi+edx*1]
c001459b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001459f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00145a5:	74 0b                	je     c00145b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00145a7:	83 c0 04             	add    eax,0x4
c00145aa:	39 d0                	cmp    eax,edx
c00145ac:	75 f1                	jne    c001459f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00145ae:	58                   	pop    eax
c00145af:	5b                   	pop    ebx
c00145b0:	5e                   	pop    esi
c00145b1:	c3                   	ret    
c00145b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145c6:	eb df                	jmp    c00145a7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00145c8:	83 ec 0c             	sub    esp,0xc
c00145cb:	56                   	push   esi
c00145cc:	e8 63 fa ff ff       	call   c0014034 <Device::getName()>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145d7:	75 b5                	jne    c001458e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145d9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145de:	7f 11                	jg     c00145f1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145e4:	0f b6 80 a0 e4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1b60]
c00145eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145ef:	eb 9d                	jmp    c001458e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	68 0c b9 02 c0       	push   0xc002b90c
c00145f9:	e8 b1 5d 00 00       	call   c001a3af <Krnl::panic(char const*)>
c00145fe:	83 c4 10             	add    esp,0x10
c0014601:	eb 8b                	jmp    c001458e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014603 <nmiHandler(regs*, void*)>:
c0014603:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014608:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001460c:	e9 3b aa ff ff       	jmp    c000f04c <Computer::handleNMI()>

c0014611 <int_handler>:
c0014611:	55                   	push   ebp
c0014612:	57                   	push   edi
c0014613:	56                   	push   esi
c0014614:	53                   	push   ebx
c0014615:	83 ec 0c             	sub    esp,0xc
c0014618:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001461c:	80 3d 84 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d84,0x0
c0014623:	74 0b                	je     c0014630 <int_handler+0x1f>
c0014625:	fa                   	cli    
c0014626:	f4                   	hlt    
c0014627:	80 3d 84 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031d84,0x0
c001462e:	75 f5                	jne    c0014625 <int_handler+0x14>
c0014630:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014635:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014638:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001463e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014644:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014647:	83 f8 17             	cmp    eax,0x17
c001464a:	77 13                	ja     c001465f <int_handler+0x4e>
c001464c:	83 ec 08             	sub    esp,0x8
c001464f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014651:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014654:	0f b6 c0             	movzx  eax,al
c0014657:	50                   	push   eax
c0014658:	57                   	push   edi
c0014659:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001465c:	83 c4 10             	add    esp,0x10
c001465f:	83 c3 15             	add    ebx,0x15
c0014662:	c1 e3 04             	shl    ebx,0x4
c0014665:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014669:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014670:	31 db                	xor    ebx,ebx
c0014672:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014676:	85 c0                	test   eax,eax
c0014678:	74 13                	je     c001468d <int_handler+0x7c>
c001467a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001467d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014681:	74 1c                	je     c001469f <int_handler+0x8e>
c0014683:	83 ec 08             	sub    esp,0x8
c0014686:	52                   	push   edx
c0014687:	56                   	push   esi
c0014688:	ff d0                	call   eax
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	43                   	inc    ebx
c001468e:	83 fb 04             	cmp    ebx,0x4
c0014691:	75 df                	jne    c0014672 <int_handler+0x61>
c0014693:	83 c4 0c             	add    esp,0xc
c0014696:	31 c0                	xor    eax,eax
c0014698:	5b                   	pop    ebx
c0014699:	31 d2                	xor    edx,edx
c001469b:	5e                   	pop    esi
c001469c:	5f                   	pop    edi
c001469d:	5d                   	pop    ebp
c001469e:	c3                   	ret    
c001469f:	83 ec 08             	sub    esp,0x8
c00146a2:	52                   	push   edx
c00146a3:	56                   	push   esi
c00146a4:	ff d0                	call   eax
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	83 c4 0c             	add    esp,0xc
c00146ac:	5b                   	pop    ebx
c00146ad:	5e                   	pop    esi
c00146ae:	5f                   	pop    edi
c00146af:	5d                   	pop    ebp
c00146b0:	c3                   	ret    
c00146b1:	90                   	nop

c00146b2 <InterruptController::InterruptController(char const*)>:
c00146b2:	83 ec 1c             	sub    esp,0x1c
c00146b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b9:	83 ec 08             	sub    esp,0x8
c00146bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146c0:	50                   	push   eax
c00146c1:	e8 72 f8 ff ff       	call   c0013f38 <Device::Device(char const*)>
c00146c6:	83 c4 10             	add    esp,0x10
c00146c9:	ba cc bb 02 c0       	mov    edx,0xc002bbcc
c00146ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d2:	89 10                	mov    DWORD PTR [eax],edx
c00146d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146ea:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146f2:	7f 5e                	jg     c0014752 <InterruptController::InterruptController(char const*)+0xa0>
c00146f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146fc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014701:	7f 49                	jg     c001474c <InterruptController::InterruptController(char const*)+0x9a>
c0014703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014707:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001470b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014716:	01 ca                	add    edx,ecx
c0014718:	83 c2 54             	add    edx,0x54
c001471b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001472b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014736:	01 ca                	add    edx,ecx
c0014738:	81 c2 54 04 00 00    	add    edx,0x454
c001473e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014746:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001474a:	eb b0                	jmp    c00146fc <InterruptController::InterruptController(char const*)+0x4a>
c001474c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014750:	eb 98                	jmp    c00146ea <InterruptController::InterruptController(char const*)+0x38>
c0014752:	90                   	nop
c0014753:	83 c4 1c             	add    esp,0x1c
c0014756:	c3                   	ret    
c0014757:	90                   	nop

c0014758 <InterruptController::~InterruptController()>:
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	ba cc bb 02 c0       	mov    edx,0xc002bbcc
c0014760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014764:	89 10                	mov    DWORD PTR [eax],edx
c0014766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	50                   	push   eax
c001476e:	e8 8f f4 ff ff       	call   c0013c02 <Device::~Device()>
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	90                   	nop
c0014777:	83 c4 0c             	add    esp,0xc
c001477a:	c3                   	ret    
c001477b:	90                   	nop

c001477c <InterruptController::~InterruptController()>:
c001477c:	83 ec 0c             	sub    esp,0xc
c001477f:	83 ec 0c             	sub    esp,0xc
c0014782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014786:	e8 cd ff ff ff       	call   c0014758 <InterruptController::~InterruptController()>
c001478b:	83 c4 10             	add    esp,0x10
c001478e:	83 ec 08             	sub    esp,0x8
c0014791:	68 58 21 00 00       	push   0x2158
c0014796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479a:	e8 7c e0 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c001479f:	83 c4 10             	add    esp,0x10
c00147a2:	83 c4 0c             	add    esp,0xc
c00147a5:	c3                   	ret    

c00147a6 <displayDebugInfo(regs*)>:
c00147a6:	55                   	push   ebp
c00147a7:	57                   	push   edi
c00147a8:	56                   	push   esi
c00147a9:	53                   	push   ebx
c00147aa:	83 ec 24             	sub    esp,0x24
c00147ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00147b1:	0f 20 c2             	mov    edx,cr0
c00147b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00147b8:	0f 20 d7             	mov    edi,cr2
c00147bb:	0f 20 de             	mov    esi,cr3
c00147be:	0f 20 e5             	mov    ebp,cr4
c00147c1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00147c4:	68 46 b9 02 c0       	push   0xc002b946
c00147c9:	e8 2d e1 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00147ce:	59                   	pop    ecx
c00147cf:	58                   	pop    eax
c00147d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147d3:	68 51 b9 02 c0       	push   0xc002b951
c00147d8:	e8 1e e1 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00147dd:	58                   	pop    eax
c00147de:	5a                   	pop    edx
c00147df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147e2:	68 5c b9 02 c0       	push   0xc002b95c
c00147e7:	e8 0f e1 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00147ec:	59                   	pop    ecx
c00147ed:	58                   	pop    eax
c00147ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147f1:	68 67 b9 02 c0       	push   0xc002b967
c00147f6:	e8 00 e1 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00147fb:	58                   	pop    eax
c00147fc:	5a                   	pop    edx
c00147fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014800:	68 72 b9 02 c0       	push   0xc002b972
c0014805:	e8 f1 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001480a:	59                   	pop    ecx
c001480b:	58                   	pop    eax
c001480c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001480f:	68 7d b9 02 c0       	push   0xc002b97d
c0014814:	e8 e2 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014819:	58                   	pop    eax
c001481a:	5a                   	pop    edx
c001481b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001481e:	68 88 b9 02 c0       	push   0xc002b988
c0014823:	e8 d3 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014828:	59                   	pop    ecx
c0014829:	58                   	pop    eax
c001482a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001482d:	68 93 b9 02 c0       	push   0xc002b993
c0014832:	e8 c4 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014837:	58                   	pop    eax
c0014838:	5a                   	pop    edx
c0014839:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001483c:	68 9e b9 02 c0       	push   0xc002b99e
c0014841:	e8 b5 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014846:	59                   	pop    ecx
c0014847:	58                   	pop    eax
c0014848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001484b:	68 ad b9 02 c0       	push   0xc002b9ad
c0014850:	e8 a6 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014855:	58                   	pop    eax
c0014856:	5a                   	pop    edx
c0014857:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001485a:	68 b8 b9 02 c0       	push   0xc002b9b8
c001485f:	e8 97 e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014864:	59                   	pop    ecx
c0014865:	58                   	pop    eax
c0014866:	57                   	push   edi
c0014867:	68 c3 b9 02 c0       	push   0xc002b9c3
c001486c:	e8 8a e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014871:	58                   	pop    eax
c0014872:	5a                   	pop    edx
c0014873:	56                   	push   esi
c0014874:	68 ce b9 02 c0       	push   0xc002b9ce
c0014879:	e8 7d e0 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001487e:	59                   	pop    ecx
c001487f:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014884:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488a:	e8 86 bd ff ff       	call   c0010615 <setActiveTerminal(VgaText*)>
c001488f:	58                   	pop    eax
c0014890:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014893:	5a                   	pop    edx
c0014894:	c1 e0 05             	shl    eax,0x5
c0014897:	05 00 e2 02 c0       	add    eax,0xc002e200
c001489c:	50                   	push   eax
c001489d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00148a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a8:	e8 75 c2 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00148ad:	59                   	pop    ecx
c00148ae:	58                   	pop    eax
c00148af:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00148b4:	68 d9 b9 02 c0       	push   0xc002b9d9
c00148b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bf:	e8 5e c2 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00148c4:	58                   	pop    eax
c00148c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ca:	5a                   	pop    edx
c00148cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148ce:	83 c0 0c             	add    eax,0xc
c00148d1:	50                   	push   eax
c00148d2:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00148d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dd:	e8 40 c2 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00148e2:	59                   	pop    ecx
c00148e3:	58                   	pop    eax
c00148e4:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00148e9:	68 e2 b9 02 c0       	push   0xc002b9e2
c00148ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f4:	e8 29 c2 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00148f9:	58                   	pop    eax
c00148fa:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00148ff:	5a                   	pop    edx
c0014900:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014903:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014909:	e8 ce c1 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001490e:	59                   	pop    ecx
c001490f:	58                   	pop    eax
c0014910:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014915:	68 ea b9 02 c0       	push   0xc002b9ea
c001491a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014920:	e8 fd c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014925:	58                   	pop    eax
c0014926:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001492b:	5a                   	pop    edx
c001492c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001492f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014935:	e8 a2 c1 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001493a:	59                   	pop    ecx
c001493b:	58                   	pop    eax
c001493c:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014941:	68 f2 b9 02 c0       	push   0xc002b9f2
c0014946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494c:	e8 d1 c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014951:	58                   	pop    eax
c0014952:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014957:	5a                   	pop    edx
c0014958:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001495b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014961:	e8 76 c1 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014966:	59                   	pop    ecx
c0014967:	58                   	pop    eax
c0014968:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001496d:	68 fa b9 02 c0       	push   0xc002b9fa
c0014972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014978:	e8 a5 c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001497d:	58                   	pop    eax
c001497e:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014983:	5a                   	pop    edx
c0014984:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014987:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498d:	e8 4a c1 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014992:	59                   	pop    ecx
c0014993:	58                   	pop    eax
c0014994:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014999:	68 02 ba 02 c0       	push   0xc002ba02
c001499e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a4:	e8 79 c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00149a9:	58                   	pop    eax
c00149aa:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00149af:	5a                   	pop    edx
c00149b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00149b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b9:	e8 1e c1 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c00149be:	59                   	pop    ecx
c00149bf:	58                   	pop    eax
c00149c0:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00149c5:	68 0a ba 02 c0       	push   0xc002ba0a
c00149ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d0:	e8 4d c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c00149d5:	58                   	pop    eax
c00149d6:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00149db:	5a                   	pop    edx
c00149dc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e5:	e8 f2 c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c00149ea:	59                   	pop    ecx
c00149eb:	58                   	pop    eax
c00149ec:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c00149f1:	68 12 ba 02 c0       	push   0xc002ba12
c00149f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fc:	e8 21 c1 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014a01:	58                   	pop    eax
c0014a02:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a07:	5a                   	pop    edx
c0014a08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a0c:	52                   	push   edx
c0014a0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a13:	e8 c4 c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014a18:	59                   	pop    ecx
c0014a19:	58                   	pop    eax
c0014a1a:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a1f:	68 1b ba 02 c0       	push   0xc002ba1b
c0014a24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2a:	e8 f3 c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014a2f:	58                   	pop    eax
c0014a30:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a35:	5a                   	pop    edx
c0014a36:	57                   	push   edi
c0014a37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3d:	e8 9a c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014a42:	59                   	pop    ecx
c0014a43:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a48:	5f                   	pop    edi
c0014a49:	68 23 ba 02 c0       	push   0xc002ba23
c0014a4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a54:	e8 c9 c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014a59:	58                   	pop    eax
c0014a5a:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a5f:	5a                   	pop    edx
c0014a60:	56                   	push   esi
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 70 c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014a6c:	59                   	pop    ecx
c0014a6d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a72:	5e                   	pop    esi
c0014a73:	68 2b ba 02 c0       	push   0xc002ba2b
c0014a78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7e:	e8 9f c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014a83:	5f                   	pop    edi
c0014a84:	58                   	pop    eax
c0014a85:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a8a:	55                   	push   ebp
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 46 c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014a96:	58                   	pop    eax
c0014a97:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014a9c:	5a                   	pop    edx
c0014a9d:	68 33 ba 02 c0       	push   0xc002ba33
c0014aa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa8:	e8 75 c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014aad:	0f 21 c0             	mov    eax,db0
c0014ab0:	59                   	pop    ecx
c0014ab1:	5e                   	pop    esi
c0014ab2:	50                   	push   eax
c0014ab3:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014ab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abe:	e8 19 c0 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014ac3:	5f                   	pop    edi
c0014ac4:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014ac9:	5d                   	pop    ebp
c0014aca:	68 3c ba 02 c0       	push   0xc002ba3c
c0014acf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad5:	e8 48 c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014ada:	0f 21 c8             	mov    eax,db1
c0014add:	5a                   	pop    edx
c0014ade:	59                   	pop    ecx
c0014adf:	50                   	push   eax
c0014ae0:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014ae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aeb:	e8 ec bf ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014af0:	5e                   	pop    esi
c0014af1:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014af6:	5f                   	pop    edi
c0014af7:	68 44 ba 02 c0       	push   0xc002ba44
c0014afc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b02:	e8 1b c0 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014b07:	0f 21 d0             	mov    eax,db2
c0014b0a:	5d                   	pop    ebp
c0014b0b:	5a                   	pop    edx
c0014b0c:	50                   	push   eax
c0014b0d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b18:	e8 bf bf ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014b1d:	59                   	pop    ecx
c0014b1e:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b23:	5e                   	pop    esi
c0014b24:	68 4c ba 02 c0       	push   0xc002ba4c
c0014b29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2f:	e8 ee bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014b34:	0f 21 d8             	mov    eax,db3
c0014b37:	5f                   	pop    edi
c0014b38:	5d                   	pop    ebp
c0014b39:	50                   	push   eax
c0014b3a:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b45:	e8 92 bf ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014b4a:	58                   	pop    eax
c0014b4b:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b50:	5a                   	pop    edx
c0014b51:	68 54 ba 02 c0       	push   0xc002ba54
c0014b56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5c:	e8 c1 bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014b61:	0f 21 f0             	mov    eax,db6
c0014b64:	59                   	pop    ecx
c0014b65:	5e                   	pop    esi
c0014b66:	50                   	push   eax
c0014b67:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b72:	e8 65 bf ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014b77:	5f                   	pop    edi
c0014b78:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b7d:	5d                   	pop    ebp
c0014b7e:	68 5c ba 02 c0       	push   0xc002ba5c
c0014b83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b89:	e8 94 bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014b8e:	0f 21 f8             	mov    eax,db7
c0014b91:	5a                   	pop    edx
c0014b92:	59                   	pop    ecx
c0014b93:	50                   	push   eax
c0014b94:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 38 bf ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014ba4:	5e                   	pop    esi
c0014ba5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ba8:	e8 8b 8b 00 00       	call   c001d738 <Thr::getDriverNameFromAddress(unsigned long)>
c0014bad:	83 c4 10             	add    esp,0x10
c0014bb0:	85 c0                	test   eax,eax
c0014bb2:	74 7d                	je     c0014c31 <displayDebugInfo(regs*)+0x48b>
c0014bb4:	89 c6                	mov    esi,eax
c0014bb6:	50                   	push   eax
c0014bb7:	50                   	push   eax
c0014bb8:	56                   	push   esi
c0014bb9:	68 64 ba 02 c0       	push   0xc002ba64
c0014bbe:	e8 38 dd ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014bc3:	5a                   	pop    edx
c0014bc4:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014bc9:	59                   	pop    ecx
c0014bca:	68 72 ba 02 c0       	push   0xc002ba72
c0014bcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd5:	e8 48 bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014bda:	5f                   	pop    edi
c0014bdb:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014be0:	5d                   	pop    ebp
c0014be1:	56                   	push   esi
c0014be2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be8:	e8 35 bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014bed:	58                   	pop    eax
c0014bee:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014bf3:	5a                   	pop    edx
c0014bf4:	68 7e ba 02 c0       	push   0xc002ba7e
c0014bf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bff:	e8 1e bf ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c0014c04:	59                   	pop    ecx
c0014c05:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0014c0a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014c10:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c13:	e8 57 8b 00 00       	call   c001d76f <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014c18:	5b                   	pop    ebx
c0014c19:	5d                   	pop    ebp
c0014c1a:	50                   	push   eax
c0014c1b:	57                   	push   edi
c0014c1c:	e8 bb be ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c0014c21:	58                   	pop    eax
c0014c22:	5a                   	pop    edx
c0014c23:	56                   	push   esi
c0014c24:	68 8a ba 02 c0       	push   0xc002ba8a
c0014c29:	e8 cd dc ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014c2e:	83 c4 10             	add    esp,0x10
c0014c31:	fa                   	cli    
c0014c32:	f4                   	hlt    
c0014c33:	eb fe                	jmp    c0014c33 <displayDebugInfo(regs*)+0x48d>

c0014c35 <x87EmulHandler(regs*, void*)>:
c0014c35:	83 ec 0c             	sub    esp,0xc
c0014c38:	0f 20 c2             	mov    edx,cr0
c0014c3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c40:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c44:	75 4b                	jne    c0014c91 <x87EmulHandler(regs*, void*)+0x5c>
c0014c46:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014c4b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c51:	85 c0                	test   eax,eax
c0014c53:	74 05                	je     c0014c5a <x87EmulHandler(regs*, void*)+0x25>
c0014c55:	83 e2 08             	and    edx,0x8
c0014c58:	75 17                	jne    c0014c71 <x87EmulHandler(regs*, void*)+0x3c>
c0014c5a:	83 ec 0c             	sub    esp,0xc
c0014c5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c61:	e8 c9 af 00 00       	call   c001fc2f <Vm::x87Handler(regs*)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	84 c0                	test   al,al
c0014c6b:	74 24                	je     c0014c91 <x87EmulHandler(regs*, void*)+0x5c>
c0014c6d:	83 c4 0c             	add    esp,0xc
c0014c70:	c3                   	ret    
c0014c71:	83 ec 0c             	sub    esp,0xc
c0014c74:	68 b0 ba 02 c0       	push   0xc002bab0
c0014c79:	e8 7d dc ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014c7e:	0f 06                	clts   
c0014c80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	a3 c8 f3 02 c0       	mov    ds:0xc002f3c8,eax
c0014c8d:	83 c4 0c             	add    esp,0xc
c0014c90:	c3                   	ret    
c0014c91:	83 ec 0c             	sub    esp,0xc
c0014c94:	68 9a ba 02 c0       	push   0xc002ba9a
c0014c99:	e8 5d dc ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014c9e:	5a                   	pop    edx
c0014c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ca3:	e8 fe fa ff ff       	call   c00147a6 <displayDebugInfo(regs*)>

c0014ca8 <gpFault(regs*, void*)>:
c0014ca8:	53                   	push   ebx
c0014ca9:	83 ec 14             	sub    esp,0x14
c0014cac:	c7 05 c4 f3 02 c0 08 f1 01 c0 	mov    DWORD PTR ds:0xc002f3c4,0xc001f108
c0014cb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014cba:	53                   	push   ebx
c0014cbb:	e8 48 a4 00 00       	call   c001f108 <Vm::faultHandler(regs*)>
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	84 c0                	test   al,al
c0014cc5:	74 05                	je     c0014ccc <gpFault(regs*, void*)+0x24>
c0014cc7:	83 c4 08             	add    esp,0x8
c0014cca:	5b                   	pop    ebx
c0014ccb:	c3                   	ret    
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	68 bd ba 02 c0       	push   0xc002babd
c0014cd4:	e8 22 dc ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014cd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cdc:	e8 c5 fa ff ff       	call   c00147a6 <displayDebugInfo(regs*)>

c0014ce1 <pgFault(regs*, void*)>:
c0014ce1:	83 ec 18             	sub    esp,0x18
c0014ce4:	68 d8 ba 02 c0       	push   0xc002bad8
c0014ce9:	e8 0d dc ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014cee:	58                   	pop    eax
c0014cef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf3:	e8 ae fa ff ff       	call   c00147a6 <displayDebugInfo(regs*)>

c0014cf8 <otherISRHandler(regs*, void*)>:
c0014cf8:	53                   	push   ebx
c0014cf9:	83 ec 0c             	sub    esp,0xc
c0014cfc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d00:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d03:	50                   	push   eax
c0014d04:	50                   	push   eax
c0014d05:	68 e5 ba 02 c0       	push   0xc002bae5
c0014d0a:	e8 ec db ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014d0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d12:	e8 8f fa ff ff       	call   c00147a6 <displayDebugInfo(regs*)>

c0014d17 <opcodeFault(regs*, void*)>:
c0014d17:	55                   	push   ebp
c0014d18:	89 e5                	mov    ebp,esp
c0014d1a:	56                   	push   esi
c0014d1b:	53                   	push   ebx
c0014d1c:	83 ec 40             	sub    esp,0x40
c0014d1f:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014d24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d2a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d30:	84 c0                	test   al,al
c0014d32:	74 24                	je     c0014d58 <opcodeFault(regs*, void*)+0x41>
c0014d34:	83 ec 0c             	sub    esp,0xc
c0014d37:	68 04 bb 02 c0       	push   0xc002bb04
c0014d3c:	e8 ba db ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d47:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d4a:	8d 50 19             	lea    edx,[eax+0x19]
c0014d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d50:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d53:	e9 d5 05 00 00       	jmp    c001532d <opcodeFault(regs*, void*)+0x616>
c0014d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d61:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d65:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d75:	8a 00                	mov    al,BYTE PTR [eax]
c0014d77:	3c f0                	cmp    al,0xf0
c0014d79:	75 17                	jne    c0014d92 <opcodeFault(regs*, void*)+0x7b>
c0014d7b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d84:	8d 50 01             	lea    edx,[eax+0x1]
c0014d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d8d:	e9 da 00 00 00       	jmp    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014d92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d95:	8a 00                	mov    al,BYTE PTR [eax]
c0014d97:	3c f2                	cmp    al,0xf2
c0014d99:	74 09                	je     c0014da4 <opcodeFault(regs*, void*)+0x8d>
c0014d9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9e:	8a 00                	mov    al,BYTE PTR [eax]
c0014da0:	3c f3                	cmp    al,0xf3
c0014da2:	75 1b                	jne    c0014dbf <opcodeFault(regs*, void*)+0xa8>
c0014da4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db1:	8d 50 01             	lea    edx,[eax+0x1]
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dba:	e9 ad 00 00 00       	jmp    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc2:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc4:	3c 66                	cmp    al,0x66
c0014dc6:	75 1f                	jne    c0014de7 <opcodeFault(regs*, void*)+0xd0>
c0014dc8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dcc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014dd0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd9:	8d 50 01             	lea    edx,[eax+0x1]
c0014ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de2:	e9 85 00 00 00       	jmp    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dea:	8a 00                	mov    al,BYTE PTR [eax]
c0014dec:	3c 67                	cmp    al,0x67
c0014dee:	75 18                	jne    c0014e08 <opcodeFault(regs*, void*)+0xf1>
c0014df0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014df4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dfd:	8d 50 01             	lea    edx,[eax+0x1]
c0014e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e06:	eb 64                	jmp    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014e08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0d:	3c 2e                	cmp    al,0x2e
c0014e0f:	74 09                	je     c0014e1a <opcodeFault(regs*, void*)+0x103>
c0014e11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e14:	8a 00                	mov    al,BYTE PTR [eax]
c0014e16:	3c 3e                	cmp    al,0x3e
c0014e18:	75 18                	jne    c0014e32 <opcodeFault(regs*, void*)+0x11b>
c0014e1a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e1e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e27:	8d 50 01             	lea    edx,[eax+0x1]
c0014e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e30:	eb 3a                	jmp    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014e32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e35:	8a 00                	mov    al,BYTE PTR [eax]
c0014e37:	3c 36                	cmp    al,0x36
c0014e39:	74 1b                	je     c0014e56 <opcodeFault(regs*, void*)+0x13f>
c0014e3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e40:	3c 26                	cmp    al,0x26
c0014e42:	74 12                	je     c0014e56 <opcodeFault(regs*, void*)+0x13f>
c0014e44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e47:	8a 00                	mov    al,BYTE PTR [eax]
c0014e49:	3c 64                	cmp    al,0x64
c0014e4b:	74 09                	je     c0014e56 <opcodeFault(regs*, void*)+0x13f>
c0014e4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e50:	8a 00                	mov    al,BYTE PTR [eax]
c0014e52:	3c 65                	cmp    al,0x65
c0014e54:	75 16                	jne    c0014e6c <opcodeFault(regs*, void*)+0x155>
c0014e56:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e5a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e63:	8d 50 01             	lea    edx,[eax+0x1]
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e71:	3c 0f                	cmp    al,0xf
c0014e73:	0f 85 ad 00 00 00    	jne    c0014f26 <opcodeFault(regs*, void*)+0x20f>
c0014e79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7c:	40                   	inc    eax
c0014e7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7f:	3c c2                	cmp    al,0xc2
c0014e81:	74 0e                	je     c0014e91 <opcodeFault(regs*, void*)+0x17a>
c0014e83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e86:	40                   	inc    eax
c0014e87:	8a 00                	mov    al,BYTE PTR [eax]
c0014e89:	3c c3                	cmp    al,0xc3
c0014e8b:	0f 85 95 00 00 00    	jne    c0014f26 <opcodeFault(regs*, void*)+0x20f>
c0014e91:	83 ec 0c             	sub    esp,0xc
c0014e94:	68 27 bb 02 c0       	push   0xc002bb27
c0014e99:	e8 5d da ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea7:	8d 50 01             	lea    edx,[eax+0x1]
c0014eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ead:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eb0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb8:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ebb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebe:	88 10                	mov    BYTE PTR [eax],dl
c0014ec0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ec3:	50                   	push   eax
c0014ec4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ec7:	50                   	push   eax
c0014ec8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ecb:	50                   	push   eax
c0014ecc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ecf:	e8 a8 4b 00 00       	call   c0019a7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ed4:	83 c4 10             	add    esp,0x10
c0014ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014edd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ee0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ee3:	01 d0                	add    eax,edx
c0014ee5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eeb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eee:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ef1:	48                   	dec    eax
c0014ef2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014efb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f01:	83 ec 04             	sub    esp,0x4
c0014f04:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014f07:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f0a:	50                   	push   eax
c0014f0b:	e8 a4 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014f16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014f19:	01 c2                	add    edx,eax
c0014f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f21:	e9 07 04 00 00       	jmp    c001532d <opcodeFault(regs*, void*)+0x616>
c0014f26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f29:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2b:	3c 0f                	cmp    al,0xf
c0014f2d:	0f 85 8b 01 00 00    	jne    c00150be <opcodeFault(regs*, void*)+0x3a7>
c0014f33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f36:	40                   	inc    eax
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	3c c7                	cmp    al,0xc7
c0014f3b:	0f 86 7d 01 00 00    	jbe    c00150be <opcodeFault(regs*, void*)+0x3a7>
c0014f41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f44:	40                   	inc    eax
c0014f45:	8a 00                	mov    al,BYTE PTR [eax]
c0014f47:	3c cf                	cmp    al,0xcf
c0014f49:	0f 87 6f 01 00 00    	ja     c00150be <opcodeFault(regs*, void*)+0x3a7>
c0014f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f52:	40                   	inc    eax
c0014f53:	8a 00                	mov    al,BYTE PTR [eax]
c0014f55:	83 c0 38             	add    eax,0x38
c0014f58:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f5b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f5f:	75 0b                	jne    c0014f6c <opcodeFault(regs*, void*)+0x255>
c0014f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f64:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6a:	eb 75                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014f6c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f70:	75 0b                	jne    c0014f7d <opcodeFault(regs*, void*)+0x266>
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7b:	eb 64                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014f7d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f81:	75 0b                	jne    c0014f8e <opcodeFault(regs*, void*)+0x277>
c0014f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f8c:	eb 53                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014f8e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f92:	75 0b                	jne    c0014f9f <opcodeFault(regs*, void*)+0x288>
c0014f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f9d:	eb 42                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014f9f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fa3:	75 0b                	jne    c0014fb0 <opcodeFault(regs*, void*)+0x299>
c0014fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014fab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fae:	eb 31                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014fb0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fb4:	75 0b                	jne    c0014fc1 <opcodeFault(regs*, void*)+0x2aa>
c0014fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fbf:	eb 20                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014fc1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fc5:	75 0b                	jne    c0014fd2 <opcodeFault(regs*, void*)+0x2bb>
c0014fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fd0:	eb 0f                	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014fd2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fd6:	75 09                	jne    c0014fe1 <opcodeFault(regs*, void*)+0x2ca>
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fe1:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fe5:	74 10                	je     c0014ff7 <opcodeFault(regs*, void*)+0x2e0>
c0014fe7:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fee:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ff5:	eb 2d                	jmp    c0015024 <opcodeFault(regs*, void*)+0x30d>
c0014ff7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ffa:	c1 e0 18             	shl    eax,0x18
c0014ffd:	89 c2                	mov    edx,eax
c0014fff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015002:	c1 e0 08             	shl    eax,0x8
c0015005:	25 00 00 ff 00       	and    eax,0xff0000
c001500a:	09 c2                	or     edx,eax
c001500c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001500f:	c1 e8 08             	shr    eax,0x8
c0015012:	25 00 ff 00 00       	and    eax,0xff00
c0015017:	09 c2                	or     edx,eax
c0015019:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001501c:	c1 e8 18             	shr    eax,0x18
c001501f:	09 d0                	or     eax,edx
c0015021:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015024:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015028:	75 0b                	jne    c0015035 <opcodeFault(regs*, void*)+0x31e>
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015030:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015033:	eb 75                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c0015035:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015039:	75 0b                	jne    c0015046 <opcodeFault(regs*, void*)+0x32f>
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015041:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015044:	eb 64                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c0015046:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001504a:	75 0b                	jne    c0015057 <opcodeFault(regs*, void*)+0x340>
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015052:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015055:	eb 53                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c0015057:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001505b:	75 0b                	jne    c0015068 <opcodeFault(regs*, void*)+0x351>
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015063:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015066:	eb 42                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c0015068:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001506c:	75 0b                	jne    c0015079 <opcodeFault(regs*, void*)+0x362>
c001506e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015071:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015074:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015077:	eb 31                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c0015079:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001507d:	75 0b                	jne    c001508a <opcodeFault(regs*, void*)+0x373>
c001507f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015082:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015085:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015088:	eb 20                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c001508a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001508e:	75 0b                	jne    c001509b <opcodeFault(regs*, void*)+0x384>
c0015090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015093:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015096:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015099:	eb 0f                	jmp    c00150aa <opcodeFault(regs*, void*)+0x393>
c001509b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001509f:	75 09                	jne    c00150aa <opcodeFault(regs*, void*)+0x393>
c00150a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150a7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b0:	8d 50 02             	lea    edx,[eax+0x2]
c00150b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150b9:	e9 6f 02 00 00       	jmp    c001532d <opcodeFault(regs*, void*)+0x616>
c00150be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c1:	8a 00                	mov    al,BYTE PTR [eax]
c00150c3:	3c 0f                	cmp    al,0xf
c00150c5:	0f 85 8d 01 00 00    	jne    c0015258 <opcodeFault(regs*, void*)+0x541>
c00150cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ce:	40                   	inc    eax
c00150cf:	8a 00                	mov    al,BYTE PTR [eax]
c00150d1:	3c c7                	cmp    al,0xc7
c00150d3:	0f 85 7f 01 00 00    	jne    c0015258 <opcodeFault(regs*, void*)+0x541>
c00150d9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e2:	8d 50 01             	lea    edx,[eax+0x1]
c00150e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150eb:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150ee:	50                   	push   eax
c00150ef:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150f2:	50                   	push   eax
c00150f3:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150f6:	50                   	push   eax
c00150f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150fa:	e8 7d 49 00 00       	call   c0019a7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015105:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015108:	83 f0 01             	xor    eax,0x1
c001510b:	84 c0                	test   al,al
c001510d:	0f 84 45 01 00 00    	je     c0015258 <opcodeFault(regs*, void*)+0x541>
c0015113:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015116:	3c 01                	cmp    al,0x1
c0015118:	0f 85 3a 01 00 00    	jne    c0015258 <opcodeFault(regs*, void*)+0x541>
c001511e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015121:	83 f0 01             	xor    eax,0x1
c0015124:	84 c0                	test   al,al
c0015126:	0f 84 2c 01 00 00    	je     c0015258 <opcodeFault(regs*, void*)+0x541>
c001512c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015132:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015135:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001513c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001513f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015142:	89 c2                	mov    edx,eax
c0015144:	b8 00 00 00 00       	mov    eax,0x0
c0015149:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001514c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001514f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015152:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015155:	ba 00 00 00 00       	mov    edx,0x0
c001515a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001515d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015163:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015166:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015169:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015170:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015173:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015176:	89 c2                	mov    edx,eax
c0015178:	b8 00 00 00 00       	mov    eax,0x0
c001517d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015180:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015186:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015189:	ba 00 00 00 00       	mov    edx,0x0
c001518e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015191:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015194:	fa                   	cli    
c0015195:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001519a:	40                   	inc    eax
c001519b:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00151a0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151a3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a8:	89 c1                	mov    ecx,eax
c00151aa:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00151ad:	89 cb                	mov    ebx,ecx
c00151af:	89 d0                	mov    eax,edx
c00151b1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00151b4:	89 c6                	mov    esi,eax
c00151b6:	89 f0                	mov    eax,esi
c00151b8:	09 d8                	or     eax,ebx
c00151ba:	85 c0                	test   eax,eax
c00151bc:	75 21                	jne    c00151df <opcodeFault(regs*, void*)+0x4c8>
c00151be:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00151c1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00151c4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00151c7:	89 01                	mov    DWORD PTR [ecx],eax
c00151c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151d2:	83 c8 40             	or     eax,0x40
c00151d5:	89 c2                	mov    edx,eax
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151dd:	eb 3e                	jmp    c001521d <opcodeFault(regs*, void*)+0x506>
c00151df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151ea:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151ed:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151f6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151f9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151fc:	89 d0                	mov    eax,edx
c00151fe:	31 d2                	xor    edx,edx
c0015200:	89 c3                	mov    ebx,eax
c0015202:	89 d6                	mov    esi,edx
c0015204:	89 da                	mov    edx,ebx
c0015206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015209:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015212:	83 e0 bf             	and    eax,0xffffffbf
c0015215:	89 c2                	mov    edx,eax
c0015217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001521d:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015222:	48                   	dec    eax
c0015223:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0015228:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001522d:	85 c0                	test   eax,eax
c001522f:	75 01                	jne    c0015232 <opcodeFault(regs*, void*)+0x51b>
c0015231:	fb                   	sti    
c0015232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015235:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015238:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001523b:	01 c2                	add    edx,eax
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015243:	83 ec 0c             	sub    esp,0xc
c0015246:	68 36 bb 02 c0       	push   0xc002bb36
c001524b:	e8 ab d6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0015250:	83 c4 10             	add    esp,0x10
c0015253:	e9 d5 00 00 00       	jmp    c001532d <opcodeFault(regs*, void*)+0x616>
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	68 49 bb 02 c0       	push   0xc002bb49
c0015260:	e8 96 d6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001526e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015274:	c1 e0 04             	shl    eax,0x4
c0015277:	01 d0                	add    eax,edx
c0015279:	83 c0 03             	add    eax,0x3
c001527c:	8a 00                	mov    al,BYTE PTR [eax]
c001527e:	0f b6 d8             	movzx  ebx,al
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001528d:	c1 e0 04             	shl    eax,0x4
c0015290:	01 d0                	add    eax,edx
c0015292:	83 c0 02             	add    eax,0x2
c0015295:	8a 00                	mov    al,BYTE PTR [eax]
c0015297:	0f b6 c8             	movzx  ecx,al
c001529a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152a6:	c1 e0 04             	shl    eax,0x4
c00152a9:	01 d0                	add    eax,edx
c00152ab:	40                   	inc    eax
c00152ac:	8a 00                	mov    al,BYTE PTR [eax]
c00152ae:	0f b6 d0             	movzx  edx,al
c00152b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b4:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00152b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152bd:	c1 e0 04             	shl    eax,0x4
c00152c0:	01 f0                	add    eax,esi
c00152c2:	8a 00                	mov    al,BYTE PTR [eax]
c00152c4:	0f b6 c0             	movzx  eax,al
c00152c7:	83 ec 0c             	sub    esp,0xc
c00152ca:	53                   	push   ebx
c00152cb:	51                   	push   ecx
c00152cc:	52                   	push   edx
c00152cd:	50                   	push   eax
c00152ce:	68 5c bb 02 c0       	push   0xc002bb5c
c00152d3:	e8 23 d6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00152d8:	83 c4 20             	add    esp,0x20
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e1:	83 c0 03             	add    eax,0x3
c00152e4:	8a 00                	mov    al,BYTE PTR [eax]
c00152e6:	0f b6 d8             	movzx  ebx,al
c00152e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ef:	83 c0 02             	add    eax,0x2
c00152f2:	8a 00                	mov    al,BYTE PTR [eax]
c00152f4:	0f b6 c8             	movzx  ecx,al
c00152f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152fd:	40                   	inc    eax
c00152fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015300:	0f b6 d0             	movzx  edx,al
c0015303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015306:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015309:	8a 00                	mov    al,BYTE PTR [eax]
c001530b:	0f b6 c0             	movzx  eax,al
c001530e:	83 ec 0c             	sub    esp,0xc
c0015311:	53                   	push   ebx
c0015312:	51                   	push   ecx
c0015313:	52                   	push   edx
c0015314:	50                   	push   eax
c0015315:	68 84 bb 02 c0       	push   0xc002bb84
c001531a:	e8 dc d5 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001531f:	83 c4 20             	add    esp,0x20
c0015322:	83 ec 0c             	sub    esp,0xc
c0015325:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015328:	e8 79 f4 ff ff       	call   c00147a6 <displayDebugInfo(regs*)>
c001532d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015330:	5b                   	pop    ebx
c0015331:	5e                   	pop    esi
c0015332:	5d                   	pop    ebp
c0015333:	c3                   	ret    

c0015334 <displayProgramFault(char const*)>:
c0015334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015339:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001533c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015342:	85 c0                	test   eax,eax
c0015344:	74 15                	je     c001535b <displayProgramFault(char const*)+0x27>
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	6a 04                	push   0x4
c001534b:	6a 0f                	push   0xf
c001534d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015351:	50                   	push   eax
c0015352:	e8 c7 b4 ff ff       	call   c001081e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015357:	83 c4 1c             	add    esp,0x1c
c001535a:	c3                   	ret    
c001535b:	c3                   	ret    

c001535c <setupInterruptController()>:
c001535c:	55                   	push   ebp
c001535d:	89 e5                	mov    ebp,esp
c001535f:	53                   	push   ebx
c0015360:	83 ec 24             	sub    esp,0x24
c0015363:	b8 00 00 00 00       	mov    eax,0x0
c0015368:	85 c0                	test   eax,eax
c001536a:	0f 95 c0             	setne  al
c001536d:	84 c0                	test   al,al
c001536f:	74 5b                	je     c00153cc <setupInterruptController()+0x70>
c0015371:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001537e:	e8 7f a5 ff ff       	call   c000f902 <malloc>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	89 c3                	mov    ebx,eax
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	53                   	push   ebx
c001538c:	e8 b9 0e 01 00       	call   c002624a <APIC::APIC()>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015397:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001539a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001539d:	8b 00                	mov    eax,DWORD PTR [eax]
c001539f:	83 c0 08             	add    eax,0x8
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	6a 00                	push   0x0
c00153a6:	6a 00                	push   0x0
c00153a8:	6a 00                	push   0x0
c00153aa:	52                   	push   edx
c00153ab:	ff d0                	call   eax
c00153ad:	83 c4 10             	add    esp,0x10
c00153b0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00153b5:	83 ec 08             	sub    esp,0x8
c00153b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153bb:	50                   	push   eax
c00153bc:	e8 73 e9 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153c7:	e9 89 03 00 00       	jmp    c0015755 <setupInterruptController()+0x3f9>
c00153cc:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c00153d1:	84 c0                	test   al,al
c00153d3:	75 24                	jne    c00153f9 <setupInterruptController()+0x9d>
c00153d5:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00153da:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153e0:	83 e2 fe             	and    edx,0xfffffffe
c00153e3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153e9:	83 ec 0c             	sub    esp,0xc
c00153ec:	68 a9 bb 02 c0       	push   0xc002bba9
c00153f1:	e8 05 d5 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00153fe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015404:	83 e0 01             	and    eax,0x1
c0015407:	84 c0                	test   al,al
c0015409:	0f 95 c0             	setne  al
c001540c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001540f:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001541c:	e8 e1 a4 ff ff       	call   c000f902 <malloc>
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	89 c3                	mov    ebx,eax
c0015426:	83 ec 0c             	sub    esp,0xc
c0015429:	53                   	push   ebx
c001542a:	e8 73 13 01 00       	call   c00267a2 <PIC::PIC()>
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015435:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015438:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543b:	8b 00                	mov    eax,DWORD PTR [eax]
c001543d:	83 c0 08             	add    eax,0x8
c0015440:	8b 00                	mov    eax,DWORD PTR [eax]
c0015442:	6a 00                	push   0x0
c0015444:	6a 00                	push   0x0
c0015446:	6a 00                	push   0x0
c0015448:	52                   	push   edx
c0015449:	ff d0                	call   eax
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015452:	74 73                	je     c00154c7 <setupInterruptController()+0x16b>
c0015454:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545a:	8b 00                	mov    eax,DWORD PTR [eax]
c001545c:	83 c0 0c             	add    eax,0xc
c001545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015461:	6a 00                	push   0x0
c0015463:	6a 00                	push   0x0
c0015465:	6a 00                	push   0x0
c0015467:	52                   	push   edx
c0015468:	ff d0                	call   eax
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015471:	74 15                	je     c0015488 <setupInterruptController()+0x12c>
c0015473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015476:	8b 00                	mov    eax,DWORD PTR [eax]
c0015478:	83 c0 04             	add    eax,0x4
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	83 ec 0c             	sub    esp,0xc
c0015480:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015483:	ff d0                	call   eax
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001548f:	83 ec 0c             	sub    esp,0xc
c0015492:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015495:	e8 68 a4 ff ff       	call   c000f902 <malloc>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	89 c3                	mov    ebx,eax
c001549f:	83 ec 0c             	sub    esp,0xc
c00154a2:	53                   	push   ebx
c00154a3:	e8 a2 0d 01 00       	call   c002624a <APIC::APIC()>
c00154a8:	83 c4 10             	add    esp,0x10
c00154ab:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00154ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00154b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b6:	83 c0 08             	add    eax,0x8
c00154b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bb:	6a 00                	push   0x0
c00154bd:	6a 00                	push   0x0
c00154bf:	6a 00                	push   0x0
c00154c1:	52                   	push   edx
c00154c2:	ff d0                	call   eax
c00154c4:	83 c4 10             	add    esp,0x10
c00154c7:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00154cc:	83 ec 08             	sub    esp,0x8
c00154cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d2:	50                   	push   eax
c00154d3:	e8 5c e8 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c00154d8:	83 c4 10             	add    esp,0x10
c00154db:	c7 05 c8 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3c8,0x0
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ea:	83 c0 24             	add    eax,0x24
c00154ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ef:	6a 00                	push   0x0
c00154f1:	68 f8 4c 01 c0       	push   0xc0014cf8
c00154f6:	6a 00                	push   0x0
c00154f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fb:	ff d0                	call   eax
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015503:	8b 00                	mov    eax,DWORD PTR [eax]
c0015505:	83 c0 24             	add    eax,0x24
c0015508:	8b 00                	mov    eax,DWORD PTR [eax]
c001550a:	6a 00                	push   0x0
c001550c:	68 f8 4c 01 c0       	push   0xc0014cf8
c0015511:	6a 01                	push   0x1
c0015513:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015516:	ff d0                	call   eax
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015520:	83 c0 24             	add    eax,0x24
c0015523:	8b 00                	mov    eax,DWORD PTR [eax]
c0015525:	6a 00                	push   0x0
c0015527:	68 03 46 01 c0       	push   0xc0014603
c001552c:	6a 02                	push   0x2
c001552e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015531:	ff d0                	call   eax
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015539:	8b 00                	mov    eax,DWORD PTR [eax]
c001553b:	83 c0 24             	add    eax,0x24
c001553e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015540:	6a 00                	push   0x0
c0015542:	68 f8 4c 01 c0       	push   0xc0014cf8
c0015547:	6a 03                	push   0x3
c0015549:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554c:	ff d0                	call   eax
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015554:	8b 00                	mov    eax,DWORD PTR [eax]
c0015556:	83 c0 24             	add    eax,0x24
c0015559:	8b 00                	mov    eax,DWORD PTR [eax]
c001555b:	6a 00                	push   0x0
c001555d:	68 f8 4c 01 c0       	push   0xc0014cf8
c0015562:	6a 04                	push   0x4
c0015564:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015567:	ff d0                	call   eax
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015571:	83 c0 24             	add    eax,0x24
c0015574:	8b 00                	mov    eax,DWORD PTR [eax]
c0015576:	6a 00                	push   0x0
c0015578:	68 f8 4c 01 c0       	push   0xc0014cf8
c001557d:	6a 05                	push   0x5
c001557f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015582:	ff d0                	call   eax
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558a:	8b 00                	mov    eax,DWORD PTR [eax]
c001558c:	83 c0 24             	add    eax,0x24
c001558f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015591:	6a 00                	push   0x0
c0015593:	68 17 4d 01 c0       	push   0xc0014d17
c0015598:	6a 06                	push   0x6
c001559a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559d:	ff d0                	call   eax
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a7:	83 c0 24             	add    eax,0x24
c00155aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ac:	6a 00                	push   0x0
c00155ae:	68 35 4c 01 c0       	push   0xc0014c35
c00155b3:	6a 07                	push   0x7
c00155b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b8:	ff d0                	call   eax
c00155ba:	83 c4 10             	add    esp,0x10
c00155bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c2:	83 c0 24             	add    eax,0x24
c00155c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c7:	6a 00                	push   0x0
c00155c9:	68 1e 44 01 c0       	push   0xc001441e
c00155ce:	6a 08                	push   0x8
c00155d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d3:	ff d0                	call   eax
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155db:	8b 00                	mov    eax,DWORD PTR [eax]
c00155dd:	83 c0 24             	add    eax,0x24
c00155e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e2:	6a 00                	push   0x0
c00155e4:	68 f8 4c 01 c0       	push   0xc0014cf8
c00155e9:	6a 09                	push   0x9
c00155eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ee:	ff d0                	call   eax
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f8:	83 c0 24             	add    eax,0x24
c00155fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fd:	6a 00                	push   0x0
c00155ff:	68 f8 4c 01 c0       	push   0xc0014cf8
c0015604:	6a 0a                	push   0xa
c0015606:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015609:	ff d0                	call   eax
c001560b:	83 c4 10             	add    esp,0x10
c001560e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015611:	8b 00                	mov    eax,DWORD PTR [eax]
c0015613:	83 c0 24             	add    eax,0x24
c0015616:	8b 00                	mov    eax,DWORD PTR [eax]
c0015618:	6a 00                	push   0x0
c001561a:	68 f8 4c 01 c0       	push   0xc0014cf8
c001561f:	6a 0b                	push   0xb
c0015621:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015624:	ff d0                	call   eax
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562c:	8b 00                	mov    eax,DWORD PTR [eax]
c001562e:	83 c0 24             	add    eax,0x24
c0015631:	8b 00                	mov    eax,DWORD PTR [eax]
c0015633:	6a 00                	push   0x0
c0015635:	68 f8 4c 01 c0       	push   0xc0014cf8
c001563a:	6a 0c                	push   0xc
c001563c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563f:	ff d0                	call   eax
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015647:	8b 00                	mov    eax,DWORD PTR [eax]
c0015649:	83 c0 24             	add    eax,0x24
c001564c:	8b 00                	mov    eax,DWORD PTR [eax]
c001564e:	6a 00                	push   0x0
c0015650:	68 a8 4c 01 c0       	push   0xc0014ca8
c0015655:	6a 0d                	push   0xd
c0015657:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565a:	ff d0                	call   eax
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015662:	8b 00                	mov    eax,DWORD PTR [eax]
c0015664:	83 c0 24             	add    eax,0x24
c0015667:	8b 00                	mov    eax,DWORD PTR [eax]
c0015669:	6a 00                	push   0x0
c001566b:	68 e1 4c 01 c0       	push   0xc0014ce1
c0015670:	6a 0e                	push   0xe
c0015672:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015675:	ff d0                	call   eax
c0015677:	83 c4 10             	add    esp,0x10
c001567a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567d:	8b 00                	mov    eax,DWORD PTR [eax]
c001567f:	83 c0 24             	add    eax,0x24
c0015682:	8b 00                	mov    eax,DWORD PTR [eax]
c0015684:	6a 00                	push   0x0
c0015686:	68 f8 4c 01 c0       	push   0xc0014cf8
c001568b:	6a 0f                	push   0xf
c001568d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015690:	ff d0                	call   eax
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015698:	8b 00                	mov    eax,DWORD PTR [eax]
c001569a:	83 c0 24             	add    eax,0x24
c001569d:	8b 00                	mov    eax,DWORD PTR [eax]
c001569f:	6a 00                	push   0x0
c00156a1:	68 f8 4c 01 c0       	push   0xc0014cf8
c00156a6:	6a 10                	push   0x10
c00156a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ab:	ff d0                	call   eax
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b5:	83 c0 24             	add    eax,0x24
c00156b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ba:	6a 00                	push   0x0
c00156bc:	68 f8 4c 01 c0       	push   0xc0014cf8
c00156c1:	6a 11                	push   0x11
c00156c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c6:	ff d0                	call   eax
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d0:	83 c0 24             	add    eax,0x24
c00156d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d5:	6a 00                	push   0x0
c00156d7:	68 f8 4c 01 c0       	push   0xc0014cf8
c00156dc:	6a 12                	push   0x12
c00156de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e1:	ff d0                	call   eax
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156eb:	83 c0 24             	add    eax,0x24
c00156ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f0:	6a 00                	push   0x0
c00156f2:	68 f8 4c 01 c0       	push   0xc0014cf8
c00156f7:	6a 13                	push   0x13
c00156f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156fc:	ff d0                	call   eax
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015704:	8b 00                	mov    eax,DWORD PTR [eax]
c0015706:	83 c0 24             	add    eax,0x24
c0015709:	8b 00                	mov    eax,DWORD PTR [eax]
c001570b:	6a 00                	push   0x0
c001570d:	68 f8 4c 01 c0       	push   0xc0014cf8
c0015712:	6a 14                	push   0x14
c0015714:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015717:	ff d0                	call   eax
c0015719:	83 c4 10             	add    esp,0x10
c001571c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015721:	83 c0 24             	add    eax,0x24
c0015724:	8b 00                	mov    eax,DWORD PTR [eax]
c0015726:	6a 00                	push   0x0
c0015728:	68 f8 4c 01 c0       	push   0xc0014cf8
c001572d:	6a 1e                	push   0x1e
c001572f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015732:	ff d0                	call   eax
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001573a:	8b 00                	mov    eax,DWORD PTR [eax]
c001573c:	83 c0 24             	add    eax,0x24
c001573f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015741:	6a 00                	push   0x0
c0015743:	68 ae c7 01 c0       	push   0xc001c7ae
c0015748:	6a 60                	push   0x60
c001574a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001574d:	ff d0                	call   eax
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015755:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015758:	c9                   	leave  
c0015759:	c3                   	ret    

c001575a <InterruptController::convertLegacyIRQNumber(int)>:
c001575a:	55                   	push   ebp
c001575b:	89 e5                	mov    ebp,esp
c001575d:	83 ec 08             	sub    esp,0x8
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	83 ec 0c             	sub    esp,0xc
c0015766:	50                   	push   eax
c0015767:	e8 c8 e8 ff ff       	call   c0014034 <Device::getName()>
c001576c:	83 c4 10             	add    esp,0x10
c001576f:	8a 00                	mov    al,BYTE PTR [eax]
c0015771:	3c 41                	cmp    al,0x41
c0015773:	0f 94 c0             	sete   al
c0015776:	84 c0                	test   al,al
c0015778:	74 28                	je     c00157a2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001577a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001577e:	7f 12                	jg     c0015792 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015780:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015783:	05 a0 e4 02 c0       	add    eax,0xc002e4a0
c0015788:	8a 00                	mov    al,BYTE PTR [eax]
c001578a:	0f b6 c0             	movzx  eax,al
c001578d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015790:	eb 10                	jmp    c00157a2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015792:	83 ec 0c             	sub    esp,0xc
c0015795:	68 98 b8 02 c0       	push   0xc002b898
c001579a:	e8 10 4c 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00157a5:	c9                   	leave  
c00157a6:	c3                   	ret    
c00157a7:	90                   	nop

c00157a8 <startGUI(void*)>:
c00157a8:	55                   	push   ebp
c00157a9:	89 e5                	mov    ebp,esp
c00157ab:	53                   	push   ebx
c00157ac:	83 ec 04             	sub    esp,0x4
c00157af:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00157b4:	48                   	dec    eax
c00157b5:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00157ba:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00157bf:	85 c0                	test   eax,eax
c00157c1:	75 01                	jne    c00157c4 <startGUI(void*)+0x1c>
c00157c3:	fb                   	sti    
c00157c4:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c00157ca:	83 ec 08             	sub    esp,0x8
c00157cd:	6a 01                	push   0x1
c00157cf:	68 0c bc 02 c0       	push   0xc002bc0c
c00157d4:	e8 b0 7f 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	83 ec 08             	sub    esp,0x8
c00157df:	53                   	push   ebx
c00157e0:	50                   	push   eax
c00157e1:	e8 ce 81 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c00157ef:	83 ec 08             	sub    esp,0x8
c00157f2:	6a 01                	push   0x1
c00157f4:	68 26 bc 02 c0       	push   0xc002bc26
c00157f9:	e8 8b 7f 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	83 ec 08             	sub    esp,0x8
c0015804:	53                   	push   ebx
c0015805:	50                   	push   eax
c0015806:	e8 a9 81 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c001580b:	83 c4 10             	add    esp,0x10
c001580e:	90                   	nop
c001580f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015812:	c9                   	leave  
c0015813:	c3                   	ret    

c0015814 <startGUIVESA(void*)>:
c0015814:	55                   	push   ebp
c0015815:	89 e5                	mov    ebp,esp
c0015817:	53                   	push   ebx
c0015818:	83 ec 04             	sub    esp,0x4
c001581b:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015820:	48                   	dec    eax
c0015821:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0015826:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001582b:	85 c0                	test   eax,eax
c001582d:	75 01                	jne    c0015830 <startGUIVESA(void*)+0x1c>
c001582f:	fb                   	sti    
c0015830:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c0015836:	83 ec 08             	sub    esp,0x8
c0015839:	6a 01                	push   0x1
c001583b:	68 40 bc 02 c0       	push   0xc002bc40
c0015840:	e8 44 7f 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	83 ec 08             	sub    esp,0x8
c001584b:	53                   	push   ebx
c001584c:	50                   	push   eax
c001584d:	e8 62 81 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c001585b:	83 ec 08             	sub    esp,0x8
c001585e:	6a 01                	push   0x1
c0015860:	68 26 bc 02 c0       	push   0xc002bc26
c0015865:	e8 1f 7f 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c001586a:	83 c4 10             	add    esp,0x10
c001586d:	83 ec 08             	sub    esp,0x8
c0015870:	53                   	push   ebx
c0015871:	50                   	push   eax
c0015872:	e8 3d 81 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	90                   	nop
c001587b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001587e:	c9                   	leave  
c001587f:	c3                   	ret    

c0015880 <sendKeyToTerminal(unsigned char)>:
c0015880:	55                   	push   ebp
c0015881:	89 e5                	mov    ebp,esp
c0015883:	83 ec 28             	sub    esp,0x28
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001588c:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0015891:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015895:	83 ec 08             	sub    esp,0x8
c0015898:	52                   	push   edx
c0015899:	50                   	push   eax
c001589a:	e8 25 b4 ff ff       	call   c0010cc4 <VgaText::receiveKey(unsigned char)>
c001589f:	83 c4 10             	add    esp,0x10
c00158a2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00158a6:	0f 85 8f 00 00 00    	jne    c001593b <sendKeyToTerminal(unsigned char)+0xbb>
c00158ac:	fa                   	cli    
c00158ad:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00158b2:	40                   	inc    eax
c00158b3:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00158b8:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c00158bd:	40                   	inc    eax
c00158be:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c00158c3:	a1 e0 f3 02 c0       	mov    eax,ds:0xc002f3e0
c00158c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158cb:	c7 05 e0 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3e0,0x0
c00158d5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158d9:	74 1f                	je     c00158fa <sendKeyToTerminal(unsigned char)+0x7a>
c00158db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158f0:	e8 37 8d 00 00       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	eb db                	jmp    c00158d5 <sendKeyToTerminal(unsigned char)+0x55>
c00158fa:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c00158ff:	48                   	dec    eax
c0015900:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c0015905:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001590a:	85 c0                	test   eax,eax
c001590c:	75 18                	jne    c0015926 <sendKeyToTerminal(unsigned char)+0xa6>
c001590e:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c0015913:	85 c0                	test   eax,eax
c0015915:	74 0f                	je     c0015926 <sendKeyToTerminal(unsigned char)+0xa6>
c0015917:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c0015921:	e8 42 88 00 00       	call   c001e168 <schedule()>
c0015926:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001592b:	48                   	dec    eax
c001592c:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0015931:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015936:	85 c0                	test   eax,eax
c0015938:	75 01                	jne    c001593b <sendKeyToTerminal(unsigned char)+0xbb>
c001593a:	fb                   	sti    
c001593b:	90                   	nop
c001593c:	c9                   	leave  
c001593d:	c3                   	ret    

c001593e <sendKeyboardToken(KeyboardToken)>:
c001593e:	55                   	push   ebp
c001593f:	89 e5                	mov    ebp,esp
c0015941:	83 ec 18             	sub    esp,0x18
c0015944:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	0f b7 c0             	movzx  eax,ax
c001594d:	83 f2 01             	xor    edx,0x1
c0015950:	88 90 00 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0c00],dl
c0015956:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c001595b:	85 c0                	test   eax,eax
c001595d:	74 24                	je     c0015983 <sendKeyboardToken(KeyboardToken)+0x45>
c001595f:	8b 0d e8 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3e8
c0015965:	83 ec 04             	sub    esp,0x4
c0015968:	68 00 f4 02 c0       	push   0xc002f400
c001596d:	83 ec 08             	sub    esp,0x8
c0015970:	89 e2                	mov    edx,esp
c0015972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015975:	89 02                	mov    DWORD PTR [edx],eax
c0015977:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001597a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001597e:	ff d1                	call   ecx
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015986:	66 3d 03 02          	cmp    ax,0x203
c001598a:	75 07                	jne    c0015993 <sendKeyboardToken(KeyboardToken)+0x55>
c001598c:	a0 00 f5 02 c0       	mov    al,ds:0xc002f500
c0015991:	84 c0                	test   al,al
c0015993:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015997:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001599a:	a0 08 f8 02 c0       	mov    al,ds:0xc002f808
c001599f:	38 c2                	cmp    dl,al
c00159a1:	74 1c                	je     c00159bf <sendKeyboardToken(KeyboardToken)+0x81>
c00159a3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00159a6:	a2 08 f8 02 c0       	mov    ds:0xc002f808,al
c00159ab:	a0 08 f8 02 c0       	mov    al,ds:0xc002f808
c00159b0:	0f b6 c0             	movzx  eax,al
c00159b3:	83 ec 0c             	sub    esp,0xc
c00159b6:	50                   	push   eax
c00159b7:	e8 4a a9 ff ff       	call   c0010306 <setTerminalScrollLock(bool)>
c00159bc:	83 c4 10             	add    esp,0x10
c00159bf:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00159c2:	84 c0                	test   al,al
c00159c4:	0f 84 ae 00 00 00    	je     c0015a78 <sendKeyboardToken(KeyboardToken)+0x13a>
c00159ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cd:	66 3d 10 03          	cmp    ax,0x310
c00159d1:	75 06                	jne    c00159d9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159d3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159dc:	66 3d 11 03          	cmp    ax,0x311
c00159e0:	75 06                	jne    c00159e8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159e2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159eb:	66 3d 12 03          	cmp    ax,0x312
c00159ef:	75 06                	jne    c00159f7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00159f1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fa:	66 3d 13 03          	cmp    ax,0x313
c00159fe:	75 06                	jne    c0015a06 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015a00:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a09:	66 3d 14 03          	cmp    ax,0x314
c0015a0d:	75 06                	jne    c0015a15 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015a0f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a18:	66 3d 15 03          	cmp    ax,0x315
c0015a1c:	75 06                	jne    c0015a24 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015a1e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a27:	66 3d 16 03          	cmp    ax,0x316
c0015a2b:	75 06                	jne    c0015a33 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a2d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a36:	66 3d 17 03          	cmp    ax,0x317
c0015a3a:	75 06                	jne    c0015a42 <sendKeyboardToken(KeyboardToken)+0x104>
c0015a3c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a45:	66 3d 18 03          	cmp    ax,0x318
c0015a49:	75 06                	jne    c0015a51 <sendKeyboardToken(KeyboardToken)+0x113>
c0015a4b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a54:	66 3d 19 03          	cmp    ax,0x319
c0015a58:	75 06                	jne    c0015a60 <sendKeyboardToken(KeyboardToken)+0x122>
c0015a5a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a63:	66 3d 1a 03          	cmp    ax,0x31a
c0015a67:	0f 85 c9 00 00 00    	jne    c0015b36 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a6d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a73:	e9 be 00 00 00       	jmp    c0015b36 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7b:	66 3d 10 03          	cmp    ax,0x310
c0015a7f:	75 0a                	jne    c0015a8b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a81:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a87:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8e:	66 3d 11 03          	cmp    ax,0x311
c0015a92:	75 0a                	jne    c0015a9e <sendKeyboardToken(KeyboardToken)+0x160>
c0015a94:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a9a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa1:	66 3d 12 03          	cmp    ax,0x312
c0015aa5:	75 0a                	jne    c0015ab1 <sendKeyboardToken(KeyboardToken)+0x173>
c0015aa7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015aad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab4:	66 3d 13 03          	cmp    ax,0x313
c0015ab8:	75 0a                	jne    c0015ac4 <sendKeyboardToken(KeyboardToken)+0x186>
c0015aba:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015ac0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac7:	66 3d 14 03          	cmp    ax,0x314
c0015acb:	75 0a                	jne    c0015ad7 <sendKeyboardToken(KeyboardToken)+0x199>
c0015acd:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ad3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ada:	66 3d 15 03          	cmp    ax,0x315
c0015ade:	75 0a                	jne    c0015aea <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ae0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ae6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aed:	66 3d 16 03          	cmp    ax,0x316
c0015af1:	75 0a                	jne    c0015afd <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015af3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015af9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	66 3d 17 03          	cmp    ax,0x317
c0015b04:	75 0a                	jne    c0015b10 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015b06:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015b0c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b13:	66 3d 18 03          	cmp    ax,0x318
c0015b17:	75 0a                	jne    c0015b23 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015b19:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015b1f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b26:	66 3d 19 03          	cmp    ax,0x319
c0015b2a:	75 0a                	jne    c0015b36 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b2c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b32:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b39:	66 3d 00 02          	cmp    ax,0x200
c0015b3d:	75 2c                	jne    c0015b6b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b3f:	a0 00 f8 02 c0       	mov    al,ds:0xc002f800
c0015b44:	83 f0 01             	xor    eax,0x1
c0015b47:	84 c0                	test   al,al
c0015b49:	74 20                	je     c0015b6b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b4b:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0015b50:	6a 01                	push   0x1
c0015b52:	6a 00                	push   0x0
c0015b54:	68 a8 57 01 c0       	push   0xc00157a8
c0015b59:	50                   	push   eax
c0015b5a:	e8 c5 83 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	c6 05 00 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f800,0x1
c0015b69:	eb 33                	jmp    c0015b9e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6e:	66 3d 01 02          	cmp    ax,0x201
c0015b72:	75 2a                	jne    c0015b9e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b74:	a0 00 f8 02 c0       	mov    al,ds:0xc002f800
c0015b79:	83 f0 01             	xor    eax,0x1
c0015b7c:	84 c0                	test   al,al
c0015b7e:	74 1e                	je     c0015b9e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b80:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0015b85:	6a 01                	push   0x1
c0015b87:	6a 00                	push   0x0
c0015b89:	68 14 58 01 c0       	push   0xc0015814
c0015b8e:	50                   	push   eax
c0015b8f:	e8 90 83 00 00       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	c6 05 00 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f800,0x1
c0015b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba1:	66 3d 1d 03          	cmp    ax,0x31d
c0015ba5:	75 06                	jne    c0015bad <sendKeyboardToken(KeyboardToken)+0x26f>
c0015ba7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb0:	66 3d 1c 03          	cmp    ax,0x31c
c0015bb4:	75 06                	jne    c0015bbc <sendKeyboardToken(KeyboardToken)+0x27e>
c0015bb6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbf:	66 3d 1b 03          	cmp    ax,0x31b
c0015bc3:	75 06                	jne    c0015bcb <sendKeyboardToken(KeyboardToken)+0x28d>
c0015bc5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bce:	66 3d 1e 03          	cmp    ax,0x31e
c0015bd2:	75 06                	jne    c0015bda <sendKeyboardToken(KeyboardToken)+0x29c>
c0015bd4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdd:	66 3d 1f 03          	cmp    ax,0x31f
c0015be1:	75 06                	jne    c0015be9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015be3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bec:	66 3d 1a 03          	cmp    ax,0x31a
c0015bf0:	75 06                	jne    c0015bf8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bf2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bf8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bfc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bff:	83 f0 01             	xor    eax,0x1
c0015c02:	84 c0                	test   al,al
c0015c04:	74 77                	je     c0015c7d <sendKeyboardToken(KeyboardToken)+0x33f>
c0015c06:	a0 01 f5 02 c0       	mov    al,ds:0xc002f501
c0015c0b:	84 c0                	test   al,al
c0015c0d:	74 41                	je     c0015c50 <sendKeyboardToken(KeyboardToken)+0x312>
c0015c0f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c13:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015c17:	74 2b                	je     c0015c44 <sendKeyboardToken(KeyboardToken)+0x306>
c0015c19:	8b 15 04 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f804
c0015c1f:	89 d0                	mov    eax,edx
c0015c21:	c1 e0 02             	shl    eax,0x2
c0015c24:	01 d0                	add    eax,edx
c0015c26:	01 c0                	add    eax,eax
c0015c28:	a3 04 f8 02 c0       	mov    ds:0xc002f804,eax
c0015c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c30:	0f b7 c0             	movzx  eax,ax
c0015c33:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c36:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c0015c3b:	01 d0                	add    eax,edx
c0015c3d:	a3 04 f8 02 c0       	mov    ds:0xc002f804,eax
c0015c42:	eb 6d                	jmp    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c44:	c7 05 04 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f804,0x0
c0015c4e:	eb 61                	jmp    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c50:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c0015c55:	85 c0                	test   eax,eax
c0015c57:	74 18                	je     c0015c71 <sendKeyboardToken(KeyboardToken)+0x333>
c0015c59:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c0015c5e:	0f b6 c0             	movzx  eax,al
c0015c61:	83 ec 0c             	sub    esp,0xc
c0015c64:	50                   	push   eax
c0015c65:	e8 16 fc ff ff       	call   c0015880 <sendKeyToTerminal(unsigned char)>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c71:	c7 05 04 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f804,0x0
c0015c7b:	eb 34                	jmp    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c80:	66 3d 01 01          	cmp    ax,0x101
c0015c84:	75 2b                	jne    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c86:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c0015c8b:	85 c0                	test   eax,eax
c0015c8d:	74 18                	je     c0015ca7 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c8f:	a1 04 f8 02 c0       	mov    eax,ds:0xc002f804
c0015c94:	0f b6 c0             	movzx  eax,al
c0015c97:	83 ec 0c             	sub    esp,0xc
c0015c9a:	50                   	push   eax
c0015c9b:	e8 e0 fb ff ff       	call   c0015880 <sendKeyToTerminal(unsigned char)>
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ca7:	c7 05 04 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f804,0x0
c0015cb1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cb4:	83 f0 01             	xor    eax,0x1
c0015cb7:	84 c0                	test   al,al
c0015cb9:	74 4c                	je     c0015d07 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cbb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cbe:	83 f0 01             	xor    eax,0x1
c0015cc1:	84 c0                	test   al,al
c0015cc3:	74 42                	je     c0015d07 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc5:	a0 00 f5 02 c0       	mov    al,ds:0xc002f500
c0015cca:	83 f0 01             	xor    eax,0x1
c0015ccd:	84 c0                	test   al,al
c0015ccf:	74 36                	je     c0015d07 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd4:	66 83 f8 1f          	cmp    ax,0x1f
c0015cd8:	76 09                	jbe    c0015ce3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdd:	66 83 f8 7e          	cmp    ax,0x7e
c0015ce1:	76 12                	jbe    c0015cf5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce6:	66 83 f8 0a          	cmp    ax,0xa
c0015cea:	74 09                	je     c0015cf5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cef:	66 83 f8 08          	cmp    ax,0x8
c0015cf3:	75 12                	jne    c0015d07 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf8:	0f b6 c0             	movzx  eax,al
c0015cfb:	83 ec 0c             	sub    esp,0xc
c0015cfe:	50                   	push   eax
c0015cff:	e8 7c fb ff ff       	call   c0015880 <sendKeyToTerminal(unsigned char)>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d0a:	83 f0 01             	xor    eax,0x1
c0015d0d:	84 c0                	test   al,al
c0015d0f:	74 4f                	je     c0015d60 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d11:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d14:	83 f0 01             	xor    eax,0x1
c0015d17:	84 c0                	test   al,al
c0015d19:	74 45                	je     c0015d60 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d1b:	a0 00 f5 02 c0       	mov    al,ds:0xc002f500
c0015d20:	84 c0                	test   al,al
c0015d22:	74 3c                	je     c0015d60 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d27:	66 83 f8 3f          	cmp    ax,0x3f
c0015d2b:	76 33                	jbe    c0015d60 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d30:	66 83 f8 7f          	cmp    ax,0x7f
c0015d34:	77 2a                	ja     c0015d60 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d39:	88 c2                	mov    dl,al
c0015d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d3e:	66 83 f8 5f          	cmp    ax,0x5f
c0015d42:	76 04                	jbe    c0015d48 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d44:	b0 20                	mov    al,0x20
c0015d46:	eb 02                	jmp    c0015d4a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d48:	b0 00                	mov    al,0x0
c0015d4a:	29 c2                	sub    edx,eax
c0015d4c:	88 d0                	mov    al,dl
c0015d4e:	83 e8 40             	sub    eax,0x40
c0015d51:	0f b6 c0             	movzx  eax,al
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	50                   	push   eax
c0015d58:	e8 23 fb ff ff       	call   c0015880 <sendKeyToTerminal(unsigned char)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d63:	66 3d 00 03          	cmp    ax,0x300
c0015d67:	75 0f                	jne    c0015d78 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d69:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d6c:	83 f0 01             	xor    eax,0x1
c0015d6f:	84 c0                	test   al,al
c0015d71:	74 05                	je     c0015d78 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d73:	e8 ff a8 ff ff       	call   c0010677 <doTerminalCycle()>
c0015d78:	90                   	nop
c0015d79:	c9                   	leave  
c0015d7a:	c3                   	ret    

c0015d7b <clearInternalKeybuffer(VgaText*)>:
c0015d7b:	55                   	push   ebp
c0015d7c:	89 e5                	mov    ebp,esp
c0015d7e:	83 ec 08             	sub    esp,0x8
c0015d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d84:	05 98 01 00 00       	add    eax,0x198
c0015d89:	83 ec 0c             	sub    esp,0xc
c0015d8c:	50                   	push   eax
c0015d8d:	e8 da a9 fe ff       	call   c000076c <strlen>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d98:	81 c2 98 01 00 00    	add    edx,0x198
c0015d9e:	83 ec 04             	sub    esp,0x4
c0015da1:	50                   	push   eax
c0015da2:	6a 00                	push   0x0
c0015da4:	52                   	push   edx
c0015da5:	e8 a6 a9 fe ff       	call   c0000750 <memset>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	90                   	nop
c0015dae:	c9                   	leave  
c0015daf:	c3                   	ret    

c0015db0 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015db0:	55                   	push   ebp
c0015db1:	89 e5                	mov    ebp,esp
c0015db3:	83 ec 18             	sub    esp,0x18
c0015db6:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0015dbb:	85 c0                	test   eax,eax
c0015dbd:	74 2a                	je     c0015de9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015dbf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015dc5:	8b 0d e8 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3e8
c0015dcb:	83 ec 04             	sub    esp,0x4
c0015dce:	68 00 f4 02 c0       	push   0xc002f400
c0015dd3:	83 ec 08             	sub    esp,0x8
c0015dd6:	89 e2                	mov    edx,esp
c0015dd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ddb:	89 02                	mov    DWORD PTR [edx],eax
c0015ddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015de0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015de4:	ff d1                	call   ecx
c0015de6:	83 c4 10             	add    esp,0x10
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	68 5b bc 02 c0       	push   0xc002bc5b
c0015df1:	e8 05 cb ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	fb                   	sti    
c0015dfa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e01:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e05:	0f 84 a1 00 00 00    	je     c0015eac <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e14:	84 c0                	test   al,al
c0015e16:	75 28                	jne    c0015e40 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015e18:	fa                   	cli    
c0015e19:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015e1e:	40                   	inc    eax
c0015e1f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0015e24:	e8 3f 83 00 00       	call   c001e168 <schedule()>
c0015e29:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015e2e:	48                   	dec    eax
c0015e2f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0015e34:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0015e39:	85 c0                	test   eax,eax
c0015e3b:	75 ce                	jne    c0015e0b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e3d:	fb                   	sti    
c0015e3e:	eb cb                	jmp    c0015e0b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e43:	8d 50 01             	lea    edx,[eax+0x1]
c0015e46:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e4c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e52:	88 10                	mov    BYTE PTR [eax],dl
c0015e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e57:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e5d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e63:	05 98 01 00 00       	add    eax,0x198
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	50                   	push   eax
c0015e6c:	e8 fb a8 fe ff       	call   c000076c <strlen>
c0015e71:	83 c4 10             	add    esp,0x10
c0015e74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e77:	81 c2 98 01 00 00    	add    edx,0x198
c0015e7d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e83:	81 c2 98 01 00 00    	add    edx,0x198
c0015e89:	83 ec 04             	sub    esp,0x4
c0015e8c:	50                   	push   eax
c0015e8d:	51                   	push   ecx
c0015e8e:	52                   	push   edx
c0015e8f:	e8 f4 a7 fe ff       	call   c0000688 <memmove>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e9d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ea1:	0f 85 5a ff ff ff    	jne    c0015e01 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015ea7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eaa:	eb 03                	jmp    c0015eaf <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015eac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eaf:	c9                   	leave  
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop

c0015eb2 <Keyboard::Keyboard(char const*)>:
c0015eb2:	83 ec 0c             	sub    esp,0xc
c0015eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eb9:	83 ec 08             	sub    esp,0x8
c0015ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ec0:	50                   	push   eax
c0015ec1:	e8 72 e0 ff ff       	call   c0013f38 <Device::Device(char const*)>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	ba 7c bc 02 c0       	mov    edx,0xc002bc7c
c0015ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed2:	89 10                	mov    DWORD PTR [eax],edx
c0015ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ee2:	c6 05 e4 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3e4,0x1
c0015ee9:	90                   	nop
c0015eea:	83 c4 0c             	add    esp,0xc
c0015eed:	c3                   	ret    

c0015eee <Keyboard::~Keyboard()>:
c0015eee:	83 ec 0c             	sub    esp,0xc
c0015ef1:	ba 7c bc 02 c0       	mov    edx,0xc002bc7c
c0015ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efa:	89 10                	mov    DWORD PTR [eax],edx
c0015efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f00:	83 ec 0c             	sub    esp,0xc
c0015f03:	50                   	push   eax
c0015f04:	e8 f9 dc ff ff       	call   c0013c02 <Device::~Device()>
c0015f09:	83 c4 10             	add    esp,0x10
c0015f0c:	90                   	nop
c0015f0d:	83 c4 0c             	add    esp,0xc
c0015f10:	c3                   	ret    
c0015f11:	90                   	nop

c0015f12 <Keyboard::~Keyboard()>:
c0015f12:	83 ec 0c             	sub    esp,0xc
c0015f15:	83 ec 0c             	sub    esp,0xc
c0015f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1c:	e8 cd ff ff ff       	call   c0015eee <Keyboard::~Keyboard()>
c0015f21:	83 c4 10             	add    esp,0x10
c0015f24:	83 ec 08             	sub    esp,0x8
c0015f27:	68 5c 01 00 00       	push   0x15c
c0015f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f30:	e8 e6 c8 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	83 c4 0c             	add    esp,0xc
c0015f3b:	c3                   	ret    

c0015f3c <LogicalDisk::close(int, int, void*)>:
c0015f3c:	83 c8 ff             	or     eax,0xffffffff
c0015f3f:	c3                   	ret    

c0015f40 <LogicalDisk::~LogicalDisk()>:
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c0015f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4c:	89 10                	mov    DWORD PTR [eax],edx
c0015f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f52:	83 ec 0c             	sub    esp,0xc
c0015f55:	50                   	push   eax
c0015f56:	e8 a7 dc ff ff       	call   c0013c02 <Device::~Device()>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	90                   	nop
c0015f5f:	83 c4 0c             	add    esp,0xc
c0015f62:	c3                   	ret    
c0015f63:	90                   	nop

c0015f64 <LogicalDisk::~LogicalDisk()>:
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	83 ec 0c             	sub    esp,0xc
c0015f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f6e:	e8 cd ff ff ff       	call   c0015f40 <LogicalDisk::~LogicalDisk()>
c0015f73:	83 c4 10             	add    esp,0x10
c0015f76:	83 ec 08             	sub    esp,0x8
c0015f79:	68 74 01 00 00       	push   0x174
c0015f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f82:	e8 94 c8 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	83 c4 0c             	add    esp,0xc
c0015f8d:	c3                   	ret    

c0015f8e <LogicalDisk::open(int, int, void*)>:
c0015f8e:	83 ec 18             	sub    esp,0x18
c0015f91:	68 a8 bc 02 c0       	push   0xc002bca8
c0015f96:	e8 14 44 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0015f9b:	83 c8 ff             	or     eax,0xffffffff
c0015f9e:	83 c4 1c             	add    esp,0x1c
c0015fa1:	c3                   	ret    

c0015fa2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015fa2:	53                   	push   ebx
c0015fa3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015faf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015fb5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015fbb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015fc1:	77 10                	ja     c0015fd3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015fc3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015fc9:	89 d3                	mov    ebx,edx
c0015fcb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015fd1:	72 05                	jb     c0015fd8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fd3:	83 c8 ff             	or     eax,0xffffffff
c0015fd6:	89 c2                	mov    edx,eax
c0015fd8:	5b                   	pop    ebx
c0015fd9:	c3                   	ret    

c0015fda <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fda:	56                   	push   esi
c0015fdb:	83 c8 ff             	or     eax,0xffffffff
c0015fde:	53                   	push   ebx
c0015fdf:	89 c2                	mov    edx,eax
c0015fe1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fe5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ff3:	77 27                	ja     c001601c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ff5:	89 d8                	mov    eax,ebx
c0015ff7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ffd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016003:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016008:	89 c2                	mov    edx,eax
c001600a:	73 10                	jae    c001601c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001600c:	89 c8                	mov    eax,ecx
c001600e:	89 da                	mov    edx,ebx
c0016010:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016016:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001601c:	5b                   	pop    ebx
c001601d:	5e                   	pop    esi
c001601e:	c3                   	ret    
c001601f:	90                   	nop

c0016020 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016020:	83 ec 1c             	sub    esp,0x1c
c0016023:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001602b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001602f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016033:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016037:	89 04 24             	mov    DWORD PTR [esp],eax
c001603a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001603e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016046:	83 ec 08             	sub    esp,0x8
c0016049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001604d:	50                   	push   eax
c001604e:	e8 e5 de ff ff       	call   c0013f38 <Device::Device(char const*)>
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c001605b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001605f:	89 10                	mov    DWORD PTR [eax],edx
c0016061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016065:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001606c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016070:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001607b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016089:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001608d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016091:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016097:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001609d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160a8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00160ae:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00160b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160bc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00160c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00160d0:	90                   	nop
c00160d1:	83 c4 1c             	add    esp,0x1c
c00160d4:	c3                   	ret    
c00160d5:	90                   	nop

c00160d6 <LogicalDisk::assignDriveLetter()>:
c00160d6:	55                   	push   ebp
c00160d7:	57                   	push   edi
c00160d8:	56                   	push   esi
c00160d9:	53                   	push   ebx
c00160da:	83 ec 14             	sub    esp,0x14
c00160dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160e1:	8b 3d 20 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f820
c00160e7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160ed:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160f1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160f7:	8b 3d 24 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f824
c00160fd:	3c 01                	cmp    al,0x1
c00160ff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016107:	19 c0                	sbb    eax,eax
c0016109:	83 e0 02             	and    eax,0x2
c001610c:	83 c0 41             	add    eax,0x41
c001610f:	0f be e8             	movsx  ebp,al
c0016112:	3c 43                	cmp    al,0x43
c0016114:	75 10                	jne    c0016126 <LogicalDisk::assignDriveLetter()+0x50>
c0016116:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001611d:	75 5d                	jne    c001617c <LogicalDisk::assignDriveLetter()+0xa6>
c001611f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016124:	75 56                	jne    c001617c <LogicalDisk::assignDriveLetter()+0xa6>
c0016126:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016129:	ba 01 00 00 00       	mov    edx,0x1
c001612e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016132:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016136:	d3 e2                	shl    edx,cl
c0016138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001613c:	89 d7                	mov    edi,edx
c001613e:	89 d6                	mov    esi,edx
c0016140:	c1 ff 1f             	sar    edi,0x1f
c0016143:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016147:	21 f9                	and    ecx,edi
c0016149:	09 d1                	or     ecx,edx
c001614b:	75 2f                	jne    c001617c <LogicalDisk::assignDriveLetter()+0xa6>
c001614d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016151:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016155:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001615b:	09 f2                	or     edx,esi
c001615d:	89 15 20 f8 02 c0    	mov    DWORD PTR ds:0xc002f820,edx
c0016163:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016167:	09 fa                	or     edx,edi
c0016169:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001616d:	89 15 24 f8 02 c0    	mov    DWORD PTR ds:0xc002f824,edx
c0016173:	89 1c bd 40 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd07c0],ebx
c001617a:	eb 08                	jmp    c0016184 <LogicalDisk::assignDriveLetter()+0xae>
c001617c:	45                   	inc    ebp
c001617d:	40                   	inc    eax
c001617e:	3c 5b                	cmp    al,0x5b
c0016180:	75 90                	jne    c0016112 <LogicalDisk::assignDriveLetter()+0x3c>
c0016182:	31 c0                	xor    eax,eax
c0016184:	83 c4 14             	add    esp,0x14
c0016187:	5b                   	pop    ebx
c0016188:	5e                   	pop    esi
c0016189:	5f                   	pop    edi
c001618a:	5d                   	pop    ebp
c001618b:	c3                   	ret    

c001618c <LogicalDisk::mount()>:
c001618c:	56                   	push   esi
c001618d:	53                   	push   ebx
c001618e:	50                   	push   eax
c001618f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016193:	8b 1d b4 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b4
c0016199:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00161a3:	85 db                	test   ebx,ebx
c00161a5:	74 50                	je     c00161f7 <LogicalDisk::mount()+0x6b>
c00161a7:	50                   	push   eax
c00161a8:	50                   	push   eax
c00161a9:	ff 35 68 27 03 c0    	push   DWORD PTR ds:0xc0032768
c00161af:	68 cc bc 02 c0       	push   0xc002bccc
c00161b4:	e8 42 c7 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00161b9:	83 c4 0c             	add    esp,0xc
c00161bc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00161c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161c5:	83 e8 41             	sub    eax,0x41
c00161c8:	50                   	push   eax
c00161c9:	56                   	push   esi
c00161ca:	53                   	push   ebx
c00161cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	84 c0                	test   al,al
c00161d3:	74 08                	je     c00161dd <LogicalDisk::mount()+0x51>
c00161d5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161db:	eb 1c                	jmp    c00161f9 <LogicalDisk::mount()+0x6d>
c00161dd:	51                   	push   ecx
c00161de:	51                   	push   ecx
c00161df:	ff 35 68 27 03 c0    	push   DWORD PTR ds:0xc0032768
c00161e5:	68 e7 bc 02 c0       	push   0xc002bce7
c00161ea:	e8 0c c7 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00161ef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	eb ac                	jmp    c00161a3 <LogicalDisk::mount()+0x17>
c00161f7:	31 c0                	xor    eax,eax
c00161f9:	5a                   	pop    edx
c00161fa:	5b                   	pop    ebx
c00161fb:	5e                   	pop    esi
c00161fc:	c3                   	ret    
c00161fd:	90                   	nop

c00161fe <LogicalDisk::unmount()>:
c00161fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016202:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001620c:	c3                   	ret    
c001620d:	90                   	nop

c001620e <LogicalDisk::eject()>:
c001620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016212:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016218:	8b 10                	mov    edx,DWORD PTR [eax]
c001621a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001621e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016221:	90                   	nop

c0016222 <LogicalDisk::unassignDriveLetter()>:
c0016222:	57                   	push   edi
c0016223:	56                   	push   esi
c0016224:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016228:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001622f:	84 c9                	test   cl,cl
c0016231:	75 0f                	jne    c0016242 <LogicalDisk::unassignDriveLetter()+0x20>
c0016233:	c7 44 24 0c 02 bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bd02
c001623b:	5e                   	pop    esi
c001623c:	5f                   	pop    edi
c001623d:	e9 6d 41 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c0016242:	83 e9 41             	sub    ecx,0x41
c0016245:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001624c:	b8 01 00 00 00       	mov    eax,0x1
c0016251:	c7 04 8d 40 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd07c0],0x0
c001625c:	d3 e0                	shl    eax,cl
c001625e:	89 c7                	mov    edi,eax
c0016260:	f7 d0                	not    eax
c0016262:	c1 ff 1f             	sar    edi,0x1f
c0016265:	21 05 20 f8 02 c0    	and    DWORD PTR ds:0xc002f820,eax
c001626b:	89 fe                	mov    esi,edi
c001626d:	f7 d6                	not    esi
c001626f:	21 35 24 f8 02 c0    	and    DWORD PTR ds:0xc002f824,esi
c0016275:	5e                   	pop    esi
c0016276:	5f                   	pop    edi
c0016277:	c3                   	ret    

c0016278 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016278:	57                   	push   edi
c0016279:	56                   	push   esi
c001627a:	53                   	push   ebx
c001627b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001627f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016283:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001628b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016291:	77 41                	ja     c00162d4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016293:	99                   	cdq    
c0016294:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001629a:	01 c8                	add    eax,ecx
c001629c:	11 da                	adc    edx,ebx
c001629e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162a4:	19 d7                	sbb    edi,edx
c00162a6:	72 33                	jb     c00162db <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00162a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162cc:	5b                   	pop    ebx
c00162cd:	5e                   	pop    esi
c00162ce:	5f                   	pop    edi
c00162cf:	e9 ec 0a 00 00       	jmp    c0016dc0 <VCache::read(unsigned long long, int, void*)>
c00162d4:	b8 05 00 00 00       	mov    eax,0x5
c00162d9:	eb 05                	jmp    c00162e0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162db:	b8 07 00 00 00       	mov    eax,0x7
c00162e0:	5b                   	pop    ebx
c00162e1:	5e                   	pop    esi
c00162e2:	5f                   	pop    edi
c00162e3:	c3                   	ret    

c00162e4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00162e4:	57                   	push   edi
c00162e5:	56                   	push   esi
c00162e6:	53                   	push   ebx
c00162e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162fd:	77 41                	ja     c0016340 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162ff:	99                   	cdq    
c0016300:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016306:	01 c8                	add    eax,ecx
c0016308:	11 da                	adc    edx,ebx
c001630a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016310:	19 d7                	sbb    edi,edx
c0016312:	72 33                	jb     c0016347 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016314:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001631a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016320:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016324:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016328:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001632e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016334:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016338:	5b                   	pop    ebx
c0016339:	5e                   	pop    esi
c001633a:	5f                   	pop    edi
c001633b:	e9 96 09 00 00       	jmp    c0016cd6 <VCache::write(unsigned long long, int, void*)>
c0016340:	b8 05 00 00 00       	mov    eax,0x5
c0016345:	eb 05                	jmp    c001634c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016347:	b8 07 00 00 00       	mov    eax,0x7
c001634c:	5b                   	pop    ebx
c001634d:	5e                   	pop    esi
c001634e:	5f                   	pop    edi
c001634f:	c3                   	ret    

c0016350 <Mouse::Mouse(char const*)>:
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016357:	83 ec 08             	sub    esp,0x8
c001635a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635e:	50                   	push   eax
c001635f:	e8 d4 db ff ff       	call   c0013f38 <Device::Device(char const*)>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	89 10                	mov    DWORD PTR [eax],edx
c0016372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016376:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016380:	90                   	nop
c0016381:	83 c4 0c             	add    esp,0xc
c0016384:	c3                   	ret    
c0016385:	90                   	nop

c0016386 <Mouse::~Mouse()>:
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c001638e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016392:	89 10                	mov    DWORD PTR [eax],edx
c0016394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	50                   	push   eax
c001639c:	e8 61 d8 ff ff       	call   c0013c02 <Device::~Device()>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	90                   	nop
c00163a5:	83 c4 0c             	add    esp,0xc
c00163a8:	c3                   	ret    
c00163a9:	90                   	nop

c00163aa <Mouse::~Mouse()>:
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	83 ec 0c             	sub    esp,0xc
c00163b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b4:	e8 cd ff ff ff       	call   c0016386 <Mouse::~Mouse()>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	83 ec 08             	sub    esp,0x8
c00163bf:	68 58 01 00 00       	push   0x158
c00163c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c8:	e8 4e c4 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	83 c4 0c             	add    esp,0xc
c00163d3:	c3                   	ret    

c00163d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163d4:	55                   	push   ebp
c00163d5:	57                   	push   edi
c00163d6:	56                   	push   esi
c00163d7:	53                   	push   ebx
c00163d8:	81 ec 20 01 00 00    	sub    esp,0x120
c00163de:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163e5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163ec:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163f3:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016402:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016406:	56                   	push   esi
c0016407:	68 7c bd 02 c0       	push   0xc002bd7c
c001640c:	e8 ea c4 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0016411:	58                   	pop    eax
c0016412:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016419:	e8 16 dc ff ff       	call   c0014034 <Device::getName()>
c001641e:	5a                   	pop    edx
c001641f:	59                   	pop    ecx
c0016420:	50                   	push   eax
c0016421:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016425:	53                   	push   ebx
c0016426:	e8 e1 a3 fe ff       	call   c000080c <strcpy>
c001642b:	5d                   	pop    ebp
c001642c:	58                   	pop    eax
c001642d:	68 ad bd 02 c0       	push   0xc002bdad
c0016432:	53                   	push   ebx
c0016433:	e8 14 a5 fe ff       	call   c000094c <strcat>
c0016438:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001643f:	e8 be 94 ff ff       	call   c000f902 <malloc>
c0016444:	83 c4 0c             	add    esp,0xc
c0016447:	89 c5                	mov    ebp,eax
c0016449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001644d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016451:	57                   	push   edi
c0016452:	56                   	push   esi
c0016453:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001645a:	53                   	push   ebx
c001645b:	50                   	push   eax
c001645c:	e8 bf fb ff ff       	call   c0016020 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016461:	83 c4 14             	add    esp,0x14
c0016464:	55                   	push   ebp
c0016465:	e8 6c fc ff ff       	call   c00160d6 <LogicalDisk::assignDriveLetter()>
c001646a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001646d:	0f be d8             	movsx  ebx,al
c0016470:	e8 17 fd ff ff       	call   c001618c <LogicalDisk::mount()>
c0016475:	58                   	pop    eax
c0016476:	5a                   	pop    edx
c0016477:	55                   	push   ebp
c0016478:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001647f:	e8 b0 d8 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c0016484:	59                   	pop    ecx
c0016485:	5e                   	pop    esi
c0016486:	53                   	push   ebx
c0016487:	68 b8 bd 02 c0       	push   0xc002bdb8
c001648c:	e8 6a c4 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0016491:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016497:	5b                   	pop    ebx
c0016498:	5e                   	pop    esi
c0016499:	5f                   	pop    edi
c001649a:	5d                   	pop    ebp
c001649b:	c3                   	ret    

c001649c <createPartitionsForDisk(PhysicalDisk*)>:
c001649c:	55                   	push   ebp
c001649d:	57                   	push   edi
c001649e:	56                   	push   esi
c001649f:	53                   	push   ebx
c00164a0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164a6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164ad:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00164b3:	3d 00 02 00 00       	cmp    eax,0x200
c00164b8:	74 27                	je     c00164e1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00164ba:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00164c0:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00164c6:	83 ec 10             	sub    esp,0x10
c00164c9:	0f a4 f7 0a          	shld   edi,esi,0xa
c00164cd:	99                   	cdq    
c00164ce:	c1 e6 0a             	shl    esi,0xa
c00164d1:	52                   	push   edx
c00164d2:	89 fd                	mov    ebp,edi
c00164d4:	50                   	push   eax
c00164d5:	55                   	push   ebp
c00164d6:	56                   	push   esi
c00164d7:	e8 f8 0d 01 00       	call   c00272d4 <__udivdi3>
c00164dc:	e9 b1 00 00 00       	jmp    c0016592 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164e1:	83 ec 0c             	sub    esp,0xc
c00164e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164e6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164ea:	56                   	push   esi
c00164eb:	6a 01                	push   0x1
c00164ed:	6a 00                	push   0x0
c00164ef:	6a 00                	push   0x0
c00164f1:	53                   	push   ebx
c00164f2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164f5:	83 c4 20             	add    esp,0x20
c00164f8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016500:	75 0a                	jne    c001650c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016502:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001650a:	74 2c                	je     c0016538 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001650c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016512:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016518:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001651e:	83 ec 10             	sub    esp,0x10
c0016521:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016525:	89 f7                	mov    edi,esi
c0016527:	c1 e0 0a             	shl    eax,0xa
c001652a:	c1 ff 1f             	sar    edi,0x1f
c001652d:	57                   	push   edi
c001652e:	56                   	push   esi
c001652f:	52                   	push   edx
c0016530:	50                   	push   eax
c0016531:	e8 9e 0d 01 00       	call   c00272d4 <__udivdi3>
c0016536:	eb 5a                	jmp    c0016592 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016538:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001653f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016546:	83 e1 7f             	and    ecx,0x7f
c0016549:	83 e0 7f             	and    eax,0x7f
c001654c:	01 c1                	add    ecx,eax
c001654e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016555:	83 e0 7f             	and    eax,0x7f
c0016558:	01 c1                	add    ecx,eax
c001655a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016561:	83 e0 7f             	and    eax,0x7f
c0016564:	00 c1                	add    cl,al
c0016566:	74 41                	je     c00165a9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016568:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001656e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016574:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001657a:	83 ec 10             	sub    esp,0x10
c001657d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016581:	89 f7                	mov    edi,esi
c0016583:	c1 e0 0a             	shl    eax,0xa
c0016586:	c1 ff 1f             	sar    edi,0x1f
c0016589:	57                   	push   edi
c001658a:	56                   	push   esi
c001658b:	52                   	push   edx
c001658c:	50                   	push   eax
c001658d:	e8 42 0d 01 00       	call   c00272d4 <__udivdi3>
c0016592:	83 c4 14             	add    esp,0x14
c0016595:	52                   	push   edx
c0016596:	50                   	push   eax
c0016597:	6a 00                	push   0x0
c0016599:	6a 00                	push   0x0
c001659b:	53                   	push   ebx
c001659c:	e8 33 fe ff ff       	call   c00163d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00165a1:	83 c4 20             	add    esp,0x20
c00165a4:	e9 79 01 00 00       	jmp    c0016722 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165a9:	89 f0                	mov    eax,esi
c00165ab:	31 f6                	xor    esi,esi
c00165ad:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00165b4:	75 02                	jne    c00165b8 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00165b6:	89 f1                	mov    ecx,esi
c00165b8:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00165bf:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00165c6:	c1 e2 08             	shl    edx,0x8
c00165c9:	c1 e7 10             	shl    edi,0x10
c00165cc:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165d4:	09 fa                	or     edx,edi
c00165d6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165de:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165e5:	83 c0 10             	add    eax,0x10
c00165e8:	09 fa                	or     edx,edi
c00165ea:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165f1:	c1 e7 18             	shl    edi,0x18
c00165f4:	09 fa                	or     edx,edi
c00165f6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165fd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016601:	c1 e7 10             	shl    edi,0x10
c0016604:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001660b:	c1 e2 08             	shl    edx,0x8
c001660e:	09 fa                	or     edx,edi
c0016610:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016617:	09 fa                	or     edx,edi
c0016619:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016620:	c1 e7 18             	shl    edi,0x18
c0016623:	09 fa                	or     edx,edi
c0016625:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016629:	46                   	inc    esi
c001662a:	83 fe 04             	cmp    esi,0x4
c001662d:	0f 85 7a ff ff ff    	jne    c00165ad <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016637:	83 f0 01             	xor    eax,0x1
c001663a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001663e:	75 57                	jne    c0016697 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016644:	83 f0 01             	xor    eax,0x1
c0016647:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001664b:	75 4a                	jne    c0016697 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001664d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016651:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016659:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016661:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016667:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001666d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016673:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016677:	89 f7                	mov    edi,esi
c0016679:	c1 e0 0a             	shl    eax,0xa
c001667c:	c1 ff 1f             	sar    edi,0x1f
c001667f:	57                   	push   edi
c0016680:	56                   	push   esi
c0016681:	52                   	push   edx
c0016682:	50                   	push   eax
c0016683:	e8 4c 0c 01 00       	call   c00272d4 <__udivdi3>
c0016688:	83 c4 10             	add    esp,0x10
c001668b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001668f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016693:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016697:	84 c9                	test   cl,cl
c0016699:	74 53                	je     c00166ee <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001669b:	0f b6 c9             	movzx  ecx,cl
c001669e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166a6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166aa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166b6:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00166ba:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00166be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00166c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166ce:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166d2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166d6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166da:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166e6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166ea:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166ee:	31 ed                	xor    ebp,ebp
c00166f0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166f4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166f8:	89 f8                	mov    eax,edi
c00166fa:	09 f0                	or     eax,esi
c00166fc:	74 1e                	je     c001671c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166fe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016702:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016706:	89 d1                	mov    ecx,edx
c0016708:	09 c1                	or     ecx,eax
c001670a:	74 10                	je     c001671c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	57                   	push   edi
c0016710:	56                   	push   esi
c0016711:	52                   	push   edx
c0016712:	50                   	push   eax
c0016713:	53                   	push   ebx
c0016714:	e8 bb fc ff ff       	call   c00163d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016719:	83 c4 20             	add    esp,0x20
c001671c:	45                   	inc    ebp
c001671d:	83 fd 04             	cmp    ebp,0x4
c0016720:	75 ce                	jne    c00166f0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016722:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016728:	5b                   	pop    ebx
c0016729:	5e                   	pop    esi
c001672a:	5f                   	pop    edi
c001672b:	5d                   	pop    ebp
c001672c:	c3                   	ret    
c001672d:	90                   	nop

c001672e <Serial::Serial(char const*)>:
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016735:	83 ec 08             	sub    esp,0x8
c0016738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001673c:	50                   	push   eax
c001673d:	e8 f6 d7 ff ff       	call   c0013f38 <Device::Device(char const*)>
c0016742:	83 c4 10             	add    esp,0x10
c0016745:	ba e4 bd 02 c0       	mov    edx,0xc002bde4
c001674a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674e:	89 10                	mov    DWORD PTR [eax],edx
c0016750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016754:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001675e:	90                   	nop
c001675f:	83 c4 0c             	add    esp,0xc
c0016762:	c3                   	ret    
c0016763:	90                   	nop

c0016764 <Serial::~Serial()>:
c0016764:	83 ec 0c             	sub    esp,0xc
c0016767:	ba e4 bd 02 c0       	mov    edx,0xc002bde4
c001676c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016770:	89 10                	mov    DWORD PTR [eax],edx
c0016772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	50                   	push   eax
c001677a:	e8 83 d4 ff ff       	call   c0013c02 <Device::~Device()>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	90                   	nop
c0016783:	83 c4 0c             	add    esp,0xc
c0016786:	c3                   	ret    
c0016787:	90                   	nop

c0016788 <Serial::~Serial()>:
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	83 ec 0c             	sub    esp,0xc
c001678e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016792:	e8 cd ff ff ff       	call   c0016764 <Serial::~Serial()>
c0016797:	83 c4 10             	add    esp,0x10
c001679a:	83 ec 08             	sub    esp,0x8
c001679d:	68 58 01 00 00       	push   0x158
c00167a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a6:	e8 70 c0 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	83 c4 0c             	add    esp,0xc
c00167b1:	c3                   	ret    

c00167b2 <Timer::Timer(char const*)>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b9:	83 ec 08             	sub    esp,0x8
c00167bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c0:	50                   	push   eax
c00167c1:	e8 72 d7 ff ff       	call   c0013f38 <Device::Device(char const*)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	ba 28 be 02 c0       	mov    edx,0xc002be28
c00167ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d2:	89 10                	mov    DWORD PTR [eax],edx
c00167d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167e2:	90                   	nop
c00167e3:	83 c4 0c             	add    esp,0xc
c00167e6:	c3                   	ret    
c00167e7:	90                   	nop

c00167e8 <Timer::~Timer()>:
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	ba 28 be 02 c0       	mov    edx,0xc002be28
c00167f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f4:	89 10                	mov    DWORD PTR [eax],edx
c00167f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	50                   	push   eax
c00167fe:	e8 ff d3 ff ff       	call   c0013c02 <Device::~Device()>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	90                   	nop
c0016807:	83 c4 0c             	add    esp,0xc
c001680a:	c3                   	ret    
c001680b:	90                   	nop

c001680c <Timer::~Timer()>:
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	83 ec 0c             	sub    esp,0xc
c0016812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016816:	e8 cd ff ff ff       	call   c00167e8 <Timer::~Timer()>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	83 ec 08             	sub    esp,0x8
c0016821:	68 5c 01 00 00       	push   0x15c
c0016826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682a:	e8 ec bf ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	83 c4 0c             	add    esp,0xc
c0016835:	c3                   	ret    

c0016836 <Timer::read()>:
c0016836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001683a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016840:	c3                   	ret    

c0016841 <timerHandler(unsigned long long)>:
c0016841:	55                   	push   ebp
c0016842:	57                   	push   edi
c0016843:	56                   	push   esi
c0016844:	53                   	push   ebx
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001684c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016850:	01 35 b0 f8 02 c0    	add    DWORD PTR ds:0xc002f8b0,esi
c0016856:	11 3d b4 f8 02 c0    	adc    DWORD PTR ds:0xc002f8b4,edi
c001685c:	80 3d 4d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f24d,0x0
c0016863:	0f 84 42 01 00 00    	je     c00169ab <timerHandler(unsigned long long)+0x16a>
c0016869:	fa                   	cli    
c001686a:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c0016870:	83 ec 0c             	sub    esp,0xc
c0016873:	ff 05 64 27 03 c0    	inc    DWORD PTR ds:0xc0032764
c0016879:	68 78 27 03 c0       	push   0xc0032778
c001687e:	e8 d7 2a 01 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	84 c0                	test   al,al
c0016888:	0f 85 a2 00 00 00    	jne    c0016930 <timerHandler(unsigned long long)+0xef>
c001688e:	83 ec 0c             	sub    esp,0xc
c0016891:	68 78 27 03 c0       	push   0xc0032778
c0016896:	e8 db 2a 01 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001689b:	83 c4 10             	add    esp,0x10
c001689e:	89 c3                	mov    ebx,eax
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	68 78 27 03 c0       	push   0xc0032778
c00168a8:	e8 c9 2a 01 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168ad:	c7 04 24 78 27 03 c0 	mov    DWORD PTR [esp],0xc0032778
c00168b4:	89 c5                	mov    ebp,eax
c00168b6:	e8 c3 2a 01 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168bb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00168be:	83 c4 10             	add    esp,0x10
c00168c1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00168c4:	39 15 b0 f8 02 c0    	cmp    DWORD PTR ds:0xc002f8b0,edx
c00168ca:	a1 b4 f8 02 c0       	mov    eax,ds:0xc002f8b4
c00168cf:	19 c8                	sbb    eax,ecx
c00168d1:	72 21                	jb     c00168f4 <timerHandler(unsigned long long)+0xb3>
c00168d3:	83 ec 0c             	sub    esp,0xc
c00168d6:	55                   	push   ebp
c00168d7:	e8 50 7d 00 00       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c00168dc:	83 c4 10             	add    esp,0x10
c00168df:	39 eb                	cmp    ebx,ebp
c00168e1:	75 21                	jne    c0016904 <timerHandler(unsigned long long)+0xc3>
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	68 78 27 03 c0       	push   0xc0032778
c00168eb:	e8 86 2a 01 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f0:	89 c3                	mov    ebx,eax
c00168f2:	eb 0d                	jmp    c0016901 <timerHandler(unsigned long long)+0xc0>
c00168f4:	50                   	push   eax
c00168f5:	50                   	push   eax
c00168f6:	55                   	push   ebp
c00168f7:	68 78 27 03 c0       	push   0xc0032778
c00168fc:	e8 2b 2b 01 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016901:	83 c4 10             	add    esp,0x10
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	68 78 27 03 c0       	push   0xc0032778
c001690c:	e8 49 2a 01 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016911:	83 c4 10             	add    esp,0x10
c0016914:	84 c0                	test   al,al
c0016916:	75 18                	jne    c0016930 <timerHandler(unsigned long long)+0xef>
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	68 78 27 03 c0       	push   0xc0032778
c0016920:	e8 51 2a 01 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	39 d8                	cmp    eax,ebx
c001692a:	0f 85 70 ff ff ff    	jne    c00168a0 <timerHandler(unsigned long long)+0x5f>
c0016930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016935:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016939:	74 3d                	je     c0016978 <timerHandler(unsigned long long)+0x137>
c001693b:	80 3d 4c f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f24c,0x0
c0016942:	74 34                	je     c0016978 <timerHandler(unsigned long long)+0x137>
c0016944:	fa                   	cli    
c0016945:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001694b:	31 d2                	xor    edx,edx
c001694d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016952:	89 f9                	mov    ecx,edi
c0016954:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001695c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001695f:	39 c6                	cmp    esi,eax
c0016961:	19 d1                	sbb    ecx,edx
c0016963:	72 05                	jb     c001696a <timerHandler(unsigned long long)+0x129>
c0016965:	e8 fe 77 00 00       	call   c001e168 <schedule()>
c001696a:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001696f:	48                   	dec    eax
c0016970:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0016975:	75 01                	jne    c0016978 <timerHandler(unsigned long long)+0x137>
c0016977:	fb                   	sti    
c0016978:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001697d:	48                   	dec    eax
c001697e:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c0016983:	75 18                	jne    c001699d <timerHandler(unsigned long long)+0x15c>
c0016985:	83 3d 60 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032760,0x0
c001698c:	74 0f                	je     c001699d <timerHandler(unsigned long long)+0x15c>
c001698e:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c0016998:	e8 cb 77 00 00       	call   c001e168 <schedule()>
c001699d:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c00169a2:	48                   	dec    eax
c00169a3:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c00169a8:	75 01                	jne    c00169ab <timerHandler(unsigned long long)+0x16a>
c00169aa:	fb                   	sti    
c00169ab:	83 c4 0c             	add    esp,0xc
c00169ae:	5b                   	pop    ebx
c00169af:	5e                   	pop    esi
c00169b0:	5f                   	pop    edi
c00169b1:	5d                   	pop    ebp
c00169b2:	c3                   	ret    

c00169b3 <setupTimer(int)>:
c00169b3:	57                   	push   edi
c00169b4:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00169b9:	56                   	push   esi
c00169ba:	53                   	push   ebx
c00169bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169c5:	83 ec 0c             	sub    esp,0xc
c00169c8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169ce:	e8 61 d6 ff ff       	call   c0014034 <Device::getName()>
c00169d3:	83 c4 10             	add    esp,0x10
c00169d6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169d9:	0f 85 8d 00 00 00    	jne    c0016a6c <setupTimer(int)+0xb9>
c00169df:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00169e4:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169eb:	74 7f                	je     c0016a6c <setupTimer(int)+0xb9>
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	68 5c 01 00 00       	push   0x15c
c00169f5:	e8 08 8f ff ff       	call   c000f902 <malloc>
c00169fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00169fd:	89 c3                	mov    ebx,eax
c00169ff:	e8 a8 04 01 00       	call   c0026eac <PIT::PIT()>
c0016a04:	59                   	pop    ecx
c0016a05:	5f                   	pop    edi
c0016a06:	53                   	push   ebx
c0016a07:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c0016a0d:	e8 22 d3 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c0016a12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a14:	6a 00                	push   0x0
c0016a16:	6a 00                	push   0x0
c0016a18:	56                   	push   esi
c0016a19:	53                   	push   ebx
c0016a1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a1d:	83 c4 14             	add    esp,0x14
c0016a20:	68 60 01 00 00       	push   0x160
c0016a25:	e8 d8 8e ff ff       	call   c000f902 <malloc>
c0016a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a2d:	89 c7                	mov    edi,eax
c0016a2f:	e8 28 03 01 00       	call   c0026d5c <APICTimer::APICTimer()>
c0016a34:	6a 00                	push   0x0
c0016a36:	6a 00                	push   0x0
c0016a38:	56                   	push   esi
c0016a39:	57                   	push   edi
c0016a3a:	e8 1f 02 01 00       	call   c0026c5e <APICTimer::open(int, int, void*)>
c0016a3f:	83 c4 20             	add    esp,0x20
c0016a42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a44:	6a 00                	push   0x0
c0016a46:	6a 00                	push   0x0
c0016a48:	6a 00                	push   0x0
c0016a4a:	53                   	push   ebx
c0016a4b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a4e:	58                   	pop    eax
c0016a4f:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0016a54:	5a                   	pop    edx
c0016a55:	57                   	push   edi
c0016a56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a5c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a62:	e8 cd d2 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c0016a67:	83 c4 10             	add    esp,0x10
c0016a6a:	eb 33                	jmp    c0016a9f <setupTimer(int)+0xec>
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	68 5c 01 00 00       	push   0x15c
c0016a74:	e8 89 8e ff ff       	call   c000f902 <malloc>
c0016a79:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a7c:	89 c3                	mov    ebx,eax
c0016a7e:	e8 29 04 01 00       	call   c0026eac <PIT::PIT()>
c0016a83:	58                   	pop    eax
c0016a84:	5a                   	pop    edx
c0016a85:	53                   	push   ebx
c0016a86:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c0016a8c:	e8 a3 d2 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c0016a91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a93:	6a 00                	push   0x0
c0016a95:	6a 00                	push   0x0
c0016a97:	56                   	push   esi
c0016a98:	53                   	push   ebx
c0016a99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a9c:	83 c4 20             	add    esp,0x20
c0016a9f:	89 d8                	mov    eax,ebx
c0016aa1:	5b                   	pop    ebx
c0016aa2:	5e                   	pop    esi
c0016aa3:	5f                   	pop    edi
c0016aa4:	c3                   	ret    
c0016aa5:	90                   	nop

c0016aa6 <VCache::VCache(PhysicalDisk*)>:
c0016aa6:	53                   	push   ebx
c0016aa7:	83 ec 18             	sub    esp,0x18
c0016aaa:	ba 58 be 02 c0       	mov    edx,0xc002be58
c0016aaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab3:	89 10                	mov    DWORD PTR [eax],edx
c0016ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ad6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ae8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afe:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b06:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b0d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b18:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b20:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b28:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b30:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b37:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b3f:	83 ec 0c             	sub    esp,0xc
c0016b42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b46:	e8 b7 8d ff ff       	call   c000f902 <malloc>
c0016b4b:	83 c4 10             	add    esp,0x10
c0016b4e:	89 c3                	mov    ebx,eax
c0016b50:	83 ec 0c             	sub    esp,0xc
c0016b53:	53                   	push   ebx
c0016b54:	e8 b9 73 00 00       	call   c001df12 <Mutex::Mutex()>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b60:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b72:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b7d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b8e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b9a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b9e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ba1:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bb6:	05 00 01 00 00       	add    eax,0x100
c0016bbb:	c1 e0 04             	shl    eax,0x4
c0016bbe:	83 ec 0c             	sub    esp,0xc
c0016bc1:	50                   	push   eax
c0016bc2:	e8 3b 8d ff ff       	call   c000f902 <malloc>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	89 c2                	mov    edx,eax
c0016bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd7:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016be6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bf0:	c1 e0 07             	shl    eax,0x7
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	50                   	push   eax
c0016bf7:	e8 06 8d ff ff       	call   c000f902 <malloc>
c0016bfc:	83 c4 10             	add    esp,0x10
c0016bff:	89 c2                	mov    edx,eax
c0016c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c05:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c08:	90                   	nop
c0016c09:	83 c4 18             	add    esp,0x18
c0016c0c:	5b                   	pop    ebx
c0016c0d:	c3                   	ret    

c0016c0e <VCache::invalidateReadBuffer()>:
c0016c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c12:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c18:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <VCache::writeWriteBuffer()>:
c0016c1e:	53                   	push   ebx
c0016c1f:	83 ec 14             	sub    esp,0x14
c0016c22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c29:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c2b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c2e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c31:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c34:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c37:	50                   	push   eax
c0016c38:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c3b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c42:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c49:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c4d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c54:	83 c4 28             	add    esp,0x28
c0016c57:	5b                   	pop    ebx
c0016c58:	c3                   	ret    
c0016c59:	90                   	nop

c0016c5a <VCache::~VCache()>:
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	ba 58 be 02 c0       	mov    edx,0xc002be58
c0016c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c66:	89 10                	mov    DWORD PTR [eax],edx
c0016c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c6f:	84 c0                	test   al,al
c0016c71:	74 0f                	je     c0016c82 <VCache::~VCache()+0x28>
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7a:	e8 9f ff ff ff       	call   c0016c1e <VCache::writeWriteBuffer()>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c86:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c89:	83 ec 0c             	sub    esp,0xc
c0016c8c:	50                   	push   eax
c0016c8d:	e8 80 8c ff ff       	call   c000f912 <free>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	50                   	push   eax
c0016ca0:	e8 6d 8c ff ff       	call   c000f912 <free>
c0016ca5:	83 c4 10             	add    esp,0x10
c0016ca8:	90                   	nop
c0016ca9:	83 c4 0c             	add    esp,0xc
c0016cac:	c3                   	ret    
c0016cad:	90                   	nop

c0016cae <VCache::~VCache()>:
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	83 ec 0c             	sub    esp,0xc
c0016cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb8:	e8 9d ff ff ff       	call   c0016c5a <VCache::~VCache()>
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	83 ec 08             	sub    esp,0x8
c0016cc3:	6a 44                	push   0x44
c0016cc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc9:	e8 4d bb ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0016cce:	83 c4 10             	add    esp,0x10
c0016cd1:	83 c4 0c             	add    esp,0xc
c0016cd4:	c3                   	ret    
c0016cd5:	90                   	nop

c0016cd6 <VCache::write(unsigned long long, int, void*)>:
c0016cd6:	55                   	push   ebp
c0016cd7:	57                   	push   edi
c0016cd8:	56                   	push   esi
c0016cd9:	53                   	push   ebx
c0016cda:	83 ec 18             	sub    esp,0x18
c0016cdd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ce1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ce5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ce9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cec:	e8 af 77 00 00       	call   c001e4a0 <Semaphore::acquire()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016cf8:	74 0c                	je     c0016d06 <VCache::write(unsigned long long, int, void*)+0x30>
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	53                   	push   ebx
c0016cfe:	e8 0b ff ff ff       	call   c0016c0e <VCache::invalidateReadBuffer()>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d0a:	74 5c                	je     c0016d68 <VCache::write(unsigned long long, int, void*)+0x92>
c0016d0c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016d0f:	89 e8                	mov    eax,ebp
c0016d11:	99                   	cdq    
c0016d12:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d15:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d18:	89 c1                	mov    ecx,eax
c0016d1a:	89 d0                	mov    eax,edx
c0016d1c:	31 f1                	xor    ecx,esi
c0016d1e:	31 f8                	xor    eax,edi
c0016d20:	09 c1                	or     ecx,eax
c0016d22:	75 38                	jne    c0016d5c <VCache::write(unsigned long long, int, void*)+0x86>
c0016d24:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016d29:	75 31                	jne    c0016d5c <VCache::write(unsigned long long, int, void*)+0x86>
c0016d2b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d2e:	89 ef                	mov    edi,ebp
c0016d30:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d36:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d3a:	0f af f9             	imul   edi,ecx
c0016d3d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d42:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d45:	40                   	inc    eax
c0016d46:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d49:	83 c0 80             	add    eax,0xffffff80
c0016d4c:	75 5c                	jne    c0016daa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	53                   	push   ebx
c0016d52:	e8 c7 fe ff ff       	call   c0016c1e <VCache::writeWriteBuffer()>
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	eb 4e                	jmp    c0016daa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	53                   	push   ebx
c0016d60:	e8 b9 fe ff ff       	call   c0016c1e <VCache::writeWriteBuffer()>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d6b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d70:	7f 22                	jg     c0016d94 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d72:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d75:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d7c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d80:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d83:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d86:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d92:	eb 16                	jmp    c0016daa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016da1:	57                   	push   edi
c0016da2:	56                   	push   esi
c0016da3:	50                   	push   eax
c0016da4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016da7:	83 c4 20             	add    esp,0x20
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016db0:	e8 25 7e 00 00       	call   c001ebda <Semaphore::release()>
c0016db5:	83 c4 1c             	add    esp,0x1c
c0016db8:	31 c0                	xor    eax,eax
c0016dba:	5b                   	pop    ebx
c0016dbb:	5e                   	pop    esi
c0016dbc:	5f                   	pop    edi
c0016dbd:	5d                   	pop    ebp
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <VCache::read(unsigned long long, int, void*)>:
c0016dc0:	55                   	push   ebp
c0016dc1:	57                   	push   edi
c0016dc2:	56                   	push   esi
c0016dc3:	53                   	push   ebx
c0016dc4:	83 ec 28             	sub    esp,0x28
c0016dc7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dcb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016dcf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dd3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dda:	e8 c1 76 00 00       	call   c001e4a0 <Semaphore::acquire()>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016de6:	74 0c                	je     c0016df4 <VCache::read(unsigned long long, int, void*)+0x34>
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	53                   	push   ebx
c0016dec:	e8 2d fe ff ff       	call   c0016c1e <VCache::writeWriteBuffer()>
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	83 fd 01             	cmp    ebp,0x1
c0016df7:	0f 85 80 00 00 00    	jne    c0016e7d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016dfd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e04:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e0b:	75 70                	jne    c0016e7d <VCache::read(unsigned long long, int, void*)+0xbd>
c0016e0d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016e10:	89 e9                	mov    ecx,ebp
c0016e12:	f7 d9                	neg    ecx
c0016e14:	89 c8                	mov    eax,ecx
c0016e16:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e1a:	c1 f8 1f             	sar    eax,0x1f
c0016e1d:	21 f1                	and    ecx,esi
c0016e1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e23:	89 c8                	mov    eax,ecx
c0016e25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e29:	21 f9                	and    ecx,edi
c0016e2b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e2f:	89 ca                	mov    edx,ecx
c0016e31:	74 0a                	je     c0016e3d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e33:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e36:	75 05                	jne    c0016e3d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e38:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e3b:	74 23                	je     c0016e60 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e3d:	83 ec 0c             	sub    esp,0xc
c0016e40:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e48:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e4b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e4e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e53:	55                   	push   ebp
c0016e54:	52                   	push   edx
c0016e55:	50                   	push   eax
c0016e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e5a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e5d:	83 c4 20             	add    esp,0x20
c0016e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e63:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e67:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e70:	48                   	dec    eax
c0016e71:	21 c6                	and    esi,eax
c0016e73:	0f af f1             	imul   esi,ecx
c0016e76:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e7b:	eb 1d                	jmp    c0016e9a <VCache::read(unsigned long long, int, void*)+0xda>
c0016e7d:	83 ec 0c             	sub    esp,0xc
c0016e80:	53                   	push   ebx
c0016e81:	e8 88 fd ff ff       	call   c0016c0e <VCache::invalidateReadBuffer()>
c0016e86:	5a                   	pop    edx
c0016e87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e90:	55                   	push   ebp
c0016e91:	57                   	push   edi
c0016e92:	56                   	push   esi
c0016e93:	50                   	push   eax
c0016e94:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e97:	83 c4 20             	add    esp,0x20
c0016e9a:	83 ec 0c             	sub    esp,0xc
c0016e9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ea0:	e8 35 7d 00 00       	call   c001ebda <Semaphore::release()>
c0016ea5:	83 c4 2c             	add    esp,0x2c
c0016ea8:	31 c0                	xor    eax,eax
c0016eaa:	5b                   	pop    ebx
c0016eab:	5e                   	pop    esi
c0016eac:	5f                   	pop    edi
c0016ead:	5d                   	pop    ebp
c0016eae:	c3                   	ret    
c0016eaf:	90                   	nop

c0016eb0 <Video::putrect(int, int, int, int, unsigned int)>:
c0016eb0:	55                   	push   ebp
c0016eb1:	57                   	push   edi
c0016eb2:	56                   	push   esi
c0016eb3:	53                   	push   ebx
c0016eb4:	83 ec 1c             	sub    esp,0x1c
c0016eb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ebf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ec3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ec7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ecb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ecf:	01 df                	add    edi,ebx
c0016ed1:	39 fb                	cmp    ebx,edi
c0016ed3:	7d 1f                	jge    c0016ef4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ed5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ed9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016edd:	7d 12                	jge    c0016ef1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016edf:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ee5:	53                   	push   ebx
c0016ee6:	55                   	push   ebp
c0016ee7:	45                   	inc    ebp
c0016ee8:	56                   	push   esi
c0016ee9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	eb e8                	jmp    c0016ed9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ef1:	43                   	inc    ebx
c0016ef2:	eb dd                	jmp    c0016ed1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ef4:	83 c4 1c             	add    esp,0x1c
c0016ef7:	5b                   	pop    ebx
c0016ef8:	5e                   	pop    esi
c0016ef9:	5f                   	pop    edi
c0016efa:	5d                   	pop    ebp
c0016efb:	c3                   	ret    

c0016efc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016efc:	55                   	push   ebp
c0016efd:	57                   	push   edi
c0016efe:	31 ff                	xor    edi,edi
c0016f00:	56                   	push   esi
c0016f01:	53                   	push   ebx
c0016f02:	83 ec 1c             	sub    esp,0x1c
c0016f05:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f0d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f14:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f1d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f25:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f28:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f2c:	01 f9                	add    ecx,edi
c0016f2e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f32:	7d 2f                	jge    c0016f63 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f34:	31 f6                	xor    esi,esi
c0016f36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f3a:	01 f2                	add    edx,esi
c0016f3c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f40:	7d 1a                	jge    c0016f5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f45:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f48:	46                   	inc    esi
c0016f49:	51                   	push   ecx
c0016f4a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f4e:	52                   	push   edx
c0016f4f:	55                   	push   ebp
c0016f50:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f5a:	eb da                	jmp    c0016f36 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f5c:	47                   	inc    edi
c0016f5d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f61:	eb c5                	jmp    c0016f28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f63:	83 c4 1c             	add    esp,0x1c
c0016f66:	5b                   	pop    ebx
c0016f67:	5e                   	pop    esi
c0016f68:	5f                   	pop    edi
c0016f69:	5d                   	pop    ebp
c0016f6a:	c3                   	ret    
c0016f6b:	90                   	nop

c0016f6c <Video::blit(unsigned int*, int, int, int, int)>:
c0016f6c:	55                   	push   ebp
c0016f6d:	57                   	push   edi
c0016f6e:	56                   	push   esi
c0016f6f:	53                   	push   ebx
c0016f70:	83 ec 1c             	sub    esp,0x1c
c0016f73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f7b:	85 c0                	test   eax,eax
c0016f7d:	79 02                	jns    c0016f81 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f7f:	31 c0                	xor    eax,eax
c0016f81:	c1 e0 02             	shl    eax,0x2
c0016f84:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f90:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f94:	39 d8                	cmp    eax,ebx
c0016f96:	7e 49                	jle    c0016fe1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f98:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f9e:	7c 41                	jl     c0016fe1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fa0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fa4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fa8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fac:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fb0:	39 f9                	cmp    ecx,edi
c0016fb2:	7e 22                	jle    c0016fd6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fb4:	83 c5 04             	add    ebp,0x4
c0016fb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fbd:	7c 14                	jl     c0016fd3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fbf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fc1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fc8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fcc:	56                   	push   esi
c0016fcd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	47                   	inc    edi
c0016fd4:	eb d2                	jmp    c0016fa8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fda:	43                   	inc    ebx
c0016fdb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fdf:	eb ab                	jmp    c0016f8c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fe1:	83 c4 1c             	add    esp,0x1c
c0016fe4:	5b                   	pop    ebx
c0016fe5:	5e                   	pop    esi
c0016fe6:	5f                   	pop    edi
c0016fe7:	5d                   	pop    ebp
c0016fe8:	c3                   	ret    
c0016fe9:	90                   	nop

c0016fea <Video::clearScreen(unsigned int)>:
c0016fea:	57                   	push   edi
c0016feb:	56                   	push   esi
c0016fec:	53                   	push   ebx
c0016fed:	31 db                	xor    ebx,ebx
c0016fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ff3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ff9:	7e 1f                	jle    c001701a <Video::clearScreen(unsigned int)+0x30>
c0016ffb:	31 ff                	xor    edi,edi
c0016ffd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017003:	7e 12                	jle    c0017017 <Video::clearScreen(unsigned int)+0x2d>
c0017005:	8b 06                	mov    eax,DWORD PTR [esi]
c0017007:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001700b:	53                   	push   ebx
c001700c:	57                   	push   edi
c001700d:	47                   	inc    edi
c001700e:	56                   	push   esi
c001700f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017012:	83 c4 10             	add    esp,0x10
c0017015:	eb e6                	jmp    c0016ffd <Video::clearScreen(unsigned int)+0x13>
c0017017:	43                   	inc    ebx
c0017018:	eb d9                	jmp    c0016ff3 <Video::clearScreen(unsigned int)+0x9>
c001701a:	5b                   	pop    ebx
c001701b:	5e                   	pop    esi
c001701c:	5f                   	pop    edi
c001701d:	c3                   	ret    

c001701e <Video::putpixel(int, int, unsigned int)>:
c001701e:	c7 44 24 04 60 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002be60
c0017026:	e9 84 33 00 00       	jmp    c001a3af <Krnl::panic(char const*)>
c001702b:	90                   	nop

c001702c <Video::Video(char const*)>:
c001702c:	83 ec 0c             	sub    esp,0xc
c001702f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017033:	83 ec 08             	sub    esp,0x8
c0017036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001703a:	50                   	push   eax
c001703b:	e8 f8 ce ff ff       	call   c0013f38 <Device::Device(char const*)>
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	ba e4 be 02 c0       	mov    edx,0xc002bee4
c0017048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001704c:	89 10                	mov    DWORD PTR [eax],edx
c001704e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017052:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001705c:	90                   	nop
c001705d:	83 c4 0c             	add    esp,0xc
c0017060:	c3                   	ret    
c0017061:	90                   	nop

c0017062 <Video::~Video()>:
c0017062:	83 ec 0c             	sub    esp,0xc
c0017065:	ba e4 be 02 c0       	mov    edx,0xc002bee4
c001706a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706e:	89 10                	mov    DWORD PTR [eax],edx
c0017070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	50                   	push   eax
c0017078:	e8 85 cb ff ff       	call   c0013c02 <Device::~Device()>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	90                   	nop
c0017081:	83 c4 0c             	add    esp,0xc
c0017084:	c3                   	ret    
c0017085:	90                   	nop

c0017086 <Video::~Video()>:
c0017086:	83 ec 0c             	sub    esp,0xc
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017090:	e8 cd ff ff ff       	call   c0017062 <Video::~Video()>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	83 ec 08             	sub    esp,0x8
c001709b:	68 64 01 00 00       	push   0x164
c00170a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a4:	e8 72 b7 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	83 c4 0c             	add    esp,0xc
c00170af:	c3                   	ret    

c00170b0 <Video::isMonochrome()>:
c00170b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170ba:	c3                   	ret    
c00170bb:	90                   	nop

c00170bc <Video::getWidth()>:
c00170bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170c6:	c3                   	ret    
c00170c7:	90                   	nop

c00170c8 <Video::getHeight()>:
c00170c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170d4:	55                   	push   ebp
c00170d5:	57                   	push   edi
c00170d6:	56                   	push   esi
c00170d7:	53                   	push   ebx
c00170d8:	83 ec 2c             	sub    esp,0x2c
c00170db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170e3:	83 f8 01             	cmp    eax,0x1
c00170e6:	19 c9                	sbb    ecx,ecx
c00170e8:	31 db                	xor    ebx,ebx
c00170ea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170ee:	89 cd                	mov    ebp,ecx
c00170f0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170f8:	f7 d5                	not    ebp
c00170fa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017100:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017104:	01 d8                	add    eax,ebx
c0017106:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001710a:	56                   	push   esi
c001710b:	e8 b8 ff ff ff       	call   c00170c8 <Video::getHeight()>
c0017110:	59                   	pop    ecx
c0017111:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017115:	7e 70                	jle    c0017187 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017117:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001711b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001711f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017122:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017126:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001712a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017131:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017135:	89 f8                	mov    eax,edi
c0017137:	83 c0 20             	add    eax,0x20
c001713a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001713e:	56                   	push   esi
c001713f:	e8 78 ff ff ff       	call   c00170bc <Video::getWidth()>
c0017144:	5a                   	pop    edx
c0017145:	39 c7                	cmp    edi,eax
c0017147:	7d 34                	jge    c001717d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017149:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001714e:	74 05                	je     c0017155 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017150:	8b 06                	mov    eax,DWORD PTR [esi]
c0017152:	55                   	push   ebp
c0017153:	eb 0d                	jmp    c0017162 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017155:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001715a:	74 12                	je     c001716e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001715c:	8b 06                	mov    eax,DWORD PTR [esi]
c001715e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017162:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017166:	57                   	push   edi
c0017167:	56                   	push   esi
c0017168:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017172:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017176:	47                   	inc    edi
c0017177:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001717b:	75 c1                	jne    c001713e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001717d:	43                   	inc    ebx
c001717e:	83 fb 20             	cmp    ebx,0x20
c0017181:	0f 85 79 ff ff ff    	jne    c0017100 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017187:	83 c4 2c             	add    esp,0x2c
c001718a:	5b                   	pop    ebx
c001718b:	5e                   	pop    esi
c001718c:	5f                   	pop    edi
c001718d:	5d                   	pop    ebp
c001718e:	c3                   	ret    
c001718f:	90                   	nop

c0017190 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017190:	55                   	push   ebp
c0017191:	57                   	push   edi
c0017192:	56                   	push   esi
c0017193:	53                   	push   ebx
c0017194:	83 ec 28             	sub    esp,0x28
c0017197:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001719b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001719f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171a3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171a7:	c1 e7 08             	shl    edi,0x8
c00171aa:	01 c7                	add    edi,eax
c00171ac:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171b0:	c1 e0 08             	shl    eax,0x8
c00171b3:	01 d0                	add    eax,edx
c00171b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171bd:	0f af c7             	imul   eax,edi
c00171c0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171c7:	50                   	push   eax
c00171c8:	e8 35 87 ff ff       	call   c000f902 <malloc>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	89 c5                	mov    ebp,eax
c00171d2:	85 c0                	test   eax,eax
c00171d4:	75 15                	jne    c00171eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	68 81 be 02 c0       	push   0xc002be81
c00171de:	e8 18 b7 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00171e3:	83 c4 10             	add    esp,0x10
c00171e6:	e9 1c 01 00 00       	jmp    c0017307 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171eb:	be 12 00 00 00       	mov    esi,0x12
c00171f0:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171f4:	74 11                	je     c0017207 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171f6:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171fa:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171fe:	c1 fe 03             	sar    esi,0x3
c0017201:	0f af f0             	imul   esi,eax
c0017204:	83 c6 12             	add    esi,0x12
c0017207:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001720b:	74 04                	je     c0017211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001720d:	85 ff                	test   edi,edi
c001720f:	75 12                	jne    c0017223 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017211:	83 ec 0c             	sub    esp,0xc
c0017214:	68 98 be 02 c0       	push   0xc002be98
c0017219:	e8 dd b6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001721e:	e9 ce 00 00 00       	jmp    c00172f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017223:	52                   	push   edx
c0017224:	52                   	push   edx
c0017225:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017229:	50                   	push   eax
c001722a:	68 ad be 02 c0       	push   0xc002bead
c001722f:	e8 c7 b6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0017234:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017238:	83 c4 10             	add    esp,0x10
c001723b:	80 fa 02             	cmp    dl,0x2
c001723e:	0f 85 98 00 00 00    	jne    c00172dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017244:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017249:	75 10                	jne    c001725b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001724b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001724f:	75 0a                	jne    c001725b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017251:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017254:	83 e8 18             	sub    eax,0x18
c0017257:	a8 f7                	test   al,0xf7
c0017259:	74 0a                	je     c0017265 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001725b:	83 ec 0c             	sub    esp,0xc
c001725e:	68 ba be 02 c0       	push   0xc002beba
c0017263:	eb 7f                	jmp    c00172e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017265:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001726d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017275:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017279:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017281:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017285:	75 0c                	jne    c0017293 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017287:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001728c:	c1 e0 18             	shl    eax,0x18
c001728f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017293:	41                   	inc    ecx
c0017294:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017299:	c1 e2 10             	shl    edx,0x10
c001729c:	89 d0                	mov    eax,edx
c001729e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172a3:	c1 e2 08             	shl    edx,0x8
c00172a6:	09 c2                	or     edx,eax
c00172a8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172ac:	09 c2                	or     edx,eax
c00172ae:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172b2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172b6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172ba:	c1 f8 03             	sar    eax,0x3
c00172bd:	01 c6                	add    esi,eax
c00172bf:	89 c8                	mov    eax,ecx
c00172c1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172c5:	39 c7                	cmp    edi,eax
c00172c7:	7f b0                	jg     c0017279 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172c9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172d1:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172d4:	7e 22                	jle    c00172f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172d6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172da:	eb 99                	jmp    c0017275 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172dc:	50                   	push   eax
c00172dd:	50                   	push   eax
c00172de:	52                   	push   edx
c00172df:	68 c8 be 02 c0       	push   0xc002bec8
c00172e4:	e8 12 b6 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00172e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172ec:	e8 21 86 ff ff       	call   c000f912 <free>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	31 ed                	xor    ebp,ebp
c00172f6:	eb 0f                	jmp    c0017307 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172fc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172ff:	89 38                	mov    DWORD PTR [eax],edi
c0017301:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017305:	89 08                	mov    DWORD PTR [eax],ecx
c0017307:	83 c4 1c             	add    esp,0x1c
c001730a:	89 e8                	mov    eax,ebp
c001730c:	5b                   	pop    ebx
c001730d:	5e                   	pop    esi
c001730e:	5f                   	pop    edi
c001730f:	5d                   	pop    ebp
c0017310:	c3                   	ret    
c0017311:	90                   	nop

c0017312 <Video::putTGA(int, int, unsigned char*, int)>:
c0017312:	55                   	push   ebp
c0017313:	57                   	push   edi
c0017314:	56                   	push   esi
c0017315:	53                   	push   ebx
c0017316:	83 ec 28             	sub    esp,0x28
c0017319:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001731d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017321:	50                   	push   eax
c0017322:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017326:	50                   	push   eax
c0017327:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001732b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001732f:	56                   	push   esi
c0017330:	e8 5b fe ff ff       	call   c0017190 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017335:	83 c4 20             	add    esp,0x20
c0017338:	85 c0                	test   eax,eax
c001733a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001733e:	74 35                	je     c0017375 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017340:	89 c7                	mov    edi,eax
c0017342:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017346:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001734a:	39 d8                	cmp    eax,ebx
c001734c:	7e 27                	jle    c0017375 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001734e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017352:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017356:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001735a:	39 e8                	cmp    eax,ebp
c001735c:	7e 14                	jle    c0017372 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001735e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017360:	83 c7 04             	add    edi,0x4
c0017363:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017366:	53                   	push   ebx
c0017367:	55                   	push   ebp
c0017368:	45                   	inc    ebp
c0017369:	56                   	push   esi
c001736a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	eb e0                	jmp    c0017352 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017372:	43                   	inc    ebx
c0017373:	eb cd                	jmp    c0017342 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017375:	83 c4 1c             	add    esp,0x1c
c0017378:	5b                   	pop    ebx
c0017379:	5e                   	pop    esi
c001737a:	5f                   	pop    edi
c001737b:	5d                   	pop    ebp
c001737c:	c3                   	ret    
c001737d:	90                   	nop

c001737e <ACPI::close(int, int, void*)>:
c001737e:	83 ec 1c             	sub    esp,0x1c
c0017381:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017389:	74 0a                	je     c0017395 <ACPI::close(int, int, void*)+0x17>
c001738b:	b8 00 00 00 00       	mov    eax,0x0
c0017390:	e9 9a 00 00 00       	jmp    c001742f <ACPI::close(int, int, void*)+0xb1>
c0017395:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001739a:	75 37                	jne    c00173d3 <ACPI::close(int, int, void*)+0x55>
c001739c:	83 ec 0c             	sub    esp,0xc
c001739f:	68 24 bf 02 c0       	push   0xc002bf24
c00173a4:	e8 52 b5 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00173a9:	83 c4 10             	add    esp,0x10
c00173ac:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c00173b1:	85 c0                	test   eax,eax
c00173b3:	74 07                	je     c00173bc <ACPI::close(int, int, void*)+0x3e>
c00173b5:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c00173ba:	ff d0                	call   eax
c00173bc:	83 ec 0c             	sub    esp,0xc
c00173bf:	68 a8 c0 02 c0       	push   0xc002c0a8
c00173c4:	e8 e6 2f 00 00       	call   c001a3af <Krnl::panic(char const*)>
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173d1:	eb 5c                	jmp    c001742f <ACPI::close(int, int, void*)+0xb1>
c00173d3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173d8:	75 50                	jne    c001742a <ACPI::close(int, int, void*)+0xac>
c00173da:	a1 e4 18 03 c0       	mov    eax,ds:0xc00318e4
c00173df:	85 c0                	test   eax,eax
c00173e1:	74 07                	je     c00173ea <ACPI::close(int, int, void*)+0x6c>
c00173e3:	a1 e4 18 03 c0       	mov    eax,ds:0xc00318e4
c00173e8:	ff d0                	call   eax
c00173ea:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173f4:	83 e0 02             	and    eax,0x2
c00173f7:	74 1c                	je     c0017415 <ACPI::close(int, int, void*)+0x97>
c00173f9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017404:	89 c2                	mov    edx,eax
c0017406:	ec                   	in     al,dx
c0017407:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001740b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001740f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017413:	eb da                	jmp    c00173ef <ACPI::close(int, int, void*)+0x71>
c0017415:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001741c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017421:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017425:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017429:	ee                   	out    dx,al
c001742a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001742f:	83 c4 1c             	add    esp,0x1c
c0017432:	c3                   	ret    

c0017433 <findRSDP()>:
c0017433:	83 ec 1c             	sub    esp,0x1c
c0017436:	83 ec 0c             	sub    esp,0xc
c0017439:	68 31 bf 02 c0       	push   0xc002bf31
c001743e:	e8 b8 b4 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001744b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017451:	83 e0 04             	and    eax,0x4
c0017454:	84 c0                	test   al,al
c0017456:	75 07                	jne    c001745f <findRSDP()+0x2c>
c0017458:	b8 00 00 00 00       	mov    eax,0x0
c001745d:	eb 6a                	jmp    c00174c9 <findRSDP()+0x96>
c001745f:	a1 94 f2 02 c0       	mov    eax,ds:0xc002f294
c0017464:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017469:	7f 1b                	jg     c0017486 <findRSDP()+0x53>
c001746b:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0017470:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017476:	83 e2 fb             	and    edx,0xfffffffb
c0017479:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001747f:	b8 00 00 00 00       	mov    eax,0x0
c0017484:	eb 43                	jmp    c00174c9 <findRSDP()+0x96>
c0017486:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001748e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017496:	77 2c                	ja     c00174c4 <findRSDP()+0x91>
c0017498:	83 ec 04             	sub    esp,0x4
c001749b:	6a 08                	push   0x8
c001749d:	68 3f bf 02 c0       	push   0xc002bf3f
c00174a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174a6:	e8 a1 91 fe ff       	call   c000064c <memcmp>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	85 c0                	test   eax,eax
c00174b0:	0f 94 c0             	sete   al
c00174b3:	84 c0                	test   al,al
c00174b5:	74 06                	je     c00174bd <findRSDP()+0x8a>
c00174b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174bb:	eb 0c                	jmp    c00174c9 <findRSDP()+0x96>
c00174bd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174c2:	eb ca                	jmp    c001748e <findRSDP()+0x5b>
c00174c4:	b8 00 00 00 00       	mov    eax,0x0
c00174c9:	83 c4 1c             	add    esp,0x1c
c00174cc:	c3                   	ret    

c00174cd <loadACPITables(unsigned char*)>:
c00174cd:	57                   	push   edi
c00174ce:	56                   	push   esi
c00174cf:	53                   	push   ebx
c00174d0:	83 ec 60             	sub    esp,0x60
c00174d3:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00174d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174de:	83 e0 04             	and    eax,0x4
c00174e1:	84 c0                	test   al,al
c00174e3:	0f 84 33 02 00 00    	je     c001771c <loadACPITables(unsigned char*)+0x24f>
c00174e9:	a0 00 1b 03 c0       	mov    al,ds:0xc0031b00
c00174ee:	84 c0                	test   al,al
c00174f0:	74 75                	je     c0017567 <loadACPITables(unsigned char*)+0x9a>
c00174f2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174f6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017501:	83 e8 24             	sub    eax,0x24
c0017504:	c1 e8 03             	shr    eax,0x3
c0017507:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001750b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017513:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017517:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001751b:	0f 8d b2 00 00 00    	jge    c00175d3 <loadACPITables(unsigned char*)+0x106>
c0017521:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017525:	83 c0 24             	add    eax,0x24
c0017528:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001752c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017530:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017534:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017538:	c1 e0 03             	shl    eax,0x3
c001753b:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001753f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017543:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017546:	8b 00                	mov    eax,DWORD PTR [eax]
c0017548:	89 c1                	mov    ecx,eax
c001754a:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c001754f:	8d 50 01             	lea    edx,[eax+0x1]
c0017552:	89 15 ec 18 03 c0    	mov    DWORD PTR ds:0xc00318ec,edx
c0017558:	89 ca                	mov    edx,ecx
c001755a:	89 14 c5 04 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6fc],edx
c0017561:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017565:	eb ac                	jmp    c0017513 <loadACPITables(unsigned char*)+0x46>
c0017567:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001756b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001756f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017576:	83 e8 24             	sub    eax,0x24
c0017579:	c1 e8 02             	shr    eax,0x2
c001757c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017580:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017588:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001758c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017590:	7d 41                	jge    c00175d3 <loadACPITables(unsigned char*)+0x106>
c0017592:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017596:	83 c0 24             	add    eax,0x24
c0017599:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001759d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175a5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00175a9:	c1 e0 02             	shl    eax,0x2
c00175ac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175b6:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c00175bb:	8d 50 01             	lea    edx,[eax+0x1]
c00175be:	89 15 ec 18 03 c0    	mov    DWORD PTR ds:0xc00318ec,edx
c00175c4:	89 ca                	mov    edx,ecx
c00175c6:	89 14 c5 04 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6fc],edx
c00175cd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175d1:	eb b5                	jmp    c0017588 <loadACPITables(unsigned char*)+0xbb>
c00175d3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175db:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c00175e0:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175e4:	0f 8d 33 01 00 00    	jge    c001771d <loadACPITables(unsigned char*)+0x250>
c00175ea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175ee:	8b 04 c5 04 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce6fc]
c00175f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017605:	25 ff 0f 00 00       	and    eax,0xfff
c001760a:	89 c6                	mov    esi,eax
c001760c:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c0017612:	83 ec 0c             	sub    esp,0xc
c0017615:	6a 01                	push   0x1
c0017617:	e8 d9 9e ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017623:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017629:	83 ec 0c             	sub    esp,0xc
c001762c:	6a 01                	push   0x1
c001762e:	6a 01                	push   0x1
c0017630:	50                   	push   eax
c0017631:	52                   	push   edx
c0017632:	53                   	push   ebx
c0017633:	e8 ea a9 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017638:	83 c4 20             	add    esp,0x20
c001763b:	09 f0                	or     eax,esi
c001763d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017641:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017645:	c1 e0 03             	shl    eax,0x3
c0017648:	05 00 19 03 c0       	add    eax,0xc0031900
c001764d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017651:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017655:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017659:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017665:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017669:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017671:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017675:	89 c6                	mov    esi,eax
c0017677:	89 d7                	mov    edi,edx
c0017679:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001767b:	89 c8                	mov    eax,ecx
c001767d:	89 fa                	mov    edx,edi
c001767f:	89 f3                	mov    ebx,esi
c0017681:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017685:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017689:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001768d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017691:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017694:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017698:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001769c:	05 00 10 00 00       	add    eax,0x1000
c00176a1:	c1 e8 0c             	shr    eax,0xc
c00176a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176b4:	25 ff 0f 00 00       	and    eax,0xfff
c00176b9:	89 c6                	mov    esi,eax
c00176bb:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c00176c1:	83 ec 0c             	sub    esp,0xc
c00176c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00176c8:	e8 28 9e ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176da:	83 ec 0c             	sub    esp,0xc
c00176dd:	6a 01                	push   0x1
c00176df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176e3:	50                   	push   eax
c00176e4:	52                   	push   edx
c00176e5:	53                   	push   ebx
c00176e6:	e8 37 a9 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176eb:	83 c4 20             	add    esp,0x20
c00176ee:	09 f0                	or     eax,esi
c00176f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	50                   	push   eax
c00176fc:	e8 b4 a2 ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017708:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001770c:	89 14 c5 04 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6fc],edx
c0017713:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017717:	e9 bf fe ff ff       	jmp    c00175db <loadACPITables(unsigned char*)+0x10e>
c001771c:	90                   	nop
c001771d:	83 c4 60             	add    esp,0x60
c0017720:	5b                   	pop    ebx
c0017721:	5e                   	pop    esi
c0017722:	5f                   	pop    edi
c0017723:	c3                   	ret    

c0017724 <findRSDT(unsigned char*)>:
c0017724:	57                   	push   edi
c0017725:	56                   	push   esi
c0017726:	53                   	push   ebx
c0017727:	83 ec 50             	sub    esp,0x50
c001772a:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001772f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017735:	83 e0 04             	and    eax,0x4
c0017738:	84 c0                	test   al,al
c001773a:	75 0a                	jne    c0017746 <findRSDT(unsigned char*)+0x22>
c001773c:	b8 00 00 00 00       	mov    eax,0x0
c0017741:	e9 21 01 00 00       	jmp    c0017867 <findRSDT(unsigned char*)+0x143>
c0017746:	89 e0                	mov    eax,esp
c0017748:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001774c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017750:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017754:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001775c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017760:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017764:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017768:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001776c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017770:	89 c6                	mov    esi,eax
c0017772:	89 d7                	mov    edi,edx
c0017774:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017776:	89 c8                	mov    eax,ecx
c0017778:	89 fa                	mov    edx,edi
c001777a:	89 f3                	mov    ebx,esi
c001777c:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017780:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017784:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017788:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001778c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017790:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001779c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177b0:	25 ff 0f 00 00       	and    eax,0xfff
c00177b5:	89 c6                	mov    esi,eax
c00177b7:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c00177bd:	83 ec 0c             	sub    esp,0xc
c00177c0:	6a 02                	push   0x2
c00177c2:	e8 2e 9d ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177ce:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d4:	83 ec 0c             	sub    esp,0xc
c00177d7:	6a 01                	push   0x1
c00177d9:	6a 02                	push   0x2
c00177db:	50                   	push   eax
c00177dc:	52                   	push   edx
c00177dd:	53                   	push   ebx
c00177de:	e8 3f a8 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177e3:	83 c4 20             	add    esp,0x20
c00177e6:	09 f0                	or     eax,esi
c00177e8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177f0:	25 ff 0f 00 00       	and    eax,0xfff
c00177f5:	89 c6                	mov    esi,eax
c00177f7:	8b 1d b0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b0
c00177fd:	83 ec 0c             	sub    esp,0xc
c0017800:	6a 02                	push   0x2
c0017802:	e8 ee 9c ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001780e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017814:	83 ec 0c             	sub    esp,0xc
c0017817:	6a 01                	push   0x1
c0017819:	6a 02                	push   0x2
c001781b:	50                   	push   eax
c001781c:	52                   	push   edx
c001781d:	53                   	push   ebx
c001781e:	e8 ff a7 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017823:	83 c4 20             	add    esp,0x20
c0017826:	09 f0                	or     eax,esi
c0017828:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001782c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017831:	75 11                	jne    c0017844 <findRSDT(unsigned char*)+0x120>
c0017833:	c6 05 00 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b00,0x0
c001783a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017842:	eb 1f                	jmp    c0017863 <findRSDT(unsigned char*)+0x13f>
c0017844:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017849:	75 11                	jne    c001785c <findRSDT(unsigned char*)+0x138>
c001784b:	c6 05 00 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b00,0x1
c0017852:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017856:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001785a:	eb 07                	jmp    c0017863 <findRSDT(unsigned char*)+0x13f>
c001785c:	b8 00 00 00 00       	mov    eax,0x0
c0017861:	eb 04                	jmp    c0017867 <findRSDT(unsigned char*)+0x143>
c0017863:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017867:	83 c4 50             	add    esp,0x50
c001786a:	5b                   	pop    ebx
c001786b:	5e                   	pop    esi
c001786c:	5f                   	pop    edi
c001786d:	c3                   	ret    

c001786e <findDataTable(unsigned char*, char*)>:
c001786e:	83 ec 1c             	sub    esp,0x1c
c0017871:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0017876:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001787c:	83 e0 04             	and    eax,0x4
c001787f:	84 c0                	test   al,al
c0017881:	75 07                	jne    c001788a <findDataTable(unsigned char*, char*)+0x1c>
c0017883:	b8 00 00 00 00       	mov    eax,0x0
c0017888:	eb 7c                	jmp    c0017906 <findDataTable(unsigned char*, char*)+0x98>
c001788a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017892:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c0017897:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001789b:	7d 3a                	jge    c00178d7 <findDataTable(unsigned char*, char*)+0x69>
c001789d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178a1:	c1 e0 03             	shl    eax,0x3
c00178a4:	05 00 19 03 c0       	add    eax,0xc0031900
c00178a9:	83 ec 04             	sub    esp,0x4
c00178ac:	6a 04                	push   0x4
c00178ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b2:	50                   	push   eax
c00178b3:	e8 94 8d fe ff       	call   c000064c <memcmp>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	85 c0                	test   eax,eax
c00178bd:	0f 94 c0             	sete   al
c00178c0:	84 c0                	test   al,al
c00178c2:	74 0d                	je     c00178d1 <findDataTable(unsigned char*, char*)+0x63>
c00178c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c8:	8b 04 c5 04 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce6fc]
c00178cf:	eb 35                	jmp    c0017906 <findDataTable(unsigned char*, char*)+0x98>
c00178d1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178d5:	eb bb                	jmp    c0017892 <findDataTable(unsigned char*, char*)+0x24>
c00178d7:	a0 00 1b 03 c0       	mov    al,ds:0xc0031b00
c00178dc:	84 c0                	test   al,al
c00178de:	74 07                	je     c00178e7 <findDataTable(unsigned char*, char*)+0x79>
c00178e0:	b8 58 00 00 00       	mov    eax,0x58
c00178e5:	eb 05                	jmp    c00178ec <findDataTable(unsigned char*, char*)+0x7e>
c00178e7:	b8 52 00 00 00       	mov    eax,0x52
c00178ec:	83 ec 04             	sub    esp,0x4
c00178ef:	50                   	push   eax
c00178f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178f4:	68 cc c0 02 c0       	push   0xc002c0cc
c00178f9:	e8 fd af ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00178fe:	83 c4 10             	add    esp,0x10
c0017901:	b8 00 00 00 00       	mov    eax,0x0
c0017906:	83 c4 1c             	add    esp,0x1c
c0017909:	c3                   	ret    

c001790a <scanMADT()>:
c001790a:	53                   	push   ebx
c001790b:	83 ec 38             	sub    esp,0x38
c001790e:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0017913:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017919:	83 e0 04             	and    eax,0x4
c001791c:	84 c0                	test   al,al
c001791e:	0f 84 63 04 00 00    	je     c0017d87 <scanMADT()+0x47d>
c0017924:	e8 0a fb ff ff       	call   c0017433 <findRSDP()>
c0017929:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001792e:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c0017933:	85 c0                	test   eax,eax
c0017935:	75 19                	jne    c0017950 <scanMADT()+0x46>
c0017937:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001793c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017942:	83 e2 fb             	and    edx,0xfffffffb
c0017945:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001794b:	e9 3b 04 00 00       	jmp    c0017d8b <scanMADT()+0x481>
c0017950:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	50                   	push   eax
c0017959:	e8 c6 fd ff ff       	call   c0017724 <findRSDT(unsigned char*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c0017966:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001796b:	85 c0                	test   eax,eax
c001796d:	75 19                	jne    c0017988 <scanMADT()+0x7e>
c001796f:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0017974:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001797a:	83 e2 fb             	and    edx,0xfffffffb
c001797d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017983:	e9 03 04 00 00       	jmp    c0017d8b <scanMADT()+0x481>
c0017988:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001798d:	83 ec 0c             	sub    esp,0xc
c0017990:	50                   	push   eax
c0017991:	e8 37 fb ff ff       	call   c00174cd <loadACPITables(unsigned char*)>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001799e:	83 ec 08             	sub    esp,0x8
c00179a1:	68 48 bf 02 c0       	push   0xc002bf48
c00179a6:	50                   	push   eax
c00179a7:	e8 c2 fe ff ff       	call   c001786e <findDataTable(unsigned char*, char*)>
c00179ac:	83 c4 10             	add    esp,0x10
c00179af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179b3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00179b8:	75 19                	jne    c00179d3 <scanMADT()+0xc9>
c00179ba:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00179bf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c5:	83 e2 fe             	and    edx,0xfffffffe
c00179c8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179ce:	e9 b8 03 00 00       	jmp    c0017d8b <scanMADT()+0x481>
c00179d3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179e2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179e6:	0f 87 9f 03 00 00    	ja     c0017d8b <scanMADT()+0x481>
c00179ec:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179f4:	0f 87 91 03 00 00    	ja     c0017d8b <scanMADT()+0x481>
c00179fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a06:	8d 50 01             	lea    edx,[eax+0x1]
c0017a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a15:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a28:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a2c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a30:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a35:	0f 86 4f 03 00 00    	jbe    c0017d8a <scanMADT()+0x480>
c0017a3b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a40:	75 57                	jne    c0017a99 <scanMADT()+0x18f>
c0017a42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a46:	8d 50 01             	lea    edx,[eax+0x1]
c0017a49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a4d:	8a 15 00 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d00
c0017a53:	0f b6 d2             	movzx  edx,dl
c0017a56:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a5a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a5e:	88 82 40 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce2c0],al
c0017a64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a68:	8d 50 01             	lea    edx,[eax+0x1]
c0017a6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a6f:	8a 15 00 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d00
c0017a75:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a78:	88 0d 00 1d 03 c0    	mov    BYTE PTR ds:0xc0031d00,cl
c0017a7e:	0f b6 d2             	movzx  edx,dl
c0017a81:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a85:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a89:	88 82 20 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce2e0],al
c0017a8f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a94:	e9 da 02 00 00       	jmp    c0017d73 <scanMADT()+0x469>
c0017a99:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a9e:	0f 85 14 01 00 00    	jne    c0017bb8 <scanMADT()+0x2ae>
c0017aa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa8:	8d 50 01             	lea    edx,[eax+0x1]
c0017aab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aaf:	8a 15 c0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031bc0
c0017ab5:	0f b6 d2             	movzx  edx,dl
c0017ab8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017abc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ac0:	88 82 e0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce420],al
c0017ac6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017aca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad2:	01 d0                	add    eax,edx
c0017ad4:	83 c0 2c             	add    eax,0x2c
c0017ad7:	8a 00                	mov    al,BYTE PTR [eax]
c0017ad9:	0f b6 d0             	movzx  edx,al
c0017adc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae0:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ae7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aeb:	0f b6 c0             	movzx  eax,al
c0017aee:	c1 e0 08             	shl    eax,0x8
c0017af1:	89 d1                	mov    ecx,edx
c0017af3:	09 c1                	or     ecx,eax
c0017af5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af9:	8d 50 02             	lea    edx,[eax+0x2]
c0017afc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b00:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b04:	0f b6 c0             	movzx  eax,al
c0017b07:	c1 e0 10             	shl    eax,0x10
c0017b0a:	09 c1                	or     ecx,eax
c0017b0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b10:	8d 50 03             	lea    edx,[eax+0x3]
c0017b13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b17:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b1b:	0f b6 c0             	movzx  eax,al
c0017b1e:	c1 e0 18             	shl    eax,0x18
c0017b21:	09 c1                	or     ecx,eax
c0017b23:	89 ca                	mov    edx,ecx
c0017b25:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c0017b2a:	0f b6 c0             	movzx  eax,al
c0017b2d:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0017b34:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b41:	01 d0                	add    eax,edx
c0017b43:	83 c0 2c             	add    eax,0x2c
c0017b46:	8a 00                	mov    al,BYTE PTR [eax]
c0017b48:	0f b6 d0             	movzx  edx,al
c0017b4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b5a:	0f b6 c0             	movzx  eax,al
c0017b5d:	c1 e0 08             	shl    eax,0x8
c0017b60:	89 d1                	mov    ecx,edx
c0017b62:	09 c1                	or     ecx,eax
c0017b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b68:	8d 50 02             	lea    edx,[eax+0x2]
c0017b6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b6f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b73:	0f b6 c0             	movzx  eax,al
c0017b76:	c1 e0 10             	shl    eax,0x10
c0017b79:	09 c1                	or     ecx,eax
c0017b7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b7f:	8d 50 03             	lea    edx,[eax+0x3]
c0017b82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b8a:	0f b6 c0             	movzx  eax,al
c0017b8d:	c1 e0 18             	shl    eax,0x18
c0017b90:	09 c1                	or     ecx,eax
c0017b92:	89 ca                	mov    edx,ecx
c0017b94:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c0017b99:	0f b6 c0             	movzx  eax,al
c0017b9c:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c0017ba3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ba8:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c0017bad:	40                   	inc    eax
c0017bae:	a2 c0 1b 03 c0       	mov    ds:0xc0031bc0,al
c0017bb3:	e9 bb 01 00 00       	jmp    c0017d73 <scanMADT()+0x469>
c0017bb8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017bbd:	0f 85 e9 00 00 00    	jne    c0017cac <scanMADT()+0x3a2>
c0017bc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0017bca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bd6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bde:	8d 50 01             	lea    edx,[eax+0x1]
c0017be1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017be5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf9:	01 d0                	add    eax,edx
c0017bfb:	83 c0 2c             	add    eax,0x2c
c0017bfe:	8a 00                	mov    al,BYTE PTR [eax]
c0017c00:	0f b6 d0             	movzx  edx,al
c0017c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c07:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c12:	0f b6 c0             	movzx  eax,al
c0017c15:	c1 e0 08             	shl    eax,0x8
c0017c18:	89 d1                	mov    ecx,edx
c0017c1a:	09 c1                	or     ecx,eax
c0017c1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c20:	8d 50 02             	lea    edx,[eax+0x2]
c0017c23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c27:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c2b:	0f b6 c0             	movzx  eax,al
c0017c2e:	c1 e0 10             	shl    eax,0x10
c0017c31:	09 c1                	or     ecx,eax
c0017c33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c37:	8d 50 03             	lea    edx,[eax+0x3]
c0017c3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c42:	0f b6 c0             	movzx  eax,al
c0017c45:	c1 e0 18             	shl    eax,0x18
c0017c48:	09 c8                	or     eax,ecx
c0017c4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c5b:	01 d0                	add    eax,edx
c0017c5d:	83 c0 2c             	add    eax,0x2c
c0017c60:	8a 00                	mov    al,BYTE PTR [eax]
c0017c62:	0f b6 c0             	movzx  eax,al
c0017c65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c69:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c70:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c74:	0f b6 d2             	movzx  edx,dl
c0017c77:	c1 e2 08             	shl    edx,0x8
c0017c7a:	09 d0                	or     eax,edx
c0017c7c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c81:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c86:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c8f:	88 90 a0 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1b60],dl
c0017c95:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c9a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c9f:	66 89 84 12 a0 1b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce460],ax
c0017ca7:	e9 c7 00 00 00       	jmp    c0017d73 <scanMADT()+0x469>
c0017cac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017cb1:	0f 85 b0 00 00 00    	jne    c0017d67 <scanMADT()+0x45d>
c0017cb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbb:	8d 50 01             	lea    edx,[eax+0x1]
c0017cbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cca:	0f b6 c0             	movzx  eax,al
c0017ccd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd9:	01 d0                	add    eax,edx
c0017cdb:	83 c0 2c             	add    eax,0x2c
c0017cde:	8a 00                	mov    al,BYTE PTR [eax]
c0017ce0:	0f b6 d0             	movzx  edx,al
c0017ce3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cf2:	0f b6 c0             	movzx  eax,al
c0017cf5:	c1 e0 08             	shl    eax,0x8
c0017cf8:	09 d0                	or     eax,edx
c0017cfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cfe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d07:	8d 50 01             	lea    edx,[eax+0x1]
c0017d0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d16:	0f b6 c0             	movzx  eax,al
c0017d19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d21:	c1 e0 08             	shl    eax,0x8
c0017d24:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d28:	89 c1                	mov    ecx,eax
c0017d2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d2e:	c1 e0 18             	shl    eax,0x18
c0017d31:	89 c3                	mov    ebx,eax
c0017d33:	a1 10 1b 03 c0       	mov    eax,ds:0xc0031b10
c0017d38:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3b:	89 15 10 1b 03 c0    	mov    DWORD PTR ds:0xc0031b10,edx
c0017d41:	09 d9                	or     ecx,ebx
c0017d43:	89 ca                	mov    edx,ecx
c0017d45:	89 14 85 20 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4e0],edx
c0017d4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d58:	68 fc c0 02 c0       	push   0xc002c0fc
c0017d5d:	e8 99 ab ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	eb 0c                	jmp    c0017d73 <scanMADT()+0x469>
c0017d67:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d6c:	75 05                	jne    c0017d73 <scanMADT()+0x469>
c0017d6e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d73:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d7c:	01 d0                	add    eax,edx
c0017d7e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d82:	e9 54 fc ff ff       	jmp    c00179db <scanMADT()+0xd1>
c0017d87:	90                   	nop
c0017d88:	eb 01                	jmp    c0017d8b <scanMADT()+0x481>
c0017d8a:	90                   	nop
c0017d8b:	83 c4 38             	add    esp,0x38
c0017d8e:	5b                   	pop    ebx
c0017d8f:	c3                   	ret    

c0017d90 <ACPI::ACPI()>:
c0017d90:	83 ec 0c             	sub    esp,0xc
c0017d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d97:	83 ec 08             	sub    esp,0x8
c0017d9a:	68 4d bf 02 c0       	push   0xc002bf4d
c0017d9f:	50                   	push   eax
c0017da0:	e8 93 c1 ff ff       	call   c0013f38 <Device::Device(char const*)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c0017dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db1:	89 10                	mov    DWORD PTR [eax],edx
c0017db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dc2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dd0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017dda:	e8 2b fb ff ff       	call   c001790a <scanMADT()>
c0017ddf:	90                   	nop
c0017de0:	83 c4 0c             	add    esp,0xc
c0017de3:	c3                   	ret    

c0017de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017de4:	83 ec 2c             	sub    esp,0x2c
c0017de7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017deb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017def:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017df3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017df7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dfc:	88 d0                	mov    al,dl
c0017dfe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e07:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e13:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e19:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e1d:	0f 8d 97 00 00 00    	jge    c0017eba <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e2b:	83 c2 2a             	add    edx,0x2a
c0017e2e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e32:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e37:	75 78                	jne    c0017eb1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e41:	83 c2 2a             	add    edx,0x2a
c0017e44:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e48:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e4c:	75 63                	jne    c0017eb1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e4e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e53:	74 3a                	je     c0017e8f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e5d:	83 c2 2a             	add    edx,0x2a
c0017e60:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e6b:	39 c2                	cmp    edx,eax
c0017e6d:	74 10                	je     c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 38 c1 02 c0       	push   0xc002c138
c0017e77:	e8 33 25 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	83 ec 0c             	sub    esp,0xc
c0017e82:	68 52 bf 02 c0       	push   0xc002bf52
c0017e87:	e8 23 25 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e9b:	83 c2 2a             	add    edx,0x2a
c0017e9e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ea2:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ea4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ea7:	89 01                	mov    DWORD PTR [ecx],eax
c0017ea9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017eac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017eb1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017eb5:	e9 55 ff ff ff       	jmp    c0017e0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017eba:	90                   	nop
c0017ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ebf:	83 c4 2c             	add    esp,0x2c
c0017ec2:	c2 04 00             	ret    0x4
c0017ec5:	90                   	nop

c0017ec6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ec6:	83 ec 1c             	sub    esp,0x1c
c0017ec9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ecd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ed1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ed5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eda:	88 c8                	mov    al,cl
c0017edc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ee0:	88 d0                	mov    al,dl
c0017ee2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eea:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ef7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017efb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f03:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f0d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f14:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f23:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f27:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2e:	83 c2 2a             	add    edx,0x2a
c0017f31:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f39:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f43:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f4a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f52:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f58:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f69:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f6f:	3d 00 02 00 00       	cmp    eax,0x200
c0017f74:	75 10                	jne    c0017f86 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	68 61 bf 02 c0       	push   0xc002bf61
c0017f7e:	e8 2c 24 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	90                   	nop
c0017f87:	83 c4 1c             	add    esp,0x1c
c0017f8a:	c3                   	ret    
c0017f8b:	90                   	nop

c0017f8c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f8c:	b8 00 00 00 00       	mov    eax,0x0
c0017f91:	c3                   	ret    

c0017f92 <ACPI::detectPCI()>:
c0017f92:	53                   	push   ebx
c0017f93:	83 ec 28             	sub    esp,0x28
c0017f96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f9b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017fa0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0017fa5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fab:	83 e0 04             	and    eax,0x4
c0017fae:	84 c0                	test   al,al
c0017fb0:	74 2b                	je     c0017fdd <ACPI::detectPCI()+0x4b>
c0017fb2:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c0017fb7:	83 ec 08             	sub    esp,0x8
c0017fba:	68 7e bf 02 c0       	push   0xc002bf7e
c0017fbf:	50                   	push   eax
c0017fc0:	e8 a9 f8 ff ff       	call   c001786e <findDataTable(unsigned char*, char*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fcc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017fd1:	74 0a                	je     c0017fdd <ACPI::detectPCI()+0x4b>
c0017fd3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fd8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fdd:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fe9:	8a 00                	mov    al,BYTE PTR [eax]
c0017feb:	3c 01                	cmp    al,0x1
c0017fed:	75 0c                	jne    c0017ffb <ACPI::detectPCI()+0x69>
c0017fef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ff4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ff9:	eb 26                	jmp    c0018021 <ACPI::detectPCI()+0x8f>
c0017ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fff:	8a 00                	mov    al,BYTE PTR [eax]
c0018001:	3c 02                	cmp    al,0x2
c0018003:	75 1c                	jne    c0018021 <ACPI::detectPCI()+0x8f>
c0018005:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001800a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001800f:	74 10                	je     c0018021 <ACPI::detectPCI()+0x8f>
c0018011:	83 ec 0c             	sub    esp,0xc
c0018014:	68 68 c1 02 c0       	push   0xc002c168
c0018019:	e8 91 23 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018025:	83 f0 01             	xor    eax,0x1
c0018028:	84 c0                	test   al,al
c001802a:	74 3f                	je     c001806b <ACPI::detectPCI()+0xd9>
c001802c:	e8 1f 81 fe ff       	call   c0000150 <manualPCIProbe>
c0018031:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018035:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001803a:	75 0c                	jne    c0018048 <ACPI::detectPCI()+0xb6>
c001803c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018041:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018046:	eb 23                	jmp    c001806b <ACPI::detectPCI()+0xd9>
c0018048:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001804d:	75 1c                	jne    c001806b <ACPI::detectPCI()+0xd9>
c001804f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018054:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018059:	74 10                	je     c001806b <ACPI::detectPCI()+0xd9>
c001805b:	83 ec 0c             	sub    esp,0xc
c001805e:	68 68 c1 02 c0       	push   0xc002c168
c0018063:	e8 47 23 00 00       	call   c001a3af <Krnl::panic(char const*)>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018070:	74 0d                	je     c001807f <ACPI::detectPCI()+0xed>
c0018072:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0018076:	83 f0 01             	xor    eax,0x1
c0018079:	0f b6 c0             	movzx  eax,al
c001807c:	40                   	inc    eax
c001807d:	eb 05                	jmp    c0018084 <ACPI::detectPCI()+0xf2>
c001807f:	b8 00 00 00 00       	mov    eax,0x0
c0018084:	83 ec 08             	sub    esp,0x8
c0018087:	50                   	push   eax
c0018088:	68 83 bf 02 c0       	push   0xc002bf83
c001808d:	e8 69 a8 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018092:	83 c4 10             	add    esp,0x10
c0018095:	83 ec 0c             	sub    esp,0xc
c0018098:	68 8c bf 02 c0       	push   0xc002bf8c
c001809d:	e8 59 a8 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	83 ec 0c             	sub    esp,0xc
c00180a8:	68 a3 bf 02 c0       	push   0xc002bfa3
c00180ad:	e8 49 a8 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00180b2:	83 c4 10             	add    esp,0x10
c00180b5:	83 ec 0c             	sub    esp,0xc
c00180b8:	68 ae bf 02 c0       	push   0xc002bfae
c00180bd:	e8 9a 78 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c00180c2:	83 c4 10             	add    esp,0x10
c00180c5:	c7 44 24 08 70 02 00 00 	mov    DWORD PTR [esp+0x8],0x270
c00180cd:	83 ec 0c             	sub    esp,0xc
c00180d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180d4:	e8 29 78 ff ff       	call   c000f902 <malloc>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	89 c3                	mov    ebx,eax
c00180de:	83 ec 0c             	sub    esp,0xc
c00180e1:	53                   	push   ebx
c00180e2:	e8 07 b8 00 00       	call   c00238ee <IDE::IDE()>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00180ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f2:	83 ec 08             	sub    esp,0x8
c00180f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180f9:	50                   	push   eax
c00180fa:	e8 35 bc ff ff       	call   c0013d34 <Device::addChild(Device*)>
c00180ff:	83 c4 10             	add    esp,0x10
c0018102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018106:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0018110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018114:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001811d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018121:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001812a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018130:	83 c0 08             	add    eax,0x8
c0018133:	8b 00                	mov    eax,DWORD PTR [eax]
c0018135:	6a 00                	push   0x0
c0018137:	6a 00                	push   0x0
c0018139:	6a 00                	push   0x0
c001813b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001813f:	ff d0                	call   eax
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	90                   	nop
c0018145:	83 c4 28             	add    esp,0x28
c0018148:	5b                   	pop    ebx
c0018149:	c3                   	ret    

c001814a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001814a:	83 ec 1c             	sub    esp,0x1c
c001814d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018151:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018154:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018158:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001815d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018162:	83 ec 08             	sub    esp,0x8
c0018165:	52                   	push   edx
c0018166:	50                   	push   eax
c0018167:	e8 88 6d ff ff       	call   c000eef4 <Computer::readCMOS(unsigned char)>
c001816c:	83 c4 10             	add    esp,0x10
c001816f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018173:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0018178:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001817d:	83 ec 04             	sub    esp,0x4
c0018180:	6a 01                	push   0x1
c0018182:	52                   	push   edx
c0018183:	50                   	push   eax
c0018184:	e8 a5 6e ff ff       	call   c000f02e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018189:	83 c4 10             	add    esp,0x10
c001818c:	90                   	nop
c001818d:	83 c4 1c             	add    esp,0x1c
c0018190:	c3                   	ret    
c0018191:	90                   	nop

c0018192 <ACPI::sleep()>:
c0018192:	83 ec 0c             	sub    esp,0xc
c0018195:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c001819a:	85 c0                	test   eax,eax
c001819c:	74 07                	je     c00181a5 <ACPI::sleep()+0x13>
c001819e:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c00181a3:	ff d0                	call   eax
c00181a5:	90                   	nop
c00181a6:	83 c4 0c             	add    esp,0xc
c00181a9:	c3                   	ret    

c00181aa <ACPI::open(int, int, void*)>:
c00181aa:	57                   	push   edi
c00181ab:	56                   	push   esi
c00181ac:	53                   	push   ebx
c00181ad:	81 ec 60 01 00 00    	sub    esp,0x160
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00181bd:	e8 d0 fd ff ff       	call   c0017f92 <ACPI::detectPCI()>
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	83 ec 0c             	sub    esp,0xc
c00181c8:	68 90 c1 02 c0       	push   0xc002c190
c00181cd:	e8 8a 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c00181d2:	83 c4 10             	add    esp,0x10
c00181d5:	83 ec 0c             	sub    esp,0xc
c00181d8:	68 c3 bf 02 c0       	push   0xc002bfc3
c00181dd:	e8 30 4b 00 00       	call   c001cd12 <Thr::loadKernelSymbolTable(char const*)>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	83 ec 0c             	sub    esp,0xc
c00181e8:	68 e1 bf 02 c0       	push   0xc002bfe1
c00181ed:	e8 6a 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c00181f2:	83 c4 10             	add    esp,0x10
c00181f5:	83 ec 04             	sub    esp,0x4
c00181f8:	6a 0c                	push   0xc
c00181fa:	68 fc bf 02 c0       	push   0xc002bffc
c00181ff:	68 0d c0 02 c0       	push   0xc002c00d
c0018204:	e8 62 2f 00 00       	call   c001b16b <Reg::readIntWithDefault(char*, char*, int)>
c0018209:	83 c4 10             	add    esp,0x10
c001820c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018213:	83 ec 0c             	sub    esp,0xc
c0018216:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001821d:	e8 11 95 ff ff       	call   c0011733 <Virt::setupPageSwapping(int)>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	68 15 aa 02 c0       	push   0xc002aa15
c001822d:	e8 2a 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018232:	83 c4 10             	add    esp,0x10
c0018235:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c001823b:	83 ec 08             	sub    esp,0x8
c001823e:	6a 01                	push   0x1
c0018240:	68 14 c0 02 c0       	push   0xc002c014
c0018245:	e8 3f 55 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c001824a:	83 c4 10             	add    esp,0x10
c001824d:	83 ec 08             	sub    esp,0x8
c0018250:	53                   	push   ebx
c0018251:	50                   	push   eax
c0018252:	e8 5d 57 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018261:	83 ec 08             	sub    esp,0x8
c0018264:	6a 12                	push   0x12
c0018266:	50                   	push   eax
c0018267:	e8 4c be ff ff       	call   c00140b8 <getDevicesOfType(DeviceType)>
c001826c:	83 c4 0c             	add    esp,0xc
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018279:	50                   	push   eax
c001827a:	e8 d1 12 01 00       	call   c0029550 <LinkedList<Device>::isEmpty()>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	83 f0 01             	xor    eax,0x1
c0018285:	84 c0                	test   al,al
c0018287:	0f 84 43 01 00 00    	je     c00183d0 <ACPI::open(int, int, void*)+0x226>
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018297:	50                   	push   eax
c0018298:	e8 cf 12 01 00       	call   c002956c <LinkedList<Device>::getFirstElement()>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00182a7:	83 ec 0c             	sub    esp,0xc
c00182aa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182b1:	50                   	push   eax
c00182b2:	e8 bd 12 01 00       	call   c0029574 <LinkedList<Device>::removeFirst()>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00182c1:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00182c8:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00182cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182d3:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00182d9:	ba 09 00 00 00       	mov    edx,0x9
c00182de:	fc                   	cld    
c00182df:	89 c7                	mov    edi,eax
c00182e1:	89 de                	mov    esi,ebx
c00182e3:	89 d1                	mov    ecx,edx
c00182e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182e7:	83 ec 08             	sub    esp,0x8
c00182ea:	8d 44 24 38          	lea    eax,[esp+0x38]
c00182ee:	50                   	push   eax
c00182ef:	83 ec 24             	sub    esp,0x24
c00182f2:	89 e0                	mov    eax,esp
c00182f4:	89 c3                	mov    ebx,eax
c00182f6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00182fa:	ba 09 00 00 00       	mov    edx,0x9
c00182ff:	89 df                	mov    edi,ebx
c0018301:	89 c6                	mov    esi,eax
c0018303:	89 d1                	mov    ecx,edx
c0018305:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018307:	e8 44 af 00 00       	call   c0023250 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001830c:	83 c4 30             	add    esp,0x30
c001830f:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018316:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001831e:	0f 84 4b ff ff ff    	je     c001826f <ACPI::open(int, int, void*)+0xc5>
c0018324:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001832f:	83 ec 0c             	sub    esp,0xc
c0018332:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018339:	e8 c4 75 ff ff       	call   c000f902 <malloc>
c001833e:	83 c4 10             	add    esp,0x10
c0018341:	89 c3                	mov    ebx,eax
c0018343:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0018348:	83 ec 04             	sub    esp,0x4
c001834b:	50                   	push   eax
c001834c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018353:	53                   	push   ebx
c0018354:	e8 01 ab ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001836d:	e8 ba ad ff ff       	call   c001312c <File::exists()>
c0018372:	83 c4 10             	add    esp,0x10
c0018375:	84 c0                	test   al,al
c0018377:	74 27                	je     c00183a0 <ACPI::open(int, int, void*)+0x1f6>
c0018379:	83 ec 08             	sub    esp,0x8
c001837c:	6a 01                	push   0x1
c001837e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018385:	e8 ff 53 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	83 ec 08             	sub    esp,0x8
c0018390:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018397:	50                   	push   eax
c0018398:	e8 17 56 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c001839d:	83 c4 10             	add    esp,0x10
c00183a0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00183a8:	0f 84 c1 fe ff ff    	je     c001826f <ACPI::open(int, int, void*)+0xc5>
c00183ae:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00183b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b7:	83 c0 08             	add    eax,0x8
c00183ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00183bc:	83 ec 0c             	sub    esp,0xc
c00183bf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183c6:	ff d0                	call   eax
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	e9 9f fe ff ff       	jmp    c001826f <ACPI::open(int, int, void*)+0xc5>
c00183d0:	83 ec 0c             	sub    esp,0xc
c00183d3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183da:	50                   	push   eax
c00183db:	e8 6e 11 01 00       	call   c002954e <LinkedList<Device>::~LinkedList()>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c00183e9:	83 ec 08             	sub    esp,0x8
c00183ec:	6a 01                	push   0x1
c00183ee:	68 2f c0 02 c0       	push   0xc002c02f
c00183f3:	e8 91 53 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c00183f8:	83 c4 10             	add    esp,0x10
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	53                   	push   ebx
c00183ff:	50                   	push   eax
c0018400:	e8 af 55 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c0018405:	83 c4 10             	add    esp,0x10
c0018408:	8b 1d 48 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f248
c001840e:	83 ec 08             	sub    esp,0x8
c0018411:	6a 01                	push   0x1
c0018413:	68 4c c0 02 c0       	push   0xc002c04c
c0018418:	e8 6c 53 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c001841d:	83 c4 10             	add    esp,0x10
c0018420:	83 ec 08             	sub    esp,0x8
c0018423:	53                   	push   ebx
c0018424:	50                   	push   eax
c0018425:	e8 8a 55 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0018432:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018438:	83 e0 04             	and    eax,0x4
c001843b:	84 c0                	test   al,al
c001843d:	0f 84 0d 01 00 00    	je     c0018550 <ACPI::open(int, int, void*)+0x3a6>
c0018443:	83 ec 0c             	sub    esp,0xc
c0018446:	68 69 c0 02 c0       	push   0xc002c069
c001844b:	e8 0c 75 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018450:	83 c4 10             	add    esp,0x10
c0018453:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001845e:	83 ec 0c             	sub    esp,0xc
c0018461:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018468:	e8 95 74 ff ff       	call   c000f902 <malloc>
c001846d:	83 c4 10             	add    esp,0x10
c0018470:	89 c3                	mov    ebx,eax
c0018472:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0018477:	83 ec 04             	sub    esp,0x4
c001847a:	50                   	push   eax
c001847b:	68 86 c0 02 c0       	push   0xc002c086
c0018480:	53                   	push   ebx
c0018481:	e8 d4 a9 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c0018486:	83 c4 10             	add    esp,0x10
c0018489:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018490:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018498:	74 1a                	je     c00184b4 <ACPI::open(int, int, void*)+0x30a>
c001849a:	83 ec 0c             	sub    esp,0xc
c001849d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00184a4:	e8 83 ac ff ff       	call   c001312c <File::exists()>
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	84 c0                	test   al,al
c00184ae:	74 04                	je     c00184b4 <ACPI::open(int, int, void*)+0x30a>
c00184b0:	b0 01                	mov    al,0x1
c00184b2:	eb 02                	jmp    c00184b6 <ACPI::open(int, int, void*)+0x30c>
c00184b4:	b0 00                	mov    al,0x0
c00184b6:	84 c0                	test   al,al
c00184b8:	74 25                	je     c00184df <ACPI::open(int, int, void*)+0x335>
c00184ba:	83 ec 08             	sub    esp,0x8
c00184bd:	6a 01                	push   0x1
c00184bf:	68 86 c0 02 c0       	push   0xc002c086
c00184c4:	e8 c0 52 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	83 ec 08             	sub    esp,0x8
c00184cf:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00184d6:	50                   	push   eax
c00184d7:	e8 d8 54 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184e7:	74 27                	je     c0018510 <ACPI::open(int, int, void*)+0x366>
c00184e9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184f1:	74 1d                	je     c0018510 <ACPI::open(int, int, void*)+0x366>
c00184f3:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00184fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00184fc:	83 c0 08             	add    eax,0x8
c00184ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001850b:	ff d0                	call   eax
c001850d:	83 c4 10             	add    esp,0x10
c0018510:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c0018515:	83 ec 08             	sub    esp,0x8
c0018518:	68 a3 c0 02 c0       	push   0xc002c0a3
c001851d:	50                   	push   eax
c001851e:	e8 4b f3 ff ff       	call   c001786e <findDataTable(unsigned char*, char*)>
c0018523:	83 c4 10             	add    esp,0x10
c0018526:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001852d:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018535:	74 19                	je     c0018550 <ACPI::open(int, int, void*)+0x3a6>
c0018537:	83 ec 08             	sub    esp,0x8
c001853a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018541:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018548:	e8 fd fb ff ff       	call   c001814a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001854d:	83 c4 10             	add    esp,0x10
c0018550:	b8 00 00 00 00       	mov    eax,0x0
c0018555:	81 c4 60 01 00 00    	add    esp,0x160
c001855b:	5b                   	pop    ebx
c001855c:	5e                   	pop    esi
c001855d:	5f                   	pop    edi
c001855e:	c3                   	ret    
c001855f:	90                   	nop

c0018560 <CPU::close(int, int, void*)>:
c0018560:	31 c0                	xor    eax,eax
c0018562:	c3                   	ret    
c0018563:	90                   	nop

c0018564 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018564:	55                   	push   ebp
c0018565:	57                   	push   edi
c0018566:	56                   	push   esi
c0018567:	53                   	push   ebx
c0018568:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001856c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018570:	89 ce                	mov    esi,ecx
c0018572:	89 d5                	mov    ebp,edx
c0018574:	80 f9 04             	cmp    cl,0x4
c0018577:	75 28                	jne    c00185a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018579:	8d 42 f9             	lea    eax,[edx-0x7]
c001857c:	3c 03                	cmp    al,0x3
c001857e:	0f 86 63 01 00 00    	jbe    c00186e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018584:	80 fa 03             	cmp    dl,0x3
c0018587:	0f 84 5a 01 00 00    	je     c00186e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001858d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018590:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018595:	89 fb                	mov    ebx,edi
c0018597:	80 fb 01             	cmp    bl,0x1
c001859a:	77 4e                	ja     c00185ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001859c:	e9 52 01 00 00       	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a1:	80 f9 05             	cmp    cl,0x5
c00185a4:	75 4d                	jne    c00185f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00185a6:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c00185ab:	80 fa 03             	cmp    dl,0x3
c00185ae:	0f 86 3f 01 00 00    	jbe    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b4:	8d 7a fa             	lea    edi,[edx-0x6]
c00185b7:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c00185bc:	89 fb                	mov    ebx,edi
c00185be:	80 fb 01             	cmp    bl,0x1
c00185c1:	0f 86 2c 01 00 00    	jbe    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c7:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c00185cc:	80 fa 08             	cmp    dl,0x8
c00185cf:	0f 84 1e 01 00 00    	je     c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d5:	89 d7                	mov    edi,edx
c00185d7:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c00185dc:	83 e7 fb             	and    edi,0xfffffffb
c00185df:	89 fb                	mov    ebx,edi
c00185e1:	80 fb 09             	cmp    bl,0x9
c00185e4:	0f 84 09 01 00 00    	je     c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ea:	31 c0                	xor    eax,eax
c00185ec:	89 eb                	mov    ebx,ebp
c00185ee:	0f b6 fb             	movzx  edi,bl
c00185f1:	eb 30                	jmp    c0018623 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00185f3:	31 c0                	xor    eax,eax
c00185f5:	80 f9 06             	cmp    cl,0x6
c00185f8:	75 f2                	jne    c00185ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185fa:	80 fa 0a             	cmp    dl,0xa
c00185fd:	77 ed                	ja     c00185ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185ff:	bf de 05 00 00       	mov    edi,0x5de
c0018604:	0f a3 d7             	bt     edi,edx
c0018607:	73 e3                	jae    c00185ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018609:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c001860e:	e9 e0 00 00 00       	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018613:	39 c7                	cmp    edi,eax
c0018615:	0f 84 d3 00 00 00    	je     c00186ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001861b:	40                   	inc    eax
c001861c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018621:	74 09                	je     c001862c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018623:	89 f3                	mov    ebx,esi
c0018625:	80 fb 0f             	cmp    bl,0xf
c0018628:	75 f1                	jne    c001861b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001862a:	eb e7                	jmp    c0018613 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001862c:	80 f9 10             	cmp    cl,0x10
c001862f:	75 14                	jne    c0018645 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018631:	8d 42 fc             	lea    eax,[edx-0x4]
c0018634:	83 e0 fb             	and    eax,0xfffffffb
c0018637:	3c 02                	cmp    al,0x2
c0018639:	76 34                	jbe    c001866f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001863b:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c0018640:	80 fa 02             	cmp    dl,0x2
c0018643:	eb 24                	jmp    c0018669 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018645:	80 f9 11             	cmp    cl,0x11
c0018648:	75 13                	jne    c001865d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001864a:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c001864f:	80 fa 03             	cmp    dl,0x3
c0018652:	0f 85 9b 00 00 00    	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018658:	e9 91 00 00 00       	jmp    c00186ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001865d:	80 f9 12             	cmp    cl,0x12
c0018660:	75 14                	jne    c0018676 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018662:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c0018667:	fe ca                	dec    dl
c0018669:	0f 85 84 00 00 00    	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001866f:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018674:	eb 7d                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018676:	80 f9 14             	cmp    cl,0x14
c0018679:	75 12                	jne    c001868d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001867b:	4a                   	dec    edx
c001867c:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c0018681:	80 fa 01             	cmp    dl,0x1
c0018684:	77 6d                	ja     c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018686:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c001868b:	eb 66                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001868d:	80 f9 15             	cmp    cl,0x15
c0018690:	75 31                	jne    c00186c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018692:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018697:	80 fa 01             	cmp    dl,0x1
c001869a:	74 57                	je     c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869c:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c00186a1:	80 fa 13             	cmp    dl,0x13
c00186a4:	76 0c                	jbe    c00186b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00186a6:	80 fa 30             	cmp    dl,0x30
c00186a9:	75 48                	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ab:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c00186b0:	eb 41                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b2:	b9 04 00 09 00       	mov    ecx,0x90004
c00186b7:	0f a3 d1             	bt     ecx,edx
c00186ba:	73 37                	jae    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186bc:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c00186c1:	eb 30                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c3:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c00186c8:	80 f9 16             	cmp    cl,0x16
c00186cb:	75 26                	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186cd:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c00186d2:	84 d2                	test   dl,dl
c00186d4:	74 1d                	je     c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d6:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c00186db:	80 fa 30             	cmp    dl,0x30
c00186de:	75 13                	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e0:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c00186e5:	eb 0c                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e7:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00186ec:	eb 05                	jmp    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ee:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c00186f3:	5b                   	pop    ebx
c00186f4:	5e                   	pop    esi
c00186f5:	5f                   	pop    edi
c00186f6:	5d                   	pop    ebp
c00186f7:	c3                   	ret    

c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00186f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018700:	80 f9 04             	cmp    cl,0x4
c0018703:	75 6b                	jne    c0018770 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018705:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c001870a:	80 fa 01             	cmp    dl,0x1
c001870d:	0f 86 92 02 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018713:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018718:	80 fa 02             	cmp    dl,0x2
c001871b:	0f 84 84 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018721:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018726:	80 fa 03             	cmp    dl,0x3
c0018729:	0f 84 76 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872f:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018734:	80 fa 04             	cmp    dl,0x4
c0018737:	0f 84 68 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873d:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018742:	80 fa 05             	cmp    dl,0x5
c0018745:	0f 84 5a 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874b:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018750:	80 fa 07             	cmp    dl,0x7
c0018753:	0f 84 4c 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018759:	83 ea 08             	sub    edx,0x8
c001875c:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c0018761:	80 fa 01             	cmp    dl,0x1
c0018764:	0f 87 3b 02 00 00    	ja     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001876a:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c001876f:	c3                   	ret    
c0018770:	80 f9 05             	cmp    cl,0x5
c0018773:	75 45                	jne    c00187ba <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018775:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018778:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c001877d:	80 f9 02             	cmp    cl,0x2
c0018780:	0f 86 1f 02 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018786:	80 fa 04             	cmp    dl,0x4
c0018789:	0f 84 f3 01 00 00    	je     c0018982 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001878f:	80 fa 07             	cmp    dl,0x7
c0018792:	0f 84 0d 02 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018798:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c001879d:	80 fa 08             	cmp    dl,0x8
c00187a0:	0f 84 ff 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a6:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c00187ab:	80 fa 09             	cmp    dl,0x9
c00187ae:	0f 85 f1 01 00 00    	jne    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b4:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c00187b9:	c3                   	ret    
c00187ba:	80 f9 06             	cmp    cl,0x6
c00187bd:	0f 85 85 01 00 00    	jne    c0018948 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00187c3:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c00187c8:	80 fa 01             	cmp    dl,0x1
c00187cb:	0f 84 d4 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d1:	8d 42 fb             	lea    eax,[edx-0x5]
c00187d4:	3c 01                	cmp    al,0x1
c00187d6:	0f 86 ac 01 00 00    	jbe    c0018988 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187dc:	80 fa 03             	cmp    dl,0x3
c00187df:	0f 84 a3 01 00 00    	je     c0018988 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187e5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00187e8:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c00187ed:	80 f9 01             	cmp    cl,0x1
c00187f0:	0f 86 af 01 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f6:	80 fa 09             	cmp    dl,0x9
c00187f9:	0f 84 8f 01 00 00    	je     c001898e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00187ff:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018802:	80 f9 01             	cmp    cl,0x1
c0018805:	0f 86 9a 01 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880b:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018810:	80 fa 0d             	cmp    dl,0xd
c0018813:	0f 84 8c 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018819:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c001881e:	80 fa 0e             	cmp    dl,0xe
c0018821:	0f 84 7e 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018827:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c001882c:	80 fa 0f             	cmp    dl,0xf
c001882f:	0f 84 70 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018835:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c001883a:	80 fa 15             	cmp    dl,0x15
c001883d:	0f 84 62 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018843:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018846:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c001884b:	80 f9 01             	cmp    cl,0x1
c001884e:	0f 86 51 01 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018854:	80 fa 1a             	cmp    dl,0x1a
c0018857:	0f 84 37 01 00 00    	je     c0018994 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001885d:	80 fa 1c             	cmp    dl,0x1c
c0018860:	0f 84 34 01 00 00    	je     c001899a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018866:	80 fa 1d             	cmp    dl,0x1d
c0018869:	0f 84 36 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886f:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018874:	80 fa 25             	cmp    dl,0x25
c0018877:	0f 84 28 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018880:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018885:	80 f9 01             	cmp    cl,0x1
c0018888:	0f 86 17 01 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888e:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018893:	80 fa 2a             	cmp    dl,0x2a
c0018896:	0f 84 09 01 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889c:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c00188a1:	80 fa 2c             	cmp    dl,0x2c
c00188a4:	0f 84 fb 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188aa:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c00188af:	80 fa 2d             	cmp    dl,0x2d
c00188b2:	0f 84 ed 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b8:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c00188bd:	80 fa 2e             	cmp    dl,0x2e
c00188c0:	0f 84 df 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c6:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c00188cb:	80 fa 2f             	cmp    dl,0x2f
c00188ce:	0f 84 d1 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d4:	8d 4a cb             	lea    ecx,[edx-0x35]
c00188d7:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c00188dc:	80 f9 01             	cmp    cl,0x1
c00188df:	0f 86 c0 00 00 00    	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e5:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00188ea:	80 fa 37             	cmp    dl,0x37
c00188ed:	0f 84 b2 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f3:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00188f8:	80 fa 3a             	cmp    dl,0x3a
c00188fb:	0f 84 a4 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018901:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018906:	80 fa 3c             	cmp    dl,0x3c
c0018909:	0f 84 96 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890f:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018914:	80 fa 3d             	cmp    dl,0x3d
c0018917:	0f 84 88 00 00 00    	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891d:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018922:	80 fa 3e             	cmp    dl,0x3e
c0018925:	74 7e                	je     c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018927:	8d 42 bb             	lea    eax,[edx-0x45]
c001892a:	3c 01                	cmp    al,0x1
c001892c:	76 72                	jbe    c00189a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001892e:	80 fa 3f             	cmp    dl,0x3f
c0018931:	74 6d                	je     c00189a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018933:	80 fa 4a             	cmp    dl,0x4a
c0018936:	74 0a                	je     c0018942 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018938:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c001893d:	80 fa 4d             	cmp    dl,0x4d
c0018940:	75 63                	jne    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018942:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018947:	c3                   	ret    
c0018948:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c001894d:	80 f9 0b             	cmp    cl,0xb
c0018950:	75 0a                	jne    c001895c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018952:	fe ca                	dec    dl
c0018954:	75 4f                	jne    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018956:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c001895b:	c3                   	ret    
c001895c:	80 f9 0f             	cmp    cl,0xf
c001895f:	75 44                	jne    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018961:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018966:	80 fa 02             	cmp    dl,0x2
c0018969:	76 3a                	jbe    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896b:	8d 42 fd             	lea    eax,[edx-0x3]
c001896e:	3c 01                	cmp    al,0x1
c0018970:	76 0a                	jbe    c001897c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018972:	b8 ce c4 02 c0       	mov    eax,0xc002c4ce
c0018977:	80 fa 06             	cmp    dl,0x6
c001897a:	75 29                	jne    c00189a5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897c:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018981:	c3                   	ret    
c0018982:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018987:	c3                   	ret    
c0018988:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c001898d:	c3                   	ret    
c001898e:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018993:	c3                   	ret    
c0018994:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018999:	c3                   	ret    
c001899a:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c001899f:	c3                   	ret    
c00189a0:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c00189a5:	c3                   	ret    

c00189a6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00189a6:	60                   	pusha  
c00189a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189b3:	9c                   	pushf  
c00189b4:	fa                   	cli    
c00189b5:	0f 09                	wbinvd 
c00189b7:	0f 30                	wrmsr  
c00189b9:	9d                   	popf   
c00189ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189be:	89 02                	mov    DWORD PTR [edx],eax
c00189c0:	61                   	popa   
c00189c1:	c3                   	ret    

c00189c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00189c2:	60                   	pusha  
c00189c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189c7:	9c                   	pushf  
c00189c8:	fa                   	cli    
c00189c9:	0f 09                	wbinvd 
c00189cb:	31 c0                	xor    eax,eax
c00189cd:	31 d2                	xor    edx,edx
c00189cf:	0f 32                	rdmsr  
c00189d1:	9d                   	popf   
c00189d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189d6:	89 02                	mov    DWORD PTR [edx],eax
c00189d8:	61                   	popa   
c00189d9:	c3                   	ret    

c00189da <CPU::AMD_K6_writeback(int, int, int)>:
c00189da:	56                   	push   esi
c00189db:	53                   	push   ebx
c00189dc:	83 ec 10             	sub    esp,0x10
c00189df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00189e8:	75 5d                	jne    c0018a47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189ea:	83 f8 08             	cmp    eax,0x8
c00189ed:	75 09                	jne    c00189f8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00189ef:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00189f4:	7e 13                	jle    c0018a09 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00189f6:	eb 30                	jmp    c0018a28 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00189f8:	83 f8 06             	cmp    eax,0x6
c00189fb:	7c 4a                	jl     c0018a47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189fd:	83 f8 07             	cmp    eax,0x7
c0018a00:	7e 07                	jle    c0018a09 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a02:	83 f8 09             	cmp    eax,0x9
c0018a05:	74 21                	je     c0018a28 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a07:	eb 3e                	jmp    c0018a47 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a09:	89 e6                	mov    esi,esp
c0018a0b:	8b 1d 88 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f288
c0018a11:	56                   	push   esi
c0018a12:	c1 eb 15             	shr    ebx,0x15
c0018a15:	68 82 00 00 c0       	push   0xc0000082
c0018a1a:	83 e3 7e             	and    ebx,0x7e
c0018a1d:	e8 a0 ff ff ff       	call   c00189c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a22:	56                   	push   esi
c0018a23:	6a 00                	push   0x0
c0018a25:	53                   	push   ebx
c0018a26:	eb 12                	jmp    c0018a3a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018a28:	89 e3                	mov    ebx,esp
c0018a2a:	53                   	push   ebx
c0018a2b:	68 82 00 00 c0       	push   0xc0000082
c0018a30:	e8 8d ff ff ff       	call   c00189c2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a35:	53                   	push   ebx
c0018a36:	6a 00                	push   0x0
c0018a38:	6a 00                	push   0x0
c0018a3a:	68 82 00 00 c0       	push   0xc0000082
c0018a3f:	e8 62 ff ff ff       	call   c00189a6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018a44:	83 c4 18             	add    esp,0x18
c0018a47:	83 c4 10             	add    esp,0x10
c0018a4a:	5b                   	pop    ebx
c0018a4b:	5e                   	pop    esi
c0018a4c:	c3                   	ret    
c0018a4d:	90                   	nop

c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018a4e:	55                   	push   ebp
c0018a4f:	57                   	push   edi
c0018a50:	56                   	push   esi
c0018a51:	53                   	push   ebx
c0018a52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a56:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018a5a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a5e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a62:	39 05 60 e7 02 c0    	cmp    DWORD PTR ds:0xc002e760,eax
c0018a68:	75 23                	jne    c0018a8d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018a6a:	a1 6c 1d 03 c0       	mov    eax,ds:0xc0031d6c
c0018a6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a73:	89 06                	mov    DWORD PTR [esi],eax
c0018a75:	a1 68 1d 03 c0       	mov    eax,ds:0xc0031d68
c0018a7a:	89 07                	mov    DWORD PTR [edi],eax
c0018a7c:	a1 64 1d 03 c0       	mov    eax,ds:0xc0031d64
c0018a81:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018a84:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c0018a89:	89 02                	mov    DWORD PTR [edx],eax
c0018a8b:	eb 3f                	jmp    c0018acc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018a8d:	31 c9                	xor    ecx,ecx
c0018a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a93:	0f a2                	cpuid  
c0018a95:	89 06                	mov    DWORD PTR [esi],eax
c0018a97:	89 1f                	mov    DWORD PTR [edi],ebx
c0018a99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a9d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018aa0:	89 10                	mov    DWORD PTR [eax],edx
c0018aa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018aa6:	a3 60 e7 02 c0       	mov    ds:0xc002e760,eax
c0018aab:	8b 06                	mov    eax,DWORD PTR [esi]
c0018aad:	a3 6c 1d 03 c0       	mov    ds:0xc0031d6c,eax
c0018ab2:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ab4:	a3 68 1d 03 c0       	mov    ds:0xc0031d68,eax
c0018ab9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018abc:	a3 64 1d 03 c0       	mov    ds:0xc0031d64,eax
c0018ac1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ac7:	a3 60 1d 03 c0       	mov    ds:0xc0031d60,eax
c0018acc:	5b                   	pop    ebx
c0018acd:	5e                   	pop    esi
c0018ace:	5f                   	pop    edi
c0018acf:	5d                   	pop    ebp
c0018ad0:	c3                   	ret    
c0018ad1:	90                   	nop

c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>:
c0018ad2:	83 ec 10             	sub    esp,0x10
c0018ad5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad9:	50                   	push   eax
c0018ada:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ade:	50                   	push   eax
c0018adf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae3:	50                   	push   eax
c0018ae4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae8:	50                   	push   eax
c0018ae9:	6a 01                	push   0x1
c0018aeb:	e8 5e ff ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018af0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018af4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018af8:	0f 95 c0             	setne  al
c0018afb:	83 c4 24             	add    esp,0x24
c0018afe:	c3                   	ret    
c0018aff:	90                   	nop

c0018b00 <CPU::cpuidCheckECX(unsigned int)>:
c0018b00:	83 ec 10             	sub    esp,0x10
c0018b03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b07:	50                   	push   eax
c0018b08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b0c:	50                   	push   eax
c0018b0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b11:	50                   	push   eax
c0018b12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b16:	50                   	push   eax
c0018b17:	6a 01                	push   0x1
c0018b19:	e8 30 ff ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b22:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b26:	0f 95 c0             	setne  al
c0018b29:	83 c4 24             	add    esp,0x24
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop

c0018b2e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018b2e:	83 ec 10             	sub    esp,0x10
c0018b31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b35:	50                   	push   eax
c0018b36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b3a:	50                   	push   eax
c0018b3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b3f:	50                   	push   eax
c0018b40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b44:	50                   	push   eax
c0018b45:	6a 07                	push   0x7
c0018b47:	e8 02 ff ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b50:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018b54:	0f 95 c0             	setne  al
c0018b57:	83 c4 24             	add    esp,0x24
c0018b5a:	c3                   	ret    
c0018b5b:	90                   	nop

c0018b5c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018b5c:	83 ec 10             	sub    esp,0x10
c0018b5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b63:	50                   	push   eax
c0018b64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b68:	50                   	push   eax
c0018b69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b6d:	50                   	push   eax
c0018b6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b72:	50                   	push   eax
c0018b73:	6a 07                	push   0x7
c0018b75:	e8 d4 fe ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b7e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b82:	0f 95 c0             	setne  al
c0018b85:	83 c4 24             	add    esp,0x24
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <CPU::CPU()>:
c0018b8a:	83 ec 0c             	sub    esp,0xc
c0018b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b91:	83 ec 08             	sub    esp,0x8
c0018b94:	68 ce c4 02 c0       	push   0xc002c4ce
c0018b99:	50                   	push   eax
c0018b9a:	e8 99 b3 ff ff       	call   c0013f38 <Device::Device(char const*)>
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	ba a8 c5 02 c0       	mov    edx,0xc002c5a8
c0018ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bab:	89 10                	mov    DWORD PTR [eax],edx
c0018bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bb1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bbf:	05 78 01 00 00       	add    eax,0x178
c0018bc4:	83 ec 0c             	sub    esp,0xc
c0018bc7:	50                   	push   eax
c0018bc8:	e8 4b 65 ff ff       	call   c000f118 <GDT::GDT()>
c0018bcd:	83 c4 10             	add    esp,0x10
c0018bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bd4:	05 7c 09 00 00       	add    eax,0x97c
c0018bd9:	83 ec 0c             	sub    esp,0xc
c0018bdc:	50                   	push   eax
c0018bdd:	e8 a0 67 ff ff       	call   c000f382 <IDT::IDT()>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018be9:	05 7c 11 00 00       	add    eax,0x117c
c0018bee:	83 ec 0c             	sub    esp,0xc
c0018bf1:	50                   	push   eax
c0018bf2:	e8 2f 82 ff ff       	call   c0010e26 <TSS::TSS()>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bfe:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c09:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018c13:	90                   	nop
c0018c14:	83 c4 0c             	add    esp,0xc
c0018c17:	c3                   	ret    

c0018c18 <CPU::displayFeatures()>:
c0018c18:	53                   	push   ebx
c0018c19:	83 ec 10             	sub    esp,0x10
c0018c1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018c20:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018c26:	68 dc c1 02 c0       	push   0xc002c1dc
c0018c2b:	e8 cb 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018c30:	59                   	pop    ecx
c0018c31:	58                   	pop    eax
c0018c32:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018c38:	50                   	push   eax
c0018c39:	68 ed c1 02 c0       	push   0xc002c1ed
c0018c3e:	e8 b8 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018c43:	58                   	pop    eax
c0018c44:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c4a:	5a                   	pop    edx
c0018c4b:	c1 e8 0e             	shr    eax,0xe
c0018c4e:	0f b6 c0             	movzx  eax,al
c0018c51:	50                   	push   eax
c0018c52:	68 fe c1 02 c0       	push   0xc002c1fe
c0018c57:	e8 9f 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018c5c:	59                   	pop    ecx
c0018c5d:	58                   	pop    eax
c0018c5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c64:	66 c1 e8 06          	shr    ax,0x6
c0018c68:	0f b6 c0             	movzx  eax,al
c0018c6b:	50                   	push   eax
c0018c6c:	68 0f c2 02 c0       	push   0xc002c20f
c0018c71:	e8 85 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018c76:	c7 04 24 bc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6bc
c0018c7d:	e8 79 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018c82:	83 c4 10             	add    esp,0x10
c0018c85:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018c8a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018c91:	74 05                	je     c0018c98 <CPU::displayFeatures()+0x80>
c0018c93:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018c98:	52                   	push   edx
c0018c99:	52                   	push   edx
c0018c9a:	50                   	push   eax
c0018c9b:	68 20 c2 02 c0       	push   0xc002c220
c0018ca0:	e8 56 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018cad:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018cb4:	78 05                	js     c0018cbb <CPU::displayFeatures()+0xa3>
c0018cb6:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018cbb:	51                   	push   ecx
c0018cbc:	51                   	push   ecx
c0018cbd:	50                   	push   eax
c0018cbe:	68 37 c2 02 c0       	push   0xc002c237
c0018cc3:	e8 33 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018cc8:	83 c4 10             	add    esp,0x10
c0018ccb:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018cd0:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018cd7:	75 05                	jne    c0018cde <CPU::displayFeatures()+0xc6>
c0018cd9:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018cde:	52                   	push   edx
c0018cdf:	52                   	push   edx
c0018ce0:	50                   	push   eax
c0018ce1:	68 4e c2 02 c0       	push   0xc002c24e
c0018ce6:	e8 10 9c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018ceb:	83 c4 10             	add    esp,0x10
c0018cee:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018cf3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018cfa:	75 05                	jne    c0018d01 <CPU::displayFeatures()+0xe9>
c0018cfc:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018d01:	51                   	push   ecx
c0018d02:	51                   	push   ecx
c0018d03:	50                   	push   eax
c0018d04:	68 65 c2 02 c0       	push   0xc002c265
c0018d09:	e8 ed 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018d0e:	83 c4 10             	add    esp,0x10
c0018d11:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018d16:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018d1d:	75 05                	jne    c0018d24 <CPU::displayFeatures()+0x10c>
c0018d1f:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018d24:	52                   	push   edx
c0018d25:	52                   	push   edx
c0018d26:	50                   	push   eax
c0018d27:	68 7c c2 02 c0       	push   0xc002c27c
c0018d2c:	e8 ca 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018d39:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018d40:	75 05                	jne    c0018d47 <CPU::displayFeatures()+0x12f>
c0018d42:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018d47:	51                   	push   ecx
c0018d48:	51                   	push   ecx
c0018d49:	50                   	push   eax
c0018d4a:	68 93 c2 02 c0       	push   0xc002c293
c0018d4f:	e8 a7 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018d5c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018d63:	75 05                	jne    c0018d6a <CPU::displayFeatures()+0x152>
c0018d65:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018d6a:	52                   	push   edx
c0018d6b:	52                   	push   edx
c0018d6c:	50                   	push   eax
c0018d6d:	68 aa c2 02 c0       	push   0xc002c2aa
c0018d72:	e8 84 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018d77:	83 c4 10             	add    esp,0x10
c0018d7a:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018d7f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018d86:	75 05                	jne    c0018d8d <CPU::displayFeatures()+0x175>
c0018d88:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018d8d:	51                   	push   ecx
c0018d8e:	51                   	push   ecx
c0018d8f:	50                   	push   eax
c0018d90:	68 c1 c2 02 c0       	push   0xc002c2c1
c0018d95:	e8 61 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018d9a:	83 c4 10             	add    esp,0x10
c0018d9d:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018da2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018da9:	75 05                	jne    c0018db0 <CPU::displayFeatures()+0x198>
c0018dab:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018db0:	52                   	push   edx
c0018db1:	52                   	push   edx
c0018db2:	50                   	push   eax
c0018db3:	68 d8 c2 02 c0       	push   0xc002c2d8
c0018db8:	e8 3e 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018dbd:	83 c4 10             	add    esp,0x10
c0018dc0:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018dc5:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018dcc:	75 05                	jne    c0018dd3 <CPU::displayFeatures()+0x1bb>
c0018dce:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018dd3:	51                   	push   ecx
c0018dd4:	51                   	push   ecx
c0018dd5:	50                   	push   eax
c0018dd6:	68 ef c2 02 c0       	push   0xc002c2ef
c0018ddb:	e8 1b 9b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018de0:	83 c4 10             	add    esp,0x10
c0018de3:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018de8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018def:	75 05                	jne    c0018df6 <CPU::displayFeatures()+0x1de>
c0018df1:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018df6:	52                   	push   edx
c0018df7:	52                   	push   edx
c0018df8:	50                   	push   eax
c0018df9:	68 06 c3 02 c0       	push   0xc002c306
c0018dfe:	e8 f8 9a ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018e03:	83 c4 10             	add    esp,0x10
c0018e06:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018e0b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018e12:	75 05                	jne    c0018e19 <CPU::displayFeatures()+0x201>
c0018e14:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018e19:	51                   	push   ecx
c0018e1a:	51                   	push   ecx
c0018e1b:	50                   	push   eax
c0018e1c:	68 1d c3 02 c0       	push   0xc002c31d
c0018e21:	e8 d5 9a ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018e26:	83 c4 10             	add    esp,0x10
c0018e29:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018e2e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018e35:	75 05                	jne    c0018e3c <CPU::displayFeatures()+0x224>
c0018e37:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018e3c:	52                   	push   edx
c0018e3d:	52                   	push   edx
c0018e3e:	50                   	push   eax
c0018e3f:	68 34 c3 02 c0       	push   0xc002c334
c0018e44:	e8 b2 9a ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018e49:	83 c4 10             	add    esp,0x10
c0018e4c:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018e51:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018e58:	78 05                	js     c0018e5f <CPU::displayFeatures()+0x247>
c0018e5a:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018e5f:	51                   	push   ecx
c0018e60:	51                   	push   ecx
c0018e61:	50                   	push   eax
c0018e62:	68 4b c3 02 c0       	push   0xc002c34b
c0018e67:	e8 8f 9a ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	b8 90 aa 02 c0       	mov    eax,0xc002aa90
c0018e74:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018e7b:	75 05                	jne    c0018e82 <CPU::displayFeatures()+0x26a>
c0018e7d:	b8 94 aa 02 c0       	mov    eax,0xc002aa94
c0018e82:	52                   	push   edx
c0018e83:	52                   	push   edx
c0018e84:	50                   	push   eax
c0018e85:	68 62 c3 02 c0       	push   0xc002c362
c0018e8a:	e8 6c 9a ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0018e8f:	83 c4 18             	add    esp,0x18
c0018e92:	5b                   	pop    ebx
c0018e93:	c3                   	ret    

c0018e94 <CPU::detectFeatures()>:
c0018e94:	55                   	push   ebp
c0018e95:	57                   	push   edi
c0018e96:	56                   	push   esi
c0018e97:	53                   	push   ebx
c0018e98:	83 ec 50             	sub    esp,0x50
c0018e9b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e9f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ea9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018eb0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018eb6:	6a 0d                	push   0xd
c0018eb8:	6a 00                	push   0x0
c0018eba:	55                   	push   ebp
c0018ebb:	e8 90 78 fe ff       	call   c0000750 <memset>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0018ec8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ecf:	0f 84 22 09 00 00    	je     c00197f7 <CPU::detectFeatures()+0x963>
c0018ed5:	83 ec 0c             	sub    esp,0xc
c0018ed8:	89 ef                	mov    edi,ebp
c0018eda:	6a 10                	push   0x10
c0018edc:	e8 f1 fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018ee1:	83 e0 01             	and    eax,0x1
c0018ee4:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ee7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eed:	83 e0 fd             	and    eax,0xfffffffd
c0018ef0:	09 d0                	or     eax,edx
c0018ef2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018eff:	e8 ce fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018f04:	83 e0 01             	and    eax,0x1
c0018f07:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f0e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f14:	83 e0 fb             	and    eax,0xfffffffb
c0018f17:	09 d0                	or     eax,edx
c0018f19:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f1f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f26:	e8 a7 fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018f2b:	83 e0 01             	and    eax,0x1
c0018f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f35:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f3b:	83 e0 f7             	and    eax,0xfffffff7
c0018f3e:	09 d0                	or     eax,edx
c0018f40:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f46:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018f4d:	e8 80 fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018f52:	83 e0 01             	and    eax,0x1
c0018f55:	c1 e0 04             	shl    eax,0x4
c0018f58:	88 c2                	mov    dl,al
c0018f5a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f60:	83 e0 ef             	and    eax,0xffffffef
c0018f63:	09 d0                	or     eax,edx
c0018f65:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f6b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018f72:	e8 5b fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018f77:	83 e0 01             	and    eax,0x1
c0018f7a:	c1 e0 05             	shl    eax,0x5
c0018f7d:	88 c2                	mov    dl,al
c0018f7f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f85:	83 e0 df             	and    eax,0xffffffdf
c0018f88:	09 d0                	or     eax,edx
c0018f8a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f90:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f97:	e8 36 fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018f9c:	83 e0 01             	and    eax,0x1
c0018f9f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018fa2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018fa8:	83 e0 fd             	and    eax,0xfffffffd
c0018fab:	09 d0                	or     eax,edx
c0018fad:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018fb3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018fba:	e8 13 fb ff ff       	call   c0018ad2 <CPU::cpuidCheckEDX(unsigned int)>
c0018fbf:	83 e0 01             	and    eax,0x1
c0018fc2:	c1 e0 06             	shl    eax,0x6
c0018fc5:	88 c2                	mov    dl,al
c0018fc7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018fcd:	83 e0 bf             	and    eax,0xffffffbf
c0018fd0:	09 d0                	or     eax,edx
c0018fd2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018fd8:	58                   	pop    eax
c0018fd9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fdd:	50                   	push   eax
c0018fde:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fe2:	50                   	push   eax
c0018fe3:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018fe7:	56                   	push   esi
c0018fe8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fec:	50                   	push   eax
c0018fed:	6a 00                	push   0x0
c0018fef:	e8 5a fa ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ff4:	b8 04 00 00 00       	mov    eax,0x4
c0018ff9:	89 c1                	mov    ecx,eax
c0018ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ffd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019003:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0019007:	89 c1                	mov    ecx,eax
c0019009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001900b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019011:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019015:	89 c1                	mov    ecx,eax
c0019017:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019019:	83 c4 18             	add    esp,0x18
c001901c:	68 79 c3 02 c0       	push   0xc002c379
c0019021:	55                   	push   ebp
c0019022:	e8 71 78 fe ff       	call   c0000898 <strcmp>
c0019027:	83 c4 10             	add    esp,0x10
c001902a:	85 c0                	test   eax,eax
c001902c:	75 0f                	jne    c001903d <CPU::detectFeatures()+0x1a9>
c001902e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019038:	e9 22 02 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c001903d:	50                   	push   eax
c001903e:	50                   	push   eax
c001903f:	68 86 c3 02 c0       	push   0xc002c386
c0019044:	55                   	push   ebp
c0019045:	e8 4e 78 fe ff       	call   c0000898 <strcmp>
c001904a:	83 c4 10             	add    esp,0x10
c001904d:	85 c0                	test   eax,eax
c001904f:	74 dd                	je     c001902e <CPU::detectFeatures()+0x19a>
c0019051:	50                   	push   eax
c0019052:	50                   	push   eax
c0019053:	68 93 c3 02 c0       	push   0xc002c393
c0019058:	55                   	push   ebp
c0019059:	e8 3a 78 fe ff       	call   c0000898 <strcmp>
c001905e:	83 c4 10             	add    esp,0x10
c0019061:	85 c0                	test   eax,eax
c0019063:	74 2a                	je     c001908f <CPU::detectFeatures()+0x1fb>
c0019065:	50                   	push   eax
c0019066:	50                   	push   eax
c0019067:	68 a0 c3 02 c0       	push   0xc002c3a0
c001906c:	55                   	push   ebp
c001906d:	e8 26 78 fe ff       	call   c0000898 <strcmp>
c0019072:	83 c4 10             	add    esp,0x10
c0019075:	85 c0                	test   eax,eax
c0019077:	74 16                	je     c001908f <CPU::detectFeatures()+0x1fb>
c0019079:	50                   	push   eax
c001907a:	50                   	push   eax
c001907b:	68 ad c3 02 c0       	push   0xc002c3ad
c0019080:	55                   	push   ebp
c0019081:	e8 12 78 fe ff       	call   c0000898 <strcmp>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	85 c0                	test   eax,eax
c001908b:	74 48                	je     c00190d5 <CPU::detectFeatures()+0x241>
c001908d:	eb 0f                	jmp    c001909e <CPU::detectFeatures()+0x20a>
c001908f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019099:	e9 c1 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c001909e:	50                   	push   eax
c001909f:	50                   	push   eax
c00190a0:	68 ba c3 02 c0       	push   0xc002c3ba
c00190a5:	55                   	push   ebp
c00190a6:	e8 ed 77 fe ff       	call   c0000898 <strcmp>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	85 c0                	test   eax,eax
c00190b0:	74 23                	je     c00190d5 <CPU::detectFeatures()+0x241>
c00190b2:	57                   	push   edi
c00190b3:	57                   	push   edi
c00190b4:	68 c7 c3 02 c0       	push   0xc002c3c7
c00190b9:	55                   	push   ebp
c00190ba:	e8 d9 77 fe ff       	call   c0000898 <strcmp>
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	85 c0                	test   eax,eax
c00190c4:	75 1e                	jne    c00190e4 <CPU::detectFeatures()+0x250>
c00190c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00190d0:	e9 8a 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c00190d5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00190df:	e9 7b 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c00190e4:	56                   	push   esi
c00190e5:	56                   	push   esi
c00190e6:	68 d4 c3 02 c0       	push   0xc002c3d4
c00190eb:	55                   	push   ebp
c00190ec:	e8 a7 77 fe ff       	call   c0000898 <strcmp>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	85 c0                	test   eax,eax
c00190f6:	75 0f                	jne    c0019107 <CPU::detectFeatures()+0x273>
c00190f8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019102:	e9 58 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c0019107:	51                   	push   ecx
c0019108:	51                   	push   ecx
c0019109:	68 93 c3 02 c0       	push   0xc002c393
c001910e:	55                   	push   ebp
c001910f:	e8 84 77 fe ff       	call   c0000898 <strcmp>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	85 c0                	test   eax,eax
c0019119:	75 0f                	jne    c001912a <CPU::detectFeatures()+0x296>
c001911b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019125:	e9 35 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c001912a:	52                   	push   edx
c001912b:	52                   	push   edx
c001912c:	68 e1 c3 02 c0       	push   0xc002c3e1
c0019131:	55                   	push   ebp
c0019132:	e8 61 77 fe ff       	call   c0000898 <strcmp>
c0019137:	83 c4 10             	add    esp,0x10
c001913a:	85 c0                	test   eax,eax
c001913c:	75 0f                	jne    c001914d <CPU::detectFeatures()+0x2b9>
c001913e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019148:	e9 12 01 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c001914d:	50                   	push   eax
c001914e:	50                   	push   eax
c001914f:	68 ee c3 02 c0       	push   0xc002c3ee
c0019154:	55                   	push   ebp
c0019155:	e8 3e 77 fe ff       	call   c0000898 <strcmp>
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	85 c0                	test   eax,eax
c001915f:	75 0f                	jne    c0019170 <CPU::detectFeatures()+0x2dc>
c0019161:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001916b:	e9 ef 00 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c0019170:	50                   	push   eax
c0019171:	50                   	push   eax
c0019172:	68 fb c3 02 c0       	push   0xc002c3fb
c0019177:	55                   	push   ebp
c0019178:	e8 1b 77 fe ff       	call   c0000898 <strcmp>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	85 c0                	test   eax,eax
c0019182:	75 0f                	jne    c0019193 <CPU::detectFeatures()+0x2ff>
c0019184:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001918e:	e9 cc 00 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c0019193:	50                   	push   eax
c0019194:	50                   	push   eax
c0019195:	68 08 c4 02 c0       	push   0xc002c408
c001919a:	55                   	push   ebp
c001919b:	e8 f8 76 fe ff       	call   c0000898 <strcmp>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	85 c0                	test   eax,eax
c00191a5:	75 0f                	jne    c00191b6 <CPU::detectFeatures()+0x322>
c00191a7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00191b1:	e9 a9 00 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c00191b6:	50                   	push   eax
c00191b7:	50                   	push   eax
c00191b8:	68 15 c4 02 c0       	push   0xc002c415
c00191bd:	55                   	push   ebp
c00191be:	e8 d5 76 fe ff       	call   c0000898 <strcmp>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	85 c0                	test   eax,eax
c00191c8:	75 0f                	jne    c00191d9 <CPU::detectFeatures()+0x345>
c00191ca:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00191d4:	e9 86 00 00 00       	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c00191d9:	50                   	push   eax
c00191da:	50                   	push   eax
c00191db:	68 22 c4 02 c0       	push   0xc002c422
c00191e0:	55                   	push   ebp
c00191e1:	e8 b2 76 fe ff       	call   c0000898 <strcmp>
c00191e6:	83 c4 10             	add    esp,0x10
c00191e9:	85 c0                	test   eax,eax
c00191eb:	75 0c                	jne    c00191f9 <CPU::detectFeatures()+0x365>
c00191ed:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00191f7:	eb 66                	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c00191f9:	50                   	push   eax
c00191fa:	50                   	push   eax
c00191fb:	68 2f c4 02 c0       	push   0xc002c42f
c0019200:	55                   	push   ebp
c0019201:	e8 92 76 fe ff       	call   c0000898 <strcmp>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	85 c0                	test   eax,eax
c001920b:	75 0c                	jne    c0019219 <CPU::detectFeatures()+0x385>
c001920d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019217:	eb 46                	jmp    c001925f <CPU::detectFeatures()+0x3cb>
c0019219:	57                   	push   edi
c001921a:	57                   	push   edi
c001921b:	68 3c c4 02 c0       	push   0xc002c43c
c0019220:	55                   	push   ebp
c0019221:	e8 72 76 fe ff       	call   c0000898 <strcmp>
c0019226:	83 c4 10             	add    esp,0x10
c0019229:	85 c0                	test   eax,eax
c001922b:	74 e0                	je     c001920d <CPU::detectFeatures()+0x379>
c001922d:	56                   	push   esi
c001922e:	56                   	push   esi
c001922f:	68 49 c4 02 c0       	push   0xc002c449
c0019234:	55                   	push   ebp
c0019235:	e8 5e 76 fe ff       	call   c0000898 <strcmp>
c001923a:	83 c4 10             	add    esp,0x10
c001923d:	85 c0                	test   eax,eax
c001923f:	74 cc                	je     c001920d <CPU::detectFeatures()+0x379>
c0019241:	51                   	push   ecx
c0019242:	51                   	push   ecx
c0019243:	68 56 c4 02 c0       	push   0xc002c456
c0019248:	55                   	push   ebp
c0019249:	e8 4a 76 fe ff       	call   c0000898 <strcmp>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	85 c0                	test   eax,eax
c0019253:	74 b8                	je     c001920d <CPU::detectFeatures()+0x379>
c0019255:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001925f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019264:	0f 86 be 00 00 00    	jbe    c0019328 <CPU::detectFeatures()+0x494>
c001926a:	83 ec 0c             	sub    esp,0xc
c001926d:	68 80 00 00 00       	push   0x80
c0019272:	e8 b7 f8 ff ff       	call   c0018b2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019277:	83 e0 01             	and    eax,0x1
c001927a:	c1 e0 06             	shl    eax,0x6
c001927d:	88 c2                	mov    dl,al
c001927f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019285:	83 e0 bf             	and    eax,0xffffffbf
c0019288:	09 d0                	or     eax,edx
c001928a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019290:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019297:	e8 92 f8 ff ff       	call   c0018b2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001929c:	83 e0 01             	and    eax,0x1
c001929f:	c1 e0 04             	shl    eax,0x4
c00192a2:	88 c2                	mov    dl,al
c00192a4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192aa:	83 e0 ef             	and    eax,0xffffffef
c00192ad:	09 d0                	or     eax,edx
c00192af:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192b5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00192bc:	e8 6d f8 ff ff       	call   c0018b2e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00192c1:	c1 e0 07             	shl    eax,0x7
c00192c4:	88 c2                	mov    dl,al
c00192c6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192cc:	83 e0 7f             	and    eax,0x7f
c00192cf:	09 d0                	or     eax,edx
c00192d1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00192de:	e8 79 f8 ff ff       	call   c0018b5c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192e3:	83 e0 01             	and    eax,0x1
c00192e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00192ed:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192f3:	83 e0 f7             	and    eax,0xfffffff7
c00192f6:	09 d0                	or     eax,edx
c00192f8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192fe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019305:	e8 52 f8 ff ff       	call   c0018b5c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001930a:	83 c4 10             	add    esp,0x10
c001930d:	83 e0 01             	and    eax,0x1
c0019310:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019317:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001931d:	83 e0 fb             	and    eax,0xfffffffb
c0019320:	09 d0                	or     eax,edx
c0019322:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019328:	83 ec 0c             	sub    esp,0xc
c001932b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001932f:	50                   	push   eax
c0019330:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019334:	50                   	push   eax
c0019335:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019339:	56                   	push   esi
c001933a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001933e:	50                   	push   eax
c001933f:	6a 01                	push   0x1
c0019341:	e8 08 f7 ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019346:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001934a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019350:	88 ca                	mov    dl,cl
c0019352:	83 e0 f0             	and    eax,0xfffffff0
c0019355:	83 e2 0f             	and    edx,0xf
c0019358:	09 d0                	or     eax,edx
c001935a:	88 ca                	mov    dl,cl
c001935c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019362:	c0 ea 04             	shr    dl,0x4
c0019365:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019369:	0f b6 c2             	movzx  eax,dl
c001936c:	83 c4 20             	add    esp,0x20
c001936f:	c1 e0 06             	shl    eax,0x6
c0019372:	89 c7                	mov    edi,eax
c0019374:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001937a:	66 25 3f c0          	and    ax,0xc03f
c001937e:	09 f8                	or     eax,edi
c0019380:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019387:	89 c8                	mov    eax,ecx
c0019389:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019390:	c1 e8 08             	shr    eax,0x8
c0019393:	83 e5 3f             	and    ebp,0x3f
c0019396:	83 e0 0f             	and    eax,0xf
c0019399:	89 c7                	mov    edi,eax
c001939b:	c1 e7 06             	shl    edi,0x6
c001939e:	09 ef                	or     edi,ebp
c00193a0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00193a7:	89 fa                	mov    edx,edi
c00193a9:	83 e5 c0             	and    ebp,0xffffffc0
c00193ac:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00193b2:	88 c2                	mov    dl,al
c00193b4:	c0 ea 02             	shr    dl,0x2
c00193b7:	89 d7                	mov    edi,edx
c00193b9:	09 ef                	or     edi,ebp
c00193bb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00193c1:	89 fa                	mov    edx,edi
c00193c3:	83 e5 cf             	and    ebp,0xffffffcf
c00193c6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00193cc:	89 cf                	mov    edi,ecx
c00193ce:	c1 ef 0c             	shr    edi,0xc
c00193d1:	83 e7 03             	and    edi,0x3
c00193d4:	c1 e7 04             	shl    edi,0x4
c00193d7:	09 ef                	or     edi,ebp
c00193d9:	3c 06                	cmp    al,0x6
c00193db:	89 fa                	mov    edx,edi
c00193dd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00193e3:	74 04                	je     c00193e9 <CPU::detectFeatures()+0x555>
c00193e5:	3c 0f                	cmp    al,0xf
c00193e7:	75 5c                	jne    c0019445 <CPU::detectFeatures()+0x5b1>
c00193e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00193ed:	89 cf                	mov    edi,ecx
c00193ef:	c1 ef 10             	shr    edi,0x10
c00193f2:	c1 e7 04             	shl    edi,0x4
c00193f5:	09 fa                	or     edx,edi
c00193f7:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00193fd:	0f b6 d2             	movzx  edx,dl
c0019400:	66 81 e7 3f c0       	and    di,0xc03f
c0019405:	c1 e2 06             	shl    edx,0x6
c0019408:	09 fa                	or     edx,edi
c001940a:	3c 0f                	cmp    al,0xf
c001940c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019413:	75 30                	jne    c0019445 <CPU::detectFeatures()+0x5b1>
c0019415:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001941b:	c1 e9 14             	shr    ecx,0x14
c001941e:	83 e0 3f             	and    eax,0x3f
c0019421:	83 c1 0f             	add    ecx,0xf
c0019424:	88 ca                	mov    dl,cl
c0019426:	c0 e9 02             	shr    cl,0x2
c0019429:	c1 e2 06             	shl    edx,0x6
c001942c:	09 d0                	or     eax,edx
c001942e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019434:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001943a:	83 e0 c0             	and    eax,0xffffffc0
c001943d:	09 c1                	or     ecx,eax
c001943f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001944f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019453:	50                   	push   eax
c0019454:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019458:	55                   	push   ebp
c0019459:	56                   	push   esi
c001945a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001945e:	57                   	push   edi
c001945f:	68 00 00 00 80       	push   0x80000000
c0019464:	e8 e5 f5 ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019469:	83 c4 20             	add    esp,0x20
c001946c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019474:	76 22                	jbe    c0019498 <CPU::detectFeatures()+0x604>
c0019476:	83 ec 0c             	sub    esp,0xc
c0019479:	8d 44 24 28          	lea    eax,[esp+0x28]
c001947d:	50                   	push   eax
c001947e:	55                   	push   ebp
c001947f:	56                   	push   esi
c0019480:	57                   	push   edi
c0019481:	68 01 00 00 80       	push   0x80000001
c0019486:	e8 c3 f5 ff ff       	call   c0018a4e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001948b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019495:	83 c4 20             	add    esp,0x20
c0019498:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001949e:	83 f8 01             	cmp    eax,0x1
c00194a1:	75 6f                	jne    c0019512 <CPU::detectFeatures()+0x67e>
c00194a3:	51                   	push   ecx
c00194a4:	51                   	push   ecx
c00194a5:	68 62 c4 02 c0       	push   0xc002c462
c00194aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194ae:	56                   	push   esi
c00194af:	e8 58 73 fe ff       	call   c000080c <strcpy>
c00194b4:	5f                   	pop    edi
c00194b5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194bb:	5d                   	pop    ebp
c00194bc:	66 c1 e8 06          	shr    ax,0x6
c00194c0:	0f b6 c0             	movzx  eax,al
c00194c3:	50                   	push   eax
c00194c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194ca:	c1 e8 0e             	shr    eax,0xe
c00194cd:	0f b6 c0             	movzx  eax,al
c00194d0:	50                   	push   eax
c00194d1:	e8 22 f2 ff ff       	call   c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00194d6:	5a                   	pop    edx
c00194d7:	59                   	pop    ecx
c00194d8:	50                   	push   eax
c00194d9:	56                   	push   esi
c00194da:	e8 6d 74 fe ff       	call   c000094c <strcat>
c00194df:	5f                   	pop    edi
c00194e0:	5d                   	pop    ebp
c00194e1:	56                   	push   esi
c00194e2:	53                   	push   ebx
c00194e3:	e8 42 aa ff ff       	call   c0013f2a <Device::setName(char const*)>
c00194e8:	58                   	pop    eax
c00194e9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194ef:	5a                   	pop    edx
c00194f0:	68 69 c4 02 c0       	push   0xc002c469
c00194f5:	50                   	push   eax
c00194f6:	e8 9d 73 fe ff       	call   c0000898 <strcmp>
c00194fb:	83 c4 10             	add    esp,0x10
c00194fe:	85 c0                	test   eax,eax
c0019500:	0f 85 71 03 00 00    	jne    c0019877 <CPU::detectFeatures()+0x9e3>
c0019506:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001950d:	e9 65 03 00 00       	jmp    c0019877 <CPU::detectFeatures()+0x9e3>
c0019512:	83 f8 02             	cmp    eax,0x2
c0019515:	0f 85 b5 00 00 00    	jne    c00195d0 <CPU::detectFeatures()+0x73c>
c001951b:	57                   	push   edi
c001951c:	57                   	push   edi
c001951d:	68 7b c4 02 c0       	push   0xc002c47b
c0019522:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019526:	56                   	push   esi
c0019527:	e8 e0 72 fe ff       	call   c000080c <strcpy>
c001952c:	5d                   	pop    ebp
c001952d:	58                   	pop    eax
c001952e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019534:	66 c1 e8 06          	shr    ax,0x6
c0019538:	0f b6 c0             	movzx  eax,al
c001953b:	50                   	push   eax
c001953c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019542:	c1 e8 0e             	shr    eax,0xe
c0019545:	0f b6 c0             	movzx  eax,al
c0019548:	50                   	push   eax
c0019549:	e8 16 f0 ff ff       	call   c0018564 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001954e:	5a                   	pop    edx
c001954f:	59                   	pop    ecx
c0019550:	50                   	push   eax
c0019551:	56                   	push   esi
c0019552:	e8 f5 73 fe ff       	call   c000094c <strcat>
c0019557:	5f                   	pop    edi
c0019558:	5d                   	pop    ebp
c0019559:	56                   	push   esi
c001955a:	53                   	push   ebx
c001955b:	e8 ca a9 ff ff       	call   c0013f2a <Device::setName(char const*)>
c0019560:	58                   	pop    eax
c0019561:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019567:	5a                   	pop    edx
c0019568:	68 80 c4 02 c0       	push   0xc002c480
c001956d:	50                   	push   eax
c001956e:	e8 25 73 fe ff       	call   c0000898 <strcmp>
c0019573:	83 c4 10             	add    esp,0x10
c0019576:	85 c0                	test   eax,eax
c0019578:	75 20                	jne    c001959a <CPU::detectFeatures()+0x706>
c001957a:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0019580:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019586:	a8 01                	test   al,0x1
c0019588:	74 10                	je     c001959a <CPU::detectFeatures()+0x706>
c001958a:	83 e0 fe             	and    eax,0xfffffffe
c001958d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019593:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001959a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195a0:	c1 e8 0e             	shr    eax,0xe
c00195a3:	3c 05                	cmp    al,0x5
c00195a5:	0f 85 cc 02 00 00    	jne    c0019877 <CPU::detectFeatures()+0x9e3>
c00195ab:	56                   	push   esi
c00195ac:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195b2:	83 e0 0f             	and    eax,0xf
c00195b5:	50                   	push   eax
c00195b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195bc:	66 c1 e8 06          	shr    ax,0x6
c00195c0:	0f b6 c0             	movzx  eax,al
c00195c3:	50                   	push   eax
c00195c4:	6a 05                	push   0x5
c00195c6:	e8 0f f4 ff ff       	call   c00189da <CPU::AMD_K6_writeback(int, int, int)>
c00195cb:	e9 1f 02 00 00       	jmp    c00197ef <CPU::detectFeatures()+0x95b>
c00195d0:	8d 50 fd             	lea    edx,[eax-0x3]
c00195d3:	83 fa 01             	cmp    edx,0x1
c00195d6:	76 09                	jbe    c00195e1 <CPU::detectFeatures()+0x74d>
c00195d8:	83 f8 06             	cmp    eax,0x6
c00195db:	0f 85 91 01 00 00    	jne    c0019772 <CPU::detectFeatures()+0x8de>
c00195e1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195e7:	c1 ea 0e             	shr    edx,0xe
c00195ea:	80 fa 05             	cmp    dl,0x5
c00195ed:	75 7b                	jne    c001966a <CPU::detectFeatures()+0x7d6>
c00195ef:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195f5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195fa:	66 81 fa 00 01       	cmp    dx,0x100
c00195ff:	75 0c                	jne    c001960d <CPU::detectFeatures()+0x779>
c0019601:	51                   	push   ecx
c0019602:	51                   	push   ecx
c0019603:	68 87 c4 02 c0       	push   0xc002c487
c0019608:	e9 dc 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c001960d:	66 81 fa 00 02       	cmp    dx,0x200
c0019612:	75 0c                	jne    c0019620 <CPU::detectFeatures()+0x78c>
c0019614:	52                   	push   edx
c0019615:	52                   	push   edx
c0019616:	68 9a c4 02 c0       	push   0xc002c49a
c001961b:	e9 c9 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019620:	66 81 fa 40 02       	cmp    dx,0x240
c0019625:	75 0c                	jne    c0019633 <CPU::detectFeatures()+0x79f>
c0019627:	50                   	push   eax
c0019628:	50                   	push   eax
c0019629:	68 ac c4 02 c0       	push   0xc002c4ac
c001962e:	e9 b6 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019633:	83 f8 06             	cmp    eax,0x6
c0019636:	75 0c                	jne    c0019644 <CPU::detectFeatures()+0x7b0>
c0019638:	50                   	push   eax
c0019639:	50                   	push   eax
c001963a:	68 be c4 02 c0       	push   0xc002c4be
c001963f:	e9 a5 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019644:	83 f8 04             	cmp    eax,0x4
c0019647:	75 0c                	jne    c0019655 <CPU::detectFeatures()+0x7c1>
c0019649:	50                   	push   eax
c001964a:	50                   	push   eax
c001964b:	68 ca c4 02 c0       	push   0xc002c4ca
c0019650:	e9 94 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019655:	83 f8 03             	cmp    eax,0x3
c0019658:	0f 85 19 02 00 00    	jne    c0019877 <CPU::detectFeatures()+0x9e3>
c001965e:	50                   	push   eax
c001965f:	50                   	push   eax
c0019660:	68 d2 c4 02 c0       	push   0xc002c4d2
c0019665:	e9 7f 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c001966a:	80 fa 06             	cmp    dl,0x6
c001966d:	0f 85 db 00 00 00    	jne    c001974e <CPU::detectFeatures()+0x8ba>
c0019673:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019679:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001967e:	66 81 fa 80 01       	cmp    dx,0x180
c0019683:	75 0c                	jne    c0019691 <CPU::detectFeatures()+0x7fd>
c0019685:	50                   	push   eax
c0019686:	50                   	push   eax
c0019687:	68 dd c4 02 c0       	push   0xc002c4dd
c001968c:	e9 58 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019691:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019697:	66 f7 c1 80 ff       	test   cx,0xff80
c001969c:	75 0c                	jne    c00196aa <CPU::detectFeatures()+0x816>
c001969e:	50                   	push   eax
c001969f:	50                   	push   eax
c00196a0:	68 ed c4 02 c0       	push   0xc002c4ed
c00196a5:	e9 3f 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00196aa:	66 81 fa 40 02       	cmp    dx,0x240
c00196af:	75 0c                	jne    c00196bd <CPU::detectFeatures()+0x829>
c00196b1:	55                   	push   ebp
c00196b2:	55                   	push   ebp
c00196b3:	68 f4 c4 02 c0       	push   0xc002c4f4
c00196b8:	e9 2c 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00196bd:	66 81 fa 80 02       	cmp    dx,0x280
c00196c2:	75 0c                	jne    c00196d0 <CPU::detectFeatures()+0x83c>
c00196c4:	57                   	push   edi
c00196c5:	57                   	push   edi
c00196c6:	68 fd c4 02 c0       	push   0xc002c4fd
c00196cb:	e9 19 01 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00196d0:	66 81 fa 40 03       	cmp    dx,0x340
c00196d5:	74 ed                	je     c00196c4 <CPU::detectFeatures()+0x830>
c00196d7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00196dc:	75 0c                	jne    c00196ea <CPU::detectFeatures()+0x856>
c00196de:	56                   	push   esi
c00196df:	56                   	push   esi
c00196e0:	68 04 c5 02 c0       	push   0xc002c504
c00196e5:	e9 ff 00 00 00       	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00196ea:	83 f8 06             	cmp    eax,0x6
c00196ed:	0f 84 45 ff ff ff    	je     c0019638 <CPU::detectFeatures()+0x7a4>
c00196f3:	83 f8 04             	cmp    eax,0x4
c00196f6:	0f 84 4d ff ff ff    	je     c0019649 <CPU::detectFeatures()+0x7b5>
c00196fc:	83 f8 03             	cmp    eax,0x3
c00196ff:	0f 85 72 01 00 00    	jne    c0019877 <CPU::detectFeatures()+0x9e3>
c0019705:	51                   	push   ecx
c0019706:	51                   	push   ecx
c0019707:	68 0d c5 02 c0       	push   0xc002c50d
c001970c:	53                   	push   ebx
c001970d:	e8 18 a8 ff ff       	call   c0013f2a <Device::setName(char const*)>
c0019712:	b1 c1                	mov    cl,0xc1
c0019714:	88 c8                	mov    al,cl
c0019716:	e6 22                	out    0x22,al
c0019718:	e4 23                	in     al,0x23
c001971a:	88 c2                	mov    dl,al
c001971c:	88 c8                	mov    al,cl
c001971e:	e6 22                	out    0x22,al
c0019720:	88 d0                	mov    al,dl
c0019722:	83 c8 10             	or     eax,0x10
c0019725:	e6 23                	out    0x23,al
c0019727:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001972e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019731:	89 d0                	mov    eax,edx
c0019733:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019739:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001973d:	40                   	inc    eax
c001973e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019744:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019749:	e9 a1 00 00 00       	jmp    c00197ef <CPU::detectFeatures()+0x95b>
c001974e:	83 f8 06             	cmp    eax,0x6
c0019751:	0f 84 e1 fe ff ff    	je     c0019638 <CPU::detectFeatures()+0x7a4>
c0019757:	83 f8 04             	cmp    eax,0x4
c001975a:	0f 84 e9 fe ff ff    	je     c0019649 <CPU::detectFeatures()+0x7b5>
c0019760:	83 f8 03             	cmp    eax,0x3
c0019763:	0f 85 0e 01 00 00    	jne    c0019877 <CPU::detectFeatures()+0x9e3>
c0019769:	52                   	push   edx
c001976a:	52                   	push   edx
c001976b:	68 18 c5 02 c0       	push   0xc002c518
c0019770:	eb 77                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019772:	83 f8 07             	cmp    eax,0x7
c0019775:	75 09                	jne    c0019780 <CPU::detectFeatures()+0x8ec>
c0019777:	50                   	push   eax
c0019778:	50                   	push   eax
c0019779:	68 22 c5 02 c0       	push   0xc002c522
c001977e:	eb 69                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c0019780:	83 f8 0a             	cmp    eax,0xa
c0019783:	75 09                	jne    c001978e <CPU::detectFeatures()+0x8fa>
c0019785:	50                   	push   eax
c0019786:	50                   	push   eax
c0019787:	68 2d c5 02 c0       	push   0xc002c52d
c001978c:	eb 5b                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c001978e:	83 f8 0b             	cmp    eax,0xb
c0019791:	75 09                	jne    c001979c <CPU::detectFeatures()+0x908>
c0019793:	50                   	push   eax
c0019794:	50                   	push   eax
c0019795:	68 35 c5 02 c0       	push   0xc002c535
c001979a:	eb 4d                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c001979c:	83 f8 08             	cmp    eax,0x8
c001979f:	75 09                	jne    c00197aa <CPU::detectFeatures()+0x916>
c00197a1:	50                   	push   eax
c00197a2:	50                   	push   eax
c00197a3:	68 3e c5 02 c0       	push   0xc002c53e
c00197a8:	eb 3f                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00197aa:	83 f8 09             	cmp    eax,0x9
c00197ad:	75 09                	jne    c00197b8 <CPU::detectFeatures()+0x924>
c00197af:	50                   	push   eax
c00197b0:	50                   	push   eax
c00197b1:	68 46 c5 02 c0       	push   0xc002c546
c00197b6:	eb 31                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00197b8:	83 f8 05             	cmp    eax,0x5
c00197bb:	75 09                	jne    c00197c6 <CPU::detectFeatures()+0x932>
c00197bd:	50                   	push   eax
c00197be:	50                   	push   eax
c00197bf:	68 4e c5 02 c0       	push   0xc002c54e
c00197c4:	eb 23                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00197c6:	83 f8 0c             	cmp    eax,0xc
c00197c9:	75 09                	jne    c00197d4 <CPU::detectFeatures()+0x940>
c00197cb:	55                   	push   ebp
c00197cc:	55                   	push   ebp
c00197cd:	68 5c c5 02 c0       	push   0xc002c55c
c00197d2:	eb 15                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00197d4:	83 f8 0d             	cmp    eax,0xd
c00197d7:	75 09                	jne    c00197e2 <CPU::detectFeatures()+0x94e>
c00197d9:	57                   	push   edi
c00197da:	57                   	push   edi
c00197db:	68 67 c5 02 c0       	push   0xc002c567
c00197e0:	eb 07                	jmp    c00197e9 <CPU::detectFeatures()+0x955>
c00197e2:	56                   	push   esi
c00197e3:	56                   	push   esi
c00197e4:	68 7b c5 02 c0       	push   0xc002c57b
c00197e9:	53                   	push   ebx
c00197ea:	e8 3b a7 ff ff       	call   c0013f2a <Device::setName(char const*)>
c00197ef:	83 c4 10             	add    esp,0x10
c00197f2:	e9 80 00 00 00       	jmp    c0019877 <CPU::detectFeatures()+0x9e3>
c00197f7:	51                   	push   ecx
c00197f8:	51                   	push   ecx
c00197f9:	68 c7 c3 02 c0       	push   0xc002c3c7
c00197fe:	55                   	push   ebp
c00197ff:	e8 08 70 fe ff       	call   c000080c <strcpy>
c0019804:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001980e:	e8 9b 6a fe ff       	call   c00002ae <is486>
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	85 c0                	test   eax,eax
c0019818:	74 2b                	je     c0019845 <CPU::detectFeatures()+0x9b1>
c001981a:	52                   	push   edx
c001981b:	52                   	push   edx
c001981c:	68 87 c5 02 c0       	push   0xc002c587
c0019821:	53                   	push   ebx
c0019822:	e8 03 a7 ff ff       	call   c0013f2a <Device::setName(char const*)>
c0019827:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001982e:	0f 20 c0             	mov    eax,cr0
c0019831:	83 e0 14             	and    eax,0x14
c0019834:	83 c4 10             	add    esp,0x10
c0019837:	83 f8 04             	cmp    eax,0x4
c001983a:	75 1f                	jne    c001985b <CPU::detectFeatures()+0x9c7>
c001983c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019843:	eb 32                	jmp    c0019877 <CPU::detectFeatures()+0x9e3>
c0019845:	50                   	push   eax
c0019846:	50                   	push   eax
c0019847:	68 92 c5 02 c0       	push   0xc002c592
c001984c:	53                   	push   ebx
c001984d:	e8 d8 a6 ff ff       	call   c0013f2a <Device::setName(char const*)>
c0019852:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019859:	eb d3                	jmp    c001982e <CPU::detectFeatures()+0x99a>
c001985b:	e8 29 6a fe ff       	call   c0000289 <hasLegacyFPU>
c0019860:	83 e0 01             	and    eax,0x1
c0019863:	8d 14 00             	lea    edx,[eax+eax*1]
c0019866:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001986c:	83 e0 fd             	and    eax,0xfffffffd
c001986f:	09 d0                	or     eax,edx
c0019871:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019877:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001987e:	83 c4 4c             	add    esp,0x4c
c0019881:	5b                   	pop    ebx
c0019882:	5e                   	pop    esi
c0019883:	5f                   	pop    edi
c0019884:	5d                   	pop    ebp
c0019885:	c3                   	ret    

c0019886 <CPU::setupSMEP()>:
c0019886:	0f 20 e0             	mov    eax,cr4
c0019889:	0d 00 00 10 00       	or     eax,0x100000
c001988e:	0f 22 e0             	mov    cr4,eax
c0019891:	c3                   	ret    

c0019892 <CPU::setupUMIP()>:
c0019892:	0f 20 e0             	mov    eax,cr4
c0019895:	80 cc 08             	or     ah,0x8
c0019898:	0f 22 e0             	mov    cr4,eax
c001989b:	c3                   	ret    

c001989c <CPU::setupTSC()>:
c001989c:	0f 20 e0             	mov    eax,cr4
c001989f:	83 c8 04             	or     eax,0x4
c00198a2:	0f 22 e0             	mov    cr4,eax
c00198a5:	c3                   	ret    

c00198a6 <CPU::setupLargePages()>:
c00198a6:	0f 20 e0             	mov    eax,cr4
c00198a9:	83 c8 10             	or     eax,0x10
c00198ac:	0f 22 e0             	mov    cr4,eax
c00198af:	c3                   	ret    

c00198b0 <CPU::setupPAT()>:
c00198b0:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00198b5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00198bc:	74 2c                	je     c00198ea <CPU::setupPAT()+0x3a>
c00198be:	53                   	push   ebx
c00198bf:	83 ec 10             	sub    esp,0x10
c00198c2:	68 77 02 00 00       	push   0x277
c00198c7:	50                   	push   eax
c00198c8:	e8 b7 55 ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c00198cd:	83 e2 f8             	and    edx,0xfffffff8
c00198d0:	83 ca 01             	or     edx,0x1
c00198d3:	52                   	push   edx
c00198d4:	50                   	push   eax
c00198d5:	68 77 02 00 00       	push   0x277
c00198da:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c00198e0:	e8 cb 55 ff ff       	call   c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00198e5:	83 c4 28             	add    esp,0x28
c00198e8:	5b                   	pop    ebx
c00198e9:	c3                   	ret    
c00198ea:	c3                   	ret    
c00198eb:	90                   	nop

c00198ec <CPU::setupMTRR()>:
c00198ec:	c3                   	ret    
c00198ed:	90                   	nop

c00198ee <CPU::setupGlobalPages()>:
c00198ee:	0f 20 e0             	mov    eax,cr4
c00198f1:	0c 80                	or     al,0x80
c00198f3:	0f 22 e0             	mov    cr4,eax
c00198f6:	c3                   	ret    
c00198f7:	90                   	nop

c00198f8 <CPU::allowUsermodeDataAccess()>:
c00198f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198fc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019903:	74 03                	je     c0019908 <CPU::allowUsermodeDataAccess()+0x10>
c0019905:	0f 01 cb             	stac   
c0019908:	c3                   	ret    
c0019909:	90                   	nop

c001990a <CPU::prohibitUsermodeDataAccess()>:
c001990a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001990e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019915:	74 03                	je     c001991a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019917:	0f 01 ca             	clac   
c001991a:	c3                   	ret    
c001991b:	90                   	nop

c001991c <CPU::setupSMAP()>:
c001991c:	0f 20 e0             	mov    eax,cr4
c001991f:	0d 00 00 20 00       	or     eax,0x200000
c0019924:	0f 22 e0             	mov    cr4,eax
c0019927:	eb e1                	jmp    c001990a <CPU::prohibitUsermodeDataAccess()>
c0019929:	90                   	nop

c001992a <CPU::setupFeatures()>:
c001992a:	83 ec 0c             	sub    esp,0xc
c001992d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019931:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019938:	74 07                	je     c0019941 <CPU::setupFeatures()+0x17>
c001993a:	52                   	push   edx
c001993b:	e8 46 ff ff ff       	call   c0019886 <CPU::setupSMEP()>
c0019940:	58                   	pop    eax
c0019941:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019948:	74 07                	je     c0019951 <CPU::setupFeatures()+0x27>
c001994a:	52                   	push   edx
c001994b:	e8 cc ff ff ff       	call   c001991c <CPU::setupSMAP()>
c0019950:	58                   	pop    eax
c0019951:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019958:	74 07                	je     c0019961 <CPU::setupFeatures()+0x37>
c001995a:	52                   	push   edx
c001995b:	e8 32 ff ff ff       	call   c0019892 <CPU::setupUMIP()>
c0019960:	58                   	pop    eax
c0019961:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019968:	74 07                	je     c0019971 <CPU::setupFeatures()+0x47>
c001996a:	52                   	push   edx
c001996b:	e8 2c ff ff ff       	call   c001989c <CPU::setupTSC()>
c0019970:	58                   	pop    eax
c0019971:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019978:	74 07                	je     c0019981 <CPU::setupFeatures()+0x57>
c001997a:	52                   	push   edx
c001997b:	e8 26 ff ff ff       	call   c00198a6 <CPU::setupLargePages()>
c0019980:	59                   	pop    ecx
c0019981:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019988:	74 07                	je     c0019991 <CPU::setupFeatures()+0x67>
c001998a:	52                   	push   edx
c001998b:	e8 5e ff ff ff       	call   c00198ee <CPU::setupGlobalPages()>
c0019990:	58                   	pop    eax
c0019991:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019998:	74 0c                	je     c00199a6 <CPU::setupFeatures()+0x7c>
c001999a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001999e:	83 c4 0c             	add    esp,0xc
c00199a1:	e9 0a ff ff ff       	jmp    c00198b0 <CPU::setupPAT()>
c00199a6:	83 c4 0c             	add    esp,0xc
c00199a9:	c3                   	ret    

c00199aa <CPU::open(int, int, void*)>:
c00199aa:	57                   	push   edi
c00199ab:	56                   	push   esi
c00199ac:	53                   	push   ebx
c00199ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199b5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00199bb:	83 ec 0c             	sub    esp,0xc
c00199be:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00199c4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00199ca:	50                   	push   eax
c00199cb:	e8 c4 57 ff ff       	call   c000f194 <GDT::setup()>
c00199d0:	83 c4 0c             	add    esp,0xc
c00199d3:	6a 00                	push   0x0
c00199d5:	68 ef be ad de       	push   0xdeadbeef
c00199da:	57                   	push   edi
c00199db:	e8 86 74 ff ff       	call   c0010e66 <TSS::setup(unsigned long, unsigned long)>
c00199e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199e3:	e8 5e 74 ff ff       	call   c0010e46 <TSS::flush()>
c00199e8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00199ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00199f1:	e8 02 5a ff ff       	call   c000f3f8 <IDT::setup()>
c00199f6:	b8 00 04 00 00       	mov    eax,0x400
c00199fb:	0f 23 f8             	mov    db7,eax
c00199fe:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a08:	e8 99 62 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0019a0d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a13:	89 30                	mov    DWORD PTR [eax],esi
c0019a15:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a1b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a1e:	58                   	pop    eax
c0019a1f:	5a                   	pop    edx
c0019a20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a2a:	e8 d7 85 ff ff       	call   c0012006 <VAS::setCPUSpecific(unsigned long)>
c0019a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a32:	e8 5d f4 ff ff       	call   c0018e94 <CPU::detectFeatures()>
c0019a37:	e8 20 b9 ff ff       	call   c001535c <setupInterruptController()>
c0019a3c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a42:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0019a47:	83 e0 10             	and    eax,0x10
c0019a4a:	83 f8 01             	cmp    eax,0x1
c0019a4d:	19 c0                	sbb    eax,eax
c0019a4f:	83 e0 46             	and    eax,0x46
c0019a52:	83 c0 1e             	add    eax,0x1e
c0019a55:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a58:	e8 56 cf ff ff       	call   c00169b3 <setupTimer(int)>
c0019a5d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a66:	e8 bf fe ff ff       	call   c001992a <CPU::setupFeatures()>
c0019a6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a6e:	e8 a5 f1 ff ff       	call   c0018c18 <CPU::displayFeatures()>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	31 c0                	xor    eax,eax
c0019a78:	5b                   	pop    ebx
c0019a79:	5e                   	pop    esi
c0019a7a:	5f                   	pop    edi
c0019a7b:	c3                   	ret    

c0019a7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019a7c:	57                   	push   edi
c0019a7d:	56                   	push   esi
c0019a7e:	53                   	push   ebx
c0019a7f:	51                   	push   ecx
c0019a80:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a84:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019a87:	0f 02 c0             	lar    eax,ax
c0019a8a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019a8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a91:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a94:	88 ca                	mov    dl,cl
c0019a96:	c0 ea 06             	shr    dl,0x6
c0019a99:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a9d:	89 ca                	mov    edx,ecx
c0019a9f:	66 c1 ea 03          	shr    dx,0x3
c0019aa3:	83 e2 07             	and    edx,0x7
c0019aa6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019aab:	88 17                	mov    BYTE PTR [edi],dl
c0019aad:	0f 84 a6 01 00 00    	je     c0019c59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ab3:	83 e1 07             	and    ecx,0x7
c0019ab6:	80 f9 04             	cmp    cl,0x4
c0019ab9:	0f 84 98 00 00 00    	je     c0019b57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019abf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ac4:	0f 95 c0             	setne  al
c0019ac7:	80 f9 05             	cmp    cl,0x5
c0019aca:	0f 95 c2             	setne  dl
c0019acd:	08 c2                	or     dl,al
c0019acf:	74 79                	je     c0019b4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ad1:	84 c9                	test   cl,cl
c0019ad3:	75 05                	jne    c0019ada <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ad5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ad8:	eb 3c                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ada:	80 f9 01             	cmp    cl,0x1
c0019add:	75 05                	jne    c0019ae4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019adf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ae2:	eb 32                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ae4:	80 f9 02             	cmp    cl,0x2
c0019ae7:	75 05                	jne    c0019aee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ae9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019aec:	eb 28                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019aee:	31 c0                	xor    eax,eax
c0019af0:	80 f9 03             	cmp    cl,0x3
c0019af3:	75 05                	jne    c0019afa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019af5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019af8:	eb 1c                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019afa:	80 f9 05             	cmp    cl,0x5
c0019afd:	75 05                	jne    c0019b04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019aff:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b02:	eb 12                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b04:	80 f9 06             	cmp    cl,0x6
c0019b07:	75 05                	jne    c0019b0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b09:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b0c:	eb 08                	jmp    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b0e:	80 f9 07             	cmp    cl,0x7
c0019b11:	75 03                	jne    c0019b16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b13:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b16:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b1b:	75 10                	jne    c0019b2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b1d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b21:	b9 03 00 00 00       	mov    ecx,0x3
c0019b26:	01 d0                	add    eax,edx
c0019b28:	e9 37 01 00 00       	jmp    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b2d:	b9 02 00 00 00       	mov    ecx,0x2
c0019b32:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b37:	0f 85 27 01 00 00    	jne    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b3d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b40:	b9 06 00 00 00       	mov    ecx,0x6
c0019b45:	e9 1a 01 00 00       	jmp    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b4a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b4d:	b9 06 00 00 00       	mov    ecx,0x6
c0019b52:	e9 0f 01 00 00       	jmp    c0019c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b57:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019b5a:	88 ca                	mov    dl,cl
c0019b5c:	c0 ea 06             	shr    dl,0x6
c0019b5f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019b63:	89 ca                	mov    edx,ecx
c0019b65:	66 c1 ea 03          	shr    dx,0x3
c0019b69:	83 e2 07             	and    edx,0x7
c0019b6c:	80 e1 07             	and    cl,0x7
c0019b6f:	75 05                	jne    c0019b76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019b71:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019b74:	eb 4c                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b76:	80 f9 01             	cmp    cl,0x1
c0019b79:	75 05                	jne    c0019b80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019b7b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019b7e:	eb 42                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b80:	80 f9 02             	cmp    cl,0x2
c0019b83:	75 05                	jne    c0019b8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019b85:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019b88:	eb 38                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b8a:	80 f9 03             	cmp    cl,0x3
c0019b8d:	75 05                	jne    c0019b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b8f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b92:	eb 2e                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b94:	80 f9 04             	cmp    cl,0x4
c0019b97:	75 12                	jne    c0019bab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b99:	f6 c4 60             	test   ah,0x60
c0019b9c:	75 08                	jne    c0019ba6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b9e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ba1:	8d 78 14             	lea    edi,[eax+0x14]
c0019ba4:	eb 1c                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ba6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ba9:	eb 17                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bab:	80 f9 05             	cmp    cl,0x5
c0019bae:	75 05                	jne    c0019bb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019bb0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019bb3:	eb 0d                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bb5:	80 f9 06             	cmp    cl,0x6
c0019bb8:	75 05                	jne    c0019bbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019bba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019bbd:	eb 03                	jmp    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bbf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019bc2:	84 d2                	test   dl,dl
c0019bc4:	75 05                	jne    c0019bcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019bc6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bc9:	eb 3c                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bcb:	80 fa 01             	cmp    dl,0x1
c0019bce:	75 05                	jne    c0019bd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019bd0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bd3:	eb 32                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bd5:	80 fa 02             	cmp    dl,0x2
c0019bd8:	75 05                	jne    c0019bdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019bda:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bdd:	eb 28                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bdf:	80 fa 03             	cmp    dl,0x3
c0019be2:	75 05                	jne    c0019be9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019be4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019be7:	eb 1e                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019be9:	31 c0                	xor    eax,eax
c0019beb:	80 fa 04             	cmp    dl,0x4
c0019bee:	74 17                	je     c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bf0:	80 fa 05             	cmp    dl,0x5
c0019bf3:	75 05                	jne    c0019bfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019bf5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bf8:	eb 0d                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bfa:	80 fa 06             	cmp    dl,0x6
c0019bfd:	75 05                	jne    c0019c04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019bff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c02:	eb 03                	jmp    c0019c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c04:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c07:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c0c:	0f 94 c2             	sete   dl
c0019c0f:	80 f9 05             	cmp    cl,0x5
c0019c12:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c16:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c1b:	d3 e0                	shl    eax,cl
c0019c1d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c21:	74 0a                	je     c0019c2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c23:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c26:	b9 07 00 00 00       	mov    ecx,0x7
c0019c2b:	eb 37                	jmp    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c2d:	01 f8                	add    eax,edi
c0019c2f:	b9 03 00 00 00       	mov    ecx,0x3
c0019c34:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c39:	74 2b                	je     c0019c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c3b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c40:	75 0d                	jne    c0019c4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c42:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c46:	01 c8                	add    eax,ecx
c0019c48:	b9 04 00 00 00       	mov    ecx,0x4
c0019c4d:	eb 17                	jmp    c0019c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c4f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c52:	b9 07 00 00 00       	mov    ecx,0x7
c0019c57:	eb 0d                	jmp    c0019c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c59:	b9 02 00 00 00       	mov    ecx,0x2
c0019c5e:	b2 01                	mov    dl,0x1
c0019c60:	31 c0                	xor    eax,eax
c0019c62:	eb 02                	jmp    c0019c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c64:	31 d2                	xor    edx,edx
c0019c66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019c6a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019c6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c70:	88 11                	mov    BYTE PTR [ecx],dl
c0019c72:	5a                   	pop    edx
c0019c73:	5b                   	pop    ebx
c0019c74:	5e                   	pop    esi
c0019c75:	5f                   	pop    edi
c0019c76:	c3                   	ret    

c0019c77 <Krnl::smpEntry()>:
c0019c77:	eb fe                	jmp    c0019c77 <Krnl::smpEntry()>

c0019c79 <Krnl::startCPU(int)>:
c0019c79:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0019c7e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019c85:	0f 84 36 01 00 00    	je     c0019dc1 <Krnl::startCPU(int)+0x148>
c0019c8b:	53                   	push   ebx
c0019c8c:	83 ec 10             	sub    esp,0x10
c0019c8f:	fa                   	cli    
c0019c90:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c0019c96:	6a 1b                	push   0x1b
c0019c98:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c0019c9e:	e8 e1 51 ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c0019ca3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ca8:	89 c3                	mov    ebx,eax
c0019caa:	58                   	pop    eax
c0019cab:	5a                   	pop    edx
c0019cac:	53                   	push   ebx
c0019cad:	68 cc c5 02 c0       	push   0xc002c5cc
c0019cb2:	e8 44 8c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0019cb7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cc5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ccf:	c1 e0 18             	shl    eax,0x18
c0019cd2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019cd8:	83 c4 10             	add    esp,0x10
c0019cdb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ce1:	09 c2                	or     edx,eax
c0019ce3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ce9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019cef:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cf5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019cfb:	80 cd c5             	or     ch,0xc5
c0019cfe:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d04:	f3 90                	pause  
c0019d06:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d08:	0f ba e1 0c          	bt     ecx,0xc
c0019d0c:	72 f6                	jb     c0019d04 <Krnl::startCPU(int)+0x8b>
c0019d0e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d14:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d1a:	09 c1                	or     ecx,eax
c0019d1c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d22:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d28:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d2e:	80 cd 85             	or     ch,0x85
c0019d31:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d37:	f3 90                	pause  
c0019d39:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d3b:	0f ba e1 0c          	bt     ecx,0xc
c0019d3f:	72 f6                	jb     c0019d37 <Krnl::startCPU(int)+0xbe>
c0019d41:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d4b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d51:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d57:	09 c1                	or     ecx,eax
c0019d59:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d5f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d65:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019d6b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019d71:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d77:	f3 90                	pause  
c0019d79:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d7b:	0f ba e1 0c          	bt     ecx,0xc
c0019d7f:	72 f6                	jb     c0019d77 <Krnl::startCPU(int)+0xfe>
c0019d81:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d8b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d91:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d97:	09 c8                	or     eax,ecx
c0019d99:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d9f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019da5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019daa:	0d 02 06 00 00       	or     eax,0x602
c0019daf:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019db5:	f3 90                	pause  
c0019db7:	8b 02                	mov    eax,DWORD PTR [edx]
c0019db9:	0f ba e0 0c          	bt     eax,0xc
c0019dbd:	72 f6                	jb     c0019db5 <Krnl::startCPU(int)+0x13c>
c0019dbf:	eb fe                	jmp    c0019dbf <Krnl::startCPU(int)+0x146>
c0019dc1:	c3                   	ret    

c0019dc2 <Krnl::startCPUs()>:
c0019dc2:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0019dc7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019dcd:	88 c2                	mov    dl,al
c0019dcf:	83 e2 0a             	and    edx,0xa
c0019dd2:	80 fa 0a             	cmp    dl,0xa
c0019dd5:	75 09                	jne    c0019de0 <Krnl::startCPUs()+0x1e>
c0019dd7:	a8 01                	test   al,0x1
c0019dd9:	74 05                	je     c0019de0 <Krnl::startCPUs()+0x1e>
c0019ddb:	e9 bb 63 fe ff       	jmp    c000019b <prepareTramp>
c0019de0:	c3                   	ret    
c0019de1:	90                   	nop

c0019de2 <EnvVarContainer::getEnv(char const*)>:
c0019de2:	57                   	push   edi
c0019de3:	56                   	push   esi
c0019de4:	53                   	push   ebx
c0019de5:	31 db                	xor    ebx,ebx
c0019de7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019deb:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ded:	7e 2b                	jle    c0019e1a <EnvVarContainer::getEnv(char const*)+0x38>
c0019def:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019df6:	50                   	push   eax
c0019df7:	50                   	push   eax
c0019df8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019dfb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019dfe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e02:	e8 91 6a fe ff       	call   c0000898 <strcmp>
c0019e07:	83 c4 10             	add    esp,0x10
c0019e0a:	85 c0                	test   eax,eax
c0019e0c:	75 09                	jne    c0019e17 <EnvVarContainer::getEnv(char const*)+0x35>
c0019e0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e11:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e15:	eb 05                	jmp    c0019e1c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e17:	43                   	inc    ebx
c0019e18:	eb d1                	jmp    c0019deb <EnvVarContainer::getEnv(char const*)+0x9>
c0019e1a:	31 c0                	xor    eax,eax
c0019e1c:	5b                   	pop    ebx
c0019e1d:	5e                   	pop    esi
c0019e1e:	5f                   	pop    edi
c0019e1f:	c3                   	ret    

c0019e20 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e20:	55                   	push   ebp
c0019e21:	57                   	push   edi
c0019e22:	56                   	push   esi
c0019e23:	53                   	push   ebx
c0019e24:	83 ec 28             	sub    esp,0x28
c0019e27:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e2b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e2f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e33:	56                   	push   esi
c0019e34:	e8 33 69 fe ff       	call   c000076c <strlen>
c0019e39:	40                   	inc    eax
c0019e3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e3d:	e8 c0 5a ff ff       	call   c000f902 <malloc>
c0019e42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e49:	e8 1e 69 fe ff       	call   c000076c <strlen>
c0019e4e:	40                   	inc    eax
c0019e4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e52:	e8 ab 5a ff ff       	call   c000f902 <malloc>
c0019e57:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e5e:	e8 09 69 fe ff       	call   c000076c <strlen>
c0019e63:	83 c4 0c             	add    esp,0xc
c0019e66:	40                   	inc    eax
c0019e67:	50                   	push   eax
c0019e68:	6a 00                	push   0x0
c0019e6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019e6e:	e8 dd 68 fe ff       	call   c0000750 <memset>
c0019e73:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e76:	e8 f1 68 fe ff       	call   c000076c <strlen>
c0019e7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e87:	89 de                	mov    esi,ebx
c0019e89:	e8 de 68 fe ff       	call   c000076c <strlen>
c0019e8e:	83 c4 0c             	add    esp,0xc
c0019e91:	40                   	inc    eax
c0019e92:	50                   	push   eax
c0019e93:	6a 00                	push   0x0
c0019e95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e99:	e8 b2 68 fe ff       	call   c0000750 <memset>
c0019e9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ea1:	e8 c6 68 fe ff       	call   c000076c <strlen>
c0019ea6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019eaa:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ead:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019eaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019eb2:	40                   	inc    eax
c0019eb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019eb6:	c1 e0 03             	shl    eax,0x3
c0019eb9:	5a                   	pop    edx
c0019eba:	59                   	pop    ecx
c0019ebb:	50                   	push   eax
c0019ebc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ebf:	e8 2a 5a ff ff       	call   c000f8ee <realloc>
c0019ec4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ec8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ecb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ece:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ed2:	b9 08 00 00 00       	mov    ecx,0x8
c0019ed7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ed9:	83 c4 2c             	add    esp,0x2c
c0019edc:	5b                   	pop    ebx
c0019edd:	5e                   	pop    esi
c0019ede:	5f                   	pop    edi
c0019edf:	5d                   	pop    ebp
c0019ee0:	c3                   	ret    
c0019ee1:	90                   	nop

c0019ee2 <EnvVarContainer::deleteEnv(char const*)>:
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019ee4:	55                   	push   ebp
c0019ee5:	57                   	push   edi
c0019ee6:	56                   	push   esi
c0019ee7:	53                   	push   ebx
c0019ee8:	81 ec 38 01 00 00    	sub    esp,0x138
c0019eee:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019ef5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019efc:	68 14 01 00 00       	push   0x114
c0019f01:	e8 fc 59 ff ff       	call   c000f902 <malloc>
c0019f06:	83 c4 0c             	add    esp,0xc
c0019f09:	89 c5                	mov    ebp,eax
c0019f0b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019f0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f15:	50                   	push   eax
c0019f16:	e8 3f 8f ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c0019f1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f1e:	e8 09 92 ff ff       	call   c001312c <File::exists()>
c0019f23:	83 c4 10             	add    esp,0x10
c0019f26:	84 c0                	test   al,al
c0019f28:	75 32                	jne    c0019f5c <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019f2a:	51                   	push   ecx
c0019f2b:	51                   	push   ecx
c0019f2c:	6a 12                	push   0x12
c0019f2e:	55                   	push   ebp
c0019f2f:	e8 8a 8f ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c0019f34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f37:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f3d:	e8 2a 68 fe ff       	call   c000076c <strlen>
c0019f42:	5a                   	pop    edx
c0019f43:	31 d2                	xor    edx,edx
c0019f45:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f49:	51                   	push   ecx
c0019f4a:	56                   	push   esi
c0019f4b:	52                   	push   edx
c0019f4c:	50                   	push   eax
c0019f4d:	55                   	push   ebp
c0019f4e:	ff d7                	call   edi
c0019f50:	83 c4 14             	add    esp,0x14
c0019f53:	55                   	push   ebp
c0019f54:	e8 c3 8f ff ff       	call   c0012f1c <File::close()>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	31 f6                	xor    esi,esi
c0019f5e:	50                   	push   eax
c0019f5f:	68 00 01 00 00       	push   0x100
c0019f64:	6a 00                	push   0x0
c0019f66:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f6a:	50                   	push   eax
c0019f6b:	e8 e0 67 fe ff       	call   c0000750 <memset>
c0019f70:	58                   	pop    eax
c0019f71:	5a                   	pop    edx
c0019f72:	6a 01                	push   0x1
c0019f74:	55                   	push   ebp
c0019f75:	e8 44 8f ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f85:	83 ec 0c             	sub    esp,0xc
c0019f88:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f8b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f8f:	51                   	push   ecx
c0019f90:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f94:	52                   	push   edx
c0019f95:	6a 00                	push   0x0
c0019f97:	6a 01                	push   0x1
c0019f99:	55                   	push   ebp
c0019f9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f9d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019fa1:	83 c4 20             	add    esp,0x20
c0019fa4:	3c 0d                	cmp    al,0xd
c0019fa6:	0f 84 16 01 00 00    	je     c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019fac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019fb1:	0f 84 fc 00 00 00    	je     c001a0b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fb7:	3c 0a                	cmp    al,0xa
c0019fb9:	74 13                	je     c0019fce <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019fbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019fc0:	74 0c                	je     c0019fce <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019fc2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019fc8:	0f 8e e5 00 00 00    	jle    c001a0b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fd2:	83 ec 0c             	sub    esp,0xc
c0019fd5:	8d 78 01             	lea    edi,[eax+0x1]
c0019fd8:	57                   	push   edi
c0019fd9:	e8 24 59 ff ff       	call   c000f902 <malloc>
c0019fde:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019fe2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fe6:	8d 56 04             	lea    edx,[esi+0x4]
c0019fe9:	89 14 24             	mov    DWORD PTR [esp],edx
c0019fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ff0:	e8 0d 59 ff ff       	call   c000f902 <malloc>
c0019ff5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ff9:	83 c4 0c             	add    esp,0xc
c0019ffc:	57                   	push   edi
c0019ffd:	6a 00                	push   0x0
c0019fff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a003:	e8 48 67 fe ff       	call   c0000750 <memset>
c001a008:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a00c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a010:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a014:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a016:	83 c4 0c             	add    esp,0xc
c001a019:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a01d:	52                   	push   edx
c001a01e:	6a 00                	push   0x0
c001a020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a024:	e8 27 67 fe ff       	call   c0000750 <memset>
c001a029:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a02d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a031:	89 34 24             	mov    DWORD PTR [esp],esi
c001a034:	e8 33 67 fe ff       	call   c000076c <strlen>
c001a039:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a03d:	89 c1                	mov    ecx,eax
c001a03f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a041:	5e                   	pop    esi
c001a042:	5f                   	pop    edi
c001a043:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a047:	68 dd c5 02 c0       	push   0xc002c5dd
c001a04c:	e8 aa 88 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a051:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a053:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a056:	40                   	inc    eax
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	89 03                	mov    DWORD PTR [ebx],eax
c001a05c:	85 d2                	test   edx,edx
c001a05e:	75 0c                	jne    c001a06c <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a060:	83 ec 0c             	sub    esp,0xc
c001a063:	6a 08                	push   0x8
c001a065:	e8 98 58 ff ff       	call   c000f902 <malloc>
c001a06a:	eb 0c                	jmp    c001a078 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a06c:	c1 e0 03             	shl    eax,0x3
c001a06f:	51                   	push   ecx
c001a070:	51                   	push   ecx
c001a071:	50                   	push   eax
c001a072:	52                   	push   edx
c001a073:	e8 76 58 ff ff       	call   c000f8ee <realloc>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a07e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a080:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a083:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a087:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a08b:	b9 08 00 00 00       	mov    ecx,0x8
c001a090:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a092:	31 f6                	xor    esi,esi
c001a094:	52                   	push   edx
c001a095:	68 00 01 00 00       	push   0x100
c001a09a:	6a 00                	push   0x0
c001a09c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0a0:	50                   	push   eax
c001a0a1:	e8 aa 66 fe ff       	call   c0000750 <memset>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0b1:	eb 0f                	jmp    c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a0b3:	3c 3d                	cmp    al,0x3d
c001a0b5:	74 07                	je     c001a0be <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a0b7:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a0bb:	46                   	inc    esi
c001a0bc:	eb 04                	jmp    c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a0be:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0c2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0c7:	0f 85 b8 fe ff ff    	jne    c0019f85 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a0cd:	50                   	push   eax
c001a0ce:	50                   	push   eax
c001a0cf:	ff 33                	push   DWORD PTR [ebx]
c001a0d1:	68 eb c5 02 c0       	push   0xc002c5eb
c001a0d6:	e8 20 88 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a0db:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a0e1:	5b                   	pop    ebx
c001a0e2:	5e                   	pop    esi
c001a0e3:	5f                   	pop    edi
c001a0e4:	5d                   	pop    ebp
c001a0e5:	c3                   	ret    

c001a0e6 <EnvVarContainer::__loadSystem()>:
c001a0e6:	83 ec 10             	sub    esp,0x10
c001a0e9:	68 80 e7 02 c0       	push   0xc002e780
c001a0ee:	68 16 c6 02 c0       	push   0xc002c616
c001a0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f7:	e8 e8 fd ff ff       	call   c0019ee4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a0fc:	83 c4 1c             	add    esp,0x1c
c001a0ff:	c3                   	ret    

c001a100 <EnvVarContainer::__loadUser()>:
c001a100:	c3                   	ret    
c001a101:	90                   	nop

c001a102 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a106:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a10c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a114:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a122:	90                   	nop
c001a123:	c3                   	ret    

c001a124 <EnvVarContainer::~EnvVarContainer()>:
c001a124:	83 ec 0c             	sub    esp,0xc
c001a127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a12b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a12e:	85 c0                	test   eax,eax
c001a130:	74 1d                	je     c001a14f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a136:	8b 00                	mov    eax,DWORD PTR [eax]
c001a138:	85 c0                	test   eax,eax
c001a13a:	74 13                	je     c001a14f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	50                   	push   eax
c001a147:	e8 c6 57 ff ff       	call   c000f912 <free>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	90                   	nop
c001a150:	83 c4 0c             	add    esp,0xc
c001a153:	c3                   	ret    

c001a154 <Krnl::getEnv(Process*, char const*)>:
c001a154:	53                   	push   ebx
c001a155:	83 ec 08             	sub    esp,0x8
c001a158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a160:	39 05 90 27 03 c0    	cmp    DWORD PTR ds:0xc0032790,eax
c001a166:	74 04                	je     c001a16c <Krnl::getEnv(Process*, char const*)+0x18>
c001a168:	85 c0                	test   eax,eax
c001a16a:	75 0b                	jne    c001a177 <Krnl::getEnv(Process*, char const*)+0x23>
c001a16c:	a1 74 1d 03 c0       	mov    eax,ds:0xc0031d74
c001a171:	85 c0                	test   eax,eax
c001a173:	75 19                	jne    c001a18e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a175:	eb 27                	jmp    c001a19e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a177:	52                   	push   edx
c001a178:	52                   	push   edx
c001a179:	53                   	push   ebx
c001a17a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a180:	e8 5d fc ff ff       	call   c0019de2 <EnvVarContainer::getEnv(char const*)>
c001a185:	83 c4 10             	add    esp,0x10
c001a188:	85 c0                	test   eax,eax
c001a18a:	75 28                	jne    c001a1b4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a18c:	eb de                	jmp    c001a16c <Krnl::getEnv(Process*, char const*)+0x18>
c001a18e:	52                   	push   edx
c001a18f:	52                   	push   edx
c001a190:	53                   	push   ebx
c001a191:	50                   	push   eax
c001a192:	e8 4b fc ff ff       	call   c0019de2 <EnvVarContainer::getEnv(char const*)>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	85 c0                	test   eax,eax
c001a19c:	75 16                	jne    c001a1b4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a19e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1a2:	a1 78 1d 03 c0       	mov    eax,ds:0xc0031d78
c001a1a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1ab:	83 c4 08             	add    esp,0x8
c001a1ae:	5b                   	pop    ebx
c001a1af:	e9 2e fc ff ff       	jmp    c0019de2 <EnvVarContainer::getEnv(char const*)>
c001a1b4:	83 c4 08             	add    esp,0x8
c001a1b7:	5b                   	pop    ebx
c001a1b8:	c3                   	ret    

c001a1b9 <Krnl::setEnvSystem(char const*, char const*)>:
c001a1b9:	83 ec 10             	sub    esp,0x10
c001a1bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1c4:	ff 35 78 1d 03 c0    	push   DWORD PTR ds:0xc0031d78
c001a1ca:	e8 51 fc ff ff       	call   c0019e20 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1cf:	83 c4 1c             	add    esp,0x1c
c001a1d2:	c3                   	ret    

c001a1d3 <Krnl::setEnvUser(char const*, char const*)>:
c001a1d3:	a1 74 1d 03 c0       	mov    eax,ds:0xc0031d74
c001a1d8:	85 c0                	test   eax,eax
c001a1da:	74 15                	je     c001a1f1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a1dc:	83 ec 10             	sub    esp,0x10
c001a1df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1e7:	50                   	push   eax
c001a1e8:	e8 33 fc ff ff       	call   c0019e20 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1ed:	83 c4 1c             	add    esp,0x1c
c001a1f0:	c3                   	ret    
c001a1f1:	c3                   	ret    

c001a1f2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a1f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a1fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a200:	e9 1b fc ff ff       	jmp    c0019e20 <EnvVarContainer::setEnv(char const*, char const*)>

c001a205 <Krnl::deleteEnvSystem(char const*)>:
c001a205:	c3                   	ret    

c001a206 <Krnl::deleteEnvUser(char const*)>:
c001a206:	c3                   	ret    

c001a207 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a207:	c3                   	ret    

c001a208 <Krnl::newProcessEnv(Process*)>:
c001a208:	83 ec 28             	sub    esp,0x28
c001a20b:	6a 0c                	push   0xc
c001a20d:	e8 f0 56 ff ff       	call   c000f902 <malloc>
c001a212:	5a                   	pop    edx
c001a213:	59                   	pop    ecx
c001a214:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a218:	50                   	push   eax
c001a219:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a21d:	e8 e0 fe ff ff       	call   c001a102 <EnvVarContainer::EnvVarContainer(Process*)>
c001a222:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a226:	83 c4 2c             	add    esp,0x2c
c001a229:	c3                   	ret    

c001a22a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a22a:	57                   	push   edi
c001a22b:	56                   	push   esi
c001a22c:	53                   	push   ebx
c001a22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a231:	83 ec 0c             	sub    esp,0xc
c001a234:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a23a:	6a 0c                	push   0xc
c001a23c:	e8 c1 56 ff ff       	call   c000f902 <malloc>
c001a241:	89 c3                	mov    ebx,eax
c001a243:	58                   	pop    eax
c001a244:	5a                   	pop    edx
c001a245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a249:	53                   	push   ebx
c001a24a:	e8 b3 fe ff ff       	call   c001a102 <EnvVarContainer::EnvVarContainer(Process*)>
c001a24f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a251:	89 03                	mov    DWORD PTR [ebx],eax
c001a253:	c1 e0 03             	shl    eax,0x3
c001a256:	89 04 24             	mov    DWORD PTR [esp],eax
c001a259:	e8 a4 56 ff ff       	call   c000f902 <malloc>
c001a25e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a261:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a263:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a266:	c1 e1 03             	shl    ecx,0x3
c001a269:	89 c7                	mov    edi,eax
c001a26b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a26d:	83 c4 10             	add    esp,0x10
c001a270:	89 d8                	mov    eax,ebx
c001a272:	5b                   	pop    ebx
c001a273:	5e                   	pop    esi
c001a274:	5f                   	pop    edi
c001a275:	c3                   	ret    

c001a276 <Krnl::loadSystemEnv()>:
c001a276:	53                   	push   ebx
c001a277:	83 ec 14             	sub    esp,0x14
c001a27a:	6a 0c                	push   0xc
c001a27c:	e8 81 56 ff ff       	call   c000f902 <malloc>
c001a281:	89 c3                	mov    ebx,eax
c001a283:	58                   	pop    eax
c001a284:	5a                   	pop    edx
c001a285:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001a28b:	53                   	push   ebx
c001a28c:	e8 71 fe ff ff       	call   c001a102 <EnvVarContainer::EnvVarContainer(Process*)>
c001a291:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a294:	89 1d 78 1d 03 c0    	mov    DWORD PTR ds:0xc0031d78,ebx
c001a29a:	e8 47 fe ff ff       	call   c001a0e6 <EnvVarContainer::__loadSystem()>
c001a29f:	83 c4 18             	add    esp,0x18
c001a2a2:	5b                   	pop    ebx
c001a2a3:	c3                   	ret    

c001a2a4 <Krnl::loadUserEnv()>:
c001a2a4:	53                   	push   ebx
c001a2a5:	83 ec 14             	sub    esp,0x14
c001a2a8:	6a 0c                	push   0xc
c001a2aa:	e8 53 56 ff ff       	call   c000f902 <malloc>
c001a2af:	89 c3                	mov    ebx,eax
c001a2b1:	58                   	pop    eax
c001a2b2:	5a                   	pop    edx
c001a2b3:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001a2b9:	53                   	push   ebx
c001a2ba:	e8 43 fe ff ff       	call   c001a102 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2bf:	89 1d 74 1d 03 c0    	mov    DWORD PTR ds:0xc0031d74,ebx
c001a2c5:	83 c4 18             	add    esp,0x18
c001a2c8:	5b                   	pop    ebx
c001a2c9:	c3                   	ret    

c001a2ca <Krnl::flushEnv()>:
c001a2ca:	c3                   	ret    

c001a2cb <Krnl::getProcessTotalEnvCount(Process*)>:
c001a2cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cf:	8b 15 74 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d74
c001a2d5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2db:	a1 78 1d 03 c0       	mov    eax,ds:0xc0031d78
c001a2e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2e2:	03 01                	add    eax,DWORD PTR [ecx]
c001a2e4:	85 d2                	test   edx,edx
c001a2e6:	74 02                	je     c001a2ea <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a2e8:	03 02                	add    eax,DWORD PTR [edx]
c001a2ea:	c3                   	ret    

c001a2eb <Krnl::getProcessEnvPair(Process*, int)>:
c001a2eb:	57                   	push   edi
c001a2ec:	8b 0d 74 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d74
c001a2f2:	56                   	push   esi
c001a2f3:	85 c9                	test   ecx,ecx
c001a2f5:	53                   	push   ebx
c001a2f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a2fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2fe:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a304:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a308:	8b 02                	mov    eax,DWORD PTR [edx]
c001a30a:	75 47                	jne    c001a353 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a30c:	39 c3                	cmp    ebx,eax
c001a30e:	7c 47                	jl     c001a357 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a310:	8b 15 78 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d78
c001a316:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a318:	01 c1                	add    ecx,eax
c001a31a:	39 d9                	cmp    ecx,ebx
c001a31c:	7e 6c                	jle    c001a38a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a31e:	51                   	push   ecx
c001a31f:	89 d9                	mov    ecx,ebx
c001a321:	29 c1                	sub    ecx,eax
c001a323:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a326:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a32a:	53                   	push   ebx
c001a32b:	68 38 c6 02 c0       	push   0xc002c638
c001a330:	e8 c6 85 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a335:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a33b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a33d:	a1 78 1d 03 c0       	mov    eax,ds:0xc0031d78
c001a342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a345:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a349:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a34c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a34f:	89 06                	mov    DWORD PTR [esi],eax
c001a351:	eb 51                	jmp    c001a3a4 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a353:	39 c3                	cmp    ebx,eax
c001a355:	7d 05                	jge    c001a35c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a357:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a35a:	eb 20                	jmp    c001a37c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a35c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a35e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a361:	39 da                	cmp    edx,ebx
c001a363:	7e 04                	jle    c001a369 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a365:	29 c3                	sub    ebx,eax
c001a367:	eb 10                	jmp    c001a379 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a369:	8b 0d 78 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d78
c001a36f:	03 11                	add    edx,DWORD PTR [ecx]
c001a371:	39 da                	cmp    edx,ebx
c001a373:	7e 15                	jle    c001a38a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a375:	29 c3                	sub    ebx,eax
c001a377:	29 fb                	sub    ebx,edi
c001a379:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a37c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a380:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a383:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a386:	89 06                	mov    DWORD PTR [esi],eax
c001a388:	eb 1d                	jmp    c001a3a7 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a38a:	83 ec 0c             	sub    esp,0xc
c001a38d:	68 4c c6 02 c0       	push   0xc002c64c
c001a392:	e8 18 00 00 00       	call   c001a3af <Krnl::panic(char const*)>
c001a397:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a39d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	89 f0                	mov    eax,esi
c001a3a9:	5b                   	pop    ebx
c001a3aa:	5e                   	pop    esi
c001a3ab:	5f                   	pop    edi
c001a3ac:	c2 04 00             	ret    0x4

c001a3af <Krnl::panic(char const*)>:
c001a3af:	55                   	push   ebp
c001a3b0:	89 e5                	mov    ebp,esp
c001a3b2:	53                   	push   ebx
c001a3b3:	83 ec 10             	sub    esp,0x10
c001a3b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a3b9:	fa                   	cli    
c001a3ba:	c6 05 84 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d84,0x1
c001a3c1:	53                   	push   ebx
c001a3c2:	e8 95 55 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c001a3c7:	58                   	pop    eax
c001a3c8:	c6 05 80 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e180,0x0
c001a3cf:	5a                   	pop    edx
c001a3d0:	53                   	push   ebx
c001a3d1:	68 66 c6 02 c0       	push   0xc002c666
c001a3d6:	e8 20 85 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a3db:	59                   	pop    ecx
c001a3dc:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a3e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e7:	e8 29 62 ff ff       	call   c0010615 <setActiveTerminal(VgaText*)>
c001a3ec:	83 c4 0c             	add    esp,0xc
c001a3ef:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a3f4:	6a 01                	push   0x1
c001a3f6:	6a 0f                	push   0xf
c001a3f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3fe:	e8 71 60 ff ff       	call   c0010474 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a403:	58                   	pop    eax
c001a404:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a409:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a40f:	e8 82 65 ff ff       	call   c0010996 <VgaText::clearScreen()>
c001a414:	58                   	pop    eax
c001a415:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a41a:	5a                   	pop    edx
c001a41b:	68 7f c6 02 c0       	push   0xc002c67f
c001a420:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a426:	e8 f7 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a42b:	59                   	pop    ecx
c001a42c:	58                   	pop    eax
c001a42d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a432:	68 24 c7 02 c0       	push   0xc002c724
c001a437:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a43d:	e8 e0 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a442:	58                   	pop    eax
c001a443:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a448:	5a                   	pop    edx
c001a449:	68 9b c6 02 c0       	push   0xc002c69b
c001a44e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a454:	e8 c9 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a459:	59                   	pop    ecx
c001a45a:	58                   	pop    eax
c001a45b:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a460:	53                   	push   ebx
c001a461:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a467:	e8 b6 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a46c:	58                   	pop    eax
c001a46d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a472:	5a                   	pop    edx
c001a473:	68 bb c6 02 c0       	push   0xc002c6bb
c001a478:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a47e:	e8 9f 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a483:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c001a488:	83 c4 10             	add    esp,0x10
c001a48b:	85 c0                	test   eax,eax
c001a48d:	74 02                	je     c001a491 <Krnl::panic(char const*)+0xe2>
c001a48f:	ff d0                	call   eax
c001a491:	83 ec 0c             	sub    esp,0xc
c001a494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a497:	e8 9c 32 00 00       	call   c001d738 <Thr::getDriverNameFromAddress(unsigned long)>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	89 c3                	mov    ebx,eax
c001a4a1:	85 c0                	test   eax,eax
c001a4a3:	0f 84 4e 02 00 00    	je     c001a6f7 <Krnl::panic(char const*)+0x348>
c001a4a9:	83 ec 08             	sub    esp,0x8
c001a4ac:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a4b1:	68 60 c7 02 c0       	push   0xc002c760
c001a4b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4bc:	e8 61 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a4c1:	58                   	pop    eax
c001a4c2:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a4c7:	5a                   	pop    edx
c001a4c8:	68 9b c6 02 c0       	push   0xc002c69b
c001a4cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d3:	e8 4a 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a4d8:	59                   	pop    ecx
c001a4d9:	58                   	pop    eax
c001a4da:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a4df:	53                   	push   ebx
c001a4e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e6:	e8 37 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a4eb:	83 c4 10             	add    esp,0x10
c001a4ee:	83 ec 08             	sub    esp,0x8
c001a4f1:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a4f6:	68 ba c6 02 c0       	push   0xc002c6ba
c001a4fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a501:	e8 1c 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a506:	58                   	pop    eax
c001a507:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a50c:	5a                   	pop    edx
c001a50d:	68 b8 c7 02 c0       	push   0xc002c7b8
c001a512:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a518:	e8 05 66 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a51d:	59                   	pop    ecx
c001a51e:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a523:	5b                   	pop    ebx
c001a524:	68 f8 c7 02 c0       	push   0xc002c7f8
c001a529:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52f:	e8 ee 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a534:	58                   	pop    eax
c001a535:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a53a:	5a                   	pop    edx
c001a53b:	68 a6 c6 02 c0       	push   0xc002c6a6
c001a540:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a546:	e8 d7 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a54b:	59                   	pop    ecx
c001a54c:	5b                   	pop    ebx
c001a54d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a550:	68 be c6 02 c0       	push   0xc002c6be
c001a555:	e8 a1 83 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a55a:	58                   	pop    eax
c001a55b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a55e:	5a                   	pop    edx
c001a55f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a562:	68 c7 c6 02 c0       	push   0xc002c6c7
c001a567:	e8 8f 83 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a56c:	59                   	pop    ecx
c001a56d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a570:	5b                   	pop    ebx
c001a571:	8b 00                	mov    eax,DWORD PTR [eax]
c001a573:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a576:	68 d0 c6 02 c0       	push   0xc002c6d0
c001a57b:	e8 7b 83 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001a580:	58                   	pop    eax
c001a581:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a586:	5a                   	pop    edx
c001a587:	68 3c c8 02 c0       	push   0xc002c83c
c001a58c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a592:	e8 8b 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a597:	59                   	pop    ecx
c001a598:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a59d:	5b                   	pop    ebx
c001a59e:	68 d9 c6 02 c0       	push   0xc002c6d9
c001a5a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a9:	e8 74 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a5ae:	0f 20 c0             	mov    eax,cr0
c001a5b1:	5a                   	pop    edx
c001a5b2:	59                   	pop    ecx
c001a5b3:	50                   	push   eax
c001a5b4:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a5b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5bf:	e8 18 65 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a5c4:	5b                   	pop    ebx
c001a5c5:	58                   	pop    eax
c001a5c6:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a5cb:	68 e3 c6 02 c0       	push   0xc002c6e3
c001a5d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d6:	e8 47 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a5db:	0f 20 d0             	mov    eax,cr2
c001a5de:	5a                   	pop    edx
c001a5df:	59                   	pop    ecx
c001a5e0:	50                   	push   eax
c001a5e1:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a5e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ec:	e8 eb 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a5f1:	5b                   	pop    ebx
c001a5f2:	58                   	pop    eax
c001a5f3:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a5f8:	68 ed c6 02 c0       	push   0xc002c6ed
c001a5fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a603:	e8 1a 65 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a608:	0f 20 d8             	mov    eax,cr3
c001a60b:	5a                   	pop    edx
c001a60c:	59                   	pop    ecx
c001a60d:	50                   	push   eax
c001a60e:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a613:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a619:	e8 be 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a61e:	5b                   	pop    ebx
c001a61f:	58                   	pop    eax
c001a620:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a625:	68 00 c7 02 c0       	push   0xc002c700
c001a62a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a630:	e8 ed 64 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a635:	0f 20 e0             	mov    eax,cr4
c001a638:	5a                   	pop    edx
c001a639:	59                   	pop    ecx
c001a63a:	50                   	push   eax
c001a63b:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a640:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a646:	e8 91 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a64b:	5b                   	pop    ebx
c001a64c:	58                   	pop    eax
c001a64d:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a652:	68 0a c7 02 c0       	push   0xc002c70a
c001a657:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65d:	e8 c0 64 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a662:	5a                   	pop    edx
c001a663:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a668:	59                   	pop    ecx
c001a669:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a66f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a672:	50                   	push   eax
c001a673:	e8 64 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a678:	5b                   	pop    ebx
c001a679:	58                   	pop    eax
c001a67a:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a67f:	68 d7 d5 02 c0       	push   0xc002d5d7
c001a684:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68a:	e8 93 64 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a68f:	5a                   	pop    edx
c001a690:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a695:	59                   	pop    ecx
c001a696:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a69c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a69f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6a2:	50                   	push   eax
c001a6a3:	e8 34 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a6a8:	5b                   	pop    ebx
c001a6a9:	58                   	pop    eax
c001a6aa:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a6af:	68 d7 d5 02 c0       	push   0xc002d5d7
c001a6b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ba:	e8 63 64 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a6bf:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a6c4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6cd:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6cf:	59                   	pop    ecx
c001a6d0:	5b                   	pop    ebx
c001a6d1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6d4:	50                   	push   eax
c001a6d5:	e8 02 64 ff ff       	call   c0010adc <VgaText::putx(unsigned int)>
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	b2 fe                	mov    dl,0xfe
c001a6df:	e4 60                	in     al,0x60
c001a6e1:	3c 1c                	cmp    al,0x1c
c001a6e3:	74 04                	je     c001a6e9 <Krnl::panic(char const*)+0x33a>
c001a6e5:	3c 5a                	cmp    al,0x5a
c001a6e7:	75 f6                	jne    c001a6df <Krnl::panic(char const*)+0x330>
c001a6e9:	e4 64                	in     al,0x64
c001a6eb:	a8 02                	test   al,0x2
c001a6ed:	75 fa                	jne    c001a6e9 <Krnl::panic(char const*)+0x33a>
c001a6ef:	88 d0                	mov    al,dl
c001a6f1:	e6 64                	out    0x64,al
c001a6f3:	fa                   	cli    
c001a6f4:	f4                   	hlt    
c001a6f5:	eb e8                	jmp    c001a6df <Krnl::panic(char const*)+0x330>
c001a6f7:	50                   	push   eax
c001a6f8:	50                   	push   eax
c001a6f9:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a6fe:	68 8c c7 02 c0       	push   0xc002c78c
c001a703:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a709:	e8 14 64 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a70e:	58                   	pop    eax
c001a70f:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a714:	5a                   	pop    edx
c001a715:	68 9b c6 02 c0       	push   0xc002c69b
c001a71a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a720:	e8 fd 63 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a725:	59                   	pop    ecx
c001a726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a72b:	5b                   	pop    ebx
c001a72c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a72f:	83 c0 0c             	add    eax,0xc
c001a732:	50                   	push   eax
c001a733:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001a738:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73e:	e8 df 63 ff ff       	call   c0010b22 <VgaText::puts(char const*)>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	e9 a3 fd ff ff       	jmp    c001a4ee <Krnl::panic(char const*)+0x13f>

c001a74b <Net::switchEndian16(unsigned short)>:
c001a74b:	83 ec 04             	sub    esp,0x4
c001a74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a752:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a756:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a75a:	c1 f8 08             	sar    eax,0x8
c001a75d:	89 c2                	mov    edx,eax
c001a75f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a763:	c1 e0 08             	shl    eax,0x8
c001a766:	09 d0                	or     eax,edx
c001a768:	83 c4 04             	add    esp,0x4
c001a76b:	c3                   	ret    

c001a76c <Net::switchEndian32(unsigned int)>:
c001a76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a770:	c1 e8 18             	shr    eax,0x18
c001a773:	89 c2                	mov    edx,eax
c001a775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a779:	c1 e0 08             	shl    eax,0x8
c001a77c:	25 00 00 ff 00       	and    eax,0xff0000
c001a781:	09 c2                	or     edx,eax
c001a783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a787:	c1 e8 08             	shr    eax,0x8
c001a78a:	25 00 ff 00 00       	and    eax,0xff00
c001a78f:	09 c2                	or     edx,eax
c001a791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a795:	c1 e0 18             	shl    eax,0x18
c001a798:	09 d0                	or     eax,edx
c001a79a:	c3                   	ret    

c001a79b <Net::crc32Calc(unsigned char*, int)>:
c001a79b:	83 ec 10             	sub    esp,0x10
c001a79e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7a3:	75 07                	jne    c001a7ac <Net::crc32Calc(unsigned char*, int)+0x11>
c001a7a5:	b8 00 00 00 00       	mov    eax,0x0
c001a7aa:	eb 7c                	jmp    c001a828 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a7b1:	7f 07                	jg     c001a7ba <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a7b3:	b8 00 00 00 00       	mov    eax,0x0
c001a7b8:	eb 6e                	jmp    c001a828 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7ba:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a7c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ce:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a7d2:	7d 4e                	jge    c001a822 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a7d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7dc:	01 d0                	add    eax,edx
c001a7de:	8a 00                	mov    al,BYTE PTR [eax]
c001a7e0:	0f b6 c0             	movzx  eax,al
c001a7e3:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a7e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7ef:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a7f4:	7f 26                	jg     c001a81c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7fa:	83 e0 01             	and    eax,0x1
c001a7fd:	74 0d                	je     c001a80c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a803:	d1 e8                	shr    eax,1
c001a805:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a80a:	eb 06                	jmp    c001a812 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a810:	d1 e8                	shr    eax,1
c001a812:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a816:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a81a:	eb d3                	jmp    c001a7ef <Net::crc32Calc(unsigned char*, int)+0x54>
c001a81c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a820:	eb a8                	jmp    c001a7ca <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a826:	f7 d0                	not    eax
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	c3                   	ret    

c001a82c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a82c:	57                   	push   edi
c001a82d:	56                   	push   esi
c001a82e:	53                   	push   ebx
c001a82f:	83 ec 60             	sub    esp,0x60
c001a832:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a839:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a83d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a845:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a84a:	7f 1a                	jg     c001a866 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a84c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a853:	8d 50 01             	lea    edx,[eax+0x1]
c001a856:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a85d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a860:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a864:	eb df                	jmp    c001a845 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a866:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a86d:	8d 50 01             	lea    edx,[eax+0x1]
c001a870:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a877:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a87a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a881:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a885:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a889:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a88d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a89d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8a9:	89 c6                	mov    esi,eax
c001a8ab:	89 d7                	mov    edi,edx
c001a8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8af:	89 c8                	mov    eax,ecx
c001a8b1:	89 fa                	mov    edx,edi
c001a8b3:	89 f3                	mov    ebx,esi
c001a8b5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8c0:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8cf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8d3:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a8d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8db:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8f3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8f7:	89 c6                	mov    esi,eax
c001a8f9:	89 d7                	mov    edi,edx
c001a8fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8fd:	89 c8                	mov    eax,ecx
c001a8ff:	89 fa                	mov    edx,edi
c001a901:	89 f3                	mov    ebx,esi
c001a903:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a907:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a90b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a90f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a917:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a91e:	0f b7 c0             	movzx  eax,ax
c001a921:	c1 f8 08             	sar    eax,0x8
c001a924:	89 c1                	mov    ecx,eax
c001a926:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a92d:	8d 50 01             	lea    edx,[eax+0x1]
c001a930:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a937:	88 ca                	mov    dl,cl
c001a939:	88 10                	mov    BYTE PTR [eax],dl
c001a93b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a942:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a949:	8d 48 01             	lea    ecx,[eax+0x1]
c001a94c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a953:	88 10                	mov    BYTE PTR [eax],dl
c001a955:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a959:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a95d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a964:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a968:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a96c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a974:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a978:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a97c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a980:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a984:	89 c6                	mov    esi,eax
c001a986:	89 d7                	mov    edi,edx
c001a988:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a98a:	89 c8                	mov    eax,ecx
c001a98c:	89 fa                	mov    edx,edi
c001a98e:	89 f3                	mov    ebx,esi
c001a990:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a994:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a998:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a99c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9a0:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a9a7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9ae:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a9b2:	50                   	push   eax
c001a9b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9b7:	e8 df fd ff ff       	call   c001a79b <Net::crc32Calc(unsigned char*, int)>
c001a9bc:	83 c4 08             	add    esp,0x8
c001a9bf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9c7:	c1 e8 18             	shr    eax,0x18
c001a9ca:	89 c1                	mov    ecx,eax
c001a9cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9d3:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9dd:	88 ca                	mov    dl,cl
c001a9df:	88 10                	mov    BYTE PTR [eax],dl
c001a9e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9e5:	c1 e8 10             	shr    eax,0x10
c001a9e8:	89 c1                	mov    ecx,eax
c001a9ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9f1:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9fb:	88 ca                	mov    dl,cl
c001a9fd:	88 10                	mov    BYTE PTR [eax],dl
c001a9ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa03:	c1 e8 08             	shr    eax,0x8
c001aa06:	89 c1                	mov    ecx,eax
c001aa08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa0f:	8d 50 01             	lea    edx,[eax+0x1]
c001aa12:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa19:	88 ca                	mov    dl,cl
c001aa1b:	88 10                	mov    BYTE PTR [eax],dl
c001aa1d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa24:	8d 50 01             	lea    edx,[eax+0x1]
c001aa27:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa2e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa32:	88 10                	mov    BYTE PTR [eax],dl
c001aa34:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa38:	83 c4 60             	add    esp,0x60
c001aa3b:	5b                   	pop    ebx
c001aa3c:	5e                   	pop    esi
c001aa3d:	5f                   	pop    edi
c001aa3e:	c3                   	ret    

c001aa3f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa3f:	57                   	push   edi
c001aa40:	56                   	push   esi
c001aa41:	53                   	push   ebx
c001aa42:	83 ec 70             	sub    esp,0x70
c001aa45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa4c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa50:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa58:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa5f:	83 c0 0e             	add    eax,0xe
c001aa62:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa66:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa71:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa85:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa89:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa8d:	89 c6                	mov    esi,eax
c001aa8f:	89 d7                	mov    edi,edx
c001aa91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa93:	89 c8                	mov    eax,ecx
c001aa95:	89 fa                	mov    edx,edi
c001aa97:	89 f3                	mov    ebx,esi
c001aa99:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa9d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaa1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aaa5:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aaad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aab4:	83 c0 08             	add    eax,0x8
c001aab7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aabb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aac2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aac6:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aace:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aad2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aad6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aada:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aade:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aae2:	89 c6                	mov    esi,eax
c001aae4:	89 d7                	mov    edi,edx
c001aae6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aae8:	89 c8                	mov    eax,ecx
c001aaea:	89 fa                	mov    edx,edi
c001aaec:	89 f3                	mov    ebx,esi
c001aaee:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aaf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aaf6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aafa:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ab02:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab09:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab13:	8a 00                	mov    al,BYTE PTR [eax]
c001ab15:	0f b6 c0             	movzx  eax,al
c001ab18:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab1d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab24:	8d 50 01             	lea    edx,[eax+0x1]
c001ab27:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab2e:	8a 00                	mov    al,BYTE PTR [eax]
c001ab30:	0f b6 c0             	movzx  eax,al
c001ab33:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab38:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab3d:	c1 e0 08             	shl    eax,0x8
c001ab40:	89 c2                	mov    edx,eax
c001ab42:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab46:	09 d0                	or     eax,edx
c001ab48:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab4f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab53:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab5b:	75 46                	jne    c001aba3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab5d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab67:	66 3d dc 05          	cmp    ax,0x5dc
c001ab6b:	77 16                	ja     c001ab83 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab77:	0f b7 c0             	movzx  eax,ax
c001ab7a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab81:	eb 20                	jmp    c001aba3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab83:	83 ec 0c             	sub    esp,0xc
c001ab86:	68 64 c8 02 c0       	push   0xc002c864
c001ab8b:	e8 6b 7d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab9a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab9e:	e9 17 01 00 00       	jmp    c001acba <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aba3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abaa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001abb1:	8b 12                	mov    edx,DWORD PTR [edx]
c001abb3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001abb7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001abbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001abc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abda:	89 c6                	mov    esi,eax
c001abdc:	89 d7                	mov    edi,edx
c001abde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abe0:	89 c8                	mov    eax,ecx
c001abe2:	89 fa                	mov    edx,edi
c001abe4:	89 f3                	mov    ebx,esi
c001abe6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001abea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abee:	89 04 24             	mov    DWORD PTR [esp],eax
c001abf1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abf8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001abff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac06:	8d 50 01             	lea    edx,[eax+0x1]
c001ac09:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac10:	8a 00                	mov    al,BYTE PTR [eax]
c001ac12:	0f b6 c0             	movzx  eax,al
c001ac15:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac19:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac20:	8d 50 01             	lea    edx,[eax+0x1]
c001ac23:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac2a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2c:	0f b6 c0             	movzx  eax,al
c001ac2f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac44:	8a 00                	mov    al,BYTE PTR [eax]
c001ac46:	0f b6 c0             	movzx  eax,al
c001ac49:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac4d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac54:	8d 50 01             	lea    edx,[eax+0x1]
c001ac57:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac5e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac60:	0f b6 c0             	movzx  eax,al
c001ac63:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac67:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac6b:	c1 e0 18             	shl    eax,0x18
c001ac6e:	89 c2                	mov    edx,eax
c001ac70:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac74:	c1 e0 10             	shl    eax,0x10
c001ac77:	09 c2                	or     edx,eax
c001ac79:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac7d:	c1 e0 08             	shl    eax,0x8
c001ac80:	09 d0                	or     eax,edx
c001ac82:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac86:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac8a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac91:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac95:	83 e8 04             	sub    eax,0x4
c001ac98:	83 ec 08             	sub    esp,0x8
c001ac9b:	50                   	push   eax
c001ac9c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001aca0:	e8 f6 fa ff ff       	call   c001a79b <Net::crc32Calc(unsigned char*, int)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001acac:	0f 94 c2             	sete   dl
c001acaf:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acb6:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acb9:	90                   	nop
c001acba:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acc1:	83 c4 70             	add    esp,0x70
c001acc4:	5b                   	pop    ebx
c001acc5:	5e                   	pop    esi
c001acc6:	5f                   	pop    edi
c001acc7:	c2 04 00             	ret    0x4

c001acca <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acca:	55                   	push   ebp
c001accb:	57                   	push   edi
c001accc:	56                   	push   esi
c001accd:	53                   	push   ebx
c001acce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acd4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acdb:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acdd:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ace0:	80 fb 40             	cmp    bl,0x40
c001ace3:	75 1b                	jne    c001ad00 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ace5:	8a 16                	mov    dl,BYTE PTR [esi]
c001ace7:	84 d2                	test   dl,dl
c001ace9:	0f 84 f1 00 00 00    	je     c001ade0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acef:	8d 46 01             	lea    eax,[esi+0x1]
c001acf2:	80 fa 3a             	cmp    dl,0x3a
c001acf5:	74 04                	je     c001acfb <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001acf7:	89 c6                	mov    esi,eax
c001acf9:	eb ea                	jmp    c001ace5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acfb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acfe:	89 c6                	mov    esi,eax
c001ad00:	50                   	push   eax
c001ad01:	6a 40                	push   0x40
c001ad03:	6a 00                	push   0x0
c001ad05:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad09:	50                   	push   eax
c001ad0a:	e8 41 5a fe ff       	call   c0000750 <memset>
c001ad0f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad16:	31 c0                	xor    eax,eax
c001ad18:	83 c4 10             	add    esp,0x10
c001ad1b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad1d:	84 c9                	test   cl,cl
c001ad1f:	0f 84 bb 00 00 00    	je     c001ade0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad25:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad2a:	0f 8f b0 00 00 00    	jg     c001ade0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad30:	80 f9 0a             	cmp    cl,0xa
c001ad33:	0f 85 98 00 00 00    	jne    c001add1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad39:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad3e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad42:	a8 df                	test   al,0xdf
c001ad44:	0f 94 c1             	sete   cl
c001ad47:	3c 23                	cmp    al,0x23
c001ad49:	0f 94 c2             	sete   dl
c001ad4c:	08 d1                	or     cl,dl
c001ad4e:	75 4a                	jne    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad50:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad53:	80 fa 01             	cmp    dl,0x1
c001ad56:	76 42                	jbe    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad58:	3c 5b                	cmp    al,0x5b
c001ad5a:	75 42                	jne    c001ad9e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad5c:	80 fb 40             	cmp    bl,0x40
c001ad5f:	75 39                	jne    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad61:	83 ec 0c             	sub    esp,0xc
c001ad64:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad68:	52                   	push   edx
c001ad69:	e8 fe 59 fe ff       	call   c000076c <strlen>
c001ad6e:	83 c4 10             	add    esp,0x10
c001ad71:	83 f8 3f             	cmp    eax,0x3f
c001ad74:	77 6a                	ja     c001ade0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad76:	50                   	push   eax
c001ad77:	50                   	push   eax
c001ad78:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad7c:	52                   	push   edx
c001ad7d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad81:	52                   	push   edx
c001ad82:	e8 85 5a fe ff       	call   c000080c <strcpy>
c001ad87:	58                   	pop    eax
c001ad88:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad8c:	52                   	push   edx
c001ad8d:	e8 da 59 fe ff       	call   c000076c <strlen>
c001ad92:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	31 d2                	xor    edx,edx
c001ad9c:	eb 3a                	jmp    c001add8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad9e:	80 fb 40             	cmp    bl,0x40
c001ada1:	74 06                	je     c001ada9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ada3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ada7:	eb 20                	jmp    c001adc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ada9:	50                   	push   eax
c001adaa:	50                   	push   eax
c001adab:	55                   	push   ebp
c001adac:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adb0:	50                   	push   eax
c001adb1:	e8 e2 5a fe ff       	call   c0000898 <strcmp>
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	85 c0                	test   eax,eax
c001adbb:	75 dd                	jne    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adbd:	eb e4                	jmp    c001ada3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adbf:	8d 50 01             	lea    edx,[eax+0x1]
c001adc2:	80 f9 3d             	cmp    cl,0x3d
c001adc5:	74 1d                	je     c001ade4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adc7:	89 d0                	mov    eax,edx
c001adc9:	8a 08                	mov    cl,BYTE PTR [eax]
c001adcb:	84 c9                	test   cl,cl
c001adcd:	75 f0                	jne    c001adbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adcf:	eb 0f                	jmp    c001ade0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add1:	8d 50 01             	lea    edx,[eax+0x1]
c001add4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001add8:	47                   	inc    edi
c001add9:	89 d0                	mov    eax,edx
c001addb:	e9 3b ff ff ff       	jmp    c001ad1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ade0:	31 c0                	xor    eax,eax
c001ade2:	eb 33                	jmp    c001ae17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ade4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ade8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001adeb:	50                   	push   eax
c001adec:	50                   	push   eax
c001aded:	8d 44 24 60          	lea    eax,[esp+0x60]
c001adf1:	50                   	push   eax
c001adf2:	56                   	push   esi
c001adf3:	e8 a0 5a fe ff       	call   c0000898 <strcmp>
c001adf8:	83 c4 10             	add    esp,0x10
c001adfb:	85 c0                	test   eax,eax
c001adfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae01:	75 97                	jne    c001ad9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae03:	51                   	push   ecx
c001ae04:	51                   	push   ecx
c001ae05:	52                   	push   edx
c001ae06:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae0d:	e8 fa 59 fe ff       	call   c000080c <strcpy>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	b0 01                	mov    al,0x1
c001ae17:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae1d:	5b                   	pop    ebx
c001ae1e:	5e                   	pop    esi
c001ae1f:	5f                   	pop    edi
c001ae20:	5d                   	pop    ebp
c001ae21:	c3                   	ret    

c001ae22 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae22:	57                   	push   edi
c001ae23:	56                   	push   esi
c001ae24:	53                   	push   ebx
c001ae25:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae2b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae32:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae39:	53                   	push   ebx
c001ae3a:	e8 2d 59 fe ff       	call   c000076c <strlen>
c001ae3f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae42:	89 c7                	mov    edi,eax
c001ae44:	e8 23 59 fe ff       	call   c000076c <strlen>
c001ae49:	83 c4 10             	add    esp,0x10
c001ae4c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae50:	3d ff 00 00 00       	cmp    eax,0xff
c001ae55:	0f 87 d3 00 00 00    	ja     c001af2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae5b:	57                   	push   edi
c001ae5c:	57                   	push   edi
c001ae5d:	56                   	push   esi
c001ae5e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae62:	56                   	push   esi
c001ae63:	e8 a4 59 fe ff       	call   c000080c <strcpy>
c001ae68:	58                   	pop    eax
c001ae69:	5a                   	pop    edx
c001ae6a:	68 b9 cd 02 c0       	push   0xc002cdb9
c001ae6f:	56                   	push   esi
c001ae70:	e8 d7 5a fe ff       	call   c000094c <strcat>
c001ae75:	59                   	pop    ecx
c001ae76:	5f                   	pop    edi
c001ae77:	53                   	push   ebx
c001ae78:	56                   	push   esi
c001ae79:	e8 ce 5a fe ff       	call   c000094c <strcat>
c001ae7e:	58                   	pop    eax
c001ae7f:	5a                   	pop    edx
c001ae80:	68 b0 c8 02 c0       	push   0xc002c8b0
c001ae85:	56                   	push   esi
c001ae86:	e8 c1 5a fe ff       	call   c000094c <strcat>
c001ae8b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae92:	e8 6b 4a ff ff       	call   c000f902 <malloc>
c001ae97:	83 c4 0c             	add    esp,0xc
c001ae9a:	89 c3                	mov    ebx,eax
c001ae9c:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001aea2:	56                   	push   esi
c001aea3:	50                   	push   eax
c001aea4:	e8 b1 7f ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	85 db                	test   ebx,ebx
c001aeae:	74 7e                	je     c001af2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeb0:	51                   	push   ecx
c001aeb1:	51                   	push   ecx
c001aeb2:	6a 01                	push   0x1
c001aeb4:	53                   	push   ebx
c001aeb5:	e8 04 80 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	85 c0                	test   eax,eax
c001aebf:	74 08                	je     c001aec9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aec1:	83 ec 0c             	sub    esp,0xc
c001aec4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec6:	53                   	push   ebx
c001aec7:	eb 5f                	jmp    c001af28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aec9:	52                   	push   edx
c001aeca:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aece:	50                   	push   eax
c001aecf:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aed3:	50                   	push   eax
c001aed4:	53                   	push   ebx
c001aed5:	e8 90 82 ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c001aeda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	89 c1                	mov    ecx,eax
c001aee3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aee7:	74 31                	je     c001af1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aee9:	83 ec 0c             	sub    esp,0xc
c001aeec:	50                   	push   eax
c001aeed:	e8 10 4a ff ff       	call   c000f902 <malloc>
c001aef2:	89 c6                	mov    esi,eax
c001aef4:	58                   	pop    eax
c001aef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aef7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aefb:	52                   	push   edx
c001aefc:	56                   	push   esi
c001aefd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af05:	53                   	push   ebx
c001af06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af09:	83 c4 20             	add    esp,0x20
c001af0c:	85 c0                	test   eax,eax
c001af0e:	75 0a                	jne    c001af1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af18:	74 18                	je     c001af32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af1a:	83 ec 0c             	sub    esp,0xc
c001af1d:	53                   	push   ebx
c001af1e:	e8 f9 7f ff ff       	call   c0012f1c <File::close()>
c001af23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	31 c0                	xor    eax,eax
c001af30:	eb 3b                	jmp    c001af6d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af32:	83 ec 0c             	sub    esp,0xc
c001af35:	53                   	push   ebx
c001af36:	e8 e1 7f ff ff       	call   c0012f1c <File::close()>
c001af3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af43:	83 c4 0c             	add    esp,0xc
c001af46:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af4d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af54:	56                   	push   esi
c001af55:	e8 70 fd ff ff       	call   c001acca <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af5a:	89 34 24             	mov    DWORD PTR [esp],esi
c001af5d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af61:	e8 ac 49 ff ff       	call   c000f912 <free>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af6d:	81 c4 20 01 00 00    	add    esp,0x120
c001af73:	5b                   	pop    ebx
c001af74:	5e                   	pop    esi
c001af75:	5f                   	pop    edi
c001af76:	c3                   	ret    

c001af77 <Reg::getLine(char*, char*, char*)>:
c001af77:	57                   	push   edi
c001af78:	56                   	push   esi
c001af79:	53                   	push   ebx
c001af7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af82:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af86:	57                   	push   edi
c001af87:	56                   	push   esi
c001af88:	53                   	push   ebx
c001af89:	68 b5 c8 02 c0       	push   0xc002c8b5
c001af8e:	e8 8f fe ff ff       	call   c001ae22 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	84 c0                	test   al,al
c001af98:	75 10                	jne    c001afaa <Reg::getLine(char*, char*, char*)+0x33>
c001af9a:	57                   	push   edi
c001af9b:	56                   	push   esi
c001af9c:	53                   	push   ebx
c001af9d:	68 da c8 02 c0       	push   0xc002c8da
c001afa2:	e8 7b fe ff ff       	call   c001ae22 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afa7:	83 c4 10             	add    esp,0x10
c001afaa:	5b                   	pop    ebx
c001afab:	5e                   	pop    esi
c001afac:	5f                   	pop    edi
c001afad:	c3                   	ret    

c001afae <Reg::readInt(char*, char*, int*)>:
c001afae:	55                   	push   ebp
c001afaf:	57                   	push   edi
c001afb0:	56                   	push   esi
c001afb1:	53                   	push   ebx
c001afb2:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afb8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afbc:	57                   	push   edi
c001afbd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afc4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afcb:	e8 a7 ff ff ff       	call   c001af77 <Reg::getLine(char*, char*, char*)>
c001afd0:	83 c4 10             	add    esp,0x10
c001afd3:	84 c0                	test   al,al
c001afd5:	0f 84 b3 00 00 00    	je     c001b08e <Reg::readInt(char*, char*, int*)+0xe0>
c001afdb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afdf:	80 fa 2b             	cmp    dl,0x2b
c001afe2:	74 0c                	je     c001aff0 <Reg::readInt(char*, char*, int*)+0x42>
c001afe4:	80 fa 2d             	cmp    dl,0x2d
c001afe7:	75 0e                	jne    c001aff7 <Reg::readInt(char*, char*, int*)+0x49>
c001afe9:	ba 01 00 00 00       	mov    edx,0x1
c001afee:	eb 0b                	jmp    c001affb <Reg::readInt(char*, char*, int*)+0x4d>
c001aff0:	ba 01 00 00 00       	mov    edx,0x1
c001aff5:	eb 02                	jmp    c001aff9 <Reg::readInt(char*, char*, int*)+0x4b>
c001aff7:	31 d2                	xor    edx,edx
c001aff9:	31 c0                	xor    eax,eax
c001affb:	be 0a 00 00 00       	mov    esi,0xa
c001b000:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b005:	75 20                	jne    c001b027 <Reg::readInt(char*, char*, int*)+0x79>
c001b007:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b00b:	80 f9 78             	cmp    cl,0x78
c001b00e:	75 0a                	jne    c001b01a <Reg::readInt(char*, char*, int*)+0x6c>
c001b010:	83 c2 02             	add    edx,0x2
c001b013:	be 10 00 00 00       	mov    esi,0x10
c001b018:	eb 0d                	jmp    c001b027 <Reg::readInt(char*, char*, int*)+0x79>
c001b01a:	80 f9 62             	cmp    cl,0x62
c001b01d:	75 08                	jne    c001b027 <Reg::readInt(char*, char*, int*)+0x79>
c001b01f:	83 c2 02             	add    edx,0x2
c001b022:	be 02 00 00 00       	mov    esi,0x2
c001b027:	01 d7                	add    edi,edx
c001b029:	31 d2                	xor    edx,edx
c001b02b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b02d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b031:	80 fb 0d             	cmp    bl,0xd
c001b034:	0f 94 c3             	sete   bl
c001b037:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b03c:	0f 94 c1             	sete   cl
c001b03f:	08 cb                	or     bl,cl
c001b041:	75 3a                	jne    c001b07d <Reg::readInt(char*, char*, int*)+0xcf>
c001b043:	0f af d6             	imul   edx,esi
c001b046:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b04b:	83 fe 10             	cmp    esi,0x10
c001b04e:	75 26                	jne    c001b076 <Reg::readInt(char*, char*, int*)+0xc8>
c001b050:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b054:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b057:	89 e9                	mov    ecx,ebp
c001b059:	80 f9 05             	cmp    cl,0x5
c001b05c:	77 06                	ja     c001b064 <Reg::readInt(char*, char*, int*)+0xb6>
c001b05e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b062:	eb 16                	jmp    c001b07a <Reg::readInt(char*, char*, int*)+0xcc>
c001b064:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b068:	83 e9 61             	sub    ecx,0x61
c001b06b:	80 f9 05             	cmp    cl,0x5
c001b06e:	77 06                	ja     c001b076 <Reg::readInt(char*, char*, int*)+0xc8>
c001b070:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b074:	eb 04                	jmp    c001b07a <Reg::readInt(char*, char*, int*)+0xcc>
c001b076:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b07a:	47                   	inc    edi
c001b07b:	eb ae                	jmp    c001b02b <Reg::readInt(char*, char*, int*)+0x7d>
c001b07d:	84 c0                	test   al,al
c001b07f:	74 02                	je     c001b083 <Reg::readInt(char*, char*, int*)+0xd5>
c001b081:	f7 da                	neg    edx
c001b083:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b08a:	89 10                	mov    DWORD PTR [eax],edx
c001b08c:	88 d8                	mov    al,bl
c001b08e:	81 c4 ec 00 00 00    	add    esp,0xec
c001b094:	5b                   	pop    ebx
c001b095:	5e                   	pop    esi
c001b096:	5f                   	pop    edi
c001b097:	5d                   	pop    ebp
c001b098:	c3                   	ret    

c001b099 <Reg::readString(char*, char*, char*, int)>:
c001b099:	57                   	push   edi
c001b09a:	56                   	push   esi
c001b09b:	53                   	push   ebx
c001b09c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0a2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0a9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0ad:	57                   	push   edi
c001b0ae:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0b5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0bc:	e8 b6 fe ff ff       	call   c001af77 <Reg::getLine(char*, char*, char*)>
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	89 c6                	mov    esi,eax
c001b0c6:	84 c0                	test   al,al
c001b0c8:	74 44                	je     c001b10e <Reg::readString(char*, char*, char*, int)+0x75>
c001b0ca:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0d1:	31 c0                	xor    eax,eax
c001b0d3:	4a                   	dec    edx
c001b0d4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0d7:	84 c9                	test   cl,cl
c001b0d9:	74 0f                	je     c001b0ea <Reg::readString(char*, char*, char*, int)+0x51>
c001b0db:	39 c2                	cmp    edx,eax
c001b0dd:	7e 0b                	jle    c001b0ea <Reg::readString(char*, char*, char*, int)+0x51>
c001b0df:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0e2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0e7:	40                   	inc    eax
c001b0e8:	eb ea                	jmp    c001b0d4 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	53                   	push   ebx
c001b0ee:	e8 79 56 fe ff       	call   c000076c <strlen>
c001b0f3:	83 c4 10             	add    esp,0x10
c001b0f6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0fb:	75 11                	jne    c001b10e <Reg::readString(char*, char*, char*, int)+0x75>
c001b0fd:	83 ec 0c             	sub    esp,0xc
c001b100:	53                   	push   ebx
c001b101:	e8 66 56 fe ff       	call   c000076c <strlen>
c001b106:	83 c4 10             	add    esp,0x10
c001b109:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b10e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b114:	89 f0                	mov    eax,esi
c001b116:	5b                   	pop    ebx
c001b117:	5e                   	pop    esi
c001b118:	5f                   	pop    edi
c001b119:	c3                   	ret    

c001b11a <Reg::readBool(char*, char*, bool*)>:
c001b11a:	83 ec 20             	sub    esp,0x20
c001b11d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b121:	50                   	push   eax
c001b122:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b126:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b12a:	e8 7f fe ff ff       	call   c001afae <Reg::readInt(char*, char*, int*)>
c001b12f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b134:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b138:	0f 95 02             	setne  BYTE PTR [edx]
c001b13b:	83 c4 2c             	add    esp,0x2c
c001b13e:	c3                   	ret    

c001b13f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b13f:	53                   	push   ebx
c001b140:	83 ec 1c             	sub    esp,0x1c
c001b143:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b147:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b14b:	50                   	push   eax
c001b14c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b150:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b154:	e8 c1 ff ff ff       	call   c001b11a <Reg::readBool(char*, char*, bool*)>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	84 c0                	test   al,al
c001b15e:	74 04                	je     c001b164 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b160:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b164:	88 d8                	mov    al,bl
c001b166:	83 c4 18             	add    esp,0x18
c001b169:	5b                   	pop    ebx
c001b16a:	c3                   	ret    

c001b16b <Reg::readIntWithDefault(char*, char*, int)>:
c001b16b:	53                   	push   ebx
c001b16c:	83 ec 1c             	sub    esp,0x1c
c001b16f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b173:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b177:	50                   	push   eax
c001b178:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b180:	e8 29 fe ff ff       	call   c001afae <Reg::readInt(char*, char*, int*)>
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	84 c0                	test   al,al
c001b18a:	74 04                	je     c001b190 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b190:	89 d8                	mov    eax,ebx
c001b192:	83 c4 18             	add    esp,0x18
c001b195:	5b                   	pop    ebx
c001b196:	c3                   	ret    

c001b197 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b197:	57                   	push   edi
c001b198:	56                   	push   esi
c001b199:	56                   	push   esi
c001b19a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b19e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1a2:	56                   	push   esi
c001b1a3:	57                   	push   edi
c001b1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ac:	e8 e8 fe ff ff       	call   c001b099 <Reg::readString(char*, char*, char*, int)>
c001b1b1:	83 c4 10             	add    esp,0x10
c001b1b4:	84 c0                	test   al,al
c001b1b6:	75 1a                	jne    c001b1d2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b1b8:	51                   	push   ecx
c001b1b9:	56                   	push   esi
c001b1ba:	6a 00                	push   0x0
c001b1bc:	57                   	push   edi
c001b1bd:	e8 8e 55 fe ff       	call   c0000750 <memset>
c001b1c2:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1d2:	89 f8                	mov    eax,edi
c001b1d4:	5a                   	pop    edx
c001b1d5:	5e                   	pop    esi
c001b1d6:	5f                   	pop    edi
c001b1d7:	c3                   	ret    

c001b1d8 <Sys::eject(regs*)>:
c001b1d8:	83 ec 0c             	sub    esp,0xc
c001b1db:	83 ca ff             	or     edx,0xffffffff
c001b1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1e5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ea:	83 e9 41             	sub    ecx,0x41
c001b1ed:	83 f9 19             	cmp    ecx,0x19
c001b1f0:	77 18                	ja     c001b20a <Sys::eject(regs*)+0x32>
c001b1f2:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c001b1f9:	85 c9                	test   ecx,ecx
c001b1fb:	74 0d                	je     c001b20a <Sys::eject(regs*)+0x32>
c001b1fd:	83 ec 0c             	sub    esp,0xc
c001b200:	51                   	push   ecx
c001b201:	e8 08 b0 ff ff       	call   c001620e <LogicalDisk::eject()>
c001b206:	83 c4 10             	add    esp,0x10
c001b209:	99                   	cdq    
c001b20a:	83 c4 0c             	add    esp,0xc
c001b20d:	c3                   	ret    

c001b20e <Sys::exit(regs*)>:
c001b20e:	83 ec 18             	sub    esp,0x18
c001b211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b215:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b218:	e8 7e 38 00 00       	call   c001ea9b <terminateTask(int)>
c001b21d:	83 c8 ff             	or     eax,0xffffffff
c001b220:	83 c4 1c             	add    esp,0x1c
c001b223:	89 c2                	mov    edx,eax
c001b225:	c3                   	ret    

c001b226 <Sys::getCwd(regs*)>:
c001b226:	83 ec 10             	sub    esp,0x10
c001b229:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b230:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b238:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b23b:	e8 1c 7a ff ff       	call   c0012c5c <Fs::getcwd(Process*, char*, int)>
c001b240:	83 c4 1c             	add    esp,0x1c
c001b243:	99                   	cdq    
c001b244:	c3                   	ret    

c001b245 <Sys::getPID(regs*)>:
c001b245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b24a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b24d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b24f:	99                   	cdq    
c001b250:	c3                   	ret    

c001b251 <Sys::getRAMData(regs*)>:
c001b251:	8b 0d 94 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f294
c001b257:	6b 05 90 f2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f290,0x64
c001b25e:	99                   	cdq    
c001b25f:	f7 f9                	idiv   ecx
c001b261:	c1 e0 18             	shl    eax,0x18
c001b264:	09 c8                	or     eax,ecx
c001b266:	99                   	cdq    
c001b267:	c3                   	ret    

c001b268 <Sys::getVGAPtr(regs*)>:
c001b268:	55                   	push   ebp
c001b269:	57                   	push   edi
c001b26a:	56                   	push   esi
c001b26b:	53                   	push   ebx
c001b26c:	83 ec 18             	sub    esp,0x18
c001b26f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b273:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b276:	e8 02 33 00 00       	call   c001e57d <Thr::processFromPID(int)>
c001b27b:	83 c4 10             	add    esp,0x10
c001b27e:	89 c1                	mov    ecx,eax
c001b280:	b8 01 00 00 00       	mov    eax,0x1
c001b285:	85 c9                	test   ecx,ecx
c001b287:	74 59                	je     c001b2e2 <Sys::getVGAPtr(regs*)+0x7a>
c001b289:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b28f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b293:	74 0c                	je     c001b2a1 <Sys::getVGAPtr(regs*)+0x39>
c001b295:	83 ec 0c             	sub    esp,0xc
c001b298:	53                   	push   ebx
c001b299:	e8 77 53 ff ff       	call   c0010615 <setActiveTerminal(VgaText*)>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b2a4:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b2a7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b2ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b2b1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2b4:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2ba:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2c0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2c3:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2c6:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2cc:	50                   	push   eax
c001b2cd:	50                   	push   eax
c001b2ce:	53                   	push   ebx
c001b2cf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2d2:	05 a8 0f 00 00       	add    eax,0xfa8
c001b2d7:	50                   	push   eax
c001b2d8:	e8 2f 55 fe ff       	call   c000080c <strcpy>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	31 c0                	xor    eax,eax
c001b2e2:	83 c4 0c             	add    esp,0xc
c001b2e5:	31 d2                	xor    edx,edx
c001b2e7:	5b                   	pop    ebx
c001b2e8:	5e                   	pop    esi
c001b2e9:	5f                   	pop    edi
c001b2ea:	5d                   	pop    ebp
c001b2eb:	c3                   	ret    

c001b2ec <Sys::loadDLL(regs*)>:
c001b2ec:	56                   	push   esi
c001b2ed:	53                   	push   ebx
c001b2ee:	31 d2                	xor    edx,edx
c001b2f0:	51                   	push   ecx
c001b2f1:	b8 01 00 00 00       	mov    eax,0x1
c001b2f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2fa:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2fe:	0f 84 8c 00 00 00    	je     c001b390 <Sys::loadDLL(regs*)+0xa4>
c001b304:	83 ec 0c             	sub    esp,0xc
c001b307:	68 14 01 00 00       	push   0x114
c001b30c:	e8 f1 45 ff ff       	call   c000f902 <malloc>
c001b311:	83 c4 0c             	add    esp,0xc
c001b314:	89 c3                	mov    ebx,eax
c001b316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b31e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b321:	53                   	push   ebx
c001b322:	e8 33 7b ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001b327:	83 c4 10             	add    esp,0x10
c001b32a:	31 d2                	xor    edx,edx
c001b32c:	b8 02 00 00 00       	mov    eax,0x2
c001b331:	85 db                	test   ebx,ebx
c001b333:	74 5b                	je     c001b390 <Sys::loadDLL(regs*)+0xa4>
c001b335:	83 ec 0c             	sub    esp,0xc
c001b338:	53                   	push   ebx
c001b339:	e8 ee 7d ff ff       	call   c001312c <File::exists()>
c001b33e:	83 c4 10             	add    esp,0x10
c001b341:	84 c0                	test   al,al
c001b343:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b345:	75 11                	jne    c001b358 <Sys::loadDLL(regs*)+0x6c>
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	53                   	push   ebx
c001b34b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	b8 03 00 00 00       	mov    eax,0x3
c001b356:	eb 36                	jmp    c001b38e <Sys::loadDLL(regs*)+0xa2>
c001b358:	83 ec 0c             	sub    esp,0xc
c001b35b:	53                   	push   ebx
c001b35c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35f:	58                   	pop    eax
c001b360:	5a                   	pop    edx
c001b361:	6a 00                	push   0x0
c001b363:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b366:	e8 1e 24 00 00       	call   c001d789 <Thr::loadDLL(char const*, bool)>
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	89 c1                	mov    ecx,eax
c001b370:	31 d2                	xor    edx,edx
c001b372:	b8 04 00 00 00       	mov    eax,0x4
c001b377:	85 c9                	test   ecx,ecx
c001b379:	74 15                	je     c001b390 <Sys::loadDLL(regs*)+0xa4>
c001b37b:	53                   	push   ebx
c001b37c:	53                   	push   ebx
c001b37d:	ff 35 48 f2 02 c0    	push   DWORD PTR ds:0xc002f248
c001b383:	51                   	push   ecx
c001b384:	e8 2b 26 00 00       	call   c001d9b4 <Thr::executeDLL(unsigned long, void*)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	31 c0                	xor    eax,eax
c001b38e:	31 d2                	xor    edx,edx
c001b390:	59                   	pop    ecx
c001b391:	5b                   	pop    ebx
c001b392:	5e                   	pop    esi
c001b393:	c3                   	ret    

c001b394 <Sys::read(regs*)>:
c001b394:	57                   	push   edi
c001b395:	56                   	push   esi
c001b396:	53                   	push   ebx
c001b397:	83 ec 10             	sub    esp,0x10
c001b39a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b39e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3a1:	83 f8 02             	cmp    eax,0x2
c001b3a4:	77 10                	ja     c001b3b6 <Sys::read(regs*)+0x22>
c001b3a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ae:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3b4:	eb 0e                	jmp    c001b3c4 <Sys::read(regs*)+0x30>
c001b3b6:	83 ec 0c             	sub    esp,0xc
c001b3b9:	50                   	push   eax
c001b3ba:	e8 e0 5f ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001b3bf:	83 c4 10             	add    esp,0x10
c001b3c2:	89 c1                	mov    ecx,eax
c001b3c4:	83 c8 ff             	or     eax,0xffffffff
c001b3c7:	85 c9                	test   ecx,ecx
c001b3c9:	89 c2                	mov    edx,eax
c001b3cb:	74 28                	je     c001b3f5 <Sys::read(regs*)+0x61>
c001b3cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d5:	31 ff                	xor    edi,edi
c001b3d7:	83 ec 0c             	sub    esp,0xc
c001b3da:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3e0:	52                   	push   edx
c001b3e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e7:	57                   	push   edi
c001b3e8:	56                   	push   esi
c001b3e9:	51                   	push   ecx
c001b3ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3f1:	83 c4 20             	add    esp,0x20
c001b3f4:	99                   	cdq    
c001b3f5:	83 c4 10             	add    esp,0x10
c001b3f8:	5b                   	pop    ebx
c001b3f9:	5e                   	pop    esi
c001b3fa:	5f                   	pop    edi
c001b3fb:	c3                   	ret    

c001b3fc <Sys::sbrk(regs*)>:
c001b3fc:	56                   	push   esi
c001b3fd:	53                   	push   ebx
c001b3fe:	50                   	push   eax
c001b3ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b404:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b408:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b40b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b40e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b414:	85 db                	test   ebx,ebx
c001b416:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b419:	74 02                	je     c001b41d <Sys::sbrk(regs*)+0x21>
c001b41b:	79 06                	jns    c001b423 <Sys::sbrk(regs*)+0x27>
c001b41d:	89 f0                	mov    eax,esi
c001b41f:	31 d2                	xor    edx,edx
c001b421:	eb 2a                	jmp    c001b44d <Sys::sbrk(regs*)+0x51>
c001b423:	83 c8 ff             	or     eax,0xffffffff
c001b426:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b42c:	89 c2                	mov    edx,eax
c001b42e:	77 1d                	ja     c001b44d <Sys::sbrk(regs*)+0x51>
c001b430:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b436:	50                   	push   eax
c001b437:	c1 ea 0c             	shr    edx,0xc
c001b43a:	68 07 0c 00 00       	push   0xc07
c001b43f:	52                   	push   edx
c001b440:	51                   	push   ecx
c001b441:	e8 e8 69 ff ff       	call   c0011e2e <VAS::allocatePages(int, int)>
c001b446:	89 f0                	mov    eax,esi
c001b448:	31 d2                	xor    edx,edx
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	59                   	pop    ecx
c001b44e:	5b                   	pop    ebx
c001b44f:	5e                   	pop    esi
c001b450:	c3                   	ret    

c001b451 <Sys::setCwd(regs*)>:
c001b451:	83 ec 14             	sub    esp,0x14
c001b454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b458:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b45b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b460:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b463:	e8 63 7d ff ff       	call   c00131cb <Fs::setcwd(Process*, char*)>
c001b468:	83 c4 1c             	add    esp,0x1c
c001b46b:	99                   	cdq    
c001b46c:	c3                   	ret    

c001b46d <Sys::setTime(regs*)>:
c001b46d:	55                   	push   ebp
c001b46e:	31 d2                	xor    edx,edx
c001b470:	57                   	push   edi
c001b471:	bf 18 00 00 00       	mov    edi,0x18
c001b476:	56                   	push   esi
c001b477:	53                   	push   ebx
c001b478:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b47d:	83 ec 30             	sub    esp,0x30
c001b480:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b484:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b487:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b48a:	f7 f3                	div    ebx
c001b48c:	89 d6                	mov    esi,edx
c001b48e:	31 d2                	xor    edx,edx
c001b490:	f7 f3                	div    ebx
c001b492:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b495:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b499:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b49e:	31 d2                	xor    edx,edx
c001b4a0:	f7 f3                	div    ebx
c001b4a2:	31 d2                	xor    edx,edx
c001b4a4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4a9:	f7 f7                	div    edi
c001b4ab:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4b2:	0f b7 cd             	movzx  ecx,bp
c001b4b5:	56                   	push   esi
c001b4b6:	89 c7                	mov    edi,eax
c001b4b8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4bc:	c1 e6 10             	shl    esi,0x10
c001b4bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4c3:	83 e7 1f             	and    edi,0x1f
c001b4c6:	51                   	push   ecx
c001b4c7:	47                   	inc    edi
c001b4c8:	c1 e8 05             	shr    eax,0x5
c001b4cb:	31 d2                	xor    edx,edx
c001b4cd:	f7 f3                	div    ebx
c001b4cf:	31 db                	xor    ebx,ebx
c001b4d1:	52                   	push   edx
c001b4d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4d6:	57                   	push   edi
c001b4d7:	68 f5 c8 02 c0       	push   0xc002c8f5
c001b4dc:	e8 1a 74 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b4e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4e5:	89 f8                	mov    eax,edi
c001b4e7:	31 c9                	xor    ecx,ecx
c001b4e9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4ed:	88 c1                	mov    cl,al
c001b4ef:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4f5:	88 d5                	mov    ch,dl
c001b4f7:	c1 e0 10             	shl    eax,0x10
c001b4fa:	0f b7 d1             	movzx  edx,cx
c001b4fd:	09 c2                	or     edx,eax
c001b4ff:	89 d8                	mov    eax,ebx
c001b501:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b506:	09 f0                	or     eax,esi
c001b508:	89 c3                	mov    ebx,eax
c001b50a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b50e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b512:	83 c4 18             	add    esp,0x18
c001b515:	53                   	push   ebx
c001b516:	52                   	push   edx
c001b517:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b51b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b51f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b523:	e8 c5 83 ff ff       	call   c00138ed <datetimeToSeconds(datetime_t)>
c001b528:	83 c4 0c             	add    esp,0xc
c001b52b:	52                   	push   edx
c001b52c:	50                   	push   eax
c001b52d:	56                   	push   esi
c001b52e:	e8 41 85 ff ff       	call   c0013a74 <secondsToDatetime(unsigned long long)>
c001b533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b537:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b53b:	51                   	push   ecx
c001b53c:	89 d6                	mov    esi,edx
c001b53e:	51                   	push   ecx
c001b53f:	c1 ee 10             	shr    esi,0x10
c001b542:	89 f3                	mov    ebx,esi
c001b544:	0f b6 f3             	movzx  esi,bl
c001b547:	56                   	push   esi
c001b548:	0f b6 f6             	movzx  esi,dh
c001b54b:	0f b6 d2             	movzx  edx,dl
c001b54e:	56                   	push   esi
c001b54f:	52                   	push   edx
c001b550:	89 c2                	mov    edx,eax
c001b552:	c1 ea 10             	shr    edx,0x10
c001b555:	52                   	push   edx
c001b556:	0f b6 d4             	movzx  edx,ah
c001b559:	0f b6 c0             	movzx  eax,al
c001b55c:	52                   	push   edx
c001b55d:	50                   	push   eax
c001b55e:	68 11 c9 02 c0       	push   0xc002c911
c001b563:	e8 93 73 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b568:	83 c4 2c             	add    esp,0x2c
c001b56b:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001b570:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b574:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b578:	53                   	push   ebx
c001b579:	51                   	push   ecx
c001b57a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b580:	e8 8f 84 ff ff       	call   c0013a14 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b585:	83 f0 01             	xor    eax,0x1
c001b588:	31 d2                	xor    edx,edx
c001b58a:	0f b6 c0             	movzx  eax,al
c001b58d:	83 c4 3c             	add    esp,0x3c
c001b590:	5b                   	pop    ebx
c001b591:	5e                   	pop    esi
c001b592:	5f                   	pop    edi
c001b593:	5d                   	pop    ebp
c001b594:	c3                   	ret    

c001b595 <Sys::timezone(regs*)>:
c001b595:	53                   	push   ebx
c001b596:	83 ec 08             	sub    esp,0x8
c001b599:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b59d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5a1:	75 17                	jne    c001b5ba <Sys::timezone(regs*)+0x25>
c001b5a3:	83 ec 0c             	sub    esp,0xc
c001b5a6:	68 2d c9 02 c0       	push   0xc002c92d
c001b5ab:	e8 4b 73 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b5b0:	83 c8 ff             	or     eax,0xffffffff
c001b5b3:	83 c4 10             	add    esp,0x10
c001b5b6:	89 c2                	mov    edx,eax
c001b5b8:	eb 20                	jmp    c001b5da <Sys::timezone(regs*)+0x45>
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	68 65 c9 02 c0       	push   0xc002c965
c001b5c2:	e8 34 73 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b5c7:	58                   	pop    eax
c001b5c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5cb:	e8 a6 81 ff ff       	call   c0013776 <User::loadClockSettings(int)>
c001b5d0:	83 c4 10             	add    esp,0x10
c001b5d3:	b8 01 00 00 00       	mov    eax,0x1
c001b5d8:	31 d2                	xor    edx,edx
c001b5da:	83 c4 08             	add    esp,0x8
c001b5dd:	5b                   	pop    ebx
c001b5de:	c3                   	ret    

c001b5df <Sys::write(regs*)>:
c001b5df:	57                   	push   edi
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 10             	sub    esp,0x10
c001b5e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ec:	83 f8 02             	cmp    eax,0x2
c001b5ef:	77 10                	ja     c001b601 <Sys::write(regs*)+0x22>
c001b5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5ff:	eb 0e                	jmp    c001b60f <Sys::write(regs*)+0x30>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	50                   	push   eax
c001b605:	e8 95 5d ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	89 c1                	mov    ecx,eax
c001b60f:	83 c8 ff             	or     eax,0xffffffff
c001b612:	85 c9                	test   ecx,ecx
c001b614:	89 c2                	mov    edx,eax
c001b616:	74 28                	je     c001b640 <Sys::write(regs*)+0x61>
c001b618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b620:	31 ff                	xor    edi,edi
c001b622:	83 ec 0c             	sub    esp,0xc
c001b625:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b627:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b62b:	52                   	push   edx
c001b62c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b632:	57                   	push   edi
c001b633:	56                   	push   esi
c001b634:	51                   	push   ecx
c001b635:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63c:	83 c4 20             	add    esp,0x20
c001b63f:	99                   	cdq    
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	5b                   	pop    ebx
c001b644:	5e                   	pop    esi
c001b645:	5f                   	pop    edi
c001b646:	c3                   	ret    

c001b647 <Sys::wsbe(regs*)>:
c001b647:	57                   	push   edi
c001b648:	b9 0b 00 00 00       	mov    ecx,0xb
c001b64d:	56                   	push   esi
c001b64e:	be a4 c9 02 c0       	mov    esi,0xc002c9a4
c001b653:	53                   	push   ebx
c001b654:	83 ec 30             	sub    esp,0x30
c001b657:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b65b:	fc                   	cld    
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b661:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b66d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b673:	8b 06                	mov    eax,DWORD PTR [esi]
c001b675:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b678:	57                   	push   edi
c001b679:	e8 ee 50 fe ff       	call   c000076c <strlen>
c001b67e:	5a                   	pop    edx
c001b67f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b683:	52                   	push   edx
c001b684:	31 d2                	xor    edx,edx
c001b686:	57                   	push   edi
c001b687:	52                   	push   edx
c001b688:	50                   	push   eax
c001b689:	56                   	push   esi
c001b68a:	ff d3                	call   ebx
c001b68c:	83 c4 14             	add    esp,0x14
c001b68f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b693:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b696:	e8 00 34 00 00       	call   c001ea9b <terminateTask(int)>
c001b69b:	83 c4 40             	add    esp,0x40
c001b69e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6a3:	5b                   	pop    ebx
c001b6a4:	31 d2                	xor    edx,edx
c001b6a6:	5e                   	pop    esi
c001b6a7:	5f                   	pop    edi
c001b6a8:	c3                   	ret    

c001b6a9 <Sys::yield(regs*)>:
c001b6a9:	57                   	push   edi
c001b6aa:	56                   	push   esi
c001b6ab:	53                   	push   ebx
c001b6ac:	fa                   	cli    
c001b6ad:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001b6b3:	e8 b0 2a 00 00       	call   c001e168 <schedule()>
c001b6b8:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001b6bd:	48                   	dec    eax
c001b6be:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001b6c3:	75 01                	jne    c001b6c6 <Sys::yield(regs*)+0x1d>
c001b6c5:	fb                   	sti    
c001b6c6:	8b 35 b0 f8 02 c0    	mov    esi,DWORD PTR ds:0xc002f8b0
c001b6cc:	8b 3d b4 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8b4
c001b6d2:	89 f0                	mov    eax,esi
c001b6d4:	89 fb                	mov    ebx,edi
c001b6d6:	89 f1                	mov    ecx,esi
c001b6d8:	c1 e0 07             	shl    eax,0x7
c001b6db:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6df:	25 80 30 0f 00       	and    eax,0xf3080
c001b6e4:	c1 eb 17             	shr    ebx,0x17
c001b6e7:	31 c8                	xor    eax,ecx
c001b6e9:	89 da                	mov    edx,ebx
c001b6eb:	5b                   	pop    ebx
c001b6ec:	5e                   	pop    esi
c001b6ed:	5f                   	pop    edi
c001b6ee:	c3                   	ret    

c001b6ef <sysCallSeekDir(regs*)>:
c001b6ef:	31 c0                	xor    eax,eax
c001b6f1:	31 d2                	xor    edx,edx
c001b6f3:	c3                   	ret    

c001b6f4 <sysCallTellDir(regs*)>:
c001b6f4:	31 c0                	xor    eax,eax
c001b6f6:	31 d2                	xor    edx,edx
c001b6f8:	c3                   	ret    

c001b6f9 <sysCallVerify(regs*)>:
c001b6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6fd:	31 d2                	xor    edx,edx
c001b6ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b702:	c3                   	ret    

c001b703 <sysFormatDisk(regs*)>:
c001b703:	56                   	push   esi
c001b704:	53                   	push   ebx
c001b705:	53                   	push   ebx
c001b706:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b70a:	8b 1d b4 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3b4
c001b710:	eb 25                	jmp    c001b737 <sysFormatDisk(regs*)+0x34>
c001b712:	83 ec 0c             	sub    esp,0xc
c001b715:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b718:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b71a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b71d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b720:	50                   	push   eax
c001b721:	ff 34 85 40 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd07c0]
c001b728:	53                   	push   ebx
c001b729:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b72c:	83 c4 20             	add    esp,0x20
c001b72f:	83 f8 08             	cmp    eax,0x8
c001b732:	75 12                	jne    c001b746 <sysFormatDisk(regs*)+0x43>
c001b734:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b737:	85 db                	test   ebx,ebx
c001b739:	75 d7                	jne    c001b712 <sysFormatDisk(regs*)+0xf>
c001b73b:	59                   	pop    ecx
c001b73c:	b8 03 00 00 00       	mov    eax,0x3
c001b741:	31 d2                	xor    edx,edx
c001b743:	5b                   	pop    ebx
c001b744:	5e                   	pop    esi
c001b745:	c3                   	ret    
c001b746:	85 c0                	test   eax,eax
c001b748:	74 1b                	je     c001b765 <sysFormatDisk(regs*)+0x62>
c001b74a:	83 f8 09             	cmp    eax,0x9
c001b74d:	74 0b                	je     c001b75a <sysFormatDisk(regs*)+0x57>
c001b74f:	59                   	pop    ecx
c001b750:	b8 02 00 00 00       	mov    eax,0x2
c001b755:	31 d2                	xor    edx,edx
c001b757:	5b                   	pop    ebx
c001b758:	5e                   	pop    esi
c001b759:	c3                   	ret    
c001b75a:	59                   	pop    ecx
c001b75b:	b8 01 00 00 00       	mov    eax,0x1
c001b760:	31 d2                	xor    edx,edx
c001b762:	5b                   	pop    ebx
c001b763:	5e                   	pop    esi
c001b764:	c3                   	ret    
c001b765:	59                   	pop    ecx
c001b766:	31 c0                	xor    eax,eax
c001b768:	31 d2                	xor    edx,edx
c001b76a:	5b                   	pop    ebx
c001b76b:	5e                   	pop    esi
c001b76c:	c3                   	ret    

c001b76d <sysSetDiskVolumeLabel(regs*)>:
c001b76d:	56                   	push   esi
c001b76e:	53                   	push   ebx
c001b76f:	53                   	push   ebx
c001b770:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b774:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b777:	83 f8 19             	cmp    eax,0x19
c001b77a:	77 29                	ja     c001b7a5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77c:	8b 0c 85 40 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd07c0]
c001b783:	85 c9                	test   ecx,ecx
c001b785:	74 1e                	je     c001b7a5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b78a:	85 d2                	test   edx,edx
c001b78c:	74 17                	je     c001b7a5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b78e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b794:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b796:	52                   	push   edx
c001b797:	50                   	push   eax
c001b798:	51                   	push   ecx
c001b799:	53                   	push   ebx
c001b79a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	99                   	cdq    
c001b7a1:	59                   	pop    ecx
c001b7a2:	5b                   	pop    ebx
c001b7a3:	5e                   	pop    esi
c001b7a4:	c3                   	ret    
c001b7a5:	59                   	pop    ecx
c001b7a6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7b0:	5b                   	pop    ebx
c001b7b1:	5e                   	pop    esi
c001b7b2:	c3                   	ret    

c001b7b3 <sysGetDiskVolumeLabel(regs*)>:
c001b7b3:	57                   	push   edi
c001b7b4:	56                   	push   esi
c001b7b5:	53                   	push   ebx
c001b7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7bd:	83 fa 19             	cmp    edx,0x19
c001b7c0:	77 34                	ja     c001b7f6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c2:	8b 0c 95 40 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd07c0]
c001b7c9:	85 c9                	test   ecx,ecx
c001b7cb:	74 29                	je     c001b7f6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7cd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7d0:	85 db                	test   ebx,ebx
c001b7d2:	74 22                	je     c001b7f6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7d7:	85 c0                	test   eax,eax
c001b7d9:	74 1b                	je     c001b7f6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7db:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7e1:	83 ec 0c             	sub    esp,0xc
c001b7e4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7e6:	50                   	push   eax
c001b7e7:	53                   	push   ebx
c001b7e8:	52                   	push   edx
c001b7e9:	51                   	push   ecx
c001b7ea:	56                   	push   esi
c001b7eb:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7ee:	83 c4 20             	add    esp,0x20
c001b7f1:	99                   	cdq    
c001b7f2:	5b                   	pop    ebx
c001b7f3:	5e                   	pop    esi
c001b7f4:	5f                   	pop    edi
c001b7f5:	c3                   	ret    
c001b7f6:	5b                   	pop    ebx
c001b7f7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b801:	5e                   	pop    esi
c001b802:	5f                   	pop    edi
c001b803:	c3                   	ret    

c001b804 <sysShutdown(regs*)>:
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b80e:	85 c0                	test   eax,eax
c001b810:	74 18                	je     c001b82a <sysShutdown(regs*)+0x26>
c001b812:	83 f8 01             	cmp    eax,0x1
c001b815:	74 38                	je     c001b84f <sysShutdown(regs*)+0x4b>
c001b817:	83 f8 02             	cmp    eax,0x2
c001b81a:	74 24                	je     c001b840 <sysShutdown(regs*)+0x3c>
c001b81c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b821:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b826:	83 c4 0c             	add    esp,0xc
c001b829:	c3                   	ret    
c001b82a:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001b82f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b831:	6a 00                	push   0x0
c001b833:	6a 00                	push   0x0
c001b835:	6a 00                	push   0x0
c001b837:	50                   	push   eax
c001b838:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b83b:	83 c4 10             	add    esp,0x10
c001b83e:	eb dc                	jmp    c001b81c <sysShutdown(regs*)+0x18>
c001b840:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001b845:	8b 10                	mov    edx,DWORD PTR [eax]
c001b847:	6a 00                	push   0x0
c001b849:	6a 00                	push   0x0
c001b84b:	6a 01                	push   0x1
c001b84d:	eb e8                	jmp    c001b837 <sysShutdown(regs*)+0x33>
c001b84f:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c001b854:	85 c0                	test   eax,eax
c001b856:	74 02                	je     c001b85a <sysShutdown(regs*)+0x56>
c001b858:	ff d0                	call   eax
c001b85a:	31 c0                	xor    eax,eax
c001b85c:	31 d2                	xor    edx,edx
c001b85e:	83 c4 0c             	add    esp,0xc
c001b861:	c3                   	ret    

c001b862 <sysCallRealpath(regs*)>:
c001b862:	83 ec 0c             	sub    esp,0xc
c001b865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b869:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b86c:	85 d2                	test   edx,edx
c001b86e:	74 07                	je     c001b877 <sysCallRealpath(regs*)+0x15>
c001b870:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b873:	85 c0                	test   eax,eax
c001b875:	75 0b                	jne    c001b882 <sysCallRealpath(regs*)+0x20>
c001b877:	b8 01 00 00 00       	mov    eax,0x1
c001b87c:	31 d2                	xor    edx,edx
c001b87e:	83 c4 0c             	add    esp,0xc
c001b881:	c3                   	ret    
c001b882:	51                   	push   ecx
c001b883:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b889:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b88c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b892:	51                   	push   ecx
c001b893:	52                   	push   edx
c001b894:	50                   	push   eax
c001b895:	e8 16 74 ff ff       	call   c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b89a:	83 c4 10             	add    esp,0x10
c001b89d:	31 c0                	xor    eax,eax
c001b89f:	31 d2                	xor    edx,edx
c001b8a1:	83 c4 0c             	add    esp,0xc
c001b8a4:	c3                   	ret    

c001b8a5 <sysCallGetArgc(regs*)>:
c001b8a5:	83 ec 14             	sub    esp,0x14
c001b8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b0:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8b6:	68 d0 c9 02 c0       	push   0xc002c9d0
c001b8bb:	e8 3b 70 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b8c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8ce:	83 c4 1c             	add    esp,0x1c
c001b8d1:	99                   	cdq    
c001b8d2:	c3                   	ret    

c001b8d3 <sysCallReadDir(regs*)>:
c001b8d3:	53                   	push   ebx
c001b8d4:	83 ec 18             	sub    esp,0x18
c001b8d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8de:	83 f8 02             	cmp    eax,0x2
c001b8e1:	76 53                	jbe    c001b936 <sysCallReadDir(regs*)+0x63>
c001b8e3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8e6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8ec:	77 4f                	ja     c001b93d <sysCallReadDir(regs*)+0x6a>
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	50                   	push   eax
c001b8f2:	e8 a8 5a ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	85 c0                	test   eax,eax
c001b8fc:	74 50                	je     c001b94e <sysCallReadDir(regs*)+0x7b>
c001b8fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b906:	83 ec 0c             	sub    esp,0xc
c001b909:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b90f:	51                   	push   ecx
c001b910:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b913:	6a 00                	push   0x0
c001b915:	68 10 01 00 00       	push   0x110
c001b91a:	50                   	push   eax
c001b91b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b91e:	83 c4 20             	add    esp,0x20
c001b921:	85 c0                	test   eax,eax
c001b923:	74 38                	je     c001b95d <sysCallReadDir(regs*)+0x8a>
c001b925:	83 f8 07             	cmp    eax,0x7
c001b928:	74 0c                	je     c001b936 <sysCallReadDir(regs*)+0x63>
c001b92a:	b8 02 00 00 00       	mov    eax,0x2
c001b92f:	31 d2                	xor    edx,edx
c001b931:	83 c4 18             	add    esp,0x18
c001b934:	5b                   	pop    ebx
c001b935:	c3                   	ret    
c001b936:	b8 01 00 00 00       	mov    eax,0x1
c001b93b:	eb f2                	jmp    c001b92f <sysCallReadDir(regs*)+0x5c>
c001b93d:	83 ec 08             	sub    esp,0x8
c001b940:	52                   	push   edx
c001b941:	68 f4 ca 02 c0       	push   0xc002caf4
c001b946:	e8 b0 6f ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b953:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b958:	83 c4 18             	add    esp,0x18
c001b95b:	5b                   	pop    ebx
c001b95c:	c3                   	ret    
c001b95d:	31 c0                	xor    eax,eax
c001b95f:	eb ce                	jmp    c001b92f <sysCallReadDir(regs*)+0x5c>

c001b961 <sysCallIsATTY(regs*)>:
c001b961:	83 ec 0c             	sub    esp,0xc
c001b964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b968:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b96b:	83 f8 02             	cmp    eax,0x2
c001b96e:	76 07                	jbe    c001b977 <sysCallIsATTY(regs*)+0x16>
c001b970:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b975:	75 26                	jne    c001b99d <sysCallIsATTY(regs*)+0x3c>
c001b977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b985:	85 c0                	test   eax,eax
c001b987:	74 24                	je     c001b9ad <sysCallIsATTY(regs*)+0x4c>
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b98e:	50                   	push   eax
c001b98f:	ff 12                	call   DWORD PTR [edx]
c001b991:	31 d2                	xor    edx,edx
c001b993:	0f b6 c0             	movzx  eax,al
c001b996:	83 c4 10             	add    esp,0x10
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    
c001b99d:	83 ec 0c             	sub    esp,0xc
c001b9a0:	50                   	push   eax
c001b9a1:	e8 f9 59 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001b9a6:	83 c4 10             	add    esp,0x10
c001b9a9:	85 c0                	test   eax,eax
c001b9ab:	75 dc                	jne    c001b989 <sysCallIsATTY(regs*)+0x28>
c001b9ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b7:	83 c4 0c             	add    esp,0xc
c001b9ba:	c3                   	ret    

c001b9bb <sysCallSeek(regs*)>:
c001b9bb:	53                   	push   ebx
c001b9bc:	83 ec 08             	sub    esp,0x8
c001b9bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c6:	83 f8 02             	cmp    eax,0x2
c001b9c9:	76 4a                	jbe    c001ba15 <sysCallSeek(regs*)+0x5a>
c001b9cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9d0:	77 32                	ja     c001ba04 <sysCallSeek(regs*)+0x49>
c001b9d2:	83 ec 0c             	sub    esp,0xc
c001b9d5:	50                   	push   eax
c001b9d6:	e8 c4 59 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001b9db:	83 c4 0c             	add    esp,0xc
c001b9de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9e1:	31 db                	xor    ebx,ebx
c001b9e3:	53                   	push   ebx
c001b9e4:	51                   	push   ecx
c001b9e5:	50                   	push   eax
c001b9e6:	e8 91 75 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	85 c0                	test   eax,eax
c001b9f0:	0f 95 c0             	setne  al
c001b9f3:	31 d2                	xor    edx,edx
c001b9f5:	0f b6 c0             	movzx  eax,al
c001b9f8:	f7 d8                	neg    eax
c001b9fa:	83 d2 00             	adc    edx,0x0
c001b9fd:	83 c4 08             	add    esp,0x8
c001ba00:	f7 da                	neg    edx
c001ba02:	5b                   	pop    ebx
c001ba03:	c3                   	ret    
c001ba04:	83 ec 08             	sub    esp,0x8
c001ba07:	50                   	push   eax
c001ba08:	68 db c9 02 c0       	push   0xc002c9db
c001ba0d:	e8 e9 6e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ba12:	83 c4 10             	add    esp,0x10
c001ba15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1f:	83 c4 08             	add    esp,0x8
c001ba22:	5b                   	pop    ebx
c001ba23:	c3                   	ret    

c001ba24 <sysCallTell(regs*)>:
c001ba24:	53                   	push   ebx
c001ba25:	83 ec 08             	sub    esp,0x8
c001ba28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba2f:	83 f8 02             	cmp    eax,0x2
c001ba32:	76 5e                	jbe    c001ba92 <sysCallTell(regs*)+0x6e>
c001ba34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba39:	77 2d                	ja     c001ba68 <sysCallTell(regs*)+0x44>
c001ba3b:	83 ec 0c             	sub    esp,0xc
c001ba3e:	50                   	push   eax
c001ba3f:	e8 5b 59 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001ba44:	5a                   	pop    edx
c001ba45:	59                   	pop    ecx
c001ba46:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba49:	50                   	push   eax
c001ba4a:	e8 83 75 ff ff       	call   c0012fd2 <File::tell(unsigned long long*)>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	85 c0                	test   eax,eax
c001ba54:	0f 95 c0             	setne  al
c001ba57:	31 d2                	xor    edx,edx
c001ba59:	0f b6 c0             	movzx  eax,al
c001ba5c:	f7 d8                	neg    eax
c001ba5e:	83 d2 00             	adc    edx,0x0
c001ba61:	83 c4 08             	add    esp,0x8
c001ba64:	f7 da                	neg    edx
c001ba66:	5b                   	pop    ebx
c001ba67:	c3                   	ret    
c001ba68:	83 ec 08             	sub    esp,0x8
c001ba6b:	50                   	push   eax
c001ba6c:	68 f5 c9 02 c0       	push   0xc002c9f5
c001ba71:	e8 85 6e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ba76:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba79:	83 c4 10             	add    esp,0x10
c001ba7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba89:	31 d2                	xor    edx,edx
c001ba8b:	31 c0                	xor    eax,eax
c001ba8d:	83 c4 08             	add    esp,0x8
c001ba90:	5b                   	pop    ebx
c001ba91:	c3                   	ret    
c001ba92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba97:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba9c:	83 c4 08             	add    esp,0x8
c001ba9f:	5b                   	pop    ebx
c001baa0:	c3                   	ret    

c001baa1 <sysCallSize(regs*)>:
c001baa1:	53                   	push   ebx
c001baa2:	83 ec 18             	sub    esp,0x18
c001baa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baac:	83 f8 02             	cmp    eax,0x2
c001baaf:	76 64                	jbe    c001bb15 <sysCallSize(regs*)+0x74>
c001bab1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab6:	77 33                	ja     c001baeb <sysCallSize(regs*)+0x4a>
c001bab8:	83 ec 0c             	sub    esp,0xc
c001babb:	50                   	push   eax
c001babc:	e8 de 58 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001bac1:	83 c4 0c             	add    esp,0xc
c001bac4:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bac8:	52                   	push   edx
c001bac9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bacc:	50                   	push   eax
c001bacd:	e8 98 76 ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c001bad2:	83 c4 10             	add    esp,0x10
c001bad5:	85 c0                	test   eax,eax
c001bad7:	0f 95 c0             	setne  al
c001bada:	31 d2                	xor    edx,edx
c001badc:	0f b6 c0             	movzx  eax,al
c001badf:	f7 d8                	neg    eax
c001bae1:	83 d2 00             	adc    edx,0x0
c001bae4:	83 c4 18             	add    esp,0x18
c001bae7:	f7 da                	neg    edx
c001bae9:	5b                   	pop    ebx
c001baea:	c3                   	ret    
c001baeb:	83 ec 08             	sub    esp,0x8
c001baee:	50                   	push   eax
c001baef:	68 0f ca 02 c0       	push   0xc002ca0f
c001baf4:	e8 02 6e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001baf9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb0c:	31 d2                	xor    edx,edx
c001bb0e:	31 c0                	xor    eax,eax
c001bb10:	83 c4 18             	add    esp,0x18
c001bb13:	5b                   	pop    ebx
c001bb14:	c3                   	ret    
c001bb15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb1f:	83 c4 18             	add    esp,0x18
c001bb22:	5b                   	pop    ebx
c001bb23:	c3                   	ret    

c001bb24 <sysCallSizeFromFilename(regs*)>:
c001bb24:	57                   	push   edi
c001bb25:	56                   	push   esi
c001bb26:	53                   	push   ebx
c001bb27:	83 ec 20             	sub    esp,0x20
c001bb2a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb2e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb31:	83 fb 02             	cmp    ebx,0x2
c001bb34:	0f 86 99 00 00 00    	jbe    c001bbd3 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb3a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb40:	77 65                	ja     c001bba7 <sysCallSizeFromFilename(regs*)+0x83>
c001bb42:	83 ec 0c             	sub    esp,0xc
c001bb45:	68 14 01 00 00       	push   0x114
c001bb4a:	e8 b3 3d ff ff       	call   c000f902 <malloc>
c001bb4f:	83 c4 0c             	add    esp,0xc
c001bb52:	89 c6                	mov    esi,eax
c001bb54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb59:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5c:	53                   	push   ebx
c001bb5d:	56                   	push   esi
c001bb5e:	e8 f7 72 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001bb63:	83 c4 0c             	add    esp,0xc
c001bb66:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb6a:	50                   	push   eax
c001bb6b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb6e:	56                   	push   esi
c001bb6f:	e8 f6 75 ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	85 f6                	test   esi,esi
c001bb79:	74 14                	je     c001bb8f <sysCallSizeFromFilename(regs*)+0x6b>
c001bb7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7f:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb81:	83 ec 0c             	sub    esp,0xc
c001bb84:	56                   	push   esi
c001bb85:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb88:	83 c4 10             	add    esp,0x10
c001bb8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8f:	85 c0                	test   eax,eax
c001bb91:	0f 95 c0             	setne  al
c001bb94:	31 d2                	xor    edx,edx
c001bb96:	0f b6 c0             	movzx  eax,al
c001bb99:	f7 d8                	neg    eax
c001bb9b:	83 d2 00             	adc    edx,0x0
c001bb9e:	83 c4 20             	add    esp,0x20
c001bba1:	f7 da                	neg    edx
c001bba3:	5b                   	pop    ebx
c001bba4:	5e                   	pop    esi
c001bba5:	5f                   	pop    edi
c001bba6:	c3                   	ret    
c001bba7:	83 ec 08             	sub    esp,0x8
c001bbaa:	53                   	push   ebx
c001bbab:	68 0f ca 02 c0       	push   0xc002ca0f
c001bbb0:	e8 46 6d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001bbb5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbb8:	83 c4 10             	add    esp,0x10
c001bbbb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	83 c4 20             	add    esp,0x20
c001bbcd:	31 c0                	xor    eax,eax
c001bbcf:	5b                   	pop    ebx
c001bbd0:	5e                   	pop    esi
c001bbd1:	5f                   	pop    edi
c001bbd2:	c3                   	ret    
c001bbd3:	83 c4 20             	add    esp,0x20
c001bbd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbdb:	5b                   	pop    ebx
c001bbdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe1:	5e                   	pop    esi
c001bbe2:	5f                   	pop    edi
c001bbe3:	c3                   	ret    

c001bbe4 <sysCallClose(regs*)>:
c001bbe4:	53                   	push   ebx
c001bbe5:	83 ec 08             	sub    esp,0x8
c001bbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbef:	83 f8 02             	cmp    eax,0x2
c001bbf2:	76 50                	jbe    c001bc44 <sysCallClose(regs*)+0x60>
c001bbf4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbf9:	74 58                	je     c001bc53 <sysCallClose(regs*)+0x6f>
c001bbfb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc00:	74 60                	je     c001bc62 <sysCallClose(regs*)+0x7e>
c001bc02:	77 2f                	ja     c001bc33 <sysCallClose(regs*)+0x4f>
c001bc04:	83 ec 0c             	sub    esp,0xc
c001bc07:	50                   	push   eax
c001bc08:	e8 92 57 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001bc0d:	89 c3                	mov    ebx,eax
c001bc0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc12:	e8 05 73 ff ff       	call   c0012f1c <File::close()>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	85 db                	test   ebx,ebx
c001bc1c:	74 0c                	je     c001bc2a <sysCallClose(regs*)+0x46>
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc23:	53                   	push   ebx
c001bc24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	31 c0                	xor    eax,eax
c001bc2c:	31 d2                	xor    edx,edx
c001bc2e:	83 c4 08             	add    esp,0x8
c001bc31:	5b                   	pop    ebx
c001bc32:	c3                   	ret    
c001bc33:	83 ec 08             	sub    esp,0x8
c001bc36:	50                   	push   eax
c001bc37:	68 18 cb 02 c0       	push   0xc002cb18
c001bc3c:	e8 ba 6c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001bc41:	83 c4 10             	add    esp,0x10
c001bc44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc49:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc4e:	83 c4 08             	add    esp,0x8
c001bc51:	5b                   	pop    ebx
c001bc52:	c3                   	ret    
c001bc53:	83 ec 0c             	sub    esp,0xc
c001bc56:	68 2a ca 02 c0       	push   0xc002ca2a
c001bc5b:	e8 9b 6c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001bc60:	eb c5                	jmp    c001bc27 <sysCallClose(regs*)+0x43>
c001bc62:	83 ec 0c             	sub    esp,0xc
c001bc65:	68 38 ca 02 c0       	push   0xc002ca38
c001bc6a:	eb ef                	jmp    c001bc5b <sysCallClose(regs*)+0x77>

c001bc6c <sysCallOpenDir(regs*)>:
c001bc6c:	56                   	push   esi
c001bc6d:	53                   	push   ebx
c001bc6e:	53                   	push   ebx
c001bc6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc73:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc76:	85 f6                	test   esi,esi
c001bc78:	74 59                	je     c001bcd3 <sysCallOpenDir(regs*)+0x67>
c001bc7a:	83 ec 0c             	sub    esp,0xc
c001bc7d:	68 14 01 00 00       	push   0x114
c001bc82:	e8 7b 3c ff ff       	call   c000f902 <malloc>
c001bc87:	83 c4 0c             	add    esp,0xc
c001bc8a:	89 c6                	mov    esi,eax
c001bc8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc91:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc94:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc97:	56                   	push   esi
c001bc98:	e8 69 76 ff ff       	call   c0013306 <Directory::Directory(char const*, Process*)>
c001bc9d:	83 c4 10             	add    esp,0x10
c001bca0:	85 f6                	test   esi,esi
c001bca2:	74 2f                	je     c001bcd3 <sysCallOpenDir(regs*)+0x67>
c001bca4:	83 ec 0c             	sub    esp,0xc
c001bca7:	56                   	push   esi
c001bca8:	e8 bd 76 ff ff       	call   c001336a <Directory::open()>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	85 c0                	test   eax,eax
c001bcb2:	75 1f                	jne    c001bcd3 <sysCallOpenDir(regs*)+0x67>
c001bcb4:	83 ec 0c             	sub    esp,0xc
c001bcb7:	56                   	push   esi
c001bcb8:	e8 ed 53 ff ff       	call   c00110aa <UnixFile::getFileDescriptor()>
c001bcbd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	89 02                	mov    DWORD PTR [edx],eax
c001bcc5:	c1 f8 1f             	sar    eax,0x1f
c001bcc8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bccb:	31 c0                	xor    eax,eax
c001bccd:	59                   	pop    ecx
c001bcce:	31 d2                	xor    edx,edx
c001bcd0:	5b                   	pop    ebx
c001bcd1:	5e                   	pop    esi
c001bcd2:	c3                   	ret    
c001bcd3:	59                   	pop    ecx
c001bcd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcde:	5b                   	pop    ebx
c001bcdf:	5e                   	pop    esi
c001bce0:	c3                   	ret    

c001bce1 <sysCallCloseDir(regs*)>:
c001bce1:	53                   	push   ebx
c001bce2:	83 ec 08             	sub    esp,0x8
c001bce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcec:	83 f8 02             	cmp    eax,0x2
c001bcef:	76 47                	jbe    c001bd38 <sysCallCloseDir(regs*)+0x57>
c001bcf1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf6:	77 2f                	ja     c001bd27 <sysCallCloseDir(regs*)+0x46>
c001bcf8:	83 ec 0c             	sub    esp,0xc
c001bcfb:	50                   	push   eax
c001bcfc:	e8 9e 56 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001bd01:	89 c3                	mov    ebx,eax
c001bd03:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd06:	e8 bb 76 ff ff       	call   c00133c6 <Directory::close()>
c001bd0b:	83 c4 10             	add    esp,0x10
c001bd0e:	85 db                	test   ebx,ebx
c001bd10:	74 0c                	je     c001bd1e <sysCallCloseDir(regs*)+0x3d>
c001bd12:	83 ec 0c             	sub    esp,0xc
c001bd15:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd17:	53                   	push   ebx
c001bd18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	31 c0                	xor    eax,eax
c001bd20:	31 d2                	xor    edx,edx
c001bd22:	83 c4 08             	add    esp,0x8
c001bd25:	5b                   	pop    ebx
c001bd26:	c3                   	ret    
c001bd27:	83 ec 08             	sub    esp,0x8
c001bd2a:	50                   	push   eax
c001bd2b:	68 40 cb 02 c0       	push   0xc002cb40
c001bd30:	e8 c6 6b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd42:	83 c4 08             	add    esp,0x8
c001bd45:	5b                   	pop    ebx
c001bd46:	c3                   	ret    

c001bd47 <sysCallMakeDir(regs*)>:
c001bd47:	56                   	push   esi
c001bd48:	53                   	push   ebx
c001bd49:	83 ec 10             	sub    esp,0x10
c001bd4c:	68 14 01 00 00       	push   0x114
c001bd51:	e8 ac 3b ff ff       	call   c000f902 <malloc>
c001bd56:	83 c4 0c             	add    esp,0xc
c001bd59:	89 c3                	mov    ebx,eax
c001bd5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd60:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd67:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd6a:	53                   	push   ebx
c001bd6b:	e8 96 75 ff ff       	call   c0013306 <Directory::Directory(char const*, Process*)>
c001bd70:	83 c4 10             	add    esp,0x10
c001bd73:	85 db                	test   ebx,ebx
c001bd75:	74 32                	je     c001bda9 <sysCallMakeDir(regs*)+0x62>
c001bd77:	83 ec 0c             	sub    esp,0xc
c001bd7a:	53                   	push   ebx
c001bd7b:	e8 ca 77 ff ff       	call   c001354a <Directory::create()>
c001bd80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd83:	89 c6                	mov    esi,eax
c001bd85:	e8 3c 76 ff ff       	call   c00133c6 <Directory::close()>
c001bd8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	59                   	pop    ecx
c001bd98:	85 f6                	test   esi,esi
c001bd9a:	5b                   	pop    ebx
c001bd9b:	0f 95 c0             	setne  al
c001bd9e:	5e                   	pop    esi
c001bd9f:	31 d2                	xor    edx,edx
c001bda1:	f7 d8                	neg    eax
c001bda3:	83 d2 00             	adc    edx,0x0
c001bda6:	f7 da                	neg    edx
c001bda8:	c3                   	ret    
c001bda9:	59                   	pop    ecx
c001bdaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb4:	5b                   	pop    ebx
c001bdb5:	5e                   	pop    esi
c001bdb6:	c3                   	ret    

c001bdb7 <sysCallWait(regs*)>:
c001bdb7:	83 ec 10             	sub    esp,0x10
c001bdba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdbe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdc1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdc4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdc7:	e8 c8 25 00 00       	call   c001e394 <waitTask(int, int*, int)>
c001bdcc:	83 c4 1c             	add    esp,0x1c
c001bdcf:	99                   	cdq    
c001bdd0:	c3                   	ret    

c001bdd1 <sysCallNotImpl(regs*)>:
c001bdd1:	83 ec 18             	sub    esp,0x18
c001bdd4:	68 46 ca 02 c0       	push   0xc002ca46
c001bdd9:	e8 d1 e5 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001bdde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bde8:	83 c4 1c             	add    esp,0x1c
c001bdeb:	c3                   	ret    

c001bdec <sysPanic(regs*)>:
c001bdec:	83 ec 18             	sub    esp,0x18
c001bdef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdf3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdf6:	e8 b4 e5 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001bdfb:	c7 04 24 60 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca60
c001be02:	e8 a8 e5 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001be07:	b8 01 00 00 00       	mov    eax,0x1
c001be0c:	31 d2                	xor    edx,edx
c001be0e:	83 c4 1c             	add    esp,0x1c
c001be11:	c3                   	ret    

c001be12 <sysCallRmdir(regs*)>:
c001be12:	56                   	push   esi
c001be13:	53                   	push   ebx
c001be14:	83 ec 20             	sub    esp,0x20
c001be17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be1b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be1e:	68 14 01 00 00       	push   0x114
c001be23:	e8 da 3a ff ff       	call   c000f902 <malloc>
c001be28:	83 c4 0c             	add    esp,0xc
c001be2b:	89 c3                	mov    ebx,eax
c001be2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be35:	56                   	push   esi
c001be36:	53                   	push   ebx
c001be37:	e8 1e 70 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001be3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be3f:	e8 f2 71 ff ff       	call   c0013036 <File::unlink()>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	85 db                	test   ebx,ebx
c001be49:	74 14                	je     c001be5f <sysCallRmdir(regs*)+0x4d>
c001be4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be51:	83 ec 0c             	sub    esp,0xc
c001be54:	53                   	push   ebx
c001be55:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be5f:	85 c0                	test   eax,eax
c001be61:	0f 95 c0             	setne  al
c001be64:	31 d2                	xor    edx,edx
c001be66:	0f b6 c0             	movzx  eax,al
c001be69:	f7 d8                	neg    eax
c001be6b:	83 d2 00             	adc    edx,0x0
c001be6e:	83 c4 14             	add    esp,0x14
c001be71:	f7 da                	neg    edx
c001be73:	5b                   	pop    ebx
c001be74:	5e                   	pop    esi
c001be75:	c3                   	ret    

c001be76 <sysCallUnlink(regs*)>:
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	83 ec 20             	sub    esp,0x20
c001be7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be7f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be82:	68 14 01 00 00       	push   0x114
c001be87:	e8 76 3a ff ff       	call   c000f902 <malloc>
c001be8c:	83 c4 0c             	add    esp,0xc
c001be8f:	89 c3                	mov    ebx,eax
c001be91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be96:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be99:	56                   	push   esi
c001be9a:	53                   	push   ebx
c001be9b:	e8 ba 6f ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001bea0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea3:	e8 8e 71 ff ff       	call   c0013036 <File::unlink()>
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	85 db                	test   ebx,ebx
c001bead:	74 14                	je     c001bec3 <sysCallUnlink(regs*)+0x4d>
c001beaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	53                   	push   ebx
c001beb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebc:	83 c4 10             	add    esp,0x10
c001bebf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec3:	85 c0                	test   eax,eax
c001bec5:	0f 95 c0             	setne  al
c001bec8:	31 d2                	xor    edx,edx
c001beca:	0f b6 c0             	movzx  eax,al
c001becd:	f7 d8                	neg    eax
c001becf:	83 d2 00             	adc    edx,0x0
c001bed2:	83 c4 14             	add    esp,0x14
c001bed5:	f7 da                	neg    edx
c001bed7:	5b                   	pop    ebx
c001bed8:	5e                   	pop    esi
c001bed9:	c3                   	ret    

c001beda <sysCallGetArgv(regs*)>:
c001beda:	83 ec 0c             	sub    esp,0xc
c001bedd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bee1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bee4:	85 c0                	test   eax,eax
c001bee6:	78 2b                	js     c001bf13 <sysCallGetArgv(regs*)+0x39>
c001bee8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beee:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bef1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bef7:	7d 1a                	jge    c001bf13 <sysCallGetArgv(regs*)+0x39>
c001bef9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf00:	85 c0                	test   eax,eax
c001bf02:	74 17                	je     c001bf1b <sysCallGetArgv(regs*)+0x41>
c001bf04:	83 ec 08             	sub    esp,0x8
c001bf07:	50                   	push   eax
c001bf08:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf0b:	e8 fc 48 fe ff       	call   c000080c <strcpy>
c001bf10:	83 c4 10             	add    esp,0x10
c001bf13:	31 c0                	xor    eax,eax
c001bf15:	31 d2                	xor    edx,edx
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	c3                   	ret    
c001bf1b:	b8 01 00 00 00       	mov    eax,0x1
c001bf20:	31 d2                	xor    edx,edx
c001bf22:	83 c4 0c             	add    esp,0xc
c001bf25:	c3                   	ret    

c001bf26 <sysCallTTYName(regs*)>:
c001bf26:	56                   	push   esi
c001bf27:	53                   	push   ebx
c001bf28:	53                   	push   ebx
c001bf29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf2d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf30:	85 c0                	test   eax,eax
c001bf32:	74 5f                	je     c001bf93 <sysCallTTYName(regs*)+0x6d>
c001bf34:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf37:	83 f8 02             	cmp    eax,0x2
c001bf3a:	77 3e                	ja     c001bf7a <sysCallTTYName(regs*)+0x54>
c001bf3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf44:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf4a:	85 db                	test   ebx,ebx
c001bf4c:	74 45                	je     c001bf93 <sysCallTTYName(regs*)+0x6d>
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf53:	53                   	push   ebx
c001bf54:	ff 10                	call   DWORD PTR [eax]
c001bf56:	83 c4 10             	add    esp,0x10
c001bf59:	84 c0                	test   al,al
c001bf5b:	74 41                	je     c001bf9e <sysCallTTYName(regs*)+0x78>
c001bf5d:	83 ec 08             	sub    esp,0x8
c001bf60:	81 c3 82 00 00 00    	add    ebx,0x82
c001bf66:	53                   	push   ebx
c001bf67:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf6a:	e8 9d 48 fe ff       	call   c000080c <strcpy>
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	31 c0                	xor    eax,eax
c001bf74:	59                   	pop    ecx
c001bf75:	31 d2                	xor    edx,edx
c001bf77:	5b                   	pop    ebx
c001bf78:	5e                   	pop    esi
c001bf79:	c3                   	ret    
c001bf7a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf7f:	74 bb                	je     c001bf3c <sysCallTTYName(regs*)+0x16>
c001bf81:	83 ec 0c             	sub    esp,0xc
c001bf84:	50                   	push   eax
c001bf85:	e8 15 54 ff ff       	call   c001139f <getFromFileDescriptor(int)>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	89 c3                	mov    ebx,eax
c001bf8f:	85 db                	test   ebx,ebx
c001bf91:	75 bb                	jne    c001bf4e <sysCallTTYName(regs*)+0x28>
c001bf93:	59                   	pop    ecx
c001bf94:	b8 01 00 00 00       	mov    eax,0x1
c001bf99:	31 d2                	xor    edx,edx
c001bf9b:	5b                   	pop    ebx
c001bf9c:	5e                   	pop    esi
c001bf9d:	c3                   	ret    
c001bf9e:	59                   	pop    ecx
c001bf9f:	b8 02 00 00 00       	mov    eax,0x2
c001bfa4:	31 d2                	xor    edx,edx
c001bfa6:	5b                   	pop    ebx
c001bfa7:	5e                   	pop    esi
c001bfa8:	c3                   	ret    

c001bfa9 <sysCallUSleep(regs*)>:
c001bfa9:	83 ec 14             	sub    esp,0x14
c001bfac:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfb5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfbc:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfbf:	01 ca                	add    edx,ecx
c001bfc1:	52                   	push   edx
c001bfc2:	50                   	push   eax
c001bfc3:	e8 a3 24 00 00       	call   c001e46b <nanoSleep(unsigned long long)>
c001bfc8:	31 c0                	xor    eax,eax
c001bfca:	31 d2                	xor    edx,edx
c001bfcc:	83 c4 1c             	add    esp,0x1c
c001bfcf:	c3                   	ret    

c001bfd0 <sysCallSpawn(regs*)>:
c001bfd0:	56                   	push   esi
c001bfd1:	53                   	push   ebx
c001bfd2:	50                   	push   eax
c001bfd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfd7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bfda:	85 c0                	test   eax,eax
c001bfdc:	75 08                	jne    c001bfe6 <sysCallSpawn(regs*)+0x16>
c001bfde:	59                   	pop    ecx
c001bfdf:	31 c0                	xor    eax,eax
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	5b                   	pop    ebx
c001bfe4:	5e                   	pop    esi
c001bfe5:	c3                   	ret    
c001bfe6:	83 ec 08             	sub    esp,0x8
c001bfe9:	50                   	push   eax
c001bfea:	68 6f ca 02 c0       	push   0xc002ca6f
c001bfef:	e8 07 69 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001bff4:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bffb:	e8 02 39 ff ff       	call   c000f902 <malloc>
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	89 c6                	mov    esi,eax
c001c005:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c008:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c00b:	85 c0                	test   eax,eax
c001c00d:	75 32                	jne    c001c041 <sysCallSpawn(regs*)+0x71>
c001c00f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c014:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c017:	52                   	push   edx
c001c018:	50                   	push   eax
c001c019:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c01c:	56                   	push   esi
c001c01d:	e8 26 1b 00 00       	call   c001db48 <Process::Process(char const*, Process*, char**)>
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c02c:	75 b0                	jne    c001bfde <sysCallSpawn(regs*)+0xe>
c001c02e:	83 ec 0c             	sub    esp,0xc
c001c031:	56                   	push   esi
c001c032:	e8 f3 1f 00 00       	call   c001e02a <Process::createUserThread()>
c001c037:	8b 06                	mov    eax,DWORD PTR [esi]
c001c039:	83 c4 10             	add    esp,0x10
c001c03c:	99                   	cdq    
c001c03d:	59                   	pop    ecx
c001c03e:	5b                   	pop    ebx
c001c03f:	5e                   	pop    esi
c001c040:	c3                   	ret    
c001c041:	31 c0                	xor    eax,eax
c001c043:	eb d2                	jmp    c001c017 <sysCallSpawn(regs*)+0x47>

c001c045 <sysCallGetEnv(regs*)>:
c001c045:	55                   	push   ebp
c001c046:	57                   	push   edi
c001c047:	56                   	push   esi
c001c048:	53                   	push   ebx
c001c049:	83 ec 28             	sub    esp,0x28
c001c04c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c050:	68 7d ca 02 c0       	push   0xc002ca7d
c001c055:	e8 a1 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c05a:	5f                   	pop    edi
c001c05b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c05e:	5d                   	pop    ebp
c001c05f:	53                   	push   ebx
c001c060:	68 aa cd 02 c0       	push   0xc002cdaa
c001c065:	e8 91 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c06a:	58                   	pop    eax
c001c06b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c06e:	5a                   	pop    edx
c001c06f:	57                   	push   edi
c001c070:	68 86 ca 02 c0       	push   0xc002ca86
c001c075:	e8 81 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c07a:	59                   	pop    ecx
c001c07b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c080:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c083:	e8 43 e2 ff ff       	call   c001a2cb <Krnl::getProcessTotalEnvCount(Process*)>
c001c088:	5a                   	pop    edx
c001c089:	89 c5                	mov    ebp,eax
c001c08b:	59                   	pop    ecx
c001c08c:	50                   	push   eax
c001c08d:	68 90 ca 02 c0       	push   0xc002ca90
c001c092:	e8 64 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c097:	83 c4 10             	add    esp,0x10
c001c09a:	39 ef                	cmp    edi,ebp
c001c09c:	7c 15                	jl     c001c0b3 <sysCallGetEnv(regs*)+0x6e>
c001c09e:	85 db                	test   ebx,ebx
c001c0a0:	75 0c                	jne    c001c0ae <sysCallGetEnv(regs*)+0x69>
c001c0a2:	83 c4 1c             	add    esp,0x1c
c001c0a5:	31 c0                	xor    eax,eax
c001c0a7:	5b                   	pop    ebx
c001c0a8:	31 d2                	xor    edx,edx
c001c0aa:	5e                   	pop    esi
c001c0ab:	5f                   	pop    edi
c001c0ac:	5d                   	pop    ebp
c001c0ad:	c3                   	ret    
c001c0ae:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0b1:	eb ef                	jmp    c001c0a2 <sysCallGetEnv(regs*)+0x5d>
c001c0b3:	83 ec 0c             	sub    esp,0xc
c001c0b6:	68 9c ca 02 c0       	push   0xc002ca9c
c001c0bb:	e8 3b 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c0c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0c4:	83 c4 0c             	add    esp,0xc
c001c0c7:	57                   	push   edi
c001c0c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0ce:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0d1:	50                   	push   eax
c001c0d2:	e8 14 e2 ff ff       	call   c001a2eb <Krnl::getProcessEnvPair(Process*, int)>
c001c0d7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0df:	68 5b ce 02 c0       	push   0xc002ce5b
c001c0e4:	e8 12 68 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c0e9:	83 c4 10             	add    esp,0x10
c001c0ec:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0ef:	85 f6                	test   esi,esi
c001c0f1:	75 47                	jne    c001c13a <sysCallGetEnv(regs*)+0xf5>
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	55                   	push   ebp
c001c0f7:	e8 70 46 fe ff       	call   c000076c <strlen>
c001c0fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0ff:	89 c3                	mov    ebx,eax
c001c101:	e8 66 46 fe ff       	call   c000076c <strlen>
c001c106:	5a                   	pop    edx
c001c107:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c10b:	59                   	pop    ecx
c001c10c:	50                   	push   eax
c001c10d:	68 9f ca 02 c0       	push   0xc002ca9f
c001c112:	e8 e4 67 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c117:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c11a:	e8 4d 46 fe ff       	call   c000076c <strlen>
c001c11f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c122:	89 c3                	mov    ebx,eax
c001c124:	e8 43 46 fe ff       	call   c000076c <strlen>
c001c129:	83 c4 10             	add    esp,0x10
c001c12c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c130:	83 c4 1c             	add    esp,0x1c
c001c133:	31 d2                	xor    edx,edx
c001c135:	5b                   	pop    ebx
c001c136:	5e                   	pop    esi
c001c137:	5f                   	pop    edi
c001c138:	5d                   	pop    ebp
c001c139:	c3                   	ret    
c001c13a:	83 ec 0c             	sub    esp,0xc
c001c13d:	68 75 ce 02 c0       	push   0xc002ce75
c001c142:	e8 b4 67 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c147:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c14a:	58                   	pop    eax
c001c14b:	5a                   	pop    edx
c001c14c:	55                   	push   ebp
c001c14d:	53                   	push   ebx
c001c14e:	e8 b9 46 fe ff       	call   c000080c <strcpy>
c001c153:	59                   	pop    ecx
c001c154:	5e                   	pop    esi
c001c155:	68 a9 ca 02 c0       	push   0xc002caa9
c001c15a:	53                   	push   ebx
c001c15b:	e8 ec 47 fe ff       	call   c000094c <strcat>
c001c160:	5d                   	pop    ebp
c001c161:	58                   	pop    eax
c001c162:	57                   	push   edi
c001c163:	53                   	push   ebx
c001c164:	e8 e3 47 fe ff       	call   c000094c <strcat>
c001c169:	c7 04 24 8f ce 02 c0 	mov    DWORD PTR [esp],0xc002ce8f
c001c170:	e8 86 67 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	e9 25 ff ff ff       	jmp    c001c0a2 <sysCallGetEnv(regs*)+0x5d>

c001c17d <sysAppSettings(regs*)>:
c001c17d:	57                   	push   edi
c001c17e:	56                   	push   esi
c001c17f:	56                   	push   esi
c001c180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c184:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c187:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c18d:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c192:	66 3d c0 09          	cmp    ax,0x9c0
c001c196:	75 2e                	jne    c001c1c6 <sysAppSettings(regs*)+0x49>
c001c198:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c19e:	83 e0 1f             	and    eax,0x1f
c001c1a1:	3c 01                	cmp    al,0x1
c001c1a3:	74 2c                	je     c001c1d1 <sysAppSettings(regs*)+0x54>
c001c1a5:	3c 07                	cmp    al,0x7
c001c1a7:	0f 84 b3 00 00 00    	je     c001c260 <sysAppSettings(regs*)+0xe3>
c001c1ad:	84 c0                	test   al,al
c001c1af:	0f 84 d2 00 00 00    	je     c001c287 <sysAppSettings(regs*)+0x10a>
c001c1b5:	3c 08                	cmp    al,0x8
c001c1b7:	74 63                	je     c001c21c <sysAppSettings(regs*)+0x9f>
c001c1b9:	59                   	pop    ecx
c001c1ba:	0f b6 c0             	movzx  eax,al
c001c1bd:	5e                   	pop    esi
c001c1be:	05 e8 03 00 00       	add    eax,0x3e8
c001c1c3:	5f                   	pop    edi
c001c1c4:	99                   	cdq    
c001c1c5:	c3                   	ret    
c001c1c6:	b8 01 00 00 00       	mov    eax,0x1
c001c1cb:	59                   	pop    ecx
c001c1cc:	31 d2                	xor    edx,edx
c001c1ce:	5e                   	pop    esi
c001c1cf:	5f                   	pop    edi
c001c1d0:	c3                   	ret    
c001c1d1:	50                   	push   eax
c001c1d2:	68 00 01 00 00       	push   0x100
c001c1d7:	6a 00                	push   0x0
c001c1d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e1:	83 c0 0c             	add    eax,0xc
c001c1e4:	50                   	push   eax
c001c1e5:	e8 66 45 fe ff       	call   c0000750 <memset>
c001c1ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ef:	b9 ff 00 00 00       	mov    ecx,0xff
c001c1f4:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c1f7:	83 c7 0c             	add    edi,0xc
c001c1fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c201:	5a                   	pop    edx
c001c202:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c205:	59                   	pop    ecx
c001c206:	8d 50 0c             	lea    edx,[eax+0xc]
c001c209:	52                   	push   edx
c001c20a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c210:	e8 9f 42 ff ff       	call   c00104b4 <VgaText::setTitle(char*)>
c001c215:	83 c4 10             	add    esp,0x10
c001c218:	31 c0                	xor    eax,eax
c001c21a:	eb af                	jmp    c001c1cb <sysAppSettings(regs*)+0x4e>
c001c21c:	83 ec 08             	sub    esp,0x8
c001c21f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c225:	83 e0 0f             	and    eax,0xf
c001c228:	50                   	push   eax
c001c229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c237:	e8 68 42 ff ff       	call   c00104a4 <VgaText::setTitleColour(VgaColour)>
c001c23c:	5f                   	pop    edi
c001c23d:	58                   	pop    eax
c001c23e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c244:	c1 e8 04             	shr    eax,0x4
c001c247:	83 e0 0f             	and    eax,0xf
c001c24a:	50                   	push   eax
c001c24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c250:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c259:	e8 36 42 ff ff       	call   c0010494 <VgaText::setTitleTextColour(VgaColour)>
c001c25e:	eb b5                	jmp    c001c215 <sysAppSettings(regs*)+0x98>
c001c260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c265:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c268:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c26e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c274:	c0 e8 06             	shr    al,0x6
c001c277:	83 e0 01             	and    eax,0x1
c001c27a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c280:	31 c0                	xor    eax,eax
c001c282:	e9 44 ff ff ff       	jmp    c001c1cb <sysAppSettings(regs*)+0x4e>
c001c287:	b8 02 00 00 00       	mov    eax,0x2
c001c28c:	e9 3a ff ff ff       	jmp    c001c1cb <sysAppSettings(regs*)+0x4e>

c001c291 <sysSetFatAttrib(regs*)>:
c001c291:	57                   	push   edi
c001c292:	56                   	push   esi
c001c293:	53                   	push   ebx
c001c294:	83 ec 1c             	sub    esp,0x1c
c001c297:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c29b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c29e:	68 14 01 00 00       	push   0x114
c001c2a3:	e8 5a 36 ff ff       	call   c000f902 <malloc>
c001c2a8:	83 c4 0c             	add    esp,0xc
c001c2ab:	89 c3                	mov    ebx,eax
c001c2ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2b5:	57                   	push   edi
c001c2b6:	53                   	push   ebx
c001c2b7:	e8 9e 6b ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001c2bc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2bf:	83 c4 0c             	add    esp,0xc
c001c2c2:	0f b6 d4             	movzx  edx,ah
c001c2c5:	0f b6 c0             	movzx  eax,al
c001c2c8:	52                   	push   edx
c001c2c9:	50                   	push   eax
c001c2ca:	53                   	push   ebx
c001c2cb:	e8 00 6e ff ff       	call   c00130d0 <File::chfatattr(unsigned char, unsigned char)>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	85 db                	test   ebx,ebx
c001c2d5:	74 14                	je     c001c2eb <sysSetFatAttrib(regs*)+0x5a>
c001c2d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2db:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2dd:	83 ec 0c             	sub    esp,0xc
c001c2e0:	53                   	push   ebx
c001c2e1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2e4:	83 c4 10             	add    esp,0x10
c001c2e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2eb:	85 c0                	test   eax,eax
c001c2ed:	0f 95 c0             	setne  al
c001c2f0:	31 d2                	xor    edx,edx
c001c2f2:	0f b6 c0             	movzx  eax,al
c001c2f5:	f7 d8                	neg    eax
c001c2f7:	83 d2 00             	adc    edx,0x0
c001c2fa:	83 c4 10             	add    esp,0x10
c001c2fd:	f7 da                	neg    edx
c001c2ff:	5b                   	pop    ebx
c001c300:	5e                   	pop    esi
c001c301:	5f                   	pop    edi
c001c302:	c3                   	ret    

c001c303 <sysPipe(regs*)>:
c001c303:	57                   	push   edi
c001c304:	56                   	push   esi
c001c305:	53                   	push   ebx
c001c306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c310:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c313:	6a 20                	push   0x20
c001c315:	e8 e8 35 ff ff       	call   c000f902 <malloc>
c001c31a:	89 c3                	mov    ebx,eax
c001c31c:	58                   	pop    eax
c001c31d:	5a                   	pop    edx
c001c31e:	68 00 50 00 00       	push   0x5000
c001c323:	53                   	push   ebx
c001c324:	e8 03 3f ff ff       	call   c001022c <Pipe::Pipe(int)>
c001c329:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c32c:	e8 79 4d ff ff       	call   c00110aa <UnixFile::getFileDescriptor()>
c001c331:	89 07                	mov    DWORD PTR [edi],eax
c001c333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c336:	e8 6f 4d ff ff       	call   c00110aa <UnixFile::getFileDescriptor()>
c001c33b:	83 c4 10             	add    esp,0x10
c001c33e:	89 06                	mov    DWORD PTR [esi],eax
c001c340:	31 d2                	xor    edx,edx
c001c342:	5b                   	pop    ebx
c001c343:	31 c0                	xor    eax,eax
c001c345:	5e                   	pop    esi
c001c346:	5f                   	pop    edi
c001c347:	c3                   	ret    

c001c348 <sysGetUnixTime(regs*)>:
c001c348:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001c34d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c357:	e9 f0 74 ff ff       	jmp    c001384c <Clock::timeInSecondsLocal()>

c001c35c <string_ends_with(char const*, char const*)>:
c001c35c:	57                   	push   edi
c001c35d:	56                   	push   esi
c001c35e:	53                   	push   ebx
c001c35f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c363:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c367:	83 ec 0c             	sub    esp,0xc
c001c36a:	53                   	push   ebx
c001c36b:	e8 fc 43 fe ff       	call   c000076c <strlen>
c001c370:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c373:	89 c6                	mov    esi,eax
c001c375:	e8 f2 43 fe ff       	call   c000076c <strlen>
c001c37a:	83 c4 10             	add    esp,0x10
c001c37d:	39 c6                	cmp    esi,eax
c001c37f:	7d 06                	jge    c001c387 <string_ends_with(char const*, char const*)+0x2b>
c001c381:	5b                   	pop    ebx
c001c382:	31 c0                	xor    eax,eax
c001c384:	5e                   	pop    esi
c001c385:	5f                   	pop    edi
c001c386:	c3                   	ret    
c001c387:	83 ec 08             	sub    esp,0x8
c001c38a:	29 c6                	sub    esi,eax
c001c38c:	57                   	push   edi
c001c38d:	01 f3                	add    ebx,esi
c001c38f:	53                   	push   ebx
c001c390:	e8 03 45 fe ff       	call   c0000898 <strcmp>
c001c395:	83 c4 10             	add    esp,0x10
c001c398:	85 c0                	test   eax,eax
c001c39a:	5b                   	pop    ebx
c001c39b:	0f 94 c0             	sete   al
c001c39e:	5e                   	pop    esi
c001c39f:	0f b6 c0             	movzx  eax,al
c001c3a2:	5f                   	pop    edi
c001c3a3:	c3                   	ret    

c001c3a4 <sysCallOpen(regs*)>:
c001c3a4:	56                   	push   esi
c001c3a5:	53                   	push   ebx
c001c3a6:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3ac:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3b3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3b6:	85 c9                	test   ecx,ecx
c001c3b8:	0f 84 b3 00 00 00    	je     c001c471 <sysCallOpen(regs*)+0xcd>
c001c3be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3c1:	85 c0                	test   eax,eax
c001c3c3:	0f 84 a8 00 00 00    	je     c001c471 <sysCallOpen(regs*)+0xcd>
c001c3c9:	52                   	push   edx
c001c3ca:	68 ab ca 02 c0       	push   0xc002caab
c001c3cf:	50                   	push   eax
c001c3d0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3d4:	56                   	push   esi
c001c3d5:	e8 d6 68 ff ff       	call   c0012cb0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3da:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3dd:	e8 8a 43 fe ff       	call   c000076c <strlen>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	48                   	dec    eax
c001c3e6:	74 1d                	je     c001c405 <sysCallOpen(regs*)+0x61>
c001c3e8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3eb:	eb 0f                	jmp    c001c3fc <sysCallOpen(regs*)+0x58>
c001c3ed:	80 fa 3a             	cmp    dl,0x3a
c001c3f0:	74 0f                	je     c001c401 <sysCallOpen(regs*)+0x5d>
c001c3f2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3f6:	48                   	dec    eax
c001c3f7:	74 0c                	je     c001c405 <sysCallOpen(regs*)+0x61>
c001c3f9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3fc:	80 fa 2e             	cmp    dl,0x2e
c001c3ff:	75 ec                	jne    c001c3ed <sysCallOpen(regs*)+0x49>
c001c401:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c405:	83 ec 08             	sub    esp,0x8
c001c408:	68 af ca 02 c0       	push   0xc002caaf
c001c40d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c410:	e8 47 ff ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c415:	83 c4 10             	add    esp,0x10
c001c418:	85 c0                	test   eax,eax
c001c41a:	75 17                	jne    c001c433 <sysCallOpen(regs*)+0x8f>
c001c41c:	83 ec 08             	sub    esp,0x8
c001c41f:	68 d0 ca 02 c0       	push   0xc002cad0
c001c424:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c427:	e8 30 ff ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	85 c0                	test   eax,eax
c001c431:	74 51                	je     c001c484 <sysCallOpen(regs*)+0xe0>
c001c433:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c436:	83 ec 08             	sub    esp,0x8
c001c439:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c43f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c446:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c449:	ff 30                	push   DWORD PTR [eax]
c001c44b:	68 b4 ca 02 c0       	push   0xc002cab4
c001c450:	e8 a6 64 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c455:	c7 04 24 c3 ca 02 c0 	mov    DWORD PTR [esp],0xc002cac3
c001c45c:	e8 9a 64 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	81 c4 04 01 00 00    	add    esp,0x104
c001c46a:	31 c0                	xor    eax,eax
c001c46c:	31 d2                	xor    edx,edx
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	c3                   	ret    
c001c471:	81 c4 04 01 00 00    	add    esp,0x104
c001c477:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c47c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c481:	5b                   	pop    ebx
c001c482:	5e                   	pop    esi
c001c483:	c3                   	ret    
c001c484:	83 ec 08             	sub    esp,0x8
c001c487:	68 b0 ca 02 c0       	push   0xc002cab0
c001c48c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c48f:	e8 04 44 fe ff       	call   c0000898 <strcmp>
c001c494:	83 c4 10             	add    esp,0x10
c001c497:	85 c0                	test   eax,eax
c001c499:	74 98                	je     c001c433 <sysCallOpen(regs*)+0x8f>
c001c49b:	83 ec 08             	sub    esp,0x8
c001c49e:	68 af ca 02 c0       	push   0xc002caaf
c001c4a3:	56                   	push   esi
c001c4a4:	e8 b3 fe ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c4a9:	83 c4 10             	add    esp,0x10
c001c4ac:	85 c0                	test   eax,eax
c001c4ae:	75 83                	jne    c001c433 <sysCallOpen(regs*)+0x8f>
c001c4b0:	83 ec 08             	sub    esp,0x8
c001c4b3:	68 d5 ca 02 c0       	push   0xc002cad5
c001c4b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4bb:	e8 9c fe ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	0f 85 d9 00 00 00    	jne    c001c5a4 <sysCallOpen(regs*)+0x200>
c001c4cb:	83 ec 08             	sub    esp,0x8
c001c4ce:	68 da ca 02 c0       	push   0xc002cada
c001c4d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4d6:	e8 81 fe ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	85 c0                	test   eax,eax
c001c4e0:	0f 85 be 00 00 00    	jne    c001c5a4 <sysCallOpen(regs*)+0x200>
c001c4e6:	83 ec 08             	sub    esp,0x8
c001c4e9:	68 d6 ca 02 c0       	push   0xc002cad6
c001c4ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f1:	e8 a2 43 fe ff       	call   c0000898 <strcmp>
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	85 c0                	test   eax,eax
c001c4fb:	0f 84 a3 00 00 00    	je     c001c5a4 <sysCallOpen(regs*)+0x200>
c001c501:	83 ec 08             	sub    esp,0x8
c001c504:	68 d5 ca 02 c0       	push   0xc002cad5
c001c509:	56                   	push   esi
c001c50a:	e8 4d fe ff ff       	call   c001c35c <string_ends_with(char const*, char const*)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	85 c0                	test   eax,eax
c001c514:	0f 85 8a 00 00 00    	jne    c001c5a4 <sysCallOpen(regs*)+0x200>
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	68 14 01 00 00       	push   0x114
c001c522:	e8 db 33 ff ff       	call   c000f902 <malloc>
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	89 c6                	mov    esi,eax
c001c52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c531:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c534:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c537:	56                   	push   esi
c001c538:	e8 1d 69 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001c53d:	83 c4 10             	add    esp,0x10
c001c540:	85 f6                	test   esi,esi
c001c542:	0f 84 29 ff ff ff    	je     c001c471 <sysCallOpen(regs*)+0xcd>
c001c548:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c54b:	0f b6 c2             	movzx  eax,dl
c001c54e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c551:	89 d0                	mov    eax,edx
c001c553:	83 e0 01             	and    eax,0x1
c001c556:	f6 c2 02             	test   dl,0x2
c001c559:	74 03                	je     c001c55e <sysCallOpen(regs*)+0x1ba>
c001c55b:	83 c8 02             	or     eax,0x2
c001c55e:	f6 c2 04             	test   dl,0x4
c001c561:	74 03                	je     c001c566 <sysCallOpen(regs*)+0x1c2>
c001c563:	83 c8 04             	or     eax,0x4
c001c566:	f6 c2 08             	test   dl,0x8
c001c569:	74 03                	je     c001c56e <sysCallOpen(regs*)+0x1ca>
c001c56b:	83 c8 0a             	or     eax,0xa
c001c56e:	83 e2 10             	and    edx,0x10
c001c571:	74 03                	je     c001c576 <sysCallOpen(regs*)+0x1d2>
c001c573:	83 c8 12             	or     eax,0x12
c001c576:	83 ec 08             	sub    esp,0x8
c001c579:	50                   	push   eax
c001c57a:	56                   	push   esi
c001c57b:	e8 3e 69 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001c580:	83 c4 10             	add    esp,0x10
c001c583:	85 c0                	test   eax,eax
c001c585:	0f 85 e6 fe ff ff    	jne    c001c471 <sysCallOpen(regs*)+0xcd>
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	56                   	push   esi
c001c58f:	e8 16 4b ff ff       	call   c00110aa <UnixFile::getFileDescriptor()>
c001c594:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c597:	89 02                	mov    DWORD PTR [edx],eax
c001c599:	c1 f8 1f             	sar    eax,0x1f
c001c59c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c59f:	e9 bd fe ff ff       	jmp    c001c461 <sysCallOpen(regs*)+0xbd>
c001c5a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5a7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5b4:	e9 ab fe ff ff       	jmp    c001c464 <sysCallOpen(regs*)+0xc0>

c001c5b9 <Sys::loadSyscalls()>:
c001c5b9:	c7 05 a0 1d 03 c0 a9 b6 01 c0 	mov    DWORD PTR ds:0xc0031da0,0xc001b6a9
c001c5c3:	c7 05 a4 1d 03 c0 0e b2 01 c0 	mov    DWORD PTR ds:0xc0031da4,0xc001b20e
c001c5cd:	c7 05 a8 1d 03 c0 fc b3 01 c0 	mov    DWORD PTR ds:0xc0031da8,0xc001b3fc
c001c5d7:	c7 05 ac 1d 03 c0 df b5 01 c0 	mov    DWORD PTR ds:0xc0031dac,0xc001b5df
c001c5e1:	c7 05 b0 1d 03 c0 94 b3 01 c0 	mov    DWORD PTR ds:0xc0031db0,0xc001b394
c001c5eb:	c7 05 b4 1d 03 c0 45 b2 01 c0 	mov    DWORD PTR ds:0xc0031db4,0xc001b245
c001c5f5:	c7 05 b8 1d 03 c0 26 b2 01 c0 	mov    DWORD PTR ds:0xc0031db8,0xc001b226
c001c5ff:	c7 05 bc 1d 03 c0 51 b4 01 c0 	mov    DWORD PTR ds:0xc0031dbc,0xc001b451
c001c609:	c7 05 c4 1d 03 c0 e4 bb 01 c0 	mov    DWORD PTR ds:0xc0031dc4,0xc001bbe4
c001c613:	c7 05 c0 1d 03 c0 a4 c3 01 c0 	mov    DWORD PTR ds:0xc0031dc0,0xc001c3a4
c001c61d:	c7 05 c8 1d 03 c0 6c bc 01 c0 	mov    DWORD PTR ds:0xc0031dc8,0xc001bc6c
c001c627:	c7 05 cc 1d 03 c0 d3 b8 01 c0 	mov    DWORD PTR ds:0xc0031dcc,0xc001b8d3
c001c631:	c7 05 d0 1d 03 c0 ef b6 01 c0 	mov    DWORD PTR ds:0xc0031dd0,0xc001b6ef
c001c63b:	c7 05 d4 1d 03 c0 f4 b6 01 c0 	mov    DWORD PTR ds:0xc0031dd4,0xc001b6f4
c001c645:	c7 05 d8 1d 03 c0 47 bd 01 c0 	mov    DWORD PTR ds:0xc0031dd8,0xc001bd47
c001c64f:	c7 05 dc 1d 03 c0 e1 bc 01 c0 	mov    DWORD PTR ds:0xc0031ddc,0xc001bce1
c001c659:	c7 05 e0 1d 03 c0 bb b9 01 c0 	mov    DWORD PTR ds:0xc0031de0,0xc001b9bb
c001c663:	c7 05 e4 1d 03 c0 24 ba 01 c0 	mov    DWORD PTR ds:0xc0031de4,0xc001ba24
c001c66d:	c7 05 e8 1d 03 c0 a1 ba 01 c0 	mov    DWORD PTR ds:0xc0031de8,0xc001baa1
c001c677:	c7 05 ec 1d 03 c0 f9 b6 01 c0 	mov    DWORD PTR ds:0xc0031dec,0xc001b6f9
c001c681:	c7 05 f0 1d 03 c0 b7 bd 01 c0 	mov    DWORD PTR ds:0xc0031df0,0xc001bdb7
c001c68b:	c7 05 f4 1d 03 c0 d1 bd 01 c0 	mov    DWORD PTR ds:0xc0031df4,0xc001bdd1
c001c695:	c7 05 f8 1d 03 c0 d1 bd 01 c0 	mov    DWORD PTR ds:0xc0031df8,0xc001bdd1
c001c69f:	c7 05 fc 1d 03 c0 12 be 01 c0 	mov    DWORD PTR ds:0xc0031dfc,0xc001be12
c001c6a9:	c7 05 00 1e 03 c0 76 be 01 c0 	mov    DWORD PTR ds:0xc0031e00,0xc001be76
c001c6b3:	c7 05 04 1e 03 c0 a5 b8 01 c0 	mov    DWORD PTR ds:0xc0031e04,0xc001b8a5
c001c6bd:	c7 05 08 1e 03 c0 da be 01 c0 	mov    DWORD PTR ds:0xc0031e08,0xc001beda
c001c6c7:	c7 05 0c 1e 03 c0 62 b8 01 c0 	mov    DWORD PTR ds:0xc0031e0c,0xc001b862
c001c6d1:	c7 05 10 1e 03 c0 26 bf 01 c0 	mov    DWORD PTR ds:0xc0031e10,0xc001bf26
c001c6db:	c7 05 14 1e 03 c0 61 b9 01 c0 	mov    DWORD PTR ds:0xc0031e14,0xc001b961
c001c6e5:	c7 05 18 1e 03 c0 a9 bf 01 c0 	mov    DWORD PTR ds:0xc0031e18,0xc001bfa9
c001c6ef:	c7 05 1c 1e 03 c0 24 bb 01 c0 	mov    DWORD PTR ds:0xc0031e1c,0xc001bb24
c001c6f9:	c7 05 20 1e 03 c0 d0 bf 01 c0 	mov    DWORD PTR ds:0xc0031e20,0xc001bfd0
c001c703:	c7 05 24 1e 03 c0 45 c0 01 c0 	mov    DWORD PTR ds:0xc0031e24,0xc001c045
c001c70d:	c7 05 28 1e 03 c0 7d c1 01 c0 	mov    DWORD PTR ds:0xc0031e28,0xc001c17d
c001c717:	c7 05 2c 1e 03 c0 03 b7 01 c0 	mov    DWORD PTR ds:0xc0031e2c,0xc001b703
c001c721:	c7 05 30 1e 03 c0 6d b7 01 c0 	mov    DWORD PTR ds:0xc0031e30,0xc001b76d
c001c72b:	c7 05 34 1e 03 c0 b3 b7 01 c0 	mov    DWORD PTR ds:0xc0031e34,0xc001b7b3
c001c735:	c7 05 38 1e 03 c0 91 c2 01 c0 	mov    DWORD PTR ds:0xc0031e38,0xc001c291
c001c73f:	c7 05 3c 1e 03 c0 ec bd 01 c0 	mov    DWORD PTR ds:0xc0031e3c,0xc001bdec
c001c749:	c7 05 40 1e 03 c0 04 b8 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001b804
c001c753:	c7 05 44 1e 03 c0 03 c3 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001c303
c001c75d:	c7 05 48 1e 03 c0 48 c3 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001c348
c001c767:	c7 05 4c 1e 03 c0 ec b2 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001b2ec
c001c771:	c7 05 50 1e 03 c0 6d b4 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001b46d
c001c77b:	c7 05 54 1e 03 c0 95 b5 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001b595
c001c785:	c7 05 58 1e 03 c0 d8 b1 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001b1d8
c001c78f:	c7 05 5c 1e 03 c0 47 b6 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001b647
c001c799:	c7 05 60 1e 03 c0 51 b2 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001b251
c001c7a3:	c7 05 64 1e 03 c0 68 b2 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001b268
c001c7ad:	c3                   	ret    

c001c7ae <Sys::systemCall(regs*, void*)>:
c001c7ae:	53                   	push   ebx
c001c7af:	83 ec 08             	sub    esp,0x8
c001c7b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7b9:	83 f8 7f             	cmp    eax,0x7f
c001c7bc:	77 16                	ja     c001c7d4 <Sys::systemCall(regs*, void*)+0x26>
c001c7be:	8b 14 85 a0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce260]
c001c7c5:	85 d2                	test   edx,edx
c001c7c7:	74 0b                	je     c001c7d4 <Sys::systemCall(regs*, void*)+0x26>
c001c7c9:	83 ec 0c             	sub    esp,0xc
c001c7cc:	53                   	push   ebx
c001c7cd:	ff d2                	call   edx
c001c7cf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7d2:	eb 0d                	jmp    c001c7e1 <Sys::systemCall(regs*, void*)+0x33>
c001c7d4:	52                   	push   edx
c001c7d5:	52                   	push   edx
c001c7d6:	50                   	push   eax
c001c7d7:	68 df ca 02 c0       	push   0xc002cadf
c001c7dc:	e8 1a 61 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7e9:	31 d2                	xor    edx,edx
c001c7eb:	83 c4 08             	add    esp,0x8
c001c7ee:	5b                   	pop    ebx
c001c7ef:	c3                   	ret    

c001c7f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7f0:	55                   	push   ebp
c001c7f1:	57                   	push   edi
c001c7f2:	56                   	push   esi
c001c7f3:	53                   	push   ebx
c001c7f4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7fa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c801:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c808:	85 c0                	test   eax,eax
c001c80a:	0f 95 c1             	setne  cl
c001c80d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c815:	0f 94 c2             	sete   dl
c001c818:	84 d1                	test   cl,dl
c001c81a:	74 23                	je     c001c83f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c81c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c822:	74 1b                	je     c001c83f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c824:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c82a:	89 da                	mov    edx,ebx
c001c82c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c832:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c838:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c83f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c846:	05 ff 0f 00 00       	add    eax,0xfff
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c852:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c858:	c1 e8 0c             	shr    eax,0xc
c001c85b:	89 fe                	mov    esi,edi
c001c85d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c861:	c1 ee 0c             	shr    esi,0xc
c001c864:	6a 01                	push   0x1
c001c866:	e8 8a 4c ff ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c001c86b:	89 c5                	mov    ebp,eax
c001c86d:	58                   	pop    eax
c001c86e:	5a                   	pop    edx
c001c86f:	56                   	push   esi
c001c870:	68 63 cb 02 c0       	push   0xc002cb63
c001c875:	e8 81 60 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c87a:	59                   	pop    ecx
c001c87b:	58                   	pop    eax
c001c87c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c880:	68 75 cb 02 c0       	push   0xc002cb75
c001c885:	e8 71 60 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c893:	0f 86 31 01 00 00    	jbe    c001c9ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c899:	c1 e6 0c             	shl    esi,0xc
c001c89c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c89f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c8a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8a6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c8ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c8b0:	01 df                	add    edi,ebx
c001c8b2:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c8b5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c8b9:	0f 84 08 01 00 00    	je     c001c9c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c8bf:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c8c5:	76 05                	jbe    c001c8cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c8c7:	bf 00 10 00 00       	mov    edi,0x1000
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	31 d2                	xor    edx,edx
c001c8d1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8da:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8de:	50                   	push   eax
c001c8df:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c8e3:	56                   	push   esi
c001c8e4:	52                   	push   edx
c001c8e5:	57                   	push   edi
c001c8e6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8f0:	83 c4 20             	add    esp,0x20
c001c8f3:	85 c0                	test   eax,eax
c001c8f5:	74 0a                	je     c001c901 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c8f7:	53                   	push   ebx
c001c8f8:	53                   	push   ebx
c001c8f9:	50                   	push   eax
c001c8fa:	68 87 cb 02 c0       	push   0xc002cb87
c001c8ff:	eb 0f                	jmp    c001c910 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c901:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c905:	74 20                	je     c001c927 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c907:	51                   	push   ecx
c001c908:	51                   	push   ecx
c001c909:	6a 00                	push   0x0
c001c90b:	68 b2 cb 02 c0       	push   0xc002cbb2
c001c910:	e8 e6 5f ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001c915:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c918:	e8 98 50 ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	31 c0                	xor    eax,eax
c001c922:	e9 68 01 00 00       	jmp    c001ca8f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c927:	fa                   	cli    
c001c928:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001c92e:	e8 73 33 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001c933:	6a 07                	push   0x7
c001c935:	89 c7                	mov    edi,eax
c001c937:	55                   	push   ebp
c001c938:	50                   	push   eax
c001c939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c93e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c941:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c947:	e8 e0 53 ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c94c:	83 c4 0c             	add    esp,0xc
c001c94f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c956:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c95c:	6a 00                	push   0x0
c001c95e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c963:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c966:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c96c:	e8 15 52 ff ff       	call   c0011b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001c971:	58                   	pop    eax
c001c972:	5a                   	pop    edx
c001c973:	68 07 0c 00 00       	push   0xc07
c001c978:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c97c:	57                   	push   edi
c001c97d:	89 ef                	mov    edi,ebp
c001c97f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c986:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c98c:	6a 00                	push   0x0
c001c98e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c993:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c996:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99c:	e8 47 57 ff ff       	call   c00120e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9a1:	b9 00 10 00 00       	mov    ecx,0x1000
c001c9a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9a8:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001c9ad:	83 c4 20             	add    esp,0x20
c001c9b0:	48                   	dec    eax
c001c9b1:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001c9b6:	85 c0                	test   eax,eax
c001c9b8:	75 01                	jne    c001c9bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c9ba:	fb                   	sti    
c001c9bb:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c9c2:	e9 df fe ff ff       	jmp    c001c8a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c9c7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c9ca:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9d2:	0f 86 a9 00 00 00    	jbe    c001ca81 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9d8:	fa                   	cli    
c001c9d9:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001c9df:	51                   	push   ecx
c001c9e0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9e7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ed:	6a 00                	push   0x0
c001c9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fd:	e8 84 51 ff ff       	call   c0011b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca02:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ca06:	c1 e6 0c             	shl    esi,0xc
c001ca09:	01 de                	add    esi,ebx
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	39 de                	cmp    esi,ebx
c001ca10:	74 61                	je     c001ca73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001ca12:	e8 8f 32 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001ca17:	6a 07                	push   0x7
c001ca19:	89 c7                	mov    edi,eax
c001ca1b:	55                   	push   ebp
c001ca1c:	50                   	push   eax
c001ca1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca25:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca2b:	e8 fc 52 ff ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca30:	58                   	pop    eax
c001ca31:	5a                   	pop    edx
c001ca32:	68 07 0c 00 00       	push   0xc07
c001ca37:	53                   	push   ebx
c001ca38:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca3e:	57                   	push   edi
c001ca3f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca46:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca4c:	6a 00                	push   0x0
c001ca4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca56:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca5c:	e8 87 56 ff ff       	call   c00120e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca61:	83 c4 1c             	add    esp,0x1c
c001ca64:	68 00 10 00 00       	push   0x1000
c001ca69:	6a 00                	push   0x0
c001ca6b:	55                   	push   ebp
c001ca6c:	e8 df 3c fe ff       	call   c0000750 <memset>
c001ca71:	eb 98                	jmp    c001ca0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001ca73:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ca78:	48                   	dec    eax
c001ca79:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001ca7e:	75 01                	jne    c001ca81 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ca80:	fb                   	sti    
c001ca81:	83 ec 0c             	sub    esp,0xc
c001ca84:	55                   	push   ebp
c001ca85:	e8 2b 4f ff ff       	call   c00119b5 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca8a:	83 c4 10             	add    esp,0x10
c001ca8d:	b0 01                	mov    al,0x1
c001ca8f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca95:	5b                   	pop    ebx
c001ca96:	5e                   	pop    esi
c001ca97:	5f                   	pop    edi
c001ca98:	5d                   	pop    ebp
c001ca99:	c3                   	ret    

c001ca9a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca9a:	55                   	push   ebp
c001ca9b:	57                   	push   edi
c001ca9c:	56                   	push   esi
c001ca9d:	53                   	push   ebx
c001ca9e:	83 ec 48             	sub    esp,0x48
c001caa1:	68 14 01 00 00       	push   0x114
c001caa6:	e8 57 2e ff ff       	call   c000f902 <malloc>
c001caab:	83 c4 0c             	add    esp,0xc
c001caae:	89 c6                	mov    esi,eax
c001cab0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cab8:	50                   	push   eax
c001cab9:	e8 9c 63 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001cabe:	58                   	pop    eax
c001cabf:	5a                   	pop    edx
c001cac0:	6a 01                	push   0x1
c001cac2:	56                   	push   esi
c001cac3:	e8 f6 63 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001cac8:	83 c4 10             	add    esp,0x10
c001cacb:	85 c0                	test   eax,eax
c001cacd:	0f 85 47 01 00 00    	jne    c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cadb:	83 ec 0c             	sub    esp,0xc
c001cade:	6a 34                	push   0x34
c001cae0:	e8 1d 2e ff ff       	call   c000f902 <malloc>
c001cae5:	89 c3                	mov    ebx,eax
c001cae7:	58                   	pop    eax
c001cae8:	8b 06                	mov    eax,DWORD PTR [esi]
c001caea:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caee:	57                   	push   edi
c001caef:	53                   	push   ebx
c001caf0:	6a 00                	push   0x0
c001caf2:	6a 34                	push   0x34
c001caf4:	56                   	push   esi
c001caf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001caf8:	83 c4 20             	add    esp,0x20
c001cafb:	85 c0                	test   eax,eax
c001cafd:	0f 85 17 01 00 00    	jne    c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb03:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb09:	0f 85 0b 01 00 00    	jne    c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb12:	85 c0                	test   eax,eax
c001cb14:	0f 84 00 01 00 00    	je     c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb1a:	31 d2                	xor    edx,edx
c001cb1c:	55                   	push   ebp
c001cb1d:	52                   	push   edx
c001cb1e:	50                   	push   eax
c001cb1f:	56                   	push   esi
c001cb20:	e8 57 64 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	85 c0                	test   eax,eax
c001cb2a:	0f 85 ea 00 00 00    	jne    c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb30:	83 ec 0c             	sub    esp,0xc
c001cb33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb36:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb3e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb42:	0f af c2             	imul   eax,edx
c001cb45:	50                   	push   eax
c001cb46:	e8 b7 2d ff ff       	call   c000f902 <malloc>
c001cb4b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb58:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb5c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb60:	0f af c2             	imul   eax,edx
c001cb63:	99                   	cdq    
c001cb64:	52                   	push   edx
c001cb65:	50                   	push   eax
c001cb66:	56                   	push   esi
c001cb67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb6a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb6d:	83 c4 20             	add    esp,0x20
c001cb70:	85 c0                	test   eax,eax
c001cb72:	0f 84 a2 00 00 00    	je     c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb78:	31 d2                	xor    edx,edx
c001cb7a:	51                   	push   ecx
c001cb7b:	52                   	push   edx
c001cb7c:	50                   	push   eax
c001cb7d:	56                   	push   esi
c001cb7e:	e8 f9 63 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	85 c0                	test   eax,eax
c001cb88:	0f 85 8c 00 00 00    	jne    c001cc1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb95:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb99:	31 ed                	xor    ebp,ebp
c001cb9b:	0f af c2             	imul   eax,edx
c001cb9e:	50                   	push   eax
c001cb9f:	e8 5e 2d ff ff       	call   c000f902 <malloc>
c001cba4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cba6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbb5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbb9:	0f af c2             	imul   eax,edx
c001cbbc:	99                   	cdq    
c001cbbd:	52                   	push   edx
c001cbbe:	50                   	push   eax
c001cbbf:	56                   	push   esi
c001cbc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbc3:	83 c4 20             	add    esp,0x20
c001cbc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbce:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbd2:	0f 86 80 00 00 00    	jbe    c001cc58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbd8:	0f b7 fd             	movzx  edi,bp
c001cbdb:	c1 e7 05             	shl    edi,0x5
c001cbde:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbe2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbe5:	75 6b                	jne    c001cc52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbe7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbee:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbf5:	52                   	push   edx
c001cbf6:	31 d2                	xor    edx,edx
c001cbf8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbfb:	52                   	push   edx
c001cbfc:	50                   	push   eax
c001cbfd:	56                   	push   esi
c001cbfe:	e8 79 63 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	85 c0                	test   eax,eax
c001cc08:	74 17                	je     c001cc21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc0a:	83 ec 0c             	sub    esp,0xc
c001cc0d:	68 de cb 02 c0       	push   0xc002cbde
c001cc12:	e8 e4 5c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001cc17:	83 c4 10             	add    esp,0x10
c001cc1a:	31 c0                	xor    eax,eax
c001cc1c:	e9 87 00 00 00       	jmp    c001cca8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc21:	83 ec 0c             	sub    esp,0xc
c001cc24:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc27:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc2a:	50                   	push   eax
c001cc2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc33:	56                   	push   esi
c001cc34:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc38:	e8 b3 fb ff ff       	call   c001c7f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc41:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc45:	83 c4 20             	add    esp,0x20
c001cc48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc4c:	73 04                	jae    c001cc52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc52:	45                   	inc    ebp
c001cc53:	e9 76 ff ff ff       	jmp    c001cbce <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc58:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc64:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc6a:	83 ec 0c             	sub    esp,0xc
c001cc6d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc73:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc78:	05 00 10 00 00       	add    eax,0x1000
c001cc7d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc84:	e8 89 2c ff ff       	call   c000f912 <free>
c001cc89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc8c:	e8 81 2c ff ff       	call   c000f912 <free>
c001cc91:	58                   	pop    eax
c001cc92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc96:	e8 77 2c ff ff       	call   c000f912 <free>
c001cc9b:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc9e:	e8 79 62 ff ff       	call   c0012f1c <File::close()>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	b0 01                	mov    al,0x1
c001cca8:	83 c4 3c             	add    esp,0x3c
c001ccab:	5b                   	pop    ebx
c001ccac:	5e                   	pop    esi
c001ccad:	5f                   	pop    edi
c001ccae:	5d                   	pop    ebp
c001ccaf:	c3                   	ret    

c001ccb0 <Thr::runtimeReferenceHelper()>:
c001ccb0:	83 ec 18             	sub    esp,0x18
c001ccb3:	68 e6 cb 02 c0       	push   0xc002cbe6
c001ccb8:	e8 3e 5c ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ccbd:	fa                   	cli    
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	eb fe                	jmp    c001ccc1 <Thr::runtimeReferenceHelper()+0x11>

c001ccc3 <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccc3:	57                   	push   edi
c001ccc4:	56                   	push   esi
c001ccc5:	53                   	push   ebx
c001ccc6:	31 db                	xor    ebx,ebx
c001ccc8:	39 1d 40 27 03 c0    	cmp    DWORD PTR ds:0xc0032740,ebx
c001ccce:	7e 3c                	jle    c001cd0c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccd0:	8b 34 9d c0 26 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd940]
c001ccd7:	31 ff                	xor    edi,edi
c001ccd9:	39 3c 9d c0 25 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcda40],edi
c001cce0:	7e 27                	jle    c001cd09 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cce2:	50                   	push   eax
c001cce3:	50                   	push   eax
c001cce4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cce8:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccea:	03 04 9d 40 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd9c0]
c001ccf1:	50                   	push   eax
c001ccf2:	e8 a1 3b fe ff       	call   c0000898 <strcmp>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	85 c0                	test   eax,eax
c001ccfc:	75 05                	jne    c001cd03 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccfe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd01:	eb 0b                	jmp    c001cd0e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd03:	83 c6 10             	add    esi,0x10
c001cd06:	47                   	inc    edi
c001cd07:	eb d0                	jmp    c001ccd9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd09:	43                   	inc    ebx
c001cd0a:	eb bc                	jmp    c001ccc8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd0c:	31 c0                	xor    eax,eax
c001cd0e:	5b                   	pop    ebx
c001cd0f:	5e                   	pop    esi
c001cd10:	5f                   	pop    edi
c001cd11:	c3                   	ret    

c001cd12 <Thr::loadKernelSymbolTable(char const*)>:
c001cd12:	55                   	push   ebp
c001cd13:	57                   	push   edi
c001cd14:	56                   	push   esi
c001cd15:	53                   	push   ebx
c001cd16:	83 ec 68             	sub    esp,0x68
c001cd19:	8b 35 90 27 03 c0    	mov    esi,DWORD PTR ds:0xc0032790
c001cd1f:	68 14 01 00 00       	push   0x114
c001cd24:	e8 d9 2b ff ff       	call   c000f902 <malloc>
c001cd29:	83 c4 0c             	add    esp,0xc
c001cd2c:	89 c3                	mov    ebx,eax
c001cd2e:	56                   	push   esi
c001cd2f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd33:	50                   	push   eax
c001cd34:	e8 21 61 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001cd39:	5e                   	pop    esi
c001cd3a:	5f                   	pop    edi
c001cd3b:	6a 01                	push   0x1
c001cd3d:	53                   	push   ebx
c001cd3e:	e8 7b 61 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	85 c0                	test   eax,eax
c001cd48:	74 0a                	je     c001cd54 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	68 08 cc 02 c0       	push   0xc002cc08
c001cd52:	eb 34                	jmp    c001cd88 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd54:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	6a 34                	push   0x34
c001cd61:	e8 9c 2b ff ff       	call   c000f902 <malloc>
c001cd66:	59                   	pop    ecx
c001cd67:	89 c7                	mov    edi,eax
c001cd69:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd6f:	56                   	push   esi
c001cd70:	57                   	push   edi
c001cd71:	6a 00                	push   0x0
c001cd73:	6a 34                	push   0x34
c001cd75:	53                   	push   ebx
c001cd76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd79:	83 c4 20             	add    esp,0x20
c001cd7c:	85 c0                	test   eax,eax
c001cd7e:	74 17                	je     c001cd97 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd80:	83 ec 0c             	sub    esp,0xc
c001cd83:	68 1f cc 02 c0       	push   0xc002cc1f
c001cd88:	e8 22 d6 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	31 c0                	xor    eax,eax
c001cd92:	e9 31 02 00 00       	jmp    c001cfc8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd97:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd9d:	75 e1                	jne    c001cd80 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd9f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cda2:	85 c0                	test   eax,eax
c001cda4:	74 da                	je     c001cd80 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda6:	52                   	push   edx
c001cda7:	31 d2                	xor    edx,edx
c001cda9:	52                   	push   edx
c001cdaa:	50                   	push   eax
c001cdab:	53                   	push   ebx
c001cdac:	e8 cb 61 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	85 c0                	test   eax,eax
c001cdb6:	75 c8                	jne    c001cd80 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdb8:	83 ec 0c             	sub    esp,0xc
c001cdbb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdbf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdc3:	31 ed                	xor    ebp,ebp
c001cdc5:	0f af c2             	imul   eax,edx
c001cdc8:	50                   	push   eax
c001cdc9:	e8 34 2b ff ff       	call   c000f902 <malloc>
c001cdce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdd4:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cddb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cddf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cde3:	0f af c2             	imul   eax,edx
c001cde6:	99                   	cdq    
c001cde7:	52                   	push   edx
c001cde8:	50                   	push   eax
c001cde9:	53                   	push   ebx
c001cdea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cded:	83 c4 20             	add    esp,0x20
c001cdf0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdf8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce00:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce10:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce14:	0f 86 aa 00 00 00    	jbe    c001cec4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce1a:	0f b7 f5             	movzx  esi,bp
c001ce1d:	6b f6 28             	imul   esi,esi,0x28
c001ce20:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce24:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce2b:	50                   	push   eax
c001ce2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce30:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce34:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce36:	6b c0 28             	imul   eax,eax,0x28
c001ce39:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce3d:	89 d0                	mov    eax,edx
c001ce3f:	31 d2                	xor    edx,edx
c001ce41:	52                   	push   edx
c001ce42:	50                   	push   eax
c001ce43:	53                   	push   ebx
c001ce44:	e8 33 61 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001ce49:	83 c4 0c             	add    esp,0xc
c001ce4c:	6a 20                	push   0x20
c001ce4e:	6a 00                	push   0x0
c001ce50:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce54:	52                   	push   edx
c001ce55:	e8 f6 38 fe ff       	call   c0000750 <memset>
c001ce5a:	58                   	pop    eax
c001ce5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce5d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce61:	51                   	push   ecx
c001ce62:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce66:	52                   	push   edx
c001ce67:	6a 00                	push   0x0
c001ce69:	6a 1f                	push   0x1f
c001ce6b:	53                   	push   ebx
c001ce6c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce6f:	83 c4 18             	add    esp,0x18
c001ce72:	68 36 cc 02 c0       	push   0xc002cc36
c001ce77:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce7b:	52                   	push   edx
c001ce7c:	e8 17 3a fe ff       	call   c0000898 <strcmp>
c001ce81:	83 c4 10             	add    esp,0x10
c001ce84:	85 c0                	test   eax,eax
c001ce86:	75 0f                	jne    c001ce97 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce88:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce97:	50                   	push   eax
c001ce98:	50                   	push   eax
c001ce99:	68 3e cc 02 c0       	push   0xc002cc3e
c001ce9e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cea2:	50                   	push   eax
c001cea3:	e8 f0 39 fe ff       	call   c0000898 <strcmp>
c001cea8:	83 c4 10             	add    esp,0x10
c001ceab:	85 c0                	test   eax,eax
c001cead:	75 0f                	jne    c001cebe <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceaf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ceb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cebe:	45                   	inc    ebp
c001cebf:	e9 4c ff ff ff       	jmp    c001ce10 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cec4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cec9:	75 10                	jne    c001cedb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cecb:	83 ec 0c             	sub    esp,0xc
c001cece:	68 46 cc 02 c0       	push   0xc002cc46
c001ced3:	e8 d7 d4 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001ced8:	83 c4 10             	add    esp,0x10
c001cedb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cee0:	75 10                	jne    c001cef2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cee2:	83 ec 0c             	sub    esp,0xc
c001cee5:	68 46 cc 02 c0       	push   0xc002cc46
c001ceea:	e8 c0 d4 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001ceef:	83 c4 10             	add    esp,0x10
c001cef2:	31 d2                	xor    edx,edx
c001cef4:	50                   	push   eax
c001cef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef9:	52                   	push   edx
c001cefa:	50                   	push   eax
c001cefb:	53                   	push   ebx
c001cefc:	e8 7b 60 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cf01:	5a                   	pop    edx
c001cf02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf06:	e8 f7 29 ff ff       	call   c000f902 <malloc>
c001cf0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf13:	31 c9                	xor    ecx,ecx
c001cf15:	5e                   	pop    esi
c001cf16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf18:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf1c:	55                   	push   ebp
c001cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf21:	51                   	push   ecx
c001cf22:	52                   	push   edx
c001cf23:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf27:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf2b:	53                   	push   ebx
c001cf2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf2f:	83 c4 14             	add    esp,0x14
c001cf32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf36:	e8 c7 29 ff ff       	call   c000f902 <malloc>
c001cf3b:	89 c6                	mov    esi,eax
c001cf3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf42:	56                   	push   esi
c001cf43:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf4b:	51                   	push   ecx
c001cf4c:	52                   	push   edx
c001cf4d:	53                   	push   ebx
c001cf4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf55:	8b 15 40 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032740
c001cf5b:	83 c4 1c             	add    esp,0x1c
c001cf5e:	c1 e8 04             	shr    eax,0x4
c001cf61:	89 04 95 c0 25 03 c0 	mov    DWORD PTR [edx*4-0x3ffcda40],eax
c001cf68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf6c:	31 d2                	xor    edx,edx
c001cf6e:	52                   	push   edx
c001cf6f:	50                   	push   eax
c001cf70:	53                   	push   ebx
c001cf71:	e8 06 60 ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001cf76:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf78:	31 d2                	xor    edx,edx
c001cf7a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf7d:	56                   	push   esi
c001cf7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf82:	52                   	push   edx
c001cf83:	50                   	push   eax
c001cf84:	53                   	push   ebx
c001cf85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf88:	83 c4 14             	add    esp,0x14
c001cf8b:	53                   	push   ebx
c001cf8c:	e8 8b 5f ff ff       	call   c0012f1c <File::close()>
c001cf91:	5d                   	pop    ebp
c001cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf96:	e8 77 29 ff ff       	call   c000f912 <free>
c001cf9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf9e:	e8 6f 29 ff ff       	call   c000f912 <free>
c001cfa3:	a1 40 27 03 c0       	mov    eax,ds:0xc0032740
c001cfa8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfac:	8d 50 01             	lea    edx,[eax+0x1]
c001cfaf:	89 0c 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],ecx
c001cfb6:	89 34 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],esi
c001cfbd:	89 15 40 27 03 c0    	mov    DWORD PTR ds:0xc0032740,edx
c001cfc3:	83 c4 10             	add    esp,0x10
c001cfc6:	b0 01                	mov    al,0x1
c001cfc8:	83 c4 5c             	add    esp,0x5c
c001cfcb:	5b                   	pop    ebx
c001cfcc:	5e                   	pop    esi
c001cfcd:	5f                   	pop    edi
c001cfce:	5d                   	pop    ebp
c001cfcf:	c3                   	ret    

c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfd0:	55                   	push   ebp
c001cfd1:	57                   	push   edi
c001cfd2:	56                   	push   esi
c001cfd3:	53                   	push   ebx
c001cfd4:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfda:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfe1:	8b 1d 90 27 03 c0    	mov    ebx,DWORD PTR ds:0xc0032790
c001cfe7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfeb:	68 14 01 00 00       	push   0x114
c001cff0:	e8 0d 29 ff ff       	call   c000f902 <malloc>
c001cff5:	83 c4 0c             	add    esp,0xc
c001cff8:	89 c5                	mov    ebp,eax
c001cffa:	53                   	push   ebx
c001cffb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d002:	50                   	push   eax
c001d003:	e8 52 5e ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001d008:	5e                   	pop    esi
c001d009:	5f                   	pop    edi
c001d00a:	6a 01                	push   0x1
c001d00c:	55                   	push   ebp
c001d00d:	e8 ac 5e ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001d012:	83 c4 10             	add    esp,0x10
c001d015:	85 c0                	test   eax,eax
c001d017:	0f 85 a7 06 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d01d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d025:	83 ec 0c             	sub    esp,0xc
c001d028:	6a 34                	push   0x34
c001d02a:	e8 d3 28 ff ff       	call   c000f902 <malloc>
c001d02f:	5b                   	pop    ebx
c001d030:	89 c7                	mov    edi,eax
c001d032:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d036:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d039:	53                   	push   ebx
c001d03a:	57                   	push   edi
c001d03b:	6a 00                	push   0x0
c001d03d:	6a 34                	push   0x34
c001d03f:	55                   	push   ebp
c001d040:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d043:	83 c4 20             	add    esp,0x20
c001d046:	85 c0                	test   eax,eax
c001d048:	0f 85 76 06 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d04e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d054:	0f 85 6a 06 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d05a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d05d:	85 c0                	test   eax,eax
c001d05f:	0f 84 5f 06 00 00    	je     c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d065:	31 d2                	xor    edx,edx
c001d067:	51                   	push   ecx
c001d068:	52                   	push   edx
c001d069:	50                   	push   eax
c001d06a:	55                   	push   ebp
c001d06b:	e8 0c 5f ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	85 c0                	test   eax,eax
c001d075:	0f 85 49 06 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d07b:	83 ec 0c             	sub    esp,0xc
c001d07e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d081:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d085:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d089:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d08d:	0f af c2             	imul   eax,edx
c001d090:	50                   	push   eax
c001d091:	e8 6c 28 ff ff       	call   c000f902 <malloc>
c001d096:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d099:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d09d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ac:	0f af c2             	imul   eax,edx
c001d0af:	99                   	cdq    
c001d0b0:	52                   	push   edx
c001d0b1:	50                   	push   eax
c001d0b2:	55                   	push   ebp
c001d0b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0b6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0b9:	83 c4 20             	add    esp,0x20
c001d0bc:	85 c0                	test   eax,eax
c001d0be:	0f 84 00 06 00 00    	je     c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0c4:	52                   	push   edx
c001d0c5:	31 d2                	xor    edx,edx
c001d0c7:	52                   	push   edx
c001d0c8:	50                   	push   eax
c001d0c9:	55                   	push   ebp
c001d0ca:	e8 ad 5e ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	85 c0                	test   eax,eax
c001d0d4:	0f 85 ea 05 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0da:	83 ec 0c             	sub    esp,0xc
c001d0dd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0e1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0e5:	31 f6                	xor    esi,esi
c001d0e7:	0f af c2             	imul   eax,edx
c001d0ea:	50                   	push   eax
c001d0eb:	e8 12 28 ff ff       	call   c000f902 <malloc>
c001d0f0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0fe:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d102:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d106:	0f af c2             	imul   eax,edx
c001d109:	99                   	cdq    
c001d10a:	52                   	push   edx
c001d10b:	50                   	push   eax
c001d10c:	55                   	push   ebp
c001d10d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d110:	83 c4 20             	add    esp,0x20
c001d113:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d117:	0f 86 8a 00 00 00    	jbe    c001d1a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d11d:	0f b7 de             	movzx  ebx,si
c001d120:	c1 e3 05             	shl    ebx,0x5
c001d123:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d127:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d12a:	75 75                	jne    c001d1a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d12c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d12f:	31 d2                	xor    edx,edx
c001d131:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d135:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d138:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d13c:	50                   	push   eax
c001d13d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d140:	52                   	push   edx
c001d141:	50                   	push   eax
c001d142:	55                   	push   ebp
c001d143:	e8 34 5e ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	85 c0                	test   eax,eax
c001d14d:	0f 85 71 05 00 00    	jne    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d153:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d15a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d15d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d161:	31 d2                	xor    edx,edx
c001d163:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d167:	83 ec 0c             	sub    esp,0xc
c001d16a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d16e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d175:	50                   	push   eax
c001d176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d17e:	52                   	push   edx
c001d17f:	50                   	push   eax
c001d180:	55                   	push   ebp
c001d181:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d184:	83 c4 1c             	add    esp,0x1c
c001d187:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d18a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d18d:	50                   	push   eax
c001d18e:	6a 00                	push   0x0
c001d190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d194:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d198:	50                   	push   eax
c001d199:	e8 b2 35 fe ff       	call   c0000750 <memset>
c001d19e:	83 c4 10             	add    esp,0x10
c001d1a1:	46                   	inc    esi
c001d1a2:	e9 6c ff ff ff       	jmp    c001d113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1a7:	53                   	push   ebx
c001d1a8:	31 db                	xor    ebx,ebx
c001d1aa:	68 00 01 00 00       	push   0x100
c001d1af:	6a 00                	push   0x0
c001d1b1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1b5:	50                   	push   eax
c001d1b6:	e8 95 35 fe ff       	call   c0000750 <memset>
c001d1bb:	83 c4 0c             	add    esp,0xc
c001d1be:	68 00 01 00 00       	push   0x100
c001d1c3:	6a 00                	push   0x0
c001d1c5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1cc:	50                   	push   eax
c001d1cd:	e8 7e 35 fe ff       	call   c0000750 <memset>
c001d1d2:	83 c4 10             	add    esp,0x10
c001d1d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1e5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1fd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d201:	0f 86 30 01 00 00    	jbe    c001d337 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d207:	0f b7 f3             	movzx  esi,bx
c001d20a:	6b f6 28             	imul   esi,esi,0x28
c001d20d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d211:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d218:	52                   	push   edx
c001d219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d21d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d221:	8b 06                	mov    eax,DWORD PTR [esi]
c001d223:	6b d2 28             	imul   edx,edx,0x28
c001d226:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d22a:	31 d2                	xor    edx,edx
c001d22c:	52                   	push   edx
c001d22d:	50                   	push   eax
c001d22e:	55                   	push   ebp
c001d22f:	e8 48 5d ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d234:	83 c4 0c             	add    esp,0xc
c001d237:	6a 20                	push   0x20
c001d239:	6a 00                	push   0x0
c001d23b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d242:	51                   	push   ecx
c001d243:	e8 08 35 fe ff       	call   c0000750 <memset>
c001d248:	59                   	pop    ecx
c001d249:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d24c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d250:	52                   	push   edx
c001d251:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d258:	51                   	push   ecx
c001d259:	6a 00                	push   0x0
c001d25b:	6a 1f                	push   0x1f
c001d25d:	55                   	push   ebp
c001d25e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d261:	83 c4 1c             	add    esp,0x1c
c001d264:	6a 09                	push   0x9
c001d266:	68 60 cc 02 c0       	push   0xc002cc60
c001d26b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d272:	51                   	push   ecx
c001d273:	e8 d4 33 fe ff       	call   c000064c <memcmp>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	85 c0                	test   eax,eax
c001d27d:	75 21                	jne    c001d2a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d27f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d287:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d28b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d28f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d292:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d299:	89 d0                	mov    eax,edx
c001d29b:	40                   	inc    eax
c001d29c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a0:	50                   	push   eax
c001d2a1:	6a 09                	push   0x9
c001d2a3:	68 6a cc 02 c0       	push   0xc002cc6a
c001d2a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2af:	50                   	push   eax
c001d2b0:	e8 97 33 fe ff       	call   c000064c <memcmp>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 21                	jne    c001d2dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2c4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2cf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2d6:	89 d0                	mov    eax,edx
c001d2d8:	40                   	inc    eax
c001d2d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2dd:	50                   	push   eax
c001d2de:	50                   	push   eax
c001d2df:	68 36 cc 02 c0       	push   0xc002cc36
c001d2e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2eb:	50                   	push   eax
c001d2ec:	e8 a7 35 fe ff       	call   c0000898 <strcmp>
c001d2f1:	83 c4 10             	add    esp,0x10
c001d2f4:	85 c0                	test   eax,eax
c001d2f6:	75 0f                	jne    c001d307 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d303:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d307:	50                   	push   eax
c001d308:	50                   	push   eax
c001d309:	68 3e cc 02 c0       	push   0xc002cc3e
c001d30e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d315:	50                   	push   eax
c001d316:	e8 7d 35 fe ff       	call   c0000898 <strcmp>
c001d31b:	83 c4 10             	add    esp,0x10
c001d31e:	85 c0                	test   eax,eax
c001d320:	75 0f                	jne    c001d331 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d322:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d325:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d329:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d32d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d331:	43                   	inc    ebx
c001d332:	e9 c6 fe ff ff       	jmp    c001d1fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d337:	31 d2                	xor    edx,edx
c001d339:	50                   	push   eax
c001d33a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d33e:	52                   	push   edx
c001d33f:	50                   	push   eax
c001d340:	55                   	push   ebp
c001d341:	e8 36 5c ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d346:	58                   	pop    eax
c001d347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d34b:	e8 b2 25 ff ff       	call   c000f902 <malloc>
c001d350:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d353:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d357:	31 d2                	xor    edx,edx
c001d359:	58                   	pop    eax
c001d35a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d35e:	53                   	push   ebx
c001d35f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d363:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d367:	52                   	push   edx
c001d368:	50                   	push   eax
c001d369:	55                   	push   ebp
c001d36a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d36d:	83 c4 14             	add    esp,0x14
c001d370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d374:	e8 89 25 ff ff       	call   c000f902 <malloc>
c001d379:	31 d2                	xor    edx,edx
c001d37b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d37f:	83 c4 0c             	add    esp,0xc
c001d382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d386:	52                   	push   edx
c001d387:	50                   	push   eax
c001d388:	55                   	push   ebp
c001d389:	e8 ee 5b ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d38e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d391:	31 d2                	xor    edx,edx
c001d393:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d396:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d39a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d39e:	52                   	push   edx
c001d39f:	50                   	push   eax
c001d3a0:	55                   	push   ebp
c001d3a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3a4:	83 c4 20             	add    esp,0x20
c001d3a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3b3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3b7:	0f 84 0b 03 00 00    	je     c001d6c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d3bd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3c4:	31 d2                	xor    edx,edx
c001d3c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3ca:	c1 e8 03             	shr    eax,0x3
c001d3cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3d1:	51                   	push   ecx
c001d3d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3d6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3da:	52                   	push   edx
c001d3db:	50                   	push   eax
c001d3dc:	55                   	push   ebp
c001d3dd:	e8 9a 5b ff ff       	call   c0012f7c <File::seek(unsigned long long)>
c001d3e2:	5b                   	pop    ebx
c001d3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3ee:	e8 0f 25 ff ff       	call   c000f902 <malloc>
c001d3f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3fa:	31 d2                	xor    edx,edx
c001d3fc:	5e                   	pop    esi
c001d3fd:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d401:	50                   	push   eax
c001d402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d40a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d411:	52                   	push   edx
c001d412:	50                   	push   eax
c001d413:	55                   	push   ebp
c001d414:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d417:	83 c4 20             	add    esp,0x20
c001d41a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d422:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d426:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d42a:	0f 8d 7c 02 00 00    	jge    c001d6ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d430:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d438:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d43d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d440:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d448:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d44c:	89 d8                	mov    eax,ebx
c001d44e:	c1 e8 08             	shr    eax,0x8
c001d451:	89 c6                	mov    esi,eax
c001d453:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d457:	c1 e6 04             	shl    esi,0x4
c001d45a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d45e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d461:	85 d2                	test   edx,edx
c001d463:	0f 85 bf 00 00 00    	jne    c001d528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d469:	83 ec 0c             	sub    esp,0xc
c001d46c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d470:	03 06                	add    eax,DWORD PTR [esi]
c001d472:	50                   	push   eax
c001d473:	e8 4b f8 ff ff       	call   c001ccc3 <Thr::getAddressOfKernelSymbol(char const*)>
c001d478:	83 c4 10             	add    esp,0x10
c001d47b:	89 c2                	mov    edx,eax
c001d47d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d482:	85 c0                	test   eax,eax
c001d484:	0f 85 9e 00 00 00    	jne    c001d528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d48a:	83 ec 0c             	sub    esp,0xc
c001d48d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d491:	03 06                	add    eax,DWORD PTR [esi]
c001d493:	50                   	push   eax
c001d494:	e8 a6 10 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	89 c2                	mov    edx,eax
c001d49e:	85 c0                	test   eax,eax
c001d4a0:	0f 85 82 00 00 00    	jne    c001d528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4aa:	50                   	push   eax
c001d4ab:	50                   	push   eax
c001d4ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b0:	03 06                	add    eax,DWORD PTR [esi]
c001d4b2:	50                   	push   eax
c001d4b3:	68 74 cc 02 c0       	push   0xc002cc74
c001d4b8:	e8 3e 54 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001d4bd:	58                   	pop    eax
c001d4be:	5a                   	pop    edx
c001d4bf:	68 8e cc 02 c0       	push   0xc002cc8e
c001d4c4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4cb:	50                   	push   eax
c001d4cc:	e8 3b 33 fe ff       	call   c000080c <strcpy>
c001d4d1:	59                   	pop    ecx
c001d4d2:	58                   	pop    eax
c001d4d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d7:	03 06                	add    eax,DWORD PTR [esi]
c001d4d9:	50                   	push   eax
c001d4da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4e1:	50                   	push   eax
c001d4e2:	e8 65 34 fe ff       	call   c000094c <strcat>
c001d4e7:	58                   	pop    eax
c001d4e8:	5a                   	pop    edx
c001d4e9:	68 24 cd 02 c0       	push   0xc002cd24
c001d4ee:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f5:	50                   	push   eax
c001d4f6:	e8 51 34 fe ff       	call   c000094c <strcat>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d503:	0f 84 5d 01 00 00    	je     c001d666 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d509:	83 ec 0c             	sub    esp,0xc
c001d50c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d513:	50                   	push   eax
c001d514:	e8 96 ce ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d519:	83 c4 10             	add    esp,0x10
c001d51c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d520:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d524:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d528:	80 fb 01             	cmp    bl,0x1
c001d52b:	0f 85 88 00 00 00    	jne    c001d5b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d531:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d538:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d53c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d540:	01 ce                	add    esi,ecx
c001d542:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d548:	0f 94 c0             	sete   al
c001d54b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d551:	0f 94 c3             	sete   bl
c001d554:	09 c3                	or     ebx,eax
c001d556:	8b 06                	mov    eax,DWORD PTR [esi]
c001d558:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d55d:	74 41                	je     c001d5a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d55f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d562:	84 db                	test   bl,bl
c001d564:	75 15                	jne    c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d566:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d56a:	66 83 f8 0c          	cmp    ax,0xc
c001d56e:	76 05                	jbe    c001d575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d570:	b8 0c 00 00 00       	mov    eax,0xc
c001d575:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d579:	76 37                	jbe    c001d5b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d57b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d57f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d584:	0f 84 dc 00 00 00    	je     c001d666 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d58a:	83 ec 0c             	sub    esp,0xc
c001d58d:	68 a5 cc 02 c0       	push   0xc002cca5
c001d592:	e8 18 ce ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d59e:	eb 12                	jmp    c001d5b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5a0:	01 c1                	add    ecx,eax
c001d5a2:	84 db                	test   bl,bl
c001d5a4:	75 0c                	jne    c001d5b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5a6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5aa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5ae:	77 02                	ja     c001d5b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5b0:	01 d1                	add    ecx,edx
c001d5b2:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5b4:	e9 ea 00 00 00       	jmp    c001d6a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5b9:	80 fb 02             	cmp    bl,0x2
c001d5bc:	75 7c                	jne    c001d63a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d5be:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5c5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5cd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5d3:	74 20                	je     c001d5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5d5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5db:	74 18                	je     c001d5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5dd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5e1:	b9 0a 00 00 00       	mov    ecx,0xa
c001d5e6:	66 83 f8 0e          	cmp    ax,0xe
c001d5ea:	77 03                	ja     c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d5ec:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d5ef:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d5f3:	76 1f                	jbe    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d5f5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5f9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5fe:	74 66                	je     c001d666 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d600:	83 ec 0c             	sub    esp,0xc
c001d603:	68 c1 cc 02 c0       	push   0xc002ccc1
c001d608:	e8 a2 cd ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d60d:	83 c4 10             	add    esp,0x10
c001d610:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d614:	8b 06                	mov    eax,DWORD PTR [esi]
c001d616:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d61b:	74 13                	je     c001d630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d61d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d621:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d628:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d62c:	01 c8                	add    eax,ecx
c001d62e:	eb 04                	jmp    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d630:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d634:	01 c2                	add    edx,eax
c001d636:	89 16                	mov    DWORD PTR [esi],edx
c001d638:	eb 69                	jmp    c001d6a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d63a:	0f b6 db             	movzx  ebx,bl
c001d63d:	50                   	push   eax
c001d63e:	50                   	push   eax
c001d63f:	53                   	push   ebx
c001d640:	68 dd cc 02 c0       	push   0xc002ccdd
c001d645:	e8 b1 52 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d652:	74 12                	je     c001d666 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	68 e8 cc 02 c0       	push   0xc002cce8
c001d65c:	e8 4e cd ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	eb 3d                	jmp    c001d6a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d666:	83 ec 0c             	sub    esp,0xc
c001d669:	55                   	push   ebp
c001d66a:	e8 ad 58 ff ff       	call   c0012f1c <File::close()>
c001d66f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d672:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d675:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d678:	59                   	pop    ecx
c001d679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d67d:	e8 90 22 ff ff       	call   c000f912 <free>
c001d682:	5b                   	pop    ebx
c001d683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d687:	e8 86 22 ff ff       	call   c000f912 <free>
c001d68c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d68f:	e8 7e 22 ff ff       	call   c000f912 <free>
c001d694:	5e                   	pop    esi
c001d695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d699:	e8 74 22 ff ff       	call   c000f912 <free>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	eb 21                	jmp    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6a3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6a7:	e9 76 fd ff ff       	jmp    c001d422 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6b3:	e8 5a 22 ff ff       	call   c000f912 <free>
c001d6b8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6bc:	83 c4 10             	add    esp,0x10
c001d6bf:	e9 eb fc ff ff       	jmp    c001d3af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6c4:	31 c0                	xor    eax,eax
c001d6c6:	eb 33                	jmp    c001d6fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	55                   	push   ebp
c001d6cc:	e8 4b 58 ff ff       	call   c0012f1c <File::close()>
c001d6d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6da:	58                   	pop    eax
c001d6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6df:	e8 2e 22 ff ff       	call   c000f912 <free>
c001d6e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6e7:	e8 26 22 ff ff       	call   c000f912 <free>
c001d6ec:	5a                   	pop    edx
c001d6ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6f1:	e8 1c 22 ff ff       	call   c000f912 <free>
c001d6f6:	83 c4 10             	add    esp,0x10
c001d6f9:	b0 01                	mov    al,0x1
c001d6fb:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d701:	5b                   	pop    ebx
c001d702:	5e                   	pop    esi
c001d703:	5f                   	pop    edi
c001d704:	5d                   	pop    ebp
c001d705:	c3                   	ret    

c001d706 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d706:	56                   	push   esi
c001d707:	31 d2                	xor    edx,edx
c001d709:	53                   	push   ebx
c001d70a:	8b 1d a0 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031fa0
c001d710:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d714:	39 d3                	cmp    ebx,edx
c001d716:	7e 1b                	jle    c001d733 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d718:	8b 04 95 c0 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcde40]
c001d71f:	39 c8                	cmp    eax,ecx
c001d721:	77 0d                	ja     c001d730 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d723:	8b 34 95 c0 1f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce040]
c001d72a:	01 c6                	add    esi,eax
c001d72c:	39 ce                	cmp    esi,ecx
c001d72e:	77 05                	ja     c001d735 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d730:	42                   	inc    edx
c001d731:	eb e1                	jmp    c001d714 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d733:	31 c0                	xor    eax,eax
c001d735:	5b                   	pop    ebx
c001d736:	5e                   	pop    esi
c001d737:	c3                   	ret    

c001d738 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d738:	53                   	push   ebx
c001d739:	31 c0                	xor    eax,eax
c001d73b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d73f:	8b 1d a0 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031fa0
c001d745:	39 c3                	cmp    ebx,eax
c001d747:	7e 22                	jle    c001d76b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d749:	8b 14 85 c0 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcde40]
c001d750:	39 ca                	cmp    edx,ecx
c001d752:	77 14                	ja     c001d768 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d754:	03 14 85 c0 1f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce040]
c001d75b:	39 ca                	cmp    edx,ecx
c001d75d:	76 09                	jbe    c001d768 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d75f:	8b 04 85 c0 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc40]
c001d766:	eb 05                	jmp    c001d76d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d768:	40                   	inc    eax
c001d769:	eb da                	jmp    c001d745 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d76b:	31 c0                	xor    eax,eax
c001d76d:	5b                   	pop    ebx
c001d76e:	c3                   	ret    

c001d76f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d76f:	53                   	push   ebx
c001d770:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d774:	53                   	push   ebx
c001d775:	e8 8c ff ff ff       	call   c001d706 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d77a:	5a                   	pop    edx
c001d77b:	31 d2                	xor    edx,edx
c001d77d:	85 c0                	test   eax,eax
c001d77f:	74 04                	je     c001d785 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d781:	89 da                	mov    edx,ebx
c001d783:	29 c2                	sub    edx,eax
c001d785:	89 d0                	mov    eax,edx
c001d787:	5b                   	pop    ebx
c001d788:	c3                   	ret    

c001d789 <Thr::loadDLL(char const*, bool)>:
c001d789:	55                   	push   ebp
c001d78a:	57                   	push   edi
c001d78b:	56                   	push   esi
c001d78c:	53                   	push   ebx
c001d78d:	81 ec 34 01 00 00    	sub    esp,0x134
c001d793:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d79a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d7a1:	56                   	push   esi
c001d7a2:	68 00 cd 02 c0       	push   0xc002cd00
c001d7a7:	e8 4f 51 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001d7ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7b3:	e8 4a 21 ff ff       	call   c000f902 <malloc>
c001d7b8:	83 c4 0c             	add    esp,0xc
c001d7bb:	89 c3                	mov    ebx,eax
c001d7bd:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001d7c3:	56                   	push   esi
c001d7c4:	50                   	push   eax
c001d7c5:	e8 90 56 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001d7ca:	83 c4 10             	add    esp,0x10
c001d7cd:	85 db                	test   ebx,ebx
c001d7cf:	75 3c                	jne    c001d80d <Thr::loadDLL(char const*, bool)+0x84>
c001d7d1:	89 f8                	mov    eax,edi
c001d7d3:	84 c0                	test   al,al
c001d7d5:	0f 84 cc 01 00 00    	je     c001d9a7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d7db:	55                   	push   ebp
c001d7dc:	55                   	push   ebp
c001d7dd:	68 11 cd 02 c0       	push   0xc002cd11
c001d7e2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d7e6:	55                   	push   ebp
c001d7e7:	e8 20 30 fe ff       	call   c000080c <strcpy>
c001d7ec:	58                   	pop    eax
c001d7ed:	5a                   	pop    edx
c001d7ee:	56                   	push   esi
c001d7ef:	55                   	push   ebp
c001d7f0:	e8 57 31 fe ff       	call   c000094c <strcat>
c001d7f5:	59                   	pop    ecx
c001d7f6:	58                   	pop    eax
c001d7f7:	68 24 cd 02 c0       	push   0xc002cd24
c001d7fc:	55                   	push   ebp
c001d7fd:	e8 4a 31 fe ff       	call   c000094c <strcat>
c001d802:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d805:	e8 a5 cb ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d80a:	83 c4 10             	add    esp,0x10
c001d80d:	51                   	push   ecx
c001d80e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d812:	50                   	push   eax
c001d813:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d817:	50                   	push   eax
c001d818:	53                   	push   ebx
c001d819:	e8 4c 59 ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c001d81e:	83 c4 10             	add    esp,0x10
c001d821:	85 db                	test   ebx,ebx
c001d823:	74 0c                	je     c001d831 <Thr::loadDLL(char const*, bool)+0xa8>
c001d825:	83 ec 0c             	sub    esp,0xc
c001d828:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d82a:	53                   	push   ebx
c001d82b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d82e:	83 c4 10             	add    esp,0x10
c001d831:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d836:	75 0a                	jne    c001d842 <Thr::loadDLL(char const*, bool)+0xb9>
c001d838:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d83c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d840:	75 3c                	jne    c001d87e <Thr::loadDLL(char const*, bool)+0xf5>
c001d842:	89 f8                	mov    eax,edi
c001d844:	84 c0                	test   al,al
c001d846:	0f 84 43 01 00 00    	je     c001d98f <Thr::loadDLL(char const*, bool)+0x206>
c001d84c:	51                   	push   ecx
c001d84d:	51                   	push   ecx
c001d84e:	68 11 cd 02 c0       	push   0xc002cd11
c001d853:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d857:	53                   	push   ebx
c001d858:	e8 af 2f fe ff       	call   c000080c <strcpy>
c001d85d:	5d                   	pop    ebp
c001d85e:	58                   	pop    eax
c001d85f:	56                   	push   esi
c001d860:	53                   	push   ebx
c001d861:	e8 e6 30 fe ff       	call   c000094c <strcat>
c001d866:	58                   	pop    eax
c001d867:	5a                   	pop    edx
c001d868:	68 24 cd 02 c0       	push   0xc002cd24
c001d86d:	53                   	push   ebx
c001d86e:	e8 d9 30 fe ff       	call   c000094c <strcat>
c001d873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d876:	e8 34 cb ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d87b:	83 c4 10             	add    esp,0x10
c001d87e:	52                   	push   edx
c001d87f:	6a 03                	push   0x3
c001d881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d885:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d889:	05 ff 0f 00 00       	add    eax,0xfff
c001d88e:	83 d2 00             	adc    edx,0x0
c001d891:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d895:	50                   	push   eax
c001d896:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c001d89c:	e8 8d 45 ff ff       	call   c0011e2e <VAS::allocatePages(int, int)>
c001d8a1:	59                   	pop    ecx
c001d8a2:	89 c3                	mov    ebx,eax
c001d8a4:	5d                   	pop    ebp
c001d8a5:	50                   	push   eax
c001d8a6:	68 26 cd 02 c0       	push   0xc002cd26
c001d8ab:	e8 4b 50 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001d8b0:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8b3:	e8 b4 2e fe ff       	call   c000076c <strlen>
c001d8b8:	8b 2d a0 1f 03 c0    	mov    ebp,DWORD PTR ds:0xc0031fa0
c001d8be:	40                   	inc    eax
c001d8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8c2:	e8 3b 20 ff ff       	call   c000f902 <malloc>
c001d8c7:	89 04 ad c0 23 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdc40],eax
c001d8ce:	58                   	pop    eax
c001d8cf:	a1 a0 1f 03 c0       	mov    eax,ds:0xc0031fa0
c001d8d4:	5a                   	pop    edx
c001d8d5:	56                   	push   esi
c001d8d6:	ff 34 85 c0 23 03 c0 	push   DWORD PTR [eax*4-0x3ffcdc40]
c001d8dd:	e8 2a 2f fe ff       	call   c000080c <strcpy>
c001d8e2:	a1 a0 1f 03 c0       	mov    eax,ds:0xc0031fa0
c001d8e7:	8d 50 01             	lea    edx,[eax+0x1]
c001d8ea:	89 1c 85 c0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde40],ebx
c001d8f1:	89 15 a0 1f 03 c0    	mov    DWORD PTR ds:0xc0031fa0,edx
c001d8f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8fb:	83 c4 0c             	add    esp,0xc
c001d8fe:	89 14 85 c0 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce040],edx
c001d905:	6a 01                	push   0x1
c001d907:	53                   	push   ebx
c001d908:	56                   	push   esi
c001d909:	e8 c2 f6 ff ff       	call   c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d90e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d912:	83 c4 10             	add    esp,0x10
c001d915:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d91a:	0f 85 83 00 00 00    	jne    c001d9a3 <Thr::loadDLL(char const*, bool)+0x21a>
c001d920:	89 f8                	mov    eax,edi
c001d922:	84 c0                	test   al,al
c001d924:	74 6d                	je     c001d993 <Thr::loadDLL(char const*, bool)+0x20a>
c001d926:	83 ec 0c             	sub    esp,0xc
c001d929:	68 33 cd 02 c0       	push   0xc002cd33
c001d92e:	e8 7c ca ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d933:	83 c4 10             	add    esp,0x10
c001d936:	eb 5b                	jmp    c001d993 <Thr::loadDLL(char const*, bool)+0x20a>
c001d938:	89 ee                	mov    esi,ebp
c001d93a:	50                   	push   eax
c001d93b:	c1 e6 0c             	shl    esi,0xc
c001d93e:	50                   	push   eax
c001d93f:	01 de                	add    esi,ebx
c001d941:	56                   	push   esi
c001d942:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c001d948:	e8 49 40 ff ff       	call   c0011996 <VAS::getPageTableEntry(unsigned long)>
c001d94d:	83 c4 10             	add    esp,0x10
c001d950:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d953:	75 0c                	jne    c001d961 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d955:	83 ec 0c             	sub    esp,0xc
c001d958:	56                   	push   esi
c001d959:	e8 ed 22 ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	45                   	inc    ebp
c001d962:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d96a:	05 ff 0f 00 00       	add    eax,0xfff
c001d96f:	bf 00 00 00 00       	mov    edi,0x0
c001d974:	83 d2 00             	adc    edx,0x0
c001d977:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d97b:	c1 ea 0c             	shr    edx,0xc
c001d97e:	39 c5                	cmp    ebp,eax
c001d980:	89 d1                	mov    ecx,edx
c001d982:	89 f8                	mov    eax,edi
c001d984:	19 c8                	sbb    eax,ecx
c001d986:	72 b0                	jb     c001d938 <Thr::loadDLL(char const*, bool)+0x1af>
c001d988:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d98d:	75 18                	jne    c001d9a7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d98f:	31 db                	xor    ebx,ebx
c001d991:	eb 14                	jmp    c001d9a7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d993:	83 ec 0c             	sub    esp,0xc
c001d996:	68 52 cd 02 c0       	push   0xc002cd52
c001d99b:	e8 0f ca ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d9a0:	83 c4 10             	add    esp,0x10
c001d9a3:	31 ed                	xor    ebp,ebp
c001d9a5:	eb bb                	jmp    c001d962 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9ad:	89 d8                	mov    eax,ebx
c001d9af:	5b                   	pop    ebx
c001d9b0:	5e                   	pop    esi
c001d9b1:	5f                   	pop    edi
c001d9b2:	5d                   	pop    ebp
c001d9b3:	c3                   	ret    

c001d9b4 <Thr::executeDLL(unsigned long, void*)>:
c001d9b4:	56                   	push   esi
c001d9b5:	53                   	push   ebx
c001d9b6:	52                   	push   edx
c001d9b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9bf:	85 db                	test   ebx,ebx
c001d9c1:	75 10                	jne    c001d9d3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9c3:	83 ec 0c             	sub    esp,0xc
c001d9c6:	68 6e cd 02 c0       	push   0xc002cd6e
c001d9cb:	e8 df c9 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001d9d0:	83 c4 10             	add    esp,0x10
c001d9d3:	50                   	push   eax
c001d9d4:	50                   	push   eax
c001d9d5:	53                   	push   ebx
c001d9d6:	68 98 cd 02 c0       	push   0xc002cd98
c001d9db:	e8 1b 4f ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001d9e0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9e4:	89 d8                	mov    eax,ebx
c001d9e6:	83 c4 14             	add    esp,0x14
c001d9e9:	5b                   	pop    ebx
c001d9ea:	5e                   	pop    esi
c001d9eb:	ff e0                	jmp    eax
c001d9ed:	90                   	nop

c001d9ee <userModeEntryPoint(void*)>:
c001d9ee:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001d9f3:	48                   	dec    eax
c001d9f4:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001d9f9:	75 01                	jne    c001d9fc <userModeEntryPoint(void*)+0xe>
c001d9fb:	fb                   	sti    
c001d9fc:	fb                   	sti    
c001d9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001da05:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001da0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da0f:	e9 16 29 fe ff       	jmp    c000032a <goToUsermode>

c001da14 <changeTSS>:
c001da14:	83 ec 14             	sub    esp,0x14
c001da17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da1c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da1f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da24:	c1 e2 15             	shl    edx,0x15
c001da27:	29 d0                	sub    eax,edx
c001da29:	50                   	push   eax
c001da2a:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001da2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da35:	05 7c 11 00 00       	add    eax,0x117c
c001da3a:	50                   	push   eax
c001da3b:	e8 f4 33 ff ff       	call   c0010e34 <TSS::setESP(unsigned long)>
c001da40:	83 c4 1c             	add    esp,0x1c
c001da43:	c3                   	ret    

c001da44 <switchToThread(ThreadControlBlock*)>:
c001da44:	57                   	push   edi
c001da45:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001da4a:	56                   	push   esi
c001da4b:	85 c0                	test   eax,eax
c001da4d:	53                   	push   ebx
c001da4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da52:	0f 85 88 00 00 00    	jne    c001dae0 <switchToThread(ThreadControlBlock*)+0x9c>
c001da58:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001da5b:	3c ff                	cmp    al,0xff
c001da5d:	74 7d                	je     c001dadc <switchToThread(ThreadControlBlock*)+0x98>
c001da5f:	0f b6 d0             	movzx  edx,al
c001da62:	b8 84 03 00 00       	mov    eax,0x384
c001da67:	29 d0                	sub    eax,edx
c001da69:	c1 e0 10             	shl    eax,0x10
c001da6c:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001da6f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001da72:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001da77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da7d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001da84:	74 4a                	je     c001dad0 <switchToThread(ThreadControlBlock*)+0x8c>
c001da86:	0f 31                	rdtsc  
c001da88:	a3 a8 27 03 c0       	mov    ds:0xc00327a8,eax
c001da8d:	89 c6                	mov    esi,eax
c001da8f:	89 d7                	mov    edi,edx
c001da91:	2b 35 98 27 03 c0    	sub    esi,DWORD PTR ds:0xc0032798
c001da97:	89 15 ac 27 03 c0    	mov    DWORD PTR ds:0xc00327ac,edx
c001da9d:	1b 3d 9c 27 03 c0    	sbb    edi,DWORD PTR ds:0xc003279c
c001daa3:	89 35 a0 27 03 c0    	mov    DWORD PTR ds:0xc00327a0,esi
c001daa9:	a3 98 27 03 c0       	mov    ds:0xc0032798,eax
c001daae:	89 3d a4 27 03 c0    	mov    DWORD PTR ds:0xc00327a4,edi
c001dab4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001daba:	89 15 9c 27 03 c0    	mov    DWORD PTR ds:0xc003279c,edx
c001dac0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dac3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dac6:	01 c6                	add    esi,eax
c001dac8:	11 d7                	adc    edi,edx
c001daca:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dacd:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dad0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dad4:	5b                   	pop    ebx
c001dad5:	5e                   	pop    esi
c001dad6:	5f                   	pop    edi
c001dad7:	e9 86 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dadc:	31 c0                	xor    eax,eax
c001dade:	eb 8f                	jmp    c001da6f <switchToThread(ThreadControlBlock*)+0x2b>
c001dae0:	5b                   	pop    ebx
c001dae1:	c7 05 60 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x1
c001daeb:	5e                   	pop    esi
c001daec:	5f                   	pop    edi
c001daed:	c3                   	ret    

c001daee <Process::addArgs(char**)>:
c001daee:	57                   	push   edi
c001daef:	56                   	push   esi
c001daf0:	53                   	push   ebx
c001daf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001daf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001daf9:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001db03:	85 ff                	test   edi,edi
c001db05:	74 3d                	je     c001db44 <Process::addArgs(char**)+0x56>
c001db07:	8b 07                	mov    eax,DWORD PTR [edi]
c001db09:	85 c0                	test   eax,eax
c001db0b:	74 37                	je     c001db44 <Process::addArgs(char**)+0x56>
c001db0d:	31 db                	xor    ebx,ebx
c001db0f:	83 ec 0c             	sub    esp,0xc
c001db12:	50                   	push   eax
c001db13:	e8 54 2c fe ff       	call   c000076c <strlen>
c001db18:	40                   	inc    eax
c001db19:	89 04 24             	mov    DWORD PTR [esp],eax
c001db1c:	e8 e1 1d ff ff       	call   c000f902 <malloc>
c001db21:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db28:	5a                   	pop    edx
c001db29:	59                   	pop    ecx
c001db2a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db2d:	43                   	inc    ebx
c001db2e:	50                   	push   eax
c001db2f:	e8 d8 2c fe ff       	call   c000080c <strcpy>
c001db34:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db40:	85 c0                	test   eax,eax
c001db42:	75 cb                	jne    c001db0f <Process::addArgs(char**)+0x21>
c001db44:	5b                   	pop    ebx
c001db45:	5e                   	pop    esi
c001db46:	5f                   	pop    edi
c001db47:	c3                   	ret    

c001db48 <Process::Process(char const*, Process*, char**)>:
c001db48:	56                   	push   esi
c001db49:	53                   	push   ebx
c001db4a:	83 ec 14             	sub    esp,0x14
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	05 0c 02 00 00       	add    eax,0x20c
c001db56:	bb 07 00 00 00       	mov    ebx,0x7
c001db5b:	89 c6                	mov    esi,eax
c001db5d:	85 db                	test   ebx,ebx
c001db5f:	78 12                	js     c001db73 <Process::Process(char const*, Process*, char**)+0x2b>
c001db61:	83 ec 0c             	sub    esp,0xc
c001db64:	56                   	push   esi
c001db65:	e8 08 bb 00 00       	call   c0029672 <ThreadControlBlock::ThreadControlBlock()>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	83 c6 63             	add    esi,0x63
c001db70:	4b                   	dec    ebx
c001db71:	eb ea                	jmp    c001db5d <Process::Process(char const*, Process*, char**)+0x15>
c001db73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db77:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db7e:	83 ec 0c             	sub    esp,0xc
c001db81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db85:	e8 7e c6 ff ff       	call   c001a208 <Krnl::newProcessEnv(Process*)>
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	89 c2                	mov    edx,eax
c001db8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db93:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dba6:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c001dbab:	8d 50 01             	lea    edx,[eax+0x1]
c001dbae:	89 15 d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,edx
c001dbb4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbb8:	89 02                	mov    DWORD PTR [edx],eax
c001dbba:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dbc2:	83 ec 0c             	sub    esp,0xc
c001dbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbc9:	e8 34 1d ff ff       	call   c000f902 <malloc>
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	89 c3                	mov    ebx,eax
c001dbd3:	83 ec 08             	sub    esp,0x8
c001dbd6:	6a 00                	push   0x0
c001dbd8:	53                   	push   ebx
c001dbd9:	e8 f8 45 ff ff       	call   c00121d6 <VAS::VAS(bool)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbef:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc01:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc11:	85 c0                	test   eax,eax
c001dc13:	74 42                	je     c001dc57 <Process::Process(char const*, Process*, char**)+0x10f>
c001dc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc1f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc29:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc39:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc43:	05 0c 01 00 00       	add    eax,0x10c
c001dc48:	83 ec 08             	sub    esp,0x8
c001dc4b:	52                   	push   edx
c001dc4c:	50                   	push   eax
c001dc4d:	e8 ba 2b fe ff       	call   c000080c <strcpy>
c001dc52:	83 c4 10             	add    esp,0x10
c001dc55:	eb 63                	jmp    c001dcba <Process::Process(char const*, Process*, char**)+0x172>
c001dc57:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dc5f:	83 ec 0c             	sub    esp,0xc
c001dc62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc66:	e8 97 1c ff ff       	call   c000f902 <malloc>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	89 c3                	mov    ebx,eax
c001dc70:	83 ec 08             	sub    esp,0x8
c001dc73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc77:	53                   	push   ebx
c001dc78:	e8 cb 2e ff ff       	call   c0010b48 <VgaText::VgaText(char const*)>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc84:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc8e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	50                   	push   eax
c001dc98:	e8 6a 26 ff ff       	call   c0010307 <addToTerminalCycle(VgaText*)>
c001dc9d:	83 c4 10             	add    esp,0x10
c001dca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca4:	05 0c 01 00 00       	add    eax,0x10c
c001dca9:	83 ec 08             	sub    esp,0x8
c001dcac:	68 b7 cd 02 c0       	push   0xc002cdb7
c001dcb1:	50                   	push   eax
c001dcb2:	e8 55 2b fe ff       	call   c000080c <strcpy>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcbe:	83 c0 0c             	add    eax,0xc
c001dcc1:	83 ec 08             	sub    esp,0x8
c001dcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc8:	50                   	push   eax
c001dcc9:	e8 3e 2b fe ff       	call   c000080c <strcpy>
c001dcce:	83 c4 10             	add    esp,0x10
c001dcd1:	83 ec 08             	sub    esp,0x8
c001dcd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcdc:	e8 0d fe ff ff       	call   c001daee <Process::addArgs(char**)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	83 ec 08             	sub    esp,0x8
c001dce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dceb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcef:	e8 a6 ed ff ff       	call   c001ca9a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcf4:	83 c4 10             	add    esp,0x10
c001dcf7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcfb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dcff:	83 f0 01             	xor    eax,0x1
c001dd02:	88 c2                	mov    dl,al
c001dd04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd08:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dd0e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd13:	83 ec 08             	sub    esp,0x8
c001dd16:	50                   	push   eax
c001dd17:	68 e4 ce 02 c0       	push   0xc002cee4
c001dd1c:	e8 da 4b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001dd21:	83 c4 10             	add    esp,0x10
c001dd24:	90                   	nop
c001dd25:	83 c4 14             	add    esp,0x14
c001dd28:	5b                   	pop    ebx
c001dd29:	5e                   	pop    esi
c001dd2a:	c3                   	ret    
c001dd2b:	90                   	nop

c001dd2c <Process::Process(bool, char const*, Process*, char**)>:
c001dd2c:	56                   	push   esi
c001dd2d:	53                   	push   ebx
c001dd2e:	83 ec 24             	sub    esp,0x24
c001dd31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd35:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3d:	05 0c 02 00 00       	add    eax,0x20c
c001dd42:	bb 07 00 00 00       	mov    ebx,0x7
c001dd47:	89 c6                	mov    esi,eax
c001dd49:	85 db                	test   ebx,ebx
c001dd4b:	78 12                	js     c001dd5f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd4d:	83 ec 0c             	sub    esp,0xc
c001dd50:	56                   	push   esi
c001dd51:	e8 1c b9 00 00       	call   c0029672 <ThreadControlBlock::ThreadControlBlock()>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	83 c6 63             	add    esi,0x63
c001dd5c:	4b                   	dec    ebx
c001dd5d:	eb ea                	jmp    c001dd49 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd63:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd6a:	83 ec 0c             	sub    esp,0xc
c001dd6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd71:	e8 92 c4 ff ff       	call   c001a208 <Krnl::newProcessEnv(Process*)>
c001dd76:	83 c4 10             	add    esp,0x10
c001dd79:	89 c2                	mov    edx,eax
c001dd7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd89:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd92:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c001dd97:	8d 50 01             	lea    edx,[eax+0x1]
c001dd9a:	89 15 d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,edx
c001dda0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dda4:	89 02                	mov    DWORD PTR [edx],eax
c001dda6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ddb5:	e8 48 1b ff ff       	call   c000f902 <malloc>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	89 c3                	mov    ebx,eax
c001ddbf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddc4:	83 ec 08             	sub    esp,0x8
c001ddc7:	50                   	push   eax
c001ddc8:	53                   	push   ebx
c001ddc9:	e8 08 44 ff ff       	call   c00121d6 <VAS::VAS(bool)>
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dddf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dde9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dded:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddf1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de01:	85 c0                	test   eax,eax
c001de03:	74 42                	je     c001de47 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001de05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de09:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de0f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de19:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de23:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de29:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de33:	05 0c 01 00 00       	add    eax,0x10c
c001de38:	83 ec 08             	sub    esp,0x8
c001de3b:	52                   	push   edx
c001de3c:	50                   	push   eax
c001de3d:	e8 ca 29 fe ff       	call   c000080c <strcpy>
c001de42:	83 c4 10             	add    esp,0x10
c001de45:	eb 63                	jmp    c001deaa <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de47:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001de4f:	83 ec 0c             	sub    esp,0xc
c001de52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de56:	e8 a7 1a ff ff       	call   c000f902 <malloc>
c001de5b:	83 c4 10             	add    esp,0x10
c001de5e:	89 c3                	mov    ebx,eax
c001de60:	83 ec 08             	sub    esp,0x8
c001de63:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de67:	53                   	push   ebx
c001de68:	e8 db 2c ff ff       	call   c0010b48 <VgaText::VgaText(char const*)>
c001de6d:	83 c4 10             	add    esp,0x10
c001de70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de74:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de7e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de84:	83 ec 0c             	sub    esp,0xc
c001de87:	50                   	push   eax
c001de88:	e8 7a 24 ff ff       	call   c0010307 <addToTerminalCycle(VgaText*)>
c001de8d:	83 c4 10             	add    esp,0x10
c001de90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de94:	05 0c 01 00 00       	add    eax,0x10c
c001de99:	83 ec 08             	sub    esp,0x8
c001de9c:	68 b7 cd 02 c0       	push   0xc002cdb7
c001dea1:	50                   	push   eax
c001dea2:	e8 65 29 fe ff       	call   c000080c <strcpy>
c001dea7:	83 c4 10             	add    esp,0x10
c001deaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001deae:	83 c0 0c             	add    eax,0xc
c001deb1:	83 ec 08             	sub    esp,0x8
c001deb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001deb8:	50                   	push   eax
c001deb9:	e8 4e 29 fe ff       	call   c000080c <strcpy>
c001debe:	83 c4 10             	add    esp,0x10
c001dec1:	83 ec 08             	sub    esp,0x8
c001dec4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dec8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001decc:	e8 1d fc ff ff       	call   c001daee <Process::addArgs(char**)>
c001ded1:	83 c4 10             	add    esp,0x10
c001ded4:	90                   	nop
c001ded5:	83 c4 24             	add    esp,0x24
c001ded8:	5b                   	pop    ebx
c001ded9:	5e                   	pop    esi
c001deda:	c3                   	ret    

c001dedb <taskStartupFunction>:
c001dedb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dee0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dee3:	c3                   	ret    

c001dee4 <Semaphore::Semaphore(int)>:
c001dee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001deec:	89 10                	mov    DWORD PTR [eax],edx
c001deee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001def9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df0f:	90                   	nop
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <Mutex::Mutex()>:
c001df12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df16:	6a 01                	push   0x1
c001df18:	50                   	push   eax
c001df19:	e8 c6 ff ff ff       	call   c001dee4 <Semaphore::Semaphore(int)>
c001df1e:	83 c4 08             	add    esp,0x8
c001df21:	90                   	nop
c001df22:	c3                   	ret    
c001df23:	90                   	nop

c001df24 <Process::createThread(void (*)(void*), void*, int)>:
c001df24:	55                   	push   ebp
c001df25:	31 c9                	xor    ecx,ecx
c001df27:	57                   	push   edi
c001df28:	56                   	push   esi
c001df29:	53                   	push   ebx
c001df2a:	83 ec 1c             	sub    esp,0x1c
c001df2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df31:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df38:	89 f2                	mov    edx,esi
c001df3a:	0f b7 c2             	movzx  eax,dx
c001df3d:	83 e2 01             	and    edx,0x1
c001df40:	74 16                	je     c001df58 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df42:	d1 f8                	sar    eax,1
c001df44:	41                   	inc    ecx
c001df45:	89 c2                	mov    edx,eax
c001df47:	83 f9 10             	cmp    ecx,0x10
c001df4a:	75 ee                	jne    c001df3a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df4c:	83 c4 1c             	add    esp,0x1c
c001df4f:	31 db                	xor    ebx,ebx
c001df51:	89 d8                	mov    eax,ebx
c001df53:	5b                   	pop    ebx
c001df54:	5e                   	pop    esi
c001df55:	5f                   	pop    edi
c001df56:	5d                   	pop    ebp
c001df57:	c3                   	ret    
c001df58:	b8 01 00 00 00       	mov    eax,0x1
c001df5d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df60:	d3 e0                	shl    eax,cl
c001df62:	09 c6                	or     esi,eax
c001df64:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001df67:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df6e:	89 c6                	mov    esi,eax
c001df70:	c1 e6 05             	shl    esi,0x5
c001df73:	01 f0                	add    eax,esi
c001df75:	01 d8                	add    eax,ebx
c001df77:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001df7e:	75 0a                	jne    c001df8a <Process::createThread(void (*)(void*), void*, int)+0x66>
c001df80:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001df8a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df90:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df94:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001df97:	01 ca                	add    edx,ecx
c001df99:	83 ec 08             	sub    esp,0x8
c001df9c:	89 d0                	mov    eax,edx
c001df9e:	c1 e0 05             	shl    eax,0x5
c001dfa1:	01 d0                	add    eax,edx
c001dfa3:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfab:	01 d8                	add    eax,ebx
c001dfad:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dfb3:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dfb9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfbf:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfc5:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfcb:	89 cd                	mov    ebp,ecx
c001dfcd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dfd1:	f7 dd                	neg    ebp
c001dfd3:	c1 e5 15             	shl    ebp,0x15
c001dfd6:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dfdc:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dfe2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfec:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dff2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dffc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e006:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e00a:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e011:	53                   	push   ebx
c001e012:	68 84 27 03 c0       	push   0xc0032784
c001e017:	e8 10 b4 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e01c:	89 d8                	mov    eax,ebx
c001e01e:	83 c4 10             	add    esp,0x10
c001e021:	83 c4 1c             	add    esp,0x1c
c001e024:	5b                   	pop    ebx
c001e025:	5e                   	pop    esi
c001e026:	5f                   	pop    edi
c001e027:	5d                   	pop    ebp
c001e028:	c3                   	ret    
c001e029:	90                   	nop

c001e02a <Process::createUserThread()>:
c001e02a:	83 ec 0c             	sub    esp,0xc
c001e02d:	68 80 00 00 00       	push   0x80
c001e032:	6a 00                	push   0x0
c001e034:	68 ee d9 01 c0       	push   0xc001d9ee
c001e039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e03d:	e8 e2 fe ff ff       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c001e042:	83 c4 1c             	add    esp,0x1c
c001e045:	c3                   	ret    

c001e046 <setupMultitasking(void (*)())>:
c001e046:	56                   	push   esi
c001e047:	53                   	push   ebx
c001e048:	51                   	push   ecx
c001e049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e04d:	eb 10                	jmp    c001e05f <setupMultitasking(void (*)())+0x19>
c001e04f:	83 ec 0c             	sub    esp,0xc
c001e052:	68 84 27 03 c0       	push   0xc0032784
c001e057:	e8 22 b3 00 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	83 ec 0c             	sub    esp,0xc
c001e062:	68 84 27 03 c0       	push   0xc0032784
c001e067:	e8 ee b2 00 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	84 c0                	test   al,al
c001e071:	74 dc                	je     c001e04f <setupMultitasking(void (*)())+0x9>
c001e073:	83 ec 0c             	sub    esp,0xc
c001e076:	68 3f 07 00 00       	push   0x73f
c001e07b:	e8 82 18 ff ff       	call   c000f902 <malloc>
c001e080:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e087:	89 c3                	mov    ebx,eax
c001e089:	6a 00                	push   0x0
c001e08b:	68 bb cd 02 c0       	push   0xc002cdbb
c001e090:	6a 01                	push   0x1
c001e092:	50                   	push   eax
c001e093:	e8 94 fc ff ff       	call   c001dd2c <Process::Process(bool, char const*, Process*, char**)>
c001e098:	83 c4 18             	add    esp,0x18
c001e09b:	89 1d 90 27 03 c0    	mov    DWORD PTR ds:0xc0032790,ebx
c001e0a1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0a7:	68 0c cf 02 c0       	push   0xc002cf0c
c001e0ac:	e8 4a 48 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e0b1:	58                   	pop    eax
c001e0b2:	5a                   	pop    edx
c001e0b3:	6a 63                	push   0x63
c001e0b5:	68 40 cf 02 c0       	push   0xc002cf40
c001e0ba:	e8 3c 48 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e0bf:	59                   	pop    ecx
c001e0c0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0c6:	e8 4a 25 ff ff       	call   c0010615 <setActiveTerminal(VgaText*)>
c001e0cb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0d3:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e0dd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e0e6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0f0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0f6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0fc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e106:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e110:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e11a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e120:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e12a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e130:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e13a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e140:	58                   	pop    eax
c001e141:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e147:	5a                   	pop    edx
c001e148:	68 b7 cd 02 c0       	push   0xc002cdb7
c001e14d:	50                   	push   eax
c001e14e:	e8 b9 26 fe ff       	call   c000080c <strcpy>
c001e153:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e15a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e15e:	83 c4 14             	add    esp,0x14
c001e161:	5b                   	pop    ebx
c001e162:	5e                   	pop    esi
c001e163:	e9 ec 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e168 <schedule()>:
c001e168:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e16d:	85 c0                	test   eax,eax
c001e16f:	74 0b                	je     c001e17c <schedule()+0x14>
c001e171:	c7 05 60 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x1
c001e17b:	c3                   	ret    
c001e17c:	53                   	push   ebx
c001e17d:	83 ec 14             	sub    esp,0x14
c001e180:	68 84 27 03 c0       	push   0xc0032784
c001e185:	e8 d0 b1 00 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	84 c0                	test   al,al
c001e18f:	75 38                	jne    c001e1c9 <schedule()+0x61>
c001e191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e196:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e199:	4a                   	dec    edx
c001e19a:	74 32                	je     c001e1ce <schedule()+0x66>
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	68 84 27 03 c0       	push   0xc0032784
c001e1a4:	e8 cd b1 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1a9:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e1b0:	89 c3                	mov    ebx,eax
c001e1b2:	e8 c7 b1 00 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1b7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1c1:	e8 7e f8 ff ff       	call   c001da44 <switchToThread(ThreadControlBlock*)>
c001e1c6:	83 c4 10             	add    esp,0x10
c001e1c9:	83 c4 08             	add    esp,0x8
c001e1cc:	5b                   	pop    ebx
c001e1cd:	c3                   	ret    
c001e1ce:	83 ec 08             	sub    esp,0x8
c001e1d1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1d8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1de:	68 84 27 03 c0       	push   0xc0032784
c001e1e3:	e8 44 b2 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	eb af                	jmp    c001e19c <schedule()+0x34>
c001e1ed:	90                   	nop

c001e1ee <Semaphore::tryAcquire()>:
c001e1ee:	53                   	push   ebx
c001e1ef:	83 ec 08             	sub    esp,0x8
c001e1f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1f6:	fa                   	cli    
c001e1f7:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e1fc:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ff:	89 15 68 27 03 c0    	mov    DWORD PTR ds:0xc0032768,edx
c001e205:	8b 15 64 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032764
c001e20b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e20e:	89 1d 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,ebx
c001e214:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e217:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e219:	7c 2a                	jl     c001e245 <Semaphore::tryAcquire()+0x57>
c001e21b:	89 15 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,edx
c001e221:	85 d2                	test   edx,edx
c001e223:	75 0a                	jne    c001e22f <Semaphore::tryAcquire()+0x41>
c001e225:	8b 15 60 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032760
c001e22b:	85 d2                	test   edx,edx
c001e22d:	75 5b                	jne    c001e28a <Semaphore::tryAcquire()+0x9c>
c001e22f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e234:	85 c0                	test   eax,eax
c001e236:	74 07                	je     c001e23f <Semaphore::tryAcquire()+0x51>
c001e238:	31 c0                	xor    eax,eax
c001e23a:	83 c4 08             	add    esp,0x8
c001e23d:	5b                   	pop    ebx
c001e23e:	c3                   	ret    
c001e23f:	fb                   	sti    
c001e240:	83 c4 08             	add    esp,0x8
c001e243:	5b                   	pop    ebx
c001e244:	c3                   	ret    
c001e245:	43                   	inc    ebx
c001e246:	89 15 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,edx
c001e24c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e24f:	85 d2                	test   edx,edx
c001e251:	75 1f                	jne    c001e272 <Semaphore::tryAcquire()+0x84>
c001e253:	8b 0d 60 27 03 c0    	mov    ecx,DWORD PTR ds:0xc0032760
c001e259:	85 c9                	test   ecx,ecx
c001e25b:	74 15                	je     c001e272 <Semaphore::tryAcquire()+0x84>
c001e25d:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001e267:	e8 fc fe ff ff       	call   c001e168 <schedule()>
c001e26c:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e271:	48                   	dec    eax
c001e272:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e277:	85 c0                	test   eax,eax
c001e279:	75 08                	jne    c001e283 <Semaphore::tryAcquire()+0x95>
c001e27b:	fb                   	sti    
c001e27c:	b0 01                	mov    al,0x1
c001e27e:	83 c4 08             	add    esp,0x8
c001e281:	5b                   	pop    ebx
c001e282:	c3                   	ret    
c001e283:	b0 01                	mov    al,0x1
c001e285:	83 c4 08             	add    esp,0x8
c001e288:	5b                   	pop    ebx
c001e289:	c3                   	ret    
c001e28a:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001e294:	e8 cf fe ff ff       	call   c001e168 <schedule()>
c001e299:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e29e:	48                   	dec    eax
c001e29f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e2a4:	85 c0                	test   eax,eax
c001e2a6:	75 90                	jne    c001e238 <Semaphore::tryAcquire()+0x4a>
c001e2a8:	eb 95                	jmp    c001e23f <Semaphore::tryAcquire()+0x51>

c001e2aa <Semaphore::assertLocked(char const*)>:
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2b1:	fa                   	cli    
c001e2b2:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e2b8:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e2bd:	8d 48 01             	lea    ecx,[eax+0x1]
c001e2c0:	89 0d 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,ecx
c001e2c6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e2c8:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e2cb:	7c 24                	jl     c001e2f1 <Semaphore::assertLocked(char const*)+0x47>
c001e2cd:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001e2d2:	85 c0                	test   eax,eax
c001e2d4:	75 09                	jne    c001e2df <Semaphore::assertLocked(char const*)+0x35>
c001e2d6:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001e2db:	85 c0                	test   eax,eax
c001e2dd:	75 29                	jne    c001e308 <Semaphore::assertLocked(char const*)+0x5e>
c001e2df:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e2e4:	48                   	dec    eax
c001e2e5:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e2ea:	75 01                	jne    c001e2ed <Semaphore::assertLocked(char const*)+0x43>
c001e2ec:	fb                   	sti    
c001e2ed:	83 c4 0c             	add    esp,0xc
c001e2f0:	c3                   	ret    
c001e2f1:	83 ec 0c             	sub    esp,0xc
c001e2f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e2f8:	e8 b2 c0 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001e2fd:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e302:	83 c4 10             	add    esp,0x10
c001e305:	48                   	dec    eax
c001e306:	eb c5                	jmp    c001e2cd <Semaphore::assertLocked(char const*)+0x23>
c001e308:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001e312:	e8 51 fe ff ff       	call   c001e168 <schedule()>
c001e317:	eb c6                	jmp    c001e2df <Semaphore::assertLocked(char const*)+0x35>

c001e319 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e319:	83 ec 14             	sub    esp,0x14
c001e31c:	ff 35 68 27 03 c0    	push   DWORD PTR ds:0xc0032768
c001e322:	68 64 cf 02 c0       	push   0xc002cf64
c001e327:	e8 cf 45 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e32c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e331:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e335:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e338:	e8 2b fe ff ff       	call   c001e168 <schedule()>
c001e33d:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e342:	83 c4 10             	add    esp,0x10
c001e345:	48                   	dec    eax
c001e346:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e34b:	85 c0                	test   eax,eax
c001e34d:	75 06                	jne    c001e355 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e34f:	fb                   	sti    
c001e350:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e355:	83 ec 08             	sub    esp,0x8
c001e358:	50                   	push   eax
c001e359:	68 98 cf 02 c0       	push   0xc002cf98
c001e35e:	e8 98 45 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e363:	83 c4 1c             	add    esp,0x1c
c001e366:	c3                   	ret    

c001e367 <blockTask(TaskState)>:
c001e367:	83 ec 0c             	sub    esp,0xc
c001e36a:	fa                   	cli    
c001e36b:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e371:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e37a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e37d:	e8 e6 fd ff ff       	call   c001e168 <schedule()>
c001e382:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e387:	48                   	dec    eax
c001e388:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e38d:	75 01                	jne    c001e390 <blockTask(TaskState)+0x29>
c001e38f:	fb                   	sti    
c001e390:	83 c4 0c             	add    esp,0xc
c001e393:	c3                   	ret    

c001e394 <waitTask(int, int*, int)>:
c001e394:	83 ec 18             	sub    esp,0x18
c001e397:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e39c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3a0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e3a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e3a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ac:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e3af:	6a 07                	push   0x7
c001e3b1:	e8 b1 ff ff ff       	call   c001e367 <blockTask(TaskState)>
c001e3b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3bb:	83 c4 10             	add    esp,0x10
c001e3be:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3c1:	85 d2                	test   edx,edx
c001e3c3:	74 0a                	je     c001e3cf <waitTask(int, int*, int)+0x3b>
c001e3c5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3c8:	89 02                	mov    DWORD PTR [edx],eax
c001e3ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3cf:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3d2:	83 c4 0c             	add    esp,0xc
c001e3d5:	c3                   	ret    

c001e3d6 <nanoSleepUntil(unsigned long long)>:
c001e3d6:	83 ec 0c             	sub    esp,0xc
c001e3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3e1:	3b 05 b0 f8 02 c0    	cmp    eax,DWORD PTR ds:0xc002f8b0
c001e3e7:	89 d1                	mov    ecx,edx
c001e3e9:	1b 0d b4 f8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f8b4
c001e3ef:	73 04                	jae    c001e3f5 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3f1:	83 c4 0c             	add    esp,0xc
c001e3f4:	c3                   	ret    
c001e3f5:	fa                   	cli    
c001e3f6:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e3fc:	83 ec 08             	sub    esp,0x8
c001e3ff:	ff 05 64 27 03 c0    	inc    DWORD PTR ds:0xc0032764
c001e405:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e40b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e40e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e411:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e417:	68 78 27 03 c0       	push   0xc0032778
c001e41c:	e8 0b b0 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e421:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e428:	e8 3a ff ff ff       	call   c001e367 <blockTask(TaskState)>
c001e42d:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e432:	83 c4 10             	add    esp,0x10
c001e435:	48                   	dec    eax
c001e436:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001e43b:	85 c0                	test   eax,eax
c001e43d:	75 09                	jne    c001e448 <nanoSleepUntil(unsigned long long)+0x72>
c001e43f:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001e444:	85 c0                	test   eax,eax
c001e446:	75 12                	jne    c001e45a <nanoSleepUntil(unsigned long long)+0x84>
c001e448:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e44d:	48                   	dec    eax
c001e44e:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e453:	75 9c                	jne    c001e3f1 <nanoSleepUntil(unsigned long long)+0x1b>
c001e455:	fb                   	sti    
c001e456:	83 c4 0c             	add    esp,0xc
c001e459:	c3                   	ret    
c001e45a:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001e464:	e8 ff fc ff ff       	call   c001e168 <schedule()>
c001e469:	eb dd                	jmp    c001e448 <nanoSleepUntil(unsigned long long)+0x72>

c001e46b <nanoSleep(unsigned long long)>:
c001e46b:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c001e470:	8b 15 b4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8b4
c001e476:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e47a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e47e:	e9 53 ff ff ff       	jmp    c001e3d6 <nanoSleepUntil(unsigned long long)>

c001e483 <sleep(unsigned long long)>:
c001e483:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e48b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e490:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e494:	01 ca                	add    edx,ecx
c001e496:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e49a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e49e:	eb cb                	jmp    c001e46b <nanoSleep(unsigned long long)>

c001e4a0 <Semaphore::acquire()>:
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e4a7:	fa                   	cli    
c001e4a8:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e4ad:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e4b3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4b6:	89 0d 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,ecx
c001e4bc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e4bf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e4c1:	7d 28                	jge    c001e4eb <Semaphore::acquire()+0x4b>
c001e4c3:	41                   	inc    ecx
c001e4c4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e4c7:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001e4cc:	85 c0                	test   eax,eax
c001e4ce:	75 09                	jne    c001e4d9 <Semaphore::acquire()+0x39>
c001e4d0:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001e4d5:	85 c0                	test   eax,eax
c001e4d7:	75 4e                	jne    c001e527 <Semaphore::acquire()+0x87>
c001e4d9:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e4de:	48                   	dec    eax
c001e4df:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e4e4:	75 01                	jne    c001e4e7 <Semaphore::acquire()+0x47>
c001e4e6:	fb                   	sti    
c001e4e7:	83 c4 0c             	add    esp,0xc
c001e4ea:	c3                   	ret    
c001e4eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e4f7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e4fa:	85 c9                	test   ecx,ecx
c001e4fc:	74 3a                	je     c001e538 <Semaphore::acquire()+0x98>
c001e4fe:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e501:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e507:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e50a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e515:	6a 05                	push   0x5
c001e517:	e8 4b fe ff ff       	call   c001e367 <blockTask(TaskState)>
c001e51c:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001e521:	83 c4 10             	add    esp,0x10
c001e524:	48                   	dec    eax
c001e525:	eb a0                	jmp    c001e4c7 <Semaphore::acquire()+0x27>
c001e527:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001e531:	e8 32 fc ff ff       	call   c001e168 <schedule()>
c001e536:	eb a1                	jmp    c001e4d9 <Semaphore::acquire()+0x39>
c001e538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e53d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e540:	eb c8                	jmp    c001e50a <Semaphore::acquire()+0x6a>

c001e542 <taskReturned>:
c001e542:	83 ec 18             	sub    esp,0x18
c001e545:	68 cc cf 02 c0       	push   0xc002cfcc
c001e54a:	e8 60 be ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001e54f:	83 c4 10             	add    esp,0x10
c001e552:	83 ec 0c             	sub    esp,0xc
c001e555:	6a 02                	push   0x2
c001e557:	e8 0b fe ff ff       	call   c001e367 <blockTask(TaskState)>
c001e55c:	fa                   	cli    
c001e55d:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e563:	e8 00 fc ff ff       	call   c001e168 <schedule()>
c001e568:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e56d:	83 c4 10             	add    esp,0x10
c001e570:	48                   	dec    eax
c001e571:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e576:	85 c0                	test   eax,eax
c001e578:	75 d8                	jne    c001e552 <taskReturned+0x10>
c001e57a:	fb                   	sti    
c001e57b:	eb d5                	jmp    c001e552 <taskReturned+0x10>

c001e57d <Thr::processFromPID(int)>:
c001e57d:	57                   	push   edi
c001e57e:	56                   	push   esi
c001e57f:	53                   	push   ebx
c001e580:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e584:	83 ec 0c             	sub    esp,0xc
c001e587:	68 c2 cd 02 c0       	push   0xc002cdc2
c001e58c:	e8 6a 43 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e591:	fa                   	cli    
c001e592:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e598:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e59f:	e8 d2 ad 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	89 c7                	mov    edi,eax
c001e5a9:	eb 14                	jmp    c001e5bf <Thr::processFromPID(int)+0x42>
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	68 84 27 03 c0       	push   0xc0032784
c001e5b3:	e8 be ad 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5b8:	83 c4 10             	add    esp,0x10
c001e5bb:	39 f8                	cmp    eax,edi
c001e5bd:	74 49                	je     c001e608 <Thr::processFromPID(int)+0x8b>
c001e5bf:	83 ec 0c             	sub    esp,0xc
c001e5c2:	68 84 27 03 c0       	push   0xc0032784
c001e5c7:	e8 aa ad 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5cc:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e5d3:	89 c3                	mov    ebx,eax
c001e5d5:	e8 a4 ad 00 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5da:	58                   	pop    eax
c001e5db:	5a                   	pop    edx
c001e5dc:	53                   	push   ebx
c001e5dd:	68 84 27 03 c0       	push   0xc0032784
c001e5e2:	e8 45 ae 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ea:	83 c4 10             	add    esp,0x10
c001e5ed:	39 30                	cmp    DWORD PTR [eax],esi
c001e5ef:	75 ba                	jne    c001e5ab <Thr::processFromPID(int)+0x2e>
c001e5f1:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e5f6:	48                   	dec    eax
c001e5f7:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e5fc:	74 07                	je     c001e605 <Thr::processFromPID(int)+0x88>
c001e5fe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e601:	5b                   	pop    ebx
c001e602:	5e                   	pop    esi
c001e603:	5f                   	pop    edi
c001e604:	c3                   	ret    
c001e605:	fb                   	sti    
c001e606:	eb f6                	jmp    c001e5fe <Thr::processFromPID(int)+0x81>
c001e608:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e60d:	48                   	dec    eax
c001e60e:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e613:	75 01                	jne    c001e616 <Thr::processFromPID(int)+0x99>
c001e615:	fb                   	sti    
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	68 dd cd 02 c0       	push   0xc002cddd
c001e61e:	e8 d8 42 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	31 c0                	xor    eax,eax
c001e628:	5b                   	pop    ebx
c001e629:	5e                   	pop    esi
c001e62a:	5f                   	pop    edi
c001e62b:	c3                   	ret    

c001e62c <unblockTask(ThreadControlBlock*)>:
c001e62c:	53                   	push   ebx
c001e62d:	83 ec 08             	sub    esp,0x8
c001e630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e634:	fa                   	cli    
c001e635:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e63b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e63e:	85 c0                	test   eax,eax
c001e640:	74 66                	je     c001e6a8 <unblockTask(ThreadControlBlock*)+0x7c>
c001e642:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e645:	48                   	dec    eax
c001e646:	74 31                	je     c001e679 <unblockTask(ThreadControlBlock*)+0x4d>
c001e648:	83 ec 0c             	sub    esp,0xc
c001e64b:	68 84 27 03 c0       	push   0xc0032784
c001e650:	e8 21 ad 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e655:	83 c4 10             	add    esp,0x10
c001e658:	85 c0                	test   eax,eax
c001e65a:	75 17                	jne    c001e673 <unblockTask(ThreadControlBlock*)+0x47>
c001e65c:	eb 68                	jmp    c001e6c6 <unblockTask(ThreadControlBlock*)+0x9a>
c001e65e:	83 ec 08             	sub    esp,0x8
c001e661:	50                   	push   eax
c001e662:	68 84 27 03 c0       	push   0xc0032784
c001e667:	e8 a8 b0 00 00       	call   c0029714 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e66c:	83 c4 10             	add    esp,0x10
c001e66f:	85 c0                	test   eax,eax
c001e671:	74 53                	je     c001e6c6 <unblockTask(ThreadControlBlock*)+0x9a>
c001e673:	39 c3                	cmp    ebx,eax
c001e675:	75 e7                	jne    c001e65e <unblockTask(ThreadControlBlock*)+0x32>
c001e677:	eb 1c                	jmp    c001e695 <unblockTask(ThreadControlBlock*)+0x69>
c001e679:	83 ec 0c             	sub    esp,0xc
c001e67c:	68 bc d0 02 c0       	push   0xc002d0bc
c001e681:	e8 75 42 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e686:	c7 04 24 48 d0 02 c0 	mov    DWORD PTR [esp],0xc002d048
c001e68d:	e8 69 42 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e692:	83 c4 10             	add    esp,0x10
c001e695:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e69a:	48                   	dec    eax
c001e69b:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e6a0:	75 01                	jne    c001e6a3 <unblockTask(ThreadControlBlock*)+0x77>
c001e6a2:	fb                   	sti    
c001e6a3:	83 c4 08             	add    esp,0x8
c001e6a6:	5b                   	pop    ebx
c001e6a7:	c3                   	ret    
c001e6a8:	83 ec 0c             	sub    esp,0xc
c001e6ab:	68 00 d0 02 c0       	push   0xc002d000
c001e6b0:	e8 46 42 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e6b5:	c7 04 24 48 d0 02 c0 	mov    DWORD PTR [esp],0xc002d048
c001e6bc:	e8 3a 42 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e6c1:	83 c4 10             	add    esp,0x10
c001e6c4:	eb cf                	jmp    c001e695 <unblockTask(ThreadControlBlock*)+0x69>
c001e6c6:	83 ec 08             	sub    esp,0x8
c001e6c9:	53                   	push   ebx
c001e6ca:	68 84 27 03 c0       	push   0xc0032784
c001e6cf:	e8 58 ad 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	eb bc                	jmp    c001e695 <unblockTask(ThreadControlBlock*)+0x69>

c001e6d9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e6d9:	55                   	push   ebp
c001e6da:	57                   	push   edi
c001e6db:	56                   	push   esi
c001e6dc:	53                   	push   ebx
c001e6dd:	83 ec 1c             	sub    esp,0x1c
c001e6e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e6e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e6ed:	85 ff                	test   edi,edi
c001e6ef:	7e 20                	jle    c001e711 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e6f1:	31 f6                	xor    esi,esi
c001e6f3:	83 ec 0c             	sub    esp,0xc
c001e6f6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e6fd:	46                   	inc    esi
c001e6fe:	e8 0f 12 ff ff       	call   c000f912 <free>
c001e703:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e70f:	7f e2                	jg     c001e6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e711:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e71b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e720:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e723:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e726:	d3 c0                	rol    eax,cl
c001e728:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e72f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e732:	89 f7                	mov    edi,esi
c001e734:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e73c:	0f 85 74 01 00 00    	jne    c001e8b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e742:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e748:	85 ed                	test   ebp,ebp
c001e74a:	74 1b                	je     c001e767 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e74c:	83 ec 0c             	sub    esp,0xc
c001e74f:	55                   	push   ebp
c001e750:	e8 cf b9 ff ff       	call   c001a124 <EnvVarContainer::~EnvVarContainer()>
c001e755:	59                   	pop    ecx
c001e756:	5e                   	pop    esi
c001e757:	6a 0c                	push   0xc
c001e759:	55                   	push   ebp
c001e75a:	e8 bc 40 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c001e75f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e762:	83 c4 10             	add    esp,0x10
c001e765:	89 f7                	mov    edi,esi
c001e767:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e76d:	85 c0                	test   eax,eax
c001e76f:	0f 84 aa 00 00 00    	je     c001e81f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e775:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e778:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e77c:	31 c9                	xor    ecx,ecx
c001e77e:	eb 10                	jmp    c001e790 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e780:	41                   	inc    ecx
c001e781:	83 f9 10             	cmp    ecx,0x10
c001e784:	0f 84 95 00 00 00    	je     c001e81f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e78a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e790:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e797:	d3 fa                	sar    edx,cl
c001e799:	83 e2 01             	and    edx,0x1
c001e79c:	74 e2                	je     c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e79e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e7a1:	01 ca                	add    edx,ecx
c001e7a3:	89 d5                	mov    ebp,edx
c001e7a5:	c1 e5 05             	shl    ebp,0x5
c001e7a8:	01 ea                	add    edx,ebp
c001e7aa:	01 d0                	add    eax,edx
c001e7ac:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e7b2:	83 fd 07             	cmp    ebp,0x7
c001e7b5:	75 c9                	jne    c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7b7:	05 40 02 00 00       	add    eax,0x240
c001e7bc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e7bf:	83 fd ff             	cmp    ebp,0xffffffff
c001e7c2:	0f 8c 08 01 00 00    	jl     c001e8d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e7c8:	0f 84 b9 01 00 00    	je     c001e987 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e7ce:	85 ed                	test   ebp,ebp
c001e7d0:	0f 84 a0 01 00 00    	je     c001e976 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e7d6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e7d8:	75 a6                	jne    c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7da:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e7e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7e4:	01 d0                	add    eax,edx
c001e7e6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e7ea:	83 ec 0c             	sub    esp,0xc
c001e7ed:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e7f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7f6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e7fc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e803:	50                   	push   eax
c001e804:	e8 23 fe ff ff       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c001e809:	83 c4 10             	add    esp,0x10
c001e80c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e80f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e813:	89 f7                	mov    edi,esi
c001e815:	41                   	inc    ecx
c001e816:	83 f9 10             	cmp    ecx,0x10
c001e819:	0f 85 6b ff ff ff    	jne    c001e78a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e81f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e825:	85 c0                	test   eax,eax
c001e827:	74 5d                	je     c001e886 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e829:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e82f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e835:	74 4f                	je     c001e886 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e837:	83 ec 0c             	sub    esp,0xc
c001e83a:	68 84 27 03 c0       	push   0xc0032784
c001e83f:	e8 32 ab 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e844:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e84b:	89 c7                	mov    edi,eax
c001e84d:	e8 08 ab 00 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e852:	83 c4 10             	add    esp,0x10
c001e855:	84 c0                	test   al,al
c001e857:	0f 84 e4 00 00 00    	je     c001e941 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e85d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e860:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e866:	85 d2                	test   edx,edx
c001e868:	74 0f                	je     c001e879 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e86a:	83 ec 0c             	sub    esp,0xc
c001e86d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e86f:	52                   	push   edx
c001e870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e873:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e876:	83 c4 10             	add    esp,0x10
c001e879:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e883:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e886:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e88c:	85 db                	test   ebx,ebx
c001e88e:	74 16                	je     c001e8a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e890:	83 ec 0c             	sub    esp,0xc
c001e893:	53                   	push   ebx
c001e894:	e8 17 33 ff ff       	call   c0011bb0 <VAS::~VAS()>
c001e899:	58                   	pop    eax
c001e89a:	5a                   	pop    edx
c001e89b:	6a 14                	push   0x14
c001e89d:	53                   	push   ebx
c001e89e:	e8 78 3f ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	68 f4 cd 02 c0       	push   0xc002cdf4
c001e8ae:	e8 48 40 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e8b3:	83 c4 10             	add    esp,0x10
c001e8b6:	83 ec 08             	sub    esp,0x8
c001e8b9:	68 3f 07 00 00       	push   0x73f
c001e8be:	68 02 ce 02 c0       	push   0xc002ce02
c001e8c3:	e8 33 40 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e8c8:	83 c4 2c             	add    esp,0x2c
c001e8cb:	5b                   	pop    ebx
c001e8cc:	5e                   	pop    esi
c001e8cd:	5f                   	pop    edi
c001e8ce:	5d                   	pop    ebp
c001e8cf:	c3                   	ret    
c001e8d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8d4:	83 ec 0c             	sub    esp,0xc
c001e8d7:	68 00 d1 02 c0       	push   0xc002d100
c001e8dc:	e8 ce ba ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001e8e1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e8e4:	83 c4 10             	add    esp,0x10
c001e8e7:	89 f7                	mov    edi,esi
c001e8e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8ed:	e9 8e fe ff ff       	jmp    c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e8f8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e8fe:	75 1c                	jne    c001e91c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e900:	83 ec 0c             	sub    esp,0xc
c001e903:	68 68 d1 02 c0       	push   0xc002d168
c001e908:	e8 ee 3f ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001e90d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e914:	e8 4e fa ff ff       	call   c001e367 <blockTask(TaskState)>
c001e919:	83 c4 10             	add    esp,0x10
c001e91c:	83 ec 08             	sub    esp,0x8
c001e91f:	56                   	push   esi
c001e920:	68 84 27 03 c0       	push   0xc0032784
c001e925:	e8 02 ab 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e92a:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e931:	e8 40 aa 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e936:	83 c4 10             	add    esp,0x10
c001e939:	39 f8                	cmp    eax,edi
c001e93b:	0f 84 1c ff ff ff    	je     c001e85d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	68 84 27 03 c0       	push   0xc0032784
c001e949:	e8 28 aa 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e94e:	c7 04 24 84 27 03 c0 	mov    DWORD PTR [esp],0xc0032784
c001e955:	89 c6                	mov    esi,eax
c001e957:	e8 22 aa 00 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e95c:	83 c4 10             	add    esp,0x10
c001e95f:	39 f3                	cmp    ebx,esi
c001e961:	74 b9                	je     c001e91c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e963:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e966:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e969:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e96f:	75 ab                	jne    c001e91c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e971:	e9 7c ff ff ff       	jmp    c001e8f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e976:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e97a:	83 ec 0c             	sub    esp,0xc
c001e97d:	68 34 d1 02 c0       	push   0xc002d134
c001e982:	e9 55 ff ff ff       	jmp    c001e8dc <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e987:	8b 36                	mov    esi,DWORD PTR [esi]
c001e989:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e98d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e990:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e993:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e999:	01 d7                	add    edi,edx
c001e99b:	89 f8                	mov    eax,edi
c001e99d:	e9 44 fe ff ff       	jmp    c001e7e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e9a2 <cleanerTaskFunction(void*)>:
c001e9a2:	53                   	push   ebx
c001e9a3:	83 ec 08             	sub    esp,0x8
c001e9a6:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e9ab:	48                   	dec    eax
c001e9ac:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e9b1:	75 01                	jne    c001e9b4 <cleanerTaskFunction(void*)+0x12>
c001e9b3:	fb                   	sti    
c001e9b4:	fa                   	cli    
c001e9b5:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001e9ba:	80 3d 4c 27 03 c0 00 	cmp    BYTE PTR ds:0xc003274c,0x0
c001e9c1:	8d 50 01             	lea    edx,[eax+0x1]
c001e9c4:	89 15 68 27 03 c0    	mov    DWORD PTR ds:0xc0032768,edx
c001e9ca:	0f 84 b9 00 00 00    	je     c001ea89 <cleanerTaskFunction(void*)+0xe7>
c001e9d0:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001e9d5:	85 c0                	test   eax,eax
c001e9d7:	75 01                	jne    c001e9da <cleanerTaskFunction(void*)+0x38>
c001e9d9:	fb                   	sti    
c001e9da:	c6 05 4c 27 03 c0 00 	mov    BYTE PTR ds:0xc003274c,0x0
c001e9e1:	fa                   	cli    
c001e9e2:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e9e8:	ff 05 64 27 03 c0    	inc    DWORD PTR ds:0xc0032764
c001e9ee:	fa                   	cli    
c001e9ef:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001e9f5:	eb 3e                	jmp    c001ea35 <cleanerTaskFunction(void*)+0x93>
c001e9f7:	83 ec 0c             	sub    esp,0xc
c001e9fa:	68 6c 27 03 c0       	push   0xc003276c
c001e9ff:	e8 72 a9 00 00       	call   c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea04:	c7 04 24 6c 27 03 c0 	mov    DWORD PTR [esp],0xc003276c
c001ea0b:	89 c3                	mov    ebx,eax
c001ea0d:	e8 6c a9 00 00       	call   c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ea12:	c7 04 24 18 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce18
c001ea19:	e8 dd 3e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ea1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ea21:	e8 b3 fc ff ff       	call   c001e6d9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ea26:	c7 04 24 31 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce31
c001ea2d:	e8 c9 3e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	83 ec 0c             	sub    esp,0xc
c001ea38:	68 6c 27 03 c0       	push   0xc003276c
c001ea3d:	e8 18 a9 00 00       	call   c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ea42:	83 c4 10             	add    esp,0x10
c001ea45:	84 c0                	test   al,al
c001ea47:	74 ae                	je     c001e9f7 <cleanerTaskFunction(void*)+0x55>
c001ea49:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ea4e:	48                   	dec    eax
c001ea4f:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001ea54:	75 01                	jne    c001ea57 <cleanerTaskFunction(void*)+0xb5>
c001ea56:	fb                   	sti    
c001ea57:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001ea5c:	48                   	dec    eax
c001ea5d:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001ea62:	0f 85 3e ff ff ff    	jne    c001e9a6 <cleanerTaskFunction(void*)+0x4>
c001ea68:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001ea6d:	85 c0                	test   eax,eax
c001ea6f:	0f 84 31 ff ff ff    	je     c001e9a6 <cleanerTaskFunction(void*)+0x4>
c001ea75:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001ea7f:	e8 e4 f6 ff ff       	call   c001e168 <schedule()>
c001ea84:	e9 1d ff ff ff       	jmp    c001e9a6 <cleanerTaskFunction(void*)+0x4>
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	6a 02                	push   0x2
c001ea8e:	e8 86 f8 ff ff       	call   c001e319 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	e9 3f ff ff ff       	jmp    c001e9da <cleanerTaskFunction(void*)+0x38>

c001ea9b <terminateTask(int)>:
c001ea9b:	83 ec 14             	sub    esp,0x14
c001ea9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001eaa6:	83 c0 0c             	add    eax,0xc
c001eaa9:	50                   	push   eax
c001eaaa:	68 90 d1 02 c0       	push   0xc002d190
c001eaaf:	e8 47 3e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001eab4:	fa                   	cli    
c001eab5:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001eabb:	ff 05 64 27 03 c0    	inc    DWORD PTR ds:0xc0032764
c001eac1:	fa                   	cli    
c001eac2:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001eac8:	c7 04 24 44 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce44
c001eacf:	e8 27 3e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ead4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ead8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eadd:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001eae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eae8:	5a                   	pop    edx
c001eae9:	59                   	pop    ecx
c001eaea:	50                   	push   eax
c001eaeb:	68 6c 27 03 c0       	push   0xc003276c
c001eaf0:	e8 37 a9 00 00       	call   c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eaf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eafa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001eb01:	c7 04 24 5e ce 02 c0 	mov    DWORD PTR [esp],0xc002ce5e
c001eb08:	e8 ee 3d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	a1 48 27 03 c0       	mov    eax,ds:0xc0032748
c001eb15:	85 c0                	test   eax,eax
c001eb17:	0f 84 8d 00 00 00    	je     c001ebaa <terminateTask(int)+0x10f>
c001eb1d:	83 ec 0c             	sub    esp,0xc
c001eb20:	68 78 ce 02 c0       	push   0xc002ce78
c001eb25:	e8 d1 3d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001eb2a:	58                   	pop    eax
c001eb2b:	c6 05 4c 27 03 c0 01 	mov    BYTE PTR ds:0xc003274c,0x1
c001eb32:	ff 35 48 27 03 c0    	push   DWORD PTR ds:0xc0032748
c001eb38:	e8 ef fa ff ff       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c001eb3d:	c7 04 24 92 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce92
c001eb44:	e8 b2 3d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eb51:	48                   	dec    eax
c001eb52:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001eb57:	75 01                	jne    c001eb5a <terminateTask(int)+0xbf>
c001eb59:	fb                   	sti    
c001eb5a:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001eb5f:	48                   	dec    eax
c001eb60:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001eb65:	75 09                	jne    c001eb70 <terminateTask(int)+0xd5>
c001eb67:	83 3d 60 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032760,0x0
c001eb6e:	75 4c                	jne    c001ebbc <terminateTask(int)+0x121>
c001eb70:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eb75:	48                   	dec    eax
c001eb76:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001eb7b:	75 01                	jne    c001eb7e <terminateTask(int)+0xe3>
c001eb7d:	fb                   	sti    
c001eb7e:	83 ec 0c             	sub    esp,0xc
c001eb81:	68 ca ce 02 c0       	push   0xc002ceca
c001eb86:	e8 70 3d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001eb8b:	83 c4 10             	add    esp,0x10
c001eb8e:	fa                   	cli    
c001eb8f:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001eb95:	e8 ce f5 ff ff       	call   c001e168 <schedule()>
c001eb9a:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eb9f:	48                   	dec    eax
c001eba0:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001eba5:	75 e7                	jne    c001eb8e <terminateTask(int)+0xf3>
c001eba7:	fb                   	sti    
c001eba8:	eb e4                	jmp    c001eb8e <terminateTask(int)+0xf3>
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	68 ac ce 02 c0       	push   0xc002ceac
c001ebb2:	e8 44 3d ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001ebb7:	83 c4 10             	add    esp,0x10
c001ebba:	eb 90                	jmp    c001eb4c <terminateTask(int)+0xb1>
c001ebbc:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001ebc6:	e8 9d f5 ff ff       	call   c001e168 <schedule()>
c001ebcb:	eb a3                	jmp    c001eb70 <terminateTask(int)+0xd5>

c001ebcd <Thr::terminateFromIRQ(int)>:
c001ebcd:	83 ec 18             	sub    esp,0x18
c001ebd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd4:	e8 c2 fe ff ff       	call   c001ea9b <terminateTask(int)>
c001ebd9:	90                   	nop

c001ebda <Semaphore::release()>:
c001ebda:	83 ec 0c             	sub    esp,0xc
c001ebdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebe1:	fa                   	cli    
c001ebe2:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001ebe7:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001ebed:	8d 48 01             	lea    ecx,[eax+0x1]
c001ebf0:	89 0d 64 27 03 c0    	mov    DWORD PTR ds:0xc0032764,ecx
c001ebf6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ebf9:	85 c9                	test   ecx,ecx
c001ebfb:	74 3c                	je     c001ec39 <Semaphore::release()+0x5f>
c001ebfd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ec00:	83 ec 0c             	sub    esp,0xc
c001ec03:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ec06:	51                   	push   ecx
c001ec07:	e8 20 fa ff ff       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c001ec0c:	a1 64 27 03 c0       	mov    eax,ds:0xc0032764
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	48                   	dec    eax
c001ec15:	a3 64 27 03 c0       	mov    ds:0xc0032764,eax
c001ec1a:	85 c0                	test   eax,eax
c001ec1c:	75 09                	jne    c001ec27 <Semaphore::release()+0x4d>
c001ec1e:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001ec23:	85 c0                	test   eax,eax
c001ec25:	75 17                	jne    c001ec3e <Semaphore::release()+0x64>
c001ec27:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ec2c:	48                   	dec    eax
c001ec2d:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001ec32:	75 01                	jne    c001ec35 <Semaphore::release()+0x5b>
c001ec34:	fb                   	sti    
c001ec35:	83 c4 0c             	add    esp,0xc
c001ec38:	c3                   	ret    
c001ec39:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ec3c:	eb d7                	jmp    c001ec15 <Semaphore::release()+0x3b>
c001ec3e:	c7 05 60 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032760,0x0
c001ec48:	e8 1b f5 ff ff       	call   c001e168 <schedule()>
c001ec4d:	eb d8                	jmp    c001ec27 <Semaphore::release()+0x4d>

c001ec4f <__static_initialization_and_destruction_0(int, int)>:
c001ec4f:	83 ec 0c             	sub    esp,0xc
c001ec52:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ec57:	0f 85 88 00 00 00    	jne    c001ece5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ec5d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ec65:	75 7e                	jne    c001ece5 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ec67:	83 ec 0c             	sub    esp,0xc
c001ec6a:	68 84 27 03 c0       	push   0xc0032784
c001ec6f:	e8 48 aa 00 00       	call   c00296bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec74:	83 c4 10             	add    esp,0x10
c001ec77:	83 ec 04             	sub    esp,0x4
c001ec7a:	68 18 e0 02 c0       	push   0xc002e018
c001ec7f:	68 84 27 03 c0       	push   0xc0032784
c001ec84:	68 70 96 02 c0       	push   0xc0029670
c001ec89:	e8 07 3b ff ff       	call   c0012795 <__cxa_atexit>
c001ec8e:	83 c4 10             	add    esp,0x10
c001ec91:	83 ec 0c             	sub    esp,0xc
c001ec94:	68 78 27 03 c0       	push   0xc0032778
c001ec99:	e8 1e aa 00 00       	call   c00296bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec9e:	83 c4 10             	add    esp,0x10
c001eca1:	83 ec 04             	sub    esp,0x4
c001eca4:	68 18 e0 02 c0       	push   0xc002e018
c001eca9:	68 78 27 03 c0       	push   0xc0032778
c001ecae:	68 70 96 02 c0       	push   0xc0029670
c001ecb3:	e8 dd 3a ff ff       	call   c0012795 <__cxa_atexit>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	68 6c 27 03 c0       	push   0xc003276c
c001ecc3:	e8 f4 a9 00 00       	call   c00296bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	83 ec 04             	sub    esp,0x4
c001ecce:	68 18 e0 02 c0       	push   0xc002e018
c001ecd3:	68 6c 27 03 c0       	push   0xc003276c
c001ecd8:	68 70 96 02 c0       	push   0xc0029670
c001ecdd:	e8 b3 3a ff ff       	call   c0012795 <__cxa_atexit>
c001ece2:	83 c4 10             	add    esp,0x10
c001ece5:	90                   	nop
c001ece6:	83 c4 0c             	add    esp,0xc
c001ece9:	c3                   	ret    

c001ecea <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	83 ec 08             	sub    esp,0x8
c001ecf0:	68 ff ff 00 00       	push   0xffff
c001ecf5:	6a 01                	push   0x1
c001ecf7:	e8 53 ff ff ff       	call   c001ec4f <__static_initialization_and_destruction_0(int, int)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	83 c4 0c             	add    esp,0xc
c001ed02:	c3                   	ret    

c001ed03 <Vm::inbv(unsigned short)>:
c001ed03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed07:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ed0c:	75 06                	jne    c001ed14 <Vm::inbv(unsigned short)+0x11>
c001ed0e:	a0 cc 27 03 c0       	mov    al,ds:0xc00327cc
c001ed13:	c3                   	ret    
c001ed14:	ec                   	in     al,dx
c001ed15:	c3                   	ret    

c001ed16 <Vm::outbv(unsigned short, unsigned char)>:
c001ed16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed1e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ed23:	75 25                	jne    c001ed4a <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ed25:	8b 0d cc 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327cc
c001ed2b:	8d 51 01             	lea    edx,[ecx+0x1]
c001ed2e:	88 81 e0 27 03 c0    	mov    BYTE PTR [ecx-0x3ffcd820],al
c001ed34:	89 15 cc 27 03 c0    	mov    DWORD PTR ds:0xc00327cc,edx
c001ed3a:	83 fa 20             	cmp    edx,0x20
c001ed3d:	75 0c                	jne    c001ed4b <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ed3f:	c7 05 cc 27 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00327cc,0x1f
c001ed49:	c3                   	ret    
c001ed4a:	ee                   	out    dx,al
c001ed4b:	c3                   	ret    

c001ed4c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ed4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed51:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed56:	c1 e0 04             	shl    eax,0x4
c001ed59:	01 d0                	add    eax,edx
c001ed5b:	c3                   	ret    

c001ed5c <Vm::getSegment(unsigned int)>:
c001ed5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed60:	c1 e8 10             	shr    eax,0x10
c001ed63:	c3                   	ret    

c001ed64 <Vm::getOffset(unsigned int)>:
c001ed64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed68:	c3                   	ret    

c001ed69 <Vm::mainloop2()>:
c001ed69:	83 ec 18             	sub    esp,0x18
c001ed6c:	fa                   	cli    
c001ed6d:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001ed73:	6a 02                	push   0x2
c001ed75:	c6 05 c5 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c5,0x1
c001ed7c:	e8 98 f5 ff ff       	call   c001e319 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed86:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ed8a:	52                   	push   edx
c001ed8b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ed8f:	52                   	push   edx
c001ed90:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ed94:	52                   	push   edx
c001ed95:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ed99:	50                   	push   eax
c001ed9a:	e8 5b 15 fe ff       	call   c00002fa <goToVM86>
c001ed9f:	83 c4 2c             	add    esp,0x2c
c001eda2:	c3                   	ret    

c001eda3 <Vm::mainVm8086Loop(void*)>:
c001eda3:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eda8:	48                   	dec    eax
c001eda9:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001edae:	75 01                	jne    c001edb1 <Vm::mainVm8086Loop(void*)+0xe>
c001edb0:	fb                   	sti    
c001edb1:	eb b6                	jmp    c001ed69 <Vm::mainloop2()>

c001edb3 <Vm::mainloop3(unsigned long)>:
c001edb3:	83 ec 18             	sub    esp,0x18
c001edb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edba:	fa                   	cli    
c001edbb:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001edc1:	6a 02                	push   0x2
c001edc3:	c6 05 c4 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c4,0x1
c001edca:	a3 c0 27 03 c0       	mov    ds:0xc00327c0,eax
c001edcf:	e8 45 f5 ff ff       	call   c001e319 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edd4:	83 c4 1c             	add    esp,0x1c
c001edd7:	eb 90                	jmp    c001ed69 <Vm::mainloop2()>

c001edd9 <Vm::initialise8086()>:
c001edd9:	83 ec 0c             	sub    esp,0xc
c001eddc:	68 80 00 00 00       	push   0x80
c001ede1:	6a 00                	push   0x0
c001ede3:	68 a3 ed 01 c0       	push   0xc001eda3
c001ede8:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001edee:	e8 31 f1 ff ff       	call   c001df24 <Process::createThread(void (*)(void*), void*, int)>
c001edf3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001edfa:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001edff:	68 00 01 00 00       	push   0x100
c001ee04:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c001ee09:	6a 00                	push   0x0
c001ee0b:	6a 00                	push   0x0
c001ee0d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ee13:	e8 0a 32 ff ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ee18:	83 c4 2c             	add    esp,0x2c
c001ee1b:	c3                   	ret    

c001ee1c <Vm::finish8086()>:
c001ee1c:	53                   	push   ebx
c001ee1d:	83 ec 08             	sub    esp,0x8
c001ee20:	fa                   	cli    
c001ee21:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001ee27:	80 3d c4 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327c4,0x0
c001ee2e:	75 15                	jne    c001ee45 <Vm::finish8086()+0x29>
c001ee30:	e8 33 f3 ff ff       	call   c001e168 <schedule()>
c001ee35:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ee3a:	48                   	dec    eax
c001ee3b:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001ee40:	75 de                	jne    c001ee20 <Vm::finish8086()+0x4>
c001ee42:	fb                   	sti    
c001ee43:	eb db                	jmp    c001ee20 <Vm::finish8086()+0x4>
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	8b 1d c0 27 03 c0    	mov    ebx,DWORD PTR ds:0xc00327c0
c001ee4e:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c001ee54:	c6 05 c4 27 03 c0 00 	mov    BYTE PTR ds:0xc00327c4,0x0
c001ee5b:	e8 cc f7 ff ff       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c001ee60:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ee65:	83 c4 10             	add    esp,0x10
c001ee68:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee6b:	89 15 68 27 03 c0    	mov    DWORD PTR ds:0xc0032768,edx
c001ee71:	85 d2                	test   edx,edx
c001ee73:	75 01                	jne    c001ee76 <Vm::finish8086()+0x5a>
c001ee75:	fb                   	sti    
c001ee76:	89 d8                	mov    eax,ebx
c001ee78:	83 c4 08             	add    esp,0x8
c001ee7b:	5b                   	pop    ebx
c001ee7c:	c3                   	ret    

c001ee7d <Vm::getOutput8086(unsigned char*)>:
c001ee7d:	57                   	push   edi
c001ee7e:	8b 0d cc 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327cc
c001ee84:	56                   	push   esi
c001ee85:	be e0 27 03 c0       	mov    esi,0xc00327e0
c001ee8a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ee8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ee90:	a1 cc 27 03 c0       	mov    eax,ds:0xc00327cc
c001ee95:	5e                   	pop    esi
c001ee96:	c7 05 cc 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327cc,0x0
c001eea0:	5f                   	pop    edi
c001eea1:	c3                   	ret    

c001eea2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eea2:	55                   	push   ebp
c001eea3:	57                   	push   edi
c001eea4:	56                   	push   esi
c001eea5:	53                   	push   ebx
c001eea6:	83 ec 2c             	sub    esp,0x2c
c001eea9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eead:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eeb1:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eeb5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eeb9:	fa                   	cli    
c001eeba:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c001eec0:	0f b6 35 c5 27 03 c0 	movzx  esi,BYTE PTR ds:0xc00327c5
c001eec7:	89 f0                	mov    eax,esi
c001eec9:	84 c0                	test   al,al
c001eecb:	75 1d                	jne    c001eeea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eecd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eed1:	e8 92 f2 ff ff       	call   c001e168 <schedule()>
c001eed6:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eedb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eedf:	48                   	dec    eax
c001eee0:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001eee5:	75 d2                	jne    c001eeb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eee7:	fb                   	sti    
c001eee8:	eb cf                	jmp    c001eeb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eeea:	a1 c8 27 03 c0       	mov    eax,ds:0xc00327c8
c001eeef:	c7 05 cc 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327cc,0x0
c001eef9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001eefd:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ef01:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ef05:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ef09:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ef0d:	50                   	push   eax
c001ef0e:	6a 20                	push   0x20
c001ef10:	6a 00                	push   0x0
c001ef12:	68 e0 27 03 c0       	push   0xc00327e0
c001ef17:	e8 34 18 fe ff       	call   c0000750 <memset>
c001ef1c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ef23:	e8 da 09 ff ff       	call   c000f902 <malloc>
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	89 c3                	mov    ebx,eax
c001ef2d:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c001ef33:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ef37:	50                   	push   eax
c001ef38:	e8 1d 3f ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	85 db                	test   ebx,ebx
c001ef42:	75 0a                	jne    c001ef4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ef44:	83 ec 0c             	sub    esp,0xc
c001ef47:	68 af d1 02 c0       	push   0xc002d1af
c001ef4c:	eb 3e                	jmp    c001ef8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ef4e:	50                   	push   eax
c001ef4f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ef53:	50                   	push   eax
c001ef54:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ef58:	50                   	push   eax
c001ef59:	53                   	push   ebx
c001ef5a:	e8 0b 42 ff ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c001ef5f:	83 c4 10             	add    esp,0x10
c001ef62:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ef67:	74 0a                	je     c001ef73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ef69:	83 ec 0c             	sub    esp,0xc
c001ef6c:	68 c3 d1 02 c0       	push   0xc002d1c3
c001ef71:	eb 19                	jmp    c001ef8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ef73:	51                   	push   ecx
c001ef74:	51                   	push   ecx
c001ef75:	6a 01                	push   0x1
c001ef77:	53                   	push   ebx
c001ef78:	e8 41 3f ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	85 c0                	test   eax,eax
c001ef82:	74 24                	je     c001efa8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	68 dc d1 02 c0       	push   0xc002d1dc
c001ef8c:	e8 1e b4 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001ef91:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	48                   	dec    eax
c001ef9a:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001ef9f:	85 c0                	test   eax,eax
c001efa1:	75 01                	jne    c001efa4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001efa3:	fb                   	sti    
c001efa4:	31 f6                	xor    esi,esi
c001efa6:	eb 58                	jmp    c001f000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001efa8:	0f b7 ed             	movzx  ebp,bp
c001efab:	50                   	push   eax
c001efac:	0f b7 ff             	movzx  edi,di
c001efaf:	50                   	push   eax
c001efb0:	55                   	push   ebp
c001efb1:	57                   	push   edi
c001efb2:	e8 95 fd ff ff       	call   c001ed4c <Vm::realToLinear(unsigned short, unsigned short)>
c001efb7:	5a                   	pop    edx
c001efb8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001efba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001efbe:	51                   	push   ecx
c001efbf:	50                   	push   eax
c001efc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efc8:	53                   	push   ebx
c001efc9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001efcc:	83 c4 14             	add    esp,0x14
c001efcf:	53                   	push   ebx
c001efd0:	e8 47 3f ff ff       	call   c0012f1c <File::close()>
c001efd5:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001efda:	83 c4 10             	add    esp,0x10
c001efdd:	48                   	dec    eax
c001efde:	c6 05 c5 27 03 c0 00 	mov    BYTE PTR ds:0xc00327c5,0x0
c001efe5:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c001efea:	85 c0                	test   eax,eax
c001efec:	75 01                	jne    c001efef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001efee:	fb                   	sti    
c001efef:	83 ec 0c             	sub    esp,0xc
c001eff2:	ff 35 c8 27 03 c0    	push   DWORD PTR ds:0xc00327c8
c001eff8:	e8 2f f6 ff ff       	call   c001e62c <unblockTask(ThreadControlBlock*)>
c001effd:	83 c4 10             	add    esp,0x10
c001f000:	83 c4 2c             	add    esp,0x2c
c001f003:	89 f0                	mov    eax,esi
c001f005:	5b                   	pop    ebx
c001f006:	5e                   	pop    esi
c001f007:	5f                   	pop    edi
c001f008:	5d                   	pop    ebp
c001f009:	c3                   	ret    

c001f00a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f00a:	57                   	push   edi
c001f00b:	56                   	push   esi
c001f00c:	53                   	push   ebx
c001f00d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f015:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f019:	83 e8 06             	sub    eax,0x6
c001f01c:	0f b7 c0             	movzx  eax,ax
c001f01f:	50                   	push   eax
c001f020:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f025:	50                   	push   eax
c001f026:	e8 21 fd ff ff       	call   c001ed4c <Vm::realToLinear(unsigned short, unsigned short)>
c001f02b:	5a                   	pop    edx
c001f02c:	5e                   	pop    esi
c001f02d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f030:	8d 56 fa             	lea    edx,[esi-0x6]
c001f033:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f039:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f03c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f03f:	83 c2 02             	add    edx,0x2
c001f042:	66 89 10             	mov    WORD PTR [eax],dx
c001f045:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f048:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f04c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f04f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f053:	89 d6                	mov    esi,edx
c001f055:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f05b:	66 81 e6 ff fd       	and    si,0xfdff
c001f060:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f064:	74 07                	je     c001f06d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f066:	89 d6                	mov    esi,edx
c001f068:	66 81 ce 00 02       	or     si,0x200
c001f06d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f076:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f07a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f082:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f085:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f08d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f090:	5b                   	pop    ebx
c001f091:	5e                   	pop    esi
c001f092:	5f                   	pop    edi
c001f093:	c3                   	ret    

c001f094 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f094:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f099:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f09e:	c1 e0 04             	shl    eax,0x4
c001f0a1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f0a4:	c3                   	ret    

c001f0a5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f0a5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0aa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0af:	c1 e0 04             	shl    eax,0x4
c001f0b2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f0b6:	c3                   	ret    

c001f0b7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f0b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0c1:	c1 e0 04             	shl    eax,0x4
c001f0c4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f0c7:	c3                   	ret    

c001f0c8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f0c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0d2:	c1 e0 04             	shl    eax,0x4
c001f0d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0d9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f0dc:	c3                   	ret    

c001f0dd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f0dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0e7:	c1 e0 04             	shl    eax,0x4
c001f0ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0ee:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f0f2:	c3                   	ret    

c001f0f3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f0f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0fd:	c1 e0 04             	shl    eax,0x4
c001f100:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f104:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f107:	c3                   	ret    

c001f108 <Vm::faultHandler(regs*)>:
c001f108:	55                   	push   ebp
c001f109:	57                   	push   edi
c001f10a:	56                   	push   esi
c001f10b:	53                   	push   ebx
c001f10c:	83 ec 1c             	sub    esp,0x1c
c001f10f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f113:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f116:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f11a:	0f b7 f8             	movzx  edi,ax
c001f11d:	52                   	push   edx
c001f11e:	0f b7 c0             	movzx  eax,ax
c001f121:	50                   	push   eax
c001f122:	e8 25 fc ff ff       	call   c001ed4c <Vm::realToLinear(unsigned short, unsigned short)>
c001f127:	5a                   	pop    edx
c001f128:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f12b:	59                   	pop    ecx
c001f12c:	89 c1                	mov    ecx,eax
c001f12e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f131:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f135:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f13a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f13e:	0f b7 c5             	movzx  eax,bp
c001f141:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f145:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f149:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f14d:	e8 fa fb ff ff       	call   c001ed4c <Vm::realToLinear(unsigned short, unsigned short)>
c001f152:	5e                   	pop    esi
c001f153:	be 06 00 00 00       	mov    esi,0x6
c001f158:	5a                   	pop    edx
c001f159:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f15e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f163:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f166:	80 fa 9d             	cmp    dl,0x9d
c001f169:	0f 84 2c 02 00 00    	je     c001f39b <Vm::faultHandler(regs*)+0x293>
c001f16f:	0f 87 91 00 00 00    	ja     c001f206 <Vm::faultHandler(regs*)+0xfe>
c001f175:	80 fa 66             	cmp    dl,0x66
c001f178:	0f 84 98 01 00 00    	je     c001f316 <Vm::faultHandler(regs*)+0x20e>
c001f17e:	77 47                	ja     c001f1c7 <Vm::faultHandler(regs*)+0xbf>
c001f180:	80 fa 36             	cmp    dl,0x36
c001f183:	0f 84 80 01 00 00    	je     c001f309 <Vm::faultHandler(regs*)+0x201>
c001f189:	77 1a                	ja     c001f1a5 <Vm::faultHandler(regs*)+0x9d>
c001f18b:	80 fa 26             	cmp    dl,0x26
c001f18e:	0f 84 4e 01 00 00    	je     c001f2e2 <Vm::faultHandler(regs*)+0x1da>
c001f194:	80 fa 2e             	cmp    dl,0x2e
c001f197:	0f 85 e2 05 00 00    	jne    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f19d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1a0:	31 f6                	xor    esi,esi
c001f1a2:	41                   	inc    ecx
c001f1a3:	eb be                	jmp    c001f163 <Vm::faultHandler(regs*)+0x5b>
c001f1a5:	80 fa 64             	cmp    dl,0x64
c001f1a8:	0f 84 41 01 00 00    	je     c001f2ef <Vm::faultHandler(regs*)+0x1e7>
c001f1ae:	0f 87 48 01 00 00    	ja     c001f2fc <Vm::faultHandler(regs*)+0x1f4>
c001f1b4:	80 fa 3e             	cmp    dl,0x3e
c001f1b7:	0f 85 c2 05 00 00    	jne    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f1bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1c0:	be 01 00 00 00       	mov    esi,0x1
c001f1c5:	eb db                	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f1c7:	80 fa 6d             	cmp    dl,0x6d
c001f1ca:	0f 84 ec 02 00 00    	je     c001f4bc <Vm::faultHandler(regs*)+0x3b4>
c001f1d0:	77 17                	ja     c001f1e9 <Vm::faultHandler(regs*)+0xe1>
c001f1d2:	80 fa 67             	cmp    dl,0x67
c001f1d5:	0f 84 48 01 00 00    	je     c001f323 <Vm::faultHandler(regs*)+0x21b>
c001f1db:	80 fa 6c             	cmp    dl,0x6c
c001f1de:	0f 84 69 02 00 00    	je     c001f44d <Vm::faultHandler(regs*)+0x345>
c001f1e4:	e9 96 05 00 00       	jmp    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f1e9:	80 fa 6f             	cmp    dl,0x6f
c001f1ec:	0f 84 f4 03 00 00    	je     c001f5e6 <Vm::faultHandler(regs*)+0x4de>
c001f1f2:	0f 82 59 03 00 00    	jb     c001f551 <Vm::faultHandler(regs*)+0x449>
c001f1f8:	80 fa 9c             	cmp    dl,0x9c
c001f1fb:	0f 84 2f 01 00 00    	je     c001f330 <Vm::faultHandler(regs*)+0x228>
c001f201:	e9 79 05 00 00       	jmp    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f206:	80 fa ec             	cmp    dl,0xec
c001f209:	0f 84 14 05 00 00    	je     c001f723 <Vm::faultHandler(regs*)+0x61b>
c001f20f:	77 7b                	ja     c001f28c <Vm::faultHandler(regs*)+0x184>
c001f211:	80 fa e4             	cmp    dl,0xe4
c001f214:	0f 84 93 04 00 00    	je     c001f6ad <Vm::faultHandler(regs*)+0x5a5>
c001f21a:	77 53                	ja     c001f26f <Vm::faultHandler(regs*)+0x167>
c001f21c:	80 fa cd             	cmp    dl,0xcd
c001f21f:	0f 84 d9 01 00 00    	je     c001f3fe <Vm::faultHandler(regs*)+0x2f6>
c001f225:	80 fa cf             	cmp    dl,0xcf
c001f228:	0f 85 51 05 00 00    	jne    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f22e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f231:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f234:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f238:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f23b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f23f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f245:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f248:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f24c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f252:	66 c1 e8 09          	shr    ax,0x9
c001f256:	83 e0 01             	and    eax,0x1
c001f259:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f25c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f25f:	83 c0 06             	add    eax,0x6
c001f262:	25 ff ff 00 00       	and    eax,0xffff
c001f267:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f26a:	e9 0c 05 00 00       	jmp    c001f77b <Vm::faultHandler(regs*)+0x673>
c001f26f:	80 fa e6             	cmp    dl,0xe6
c001f272:	0f 84 7f 04 00 00    	je     c001f6f7 <Vm::faultHandler(regs*)+0x5ef>
c001f278:	0f 82 4b 04 00 00    	jb     c001f6c9 <Vm::faultHandler(regs*)+0x5c1>
c001f27e:	80 fa e7             	cmp    dl,0xe7
c001f281:	0f 84 87 04 00 00    	je     c001f70e <Vm::faultHandler(regs*)+0x606>
c001f287:	e9 f3 04 00 00       	jmp    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f28c:	80 fa ef             	cmp    dl,0xef
c001f28f:	0f 84 d1 04 00 00    	je     c001f766 <Vm::faultHandler(regs*)+0x65e>
c001f295:	77 28                	ja     c001f2bf <Vm::faultHandler(regs*)+0x1b7>
c001f297:	80 fa ed             	cmp    dl,0xed
c001f29a:	0f 84 9f 04 00 00    	je     c001f73f <Vm::faultHandler(regs*)+0x637>
c001f2a0:	80 fa ee             	cmp    dl,0xee
c001f2a3:	0f 85 d6 04 00 00    	jne    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f2a9:	50                   	push   eax
c001f2aa:	50                   	push   eax
c001f2ab:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f2af:	50                   	push   eax
c001f2b0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f2b4:	50                   	push   eax
c001f2b5:	e8 5c fa ff ff       	call   c001ed16 <Vm::outbv(unsigned short, unsigned char)>
c001f2ba:	e9 9f 04 00 00       	jmp    c001f75e <Vm::faultHandler(regs*)+0x656>
c001f2bf:	80 fa fa             	cmp    dl,0xfa
c001f2c2:	0f 84 69 01 00 00    	je     c001f431 <Vm::faultHandler(regs*)+0x329>
c001f2c8:	80 fa fb             	cmp    dl,0xfb
c001f2cb:	0f 84 6e 01 00 00    	je     c001f43f <Vm::faultHandler(regs*)+0x337>
c001f2d1:	80 fa f3             	cmp    dl,0xf3
c001f2d4:	0f 85 a5 04 00 00    	jne    c001f77f <Vm::faultHandler(regs*)+0x677>
c001f2da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2dd:	e9 c0 fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f2e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2e5:	be 02 00 00 00       	mov    esi,0x2
c001f2ea:	e9 b3 fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f2ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2f2:	be 03 00 00 00       	mov    esi,0x3
c001f2f7:	e9 a6 fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f2fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2ff:	be 04 00 00 00       	mov    esi,0x4
c001f304:	e9 99 fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f309:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f30c:	be 05 00 00 00       	mov    esi,0x5
c001f311:	e9 8c fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f316:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f319:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f31e:	e9 7f fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f323:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f326:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f32b:	e9 72 fe ff ff       	jmp    c001f1a2 <Vm::faultHandler(regs*)+0x9a>
c001f330:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f333:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f337:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f33c:	74 30                	je     c001f36e <Vm::faultHandler(regs*)+0x266>
c001f33e:	83 e9 04             	sub    ecx,0x4
c001f341:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f347:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f34d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f350:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f353:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f359:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f35d:	0f 84 15 04 00 00    	je     c001f778 <Vm::faultHandler(regs*)+0x670>
c001f363:	80 ce 02             	or     dh,0x2
c001f366:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f369:	e9 0a 04 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f36e:	83 e9 02             	sub    ecx,0x2
c001f371:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f377:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f37a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f37e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f384:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f388:	74 05                	je     c001f38f <Vm::faultHandler(regs*)+0x287>
c001f38a:	80 ce 02             	or     dh,0x2
c001f38d:	eb 03                	jmp    c001f392 <Vm::faultHandler(regs*)+0x28a>
c001f38f:	80 e6 fd             	and    dh,0xfd
c001f392:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f396:	e9 dd 03 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f39b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3a0:	74 2a                	je     c001f3cc <Vm::faultHandler(regs*)+0x2c4>
c001f3a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f3a4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f3aa:	81 ca 00 02 02 00    	or     edx,0x20200
c001f3b0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f3b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f3bb:	c1 e8 09             	shr    eax,0x9
c001f3be:	83 e0 01             	and    eax,0x1
c001f3c1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f3c4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f3c7:	83 c0 04             	add    eax,0x4
c001f3ca:	eb 25                	jmp    c001f3f1 <Vm::faultHandler(regs*)+0x2e9>
c001f3cc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f3cf:	81 ca 00 02 02 00    	or     edx,0x20200
c001f3d5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f3d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f3db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f3e1:	66 c1 e8 09          	shr    ax,0x9
c001f3e5:	83 e0 01             	and    eax,0x1
c001f3e8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f3eb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f3ee:	83 c0 02             	add    eax,0x2
c001f3f1:	25 ff ff 00 00       	and    eax,0xffff
c001f3f6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f3f9:	e9 7a 03 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f3fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f402:	3c ee                	cmp    al,0xee
c001f404:	75 10                	jne    c001f416 <Vm::faultHandler(regs*)+0x30e>
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f40c:	e8 a2 f9 ff ff       	call   c001edb3 <Vm::mainloop3(unsigned long)>
c001f411:	e9 4b 03 00 00       	jmp    c001f761 <Vm::faultHandler(regs*)+0x659>
c001f416:	83 ec 0c             	sub    esp,0xc
c001f419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f41d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f421:	51                   	push   ecx
c001f422:	50                   	push   eax
c001f423:	53                   	push   ebx
c001f424:	e8 e1 fb ff ff       	call   c001f00a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f429:	83 c4 20             	add    esp,0x20
c001f42c:	e9 4a 03 00 00       	jmp    c001f77b <Vm::faultHandler(regs*)+0x673>
c001f431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f436:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f43a:	e9 39 03 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f43f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f444:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f448:	e9 2b 03 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f44d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f450:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f455:	74 2b                	je     c001f482 <Vm::faultHandler(regs*)+0x37a>
c001f457:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f45e:	76 22                	jbe    c001f482 <Vm::faultHandler(regs*)+0x37a>
c001f460:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f464:	50                   	push   eax
c001f465:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f469:	50                   	push   eax
c001f46a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f46e:	50                   	push   eax
c001f46f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f473:	50                   	push   eax
c001f474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f478:	50                   	push   eax
c001f479:	6a 6c                	push   0x6c
c001f47b:	6a 6c                	push   0x6c
c001f47d:	e9 b9 01 00 00       	jmp    c001f63b <Vm::faultHandler(regs*)+0x533>
c001f482:	83 ec 0c             	sub    esp,0xc
c001f485:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f489:	0f b7 f6             	movzx  esi,si
c001f48c:	50                   	push   eax
c001f48d:	e8 71 f8 ff ff       	call   c001ed03 <Vm::inbv(unsigned short)>
c001f492:	83 c4 0c             	add    esp,0xc
c001f495:	0f b6 c0             	movzx  eax,al
c001f498:	50                   	push   eax
c001f499:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f49d:	50                   	push   eax
c001f49e:	56                   	push   esi
c001f49f:	e8 24 fc ff ff       	call   c001f0c8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f4a4:	83 c4 10             	add    esp,0x10
c001f4a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4aa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f4ae:	74 03                	je     c001f4b3 <Vm::faultHandler(regs*)+0x3ab>
c001f4b0:	48                   	dec    eax
c001f4b1:	eb 01                	jmp    c001f4b4 <Vm::faultHandler(regs*)+0x3ac>
c001f4b3:	40                   	inc    eax
c001f4b4:	0f b7 c0             	movzx  eax,ax
c001f4b7:	e9 8d 00 00 00       	jmp    c001f549 <Vm::faultHandler(regs*)+0x441>
c001f4bc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f4bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4c2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4c7:	74 29                	je     c001f4f2 <Vm::faultHandler(regs*)+0x3ea>
c001f4c9:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4ce:	76 22                	jbe    c001f4f2 <Vm::faultHandler(regs*)+0x3ea>
c001f4d0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4d4:	50                   	push   eax
c001f4d5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4d9:	50                   	push   eax
c001f4da:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4de:	50                   	push   eax
c001f4df:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4e3:	50                   	push   eax
c001f4e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4e8:	50                   	push   eax
c001f4e9:	6a 6d                	push   0x6d
c001f4eb:	6a 6d                	push   0x6d
c001f4ed:	e9 49 01 00 00       	jmp    c001f63b <Vm::faultHandler(regs*)+0x533>
c001f4f2:	0f b7 c8             	movzx  ecx,ax
c001f4f5:	0f b7 f6             	movzx  esi,si
c001f4f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f4fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f500:	74 20                	je     c001f522 <Vm::faultHandler(regs*)+0x41a>
c001f502:	ed                   	in     eax,dx
c001f503:	55                   	push   ebp
c001f504:	50                   	push   eax
c001f505:	51                   	push   ecx
c001f506:	56                   	push   esi
c001f507:	e8 e7 fb ff ff       	call   c001f0f3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f50c:	83 c4 10             	add    esp,0x10
c001f50f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f512:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f516:	74 05                	je     c001f51d <Vm::faultHandler(regs*)+0x415>
c001f518:	83 e8 04             	sub    eax,0x4
c001f51b:	eb 27                	jmp    c001f544 <Vm::faultHandler(regs*)+0x43c>
c001f51d:	83 c0 04             	add    eax,0x4
c001f520:	eb 22                	jmp    c001f544 <Vm::faultHandler(regs*)+0x43c>
c001f522:	66 ed                	in     ax,dx
c001f524:	0f b7 c0             	movzx  eax,ax
c001f527:	57                   	push   edi
c001f528:	50                   	push   eax
c001f529:	51                   	push   ecx
c001f52a:	56                   	push   esi
c001f52b:	e8 ad fb ff ff       	call   c001f0dd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f530:	83 c4 10             	add    esp,0x10
c001f533:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f536:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f53a:	74 05                	je     c001f541 <Vm::faultHandler(regs*)+0x439>
c001f53c:	83 e8 02             	sub    eax,0x2
c001f53f:	eb 03                	jmp    c001f544 <Vm::faultHandler(regs*)+0x43c>
c001f541:	83 c0 02             	add    eax,0x2
c001f544:	25 ff ff 00 00       	and    eax,0xffff
c001f549:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f54c:	e9 27 02 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f551:	8d 46 ff             	lea    eax,[esi-0x1]
c001f554:	3c 05                	cmp    al,0x5
c001f556:	77 24                	ja     c001f57c <Vm::faultHandler(regs*)+0x474>
c001f558:	0f b6 c0             	movzx  eax,al
c001f55b:	ff 24 85 50 d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2db0]
c001f562:	0f b7 fd             	movzx  edi,bp
c001f565:	eb 15                	jmp    c001f57c <Vm::faultHandler(regs*)+0x474>
c001f567:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f56b:	eb 0f                	jmp    c001f57c <Vm::faultHandler(regs*)+0x474>
c001f56d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f571:	eb 09                	jmp    c001f57c <Vm::faultHandler(regs*)+0x474>
c001f573:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f577:	eb 03                	jmp    c001f57c <Vm::faultHandler(regs*)+0x474>
c001f579:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f57c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f57f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f584:	74 29                	je     c001f5af <Vm::faultHandler(regs*)+0x4a7>
c001f586:	3d ff ff 00 00       	cmp    eax,0xffff
c001f58b:	76 22                	jbe    c001f5af <Vm::faultHandler(regs*)+0x4a7>
c001f58d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f591:	50                   	push   eax
c001f592:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f596:	50                   	push   eax
c001f597:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f59b:	50                   	push   eax
c001f59c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f5a0:	50                   	push   eax
c001f5a1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5a5:	50                   	push   eax
c001f5a6:	6a 6e                	push   0x6e
c001f5a8:	6a 6e                	push   0x6e
c001f5aa:	e9 8c 00 00 00       	jmp    c001f63b <Vm::faultHandler(regs*)+0x533>
c001f5af:	0f b7 c0             	movzx  eax,ax
c001f5b2:	52                   	push   edx
c001f5b3:	52                   	push   edx
c001f5b4:	50                   	push   eax
c001f5b5:	57                   	push   edi
c001f5b6:	e8 d9 fa ff ff       	call   c001f094 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f5bb:	59                   	pop    ecx
c001f5bc:	0f b6 c0             	movzx  eax,al
c001f5bf:	5e                   	pop    esi
c001f5c0:	50                   	push   eax
c001f5c1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f5c5:	50                   	push   eax
c001f5c6:	e8 4b f7 ff ff       	call   c001ed16 <Vm::outbv(unsigned short, unsigned char)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f5d1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f5d5:	74 03                	je     c001f5da <Vm::faultHandler(regs*)+0x4d2>
c001f5d7:	48                   	dec    eax
c001f5d8:	eb 01                	jmp    c001f5db <Vm::faultHandler(regs*)+0x4d3>
c001f5da:	40                   	inc    eax
c001f5db:	0f b7 c0             	movzx  eax,ax
c001f5de:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f5e1:	e9 92 01 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f5e6:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5e9:	3c 05                	cmp    al,0x5
c001f5eb:	77 1f                	ja     c001f60c <Vm::faultHandler(regs*)+0x504>
c001f5ed:	0f b6 c0             	movzx  eax,al
c001f5f0:	ff 24 85 68 d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2d98]
c001f5f7:	89 ef                	mov    edi,ebp
c001f5f9:	eb 11                	jmp    c001f60c <Vm::faultHandler(regs*)+0x504>
c001f5fb:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f5fe:	eb 0c                	jmp    c001f60c <Vm::faultHandler(regs*)+0x504>
c001f600:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f603:	eb 07                	jmp    c001f60c <Vm::faultHandler(regs*)+0x504>
c001f605:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f608:	eb 02                	jmp    c001f60c <Vm::faultHandler(regs*)+0x504>
c001f60a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f60c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f60f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f614:	74 37                	je     c001f64d <Vm::faultHandler(regs*)+0x545>
c001f616:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f61c:	76 2f                	jbe    c001f64d <Vm::faultHandler(regs*)+0x545>
c001f61e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f622:	50                   	push   eax
c001f623:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f627:	50                   	push   eax
c001f628:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f62c:	50                   	push   eax
c001f62d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f631:	50                   	push   eax
c001f632:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f636:	50                   	push   eax
c001f637:	6a 6f                	push   0x6f
c001f639:	6a 6f                	push   0x6f
c001f63b:	68 f5 d1 02 c0       	push   0xc002d1f5
c001f640:	e8 b6 32 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001f645:	83 c4 20             	add    esp,0x20
c001f648:	e9 86 01 00 00       	jmp    c001f7d3 <Vm::faultHandler(regs*)+0x6cb>
c001f64d:	0f b7 d7             	movzx  edx,di
c001f650:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f653:	0f b7 c6             	movzx  eax,si
c001f656:	81 e1 00 04 00 00    	and    ecx,0x400
c001f65c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f65f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f664:	74 1d                	je     c001f683 <Vm::faultHandler(regs*)+0x57b>
c001f666:	55                   	push   ebp
c001f667:	55                   	push   ebp
c001f668:	50                   	push   eax
c001f669:	52                   	push   edx
c001f66a:	e8 48 fa ff ff       	call   c001f0b7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f66f:	83 c4 10             	add    esp,0x10
c001f672:	89 fa                	mov    edx,edi
c001f674:	ef                   	out    dx,eax
c001f675:	85 c9                	test   ecx,ecx
c001f677:	74 05                	je     c001f67e <Vm::faultHandler(regs*)+0x576>
c001f679:	83 ee 04             	sub    esi,0x4
c001f67c:	eb 21                	jmp    c001f69f <Vm::faultHandler(regs*)+0x597>
c001f67e:	83 c6 04             	add    esi,0x4
c001f681:	eb 1c                	jmp    c001f69f <Vm::faultHandler(regs*)+0x597>
c001f683:	55                   	push   ebp
c001f684:	55                   	push   ebp
c001f685:	50                   	push   eax
c001f686:	52                   	push   edx
c001f687:	e8 19 fa ff ff       	call   c001f0a5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f68c:	83 c4 10             	add    esp,0x10
c001f68f:	89 fa                	mov    edx,edi
c001f691:	66 ef                	out    dx,ax
c001f693:	85 c9                	test   ecx,ecx
c001f695:	74 05                	je     c001f69c <Vm::faultHandler(regs*)+0x594>
c001f697:	83 ee 02             	sub    esi,0x2
c001f69a:	eb 03                	jmp    c001f69f <Vm::faultHandler(regs*)+0x597>
c001f69c:	83 c6 02             	add    esi,0x2
c001f69f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f6a5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f6a8:	e9 cb 00 00 00       	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f6ad:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6bb:	50                   	push   eax
c001f6bc:	e8 42 f6 ff ff       	call   c001ed03 <Vm::inbv(unsigned short)>
c001f6c1:	0f b6 c0             	movzx  eax,al
c001f6c4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f6c7:	eb 3f                	jmp    c001f708 <Vm::faultHandler(regs*)+0x600>
c001f6c9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6ce:	74 07                	je     c001f6d7 <Vm::faultHandler(regs*)+0x5cf>
c001f6d0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f6d4:	ed                   	in     eax,dx
c001f6d5:	eb 14                	jmp    c001f6eb <Vm::faultHandler(regs*)+0x5e3>
c001f6d7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f6da:	66 31 f6             	xor    si,si
c001f6dd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f6e0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f6e4:	66 ed                	in     ax,dx
c001f6e6:	0f b7 c0             	movzx  eax,ax
c001f6e9:	09 f0                	or     eax,esi
c001f6eb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6ee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f6f2:	e9 84 00 00 00       	jmp    c001f77b <Vm::faultHandler(regs*)+0x673>
c001f6f7:	52                   	push   edx
c001f6f8:	52                   	push   edx
c001f6f9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f6fd:	50                   	push   eax
c001f6fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f702:	50                   	push   eax
c001f703:	e8 0e f6 ff ff       	call   c001ed16 <Vm::outbv(unsigned short, unsigned char)>
c001f708:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f70c:	eb 53                	jmp    c001f761 <Vm::faultHandler(regs*)+0x659>
c001f70e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f711:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f715:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f71a:	74 03                	je     c001f71f <Vm::faultHandler(regs*)+0x617>
c001f71c:	ef                   	out    dx,eax
c001f71d:	eb cf                	jmp    c001f6ee <Vm::faultHandler(regs*)+0x5e6>
c001f71f:	66 ef                	out    dx,ax
c001f721:	eb cb                	jmp    c001f6ee <Vm::faultHandler(regs*)+0x5e6>
c001f723:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f72a:	83 ec 0c             	sub    esp,0xc
c001f72d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f731:	50                   	push   eax
c001f732:	e8 cc f5 ff ff       	call   c001ed03 <Vm::inbv(unsigned short)>
c001f737:	0f b6 c0             	movzx  eax,al
c001f73a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f73d:	eb 1f                	jmp    c001f75e <Vm::faultHandler(regs*)+0x656>
c001f73f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f742:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f747:	74 03                	je     c001f74c <Vm::faultHandler(regs*)+0x644>
c001f749:	ed                   	in     eax,dx
c001f74a:	eb 0d                	jmp    c001f759 <Vm::faultHandler(regs*)+0x651>
c001f74c:	66 ed                	in     ax,dx
c001f74e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f751:	0f b7 c0             	movzx  eax,ax
c001f754:	66 31 d2             	xor    dx,dx
c001f757:	09 d0                	or     eax,edx
c001f759:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f75c:	eb 1a                	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f75e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f761:	83 c4 10             	add    esp,0x10
c001f764:	eb 15                	jmp    c001f77b <Vm::faultHandler(regs*)+0x673>
c001f766:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f769:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f76c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f771:	74 03                	je     c001f776 <Vm::faultHandler(regs*)+0x66e>
c001f773:	ef                   	out    dx,eax
c001f774:	eb 02                	jmp    c001f778 <Vm::faultHandler(regs*)+0x670>
c001f776:	66 ef                	out    dx,ax
c001f778:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f77b:	b0 01                	mov    al,0x1
c001f77d:	eb 56                	jmp    c001f7d5 <Vm::faultHandler(regs*)+0x6cd>
c001f77f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f783:	50                   	push   eax
c001f784:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f788:	50                   	push   eax
c001f789:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f78d:	50                   	push   eax
c001f78e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f792:	50                   	push   eax
c001f793:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f797:	50                   	push   eax
c001f798:	52                   	push   edx
c001f799:	52                   	push   edx
c001f79a:	68 22 d2 02 c0       	push   0xc002d222
c001f79f:	e8 57 31 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c001f7a4:	83 c4 20             	add    esp,0x20
c001f7a7:	83 ec 0c             	sub    esp,0xc
c001f7aa:	6a 60                	push   0x60
c001f7ac:	e8 52 f5 ff ff       	call   c001ed03 <Vm::inbv(unsigned short)>
c001f7b1:	83 c4 10             	add    esp,0x10
c001f7b4:	3c 1c                	cmp    al,0x1c
c001f7b6:	74 04                	je     c001f7bc <Vm::faultHandler(regs*)+0x6b4>
c001f7b8:	3c 5a                	cmp    al,0x5a
c001f7ba:	75 eb                	jne    c001f7a7 <Vm::faultHandler(regs*)+0x69f>
c001f7bc:	3c 5a                	cmp    al,0x5a
c001f7be:	74 04                	je     c001f7c4 <Vm::faultHandler(regs*)+0x6bc>
c001f7c0:	3c 1c                	cmp    al,0x1c
c001f7c2:	75 0f                	jne    c001f7d3 <Vm::faultHandler(regs*)+0x6cb>
c001f7c4:	83 ec 0c             	sub    esp,0xc
c001f7c7:	6a 60                	push   0x60
c001f7c9:	e8 35 f5 ff ff       	call   c001ed03 <Vm::inbv(unsigned short)>
c001f7ce:	83 c4 10             	add    esp,0x10
c001f7d1:	eb e9                	jmp    c001f7bc <Vm::faultHandler(regs*)+0x6b4>
c001f7d3:	31 c0                	xor    eax,eax
c001f7d5:	83 c4 1c             	add    esp,0x1c
c001f7d8:	5b                   	pop    ebx
c001f7d9:	5e                   	pop    esi
c001f7da:	5f                   	pop    edi
c001f7db:	5d                   	pop    ebp
c001f7dc:	c3                   	ret    

c001f7dd <Vm::fpuInternalTo32(unsigned long long)>:
c001f7dd:	57                   	push   edi
c001f7de:	56                   	push   esi
c001f7df:	53                   	push   ebx
c001f7e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e8:	89 d6                	mov    esi,edx
c001f7ea:	89 d7                	mov    edi,edx
c001f7ec:	89 c1                	mov    ecx,eax
c001f7ee:	c1 ef 14             	shr    edi,0x14
c001f7f1:	89 d3                	mov    ebx,edx
c001f7f3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f7f9:	31 d2                	xor    edx,edx
c001f7fb:	89 f8                	mov    eax,edi
c001f7fd:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f803:	bf ff 00 00 00       	mov    edi,0xff
c001f808:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f80d:	83 d2 ff             	adc    edx,0xffffffff
c001f810:	39 c7                	cmp    edi,eax
c001f812:	bf 00 00 00 00       	mov    edi,0x0
c001f817:	19 d7                	sbb    edi,edx
c001f819:	72 15                	jb     c001f830 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f81b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f81f:	c1 e0 17             	shl    eax,0x17
c001f822:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f828:	09 f1                	or     ecx,esi
c001f82a:	09 c1                	or     ecx,eax
c001f82c:	89 cf                	mov    edi,ecx
c001f82e:	eb 02                	jmp    c001f832 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f830:	31 ff                	xor    edi,edi
c001f832:	89 f8                	mov    eax,edi
c001f834:	5b                   	pop    ebx
c001f835:	5e                   	pop    esi
c001f836:	5f                   	pop    edi
c001f837:	c3                   	ret    

c001f838 <Vm::fpuInternalTo64(unsigned long long)>:
c001f838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f83c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f840:	c3                   	ret    

c001f841 <Vm::fpu32ToInternal(unsigned int)>:
c001f841:	57                   	push   edi
c001f842:	31 ff                	xor    edi,edi
c001f844:	56                   	push   esi
c001f845:	53                   	push   ebx
c001f846:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f84a:	89 cb                	mov    ebx,ecx
c001f84c:	89 ce                	mov    esi,ecx
c001f84e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f854:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f85a:	c1 e9 17             	shr    ecx,0x17
c001f85d:	89 f0                	mov    eax,esi
c001f85f:	0f b6 d1             	movzx  edx,cl
c001f862:	81 c2 80 03 00 00    	add    edx,0x380
c001f868:	89 d1                	mov    ecx,edx
c001f86a:	89 fa                	mov    edx,edi
c001f86c:	c1 e1 14             	shl    ecx,0x14
c001f86f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f873:	c1 e0 1d             	shl    eax,0x1d
c001f876:	89 d7                	mov    edi,edx
c001f878:	89 c6                	mov    esi,eax
c001f87a:	89 ca                	mov    edx,ecx
c001f87c:	89 f0                	mov    eax,esi
c001f87e:	09 fa                	or     edx,edi
c001f880:	09 da                	or     edx,ebx
c001f882:	5b                   	pop    ebx
c001f883:	5e                   	pop    esi
c001f884:	5f                   	pop    edi
c001f885:	c3                   	ret    

c001f886 <Vm::fpu64ToInternal(unsigned long long)>:
c001f886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f88e:	c3                   	ret    

c001f88f <Vm::fpuFloatToLong(unsigned long long)>:
c001f88f:	57                   	push   edi
c001f890:	31 c0                	xor    eax,eax
c001f892:	56                   	push   esi
c001f893:	31 d2                	xor    edx,edx
c001f895:	53                   	push   ebx
c001f896:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f89a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f89e:	89 d9                	mov    ecx,ebx
c001f8a0:	c1 e9 14             	shr    ecx,0x14
c001f8a3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f8a9:	89 cf                	mov    edi,ecx
c001f8ab:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f8b1:	78 33                	js     c001f8e6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f8b3:	89 d9                	mov    ecx,ebx
c001f8b5:	89 f0                	mov    eax,esi
c001f8b7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8bd:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f8c3:	89 ca                	mov    edx,ecx
c001f8c5:	b9 34 00 00 00       	mov    ecx,0x34
c001f8ca:	29 f9                	sub    ecx,edi
c001f8cc:	0f ad d0             	shrd   eax,edx,cl
c001f8cf:	d3 fa                	sar    edx,cl
c001f8d1:	f6 c1 20             	test   cl,0x20
c001f8d4:	74 05                	je     c001f8db <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f8d6:	89 d0                	mov    eax,edx
c001f8d8:	c1 fa 1f             	sar    edx,0x1f
c001f8db:	85 db                	test   ebx,ebx
c001f8dd:	79 07                	jns    c001f8e6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f8df:	f7 d8                	neg    eax
c001f8e1:	83 d2 00             	adc    edx,0x0
c001f8e4:	f7 da                	neg    edx
c001f8e6:	5b                   	pop    ebx
c001f8e7:	5e                   	pop    esi
c001f8e8:	5f                   	pop    edi
c001f8e9:	c3                   	ret    

c001f8ea <Vm::fpuULongToFloat(unsigned long long)>:
c001f8ea:	57                   	push   edi
c001f8eb:	31 c9                	xor    ecx,ecx
c001f8ed:	56                   	push   esi
c001f8ee:	53                   	push   ebx
c001f8ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f8f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f8f7:	0f ba e7 14          	bt     edi,0x14
c001f8fb:	72 07                	jb     c001f904 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f8fd:	01 f6                	add    esi,esi
c001f8ff:	11 ff                	adc    edi,edi
c001f901:	41                   	inc    ecx
c001f902:	eb f3                	jmp    c001f8f7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f904:	89 fa                	mov    edx,edi
c001f906:	89 f0                	mov    eax,esi
c001f908:	bb 33 04 00 00       	mov    ebx,0x433
c001f90d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f913:	29 cb                	sub    ebx,ecx
c001f915:	89 d9                	mov    ecx,ebx
c001f917:	5b                   	pop    ebx
c001f918:	c1 e1 14             	shl    ecx,0x14
c001f91b:	5e                   	pop    esi
c001f91c:	09 ca                	or     edx,ecx
c001f91e:	5f                   	pop    edi
c001f91f:	c3                   	ret    

c001f920 <Vm::fpuLongToFloat(long long)>:
c001f920:	56                   	push   esi
c001f921:	31 c0                	xor    eax,eax
c001f923:	53                   	push   ebx
c001f924:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f92c:	39 c8                	cmp    eax,ecx
c001f92e:	19 d8                	sbb    eax,ebx
c001f930:	7d 04                	jge    c001f936 <Vm::fpuLongToFloat(long long)+0x16>
c001f932:	31 f6                	xor    esi,esi
c001f934:	eb 0c                	jmp    c001f942 <Vm::fpuLongToFloat(long long)+0x22>
c001f936:	f7 d9                	neg    ecx
c001f938:	be 01 00 00 00       	mov    esi,0x1
c001f93d:	83 d3 00             	adc    ebx,0x0
c001f940:	f7 db                	neg    ebx
c001f942:	31 c0                	xor    eax,eax
c001f944:	0f ba e3 14          	bt     ebx,0x14
c001f948:	72 07                	jb     c001f951 <Vm::fpuLongToFloat(long long)+0x31>
c001f94a:	01 c9                	add    ecx,ecx
c001f94c:	11 db                	adc    ebx,ebx
c001f94e:	40                   	inc    eax
c001f94f:	eb f3                	jmp    c001f944 <Vm::fpuLongToFloat(long long)+0x24>
c001f951:	ba 33 04 00 00       	mov    edx,0x433
c001f956:	29 c2                	sub    edx,eax
c001f958:	89 c8                	mov    eax,ecx
c001f95a:	c1 e2 14             	shl    edx,0x14
c001f95d:	89 d9                	mov    ecx,ebx
c001f95f:	89 f3                	mov    ebx,esi
c001f961:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f967:	09 ca                	or     edx,ecx
c001f969:	84 db                	test   bl,bl
c001f96b:	74 06                	je     c001f973 <Vm::fpuLongToFloat(long long)+0x53>
c001f96d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f973:	5b                   	pop    ebx
c001f974:	5e                   	pop    esi
c001f975:	c3                   	ret    

c001f976 <Vm::fpuGet0()>:
c001f976:	31 c0                	xor    eax,eax
c001f978:	31 d2                	xor    edx,edx
c001f97a:	c3                   	ret    

c001f97b <Vm::fpuGet1()>:
c001f97b:	b8 01 00 00 00       	mov    eax,0x1
c001f980:	31 d2                	xor    edx,edx
c001f982:	c3                   	ret    

c001f983 <Vm::fpuGetPi()>:
c001f983:	b8 03 00 00 00       	mov    eax,0x3
c001f988:	31 d2                	xor    edx,edx
c001f98a:	c3                   	ret    

c001f98b <Vm::fpuGetLog2E()>:
c001f98b:	83 ec 18             	sub    esp,0x18
c001f98e:	68 80 d2 02 c0       	push   0xc002d280
c001f993:	e8 17 aa ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001f998:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f99d:	31 d2                	xor    edx,edx
c001f99f:	83 c4 1c             	add    esp,0x1c
c001f9a2:	c3                   	ret    

c001f9a3 <Vm::fpuGetLogE2()>:
c001f9a3:	83 ec 18             	sub    esp,0x18
c001f9a6:	68 8c d2 02 c0       	push   0xc002d28c
c001f9ab:	e8 ff a9 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001f9b0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9b5:	31 d2                	xor    edx,edx
c001f9b7:	83 c4 1c             	add    esp,0x1c
c001f9ba:	c3                   	ret    

c001f9bb <Vm::fpuGetLog210()>:
c001f9bb:	83 ec 18             	sub    esp,0x18
c001f9be:	68 98 d2 02 c0       	push   0xc002d298
c001f9c3:	e8 e7 a9 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001f9c8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9cd:	31 d2                	xor    edx,edx
c001f9cf:	83 c4 1c             	add    esp,0x1c
c001f9d2:	c3                   	ret    

c001f9d3 <Vm::fpuGetLog102()>:
c001f9d3:	83 ec 18             	sub    esp,0x18
c001f9d6:	68 a5 d2 02 c0       	push   0xc002d2a5
c001f9db:	e8 cf a9 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001f9e0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9e5:	31 d2                	xor    edx,edx
c001f9e7:	83 c4 1c             	add    esp,0x1c
c001f9ea:	c3                   	ret    

c001f9eb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f9eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9ef:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f9f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9f7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f9fb:	0f 92 c0             	setb   al
c001f9fe:	c3                   	ret    

c001f9ff <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f9ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa07:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fa0b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fa0f:	09 c2                	or     edx,eax
c001fa11:	0f 94 c0             	sete   al
c001fa14:	c3                   	ret    

c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fa15:	57                   	push   edi
c001fa16:	56                   	push   esi
c001fa17:	53                   	push   ebx
c001fa18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa28:	57                   	push   edi
c001fa29:	56                   	push   esi
c001fa2a:	53                   	push   ebx
c001fa2b:	51                   	push   ecx
c001fa2c:	e8 ce ff ff ff       	call   c001f9ff <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fa31:	83 c4 10             	add    esp,0x10
c001fa34:	88 c2                	mov    dl,al
c001fa36:	31 c0                	xor    eax,eax
c001fa38:	84 d2                	test   dl,dl
c001fa3a:	75 0c                	jne    c001fa48 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fa3c:	57                   	push   edi
c001fa3d:	56                   	push   esi
c001fa3e:	53                   	push   ebx
c001fa3f:	51                   	push   ecx
c001fa40:	e8 a6 ff ff ff       	call   c001f9eb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fa45:	83 c4 10             	add    esp,0x10
c001fa48:	83 e0 01             	and    eax,0x1
c001fa4b:	5b                   	pop    ebx
c001fa4c:	88 c1                	mov    cl,al
c001fa4e:	83 e2 01             	and    edx,0x1
c001fa51:	a0 01 28 03 c0       	mov    al,ds:0xc0032801
c001fa56:	c1 e2 06             	shl    edx,0x6
c001fa59:	83 e0 ba             	and    eax,0xffffffba
c001fa5c:	5e                   	pop    esi
c001fa5d:	09 c8                	or     eax,ecx
c001fa5f:	5f                   	pop    edi
c001fa60:	09 d0                	or     eax,edx
c001fa62:	a2 01 28 03 c0       	mov    ds:0xc0032801,al
c001fa67:	c3                   	ret    

c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fa68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa70:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fa74:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fa78:	c3                   	ret    

c001fa79 <Vm::fpuAbs(unsigned long long)>:
c001fa79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa81:	c3                   	ret    

c001fa82 <Vm::fpuChs(unsigned long long)>:
c001fa82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa8a:	f7 d8                	neg    eax
c001fa8c:	83 d2 00             	adc    edx,0x0
c001fa8f:	f7 da                	neg    edx
c001fa91:	c3                   	ret    

c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fa92:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fa96:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fa9b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fa9f:	eb c7                	jmp    c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001faa1:	53                   	push   ebx
c001faa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001faaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001faae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fab2:	0f af ca             	imul   ecx,edx
c001fab5:	0f af d8             	imul   ebx,eax
c001fab8:	f7 e2                	mul    edx
c001faba:	01 d9                	add    ecx,ebx
c001fabc:	5b                   	pop    ebx
c001fabd:	01 ca                	add    edx,ecx
c001fabf:	c3                   	ret    

c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001facb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001facf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fad3:	e8 fc 77 00 00       	call   c00272d4 <__udivdi3>
c001fad8:	83 c4 1c             	add    esp,0x1c
c001fadb:	c3                   	ret    

c001fadc <Vm::fpuSquare(unsigned long long)>:
c001fadc:	50                   	push   eax
c001fadd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fae5:	52                   	push   edx
c001fae6:	50                   	push   eax
c001fae7:	52                   	push   edx
c001fae8:	50                   	push   eax
c001fae9:	e8 b3 ff ff ff       	call   c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001faee:	83 c4 14             	add    esp,0x14
c001faf1:	c3                   	ret    

c001faf2 <Vm::fpuGetReg(int)>:
c001faf2:	83 ec 0c             	sub    esp,0xc
c001faf5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fafa:	76 10                	jbe    c001fb0c <Vm::fpuGetReg(int)+0x1a>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	68 b2 d2 02 c0       	push   0xc002d2b2
c001fb04:	e8 a6 a8 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	a0 01 28 03 c0       	mov    al,ds:0xc0032801
c001fb11:	b9 08 00 00 00       	mov    ecx,0x8
c001fb16:	c0 e8 03             	shr    al,0x3
c001fb19:	83 e0 07             	and    eax,0x7
c001fb1c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb20:	99                   	cdq    
c001fb21:	f7 f9                	idiv   ecx
c001fb23:	8b 04 d5 04 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd7fc]
c001fb2a:	8b 14 d5 08 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd7f8]
c001fb31:	83 c4 0c             	add    esp,0xc
c001fb34:	c3                   	ret    

c001fb35 <Vm::fpuSetReg(int, unsigned long long)>:
c001fb35:	57                   	push   edi
c001fb36:	56                   	push   esi
c001fb37:	52                   	push   edx
c001fb38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fb3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fb40:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb45:	76 10                	jbe    c001fb57 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	68 c5 d2 02 c0       	push   0xc002d2c5
c001fb4f:	e8 5b a8 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	a0 01 28 03 c0       	mov    al,ds:0xc0032801
c001fb5c:	b9 08 00 00 00       	mov    ecx,0x8
c001fb61:	c0 e8 03             	shr    al,0x3
c001fb64:	83 e0 07             	and    eax,0x7
c001fb67:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb6b:	99                   	cdq    
c001fb6c:	f7 f9                	idiv   ecx
c001fb6e:	89 34 d5 04 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd7fc],esi
c001fb75:	89 3c d5 08 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd7f8],edi
c001fb7c:	58                   	pop    eax
c001fb7d:	5e                   	pop    esi
c001fb7e:	5f                   	pop    edi
c001fb7f:	c3                   	ret    

c001fb80 <Vm::fpuPush(unsigned long long)>:
c001fb80:	a0 01 28 03 c0       	mov    al,ds:0xc0032801
c001fb85:	c0 e8 03             	shr    al,0x3
c001fb88:	83 e0 07             	and    eax,0x7
c001fb8b:	83 c0 07             	add    eax,0x7
c001fb8e:	88 c2                	mov    dl,al
c001fb90:	83 e0 07             	and    eax,0x7
c001fb93:	83 e2 07             	and    edx,0x7
c001fb96:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fb9d:	8a 15 01 28 03 c0    	mov    dl,BYTE PTR ds:0xc0032801
c001fba3:	83 e2 c7             	and    edx,0xffffffc7
c001fba6:	09 ca                	or     edx,ecx
c001fba8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbac:	88 15 01 28 03 c0    	mov    BYTE PTR ds:0xc0032801,dl
c001fbb2:	89 0c c5 08 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd7f8],ecx
c001fbb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fbbd:	89 14 c5 04 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd7fc],edx
c001fbc4:	a1 44 28 03 c0       	mov    eax,ds:0xc0032844
c001fbc9:	83 f8 08             	cmp    eax,0x8
c001fbcc:	75 08                	jne    c001fbd6 <Vm::fpuPush(unsigned long long)+0x56>
c001fbce:	80 0d 00 28 03 c0 40 	or     BYTE PTR ds:0xc0032800,0x40
c001fbd5:	c3                   	ret    
c001fbd6:	40                   	inc    eax
c001fbd7:	a3 44 28 03 c0       	mov    ds:0xc0032844,eax
c001fbdc:	c3                   	ret    

c001fbdd <Vm::fpuPop()>:
c001fbdd:	8a 0d 01 28 03 c0    	mov    cl,BYTE PTR ds:0xc0032801
c001fbe3:	53                   	push   ebx
c001fbe4:	c0 e9 03             	shr    cl,0x3
c001fbe7:	8a 1d 01 28 03 c0    	mov    bl,BYTE PTR ds:0xc0032801
c001fbed:	83 e1 07             	and    ecx,0x7
c001fbf0:	83 e3 c7             	and    ebx,0xffffffc7
c001fbf3:	8b 04 cd 04 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd7fc]
c001fbfa:	8b 14 cd 08 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd7f8]
c001fc01:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fc08:	83 e1 38             	and    ecx,0x38
c001fc0b:	09 d9                	or     ecx,ebx
c001fc0d:	88 0d 01 28 03 c0    	mov    BYTE PTR ds:0xc0032801,cl
c001fc13:	8b 0d 44 28 03 c0    	mov    ecx,DWORD PTR ds:0xc0032844
c001fc19:	85 c9                	test   ecx,ecx
c001fc1b:	74 09                	je     c001fc26 <Vm::fpuPop()+0x49>
c001fc1d:	49                   	dec    ecx
c001fc1e:	89 0d 44 28 03 c0    	mov    DWORD PTR ds:0xc0032844,ecx
c001fc24:	eb 07                	jmp    c001fc2d <Vm::fpuPop()+0x50>
c001fc26:	80 0d 00 28 03 c0 40 	or     BYTE PTR ds:0xc0032800,0x40
c001fc2d:	5b                   	pop    ebx
c001fc2e:	c3                   	ret    

c001fc2f <Vm::x87Handler(regs*)>:
c001fc2f:	55                   	push   ebp
c001fc30:	57                   	push   edi
c001fc31:	56                   	push   esi
c001fc32:	53                   	push   ebx
c001fc33:	83 ec 1c             	sub    esp,0x1c
c001fc36:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc3a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fc3f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fc42:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fc4a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fc4e:	50                   	push   eax
c001fc4f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fc53:	50                   	push   eax
c001fc54:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc58:	50                   	push   eax
c001fc59:	53                   	push   ebx
c001fc5a:	e8 1d 9e ff ff       	call   c0019a7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fc5f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	89 c6                	mov    esi,eax
c001fc67:	80 fa d9             	cmp    dl,0xd9
c001fc6a:	0f 85 52 01 00 00    	jne    c001fdc2 <Vm::x87Handler(regs*)+0x193>
c001fc70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc74:	8d 50 20             	lea    edx,[eax+0x20]
c001fc77:	80 fa 0e             	cmp    dl,0xe
c001fc7a:	0f 87 86 00 00 00    	ja     c001fd06 <Vm::x87Handler(regs*)+0xd7>
c001fc80:	0f b6 d2             	movzx  edx,dl
c001fc83:	ff 24 95 d8 d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2d28]
c001fc8a:	e8 e7 fc ff ff       	call   c001f976 <Vm::fpuGet0()>
c001fc8f:	eb 05                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fc91:	e8 e5 fc ff ff       	call   c001f97b <Vm::fpuGet1()>
c001fc96:	57                   	push   edi
c001fc97:	57                   	push   edi
c001fc98:	52                   	push   edx
c001fc99:	50                   	push   eax
c001fc9a:	e8 e1 fe ff ff       	call   c001fb80 <Vm::fpuPush(unsigned long long)>
c001fc9f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	b0 01                	mov    al,0x1
c001fca8:	e9 e3 09 00 00       	jmp    c0020690 <Vm::x87Handler(regs*)+0xa61>
c001fcad:	83 ec 0c             	sub    esp,0xc
c001fcb0:	6a 00                	push   0x0
c001fcb2:	e8 3b fe ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fcb7:	59                   	pop    ecx
c001fcb8:	5e                   	pop    esi
c001fcb9:	52                   	push   edx
c001fcba:	50                   	push   eax
c001fcbb:	e8 c2 fd ff ff       	call   c001fa82 <Vm::fpuChs(unsigned long long)>
c001fcc0:	eb 13                	jmp    c001fcd5 <Vm::x87Handler(regs*)+0xa6>
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	6a 00                	push   0x0
c001fcc7:	e8 26 fe ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fccc:	5f                   	pop    edi
c001fccd:	5d                   	pop    ebp
c001fcce:	52                   	push   edx
c001fccf:	50                   	push   eax
c001fcd0:	e8 a4 fd ff ff       	call   c001fa79 <Vm::fpuAbs(unsigned long long)>
c001fcd5:	83 c4 0c             	add    esp,0xc
c001fcd8:	52                   	push   edx
c001fcd9:	50                   	push   eax
c001fcda:	6a 00                	push   0x0
c001fcdc:	e8 54 fe ff ff       	call   c001fb35 <Vm::fpuSetReg(int, unsigned long long)>
c001fce1:	eb bc                	jmp    c001fc9f <Vm::x87Handler(regs*)+0x70>
c001fce3:	e8 d3 fc ff ff       	call   c001f9bb <Vm::fpuGetLog210()>
c001fce8:	eb ac                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fcea:	e8 9c fc ff ff       	call   c001f98b <Vm::fpuGetLog2E()>
c001fcef:	eb a5                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fcf1:	e8 8d fc ff ff       	call   c001f983 <Vm::fpuGetPi()>
c001fcf6:	eb 9e                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fcf8:	e8 d6 fc ff ff       	call   c001f9d3 <Vm::fpuGetLog102()>
c001fcfd:	eb 97                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fcff:	e8 9f fc ff ff       	call   c001f9a3 <Vm::fpuGetLogE2()>
c001fd04:	eb 90                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x67>
c001fd06:	8d 50 40             	lea    edx,[eax+0x40]
c001fd09:	80 fa 07             	cmp    dl,0x7
c001fd0c:	77 15                	ja     c001fd23 <Vm::x87Handler(regs*)+0xf4>
c001fd0e:	83 ec 0c             	sub    esp,0xc
c001fd11:	2d c0 00 00 00       	sub    eax,0xc0
c001fd16:	50                   	push   eax
c001fd17:	e8 d6 fd ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fd1c:	59                   	pop    ecx
c001fd1d:	5e                   	pop    esi
c001fd1e:	e9 75 ff ff ff       	jmp    c001fc98 <Vm::x87Handler(regs*)+0x69>
c001fd23:	8d 50 38             	lea    edx,[eax+0x38]
c001fd26:	80 fa 07             	cmp    dl,0x7
c001fd29:	77 3c                	ja     c001fd67 <Vm::x87Handler(regs*)+0x138>
c001fd2b:	83 ec 0c             	sub    esp,0xc
c001fd2e:	2d c8 00 00 00       	sub    eax,0xc8
c001fd33:	50                   	push   eax
c001fd34:	e8 b9 fd ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fd39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd40:	89 c6                	mov    esi,eax
c001fd42:	89 d7                	mov    edi,edx
c001fd44:	e8 a9 fd ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fd49:	83 c4 0c             	add    esp,0xc
c001fd4c:	52                   	push   edx
c001fd4d:	50                   	push   eax
c001fd4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd52:	2d c8 00 00 00       	sub    eax,0xc8
c001fd57:	50                   	push   eax
c001fd58:	e8 d8 fd ff ff       	call   c001fb35 <Vm::fpuSetReg(int, unsigned long long)>
c001fd5d:	83 c4 0c             	add    esp,0xc
c001fd60:	57                   	push   edi
c001fd61:	56                   	push   esi
c001fd62:	e9 73 ff ff ff       	jmp    c001fcda <Vm::x87Handler(regs*)+0xab>
c001fd67:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd6b:	84 d2                	test   dl,dl
c001fd6d:	75 0f                	jne    c001fd7e <Vm::x87Handler(regs*)+0x14f>
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	ff 36                	push   DWORD PTR [esi]
c001fd74:	e8 c8 fa ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c001fd79:	e9 bf 00 00 00       	jmp    c001fe3d <Vm::x87Handler(regs*)+0x20e>
c001fd7e:	80 fa 03             	cmp    dl,0x3
c001fd81:	75 13                	jne    c001fd96 <Vm::x87Handler(regs*)+0x167>
c001fd83:	e8 55 fe ff ff       	call   c001fbdd <Vm::fpuPop()>
c001fd88:	55                   	push   ebp
c001fd89:	55                   	push   ebp
c001fd8a:	52                   	push   edx
c001fd8b:	50                   	push   eax
c001fd8c:	e8 4c fa ff ff       	call   c001f7dd <Vm::fpuInternalTo32(unsigned long long)>
c001fd91:	e9 88 00 00 00       	jmp    c001fe1e <Vm::x87Handler(regs*)+0x1ef>
c001fd96:	80 fa 05             	cmp    dl,0x5
c001fd99:	75 0e                	jne    c001fda9 <Vm::x87Handler(regs*)+0x17a>
c001fd9b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd9e:	66 a3 02 28 03 c0    	mov    ds:0xc0032802,ax
c001fda4:	e9 df 00 00 00       	jmp    c001fe88 <Vm::x87Handler(regs*)+0x259>
c001fda9:	31 c0                	xor    eax,eax
c001fdab:	80 fa 07             	cmp    dl,0x7
c001fdae:	0f 85 dc 08 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c001fdb4:	66 a1 02 28 03 c0    	mov    ax,ds:0xc0032802
c001fdba:	66 89 06             	mov    WORD PTR [esi],ax
c001fdbd:	e9 c6 00 00 00       	jmp    c001fe88 <Vm::x87Handler(regs*)+0x259>
c001fdc2:	80 fa d8             	cmp    dl,0xd8
c001fdc5:	0f 84 c9 00 00 00    	je     c001fe94 <Vm::x87Handler(regs*)+0x265>
c001fdcb:	80 fa dc             	cmp    dl,0xdc
c001fdce:	0f 84 0d 02 00 00    	je     c001ffe1 <Vm::x87Handler(regs*)+0x3b2>
c001fdd4:	80 fa de             	cmp    dl,0xde
c001fdd7:	0f 84 cd 02 00 00    	je     c00200aa <Vm::x87Handler(regs*)+0x47b>
c001fddd:	80 fa dd             	cmp    dl,0xdd
c001fde0:	0f 84 5f 04 00 00    	je     c0020245 <Vm::x87Handler(regs*)+0x616>
c001fde6:	80 fa da             	cmp    dl,0xda
c001fde9:	0f 84 24 05 00 00    	je     c0020313 <Vm::x87Handler(regs*)+0x6e4>
c001fdef:	80 fa df             	cmp    dl,0xdf
c001fdf2:	0f 84 68 05 00 00    	je     c0020360 <Vm::x87Handler(regs*)+0x731>
c001fdf8:	31 c0                	xor    eax,eax
c001fdfa:	80 fa db             	cmp    dl,0xdb
c001fdfd:	0f 85 8d 08 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c001fe03:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe07:	80 fa 03             	cmp    dl,0x3
c001fe0a:	0f 85 70 06 00 00    	jne    c0020480 <Vm::x87Handler(regs*)+0x851>
c001fe10:	e8 c8 fd ff ff       	call   c001fbdd <Vm::fpuPop()>
c001fe15:	55                   	push   ebp
c001fe16:	55                   	push   ebp
c001fe17:	52                   	push   edx
c001fe18:	50                   	push   eax
c001fe19:	e8 71 fa ff ff       	call   c001f88f <Vm::fpuFloatToLong(unsigned long long)>
c001fe1e:	83 c4 10             	add    esp,0x10
c001fe21:	89 06                	mov    DWORD PTR [esi],eax
c001fe23:	eb 63                	jmp    c001fe88 <Vm::x87Handler(regs*)+0x259>
c001fe25:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe29:	84 d2                	test   dl,dl
c001fe2b:	0f 85 e6 05 00 00    	jne    c0020417 <Vm::x87Handler(regs*)+0x7e8>
c001fe31:	57                   	push   edi
c001fe32:	57                   	push   edi
c001fe33:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe36:	ff 36                	push   DWORD PTR [esi]
c001fe38:	e8 49 fa ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c001fe3d:	5e                   	pop    esi
c001fe3e:	5f                   	pop    edi
c001fe3f:	52                   	push   edx
c001fe40:	50                   	push   eax
c001fe41:	e8 3a fd ff ff       	call   c001fb80 <Vm::fpuPush(unsigned long long)>
c001fe46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe4a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe4d:	e9 51 fe ff ff       	jmp    c001fca3 <Vm::x87Handler(regs*)+0x74>
c001fe52:	80 fa 03             	cmp    dl,0x3
c001fe55:	0f 85 d7 06 00 00    	jne    c0020532 <Vm::x87Handler(regs*)+0x903>
c001fe5b:	57                   	push   edi
c001fe5c:	57                   	push   edi
c001fe5d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe60:	ff 36                	push   DWORD PTR [esi]
c001fe62:	e8 1f fa ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c001fe67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe6e:	89 c6                	mov    esi,eax
c001fe70:	89 d7                	mov    edi,edx
c001fe72:	e8 7b fc ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fe77:	57                   	push   edi
c001fe78:	56                   	push   esi
c001fe79:	52                   	push   edx
c001fe7a:	50                   	push   eax
c001fe7b:	e8 95 fb ff ff       	call   c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe80:	83 c4 20             	add    esp,0x20
c001fe83:	e8 55 fd ff ff       	call   c001fbdd <Vm::fpuPop()>
c001fe88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe8c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe8f:	e9 12 fe ff ff       	jmp    c001fca6 <Vm::x87Handler(regs*)+0x77>
c001fe94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe98:	8d 50 40             	lea    edx,[eax+0x40]
c001fe9b:	80 fa 07             	cmp    dl,0x7
c001fe9e:	77 29                	ja     c001fec9 <Vm::x87Handler(regs*)+0x29a>
c001fea0:	83 ec 0c             	sub    esp,0xc
c001fea3:	2d c0 00 00 00       	sub    eax,0xc0
c001fea8:	50                   	push   eax
c001fea9:	e8 44 fc ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001feae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feb5:	89 c6                	mov    esi,eax
c001feb7:	89 d7                	mov    edi,edx
c001feb9:	e8 34 fc ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001febe:	57                   	push   edi
c001febf:	56                   	push   esi
c001fec0:	52                   	push   edx
c001fec1:	50                   	push   eax
c001fec2:	e8 a1 fb ff ff       	call   c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fec7:	eb 2f                	jmp    c001fef8 <Vm::x87Handler(regs*)+0x2c9>
c001fec9:	8d 50 38             	lea    edx,[eax+0x38]
c001fecc:	80 fa 07             	cmp    dl,0x7
c001fecf:	77 2f                	ja     c001ff00 <Vm::x87Handler(regs*)+0x2d1>
c001fed1:	83 ec 0c             	sub    esp,0xc
c001fed4:	2d c8 00 00 00       	sub    eax,0xc8
c001fed9:	50                   	push   eax
c001feda:	e8 13 fc ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fedf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fee6:	89 c6                	mov    esi,eax
c001fee8:	89 d7                	mov    edi,edx
c001feea:	e8 03 fc ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001feef:	57                   	push   edi
c001fef0:	56                   	push   esi
c001fef1:	52                   	push   edx
c001fef2:	50                   	push   eax
c001fef3:	e8 a9 fb ff ff       	call   c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fef8:	83 c4 1c             	add    esp,0x1c
c001fefb:	e9 d8 fd ff ff       	jmp    c001fcd8 <Vm::x87Handler(regs*)+0xa9>
c001ff00:	8d 50 30             	lea    edx,[eax+0x30]
c001ff03:	80 fa 07             	cmp    dl,0x7
c001ff06:	77 0d                	ja     c001ff15 <Vm::x87Handler(regs*)+0x2e6>
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	2d d0 00 00 00       	sub    eax,0xd0
c001ff10:	e9 99 03 00 00       	jmp    c00202ae <Vm::x87Handler(regs*)+0x67f>
c001ff15:	8d 50 28             	lea    edx,[eax+0x28]
c001ff18:	80 fa 07             	cmp    dl,0x7
c001ff1b:	77 0d                	ja     c001ff2a <Vm::x87Handler(regs*)+0x2fb>
c001ff1d:	83 ec 0c             	sub    esp,0xc
c001ff20:	2d d8 00 00 00       	sub    eax,0xd8
c001ff25:	e9 c0 03 00 00       	jmp    c00202ea <Vm::x87Handler(regs*)+0x6bb>
c001ff2a:	8d 50 20             	lea    edx,[eax+0x20]
c001ff2d:	80 fa 07             	cmp    dl,0x7
c001ff30:	77 1b                	ja     c001ff4d <Vm::x87Handler(regs*)+0x31e>
c001ff32:	83 ec 0c             	sub    esp,0xc
c001ff35:	2d e0 00 00 00       	sub    eax,0xe0
c001ff3a:	50                   	push   eax
c001ff3b:	e8 b2 fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ff40:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff47:	89 c6                	mov    esi,eax
c001ff49:	89 d7                	mov    edi,edx
c001ff4b:	eb 22                	jmp    c001ff6f <Vm::x87Handler(regs*)+0x340>
c001ff4d:	8d 50 18             	lea    edx,[eax+0x18]
c001ff50:	80 fa 07             	cmp    dl,0x7
c001ff53:	77 2d                	ja     c001ff82 <Vm::x87Handler(regs*)+0x353>
c001ff55:	83 ec 0c             	sub    esp,0xc
c001ff58:	6a 00                	push   0x0
c001ff5a:	e8 93 fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ff5f:	89 c6                	mov    esi,eax
c001ff61:	89 d7                	mov    edi,edx
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	2d e8 00 00 00       	sub    eax,0xe8
c001ff6c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff6f:	e8 7e fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ff74:	57                   	push   edi
c001ff75:	56                   	push   esi
c001ff76:	52                   	push   edx
c001ff77:	50                   	push   eax
c001ff78:	e8 15 fb ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff7d:	e9 76 ff ff ff       	jmp    c001fef8 <Vm::x87Handler(regs*)+0x2c9>
c001ff82:	8d 50 10             	lea    edx,[eax+0x10]
c001ff85:	80 fa 07             	cmp    dl,0x7
c001ff88:	77 1b                	ja     c001ffa5 <Vm::x87Handler(regs*)+0x376>
c001ff8a:	83 ec 0c             	sub    esp,0xc
c001ff8d:	2d f0 00 00 00       	sub    eax,0xf0
c001ff92:	50                   	push   eax
c001ff93:	e8 5a fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ff98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff9f:	89 c6                	mov    esi,eax
c001ffa1:	89 d7                	mov    edi,edx
c001ffa3:	eb 22                	jmp    c001ffc7 <Vm::x87Handler(regs*)+0x398>
c001ffa5:	3c f7                	cmp    al,0xf7
c001ffa7:	0f 86 d1 03 00 00    	jbe    c002037e <Vm::x87Handler(regs*)+0x74f>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	6a 00                	push   0x0
c001ffb2:	e8 3b fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ffb7:	89 c6                	mov    esi,eax
c001ffb9:	89 d7                	mov    edi,edx
c001ffbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffbf:	2d f8 00 00 00       	sub    eax,0xf8
c001ffc4:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffc7:	e8 26 fb ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001ffcc:	57                   	push   edi
c001ffcd:	56                   	push   esi
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	e8 eb fa ff ff       	call   c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffd5:	83 c4 1c             	add    esp,0x1c
c001ffd8:	52                   	push   edx
c001ffd9:	50                   	push   eax
c001ffda:	6a 00                	push   0x0
c001ffdc:	e9 51 02 00 00       	jmp    c0020232 <Vm::x87Handler(regs*)+0x603>
c001ffe1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe5:	8d 50 40             	lea    edx,[eax+0x40]
c001ffe8:	80 fa 07             	cmp    dl,0x7
c001ffeb:	77 37                	ja     c0020024 <Vm::x87Handler(regs*)+0x3f5>
c001ffed:	83 ec 0c             	sub    esp,0xc
c001fff0:	2d c0 00 00 00       	sub    eax,0xc0
c001fff5:	50                   	push   eax
c001fff6:	e8 f7 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c001fffb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020002:	89 c6                	mov    esi,eax
c0020004:	89 d7                	mov    edi,edx
c0020006:	e8 e7 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002000b:	57                   	push   edi
c002000c:	56                   	push   esi
c002000d:	52                   	push   edx
c002000e:	50                   	push   eax
c002000f:	e8 54 fa ff ff       	call   c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020014:	83 c4 1c             	add    esp,0x1c
c0020017:	52                   	push   edx
c0020018:	50                   	push   eax
c0020019:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001d:	2d c0 00 00 00       	sub    eax,0xc0
c0020022:	eb 3d                	jmp    c0020061 <Vm::x87Handler(regs*)+0x432>
c0020024:	8d 50 38             	lea    edx,[eax+0x38]
c0020027:	80 fa 07             	cmp    dl,0x7
c002002a:	77 3b                	ja     c0020067 <Vm::x87Handler(regs*)+0x438>
c002002c:	83 ec 0c             	sub    esp,0xc
c002002f:	2d c8 00 00 00       	sub    eax,0xc8
c0020034:	50                   	push   eax
c0020035:	e8 b8 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002003a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020041:	89 c6                	mov    esi,eax
c0020043:	89 d7                	mov    edi,edx
c0020045:	e8 a8 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002004a:	57                   	push   edi
c002004b:	56                   	push   esi
c002004c:	52                   	push   edx
c002004d:	50                   	push   eax
c002004e:	e8 4e fa ff ff       	call   c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020053:	83 c4 1c             	add    esp,0x1c
c0020056:	52                   	push   edx
c0020057:	50                   	push   eax
c0020058:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005c:	2d c8 00 00 00       	sub    eax,0xc8
c0020061:	50                   	push   eax
c0020062:	e9 75 fc ff ff       	jmp    c001fcdc <Vm::x87Handler(regs*)+0xad>
c0020067:	83 c0 18             	add    eax,0x18
c002006a:	3c 07                	cmp    al,0x7
c002006c:	0f 87 3b 04 00 00    	ja     c00204ad <Vm::x87Handler(regs*)+0x87e>
c0020072:	83 ec 0c             	sub    esp,0xc
c0020075:	6a 00                	push   0x0
c0020077:	e8 76 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002007c:	89 c6                	mov    esi,eax
c002007e:	89 d7                	mov    edi,edx
c0020080:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020084:	2d e8 00 00 00       	sub    eax,0xe8
c0020089:	89 04 24             	mov    DWORD PTR [esp],eax
c002008c:	e8 61 fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020091:	57                   	push   edi
c0020092:	56                   	push   esi
c0020093:	52                   	push   edx
c0020094:	50                   	push   eax
c0020095:	e8 f8 f9 ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002009a:	83 c4 1c             	add    esp,0x1c
c002009d:	52                   	push   edx
c002009e:	50                   	push   eax
c002009f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a3:	2d e8 00 00 00       	sub    eax,0xe8
c00200a8:	eb b7                	jmp    c0020061 <Vm::x87Handler(regs*)+0x432>
c00200aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ae:	8d 50 40             	lea    edx,[eax+0x40]
c00200b1:	80 fa 07             	cmp    dl,0x7
c00200b4:	77 3a                	ja     c00200f0 <Vm::x87Handler(regs*)+0x4c1>
c00200b6:	83 ec 0c             	sub    esp,0xc
c00200b9:	2d c0 00 00 00       	sub    eax,0xc0
c00200be:	50                   	push   eax
c00200bf:	e8 2e fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00200c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200cb:	89 c6                	mov    esi,eax
c00200cd:	89 d7                	mov    edi,edx
c00200cf:	e8 1e fa ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00200d4:	57                   	push   edi
c00200d5:	56                   	push   esi
c00200d6:	52                   	push   edx
c00200d7:	50                   	push   eax
c00200d8:	e8 8b f9 ff ff       	call   c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00200dd:	83 c4 1c             	add    esp,0x1c
c00200e0:	52                   	push   edx
c00200e1:	50                   	push   eax
c00200e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e6:	2d c0 00 00 00       	sub    eax,0xc0
c00200eb:	e9 9e 01 00 00       	jmp    c002028e <Vm::x87Handler(regs*)+0x65f>
c00200f0:	8d 50 20             	lea    edx,[eax+0x20]
c00200f3:	80 fa 07             	cmp    dl,0x7
c00200f6:	77 3a                	ja     c0020132 <Vm::x87Handler(regs*)+0x503>
c00200f8:	83 ec 0c             	sub    esp,0xc
c00200fb:	2d e0 00 00 00       	sub    eax,0xe0
c0020100:	50                   	push   eax
c0020101:	e8 ec f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020106:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010d:	89 c6                	mov    esi,eax
c002010f:	89 d7                	mov    edi,edx
c0020111:	e8 dc f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020116:	57                   	push   edi
c0020117:	56                   	push   esi
c0020118:	52                   	push   edx
c0020119:	50                   	push   eax
c002011a:	e8 73 f9 ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002011f:	83 c4 1c             	add    esp,0x1c
c0020122:	52                   	push   edx
c0020123:	50                   	push   eax
c0020124:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020128:	2d e0 00 00 00       	sub    eax,0xe0
c002012d:	e9 5c 01 00 00       	jmp    c002028e <Vm::x87Handler(regs*)+0x65f>
c0020132:	8d 50 18             	lea    edx,[eax+0x18]
c0020135:	80 fa 07             	cmp    dl,0x7
c0020138:	77 3b                	ja     c0020175 <Vm::x87Handler(regs*)+0x546>
c002013a:	83 ec 0c             	sub    esp,0xc
c002013d:	6a 00                	push   0x0
c002013f:	e8 ae f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020144:	89 c6                	mov    esi,eax
c0020146:	89 d7                	mov    edi,edx
c0020148:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002014c:	2d e8 00 00 00       	sub    eax,0xe8
c0020151:	89 04 24             	mov    DWORD PTR [esp],eax
c0020154:	e8 99 f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020159:	57                   	push   edi
c002015a:	56                   	push   esi
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	e8 30 f9 ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020162:	83 c4 1c             	add    esp,0x1c
c0020165:	52                   	push   edx
c0020166:	50                   	push   eax
c0020167:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002016b:	2d e8 00 00 00       	sub    eax,0xe8
c0020170:	e9 19 01 00 00       	jmp    c002028e <Vm::x87Handler(regs*)+0x65f>
c0020175:	8d 50 38             	lea    edx,[eax+0x38]
c0020178:	80 fa 07             	cmp    dl,0x7
c002017b:	77 37                	ja     c00201b4 <Vm::x87Handler(regs*)+0x585>
c002017d:	83 ec 0c             	sub    esp,0xc
c0020180:	2d c8 00 00 00       	sub    eax,0xc8
c0020185:	50                   	push   eax
c0020186:	e8 67 f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002018b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020192:	89 c6                	mov    esi,eax
c0020194:	89 d7                	mov    edi,edx
c0020196:	e8 57 f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002019b:	57                   	push   edi
c002019c:	56                   	push   esi
c002019d:	52                   	push   edx
c002019e:	50                   	push   eax
c002019f:	e8 fd f8 ff ff       	call   c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201a4:	83 c4 1c             	add    esp,0x1c
c00201a7:	52                   	push   edx
c00201a8:	50                   	push   eax
c00201a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ad:	2d c8 00 00 00       	sub    eax,0xc8
c00201b2:	eb 7d                	jmp    c0020231 <Vm::x87Handler(regs*)+0x602>
c00201b4:	3c f7                	cmp    al,0xf7
c00201b6:	76 38                	jbe    c00201f0 <Vm::x87Handler(regs*)+0x5c1>
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	6a 00                	push   0x0
c00201bd:	e8 30 f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00201c2:	89 c6                	mov    esi,eax
c00201c4:	89 d7                	mov    edi,edx
c00201c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ca:	2d f8 00 00 00       	sub    eax,0xf8
c00201cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00201d2:	e8 1b f9 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00201d7:	57                   	push   edi
c00201d8:	56                   	push   esi
c00201d9:	52                   	push   edx
c00201da:	50                   	push   eax
c00201db:	e8 e0 f8 ff ff       	call   c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00201e0:	83 c4 1c             	add    esp,0x1c
c00201e3:	52                   	push   edx
c00201e4:	50                   	push   eax
c00201e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201e9:	2d f8 00 00 00       	sub    eax,0xf8
c00201ee:	eb 41                	jmp    c0020231 <Vm::x87Handler(regs*)+0x602>
c00201f0:	8d 50 10             	lea    edx,[eax+0x10]
c00201f3:	80 fa 07             	cmp    dl,0x7
c00201f6:	0f 87 5a 01 00 00    	ja     c0020356 <Vm::x87Handler(regs*)+0x727>
c00201fc:	83 ec 0c             	sub    esp,0xc
c00201ff:	2d f0 00 00 00       	sub    eax,0xf0
c0020204:	50                   	push   eax
c0020205:	e8 e8 f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002020a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020211:	89 c6                	mov    esi,eax
c0020213:	89 d7                	mov    edi,edx
c0020215:	e8 d8 f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002021a:	57                   	push   edi
c002021b:	56                   	push   esi
c002021c:	52                   	push   edx
c002021d:	50                   	push   eax
c002021e:	e8 9d f8 ff ff       	call   c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020223:	83 c4 1c             	add    esp,0x1c
c0020226:	52                   	push   edx
c0020227:	50                   	push   eax
c0020228:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002022c:	2d f0 00 00 00       	sub    eax,0xf0
c0020231:	50                   	push   eax
c0020232:	e8 fe f8 ff ff       	call   c001fb35 <Vm::fpuSetReg(int, unsigned long long)>
c0020237:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002023b:	e8 9d f9 ff ff       	call   c001fbdd <Vm::fpuPop()>
c0020240:	e9 5e fa ff ff       	jmp    c001fca3 <Vm::x87Handler(regs*)+0x74>
c0020245:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020249:	8d 50 30             	lea    edx,[eax+0x30]
c002024c:	80 fa 07             	cmp    dl,0x7
c002024f:	77 1d                	ja     c002026e <Vm::x87Handler(regs*)+0x63f>
c0020251:	83 ec 0c             	sub    esp,0xc
c0020254:	6a 00                	push   0x0
c0020256:	e8 97 f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002025b:	83 c4 0c             	add    esp,0xc
c002025e:	52                   	push   edx
c002025f:	50                   	push   eax
c0020260:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020264:	2d d0 00 00 00       	sub    eax,0xd0
c0020269:	e9 f3 fd ff ff       	jmp    c0020061 <Vm::x87Handler(regs*)+0x432>
c002026e:	8d 50 28             	lea    edx,[eax+0x28]
c0020271:	80 fa 07             	cmp    dl,0x7
c0020274:	77 28                	ja     c002029e <Vm::x87Handler(regs*)+0x66f>
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	6a 00                	push   0x0
c002027b:	e8 72 f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020280:	83 c4 0c             	add    esp,0xc
c0020283:	52                   	push   edx
c0020284:	50                   	push   eax
c0020285:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020289:	2d d8 00 00 00       	sub    eax,0xd8
c002028e:	50                   	push   eax
c002028f:	e8 a1 f8 ff ff       	call   c001fb35 <Vm::fpuSetReg(int, unsigned long long)>
c0020294:	e8 44 f9 ff ff       	call   c001fbdd <Vm::fpuPop()>
c0020299:	e9 01 fa ff ff       	jmp    c001fc9f <Vm::x87Handler(regs*)+0x70>
c002029e:	8d 50 20             	lea    edx,[eax+0x20]
c00202a1:	80 fa 07             	cmp    dl,0x7
c00202a4:	77 30                	ja     c00202d6 <Vm::x87Handler(regs*)+0x6a7>
c00202a6:	83 ec 0c             	sub    esp,0xc
c00202a9:	2d e0 00 00 00       	sub    eax,0xe0
c00202ae:	50                   	push   eax
c00202af:	e8 3e f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00202b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202bb:	89 c6                	mov    esi,eax
c00202bd:	89 d7                	mov    edi,edx
c00202bf:	e8 2e f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00202c4:	57                   	push   edi
c00202c5:	56                   	push   esi
c00202c6:	52                   	push   edx
c00202c7:	50                   	push   eax
c00202c8:	e8 48 f7 ff ff       	call   c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202cd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202d1:	e9 54 02 00 00       	jmp    c002052a <Vm::x87Handler(regs*)+0x8fb>
c00202d6:	8d 50 18             	lea    edx,[eax+0x18]
c00202d9:	80 fa 07             	cmp    dl,0x7
c00202dc:	0f 87 43 fb ff ff    	ja     c001fe25 <Vm::x87Handler(regs*)+0x1f6>
c00202e2:	83 ec 0c             	sub    esp,0xc
c00202e5:	2d e8 00 00 00       	sub    eax,0xe8
c00202ea:	50                   	push   eax
c00202eb:	e8 02 f8 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00202f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202f7:	89 c6                	mov    esi,eax
c00202f9:	89 d7                	mov    edi,edx
c00202fb:	e8 f2 f7 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020300:	57                   	push   edi
c0020301:	56                   	push   esi
c0020302:	52                   	push   edx
c0020303:	50                   	push   eax
c0020304:	e8 0c f7 ff ff       	call   c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020309:	83 c4 20             	add    esp,0x20
c002030c:	e8 cc f8 ff ff       	call   c001fbdd <Vm::fpuPop()>
c0020311:	eb 62                	jmp    c0020375 <Vm::x87Handler(regs*)+0x746>
c0020313:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020317:	0f 85 0f 01 00 00    	jne    c002042c <Vm::x87Handler(regs*)+0x7fd>
c002031d:	83 ec 0c             	sub    esp,0xc
c0020320:	6a 01                	push   0x1
c0020322:	e8 cb f7 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020327:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002032e:	89 c6                	mov    esi,eax
c0020330:	89 d7                	mov    edi,edx
c0020332:	e8 bb f7 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020337:	57                   	push   edi
c0020338:	56                   	push   esi
c0020339:	52                   	push   edx
c002033a:	50                   	push   eax
c002033b:	e8 d5 f6 ff ff       	call   c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020340:	83 c4 20             	add    esp,0x20
c0020343:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020347:	e8 91 f8 ff ff       	call   c001fbdd <Vm::fpuPop()>
c002034c:	e8 8c f8 ff ff       	call   c001fbdd <Vm::fpuPop()>
c0020351:	e9 50 f9 ff ff       	jmp    c001fca6 <Vm::x87Handler(regs*)+0x77>
c0020356:	3c d9                	cmp    al,0xd9
c0020358:	0f 85 b5 02 00 00    	jne    c0020613 <Vm::x87Handler(regs*)+0x9e4>
c002035e:	eb bd                	jmp    c002031d <Vm::x87Handler(regs*)+0x6ee>
c0020360:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020364:	0f 85 ea 02 00 00    	jne    c0020654 <Vm::x87Handler(regs*)+0xa25>
c002036a:	0f b7 05 00 28 03 c0 	movzx  eax,WORD PTR ds:0xc0032800
c0020371:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020375:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020379:	e9 28 f9 ff ff       	jmp    c001fca6 <Vm::x87Handler(regs*)+0x77>
c002037e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020382:	84 d2                	test   dl,dl
c0020384:	75 0f                	jne    c0020395 <Vm::x87Handler(regs*)+0x766>
c0020386:	83 ec 0c             	sub    esp,0xc
c0020389:	ff 36                	push   DWORD PTR [esi]
c002038b:	e8 b1 f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c0020390:	e9 2c 01 00 00       	jmp    c00204c1 <Vm::x87Handler(regs*)+0x892>
c0020395:	80 fa 01             	cmp    dl,0x1
c0020398:	75 0f                	jne    c00203a9 <Vm::x87Handler(regs*)+0x77a>
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	ff 36                	push   DWORD PTR [esi]
c002039f:	e8 9d f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c00203a4:	e9 81 02 00 00       	jmp    c002062a <Vm::x87Handler(regs*)+0x9fb>
c00203a9:	80 fa 04             	cmp    dl,0x4
c00203ac:	75 0f                	jne    c00203bd <Vm::x87Handler(regs*)+0x78e>
c00203ae:	83 ec 0c             	sub    esp,0xc
c00203b1:	ff 36                	push   DWORD PTR [esi]
c00203b3:	e8 89 f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c00203b8:	e9 86 01 00 00       	jmp    c0020543 <Vm::x87Handler(regs*)+0x914>
c00203bd:	80 fa 05             	cmp    dl,0x5
c00203c0:	75 1b                	jne    c00203dd <Vm::x87Handler(regs*)+0x7ae>
c00203c2:	83 ec 0c             	sub    esp,0xc
c00203c5:	6a 00                	push   0x0
c00203c7:	e8 26 f7 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00203cc:	89 c7                	mov    edi,eax
c00203ce:	89 d5                	mov    ebp,edx
c00203d0:	58                   	pop    eax
c00203d1:	ff 36                	push   DWORD PTR [esi]
c00203d3:	e8 69 f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c00203d8:	e9 a3 01 00 00       	jmp    c0020580 <Vm::x87Handler(regs*)+0x951>
c00203dd:	80 fa 06             	cmp    dl,0x6
c00203e0:	75 0f                	jne    c00203f1 <Vm::x87Handler(regs*)+0x7c2>
c00203e2:	83 ec 0c             	sub    esp,0xc
c00203e5:	ff 36                	push   DWORD PTR [esi]
c00203e7:	e8 55 f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c00203ec:	e9 ae 01 00 00       	jmp    c002059f <Vm::x87Handler(regs*)+0x970>
c00203f1:	31 c0                	xor    eax,eax
c00203f3:	80 fa 07             	cmp    dl,0x7
c00203f6:	0f 85 94 02 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	6a 00                	push   0x0
c0020401:	e8 ec f6 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020406:	89 c7                	mov    edi,eax
c0020408:	89 d5                	mov    ebp,edx
c002040a:	58                   	pop    eax
c002040b:	ff 36                	push   DWORD PTR [esi]
c002040d:	e8 2f f4 ff ff       	call   c001f841 <Vm::fpu32ToInternal(unsigned int)>
c0020412:	e9 cb 01 00 00       	jmp    c00205e2 <Vm::x87Handler(regs*)+0x9b3>
c0020417:	80 fa 03             	cmp    dl,0x3
c002041a:	0f 85 d3 01 00 00    	jne    c00205f3 <Vm::x87Handler(regs*)+0x9c4>
c0020420:	e8 b8 f7 ff ff       	call   c001fbdd <Vm::fpuPop()>
c0020425:	51                   	push   ecx
c0020426:	51                   	push   ecx
c0020427:	e9 de 01 00 00       	jmp    c002060a <Vm::x87Handler(regs*)+0x9db>
c002042c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020430:	80 fa 01             	cmp    dl,0x1
c0020433:	75 09                	jne    c002043e <Vm::x87Handler(regs*)+0x80f>
c0020435:	57                   	push   edi
c0020436:	57                   	push   edi
c0020437:	8b 06                	mov    eax,DWORD PTR [esi]
c0020439:	e9 e3 01 00 00       	jmp    c0020621 <Vm::x87Handler(regs*)+0x9f2>
c002043e:	80 fa 04             	cmp    dl,0x4
c0020441:	75 12                	jne    c0020455 <Vm::x87Handler(regs*)+0x826>
c0020443:	31 d2                	xor    edx,edx
c0020445:	51                   	push   ecx
c0020446:	51                   	push   ecx
c0020447:	8b 06                	mov    eax,DWORD PTR [esi]
c0020449:	52                   	push   edx
c002044a:	50                   	push   eax
c002044b:	e8 d0 f4 ff ff       	call   c001f920 <Vm::fpuLongToFloat(long long)>
c0020450:	e9 ee 00 00 00       	jmp    c0020543 <Vm::x87Handler(regs*)+0x914>
c0020455:	31 c0                	xor    eax,eax
c0020457:	80 fa 07             	cmp    dl,0x7
c002045a:	0f 85 30 02 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c0020460:	83 ec 0c             	sub    esp,0xc
c0020463:	6a 00                	push   0x0
c0020465:	e8 88 f6 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002046a:	89 c7                	mov    edi,eax
c002046c:	89 d5                	mov    ebp,edx
c002046e:	58                   	pop    eax
c002046f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020471:	5a                   	pop    edx
c0020472:	31 d2                	xor    edx,edx
c0020474:	52                   	push   edx
c0020475:	50                   	push   eax
c0020476:	e8 a5 f4 ff ff       	call   c001f920 <Vm::fpuLongToFloat(long long)>
c002047b:	e9 62 01 00 00       	jmp    c00205e2 <Vm::x87Handler(regs*)+0x9b3>
c0020480:	84 d2                	test   dl,dl
c0020482:	75 0d                	jne    c0020491 <Vm::x87Handler(regs*)+0x862>
c0020484:	31 d2                	xor    edx,edx
c0020486:	55                   	push   ebp
c0020487:	55                   	push   ebp
c0020488:	8b 06                	mov    eax,DWORD PTR [esi]
c002048a:	52                   	push   edx
c002048b:	50                   	push   eax
c002048c:	e9 d3 01 00 00       	jmp    c0020664 <Vm::x87Handler(regs*)+0xa35>
c0020491:	31 c0                	xor    eax,eax
c0020493:	80 fa 02             	cmp    dl,0x2
c0020496:	0f 85 f4 01 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c002049c:	83 ec 0c             	sub    esp,0xc
c002049f:	6a 00                	push   0x0
c00204a1:	e8 4c f6 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00204a6:	59                   	pop    ecx
c00204a7:	5f                   	pop    edi
c00204a8:	e9 6a f9 ff ff       	jmp    c001fe17 <Vm::x87Handler(regs*)+0x1e8>
c00204ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204b1:	84 d2                	test   dl,dl
c00204b3:	75 2a                	jne    c00204df <Vm::x87Handler(regs*)+0x8b0>
c00204b5:	50                   	push   eax
c00204b6:	50                   	push   eax
c00204b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204ba:	ff 36                	push   DWORD PTR [esi]
c00204bc:	e8 c5 f3 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c00204c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204c8:	89 c6                	mov    esi,eax
c00204ca:	89 d7                	mov    edi,edx
c00204cc:	e8 21 f6 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00204d1:	57                   	push   edi
c00204d2:	56                   	push   esi
c00204d3:	52                   	push   edx
c00204d4:	50                   	push   eax
c00204d5:	e8 8e f5 ff ff       	call   c001fa68 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204da:	e9 64 01 00 00       	jmp    c0020643 <Vm::x87Handler(regs*)+0xa14>
c00204df:	80 fa 01             	cmp    dl,0x1
c00204e2:	75 11                	jne    c00204f5 <Vm::x87Handler(regs*)+0x8c6>
c00204e4:	50                   	push   eax
c00204e5:	50                   	push   eax
c00204e6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e9:	ff 36                	push   DWORD PTR [esi]
c00204eb:	e8 96 f3 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c00204f0:	e9 35 01 00 00       	jmp    c002062a <Vm::x87Handler(regs*)+0x9fb>
c00204f5:	80 fa 02             	cmp    dl,0x2
c00204f8:	0f 85 54 f9 ff ff    	jne    c001fe52 <Vm::x87Handler(regs*)+0x223>
c00204fe:	55                   	push   ebp
c00204ff:	55                   	push   ebp
c0020500:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020503:	ff 36                	push   DWORD PTR [esi]
c0020505:	e8 7c f3 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c002050a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020511:	89 c6                	mov    esi,eax
c0020513:	89 d7                	mov    edi,edx
c0020515:	e8 d8 f5 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002051a:	57                   	push   edi
c002051b:	56                   	push   esi
c002051c:	52                   	push   edx
c002051d:	50                   	push   eax
c002051e:	e8 f2 f4 ff ff       	call   c001fa15 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020527:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002052a:	83 c4 20             	add    esp,0x20
c002052d:	e9 74 f7 ff ff       	jmp    c001fca6 <Vm::x87Handler(regs*)+0x77>
c0020532:	80 fa 04             	cmp    dl,0x4
c0020535:	75 2a                	jne    c0020561 <Vm::x87Handler(regs*)+0x932>
c0020537:	51                   	push   ecx
c0020538:	51                   	push   ecx
c0020539:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002053c:	ff 36                	push   DWORD PTR [esi]
c002053e:	e8 43 f3 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c0020543:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002054a:	89 c6                	mov    esi,eax
c002054c:	89 d7                	mov    edi,edx
c002054e:	e8 9f f5 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020553:	57                   	push   edi
c0020554:	56                   	push   esi
c0020555:	52                   	push   edx
c0020556:	50                   	push   eax
c0020557:	e8 36 f5 ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002055c:	e9 e2 00 00 00       	jmp    c0020643 <Vm::x87Handler(regs*)+0xa14>
c0020561:	80 fa 05             	cmp    dl,0x5
c0020564:	75 28                	jne    c002058e <Vm::x87Handler(regs*)+0x95f>
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	6a 00                	push   0x0
c002056b:	e8 82 f5 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020570:	89 c7                	mov    edi,eax
c0020572:	89 d5                	mov    ebp,edx
c0020574:	58                   	pop    eax
c0020575:	5a                   	pop    edx
c0020576:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020579:	ff 36                	push   DWORD PTR [esi]
c002057b:	e8 06 f3 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	55                   	push   ebp
c0020584:	57                   	push   edi
c0020585:	52                   	push   edx
c0020586:	50                   	push   eax
c0020587:	e8 06 f5 ff ff       	call   c001fa92 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002058c:	eb 60                	jmp    c00205ee <Vm::x87Handler(regs*)+0x9bf>
c002058e:	80 fa 06             	cmp    dl,0x6
c0020591:	75 2a                	jne    c00205bd <Vm::x87Handler(regs*)+0x98e>
c0020593:	51                   	push   ecx
c0020594:	51                   	push   ecx
c0020595:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020598:	ff 36                	push   DWORD PTR [esi]
c002059a:	e8 e7 f2 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c002059f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205a6:	89 c6                	mov    esi,eax
c00205a8:	89 d7                	mov    edi,edx
c00205aa:	e8 43 f5 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00205af:	57                   	push   edi
c00205b0:	56                   	push   esi
c00205b1:	52                   	push   edx
c00205b2:	50                   	push   eax
c00205b3:	e8 08 f5 ff ff       	call   c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205b8:	e9 86 00 00 00       	jmp    c0020643 <Vm::x87Handler(regs*)+0xa14>
c00205bd:	31 c0                	xor    eax,eax
c00205bf:	80 fa 07             	cmp    dl,0x7
c00205c2:	0f 85 c8 00 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c00205c8:	83 ec 0c             	sub    esp,0xc
c00205cb:	6a 00                	push   0x0
c00205cd:	e8 20 f5 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c00205d2:	89 c7                	mov    edi,eax
c00205d4:	89 d5                	mov    ebp,edx
c00205d6:	58                   	pop    eax
c00205d7:	5a                   	pop    edx
c00205d8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205db:	ff 36                	push   DWORD PTR [esi]
c00205dd:	e8 a4 f2 ff ff       	call   c001f886 <Vm::fpu64ToInternal(unsigned long long)>
c00205e2:	83 c4 10             	add    esp,0x10
c00205e5:	55                   	push   ebp
c00205e6:	57                   	push   edi
c00205e7:	52                   	push   edx
c00205e8:	50                   	push   eax
c00205e9:	e8 d2 f4 ff ff       	call   c001fac0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205ee:	83 c4 0c             	add    esp,0xc
c00205f1:	eb 53                	jmp    c0020646 <Vm::x87Handler(regs*)+0xa17>
c00205f3:	31 c0                	xor    eax,eax
c00205f5:	80 fa 02             	cmp    dl,0x2
c00205f8:	0f 85 92 00 00 00    	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c00205fe:	83 ec 0c             	sub    esp,0xc
c0020601:	6a 00                	push   0x0
c0020603:	e8 ea f4 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c0020608:	59                   	pop    ecx
c0020609:	5f                   	pop    edi
c002060a:	52                   	push   edx
c002060b:	50                   	push   eax
c002060c:	e8 27 f2 ff ff       	call   c001f838 <Vm::fpuInternalTo64(unsigned long long)>
c0020611:	eb 70                	jmp    c0020683 <Vm::x87Handler(regs*)+0xa54>
c0020613:	31 c0                	xor    eax,eax
c0020615:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002061a:	75 74                	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c002061c:	50                   	push   eax
c002061d:	50                   	push   eax
c002061e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020621:	31 d2                	xor    edx,edx
c0020623:	52                   	push   edx
c0020624:	50                   	push   eax
c0020625:	e8 f6 f2 ff ff       	call   c001f920 <Vm::fpuLongToFloat(long long)>
c002062a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020631:	89 c6                	mov    esi,eax
c0020633:	89 d7                	mov    edi,edx
c0020635:	e8 b8 f4 ff ff       	call   c001faf2 <Vm::fpuGetReg(int)>
c002063a:	57                   	push   edi
c002063b:	56                   	push   esi
c002063c:	52                   	push   edx
c002063d:	50                   	push   eax
c002063e:	e8 5e f4 ff ff       	call   c001faa1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020643:	83 c4 1c             	add    esp,0x1c
c0020646:	52                   	push   edx
c0020647:	50                   	push   eax
c0020648:	6a 00                	push   0x0
c002064a:	e8 e6 f4 ff ff       	call   c001fb35 <Vm::fpuSetReg(int, unsigned long long)>
c002064f:	e9 f2 f7 ff ff       	jmp    c001fe46 <Vm::x87Handler(regs*)+0x217>
c0020654:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020658:	80 fa 05             	cmp    dl,0x5
c002065b:	75 11                	jne    c002066e <Vm::x87Handler(regs*)+0xa3f>
c002065d:	55                   	push   ebp
c002065e:	55                   	push   ebp
c002065f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020662:	ff 36                	push   DWORD PTR [esi]
c0020664:	e8 81 f2 ff ff       	call   c001f8ea <Vm::fpuULongToFloat(unsigned long long)>
c0020669:	e9 cf f7 ff ff       	jmp    c001fe3d <Vm::x87Handler(regs*)+0x20e>
c002066e:	31 c0                	xor    eax,eax
c0020670:	80 fa 07             	cmp    dl,0x7
c0020673:	75 1b                	jne    c0020690 <Vm::x87Handler(regs*)+0xa61>
c0020675:	e8 63 f5 ff ff       	call   c001fbdd <Vm::fpuPop()>
c002067a:	51                   	push   ecx
c002067b:	51                   	push   ecx
c002067c:	52                   	push   edx
c002067d:	50                   	push   eax
c002067e:	e8 0c f2 ff ff       	call   c001f88f <Vm::fpuFloatToLong(unsigned long long)>
c0020683:	83 c4 10             	add    esp,0x10
c0020686:	89 06                	mov    DWORD PTR [esi],eax
c0020688:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002068b:	e9 f8 f7 ff ff       	jmp    c001fe88 <Vm::x87Handler(regs*)+0x259>
c0020690:	83 c4 1c             	add    esp,0x1c
c0020693:	5b                   	pop    ebx
c0020694:	5e                   	pop    esi
c0020695:	5f                   	pop    edi
c0020696:	5d                   	pop    ebp
c0020697:	c3                   	ret    

c0020698 <__static_initialization_and_destruction_0(int, int)>:
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00206a0:	75 1a                	jne    c00206bc <__static_initialization_and_destruction_0(int, int)+0x24>
c00206a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00206aa:	75 10                	jne    c00206bc <__static_initialization_and_destruction_0(int, int)+0x24>
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	68 00 28 03 c0       	push   0xc0032800
c00206b4:	e8 63 90 00 00       	call   c002971c <Vm::_FPUState::_FPUState()>
c00206b9:	83 c4 10             	add    esp,0x10
c00206bc:	90                   	nop
c00206bd:	83 c4 0c             	add    esp,0xc
c00206c0:	c3                   	ret    

c00206c1 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00206c1:	83 ec 0c             	sub    esp,0xc
c00206c4:	83 ec 08             	sub    esp,0x8
c00206c7:	68 ff ff 00 00       	push   0xffff
c00206cc:	6a 01                	push   0x1
c00206ce:	e8 c5 ff ff ff       	call   c0020698 <__static_initialization_and_destruction_0(int, int)>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	83 c4 0c             	add    esp,0xc
c00206d9:	c3                   	ret    

c00206da <FAT::getName()>:
c00206da:	b8 14 d3 02 c0       	mov    eax,0xc002d314
c00206df:	c3                   	ret    

c00206e0 <FAT::tell(void*, unsigned long long*)>:
c00206e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00206e5:	75 06                	jne    c00206ed <FAT::tell(void*, unsigned long long*)+0xd>
c00206e7:	b8 04 00 00 00       	mov    eax,0x4
c00206ec:	c3                   	ret    
c00206ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206f2:	75 06                	jne    c00206fa <FAT::tell(void*, unsigned long long*)+0x1a>
c00206f4:	b8 04 00 00 00       	mov    eax,0x4
c00206f9:	c3                   	ret    
c00206fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206fe:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020701:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020704:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020708:	89 01                	mov    DWORD PTR [ecx],eax
c002070a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002070d:	b8 00 00 00 00       	mov    eax,0x0
c0020712:	c3                   	ret    
c0020713:	90                   	nop

c0020714 <FAT::stat(void*, unsigned long long*)>:
c0020714:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020719:	75 06                	jne    c0020721 <FAT::stat(void*, unsigned long long*)+0xd>
c002071b:	b8 04 00 00 00       	mov    eax,0x4
c0020720:	c3                   	ret    
c0020721:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020726:	75 06                	jne    c002072e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020728:	b8 04 00 00 00       	mov    eax,0x4
c002072d:	c3                   	ret    
c002072e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020732:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020735:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020738:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002073c:	89 01                	mov    DWORD PTR [ecx],eax
c002073e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020741:	b8 00 00 00 00       	mov    eax,0x0
c0020746:	c3                   	ret    
c0020747:	90                   	nop

c0020748 <FAT::~FAT()>:
c0020748:	83 ec 0c             	sub    esp,0xc
c002074b:	ba a4 d3 02 c0       	mov    edx,0xc002d3a4
c0020750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020754:	89 10                	mov    DWORD PTR [eax],edx
c0020756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002075a:	83 ec 0c             	sub    esp,0xc
c002075d:	50                   	push   eax
c002075e:	e8 c7 24 ff ff       	call   c0012c2a <Filesystem::~Filesystem()>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	90                   	nop
c0020767:	83 c4 0c             	add    esp,0xc
c002076a:	c3                   	ret    
c002076b:	90                   	nop

c002076c <FAT::~FAT()>:
c002076c:	83 ec 0c             	sub    esp,0xc
c002076f:	83 ec 0c             	sub    esp,0xc
c0020772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020776:	e8 cd ff ff ff       	call   c0020748 <FAT::~FAT()>
c002077b:	83 c4 10             	add    esp,0x10
c002077e:	83 ec 08             	sub    esp,0x8
c0020781:	6a 08                	push   0x8
c0020783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020787:	e8 8f 20 ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c002078c:	83 c4 10             	add    esp,0x10
c002078f:	83 c4 0c             	add    esp,0xc
c0020792:	c3                   	ret    
c0020793:	90                   	nop

c0020794 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020794:	83 ec 1c             	sub    esp,0x1c
c0020797:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002079e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00207a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207a7:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c00207ae:	83 f8 ff             	cmp    eax,0xffffffff
c00207b1:	75 34                	jne    c00207e7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00207b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207b7:	88 c2                	mov    dl,al
c00207b9:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c00207be:	01 d0                	add    eax,edx
c00207c0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207c4:	8b 15 60 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032860
c00207ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207ce:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c00207d5:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c00207da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00207de:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c00207e5:	eb 17                	jmp    c00207fe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00207e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207eb:	88 c2                	mov    dl,al
c00207ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207f1:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c00207f8:	01 d0                	add    eax,edx
c00207fa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207fe:	83 ec 04             	sub    esp,0x4
c0020801:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020805:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020809:	8d 44 24 15          	lea    eax,[esp+0x15]
c002080d:	50                   	push   eax
c002080e:	e8 eb 64 fe ff       	call   c0006cfe <f_getlabel>
c0020813:	83 c4 10             	add    esp,0x10
c0020816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002081a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002081f:	75 07                	jne    c0020828 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020821:	b8 00 00 00 00       	mov    eax,0x0
c0020826:	eb 05                	jmp    c002082d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020828:	b8 01 00 00 00       	mov    eax,0x1
c002082d:	83 c4 1c             	add    esp,0x1c
c0020830:	c3                   	ret    
c0020831:	90                   	nop

c0020832 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020832:	57                   	push   edi
c0020833:	83 ec 58             	sub    esp,0x58
c0020836:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002083e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020842:	b9 0f 00 00 00       	mov    ecx,0xf
c0020847:	b8 00 00 00 00       	mov    eax,0x0
c002084c:	fc                   	cld    
c002084d:	89 d7                	mov    edi,edx
c002084f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020851:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020855:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c002085c:	83 f8 ff             	cmp    eax,0xffffffff
c002085f:	75 34                	jne    c0020895 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020861:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020865:	88 c2                	mov    dl,al
c0020867:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c002086c:	01 d0                	add    eax,edx
c002086e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020872:	8b 15 60 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032860
c0020878:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002087c:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020883:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020888:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002088c:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c0020893:	eb 17                	jmp    c00208ac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020895:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020899:	88 c2                	mov    dl,al
c002089b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002089f:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c00208a6:	01 d0                	add    eax,edx
c00208a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208ac:	83 ec 08             	sub    esp,0x8
c00208af:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00208b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208b7:	50                   	push   eax
c00208b8:	e8 8f 00 fe ff       	call   c000094c <strcat>
c00208bd:	83 c4 10             	add    esp,0x10
c00208c0:	83 ec 0c             	sub    esp,0xc
c00208c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208c7:	50                   	push   eax
c00208c8:	e8 1f 66 fe ff       	call   c0006eec <f_setlabel>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00208d4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00208d9:	75 07                	jne    c00208e2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00208db:	b8 00 00 00 00       	mov    eax,0x0
c00208e0:	eb 05                	jmp    c00208e7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00208e2:	b8 01 00 00 00       	mov    eax,0x1
c00208e7:	83 c4 58             	add    esp,0x58
c00208ea:	5f                   	pop    edi
c00208eb:	c3                   	ret    

c00208ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00208ec:	83 ec 2c             	sub    esp,0x2c
c00208ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00208f7:	83 ec 08             	sub    esp,0x8
c00208fa:	68 38 d3 02 c0       	push   0xc002d338
c00208ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020903:	e8 90 ff fd ff       	call   c0000898 <strcmp>
c0020908:	83 c4 10             	add    esp,0x10
c002090b:	85 c0                	test   eax,eax
c002090d:	0f 94 c0             	sete   al
c0020910:	84 c0                	test   al,al
c0020912:	74 0d                	je     c0020921 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020914:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002091c:	e9 a6 00 00 00       	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020921:	83 ec 08             	sub    esp,0x8
c0020924:	68 2a d3 02 c0       	push   0xc002d32a
c0020929:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002092d:	e8 66 ff fd ff       	call   c0000898 <strcmp>
c0020932:	83 c4 10             	add    esp,0x10
c0020935:	85 c0                	test   eax,eax
c0020937:	0f 94 c0             	sete   al
c002093a:	84 c0                	test   al,al
c002093c:	74 0a                	je     c0020948 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002093e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020946:	eb 7f                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020948:	83 ec 08             	sub    esp,0x8
c002094b:	68 30 d3 02 c0       	push   0xc002d330
c0020950:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020954:	e8 3f ff fd ff       	call   c0000898 <strcmp>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	85 c0                	test   eax,eax
c002095e:	0f 94 c0             	sete   al
c0020961:	84 c0                	test   al,al
c0020963:	74 0a                	je     c002096f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020965:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002096d:	eb 58                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002096f:	83 ec 08             	sub    esp,0x8
c0020972:	68 8c 9e 02 c0       	push   0xc0029e8c
c0020977:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002097b:	e8 18 ff fd ff       	call   c0000898 <strcmp>
c0020980:	83 c4 10             	add    esp,0x10
c0020983:	85 c0                	test   eax,eax
c0020985:	0f 94 c0             	sete   al
c0020988:	84 c0                	test   al,al
c002098a:	74 0a                	je     c0020996 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002098c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020994:	eb 31                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020996:	83 ec 08             	sub    esp,0x8
c0020999:	68 36 d3 02 c0       	push   0xc002d336
c002099e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209a2:	e8 f1 fe fd ff       	call   c0000898 <strcmp>
c00209a7:	83 c4 10             	add    esp,0x10
c00209aa:	85 c0                	test   eax,eax
c00209ac:	0f 94 c0             	sete   al
c00209af:	84 c0                	test   al,al
c00209b1:	74 0a                	je     c00209bd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00209b3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00209bb:	eb 0a                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209bd:	b8 08 00 00 00       	mov    eax,0x8
c00209c2:	e9 04 01 00 00       	jmp    c0020acb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209c7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00209ce:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00209d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209d7:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c00209de:	83 f8 ff             	cmp    eax,0xffffffff
c00209e1:	75 34                	jne    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00209e3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00209e7:	88 c2                	mov    dl,al
c00209e9:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c00209ee:	01 d0                	add    eax,edx
c00209f0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00209f4:	8b 15 60 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032860
c00209fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209fe:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020a05:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020a0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020a0e:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c0020a15:	eb 17                	jmp    c0020a2e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020a17:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a1b:	88 c2                	mov    dl,al
c0020a1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a21:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c0020a28:	01 d0                	add    eax,edx
c0020a2a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a32:	88 04 24             	mov    BYTE PTR [esp],al
c0020a35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020a45:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020a4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020a52:	83 ec 0c             	sub    esp,0xc
c0020a55:	68 00 20 00 00       	push   0x2000
c0020a5a:	e8 a3 ee fe ff       	call   c000f902 <malloc>
c0020a5f:	83 c4 10             	add    esp,0x10
c0020a62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a66:	68 00 20 00 00       	push   0x2000
c0020a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a73:	50                   	push   eax
c0020a74:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020a78:	50                   	push   eax
c0020a79:	e8 b9 68 fe ff       	call   c0007337 <f_mkfs>
c0020a7e:	83 c4 10             	add    esp,0x10
c0020a81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020a8a:	75 07                	jne    c0020a93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020a8c:	b8 00 00 00 00       	mov    eax,0x0
c0020a91:	eb 38                	jmp    c0020acb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a93:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020a98:	75 17                	jne    c0020ab1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020a9a:	83 ec 0c             	sub    esp,0xc
c0020a9d:	68 74 d3 02 c0       	push   0xc002d374
c0020aa2:	e8 54 1e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	b8 09 00 00 00       	mov    eax,0x9
c0020aaf:	eb 1a                	jmp    c0020acb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ab1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ab5:	83 ec 08             	sub    esp,0x8
c0020ab8:	50                   	push   eax
c0020ab9:	68 3c d3 02 c0       	push   0xc002d33c
c0020abe:	e8 38 1e ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0020ac3:	83 c4 10             	add    esp,0x10
c0020ac6:	b8 01 00 00 00       	mov    eax,0x1
c0020acb:	83 c4 2c             	add    esp,0x2c
c0020ace:	c3                   	ret    
c0020acf:	90                   	nop

c0020ad0 <FAT::tryMount(LogicalDisk*, int)>:
c0020ad0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020ad6:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020adb:	83 f8 14             	cmp    eax,0x14
c0020ade:	75 17                	jne    c0020af7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020ae0:	83 ec 0c             	sub    esp,0xc
c0020ae3:	68 4e d3 02 c0       	push   0xc002d34e
c0020ae8:	e8 c2 98 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0020aed:	83 c4 10             	add    esp,0x10
c0020af0:	b0 00                	mov    al,0x0
c0020af2:	e9 d7 01 00 00       	jmp    c0020cce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020af7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020afe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b0a:	3d 00 02 00 00       	cmp    eax,0x200
c0020b0f:	74 07                	je     c0020b18 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020b11:	b0 00                	mov    al,0x0
c0020b13:	e9 b6 01 00 00       	jmp    c0020cce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b18:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020b20:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b27:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c0020b2e:	83 f8 ff             	cmp    eax,0xffffffff
c0020b31:	74 07                	je     c0020b3a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020b33:	b0 01                	mov    al,0x1
c0020b35:	e9 94 01 00 00       	jmp    c0020cce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b3a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020b44:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020b4c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020b53:	88 c2                	mov    dl,al
c0020b55:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020b5a:	01 d0                	add    eax,edx
c0020b5c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020b63:	8b 15 60 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032860
c0020b69:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b70:	89 14 85 80 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd780],edx
c0020b77:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020b7c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020b83:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c0020b8a:	83 ec 0c             	sub    esp,0xc
c0020b8d:	68 54 02 00 00       	push   0x254
c0020b92:	e8 6b ed fe ff       	call   c000f902 <malloc>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ba1:	83 ec 04             	sub    esp,0x4
c0020ba4:	6a 00                	push   0x0
c0020ba6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bad:	50                   	push   eax
c0020bae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bb5:	e8 3b 43 fe ff       	call   c0004ef5 <f_mount>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bc4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020bcc:	74 19                	je     c0020be7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020bce:	83 ec 0c             	sub    esp,0xc
c0020bd1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bd8:	e8 45 ed fe ff       	call   c000f922 <rfree>
c0020bdd:	83 c4 10             	add    esp,0x10
c0020be0:	b0 00                	mov    al,0x0
c0020be2:	e9 e7 00 00 00       	jmp    c0020cce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020be7:	83 ec 04             	sub    esp,0x4
c0020bea:	68 00 01 00 00       	push   0x100
c0020bef:	6a 00                	push   0x0
c0020bf1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020bf8:	50                   	push   eax
c0020bf9:	e8 52 fb fd ff       	call   c0000750 <memset>
c0020bfe:	83 c4 10             	add    esp,0x10
c0020c01:	83 ec 08             	sub    esp,0x8
c0020c04:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c0b:	50                   	push   eax
c0020c0c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c13:	50                   	push   eax
c0020c14:	e8 33 fd fd ff       	call   c000094c <strcat>
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	83 ec 08             	sub    esp,0x8
c0020c1f:	68 5c d3 02 c0       	push   0xc002d35c
c0020c24:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c2b:	50                   	push   eax
c0020c2c:	e8 1b fd fd ff       	call   c000094c <strcat>
c0020c31:	83 c4 10             	add    esp,0x10
c0020c34:	83 ec 04             	sub    esp,0x4
c0020c37:	6a 01                	push   0x1
c0020c39:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020c40:	50                   	push   eax
c0020c41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c45:	50                   	push   eax
c0020c46:	e8 0c 43 fe ff       	call   c0004f57 <f_open>
c0020c4b:	83 c4 10             	add    esp,0x10
c0020c4e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020c55:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020c5c:	85 c0                	test   eax,eax
c0020c5e:	74 0a                	je     c0020c6a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020c60:	78 2d                	js     c0020c8f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c62:	83 e8 04             	sub    eax,0x4
c0020c65:	83 f8 01             	cmp    eax,0x1
c0020c68:	77 25                	ja     c0020c8f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c6a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020c72:	83 ec 0c             	sub    esp,0xc
c0020c75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c79:	50                   	push   eax
c0020c7a:	e8 2a 4e fe ff       	call   c0005aa9 <f_close>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	90                   	nop
c0020c83:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020c8b:	74 3a                	je     c0020cc7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020c8d:	eb 2d                	jmp    c0020cbc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020c8f:	83 ec 0c             	sub    esp,0xc
c0020c92:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c99:	e8 84 ec fe ff       	call   c000f922 <rfree>
c0020c9e:	83 c4 10             	add    esp,0x10
c0020ca1:	83 ec 04             	sub    esp,0x4
c0020ca4:	6a 00                	push   0x0
c0020ca6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020cad:	50                   	push   eax
c0020cae:	6a 00                	push   0x0
c0020cb0:	e8 40 42 fe ff       	call   c0004ef5 <f_mount>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	b0 00                	mov    al,0x0
c0020cba:	eb 12                	jmp    c0020cce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020cbc:	a1 60 28 03 c0       	mov    eax,ds:0xc0032860
c0020cc1:	40                   	inc    eax
c0020cc2:	a3 60 28 03 c0       	mov    ds:0xc0032860,eax
c0020cc7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020cce:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020cd4:	c3                   	ret    
c0020cd5:	90                   	nop

c0020cd6 <FAT::getFileFirstSector(char const*)>:
c0020cd6:	53                   	push   ebx
c0020cd7:	83 ec 28             	sub    esp,0x28
c0020cda:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020ce2:	83 ec 0c             	sub    esp,0xc
c0020ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ce9:	e8 14 ec fe ff       	call   c000f902 <malloc>
c0020cee:	83 c4 10             	add    esp,0x10
c0020cf1:	89 c3                	mov    ebx,eax
c0020cf3:	a1 90 27 03 c0       	mov    eax,ds:0xc0032790
c0020cf8:	83 ec 04             	sub    esp,0x4
c0020cfb:	50                   	push   eax
c0020cfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020d00:	53                   	push   ebx
c0020d01:	e8 54 21 ff ff       	call   c0012e5a <File::File(char const*, Process*)>
c0020d06:	83 c4 10             	add    esp,0x10
c0020d09:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020d0d:	83 ec 08             	sub    esp,0x8
c0020d10:	6a 01                	push   0x1
c0020d12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d16:	e8 a3 21 ff ff       	call   c0012ebe <File::open(FileOpenMode)>
c0020d1b:	83 c4 10             	add    esp,0x10
c0020d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d24:	83 c0 0c             	add    eax,0xc
c0020d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d29:	83 ec 0c             	sub    esp,0xc
c0020d2c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020d30:	52                   	push   edx
c0020d31:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020d35:	52                   	push   edx
c0020d36:	6a 00                	push   0x0
c0020d38:	6a 04                	push   0x4
c0020d3a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020d3e:	ff d0                	call   eax
c0020d40:	83 c4 20             	add    esp,0x20
c0020d43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d47:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020d4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d55:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020d58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020d5b:	83 ec 04             	sub    esp,0x4
c0020d5e:	52                   	push   edx
c0020d5f:	50                   	push   eax
c0020d60:	68 67 d3 02 c0       	push   0xc002d367
c0020d65:	e8 91 1b ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0020d6a:	83 c4 10             	add    esp,0x10
c0020d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d71:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020d74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d7b:	83 ec 0c             	sub    esp,0xc
c0020d7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d82:	e8 95 21 ff ff       	call   c0012f1c <File::close()>
c0020d87:	83 c4 10             	add    esp,0x10
c0020d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d8e:	ba 00 00 00 00       	mov    edx,0x0
c0020d93:	83 c4 28             	add    esp,0x28
c0020d96:	5b                   	pop    ebx
c0020d97:	c3                   	ret    

c0020d98 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020d98:	57                   	push   edi
c0020d99:	56                   	push   esi
c0020d9a:	53                   	push   ebx
c0020d9b:	81 ec 50 02 00 00    	sub    esp,0x250
c0020da1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020da9:	74 0a                	je     c0020db5 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020dab:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020db3:	75 0a                	jne    c0020dbf <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020db5:	b8 04 00 00 00       	mov    eax,0x4
c0020dba:	e9 29 01 00 00       	jmp    c0020ee8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020dbf:	83 ec 08             	sub    esp,0x8
c0020dc2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020dc9:	50                   	push   eax
c0020dca:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020dd1:	e8 dd 52 fe ff       	call   c00060b3 <f_readdir>
c0020dd6:	83 c4 10             	add    esp,0x10
c0020dd9:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020de0:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020de7:	83 ec 0c             	sub    esp,0xc
c0020dea:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020df1:	83 c0 1a             	add    eax,0x1a
c0020df4:	50                   	push   eax
c0020df5:	e8 72 f9 fd ff       	call   c000076c <strlen>
c0020dfa:	83 c4 10             	add    esp,0x10
c0020dfd:	ba 00 00 00 00       	mov    edx,0x0
c0020e02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e0a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020e11:	0f b6 c0             	movzx  eax,al
c0020e14:	83 e0 10             	and    eax,0x10
c0020e17:	74 07                	je     c0020e20 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020e19:	b8 02 00 00 00       	mov    eax,0x2
c0020e1e:	eb 05                	jmp    c0020e25 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020e20:	b8 01 00 00 00       	mov    eax,0x1
c0020e25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e29:	83 ec 08             	sub    esp,0x8
c0020e2c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020e33:	83 c0 1a             	add    eax,0x1a
c0020e36:	50                   	push   eax
c0020e37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020e3b:	83 c0 10             	add    eax,0x10
c0020e3e:	50                   	push   eax
c0020e3f:	e8 c8 f9 fd ff       	call   c000080c <strcpy>
c0020e44:	83 c4 10             	add    esp,0x10
c0020e47:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020e4e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020e55:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020e59:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020e60:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020e67:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020e6e:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020e75:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020e7c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020e83:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020e8a:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020e91:	89 c6                	mov    esi,eax
c0020e93:	89 d7                	mov    edi,edx
c0020e95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e97:	89 c8                	mov    eax,ecx
c0020e99:	89 fa                	mov    edx,edi
c0020e9b:	89 f3                	mov    ebx,esi
c0020e9d:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020ea4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020eab:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020eb2:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020eb9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ebf:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020ec6:	84 c0                	test   al,al
c0020ec8:	75 07                	jne    c0020ed1 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020eca:	b8 07 00 00 00       	mov    eax,0x7
c0020ecf:	eb 17                	jmp    c0020ee8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ed1:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020ed8:	85 c0                	test   eax,eax
c0020eda:	75 07                	jne    c0020ee3 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020edc:	b8 00 00 00 00       	mov    eax,0x0
c0020ee1:	eb 05                	jmp    c0020ee8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ee3:	b8 01 00 00 00       	mov    eax,0x1
c0020ee8:	81 c4 50 02 00 00    	add    esp,0x250
c0020eee:	5b                   	pop    ebx
c0020eef:	5e                   	pop    esi
c0020ef0:	5f                   	pop    edi
c0020ef1:	c3                   	ret    

c0020ef2 <FAT::read(void*, unsigned long, void*, int*)>:
c0020ef2:	83 ec 1c             	sub    esp,0x1c
c0020ef5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020efa:	74 07                	je     c0020f03 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020efc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020f01:	75 07                	jne    c0020f0a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020f03:	b8 04 00 00 00       	mov    eax,0x4
c0020f08:	eb 3d                	jmp    c0020f47 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f0e:	50                   	push   eax
c0020f0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f1b:	e8 73 44 fe ff       	call   c0005393 <f_read>
c0020f20:	83 c4 10             	add    esp,0x10
c0020f23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f2b:	89 c2                	mov    edx,eax
c0020f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f31:	89 10                	mov    DWORD PTR [eax],edx
c0020f33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f37:	85 c0                	test   eax,eax
c0020f39:	75 07                	jne    c0020f42 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020f3b:	b8 00 00 00 00       	mov    eax,0x0
c0020f40:	eb 05                	jmp    c0020f47 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f42:	b8 01 00 00 00       	mov    eax,0x1
c0020f47:	83 c4 1c             	add    esp,0x1c
c0020f4a:	c3                   	ret    
c0020f4b:	90                   	nop

c0020f4c <FAT::write(void*, unsigned long, void*, int*)>:
c0020f4c:	83 ec 1c             	sub    esp,0x1c
c0020f4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f54:	74 07                	je     c0020f5d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020f56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020f5b:	75 07                	jne    c0020f64 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020f5d:	b8 04 00 00 00       	mov    eax,0x4
c0020f62:	eb 3d                	jmp    c0020fa1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f64:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f68:	50                   	push   eax
c0020f69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f75:	e8 99 46 fe ff       	call   c0005613 <f_write>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f85:	89 c2                	mov    edx,eax
c0020f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f8b:	89 10                	mov    DWORD PTR [eax],edx
c0020f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f91:	85 c0                	test   eax,eax
c0020f93:	75 07                	jne    c0020f9c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020f95:	b8 00 00 00 00       	mov    eax,0x0
c0020f9a:	eb 05                	jmp    c0020fa1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f9c:	b8 01 00 00 00       	mov    eax,0x1
c0020fa1:	83 c4 1c             	add    esp,0x1c
c0020fa4:	c3                   	ret    
c0020fa5:	90                   	nop

c0020fa6 <FAT::close(void*)>:
c0020fa6:	83 ec 1c             	sub    esp,0x1c
c0020fa9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020fae:	75 07                	jne    c0020fb7 <FAT::close(void*)+0x11>
c0020fb0:	b8 04 00 00 00       	mov    eax,0x4
c0020fb5:	eb 36                	jmp    c0020fed <FAT::close(void*)+0x47>
c0020fb7:	83 ec 0c             	sub    esp,0xc
c0020fba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fbe:	e8 e6 4a fe ff       	call   c0005aa9 <f_close>
c0020fc3:	83 c4 10             	add    esp,0x10
c0020fc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fca:	83 ec 0c             	sub    esp,0xc
c0020fcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fd1:	e8 3c e9 fe ff       	call   c000f912 <free>
c0020fd6:	83 c4 10             	add    esp,0x10
c0020fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fdd:	85 c0                	test   eax,eax
c0020fdf:	75 07                	jne    c0020fe8 <FAT::close(void*)+0x42>
c0020fe1:	b8 00 00 00 00       	mov    eax,0x0
c0020fe6:	eb 05                	jmp    c0020fed <FAT::close(void*)+0x47>
c0020fe8:	b8 01 00 00 00       	mov    eax,0x1
c0020fed:	83 c4 1c             	add    esp,0x1c
c0020ff0:	c3                   	ret    
c0020ff1:	90                   	nop

c0020ff2 <FAT::closeDir(void*)>:
c0020ff2:	83 ec 1c             	sub    esp,0x1c
c0020ff5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ffa:	75 07                	jne    c0021003 <FAT::closeDir(void*)+0x11>
c0020ffc:	b8 04 00 00 00       	mov    eax,0x4
c0021001:	eb 36                	jmp    c0021039 <FAT::closeDir(void*)+0x47>
c0021003:	83 ec 0c             	sub    esp,0xc
c0021006:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002100a:	e8 82 50 fe ff       	call   c0006091 <f_closedir>
c002100f:	83 c4 10             	add    esp,0x10
c0021012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021016:	83 ec 0c             	sub    esp,0xc
c0021019:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002101d:	e8 f0 e8 fe ff       	call   c000f912 <free>
c0021022:	83 c4 10             	add    esp,0x10
c0021025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021029:	85 c0                	test   eax,eax
c002102b:	75 07                	jne    c0021034 <FAT::closeDir(void*)+0x42>
c002102d:	b8 00 00 00 00       	mov    eax,0x0
c0021032:	eb 05                	jmp    c0021039 <FAT::closeDir(void*)+0x47>
c0021034:	b8 01 00 00 00       	mov    eax,0x1
c0021039:	83 c4 1c             	add    esp,0x1c
c002103c:	c3                   	ret    
c002103d:	90                   	nop

c002103e <FAT::seek(void*, unsigned long long)>:
c002103e:	83 ec 2c             	sub    esp,0x2c
c0021041:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021045:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021049:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002104d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021051:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021056:	75 07                	jne    c002105f <FAT::seek(void*, unsigned long long)+0x21>
c0021058:	b8 04 00 00 00       	mov    eax,0x4
c002105d:	eb 2f                	jmp    c002108e <FAT::seek(void*, unsigned long long)+0x50>
c002105f:	83 ec 04             	sub    esp,0x4
c0021062:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021066:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002106a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002106e:	e8 65 4a fe ff       	call   c0005ad8 <f_lseek>
c0021073:	83 c4 10             	add    esp,0x10
c0021076:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002107a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002107e:	85 c0                	test   eax,eax
c0021080:	75 07                	jne    c0021089 <FAT::seek(void*, unsigned long long)+0x4b>
c0021082:	b8 00 00 00 00       	mov    eax,0x0
c0021087:	eb 05                	jmp    c002108e <FAT::seek(void*, unsigned long long)+0x50>
c0021089:	b8 01 00 00 00       	mov    eax,0x1
c002108e:	83 c4 2c             	add    esp,0x2c
c0021091:	c3                   	ret    

c0021092 <fatWrapperReadDisk>:
c0021092:	83 ec 1c             	sub    esp,0x1c
c0021095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021099:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002109d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00210a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00210a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210b1:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c00210b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210c3:	52                   	push   edx
c00210c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210cc:	50                   	push   eax
c00210cd:	e8 a6 51 ff ff       	call   c0016278 <LogicalDisk::read(unsigned long long, int, void*)>
c00210d2:	83 c4 20             	add    esp,0x20
c00210d5:	83 c4 1c             	add    esp,0x1c
c00210d8:	c3                   	ret    

c00210d9 <fatWrapperWriteDisk>:
c00210d9:	83 ec 1c             	sub    esp,0x1c
c00210dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00210eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00210ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210f8:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c00210ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021103:	83 ec 0c             	sub    esp,0xc
c0021106:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002110a:	52                   	push   edx
c002110b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002110f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021113:	50                   	push   eax
c0021114:	e8 cb 51 ff ff       	call   c00162e4 <LogicalDisk::write(unsigned long long, int, void*)>
c0021119:	83 c4 20             	add    esp,0x20
c002111c:	83 c4 1c             	add    esp,0x1c
c002111f:	c3                   	ret    

c0021120 <fatWrapperIoctl>:
c0021120:	53                   	push   ebx
c0021121:	83 ec 28             	sub    esp,0x28
c0021124:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021128:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002112c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021130:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021134:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021139:	75 31                	jne    c002116c <fatWrapperIoctl+0x4c>
c002113b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002113f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021143:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021148:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c002114f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021155:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002115b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002115f:	66 89 02             	mov    WORD PTR [edx],ax
c0021162:	b8 00 00 00 00       	mov    eax,0x0
c0021167:	e9 b2 00 00 00       	jmp    c002121e <fatWrapperIoctl+0xfe>
c002116c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021171:	75 6a                	jne    c00211dd <fatWrapperIoctl+0xbd>
c0021173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002117b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021180:	8b 04 85 40 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07c0]
c0021187:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002118d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021193:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021199:	89 c8                	mov    eax,ecx
c002119b:	89 da                	mov    edx,ebx
c002119d:	0f a4 c2 0a          	shld   edx,eax,0xa
c00211a1:	c1 e0 0a             	shl    eax,0xa
c00211a4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00211a9:	8b 0c 8d 40 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07c0]
c00211b0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00211b6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00211bc:	89 cb                	mov    ebx,ecx
c00211be:	c1 fb 1f             	sar    ebx,0x1f
c00211c1:	53                   	push   ebx
c00211c2:	51                   	push   ecx
c00211c3:	52                   	push   edx
c00211c4:	50                   	push   eax
c00211c5:	e8 0a 61 00 00       	call   c00272d4 <__udivdi3>
c00211ca:	83 c4 10             	add    esp,0x10
c00211cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211d1:	89 01                	mov    DWORD PTR [ecx],eax
c00211d3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00211d6:	b8 00 00 00 00       	mov    eax,0x0
c00211db:	eb 41                	jmp    c002121e <fatWrapperIoctl+0xfe>
c00211dd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00211e2:	75 07                	jne    c00211eb <fatWrapperIoctl+0xcb>
c00211e4:	b8 00 00 00 00       	mov    eax,0x0
c00211e9:	eb 33                	jmp    c002121e <fatWrapperIoctl+0xfe>
c00211eb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00211f0:	75 19                	jne    c002120b <fatWrapperIoctl+0xeb>
c00211f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00211f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211fe:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021204:	b8 00 00 00 00       	mov    eax,0x0
c0021209:	eb 13                	jmp    c002121e <fatWrapperIoctl+0xfe>
c002120b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021210:	75 07                	jne    c0021219 <fatWrapperIoctl+0xf9>
c0021212:	b8 00 00 00 00       	mov    eax,0x0
c0021217:	eb 05                	jmp    c002121e <fatWrapperIoctl+0xfe>
c0021219:	b8 04 00 00 00       	mov    eax,0x4
c002121e:	83 c4 28             	add    esp,0x28
c0021221:	5b                   	pop    ebx
c0021222:	c3                   	ret    
c0021223:	90                   	nop

c0021224 <FAT::FAT()>:
c0021224:	83 ec 1c             	sub    esp,0x1c
c0021227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002122b:	83 ec 0c             	sub    esp,0xc
c002122e:	50                   	push   eax
c002122f:	e8 d2 19 ff ff       	call   c0012c06 <Filesystem::Filesystem()>
c0021234:	83 c4 10             	add    esp,0x10
c0021237:	ba a4 d3 02 c0       	mov    edx,0xc002d3a4
c002123c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021240:	89 10                	mov    DWORD PTR [eax],edx
c0021242:	c7 05 60 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032860,0x0
c002124c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021254:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021259:	7f 15                	jg     c0021270 <FAT::FAT()+0x4c>
c002125b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002125f:	c7 04 85 80 28 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd780],0xffffffff
c002126a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002126e:	eb e4                	jmp    c0021254 <FAT::FAT()+0x30>
c0021270:	90                   	nop
c0021271:	83 c4 1c             	add    esp,0x1c
c0021274:	c3                   	ret    
c0021275:	90                   	nop

c0021276 <FAT::fixFilepath(char*)>:
c0021276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002127a:	8a 00                	mov    al,BYTE PTR [eax]
c002127c:	3c 40                	cmp    al,0x40
c002127e:	7e 2c                	jle    c00212ac <FAT::fixFilepath(char*)+0x36>
c0021280:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021284:	8a 00                	mov    al,BYTE PTR [eax]
c0021286:	83 e8 41             	sub    eax,0x41
c0021289:	88 c2                	mov    dl,al
c002128b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002128f:	88 10                	mov    BYTE PTR [eax],dl
c0021291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021295:	8a 00                	mov    al,BYTE PTR [eax]
c0021297:	0f be c0             	movsx  eax,al
c002129a:	8b 04 85 80 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd780]
c00212a1:	83 c0 30             	add    eax,0x30
c00212a4:	88 c2                	mov    dl,al
c00212a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212aa:	88 10                	mov    BYTE PTR [eax],dl
c00212ac:	90                   	nop
c00212ad:	c3                   	ret    

c00212ae <FAT::open(char const*, void**, FileOpenMode)>:
c00212ae:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212b4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212bc:	74 0a                	je     c00212c8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00212be:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00212c6:	75 0a                	jne    c00212d2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00212c8:	b8 04 00 00 00       	mov    eax,0x4
c00212cd:	e9 fd 00 00 00       	jmp    c00213cf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00212d2:	83 ec 08             	sub    esp,0x8
c00212d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212e0:	50                   	push   eax
c00212e1:	e8 26 f5 fd ff       	call   c000080c <strcpy>
c00212e6:	83 c4 10             	add    esp,0x10
c00212e9:	83 ec 08             	sub    esp,0x8
c00212ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c00212f0:	50                   	push   eax
c00212f1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212f8:	e8 79 ff ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c00212fd:	83 c4 10             	add    esp,0x10
c0021300:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021308:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002130f:	83 e0 01             	and    eax,0x1
c0021312:	74 08                	je     c002131c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021314:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002131c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021323:	83 e0 04             	and    eax,0x4
c0021326:	74 10                	je     c0021338 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021328:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021330:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021338:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002133f:	83 e0 02             	and    eax,0x2
c0021342:	74 08                	je     c002134c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021344:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002134c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021353:	83 e0 08             	and    eax,0x8
c0021356:	74 08                	je     c0021360 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021358:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021360:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021367:	83 e0 10             	and    eax,0x10
c002136a:	74 08                	je     c0021374 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002136c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021374:	83 ec 0c             	sub    esp,0xc
c0021377:	68 50 02 00 00       	push   0x250
c002137c:	e8 81 e5 fe ff       	call   c000f902 <malloc>
c0021381:	83 c4 10             	add    esp,0x10
c0021384:	89 c2                	mov    edx,eax
c0021386:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002138d:	89 10                	mov    DWORD PTR [eax],edx
c002138f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021397:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002139e:	8b 00                	mov    eax,DWORD PTR [eax]
c00213a0:	83 ec 04             	sub    esp,0x4
c00213a3:	52                   	push   edx
c00213a4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00213a8:	52                   	push   edx
c00213a9:	50                   	push   eax
c00213aa:	e8 a8 3b fe ff       	call   c0004f57 <f_open>
c00213af:	83 c4 10             	add    esp,0x10
c00213b2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00213b9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00213c1:	74 07                	je     c00213ca <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00213c3:	b8 01 00 00 00       	mov    eax,0x1
c00213c8:	eb 05                	jmp    c00213cf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00213ca:	b8 00 00 00 00       	mov    eax,0x0
c00213cf:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213d5:	c3                   	ret    

c00213d6 <FAT::openDir(char const*, void**)>:
c00213d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213e4:	74 0a                	je     c00213f0 <FAT::openDir(char const*, void**)+0x1a>
c00213e6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00213ee:	75 07                	jne    c00213f7 <FAT::openDir(char const*, void**)+0x21>
c00213f0:	b8 04 00 00 00       	mov    eax,0x4
c00213f5:	eb 7d                	jmp    c0021474 <FAT::openDir(char const*, void**)+0x9e>
c00213f7:	83 ec 08             	sub    esp,0x8
c00213fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021401:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021405:	50                   	push   eax
c0021406:	e8 01 f4 fd ff       	call   c000080c <strcpy>
c002140b:	83 c4 10             	add    esp,0x10
c002140e:	83 ec 08             	sub    esp,0x8
c0021411:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021415:	50                   	push   eax
c0021416:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002141d:	e8 54 fe ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c0021422:	83 c4 10             	add    esp,0x10
c0021425:	83 ec 0c             	sub    esp,0xc
c0021428:	6a 4c                	push   0x4c
c002142a:	e8 d3 e4 fe ff       	call   c000f902 <malloc>
c002142f:	83 c4 10             	add    esp,0x10
c0021432:	89 c2                	mov    edx,eax
c0021434:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002143b:	89 10                	mov    DWORD PTR [eax],edx
c002143d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021444:	8b 00                	mov    eax,DWORD PTR [eax]
c0021446:	83 ec 08             	sub    esp,0x8
c0021449:	8d 54 24 14          	lea    edx,[esp+0x14]
c002144d:	52                   	push   edx
c002144e:	50                   	push   eax
c002144f:	e8 3b 4b fe ff       	call   c0005f8f <f_opendir>
c0021454:	83 c4 10             	add    esp,0x10
c0021457:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002145e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021466:	74 07                	je     c002146f <FAT::openDir(char const*, void**)+0x99>
c0021468:	b8 01 00 00 00       	mov    eax,0x1
c002146d:	eb 05                	jmp    c0021474 <FAT::openDir(char const*, void**)+0x9e>
c002146f:	b8 00 00 00 00       	mov    eax,0x0
c0021474:	81 c4 1c 01 00 00    	add    esp,0x11c
c002147a:	c3                   	ret    
c002147b:	90                   	nop

c002147c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002147c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021482:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002148a:	75 0a                	jne    c0021496 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002148c:	b8 04 00 00 00       	mov    eax,0x4
c0021491:	e9 c9 00 00 00       	jmp    c002155f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021496:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002149e:	75 0a                	jne    c00214aa <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00214a0:	b8 04 00 00 00       	mov    eax,0x4
c00214a5:	e9 b5 00 00 00       	jmp    c002155f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214aa:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00214b2:	75 0a                	jne    c00214be <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00214b4:	b8 04 00 00 00       	mov    eax,0x4
c00214b9:	e9 a1 00 00 00       	jmp    c002155f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214be:	83 ec 08             	sub    esp,0x8
c00214c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214c8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00214cf:	50                   	push   eax
c00214d0:	e8 37 f3 fd ff       	call   c000080c <strcpy>
c00214d5:	83 c4 10             	add    esp,0x10
c00214d8:	83 ec 08             	sub    esp,0x8
c00214db:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00214e2:	50                   	push   eax
c00214e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214ea:	e8 87 fd ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c00214ef:	83 c4 10             	add    esp,0x10
c00214f2:	83 ec 08             	sub    esp,0x8
c00214f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214f9:	50                   	push   eax
c00214fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021501:	50                   	push   eax
c0021502:	e8 47 4c fe ff       	call   c000614e <f_stat>
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021511:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021518:	85 c0                	test   eax,eax
c002151a:	74 07                	je     c0021523 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002151c:	83 f8 04             	cmp    eax,0x4
c002151f:	74 32                	je     c0021553 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021521:	eb 37                	jmp    c002155a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021523:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021527:	0f b6 c0             	movzx  eax,al
c002152a:	83 e0 10             	and    eax,0x10
c002152d:	0f 95 c2             	setne  dl
c0021530:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021537:	88 10                	mov    BYTE PTR [eax],dl
c0021539:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002153c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021540:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021547:	89 01                	mov    DWORD PTR [ecx],eax
c0021549:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002154c:	b8 00 00 00 00       	mov    eax,0x0
c0021551:	eb 0c                	jmp    c002155f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021553:	b8 02 00 00 00       	mov    eax,0x2
c0021558:	eb 05                	jmp    c002155f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002155a:	b8 01 00 00 00       	mov    eax,0x1
c002155f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021565:	c3                   	ret    

c0021566 <FAT::unlink(char const*)>:
c0021566:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002156c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021574:	75 07                	jne    c002157d <FAT::unlink(char const*)+0x17>
c0021576:	b8 04 00 00 00       	mov    eax,0x4
c002157b:	eb 5c                	jmp    c00215d9 <FAT::unlink(char const*)+0x73>
c002157d:	83 ec 08             	sub    esp,0x8
c0021580:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021587:	8d 44 24 18          	lea    eax,[esp+0x18]
c002158b:	50                   	push   eax
c002158c:	e8 7b f2 fd ff       	call   c000080c <strcpy>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	83 ec 08             	sub    esp,0x8
c0021597:	8d 44 24 14          	lea    eax,[esp+0x14]
c002159b:	50                   	push   eax
c002159c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215a3:	e8 ce fc ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	83 ec 0c             	sub    esp,0xc
c00215ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b2:	50                   	push   eax
c00215b3:	e8 e8 4e fe ff       	call   c00064a0 <f_unlink>
c00215b8:	83 c4 10             	add    esp,0x10
c00215bb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215c2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215c9:	85 c0                	test   eax,eax
c00215cb:	75 07                	jne    c00215d4 <FAT::unlink(char const*)+0x6e>
c00215cd:	b8 00 00 00 00       	mov    eax,0x0
c00215d2:	eb 05                	jmp    c00215d9 <FAT::unlink(char const*)+0x73>
c00215d4:	b8 01 00 00 00       	mov    eax,0x1
c00215d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215df:	c3                   	ret    

c00215e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00215e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00215e6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00215ed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00215f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215fc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021604:	75 0a                	jne    c0021610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021606:	b8 04 00 00 00       	mov    eax,0x4
c002160b:	e9 1c 01 00 00       	jmp    c002172c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021610:	83 ec 08             	sub    esp,0x8
c0021613:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002161a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002161e:	50                   	push   eax
c002161f:	e8 e8 f1 fd ff       	call   c000080c <strcpy>
c0021624:	83 c4 10             	add    esp,0x10
c0021627:	83 ec 08             	sub    esp,0x8
c002162a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002162e:	50                   	push   eax
c002162f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021636:	e8 3b fc ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c002163b:	83 c4 10             	add    esp,0x10
c002163e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021646:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002164e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021653:	83 e0 01             	and    eax,0x1
c0021656:	74 08                	je     c0021660 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021658:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021660:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021665:	83 e0 02             	and    eax,0x2
c0021668:	74 08                	je     c0021672 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002166a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021672:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021677:	83 e0 04             	and    eax,0x4
c002167a:	74 08                	je     c0021684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002167c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021689:	83 e0 08             	and    eax,0x8
c002168c:	74 08                	je     c0021696 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002168e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021696:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002169b:	83 e0 01             	and    eax,0x1
c002169e:	74 08                	je     c00216a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00216a0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00216a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216ad:	83 e0 02             	and    eax,0x2
c00216b0:	74 08                	je     c00216ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00216b2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00216ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216bf:	83 e0 04             	and    eax,0x4
c00216c2:	74 08                	je     c00216cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00216c4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00216cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216d1:	83 e0 08             	and    eax,0x8
c00216d4:	74 08                	je     c00216de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00216d6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00216de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00216e5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00216ec:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00216f4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00216fc:	83 ec 04             	sub    esp,0x4
c00216ff:	52                   	push   edx
c0021700:	50                   	push   eax
c0021701:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021705:	50                   	push   eax
c0021706:	e8 37 54 fe ff       	call   c0006b42 <f_chmod>
c002170b:	83 c4 10             	add    esp,0x10
c002170e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021715:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002171c:	85 c0                	test   eax,eax
c002171e:	75 07                	jne    c0021727 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021720:	b8 00 00 00 00       	mov    eax,0x0
c0021725:	eb 05                	jmp    c002172c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021727:	b8 01 00 00 00       	mov    eax,0x1
c002172c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021732:	c3                   	ret    
c0021733:	90                   	nop

c0021734 <FAT::rename(char const*, char const*)>:
c0021734:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002173a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021742:	74 0a                	je     c002174e <FAT::rename(char const*, char const*)+0x1a>
c0021744:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002174c:	75 0a                	jne    c0021758 <FAT::rename(char const*, char const*)+0x24>
c002174e:	b8 04 00 00 00       	mov    eax,0x4
c0021753:	e9 98 00 00 00       	jmp    c00217f0 <FAT::rename(char const*, char const*)+0xbc>
c0021758:	83 ec 08             	sub    esp,0x8
c002175b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021762:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021769:	50                   	push   eax
c002176a:	e8 9d f0 fd ff       	call   c000080c <strcpy>
c002176f:	83 c4 10             	add    esp,0x10
c0021772:	83 ec 08             	sub    esp,0x8
c0021775:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002177c:	50                   	push   eax
c002177d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021784:	e8 ed fa ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c0021789:	83 c4 10             	add    esp,0x10
c002178c:	83 ec 08             	sub    esp,0x8
c002178f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021796:	8d 44 24 18          	lea    eax,[esp+0x18]
c002179a:	50                   	push   eax
c002179b:	e8 6c f0 fd ff       	call   c000080c <strcpy>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	83 ec 08             	sub    esp,0x8
c00217a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217aa:	50                   	push   eax
c00217ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00217b2:	e8 bf fa ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c00217b7:	83 c4 10             	add    esp,0x10
c00217ba:	83 ec 08             	sub    esp,0x8
c00217bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217c1:	50                   	push   eax
c00217c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00217c9:	50                   	push   eax
c00217ca:	e8 80 50 fe ff       	call   c000684f <f_rename>
c00217cf:	83 c4 10             	add    esp,0x10
c00217d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00217d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00217e0:	85 c0                	test   eax,eax
c00217e2:	75 07                	jne    c00217eb <FAT::rename(char const*, char const*)+0xb7>
c00217e4:	b8 00 00 00 00       	mov    eax,0x0
c00217e9:	eb 05                	jmp    c00217f0 <FAT::rename(char const*, char const*)+0xbc>
c00217eb:	b8 01 00 00 00       	mov    eax,0x1
c00217f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00217f6:	c3                   	ret    
c00217f7:	90                   	nop

c00217f8 <FAT::mkdir(char const*)>:
c00217f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021806:	75 07                	jne    c002180f <FAT::mkdir(char const*)+0x17>
c0021808:	b8 04 00 00 00       	mov    eax,0x4
c002180d:	eb 5c                	jmp    c002186b <FAT::mkdir(char const*)+0x73>
c002180f:	83 ec 08             	sub    esp,0x8
c0021812:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021819:	8d 44 24 18          	lea    eax,[esp+0x18]
c002181d:	50                   	push   eax
c002181e:	e8 e9 ef fd ff       	call   c000080c <strcpy>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	83 ec 08             	sub    esp,0x8
c0021829:	8d 44 24 14          	lea    eax,[esp+0x14]
c002182d:	50                   	push   eax
c002182e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021835:	e8 3c fa ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c002183a:	83 c4 10             	add    esp,0x10
c002183d:	83 ec 0c             	sub    esp,0xc
c0021840:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021844:	50                   	push   eax
c0021845:	e8 d9 4d fe ff       	call   c0006623 <f_mkdir>
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021854:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002185b:	85 c0                	test   eax,eax
c002185d:	75 07                	jne    c0021866 <FAT::mkdir(char const*)+0x6e>
c002185f:	b8 00 00 00 00       	mov    eax,0x0
c0021864:	eb 05                	jmp    c002186b <FAT::mkdir(char const*)+0x73>
c0021866:	b8 01 00 00 00       	mov    eax,0x1
c002186b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021871:	c3                   	ret    

c0021872 <FAT::exists(char const*)>:
c0021872:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021878:	83 ec 08             	sub    esp,0x8
c002187b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021882:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021886:	50                   	push   eax
c0021887:	e8 80 ef fd ff       	call   c000080c <strcpy>
c002188c:	83 c4 10             	add    esp,0x10
c002188f:	83 ec 08             	sub    esp,0x8
c0021892:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021896:	50                   	push   eax
c0021897:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002189e:	e8 d3 f9 ff ff       	call   c0021276 <FAT::fixFilepath(char*)>
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	83 ec 08             	sub    esp,0x8
c00218a9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00218b0:	50                   	push   eax
c00218b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00218b5:	50                   	push   eax
c00218b6:	e8 93 48 fe ff       	call   c000614e <f_stat>
c00218bb:	83 c4 10             	add    esp,0x10
c00218be:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00218c5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00218cc:	85 c0                	test   eax,eax
c00218ce:	75 04                	jne    c00218d4 <FAT::exists(char const*)+0x62>
c00218d0:	b0 01                	mov    al,0x1
c00218d2:	eb 02                	jmp    c00218d6 <FAT::exists(char const*)+0x64>
c00218d4:	b0 00                	mov    al,0x0
c00218d6:	81 c4 2c 02 00 00    	add    esp,0x22c
c00218dc:	c3                   	ret    
c00218dd:	90                   	nop

c00218de <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00218de:	b8 08 00 00 00       	mov    eax,0x8
c00218e3:	c3                   	ret    

c00218e4 <ISO9660::seek(void*, unsigned long long)>:
c00218e4:	53                   	push   ebx
c00218e5:	b8 04 00 00 00       	mov    eax,0x4
c00218ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218f6:	85 d2                	test   edx,edx
c00218f8:	74 17                	je     c0021911 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00218fa:	89 c8                	mov    eax,ecx
c00218fc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00218ff:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021902:	b8 01 00 00 00       	mov    eax,0x1
c0021907:	73 08                	jae    c0021911 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021909:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002190c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002190f:	31 c0                	xor    eax,eax
c0021911:	5b                   	pop    ebx
c0021912:	c3                   	ret    
c0021913:	90                   	nop

c0021914 <ISO9660::tell(void*, unsigned long long*)>:
c0021914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191c:	85 d2                	test   edx,edx
c002191e:	74 12                	je     c0021932 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021920:	85 c0                	test   eax,eax
c0021922:	74 0e                	je     c0021932 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021924:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021927:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002192a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002192d:	89 10                	mov    DWORD PTR [eax],edx
c002192f:	31 c0                	xor    eax,eax
c0021931:	c3                   	ret    
c0021932:	b8 04 00 00 00       	mov    eax,0x4
c0021937:	c3                   	ret    

c0021938 <ISO9660::getName()>:
c0021938:	b8 04 d4 02 c0       	mov    eax,0xc002d404
c002193d:	c3                   	ret    

c002193e <ISO9660::stat(void*, unsigned long long*)>:
c002193e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021946:	85 d2                	test   edx,edx
c0021948:	74 12                	je     c002195c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002194a:	85 c0                	test   eax,eax
c002194c:	74 0e                	je     c002195c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002194e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021951:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021954:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021957:	89 10                	mov    DWORD PTR [eax],edx
c0021959:	31 c0                	xor    eax,eax
c002195b:	c3                   	ret    
c002195c:	b8 04 00 00 00       	mov    eax,0x4
c0021961:	c3                   	ret    

c0021962 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021962:	b8 01 00 00 00       	mov    eax,0x1
c0021967:	c3                   	ret    

c0021968 <ISO9660::unlink(char const*)>:
c0021968:	b8 01 00 00 00       	mov    eax,0x1
c002196d:	c3                   	ret    

c002196e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002196e:	b8 01 00 00 00       	mov    eax,0x1
c0021973:	c3                   	ret    

c0021974 <ISO9660::rename(char const*, char const*)>:
c0021974:	b8 01 00 00 00       	mov    eax,0x1
c0021979:	c3                   	ret    

c002197a <ISO9660::mkdir(char const*)>:
c002197a:	b8 01 00 00 00       	mov    eax,0x1
c002197f:	c3                   	ret    

c0021980 <ISO9660::close(void*)>:
c0021980:	83 ec 0c             	sub    esp,0xc
c0021983:	b8 04 00 00 00       	mov    eax,0x4
c0021988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002198c:	85 d2                	test   edx,edx
c002198e:	74 0e                	je     c002199e <ISO9660::close(void*)+0x1e>
c0021990:	83 ec 0c             	sub    esp,0xc
c0021993:	52                   	push   edx
c0021994:	e8 79 df fe ff       	call   c000f912 <free>
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	31 c0                	xor    eax,eax
c002199e:	83 c4 0c             	add    esp,0xc
c00219a1:	c3                   	ret    

c00219a2 <ISO9660::closeDir(void*)>:
c00219a2:	83 ec 0c             	sub    esp,0xc
c00219a5:	b8 04 00 00 00       	mov    eax,0x4
c00219aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219ae:	85 d2                	test   edx,edx
c00219b0:	74 0e                	je     c00219c0 <ISO9660::closeDir(void*)+0x1e>
c00219b2:	83 ec 0c             	sub    esp,0xc
c00219b5:	52                   	push   edx
c00219b6:	e8 57 df fe ff       	call   c000f912 <free>
c00219bb:	83 c4 10             	add    esp,0x10
c00219be:	31 c0                	xor    eax,eax
c00219c0:	83 c4 0c             	add    esp,0xc
c00219c3:	c3                   	ret    

c00219c4 <ISO9660::~ISO9660()>:
c00219c4:	83 ec 0c             	sub    esp,0xc
c00219c7:	ba 68 d4 02 c0       	mov    edx,0xc002d468
c00219cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d0:	89 10                	mov    DWORD PTR [eax],edx
c00219d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d6:	83 ec 0c             	sub    esp,0xc
c00219d9:	50                   	push   eax
c00219da:	e8 4b 12 ff ff       	call   c0012c2a <Filesystem::~Filesystem()>
c00219df:	83 c4 10             	add    esp,0x10
c00219e2:	90                   	nop
c00219e3:	83 c4 0c             	add    esp,0xc
c00219e6:	c3                   	ret    
c00219e7:	90                   	nop

c00219e8 <ISO9660::~ISO9660()>:
c00219e8:	83 ec 0c             	sub    esp,0xc
c00219eb:	83 ec 0c             	sub    esp,0xc
c00219ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219f2:	e8 cd ff ff ff       	call   c00219c4 <ISO9660::~ISO9660()>
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	83 ec 08             	sub    esp,0x8
c00219fd:	6a 08                	push   0x8
c00219ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a03:	e8 13 0e ff ff       	call   c001281b <operator delete(void*, unsigned long)>
c0021a08:	83 c4 10             	add    esp,0x10
c0021a0b:	83 c4 0c             	add    esp,0xc
c0021a0e:	c3                   	ret    

c0021a0f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021a0f:	55                   	push   ebp
c0021a10:	31 c9                	xor    ecx,ecx
c0021a12:	57                   	push   edi
c0021a13:	56                   	push   esi
c0021a14:	53                   	push   ebx
c0021a15:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021a19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021a1d:	89 eb                	mov    ebx,ebp
c0021a1f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021a23:	39 ce                	cmp    esi,ecx
c0021a25:	7e 17                	jle    c0021a3e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021a27:	31 d2                	xor    edx,edx
c0021a29:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021a2d:	7d 13                	jge    c0021a42 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021a2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a33:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021a36:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021a39:	75 0d                	jne    c0021a48 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021a3b:	42                   	inc    edx
c0021a3c:	eb eb                	jmp    c0021a29 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021a3e:	31 c0                	xor    eax,eax
c0021a40:	eb 0a                	jmp    c0021a4c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a42:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021a46:	eb 04                	jmp    c0021a4c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a48:	41                   	inc    ecx
c0021a49:	43                   	inc    ebx
c0021a4a:	eb d7                	jmp    c0021a23 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021a4c:	5b                   	pop    ebx
c0021a4d:	5e                   	pop    esi
c0021a4e:	5f                   	pop    edi
c0021a4f:	5d                   	pop    ebp
c0021a50:	c3                   	ret    

c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021a51:	57                   	push   edi
c0021a52:	56                   	push   esi
c0021a53:	53                   	push   ebx
c0021a54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a5c:	39 0d 60 29 03 c0    	cmp    DWORD PTR ds:0xc0032960,ecx
c0021a62:	75 08                	jne    c0021a6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021a64:	38 05 d4 e7 02 c0    	cmp    BYTE PTR ds:0xc002e7d4,al
c0021a6a:	74 2b                	je     c0021a97 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	a2 d4 e7 02 c0       	mov    ds:0xc002e7d4,al
c0021a74:	68 80 29 03 c0       	push   0xc0032980
c0021a79:	0f be c0             	movsx  eax,al
c0021a7c:	6a 01                	push   0x1
c0021a7e:	89 0d 60 29 03 c0    	mov    DWORD PTR ds:0xc0032960,ecx
c0021a84:	31 db                	xor    ebx,ebx
c0021a86:	53                   	push   ebx
c0021a87:	51                   	push   ecx
c0021a88:	ff 34 85 3c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08c4]
c0021a8f:	e8 e4 47 ff ff       	call   c0016278 <LogicalDisk::read(unsigned long long, int, void*)>
c0021a94:	83 c4 20             	add    esp,0x20
c0021a97:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021a9b:	be 80 29 03 c0       	mov    esi,0xc0032980
c0021aa0:	b9 00 08 00 00       	mov    ecx,0x800
c0021aa5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021aa7:	5b                   	pop    ebx
c0021aa8:	5e                   	pop    esi
c0021aa9:	5f                   	pop    edi
c0021aaa:	c3                   	ret    
c0021aab:	90                   	nop

c0021aac <ISO9660::tryMount(LogicalDisk*, int)>:
c0021aac:	81 ec 10 08 00 00    	sub    esp,0x810
c0021ab2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021ab9:	83 c0 41             	add    eax,0x41
c0021abc:	0f be c0             	movsx  eax,al
c0021abf:	50                   	push   eax
c0021ac0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ac4:	50                   	push   eax
c0021ac5:	6a 10                	push   0x10
c0021ac7:	e8 85 ff ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021acc:	83 c4 10             	add    esp,0x10
c0021acf:	31 c0                	xor    eax,eax
c0021ad1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021ad6:	75 1d                	jne    c0021af5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ad8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021add:	75 16                	jne    c0021af5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021adf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021ae4:	75 0f                	jne    c0021af5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ae6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021aeb:	75 08                	jne    c0021af5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021aed:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021af2:	0f 94 c0             	sete   al
c0021af5:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021afb:	c3                   	ret    

c0021afc <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021afc:	55                   	push   ebp
c0021afd:	57                   	push   edi
c0021afe:	56                   	push   esi
c0021aff:	53                   	push   ebx
c0021b00:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021b06:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021b0d:	85 ed                	test   ebp,ebp
c0021b0f:	0f 84 da 01 00 00    	je     c0021cef <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b15:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021b1d:	0f 84 cc 01 00 00    	je     c0021cef <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b23:	b8 01 00 00 00       	mov    eax,0x1
c0021b28:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021b2c:	0f 85 c2 01 00 00    	jne    c0021cf4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021b32:	31 d2                	xor    edx,edx
c0021b34:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021b3b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021b3e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021b41:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021b44:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b4b:	01 c8                	add    eax,ecx
c0021b4d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021b50:	11 da                	adc    edx,ebx
c0021b52:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021b56:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021b5a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021b5e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b62:	19 d7                	sbb    edi,edx
c0021b64:	72 11                	jb     c0021b77 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021b66:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021b69:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021b6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b75:	eb 0c                	jmp    c0021b83 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021b77:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021b7b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b7f:	29 ce                	sub    esi,ecx
c0021b81:	19 df                	sbb    edi,ebx
c0021b83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b86:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021b89:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021b8d:	c1 e0 0b             	shl    eax,0xb
c0021b90:	01 c8                	add    eax,ecx
c0021b92:	11 da                	adc    edx,ebx
c0021b94:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b9b:	51                   	push   ecx
c0021b9c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ba0:	50                   	push   eax
c0021ba1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021ba5:	53                   	push   ebx
c0021ba6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bae:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021bb2:	50                   	push   eax
c0021bb3:	e8 99 fe ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bb8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021bbb:	b8 00 08 00 00       	mov    eax,0x800
c0021bc0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021bc6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021bca:	29 d0                	sub    eax,edx
c0021bcc:	83 c4 10             	add    esp,0x10
c0021bcf:	89 f9                	mov    ecx,edi
c0021bd1:	39 c6                	cmp    esi,eax
c0021bd3:	83 d9 00             	sbb    ecx,0x0
c0021bd6:	7d 1b                	jge    c0021bf3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021bd8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021bdd:	75 12                	jne    c0021bf1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021bdf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021be6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bec:	e9 fa 00 00 00       	jmp    c0021ceb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021bf1:	89 f0                	mov    eax,esi
c0021bf3:	01 d3                	add    ebx,edx
c0021bf5:	31 d2                	xor    edx,edx
c0021bf7:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021bfb:	39 c2                	cmp    edx,eax
c0021bfd:	7d 14                	jge    c0021c13 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021bff:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021c06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021c0a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021c0d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021c10:	42                   	inc    edx
c0021c11:	eb e8                	jmp    c0021bfb <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021c13:	89 c2                	mov    edx,eax
c0021c15:	85 c0                	test   eax,eax
c0021c17:	79 02                	jns    c0021c1b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021c19:	31 d2                	xor    edx,edx
c0021c1b:	01 c2                	add    edx,eax
c0021c1d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021c20:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021c27:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021c2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021c2f:	99                   	cdq    
c0021c30:	01 c1                	add    ecx,eax
c0021c32:	11 d3                	adc    ebx,edx
c0021c34:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021c38:	29 c6                	sub    esi,eax
c0021c3a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021c3e:	19 d7                	sbb    edi,edx
c0021c40:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c43:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021c47:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021c4c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021c4f:	b8 00 00 00 00       	mov    eax,0x0
c0021c54:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021c58:	7d 43                	jge    c0021c9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021c5a:	52                   	push   edx
c0021c5b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c5f:	50                   	push   eax
c0021c60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c6c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021c70:	50                   	push   eax
c0021c71:	e8 db fd ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c76:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021c7e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021c83:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021c8b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021c93:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021c98:	83 c4 10             	add    esp,0x10
c0021c9b:	eb aa                	jmp    c0021c47 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ca1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ca4:	74 2a                	je     c0021cd0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021ca6:	50                   	push   eax
c0021ca7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cab:	50                   	push   eax
c0021cac:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021cb0:	56                   	push   esi
c0021cb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021cb9:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021cbd:	51                   	push   ecx
c0021cbe:	e8 8e fd ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021cc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ccb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ccd:	83 c4 10             	add    esp,0x10
c0021cd0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cd7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021cdf:	89 18                	mov    DWORD PTR [eax],ebx
c0021ce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ce5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ce8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ceb:	31 c0                	xor    eax,eax
c0021ced:	eb 05                	jmp    c0021cf4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021cef:	b8 04 00 00 00       	mov    eax,0x4
c0021cf4:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021cfa:	5b                   	pop    ebx
c0021cfb:	5e                   	pop    esi
c0021cfc:	5f                   	pop    edi
c0021cfd:	5d                   	pop    ebp
c0021cfe:	c3                   	ret    
c0021cff:	90                   	nop

c0021d00 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021d00:	55                   	push   ebp
c0021d01:	57                   	push   edi
c0021d02:	56                   	push   esi
c0021d03:	53                   	push   ebx
c0021d04:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021d0a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021d11:	85 ed                	test   ebp,ebp
c0021d13:	0f 84 51 02 00 00    	je     c0021f6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d19:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021d21:	0f 84 43 02 00 00    	je     c0021f6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d2a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021d2d:	75 0a                	jne    c0021d39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021d2f:	b8 07 00 00 00       	mov    eax,0x7
c0021d34:	e9 36 02 00 00       	jmp    c0021f6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d39:	50                   	push   eax
c0021d3a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d3e:	50                   	push   eax
c0021d3f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d46:	53                   	push   ebx
c0021d47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d4a:	c1 e0 0b             	shl    eax,0xb
c0021d4d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021d50:	c1 e8 0b             	shr    eax,0xb
c0021d53:	50                   	push   eax
c0021d54:	e8 f8 fc ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d59:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d5c:	83 c4 10             	add    esp,0x10
c0021d5f:	89 c1                	mov    ecx,eax
c0021d61:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021d64:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021d6a:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021d6d:	84 db                	test   bl,bl
c0021d6f:	0f 85 8b 00 00 00    	jne    c0021e00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021d75:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021d7b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021d7e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021d84:	29 c6                	sub    esi,eax
c0021d86:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021d8a:	89 f3                	mov    ebx,esi
c0021d8c:	89 f1                	mov    ecx,esi
c0021d8e:	c1 fb 1f             	sar    ebx,0x1f
c0021d91:	01 f0                	add    eax,esi
c0021d93:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021d96:	11 da                	adc    edx,ebx
c0021d98:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021d9f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021da2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021da5:	89 d8                	mov    eax,ebx
c0021da7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021dab:	ba 00 00 00 00       	mov    edx,0x0
c0021db0:	19 f8                	sbb    eax,edi
c0021db2:	b8 00 00 00 00       	mov    eax,0x0
c0021db7:	73 08                	jae    c0021dc1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021db9:	89 f0                	mov    eax,esi
c0021dbb:	89 fa                	mov    edx,edi
c0021dbd:	29 c8                	sub    eax,ecx
c0021dbf:	19 da                	sbb    edx,ebx
c0021dc1:	89 d7                	mov    edi,edx
c0021dc3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021dc6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021dc9:	09 c7                	or     edi,eax
c0021dcb:	0f 84 5e ff ff ff    	je     c0021d2f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021dd1:	57                   	push   edi
c0021dd2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021dd6:	50                   	push   eax
c0021dd7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021dde:	53                   	push   ebx
c0021ddf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021de2:	c1 e0 0b             	shl    eax,0xb
c0021de5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021de9:	c1 e8 0b             	shr    eax,0xb
c0021dec:	50                   	push   eax
c0021ded:	e8 5f fc ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021df2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021df5:	83 c4 10             	add    esp,0x10
c0021df8:	25 ff 07 00 00       	and    eax,0x7ff
c0021dfd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021e00:	31 ff                	xor    edi,edi
c0021e02:	56                   	push   esi
c0021e03:	6a 28                	push   0x28
c0021e05:	6a 00                	push   0x0
c0021e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021e0b:	50                   	push   eax
c0021e0c:	e8 3f e9 fd ff       	call   c0000750 <memset>
c0021e11:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e14:	25 ff 07 00 00       	and    eax,0x7ff
c0021e19:	89 c6                	mov    esi,eax
c0021e1b:	83 c6 21             	add    esi,0x21
c0021e1e:	83 d7 00             	adc    edi,0x0
c0021e21:	83 c4 10             	add    esp,0x10
c0021e24:	31 c9                	xor    ecx,ecx
c0021e26:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021e2d:	83 f9 28             	cmp    ecx,0x28
c0021e30:	88 04 24             	mov    BYTE PTR [esp],al
c0021e33:	0f 94 c2             	sete   dl
c0021e36:	88 d0                	mov    al,dl
c0021e38:	ba ff 07 00 00       	mov    edx,0x7ff
c0021e3d:	39 f2                	cmp    edx,esi
c0021e3f:	ba 00 00 00 00       	mov    edx,0x0
c0021e44:	19 fa                	sbb    edx,edi
c0021e46:	0f 92 c2             	setb   dl
c0021e49:	09 c2                	or     edx,eax
c0021e4b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021e4f:	0f 94 c0             	sete   al
c0021e52:	08 d0                	or     al,dl
c0021e54:	75 16                	jne    c0021e6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021e56:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021e5a:	74 10                	je     c0021e6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021e5c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021e5f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021e63:	41                   	inc    ecx
c0021e64:	83 c6 01             	add    esi,0x1
c0021e67:	83 d7 00             	adc    edi,0x0
c0021e6a:	eb ba                	jmp    c0021e26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021e6c:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021e73:	83 ec 0c             	sub    esp,0xc
c0021e76:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021e7a:	56                   	push   esi
c0021e7b:	e8 ec e8 fd ff       	call   c000076c <strlen>
c0021e80:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021e87:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e8b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021e93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e96:	5a                   	pop    edx
c0021e97:	25 ff 07 00 00       	and    eax,0x7ff
c0021e9c:	59                   	pop    ecx
c0021e9d:	01 f8                	add    eax,edi
c0021e9f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ea5:	83 e0 02             	and    eax,0x2
c0021ea8:	3c 01                	cmp    al,0x1
c0021eaa:	19 c0                	sbb    eax,eax
c0021eac:	83 c0 02             	add    eax,0x2
c0021eaf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021eb3:	56                   	push   esi
c0021eb4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021eb8:	50                   	push   eax
c0021eb9:	e8 4e e9 fd ff       	call   c000080c <strcpy>
c0021ebe:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ec2:	83 c4 10             	add    esp,0x10
c0021ec5:	84 c0                	test   al,al
c0021ec7:	75 21                	jne    c0021eea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021ec9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021ed1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ed9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ee1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ee8:	eb 28                	jmp    c0021f12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021eea:	fe c8                	dec    al
c0021eec:	75 24                	jne    c0021f12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021eee:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ef6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021efe:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021f06:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021f0d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021f12:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021f16:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021f1d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021f24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f26:	0f b6 f3             	movzx  esi,bl
c0021f29:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021f30:	31 db                	xor    ebx,ebx
c0021f32:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021f38:	89 df                	mov    edi,ebx
c0021f3a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f40:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021f43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021f46:	39 c6                	cmp    esi,eax
c0021f48:	19 d7                	sbb    edi,edx
c0021f4a:	72 10                	jb     c0021f5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021f4c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021f53:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021f5a:	eb 0a                	jmp    c0021f66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021f5c:	29 f0                	sub    eax,esi
c0021f5e:	19 da                	sbb    edx,ebx
c0021f60:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021f63:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021f66:	31 c0                	xor    eax,eax
c0021f68:	eb 05                	jmp    c0021f6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021f6a:	b8 04 00 00 00       	mov    eax,0x4
c0021f6f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021f75:	5b                   	pop    ebx
c0021f76:	5e                   	pop    esi
c0021f77:	5f                   	pop    edi
c0021f78:	5d                   	pop    ebp
c0021f79:	c3                   	ret    

c0021f7a <readRoot(unsigned int*, unsigned int*, char)>:
c0021f7a:	57                   	push   edi
c0021f7b:	56                   	push   esi
c0021f7c:	81 ec 38 08 00 00    	sub    esp,0x838
c0021f82:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021f8a:	50                   	push   eax
c0021f8b:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021f8f:	50                   	push   eax
c0021f90:	6a 10                	push   0x10
c0021f92:	e8 ba fa ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f97:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021f9e:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021fa2:	b9 22 00 00 00       	mov    ecx,0x22
c0021fa7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021fa9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021fb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021fb4:	89 10                	mov    DWORD PTR [eax],edx
c0021fb6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021fbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021fc1:	89 10                	mov    DWORD PTR [eax],edx
c0021fc3:	81 c4 44 08 00 00    	add    esp,0x844
c0021fc9:	b0 01                	mov    al,0x1
c0021fcb:	5e                   	pop    esi
c0021fcc:	5f                   	pop    edi
c0021fcd:	c3                   	ret    

c0021fce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021fce:	55                   	push   ebp
c0021fcf:	57                   	push   edi
c0021fd0:	56                   	push   esi
c0021fd1:	53                   	push   ebx
c0021fd2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021fd8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021fdf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021fe6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fea:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021fee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021ff2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021ff6:	75 03                	jne    c0021ffb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021ff8:	83 c3 02             	add    ebx,0x2
c0021ffb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021ffe:	75 03                	jne    c0022003 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022000:	43                   	inc    ebx
c0022001:	eb f8                	jmp    c0021ffb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022003:	51                   	push   ecx
c0022004:	68 00 01 00 00       	push   0x100
c0022009:	6a 00                	push   0x0
c002200b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200f:	50                   	push   eax
c0022010:	e8 3b e7 fd ff       	call   c0000750 <memset>
c0022015:	83 c4 10             	add    esp,0x10
c0022018:	31 d2                	xor    edx,edx
c002201a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002201d:	84 c0                	test   al,al
c002201f:	74 21                	je     c0022042 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022021:	3c 2f                	cmp    al,0x2f
c0022023:	75 0b                	jne    c0022030 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022025:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022029:	bd 01 00 00 00       	mov    ebp,0x1
c002202e:	eb 14                	jmp    c0022044 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022030:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022033:	80 f9 19             	cmp    cl,0x19
c0022036:	77 03                	ja     c002203b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022038:	83 e8 20             	sub    eax,0x20
c002203b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002203f:	42                   	inc    edx
c0022040:	eb d8                	jmp    c002201a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022042:	31 ed                	xor    ebp,ebp
c0022044:	83 ec 0c             	sub    esp,0xc
c0022047:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002204e:	e8 af d8 fe ff       	call   c000f902 <malloc>
c0022053:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002205a:	89 c6                	mov    esi,eax
c002205c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022062:	c1 ef 0b             	shr    edi,0xb
c0022065:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002206c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022070:	83 c4 10             	add    esp,0x10
c0022073:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002207c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022083:	74 28                	je     c00220ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022085:	52                   	push   edx
c0022086:	57                   	push   edi
c0022087:	50                   	push   eax
c0022088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002208c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022093:	e8 b9 f9 ff ff       	call   c0021a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002209c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00220a3:	05 00 08 00 00       	add    eax,0x800
c00220a8:	83 c4 10             	add    esp,0x10
c00220ab:	eb cb                	jmp    c0022078 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00220ad:	83 ec 0c             	sub    esp,0xc
c00220b0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00220b4:	57                   	push   edi
c00220b5:	e8 b2 e6 fd ff       	call   c000076c <strlen>
c00220ba:	50                   	push   eax
c00220bb:	57                   	push   edi
c00220bc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00220c3:	56                   	push   esi
c00220c4:	e8 46 f9 ff ff       	call   c0021a0f <__memmem(unsigned char*, int, unsigned char*, int)>
c00220c9:	83 c4 20             	add    esp,0x20
c00220cc:	85 c0                	test   eax,eax
c00220ce:	75 13                	jne    c00220e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00220d0:	83 ec 0c             	sub    esp,0xc
c00220d3:	56                   	push   esi
c00220d4:	e8 39 d8 fe ff       	call   c000f912 <free>
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	31 c0                	xor    eax,eax
c00220de:	e9 b3 00 00 00       	jmp    c0022196 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220e3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00220e7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00220eb:	c1 e7 08             	shl    edi,0x8
c00220ee:	c1 e2 10             	shl    edx,0x10
c00220f1:	09 d7                	or     edi,edx
c00220f3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00220f7:	09 d7                	or     edi,edx
c00220f9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00220fd:	c1 e2 18             	shl    edx,0x18
c0022100:	09 d7                	or     edi,edx
c0022102:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022106:	89 d1                	mov    ecx,edx
c0022108:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002210c:	c1 e1 08             	shl    ecx,0x8
c002210f:	c1 e2 10             	shl    edx,0x10
c0022112:	09 ca                	or     edx,ecx
c0022114:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022118:	09 ca                	or     edx,ecx
c002211a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002211e:	c1 e1 18             	shl    ecx,0x18
c0022121:	09 ca                	or     edx,ecx
c0022123:	89 e9                	mov    ecx,ebp
c0022125:	84 c9                	test   cl,cl
c0022127:	74 3c                	je     c0022165 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022129:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002212d:	83 ec 0c             	sub    esp,0xc
c0022130:	56                   	push   esi
c0022131:	e8 dc d7 fe ff       	call   c000f912 <free>
c0022136:	83 c4 0c             	add    esp,0xc
c0022139:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022140:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022145:	50                   	push   eax
c0022146:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002214d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022154:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022158:	52                   	push   edx
c0022159:	57                   	push   edi
c002215a:	53                   	push   ebx
c002215b:	e8 6e fe ff ff       	call   c0021fce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022160:	83 c4 20             	add    esp,0x20
c0022163:	eb 31                	jmp    c0022196 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022165:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022168:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002216f:	d0 e8                	shr    al,1
c0022171:	89 3b                	mov    DWORD PTR [ebx],edi
c0022173:	83 e0 01             	and    eax,0x1
c0022176:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	89 13                	mov    DWORD PTR [ebx],edx
c0022182:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022189:	89 03                	mov    DWORD PTR [ebx],eax
c002218b:	56                   	push   esi
c002218c:	e8 81 d7 fe ff       	call   c000f912 <free>
c0022191:	83 c4 10             	add    esp,0x10
c0022194:	b0 01                	mov    al,0x1
c0022196:	81 c4 1c 01 00 00    	add    esp,0x11c
c002219c:	5b                   	pop    ebx
c002219d:	5e                   	pop    esi
c002219e:	5f                   	pop    edi
c002219f:	5d                   	pop    ebp
c00221a0:	c3                   	ret    

c00221a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00221a1:	55                   	push   ebp
c00221a2:	57                   	push   edi
c00221a3:	56                   	push   esi
c00221a4:	53                   	push   ebx
c00221a5:	83 ec 20             	sub    esp,0x20
c00221a8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00221ac:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00221b0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00221b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00221c4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00221c9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00221cf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00221d5:	57                   	push   edi
c00221d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221da:	50                   	push   eax
c00221db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221df:	50                   	push   eax
c00221e0:	e8 95 fd ff ff       	call   c0021f7a <readRoot(unsigned int*, unsigned int*, char)>
c00221e5:	5a                   	pop    edx
c00221e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221ea:	e8 7d e5 fd ff       	call   c000076c <strlen>
c00221ef:	83 c4 10             	add    esp,0x10
c00221f2:	83 f8 03             	cmp    eax,0x3
c00221f5:	77 17                	ja     c002220e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00221f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221fb:	89 03                	mov    DWORD PTR [ebx],eax
c00221fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022201:	89 06                	mov    DWORD PTR [esi],eax
c0022203:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002220a:	b0 01                	mov    al,0x1
c002220c:	eb 19                	jmp    c0022227 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002220e:	50                   	push   eax
c002220f:	55                   	push   ebp
c0022210:	57                   	push   edi
c0022211:	56                   	push   esi
c0022212:	53                   	push   ebx
c0022213:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022217:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002221b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002221f:	e8 aa fd ff ff       	call   c0021fce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022224:	83 c4 20             	add    esp,0x20
c0022227:	83 c4 1c             	add    esp,0x1c
c002222a:	5b                   	pop    ebx
c002222b:	5e                   	pop    esi
c002222c:	5f                   	pop    edi
c002222d:	5d                   	pop    ebp
c002222e:	c3                   	ret    
c002222f:	90                   	nop

c0022230 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022230:	57                   	push   edi
c0022231:	56                   	push   esi
c0022232:	53                   	push   ebx
c0022233:	83 ec 10             	sub    esp,0x10
c0022236:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002223a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002223e:	85 ff                	test   edi,edi
c0022240:	0f 84 9d 00 00 00    	je     c00222e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022246:	85 f6                	test   esi,esi
c0022248:	0f 84 95 00 00 00    	je     c00222e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002224e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022253:	74 17                	je     c002226c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022255:	83 ec 0c             	sub    esp,0xc
c0022258:	68 1f d4 02 c0       	push   0xc002d41f
c002225d:	e8 99 06 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022262:	83 c4 10             	add    esp,0x10
c0022265:	b8 03 00 00 00       	mov    eax,0x3
c002226a:	eb 7c                	jmp    c00222e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002226c:	83 ec 0c             	sub    esp,0xc
c002226f:	6a 1c                	push   0x1c
c0022271:	e8 8c d6 fe ff       	call   c000f902 <malloc>
c0022276:	89 07                	mov    DWORD PTR [edi],eax
c0022278:	89 c3                	mov    ebx,eax
c002227a:	58                   	pop    eax
c002227b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002227f:	50                   	push   eax
c0022280:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022283:	50                   	push   eax
c0022284:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022288:	50                   	push   eax
c0022289:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002228d:	50                   	push   eax
c002228e:	56                   	push   esi
c002228f:	e8 0d ff ff ff       	call   c00221a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022294:	83 c4 20             	add    esp,0x20
c0022297:	84 c0                	test   al,al
c0022299:	74 07                	je     c00222a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002229b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00222a0:	74 0b                	je     c00222ad <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00222a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00222a6:	b8 01 00 00 00       	mov    eax,0x1
c00222ab:	eb 3b                	jmp    c00222e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00222b5:	89 03                	mov    DWORD PTR [ebx],eax
c00222b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00222be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00222c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00222d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00222da:	8a 06                	mov    al,BYTE PTR [esi]
c00222dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00222df:	31 c0                	xor    eax,eax
c00222e1:	eb 05                	jmp    c00222e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222e3:	b8 04 00 00 00       	mov    eax,0x4
c00222e8:	83 c4 10             	add    esp,0x10
c00222eb:	5b                   	pop    ebx
c00222ec:	5e                   	pop    esi
c00222ed:	5f                   	pop    edi
c00222ee:	c3                   	ret    
c00222ef:	90                   	nop

c00222f0 <ISO9660::exists(char const*)>:
c00222f0:	83 ec 28             	sub    esp,0x28
c00222f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00222fb:	52                   	push   edx
c00222fc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00222ff:	52                   	push   edx
c0022300:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022304:	52                   	push   edx
c0022305:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022309:	52                   	push   edx
c002230a:	50                   	push   eax
c002230b:	e8 91 fe ff ff       	call   c00221a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022310:	83 c4 3c             	add    esp,0x3c
c0022313:	c3                   	ret    

c0022314 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022314:	56                   	push   esi
c0022315:	53                   	push   ebx
c0022316:	83 ec 14             	sub    esp,0x14
c0022319:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002231d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022321:	85 db                	test   ebx,ebx
c0022323:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022327:	0f 94 c2             	sete   dl
c002232a:	85 f6                	test   esi,esi
c002232c:	0f 94 c0             	sete   al
c002232f:	08 c2                	or     dl,al
c0022331:	75 68                	jne    c002239b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022333:	85 c9                	test   ecx,ecx
c0022335:	74 64                	je     c002239b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022337:	83 ec 0c             	sub    esp,0xc
c002233a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002233d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022341:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022347:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002234e:	50                   	push   eax
c002234f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022352:	50                   	push   eax
c0022353:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022357:	50                   	push   eax
c0022358:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002235c:	50                   	push   eax
c002235d:	51                   	push   ecx
c002235e:	e8 3e fe ff ff       	call   c00221a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022363:	83 c4 20             	add    esp,0x20
c0022366:	ba 01 00 00 00       	mov    edx,0x1
c002236b:	84 c0                	test   al,al
c002236d:	74 31                	je     c00223a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002236f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022373:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002237a:	89 03                	mov    DWORD PTR [ebx],eax
c002237c:	ba 00 00 00 00       	mov    edx,0x0
c0022381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022385:	85 c0                	test   eax,eax
c0022387:	0f 95 06             	setne  BYTE PTR [esi]
c002238a:	74 14                	je     c00223a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002238c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022392:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022399:	eb 05                	jmp    c00223a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002239b:	ba 04 00 00 00       	mov    edx,0x4
c00223a0:	83 c4 14             	add    esp,0x14
c00223a3:	89 d0                	mov    eax,edx
c00223a5:	5b                   	pop    ebx
c00223a6:	5e                   	pop    esi
c00223a7:	c3                   	ret    

c00223a8 <ISO9660::openDir(char const*, void**)>:
c00223a8:	57                   	push   edi
c00223a9:	56                   	push   esi
c00223aa:	53                   	push   ebx
c00223ab:	83 ec 10             	sub    esp,0x10
c00223ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00223b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00223b6:	85 ff                	test   edi,edi
c00223b8:	0f 84 95 00 00 00    	je     c0022453 <ISO9660::openDir(char const*, void**)+0xab>
c00223be:	85 f6                	test   esi,esi
c00223c0:	0f 84 8d 00 00 00    	je     c0022453 <ISO9660::openDir(char const*, void**)+0xab>
c00223c6:	83 ec 0c             	sub    esp,0xc
c00223c9:	6a 1c                	push   0x1c
c00223cb:	e8 32 d5 fe ff       	call   c000f902 <malloc>
c00223d0:	89 07                	mov    DWORD PTR [edi],eax
c00223d2:	89 c3                	mov    ebx,eax
c00223d4:	59                   	pop    ecx
c00223d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00223d9:	50                   	push   eax
c00223da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00223dd:	50                   	push   eax
c00223de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223e2:	50                   	push   eax
c00223e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223e7:	50                   	push   eax
c00223e8:	56                   	push   esi
c00223e9:	e8 b3 fd ff ff       	call   c00221a1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00223ee:	83 c4 20             	add    esp,0x20
c00223f1:	84 c0                	test   al,al
c00223f3:	74 07                	je     c00223fc <ISO9660::openDir(char const*, void**)+0x54>
c00223f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00223fa:	75 21                	jne    c002241d <ISO9660::openDir(char const*, void**)+0x75>
c00223fc:	0f b6 c0             	movzx  eax,al
c00223ff:	52                   	push   edx
c0022400:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022404:	50                   	push   eax
c0022405:	68 45 d4 02 c0       	push   0xc002d445
c002240a:	e8 ec 04 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002240f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022413:	83 c4 10             	add    esp,0x10
c0022416:	b8 01 00 00 00       	mov    eax,0x1
c002241b:	eb 3b                	jmp    c0022458 <ISO9660::openDir(char const*, void**)+0xb0>
c002241d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022421:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022425:	89 03                	mov    DWORD PTR [ebx],eax
c0022427:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002242e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022432:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022439:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022440:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022443:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002244a:	8a 06                	mov    al,BYTE PTR [esi]
c002244c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002244f:	31 c0                	xor    eax,eax
c0022451:	eb 05                	jmp    c0022458 <ISO9660::openDir(char const*, void**)+0xb0>
c0022453:	b8 04 00 00 00       	mov    eax,0x4
c0022458:	83 c4 10             	add    esp,0x10
c002245b:	5b                   	pop    ebx
c002245c:	5e                   	pop    esi
c002245d:	5f                   	pop    edi
c002245e:	c3                   	ret    
c002245f:	90                   	nop

c0022460 <ISO9660::ISO9660()>:
c0022460:	83 ec 0c             	sub    esp,0xc
c0022463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022467:	83 ec 0c             	sub    esp,0xc
c002246a:	50                   	push   eax
c002246b:	e8 96 07 ff ff       	call   c0012c06 <Filesystem::Filesystem()>
c0022470:	83 c4 10             	add    esp,0x10
c0022473:	ba 68 d4 02 c0       	mov    edx,0xc002d468
c0022478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247c:	89 10                	mov    DWORD PTR [eax],edx
c002247e:	90                   	nop
c002247f:	83 c4 0c             	add    esp,0xc
c0022482:	c3                   	ret    
c0022483:	90                   	nop

c0022484 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022484:	83 ec 1c             	sub    esp,0x1c
c0022487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002248f:	89 10                	mov    DWORD PTR [eax],edx
c0022491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022495:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002249c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224a7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00224ac:	75 23                	jne    c00224d1 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00224ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00224b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224bb:	0f af c2             	imul   eax,edx
c00224be:	85 c0                	test   eax,eax
c00224c0:	79 03                	jns    c00224c5 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00224c2:	83 c0 03             	add    eax,0x3
c00224c5:	c1 f8 02             	sar    eax,0x2
c00224c8:	05 a0 0f 00 00       	add    eax,0xfa0
c00224cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00224d9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00224dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00224e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00224f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224f9:	c1 e0 02             	shl    eax,0x2
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	50                   	push   eax
c0022500:	e8 fd d3 fe ff       	call   c000f902 <malloc>
c0022505:	83 c4 10             	add    esp,0x10
c0022508:	89 c2                	mov    edx,eax
c002250a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022511:	83 ec 04             	sub    esp,0x4
c0022514:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022518:	50                   	push   eax
c0022519:	6a 01                	push   0x1
c002251b:	6a 04                	push   0x4
c002251d:	e8 43 66 fe ff       	call   c0008b65 <src_new>
c0022522:	83 c4 10             	add    esp,0x10
c0022525:	89 c2                	mov    edx,eax
c0022527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002252b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002252e:	83 ec 0c             	sub    esp,0xc
c0022531:	68 c8 d4 02 c0       	push   0xc002d4c8
c0022536:	e8 c0 03 ff ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002253b:	83 c4 10             	add    esp,0x10
c002253e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022542:	85 c0                	test   eax,eax
c0022544:	74 10                	je     c0022556 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022546:	83 ec 0c             	sub    esp,0xc
c0022549:	68 de d4 02 c0       	push   0xc002d4de
c002254e:	e8 5c 7e ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0022553:	83 c4 10             	add    esp,0x10
c0022556:	a0 80 35 03 c0       	mov    al,ds:0xc0033580
c002255b:	83 f0 01             	xor    eax,0x1
c002255e:	84 c0                	test   al,al
c0022560:	74 57                	je     c00225b9 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022562:	a1 f8 d4 02 c0       	mov    eax,ds:0xc002d4f8
c0022567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002256b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022573:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002257b:	7f 35                	jg     c00225b2 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c002257d:	83 ec 0c             	sub    esp,0xc
c0022580:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022584:	e8 76 56 00 00       	call   c0027bff <__floatsisf>
c0022589:	83 c4 10             	add    esp,0x10
c002258c:	8b 15 f8 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4f8
c0022592:	83 ec 08             	sub    esp,0x8
c0022595:	52                   	push   edx
c0022596:	50                   	push   eax
c0022597:	e8 75 52 00 00       	call   c0027811 <__mulsf3>
c002259c:	83 c4 10             	add    esp,0x10
c002259f:	89 c2                	mov    edx,eax
c00225a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225a5:	89 14 85 80 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce80],edx
c00225ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225b0:	eb c1                	jmp    c0022573 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c00225b2:	c6 05 80 35 03 c0 01 	mov    BYTE PTR ds:0xc0033580,0x1
c00225b9:	90                   	nop
c00225ba:	83 c4 1c             	add    esp,0x1c
c00225bd:	c3                   	ret    

c00225be <SoundChannel::~SoundChannel()>:
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00225c8:	83 ec 0c             	sub    esp,0xc
c00225cb:	50                   	push   eax
c00225cc:	e8 41 d3 fe ff       	call   c000f912 <free>
c00225d1:	83 c4 10             	add    esp,0x10
c00225d4:	90                   	nop
c00225d5:	83 c4 0c             	add    esp,0xc
c00225d8:	c3                   	ret    
c00225d9:	90                   	nop

c00225da <SoundChannel::getSampleRate()>:
c00225da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225de:	8b 00                	mov    eax,DWORD PTR [eax]
c00225e0:	c3                   	ret    
c00225e1:	90                   	nop

c00225e2 <SoundChannel::getBits()>:
c00225e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225e9:	c3                   	ret    

c00225ea <SoundChannel::getBufferUsed()>:
c00225ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00225f1:	c3                   	ret    

c00225f2 <SoundChannel::getBufferSize()>:
c00225f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225f6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00225f9:	c3                   	ret    

c00225fa <SoundChannel::unbuffer(float*, int, int)>:
c00225fa:	56                   	push   esi
c00225fb:	53                   	push   ebx
c00225fc:	83 ec 40             	sub    esp,0x40
c00225ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022603:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022606:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002260a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002260d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022611:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022615:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022619:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002261d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022621:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022625:	e8 d5 55 00 00       	call   c0027bff <__floatsisf>
c002262a:	5a                   	pop    edx
c002262b:	89 c6                	mov    esi,eax
c002262d:	ff 33                	push   DWORD PTR [ebx]
c002262f:	e8 cb 55 00 00       	call   c0027bff <__floatsisf>
c0022634:	59                   	pop    ecx
c0022635:	5a                   	pop    edx
c0022636:	50                   	push   eax
c0022637:	56                   	push   esi
c0022638:	e8 97 53 00 00       	call   c00279d4 <__divsf3>
c002263d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022640:	e8 8a 68 00 00       	call   c0028ecf <__extendsfdf2>
c0022645:	59                   	pop    ecx
c0022646:	5e                   	pop    esi
c0022647:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002264b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002264f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022657:	8d 44 24 14          	lea    eax,[esp+0x14]
c002265b:	50                   	push   eax
c002265c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002265f:	e8 f6 60 fe ff       	call   c000875a <src_process>
c0022664:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022668:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002266b:	83 c4 0c             	add    esp,0xc
c002266e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022671:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022674:	29 d0                	sub    eax,edx
c0022676:	c1 e0 02             	shl    eax,0x2
c0022679:	50                   	push   eax
c002267a:	8d 04 91             	lea    eax,[ecx+edx*4]
c002267d:	50                   	push   eax
c002267e:	51                   	push   ecx
c002267f:	e8 04 e0 fd ff       	call   c0000688 <memmove>
c0022684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022688:	83 c4 44             	add    esp,0x44
c002268b:	5b                   	pop    ebx
c002268c:	5e                   	pop    esi
c002268d:	c3                   	ret    

c002268e <SoundChannel::buffer16(short*, int)>:
c002268e:	55                   	push   ebp
c002268f:	57                   	push   edi
c0022690:	56                   	push   esi
c0022691:	53                   	push   ebx
c0022692:	83 ec 1c             	sub    esp,0x1c
c0022695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022699:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002269c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002269f:	0f 84 d2 00 00 00    	je     c0022777 <SoundChannel::buffer16(short*, int)+0xe9>
c00226a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00226a9:	85 ed                	test   ebp,ebp
c00226ab:	0f 8e c6 00 00 00    	jle    c0022777 <SoundChannel::buffer16(short*, int)+0xe9>
c00226b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226b5:	bd 00 00 00 38       	mov    ebp,0x38000000
c00226ba:	83 ec 0c             	sub    esp,0xc
c00226bd:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00226c0:	50                   	push   eax
c00226c1:	e8 39 55 00 00       	call   c0027bff <__floatsisf>
c00226c6:	59                   	pop    ecx
c00226c7:	8d 4e 01             	lea    ecx,[esi+0x1]
c00226ca:	5f                   	pop    edi
c00226cb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00226ce:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00226d1:	55                   	push   ebp
c00226d2:	50                   	push   eax
c00226d3:	e8 39 51 00 00       	call   c0027811 <__mulsf3>
c00226d8:	83 c4 10             	add    esp,0x10
c00226db:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00226de:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00226e1:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00226e4:	0f 84 99 00 00 00    	je     c0022783 <SoundChannel::buffer16(short*, int)+0xf5>
c00226ea:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00226ef:	74 78                	je     c0022769 <SoundChannel::buffer16(short*, int)+0xdb>
c00226f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226f5:	83 ec 0c             	sub    esp,0xc
c00226f8:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00226fc:	50                   	push   eax
c00226fd:	e8 fd 54 00 00       	call   c0027bff <__floatsisf>
c0022702:	5f                   	pop    edi
c0022703:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022706:	5a                   	pop    edx
c0022707:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002270a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002270d:	55                   	push   ebp
c002270e:	50                   	push   eax
c002270f:	e8 fd 50 00 00       	call   c0027811 <__mulsf3>
c0022714:	83 c4 10             	add    esp,0x10
c0022717:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002271a:	be 02 00 00 00       	mov    esi,0x2
c002271f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022722:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022725:	74 46                	je     c002276d <SoundChannel::buffer16(short*, int)+0xdf>
c0022727:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002272b:	eb 36                	jmp    c0022763 <SoundChannel::buffer16(short*, int)+0xd5>
c002272d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022731:	83 ec 0c             	sub    esp,0xc
c0022734:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022738:	46                   	inc    esi
c0022739:	50                   	push   eax
c002273a:	e8 c0 54 00 00       	call   c0027bff <__floatsisf>
c002273f:	5a                   	pop    edx
c0022740:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022743:	59                   	pop    ecx
c0022744:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022747:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002274a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002274e:	50                   	push   eax
c002274f:	e8 bd 50 00 00       	call   c0027811 <__mulsf3>
c0022754:	83 c4 10             	add    esp,0x10
c0022757:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c002275b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002275e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022761:	74 0a                	je     c002276d <SoundChannel::buffer16(short*, int)+0xdf>
c0022763:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022767:	75 c4                	jne    c002272d <SoundChannel::buffer16(short*, int)+0x9f>
c0022769:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002276d:	83 c4 1c             	add    esp,0x1c
c0022770:	89 f0                	mov    eax,esi
c0022772:	5b                   	pop    ebx
c0022773:	5e                   	pop    esi
c0022774:	5f                   	pop    edi
c0022775:	5d                   	pop    ebp
c0022776:	c3                   	ret    
c0022777:	83 c4 1c             	add    esp,0x1c
c002277a:	31 f6                	xor    esi,esi
c002277c:	5b                   	pop    ebx
c002277d:	89 f0                	mov    eax,esi
c002277f:	5e                   	pop    esi
c0022780:	5f                   	pop    edi
c0022781:	5d                   	pop    ebp
c0022782:	c3                   	ret    
c0022783:	be 01 00 00 00       	mov    esi,0x1
c0022788:	eb e3                	jmp    c002276d <SoundChannel::buffer16(short*, int)+0xdf>

c002278a <SoundChannel::buffer8(unsigned char*, int)>:
c002278a:	55                   	push   ebp
c002278b:	57                   	push   edi
c002278c:	56                   	push   esi
c002278d:	53                   	push   ebx
c002278e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022792:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022796:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022799:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002279d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00227a0:	74 7a                	je     c002281c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00227a2:	85 ff                	test   edi,edi
c00227a4:	7e 76                	jle    c002281c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00227a6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00227aa:	8d 70 01             	lea    esi,[eax+0x1]
c00227ad:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00227b0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00227b3:	8b 1c 9d 80 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce80]
c00227ba:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00227bd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00227c0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00227c3:	74 5e                	je     c0022823 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00227c5:	83 ff 01             	cmp    edi,0x1
c00227c8:	74 4b                	je     c0022815 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00227ca:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00227ce:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00227d1:	8d 70 01             	lea    esi,[eax+0x1]
c00227d4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00227d7:	8b 1c 9d 80 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce80]
c00227de:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00227e1:	b8 02 00 00 00       	mov    eax,0x2
c00227e6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00227e9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00227ec:	75 23                	jne    c0022811 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00227ee:	eb 27                	jmp    c0022817 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00227f0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00227f5:	8d 71 01             	lea    esi,[ecx+0x1]
c00227f8:	40                   	inc    eax
c00227f9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00227fc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00227ff:	8b 1c 9d 80 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce80]
c0022806:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022809:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002280c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002280f:	74 06                	je     c0022817 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022811:	39 c7                	cmp    edi,eax
c0022813:	75 db                	jne    c00227f0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022815:	89 f8                	mov    eax,edi
c0022817:	5b                   	pop    ebx
c0022818:	5e                   	pop    esi
c0022819:	5f                   	pop    edi
c002281a:	5d                   	pop    ebp
c002281b:	c3                   	ret    
c002281c:	5b                   	pop    ebx
c002281d:	31 c0                	xor    eax,eax
c002281f:	5e                   	pop    esi
c0022820:	5f                   	pop    edi
c0022821:	5d                   	pop    ebp
c0022822:	c3                   	ret    
c0022823:	b8 01 00 00 00       	mov    eax,0x1
c0022828:	eb ed                	jmp    c0022817 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002282a <SoundDevice::SoundDevice(char const*)>:
c002282a:	83 ec 1c             	sub    esp,0x1c
c002282d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022831:	83 ec 08             	sub    esp,0x8
c0022834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022838:	50                   	push   eax
c0022839:	e8 fa 16 ff ff       	call   c0013f38 <Device::Device(char const*)>
c002283e:	83 c4 10             	add    esp,0x10
c0022841:	ba f8 d5 02 c0       	mov    edx,0xc002d5f8
c0022846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002284a:	89 10                	mov    DWORD PTR [eax],edx
c002284c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022850:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002285a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002285e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022868:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022870:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022875:	7f 19                	jg     c0022890 <SoundDevice::SoundDevice(char const*)+0x66>
c0022877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002287f:	83 c2 54             	add    edx,0x54
c0022882:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002288a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002288e:	eb e0                	jmp    c0022870 <SoundDevice::SoundDevice(char const*)+0x46>
c0022890:	90                   	nop
c0022891:	83 c4 1c             	add    esp,0x1c
c0022894:	c3                   	ret    
c0022895:	90                   	nop

c0022896 <SoundDevice::~SoundDevice()>:
c0022896:	53                   	push   ebx
c0022897:	83 ec 18             	sub    esp,0x18
c002289a:	ba f8 d5 02 c0       	mov    edx,0xc002d5f8
c002289f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228a3:	89 10                	mov    DWORD PTR [eax],edx
c00228a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228ad:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00228b2:	7f 46                	jg     c00228fa <SoundDevice::~SoundDevice()+0x64>
c00228b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00228bc:	83 c2 54             	add    edx,0x54
c00228bf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00228c3:	85 c0                	test   eax,eax
c00228c5:	74 2d                	je     c00228f4 <SoundDevice::~SoundDevice()+0x5e>
c00228c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00228cf:	83 c2 54             	add    edx,0x54
c00228d2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00228d6:	85 db                	test   ebx,ebx
c00228d8:	74 1a                	je     c00228f4 <SoundDevice::~SoundDevice()+0x5e>
c00228da:	83 ec 0c             	sub    esp,0xc
c00228dd:	53                   	push   ebx
c00228de:	e8 db fc ff ff       	call   c00225be <SoundChannel::~SoundChannel()>
c00228e3:	83 c4 10             	add    esp,0x10
c00228e6:	83 ec 08             	sub    esp,0x8
c00228e9:	6a 2c                	push   0x2c
c00228eb:	53                   	push   ebx
c00228ec:	e8 2a ff fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00228f8:	eb b3                	jmp    c00228ad <SoundDevice::~SoundDevice()+0x17>
c00228fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228fe:	83 ec 0c             	sub    esp,0xc
c0022901:	50                   	push   eax
c0022902:	e8 fb 12 ff ff       	call   c0013c02 <Device::~Device()>
c0022907:	83 c4 10             	add    esp,0x10
c002290a:	90                   	nop
c002290b:	83 c4 18             	add    esp,0x18
c002290e:	5b                   	pop    ebx
c002290f:	c3                   	ret    

c0022910 <SoundDevice::~SoundDevice()>:
c0022910:	83 ec 0c             	sub    esp,0xc
c0022913:	83 ec 0c             	sub    esp,0xc
c0022916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002291a:	e8 77 ff ff ff       	call   c0022896 <SoundDevice::~SoundDevice()>
c002291f:	83 c4 10             	add    esp,0x10
c0022922:	83 ec 08             	sub    esp,0x8
c0022925:	68 e4 01 00 00       	push   0x1e4
c002292a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002292e:	e8 e8 fe fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0022933:	83 c4 10             	add    esp,0x10
c0022936:	83 c4 0c             	add    esp,0xc
c0022939:	c3                   	ret    

c002293a <SoundDevice::getFreeChannelNum()>:
c002293a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002293e:	31 c0                	xor    eax,eax
c0022940:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022948:	74 09                	je     c0022953 <SoundDevice::getFreeChannelNum()+0x19>
c002294a:	40                   	inc    eax
c002294b:	83 f8 20             	cmp    eax,0x20
c002294e:	75 f0                	jne    c0022940 <SoundDevice::getFreeChannelNum()+0x6>
c0022950:	83 c8 ff             	or     eax,0xffffffff
c0022953:	c3                   	ret    

c0022954 <SoundDevice::addChannel(SoundChannel*)>:
c0022954:	56                   	push   esi
c0022955:	53                   	push   ebx
c0022956:	51                   	push   ecx
c0022957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002295b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002295f:	53                   	push   ebx
c0022960:	e8 d5 ff ff ff       	call   c002293a <SoundDevice::getFreeChannelNum()>
c0022965:	5a                   	pop    edx
c0022966:	83 f8 ff             	cmp    eax,0xffffffff
c0022969:	74 51                	je     c00229bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002296b:	85 f6                	test   esi,esi
c002296d:	74 4d                	je     c00229bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002296f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022976:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002297d:	75 30                	jne    c00229af <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002297f:	83 ec 0c             	sub    esp,0xc
c0022982:	56                   	push   esi
c0022983:	e8 52 fc ff ff       	call   c00225da <SoundChannel::getSampleRate()>
c0022988:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002298e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022991:	e8 4c fc ff ff       	call   c00225e2 <SoundChannel::getBits()>
c0022996:	83 c4 0c             	add    esp,0xc
c0022999:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002299f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00229a1:	50                   	push   eax
c00229a2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00229a8:	53                   	push   ebx
c00229a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00229ac:	83 c4 10             	add    esp,0x10
c00229af:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00229b5:	b8 01 00 00 00       	mov    eax,0x1
c00229ba:	eb 03                	jmp    c00229bf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00229bc:	83 c8 ff             	or     eax,0xffffffff
c00229bf:	5a                   	pop    edx
c00229c0:	5b                   	pop    ebx
c00229c1:	5e                   	pop    esi
c00229c2:	c3                   	ret    
c00229c3:	90                   	nop

c00229c4 <SoundDevice::removeChannel(int)>:
c00229c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229cc:	83 fa 1f             	cmp    edx,0x1f
c00229cf:	77 23                	ja     c00229f4 <SoundDevice::removeChannel(int)+0x30>
c00229d1:	8d 14 90             	lea    edx,[eax+edx*4]
c00229d4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00229db:	74 17                	je     c00229f4 <SoundDevice::removeChannel(int)+0x30>
c00229dd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00229e7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00229ed:	75 05                	jne    c00229f4 <SoundDevice::removeChannel(int)+0x30>
c00229ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00229f1:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00229f4:	c3                   	ret    
c00229f5:	90                   	nop

c00229f6 <SoundDevice::floatTo16(float*, short*, int)>:
c00229f6:	57                   	push   edi
c00229f7:	56                   	push   esi
c00229f8:	53                   	push   ebx
c00229f9:	31 db                	xor    ebx,ebx
c00229fb:	83 ec 10             	sub    esp,0x10
c00229fe:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a02:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a06:	0f 8d d0 00 00 00    	jge    c0022adc <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022a0c:	83 ec 0c             	sub    esp,0xc
c0022a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a16:	e8 b4 64 00 00       	call   c0028ecf <__extendsfdf2>
c0022a1b:	83 c4 10             	add    esp,0x10
c0022a1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a26:	68 00 00 f0 3f       	push   0x3ff00000
c0022a2b:	6a 00                	push   0x0
c0022a2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a35:	e8 21 54 00 00       	call   c0027e5b <__adddf3>
c0022a3a:	83 c4 10             	add    esp,0x10
c0022a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a45:	68 00 00 e0 3f       	push   0x3fe00000
c0022a4a:	6a 00                	push   0x0
c0022a4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a54:	e8 7f 5a 00 00       	call   c00284d8 <__muldf3>
c0022a59:	83 c4 10             	add    esp,0x10
c0022a5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a64:	68 c0 ff df 40       	push   0x40dfffc0
c0022a69:	6a 00                	push   0x0
c0022a6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a73:	e8 60 5a 00 00       	call   c00284d8 <__muldf3>
c0022a78:	59                   	pop    ecx
c0022a79:	5f                   	pop    edi
c0022a7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022a7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022a82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8a:	e8 1c 63 00 00       	call   c0028dab <__truncdfsf2>
c0022a8f:	5a                   	pop    edx
c0022a90:	89 c7                	mov    edi,eax
c0022a92:	59                   	pop    ecx
c0022a93:	68 00 fe ff 46       	push   0x46fffe00
c0022a98:	50                   	push   eax
c0022a99:	e8 b7 53 00 00       	call   c0027e55 <__gesf2>
c0022a9e:	83 c4 10             	add    esp,0x10
c0022aa1:	85 c0                	test   eax,eax
c0022aa3:	78 08                	js     c0022aad <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022aa5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022aab:	eb 29                	jmp    c0022ad6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022aad:	50                   	push   eax
c0022aae:	50                   	push   eax
c0022aaf:	6a 00                	push   0x0
c0022ab1:	57                   	push   edi
c0022ab2:	e8 a2 53 00 00       	call   c0027e59 <__lesf2>
c0022ab7:	83 c4 10             	add    esp,0x10
c0022aba:	85 c0                	test   eax,eax
c0022abc:	7f 08                	jg     c0022ac6 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022abe:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022ac4:	eb 10                	jmp    c0022ad6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022ac6:	83 ec 0c             	sub    esp,0xc
c0022ac9:	57                   	push   edi
c0022aca:	e8 9d 64 00 00       	call   c0028f6c <lrintf>
c0022acf:	83 c4 10             	add    esp,0x10
c0022ad2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022ad6:	43                   	inc    ebx
c0022ad7:	e9 26 ff ff ff       	jmp    c0022a02 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022adc:	83 c4 10             	add    esp,0x10
c0022adf:	5b                   	pop    ebx
c0022ae0:	5e                   	pop    esi
c0022ae1:	5f                   	pop    edi
c0022ae2:	c3                   	ret    
c0022ae3:	90                   	nop

c0022ae4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022ae4:	57                   	push   edi
c0022ae5:	56                   	push   esi
c0022ae6:	53                   	push   ebx
c0022ae7:	31 db                	xor    ebx,ebx
c0022ae9:	83 ec 10             	sub    esp,0x10
c0022aec:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022af0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022af4:	0f 8d cb 00 00 00    	jge    c0022bc5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022afa:	83 ec 0c             	sub    esp,0xc
c0022afd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b01:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022b04:	e8 c6 63 00 00       	call   c0028ecf <__extendsfdf2>
c0022b09:	83 c4 10             	add    esp,0x10
c0022b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b14:	68 00 00 f0 3f       	push   0x3ff00000
c0022b19:	6a 00                	push   0x0
c0022b1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b23:	e8 33 53 00 00       	call   c0027e5b <__adddf3>
c0022b28:	83 c4 10             	add    esp,0x10
c0022b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b33:	68 00 00 e0 3f       	push   0x3fe00000
c0022b38:	6a 00                	push   0x0
c0022b3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b42:	e8 91 59 00 00       	call   c00284d8 <__muldf3>
c0022b47:	83 c4 10             	add    esp,0x10
c0022b4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b52:	68 00 00 60 40       	push   0x40600000
c0022b57:	6a 00                	push   0x0
c0022b59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b61:	e8 72 59 00 00       	call   c00284d8 <__muldf3>
c0022b66:	59                   	pop    ecx
c0022b67:	5f                   	pop    edi
c0022b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022b6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b78:	e8 2e 62 00 00       	call   c0028dab <__truncdfsf2>
c0022b7d:	5a                   	pop    edx
c0022b7e:	89 c7                	mov    edi,eax
c0022b80:	59                   	pop    ecx
c0022b81:	68 00 00 fe 42       	push   0x42fe0000
c0022b86:	50                   	push   eax
c0022b87:	e8 c9 52 00 00       	call   c0027e55 <__gesf2>
c0022b8c:	83 c4 10             	add    esp,0x10
c0022b8f:	85 c0                	test   eax,eax
c0022b91:	78 06                	js     c0022b99 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022b93:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022b97:	eb 26                	jmp    c0022bbf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b99:	50                   	push   eax
c0022b9a:	50                   	push   eax
c0022b9b:	6a 00                	push   0x0
c0022b9d:	57                   	push   edi
c0022b9e:	e8 b6 52 00 00       	call   c0027e59 <__lesf2>
c0022ba3:	83 c4 10             	add    esp,0x10
c0022ba6:	85 c0                	test   eax,eax
c0022ba8:	7f 06                	jg     c0022bb0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022baa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022bae:	eb 0f                	jmp    c0022bbf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022bb0:	83 ec 0c             	sub    esp,0xc
c0022bb3:	57                   	push   edi
c0022bb4:	e8 b3 63 00 00       	call   c0028f6c <lrintf>
c0022bb9:	83 c4 10             	add    esp,0x10
c0022bbc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022bbf:	43                   	inc    ebx
c0022bc0:	e9 2b ff ff ff       	jmp    c0022af0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022bc5:	83 c4 10             	add    esp,0x10
c0022bc8:	5b                   	pop    ebx
c0022bc9:	5e                   	pop    esi
c0022bca:	5f                   	pop    edi
c0022bcb:	c3                   	ret    

c0022bcc <SoundDevice::getAudio(int, float*, float*)>:
c0022bcc:	55                   	push   ebp
c0022bcd:	57                   	push   edi
c0022bce:	56                   	push   esi
c0022bcf:	53                   	push   ebx
c0022bd0:	83 ec 28             	sub    esp,0x28
c0022bd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022bd7:	68 fc d4 02 c0       	push   0xc002d4fc
c0022bdc:	e8 1a fd fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022be1:	59                   	pop    ecx
c0022be2:	5e                   	pop    esi
c0022be3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022be7:	68 13 d5 02 c0       	push   0xc002d513
c0022bec:	e8 0a fd fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022bf1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022bf5:	83 c4 0c             	add    esp,0xc
c0022bf8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022bff:	56                   	push   esi
c0022c00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c04:	68 35 d5 02 c0       	push   0xc002d535
c0022c09:	e8 ed fc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022c0e:	83 c4 0c             	add    esp,0xc
c0022c11:	56                   	push   esi
c0022c12:	31 f6                	xor    esi,esi
c0022c14:	6a 00                	push   0x0
c0022c16:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022c1a:	e8 31 db fd ff       	call   c0000750 <memset>
c0022c1f:	83 c4 10             	add    esp,0x10
c0022c22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c2a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022c32:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022c39:	85 c0                	test   eax,eax
c0022c3b:	0f 84 d7 00 00 00    	je     c0022d18 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022c41:	83 ec 0c             	sub    esp,0xc
c0022c44:	50                   	push   eax
c0022c45:	e8 a8 f9 ff ff       	call   c00225f2 <SoundChannel::getBufferSize()>
c0022c4a:	5f                   	pop    edi
c0022c4b:	5d                   	pop    ebp
c0022c4c:	50                   	push   eax
c0022c4d:	68 59 d5 02 c0       	push   0xc002d559
c0022c52:	e8 a4 fc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022c57:	58                   	pop    eax
c0022c58:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c5f:	e8 86 f9 ff ff       	call   c00225ea <SoundChannel::getBufferUsed()>
c0022c64:	5a                   	pop    edx
c0022c65:	59                   	pop    ecx
c0022c66:	50                   	push   eax
c0022c67:	68 6c d5 02 c0       	push   0xc002d56c
c0022c6c:	e8 8a fc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022c71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022c75:	99                   	cdq    
c0022c76:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c7c:	50                   	push   eax
c0022c7d:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022c83:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022c87:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c8e:	e8 67 f9 ff ff       	call   c00225fa <SoundChannel::unbuffer(float*, int, int)>
c0022c93:	83 c4 14             	add    esp,0x14
c0022c96:	89 c5                	mov    ebp,eax
c0022c98:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c9f:	e8 46 f9 ff ff       	call   c00225ea <SoundChannel::getBufferUsed()>
c0022ca4:	5f                   	pop    edi
c0022ca5:	5a                   	pop    edx
c0022ca6:	50                   	push   eax
c0022ca7:	68 84 d5 02 c0       	push   0xc002d584
c0022cac:	e8 4a fc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022cb1:	56                   	push   esi
c0022cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022cb6:	99                   	cdq    
c0022cb7:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022cbd:	50                   	push   eax
c0022cbe:	55                   	push   ebp
c0022cbf:	68 9c d5 02 c0       	push   0xc002d59c
c0022cc4:	e8 32 fc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022cc9:	83 c4 20             	add    esp,0x20
c0022ccc:	31 c0                	xor    eax,eax
c0022cce:	39 e8                	cmp    eax,ebp
c0022cd0:	7d 1e                	jge    c0022cf0 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022cd2:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022cd8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022cdc:	0f af d0             	imul   edx,eax
c0022cdf:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022ce2:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022ce6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022cea:	40                   	inc    eax
c0022ceb:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022cee:	eb de                	jmp    c0022cce <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022cf0:	50                   	push   eax
c0022cf1:	50                   	push   eax
c0022cf2:	55                   	push   ebp
c0022cf3:	68 c9 d5 02 c0       	push   0xc002d5c9
c0022cf8:	e8 fe fb fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022cfd:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022d01:	5a                   	pop    edx
c0022d02:	59                   	pop    ecx
c0022d03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022d07:	68 da d5 02 c0       	push   0xc002d5da
c0022d0c:	e8 ea fb fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022d11:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022d15:	83 c4 10             	add    esp,0x10
c0022d18:	46                   	inc    esi
c0022d19:	83 fe 20             	cmp    esi,0x20
c0022d1c:	0f 85 10 ff ff ff    	jne    c0022c32 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d26:	83 c4 1c             	add    esp,0x1c
c0022d29:	5b                   	pop    ebx
c0022d2a:	5e                   	pop    esi
c0022d2b:	5f                   	pop    edi
c0022d2c:	5d                   	pop    ebp
c0022d2d:	c3                   	ret    

c0022d2e <PCI::open(int, int, void*)>:
c0022d2e:	83 ec 18             	sub    esp,0x18
c0022d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022d39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022d41:	50                   	push   eax
c0022d42:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022d45:	31 c0                	xor    eax,eax
c0022d47:	83 c4 1c             	add    esp,0x1c
c0022d4a:	c3                   	ret    
c0022d4b:	90                   	nop

c0022d4c <PCI::close(int, int, void*)>:
c0022d4c:	31 c0                	xor    eax,eax
c0022d4e:	c3                   	ret    
c0022d4f:	90                   	nop

c0022d50 <PCI::PCI()>:
c0022d50:	83 ec 0c             	sub    esp,0xc
c0022d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d57:	83 ec 08             	sub    esp,0x8
c0022d5a:	68 28 d6 02 c0       	push   0xc002d628
c0022d5f:	50                   	push   eax
c0022d60:	e8 37 08 ff ff       	call   c001359c <Bus::Bus(char const*)>
c0022d65:	83 c4 10             	add    esp,0x10
c0022d68:	ba 3c d7 02 c0       	mov    edx,0xc002d73c
c0022d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d71:	89 10                	mov    DWORD PTR [eax],edx
c0022d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d77:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d85:	a3 84 35 03 c0       	mov    ds:0xc0033584,eax
c0022d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d94:	0f b6 d0             	movzx  edx,al
c0022d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022dac:	0f b6 d0             	movzx  edx,al
c0022daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022dc2:	8d 50 01             	lea    edx,[eax+0x1]
c0022dc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022dc9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022dcf:	0f b6 d0             	movzx  edx,al
c0022dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022dda:	83 c9 c0             	or     ecx,0xffffffc0
c0022ddd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022de1:	90                   	nop
c0022de2:	83 c4 0c             	add    esp,0xc
c0022de5:	c3                   	ret    

c0022de6 <PCI::readBAR8(unsigned int, int)>:
c0022de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dee:	f6 c2 01             	test   dl,0x1
c0022df1:	74 07                	je     c0022dfa <PCI::readBAR8(unsigned int, int)+0x14>
c0022df3:	83 e2 fc             	and    edx,0xfffffffc
c0022df6:	01 c2                	add    edx,eax
c0022df8:	ec                   	in     al,dx
c0022df9:	c3                   	ret    
c0022dfa:	83 e2 f0             	and    edx,0xfffffff0
c0022dfd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022e00:	c3                   	ret    
c0022e01:	90                   	nop

c0022e02 <PCI::readBAR16(unsigned int, int)>:
c0022e02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e0a:	f6 c2 01             	test   dl,0x1
c0022e0d:	74 08                	je     c0022e17 <PCI::readBAR16(unsigned int, int)+0x15>
c0022e0f:	83 e2 fc             	and    edx,0xfffffffc
c0022e12:	01 c2                	add    edx,eax
c0022e14:	66 ed                	in     ax,dx
c0022e16:	c3                   	ret    
c0022e17:	83 e2 f0             	and    edx,0xfffffff0
c0022e1a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022e1e:	c3                   	ret    
c0022e1f:	90                   	nop

c0022e20 <PCI::readBAR32(unsigned int, int)>:
c0022e20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e28:	f6 c2 01             	test   dl,0x1
c0022e2b:	74 07                	je     c0022e34 <PCI::readBAR32(unsigned int, int)+0x14>
c0022e2d:	83 e2 fc             	and    edx,0xfffffffc
c0022e30:	01 c2                	add    edx,eax
c0022e32:	ed                   	in     eax,dx
c0022e33:	c3                   	ret    
c0022e34:	83 e2 f0             	and    edx,0xfffffff0
c0022e37:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022e3a:	c3                   	ret    
c0022e3b:	90                   	nop

c0022e3c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022e3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e48:	f6 c2 01             	test   dl,0x1
c0022e4b:	74 07                	je     c0022e54 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022e4d:	83 e2 fc             	and    edx,0xfffffffc
c0022e50:	01 ca                	add    edx,ecx
c0022e52:	ee                   	out    dx,al
c0022e53:	c3                   	ret    
c0022e54:	83 e2 f0             	and    edx,0xfffffff0
c0022e57:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022e5a:	c3                   	ret    
c0022e5b:	90                   	nop

c0022e5c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022e5c:	57                   	push   edi
c0022e5d:	56                   	push   esi
c0022e5e:	53                   	push   ebx
c0022e5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e63:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022e67:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022e6b:	f6 c2 01             	test   dl,0x1
c0022e6e:	74 24                	je     c0022e94 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022e70:	89 d3                	mov    ebx,edx
c0022e72:	83 e3 fc             	and    ebx,0xfffffffc
c0022e75:	50                   	push   eax
c0022e76:	0f b7 c7             	movzx  eax,di
c0022e79:	50                   	push   eax
c0022e7a:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022e7d:	50                   	push   eax
c0022e7e:	68 30 d6 02 c0       	push   0xc002d630
c0022e83:	e8 73 fa fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0022e88:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022e8b:	89 f8                	mov    eax,edi
c0022e8d:	66 ef                	out    dx,ax
c0022e8f:	83 c4 10             	add    esp,0x10
c0022e92:	eb 07                	jmp    c0022e9b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022e94:	83 e2 f0             	and    edx,0xfffffff0
c0022e97:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022e9b:	5b                   	pop    ebx
c0022e9c:	5e                   	pop    esi
c0022e9d:	5f                   	pop    edi
c0022e9e:	c3                   	ret    
c0022e9f:	90                   	nop

c0022ea0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022ea0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ea8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022eac:	f6 c2 01             	test   dl,0x1
c0022eaf:	74 07                	je     c0022eb8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022eb1:	83 e2 fc             	and    edx,0xfffffffc
c0022eb4:	01 ca                	add    edx,ecx
c0022eb6:	ef                   	out    dx,eax
c0022eb7:	c3                   	ret    
c0022eb8:	83 e2 f0             	and    edx,0xfffffff0
c0022ebb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022ebe:	c3                   	ret    
c0022ebf:	90                   	nop

c0022ec0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ec0:	55                   	push   ebp
c0022ec1:	57                   	push   edi
c0022ec2:	56                   	push   esi
c0022ec3:	53                   	push   ebx
c0022ec4:	83 ec 0c             	sub    esp,0xc
c0022ec7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022ecb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022ecf:	89 f0                	mov    eax,esi
c0022ed1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ed5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ed9:	3c 07                	cmp    al,0x7
c0022edb:	76 10                	jbe    c0022eed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022edd:	83 ec 0c             	sub    esp,0xc
c0022ee0:	68 47 d6 02 c0       	push   0xc002d647
c0022ee5:	e8 c5 74 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0022eea:	83 c4 10             	add    esp,0x10
c0022eed:	80 fb 0f             	cmp    bl,0xf
c0022ef0:	76 10                	jbe    c0022f02 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022ef2:	83 ec 0c             	sub    esp,0xc
c0022ef5:	68 77 d6 02 c0       	push   0xc002d677
c0022efa:	e8 b0 74 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0022eff:	83 c4 10             	add    esp,0x10
c0022f02:	8d 04 36             	lea    eax,[esi+esi*1]
c0022f05:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022f0a:	83 c8 f0             	or     eax,0xfffffff0
c0022f0d:	ee                   	out    dx,al
c0022f0e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022f13:	89 e8                	mov    eax,ebp
c0022f15:	ee                   	out    dx,al
c0022f16:	83 c4 0c             	add    esp,0xc
c0022f19:	89 d8                	mov    eax,ebx
c0022f1b:	66 81 e7 fc 00       	and    di,0xfc
c0022f20:	5b                   	pop    ebx
c0022f21:	c1 e0 08             	shl    eax,0x8
c0022f24:	5e                   	pop    esi
c0022f25:	09 f8                	or     eax,edi
c0022f27:	5f                   	pop    edi
c0022f28:	66 0d 00 c0          	or     ax,0xc000
c0022f2c:	5d                   	pop    ebp
c0022f2d:	c3                   	ret    

c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022f2e:	57                   	push   edi
c0022f2f:	56                   	push   esi
c0022f30:	53                   	push   ebx
c0022f31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f39:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022f3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f47:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022f4b:	83 ff 01             	cmp    edi,0x1
c0022f4e:	75 3e                	jne    c0022f8e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022f50:	89 de                	mov    esi,ebx
c0022f52:	0f b6 c0             	movzx  eax,al
c0022f55:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022f5b:	c1 e0 10             	shl    eax,0x10
c0022f5e:	0f b6 c9             	movzx  ecx,cl
c0022f61:	09 f0                	or     eax,esi
c0022f63:	c1 e1 08             	shl    ecx,0x8
c0022f66:	0f b6 d2             	movzx  edx,dl
c0022f69:	09 c8                	or     eax,ecx
c0022f6b:	c1 e2 0b             	shl    edx,0xb
c0022f6e:	09 d0                	or     eax,edx
c0022f70:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022f75:	0d 00 00 00 80       	or     eax,0x80000000
c0022f7a:	ef                   	out    dx,eax
c0022f7b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022f80:	ed                   	in     eax,dx
c0022f81:	83 e3 02             	and    ebx,0x2
c0022f84:	0f b6 cb             	movzx  ecx,bl
c0022f87:	c1 e1 03             	shl    ecx,0x3
c0022f8a:	d3 e8                	shr    eax,cl
c0022f8c:	eb 43                	jmp    c0022fd1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f8e:	83 ff 02             	cmp    edi,0x2
c0022f91:	75 2c                	jne    c0022fbf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022f93:	83 ec 0c             	sub    esp,0xc
c0022f96:	0f b6 c9             	movzx  ecx,cl
c0022f99:	0f b6 d2             	movzx  edx,dl
c0022f9c:	0f b6 fb             	movzx  edi,bl
c0022f9f:	0f b6 c0             	movzx  eax,al
c0022fa2:	57                   	push   edi
c0022fa3:	51                   	push   ecx
c0022fa4:	52                   	push   edx
c0022fa5:	50                   	push   eax
c0022fa6:	56                   	push   esi
c0022fa7:	e8 14 ff ff ff       	call   c0022ec0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fac:	89 c2                	mov    edx,eax
c0022fae:	ed                   	in     eax,dx
c0022faf:	83 e3 02             	and    ebx,0x2
c0022fb2:	83 c4 20             	add    esp,0x20
c0022fb5:	0f b6 cb             	movzx  ecx,bl
c0022fb8:	c1 e1 03             	shl    ecx,0x3
c0022fbb:	d3 e8                	shr    eax,cl
c0022fbd:	eb 12                	jmp    c0022fd1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022fbf:	83 ec 0c             	sub    esp,0xc
c0022fc2:	68 a7 d6 02 c0       	push   0xc002d6a7
c0022fc7:	e8 e3 73 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0022fcc:	83 c4 10             	add    esp,0x10
c0022fcf:	31 c0                	xor    eax,eax
c0022fd1:	5b                   	pop    ebx
c0022fd2:	5e                   	pop    esi
c0022fd3:	5f                   	pop    edi
c0022fd4:	c3                   	ret    
c0022fd5:	90                   	nop

c0022fd6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022fd6:	83 ec 18             	sub    esp,0x18
c0022fd9:	6a 00                	push   0x0
c0022fdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe0:	50                   	push   eax
c0022fe1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe6:	50                   	push   eax
c0022fe7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fec:	50                   	push   eax
c0022fed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ff1:	e8 38 ff ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ff6:	83 c4 2c             	add    esp,0x2c
c0022ff9:	c3                   	ret    

c0022ffa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022ffa:	83 ec 18             	sub    esp,0x18
c0022ffd:	6a 0e                	push   0xe
c0022fff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023004:	50                   	push   eax
c0023005:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002300a:	50                   	push   eax
c002300b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023010:	50                   	push   eax
c0023011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023015:	e8 14 ff ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002301a:	83 c4 2c             	add    esp,0x2c
c002301d:	0f b6 c0             	movzx  eax,al
c0023020:	c3                   	ret    
c0023021:	90                   	nop

c0023022 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023022:	55                   	push   ebp
c0023023:	57                   	push   edi
c0023024:	56                   	push   esi
c0023025:	53                   	push   ebx
c0023026:	83 ec 18             	sub    esp,0x18
c0023029:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002302e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0023033:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0023038:	6a 0a                	push   0xa
c002303a:	56                   	push   esi
c002303b:	55                   	push   ebp
c002303c:	57                   	push   edi
c002303d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023041:	e8 e8 fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023046:	83 c4 14             	add    esp,0x14
c0023049:	89 c3                	mov    ebx,eax
c002304b:	6a 0a                	push   0xa
c002304d:	0f b6 db             	movzx  ebx,bl
c0023050:	56                   	push   esi
c0023051:	55                   	push   ebp
c0023052:	57                   	push   edi
c0023053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023057:	e8 d2 fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002305c:	83 c4 2c             	add    esp,0x2c
c002305f:	25 00 ff 00 00       	and    eax,0xff00
c0023064:	09 d8                	or     eax,ebx
c0023066:	5b                   	pop    ebx
c0023067:	5e                   	pop    esi
c0023068:	5f                   	pop    edi
c0023069:	5d                   	pop    ebp
c002306a:	c3                   	ret    
c002306b:	90                   	nop

c002306c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002306c:	83 ec 18             	sub    esp,0x18
c002306f:	6a 08                	push   0x8
c0023071:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023076:	50                   	push   eax
c0023077:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002307c:	50                   	push   eax
c002307d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023082:	50                   	push   eax
c0023083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023087:	e8 a2 fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002308c:	83 c4 2c             	add    esp,0x2c
c002308f:	0f b6 c4             	movzx  eax,ah
c0023092:	c3                   	ret    
c0023093:	90                   	nop

c0023094 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023094:	83 ec 18             	sub    esp,0x18
c0023097:	6a 08                	push   0x8
c0023099:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002309e:	50                   	push   eax
c002309f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230a4:	50                   	push   eax
c00230a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230aa:	50                   	push   eax
c00230ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230af:	e8 7a fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230b4:	83 c4 2c             	add    esp,0x2c
c00230b7:	c3                   	ret    

c00230b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00230b8:	83 ec 18             	sub    esp,0x18
c00230bb:	6a 3c                	push   0x3c
c00230bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230c2:	50                   	push   eax
c00230c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230c8:	50                   	push   eax
c00230c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230ce:	50                   	push   eax
c00230cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230d3:	e8 56 fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230d8:	83 c4 2c             	add    esp,0x2c
c00230db:	c3                   	ret    

c00230dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00230dc:	83 ec 18             	sub    esp,0x18
c00230df:	6a 18                	push   0x18
c00230e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230e6:	50                   	push   eax
c00230e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230ec:	50                   	push   eax
c00230ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230f2:	50                   	push   eax
c00230f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230f7:	e8 32 fe ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230fc:	83 c4 2c             	add    esp,0x2c
c00230ff:	0f b6 c4             	movzx  eax,ah
c0023102:	c3                   	ret    
c0023103:	90                   	nop

c0023104 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023104:	55                   	push   ebp
c0023105:	57                   	push   edi
c0023106:	56                   	push   esi
c0023107:	53                   	push   ebx
c0023108:	83 ec 28             	sub    esp,0x28
c002310b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002310f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023114:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023119:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002311e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023125:	8d 43 12             	lea    eax,[ebx+0x12]
c0023128:	83 c3 10             	add    ebx,0x10
c002312b:	0f b6 c0             	movzx  eax,al
c002312e:	0f b6 db             	movzx  ebx,bl
c0023131:	50                   	push   eax
c0023132:	51                   	push   ecx
c0023133:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023137:	57                   	push   edi
c0023138:	55                   	push   ebp
c0023139:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002313d:	e8 ec fd ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023142:	83 c4 14             	add    esp,0x14
c0023145:	89 c6                	mov    esi,eax
c0023147:	53                   	push   ebx
c0023148:	c1 e6 10             	shl    esi,0x10
c002314b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002314f:	51                   	push   ecx
c0023150:	57                   	push   edi
c0023151:	55                   	push   ebp
c0023152:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023156:	e8 d3 fd ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002315b:	83 c4 3c             	add    esp,0x3c
c002315e:	0f b7 c0             	movzx  eax,ax
c0023161:	5b                   	pop    ebx
c0023162:	09 f0                	or     eax,esi
c0023164:	5e                   	pop    esi
c0023165:	5f                   	pop    edi
c0023166:	5d                   	pop    ebp
c0023167:	c3                   	ret    

c0023168 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023168:	55                   	push   ebp
c0023169:	57                   	push   edi
c002316a:	56                   	push   esi
c002316b:	53                   	push   ebx
c002316c:	83 ec 0c             	sub    esp,0xc
c002316f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0023173:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023177:	89 f5                	mov    ebp,esi
c0023179:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002317f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023183:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023187:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002318b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002318f:	83 f9 01             	cmp    ecx,0x1
c0023192:	75 5d                	jne    c00231f1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0023194:	0f b6 c8             	movzx  ecx,al
c0023197:	0f b6 d2             	movzx  edx,dl
c002319a:	c1 e1 10             	shl    ecx,0x10
c002319d:	c1 e2 0b             	shl    edx,0xb
c00231a0:	89 f0                	mov    eax,esi
c00231a2:	25 fc 00 00 00       	and    eax,0xfc
c00231a7:	09 c1                	or     ecx,eax
c00231a9:	89 e8                	mov    eax,ebp
c00231ab:	0f b6 c0             	movzx  eax,al
c00231ae:	c1 e0 08             	shl    eax,0x8
c00231b1:	09 c1                	or     ecx,eax
c00231b3:	09 d1                	or     ecx,edx
c00231b5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00231c0:	89 c8                	mov    eax,ecx
c00231c2:	ef                   	out    dx,eax
c00231c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231c8:	ed                   	in     eax,dx
c00231c9:	0f b7 db             	movzx  ebx,bx
c00231cc:	83 e6 02             	and    esi,0x2
c00231cf:	74 0a                	je     c00231db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00231d1:	0f b7 d0             	movzx  edx,ax
c00231d4:	c1 e3 10             	shl    ebx,0x10
c00231d7:	09 d3                	or     ebx,edx
c00231d9:	eb 05                	jmp    c00231e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00231db:	66 31 c0             	xor    ax,ax
c00231de:	09 c3                	or     ebx,eax
c00231e0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231e5:	89 c8                	mov    eax,ecx
c00231e7:	ef                   	out    dx,eax
c00231e8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231ed:	89 d8                	mov    eax,ebx
c00231ef:	eb 41                	jmp    c0023232 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00231f1:	83 f9 02             	cmp    ecx,0x2
c00231f4:	75 45                	jne    c002323b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00231f6:	83 ec 0c             	sub    esp,0xc
c00231f9:	0f b6 d2             	movzx  edx,dl
c00231fc:	89 f1                	mov    ecx,esi
c00231fe:	0f b6 c0             	movzx  eax,al
c0023201:	0f b6 f1             	movzx  esi,cl
c0023204:	89 e9                	mov    ecx,ebp
c0023206:	56                   	push   esi
c0023207:	0f b6 c9             	movzx  ecx,cl
c002320a:	51                   	push   ecx
c002320b:	52                   	push   edx
c002320c:	50                   	push   eax
c002320d:	57                   	push   edi
c002320e:	e8 ad fc ff ff       	call   c0022ec0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023213:	89 c2                	mov    edx,eax
c0023215:	ed                   	in     eax,dx
c0023216:	83 c4 20             	add    esp,0x20
c0023219:	0f b7 db             	movzx  ebx,bx
c002321c:	f6 c2 02             	test   dl,0x2
c002321f:	74 0c                	je     c002322d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0023221:	0f b7 c8             	movzx  ecx,ax
c0023224:	89 d8                	mov    eax,ebx
c0023226:	c1 e0 10             	shl    eax,0x10
c0023229:	09 c8                	or     eax,ecx
c002322b:	eb 05                	jmp    c0023232 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002322d:	66 31 c0             	xor    ax,ax
c0023230:	09 d8                	or     eax,ebx
c0023232:	ef                   	out    dx,eax
c0023233:	83 c4 0c             	add    esp,0xc
c0023236:	5b                   	pop    ebx
c0023237:	5e                   	pop    esi
c0023238:	5f                   	pop    edi
c0023239:	5d                   	pop    ebp
c002323a:	c3                   	ret    
c002323b:	c7 44 24 20 a7 d6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d6a7
c0023243:	83 c4 0c             	add    esp,0xc
c0023246:	5b                   	pop    ebx
c0023247:	5e                   	pop    esi
c0023248:	5f                   	pop    edi
c0023249:	5d                   	pop    ebp
c002324a:	e9 60 71 ff ff       	jmp    c001a3af <Krnl::panic(char const*)>
c002324f:	90                   	nop

c0023250 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0023250:	55                   	push   ebp
c0023251:	57                   	push   edi
c0023252:	56                   	push   esi
c0023253:	53                   	push   ebx
c0023254:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002325a:	80 3d 90 35 03 c0 00 	cmp    BYTE PTR ds:0xc0033590,0x0
c0023261:	0f 85 96 00 00 00    	jne    c00232fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0023267:	83 ec 0c             	sub    esp,0xc
c002326a:	68 14 01 00 00       	push   0x114
c002326f:	e8 8e c6 fe ff       	call   c000f902 <malloc>
c0023274:	83 c4 0c             	add    esp,0xc
c0023277:	89 c3                	mov    ebx,eax
c0023279:	ff 35 90 27 03 c0    	push   DWORD PTR ds:0xc0032790
c002327f:	68 ad d6 02 c0       	push   0xc002d6ad
c0023284:	50                   	push   eax
c0023285:	e8 d0 fb fe ff       	call   c0012e5a <File::File(char const*, Process*)>
c002328a:	5a                   	pop    edx
c002328b:	59                   	pop    ecx
c002328c:	6a 01                	push   0x1
c002328e:	53                   	push   ebx
c002328f:	e8 2a fc fe ff       	call   c0012ebe <File::open(FileOpenMode)>
c0023294:	83 c4 0c             	add    esp,0xc
c0023297:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002329b:	50                   	push   eax
c002329c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00232a0:	50                   	push   eax
c00232a1:	53                   	push   ebx
c00232a2:	e8 c3 fe fe ff       	call   c001316a <File::stat(unsigned long long*, bool*)>
c00232a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232ab:	40                   	inc    eax
c00232ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00232af:	e8 4e c6 fe ff       	call   c000f902 <malloc>
c00232b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232b8:	a3 8c 35 03 c0       	mov    ds:0xc003358c,eax
c00232bd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00232c1:	5e                   	pop    esi
c00232c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00232c4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00232c8:	51                   	push   ecx
c00232c9:	50                   	push   eax
c00232ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00232ce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00232d2:	53                   	push   ebx
c00232d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00232d6:	83 c4 14             	add    esp,0x14
c00232d9:	53                   	push   ebx
c00232da:	e8 3d fc fe ff       	call   c0012f1c <File::close()>
c00232df:	5f                   	pop    edi
c00232e0:	5d                   	pop    ebp
c00232e1:	ff 35 8c 35 03 c0    	push   DWORD PTR ds:0xc003358c
c00232e7:	68 c6 d6 02 c0       	push   0xc002d6c6
c00232ec:	e8 0a f6 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00232f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232f5:	83 c4 10             	add    esp,0x10
c00232f8:	a3 88 35 03 c0       	mov    ds:0xc0033588,eax
c00232fd:	a1 88 35 03 c0       	mov    eax,ds:0xc0033588
c0023302:	8b 15 8c 35 03 c0    	mov    edx,DWORD PTR ds:0xc003358c
c0023308:	89 04 24             	mov    DWORD PTR [esp],eax
c002330b:	31 ff                	xor    edi,edi
c002330d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023315:	31 f6                	xor    esi,esi
c0023317:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002331c:	31 db                	xor    ebx,ebx
c002331e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023326:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002332b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023332:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023336:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002333d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023341:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023344:	0f 8e 6b 01 00 00    	jle    c00234b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002334a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002334d:	d4 40                	aam    0x40
c002334f:	d5 39                	aad    0x39
c0023351:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023355:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023359:	d4 40                	aam    0x40
c002335b:	d5 39                	aad    0x39
c002335d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023361:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023365:	d4 40                	aam    0x40
c0023367:	d5 39                	aad    0x39
c0023369:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002336d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0023371:	d4 40                	aam    0x40
c0023373:	d5 39                	aad    0x39
c0023375:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023379:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002337d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0023381:	3c 56                	cmp    al,0x56
c0023383:	74 45                	je     c00233ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c0023385:	d4 40                	aam    0x40
c0023387:	d5 39                	aad    0x39
c0023389:	8d 48 d0             	lea    ecx,[eax-0x30]
c002338c:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0023390:	0f b6 c9             	movzx  ecx,cl
c0023393:	c1 e1 04             	shl    ecx,0x4
c0023396:	d4 40                	aam    0x40
c0023398:	d5 39                	aad    0x39
c002339a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002339d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00233a1:	0f b6 db             	movzx  ebx,bl
c00233a4:	09 cb                	or     ebx,ecx
c00233a6:	c1 e3 04             	shl    ebx,0x4
c00233a9:	d4 40                	aam    0x40
c00233ab:	d5 39                	aad    0x39
c00233ad:	8d 48 d0             	lea    ecx,[eax-0x30]
c00233b0:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00233b4:	0f b6 c9             	movzx  ecx,cl
c00233b7:	09 cb                	or     ebx,ecx
c00233b9:	c1 e3 04             	shl    ebx,0x4
c00233bc:	89 d9                	mov    ecx,ebx
c00233be:	d4 40                	aam    0x40
c00233c0:	d5 39                	aad    0x39
c00233c2:	8d 58 d0             	lea    ebx,[eax-0x30]
c00233c5:	0f b6 db             	movzx  ebx,bl
c00233c8:	09 cb                	or     ebx,ecx
c00233ca:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00233ce:	80 f9 44             	cmp    cl,0x44
c00233d1:	74 47                	je     c002341a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00233d3:	88 c8                	mov    al,cl
c00233d5:	d4 40                	aam    0x40
c00233d7:	d5 39                	aad    0x39
c00233d9:	83 e8 30             	sub    eax,0x30
c00233dc:	0f b6 e8             	movzx  ebp,al
c00233df:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00233e3:	c1 e5 04             	shl    ebp,0x4
c00233e6:	d4 40                	aam    0x40
c00233e8:	d5 39                	aad    0x39
c00233ea:	83 e8 30             	sub    eax,0x30
c00233ed:	0f b6 f0             	movzx  esi,al
c00233f0:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00233f4:	09 ee                	or     esi,ebp
c00233f6:	c1 e6 04             	shl    esi,0x4
c00233f9:	d4 40                	aam    0x40
c00233fb:	d5 39                	aad    0x39
c00233fd:	83 e8 30             	sub    eax,0x30
c0023400:	0f b6 e8             	movzx  ebp,al
c0023403:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023407:	09 ee                	or     esi,ebp
c0023409:	c1 e6 04             	shl    esi,0x4
c002340c:	89 f5                	mov    ebp,esi
c002340e:	d4 40                	aam    0x40
c0023410:	d5 39                	aad    0x39
c0023412:	83 e8 30             	sub    eax,0x30
c0023415:	0f b6 f0             	movzx  esi,al
c0023418:	09 ee                	or     esi,ebp
c002341a:	83 c7 10             	add    edi,0x10
c002341d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023421:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023424:	3c 0a                	cmp    al,0xa
c0023426:	74 09                	je     c0023431 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023428:	45                   	inc    ebp
c0023429:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002342c:	75 16                	jne    c0023444 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002342e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023431:	3c 0a                	cmp    al,0xa
c0023433:	0f 94 c0             	sete   al
c0023436:	0f b6 c0             	movzx  eax,al
c0023439:	01 c7                	add    edi,eax
c002343b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023440:	75 0c                	jne    c002344e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023442:	eb 15                	jmp    c0023459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023444:	47                   	inc    edi
c0023445:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023448:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002344c:	eb d3                	jmp    c0023421 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002344e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023453:	0f 85 e8 fe ff ff    	jne    c0023341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023459:	80 f9 44             	cmp    cl,0x44
c002345c:	74 0b                	je     c0023469 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002345e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023463:	0f 85 d8 fe ff ff    	jne    c0023341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023469:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002346d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0023471:	c1 e1 04             	shl    ecx,0x4
c0023474:	83 e8 30             	sub    eax,0x30
c0023477:	09 c8                	or     eax,ecx
c0023479:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002347d:	0f 85 be fe ff ff    	jne    c0023341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023483:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023487:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002348b:	c1 e1 04             	shl    ecx,0x4
c002348e:	83 e8 30             	sub    eax,0x30
c0023491:	09 c8                	or     eax,ecx
c0023493:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023497:	0f 85 a4 fe ff ff    	jne    c0023341 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002349d:	50                   	push   eax
c002349e:	50                   	push   eax
c002349f:	8d 44 24 28          	lea    eax,[esp+0x28]
c00234a3:	50                   	push   eax
c00234a4:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00234ab:	e8 5c d3 fd ff       	call   c000080c <strcpy>
c00234b0:	83 c4 10             	add    esp,0x10
c00234b3:	eb 15                	jmp    c00234ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00234b5:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00234bc:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00234c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00234ca:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00234d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00234d7:	5b                   	pop    ebx
c00234d8:	5e                   	pop    esi
c00234d9:	5f                   	pop    edi
c00234da:	5d                   	pop    ebp
c00234db:	c3                   	ret    

c00234dc <PCI::checkBus(unsigned char)>:
c00234dc:	56                   	push   esi
c00234dd:	53                   	push   ebx
c00234de:	31 db                	xor    ebx,ebx
c00234e0:	51                   	push   ecx
c00234e1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00234e6:	52                   	push   edx
c00234e7:	53                   	push   ebx
c00234e8:	43                   	inc    ebx
c00234e9:	56                   	push   esi
c00234ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ee:	e8 37 03 00 00       	call   c002382a <PCI::checkDevice(unsigned char, unsigned char)>
c00234f3:	83 c4 10             	add    esp,0x10
c00234f6:	83 fb 20             	cmp    ebx,0x20
c00234f9:	75 eb                	jne    c00234e6 <PCI::checkBus(unsigned char)+0xa>
c00234fb:	58                   	pop    eax
c00234fc:	5b                   	pop    ebx
c00234fd:	5e                   	pop    esi
c00234fe:	c3                   	ret    
c00234ff:	90                   	nop

c0023500 <PCI::foundDevice(PCIDeviceInfo)>:
c0023500:	55                   	push   ebp
c0023501:	57                   	push   edi
c0023502:	56                   	push   esi
c0023503:	53                   	push   ebx
c0023504:	83 ec 1c             	sub    esp,0x1c
c0023507:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002350b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023511:	0f 84 52 01 00 00    	je     c0023669 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023517:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002351b:	66 81 f9 06 04       	cmp    cx,0x406
c0023520:	75 2c                	jne    c002354e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023522:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023527:	50                   	push   eax
c0023528:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002352d:	50                   	push   eax
c002352e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023533:	50                   	push   eax
c0023534:	56                   	push   esi
c0023535:	e8 a2 fb ff ff       	call   c00230dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002353a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002353e:	0f b6 c0             	movzx  eax,al
c0023541:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023545:	83 c4 2c             	add    esp,0x2c
c0023548:	5b                   	pop    ebx
c0023549:	5e                   	pop    esi
c002354a:	5f                   	pop    edi
c002354b:	5d                   	pop    ebp
c002354c:	eb 8e                	jmp    c00234dc <PCI::checkBus(unsigned char)>
c002354e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023552:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002355c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023560:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023564:	88 d3                	mov    bl,dl
c0023566:	85 c0                	test   eax,eax
c0023568:	74 33                	je     c002359d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002356a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002356d:	85 d2                	test   edx,edx
c002356f:	74 28                	je     c0023599 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023571:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023577:	31 ef                	xor    edi,ebp
c0023579:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002357f:	75 18                	jne    c0023599 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023581:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023585:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002358b:	75 0c                	jne    c0023599 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002358d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023593:	0f 84 d0 00 00 00    	je     c0023669 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023599:	8b 00                	mov    eax,DWORD PTR [eax]
c002359b:	eb c9                	jmp    c0023566 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002359d:	66 81 f9 01 06       	cmp    cx,0x601
c00235a2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00235a6:	75 19                	jne    c00235c1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00235a8:	83 ec 0c             	sub    esp,0xc
c00235ab:	68 64 01 00 00       	push   0x164
c00235b0:	e8 4d c3 fe ff       	call   c000f902 <malloc>
c00235b5:	89 c5                	mov    ebp,eax
c00235b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00235ba:	e8 cd 0f 00 00       	call   c002458c <SATABus::SATABus()>
c00235bf:	eb 1e                	jmp    c00235df <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00235c1:	66 81 f9 01 01       	cmp    cx,0x101
c00235c6:	75 60                	jne    c0023628 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00235c8:	83 ec 0c             	sub    esp,0xc
c00235cb:	68 70 02 00 00       	push   0x270
c00235d0:	e8 2d c3 fe ff       	call   c000f902 <malloc>
c00235d5:	89 c5                	mov    ebp,eax
c00235d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00235da:	e8 0f 03 00 00       	call   c00238ee <IDE::IDE()>
c00235df:	58                   	pop    eax
c00235e0:	5a                   	pop    edx
c00235e1:	55                   	push   ebp
c00235e2:	56                   	push   esi
c00235e3:	e8 4c 07 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c00235e8:	83 ec 1c             	sub    esp,0x1c
c00235eb:	b9 09 00 00 00       	mov    ecx,0x9
c00235f0:	fc                   	cld    
c00235f1:	89 e7                	mov    edi,esp
c00235f3:	89 de                	mov    esi,ebx
c00235f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235f7:	55                   	push   ebp
c00235f8:	e8 49 06 ff ff       	call   c0013c46 <Device::preOpenPCI(PCIDeviceInfo)>
c00235fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023600:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023604:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002360c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023614:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002361c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002361f:	83 c4 4c             	add    esp,0x4c
c0023622:	5b                   	pop    ebx
c0023623:	5e                   	pop    esi
c0023624:	5f                   	pop    edi
c0023625:	5d                   	pop    ebp
c0023626:	ff e0                	jmp    eax
c0023628:	83 ec 0c             	sub    esp,0xc
c002362b:	68 58 01 00 00       	push   0x158
c0023630:	e8 cd c2 fe ff       	call   c000f902 <malloc>
c0023635:	89 c5                	mov    ebp,eax
c0023637:	58                   	pop    eax
c0023638:	5a                   	pop    edx
c0023639:	68 d8 d6 02 c0       	push   0xc002d6d8
c002363e:	55                   	push   ebp
c002363f:	e8 fa 09 ff ff       	call   c001403e <DriverlessDevice::DriverlessDevice(char const*)>
c0023644:	59                   	pop    ecx
c0023645:	5f                   	pop    edi
c0023646:	55                   	push   ebp
c0023647:	56                   	push   esi
c0023648:	e8 e7 06 ff ff       	call   c0013d34 <Device::addChild(Device*)>
c002364d:	b9 09 00 00 00       	mov    ecx,0x9
c0023652:	fc                   	cld    
c0023653:	89 df                	mov    edi,ebx
c0023655:	89 de                	mov    esi,ebx
c0023657:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023659:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002365d:	83 c4 2c             	add    esp,0x2c
c0023660:	5b                   	pop    ebx
c0023661:	5e                   	pop    esi
c0023662:	5f                   	pop    edi
c0023663:	5d                   	pop    ebp
c0023664:	e9 dd 05 ff ff       	jmp    c0013c46 <Device::preOpenPCI(PCIDeviceInfo)>
c0023669:	83 c4 1c             	add    esp,0x1c
c002366c:	5b                   	pop    ebx
c002366d:	5e                   	pop    esi
c002366e:	5f                   	pop    edi
c002366f:	5d                   	pop    ebp
c0023670:	c3                   	ret    
c0023671:	90                   	nop

c0023672 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023672:	55                   	push   ebp
c0023673:	57                   	push   edi
c0023674:	56                   	push   esi
c0023675:	53                   	push   ebx
c0023676:	83 ec 68             	sub    esp,0x68
c0023679:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002367d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023688:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002368f:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023694:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023698:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002369f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00236a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00236a8:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00236ad:	6a 0c                	push   0xc
c00236af:	57                   	push   edi
c00236b0:	53                   	push   ebx
c00236b1:	56                   	push   esi
c00236b2:	55                   	push   ebp
c00236b3:	e8 76 f8 ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236b8:	83 c4 20             	add    esp,0x20
c00236bb:	57                   	push   edi
c00236bc:	53                   	push   ebx
c00236bd:	56                   	push   esi
c00236be:	55                   	push   ebp
c00236bf:	e8 5e f9 ff ff       	call   c0023022 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00236c4:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00236c9:	57                   	push   edi
c00236ca:	53                   	push   ebx
c00236cb:	56                   	push   esi
c00236cc:	55                   	push   ebp
c00236cd:	e8 e6 f9 ff ff       	call   c00230b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00236d2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00236d6:	83 c4 14             	add    esp,0x14
c00236d9:	6a 3c                	push   0x3c
c00236db:	57                   	push   edi
c00236dc:	53                   	push   ebx
c00236dd:	56                   	push   esi
c00236de:	55                   	push   ebp
c00236df:	e8 4a f8 ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236e4:	0f b6 c4             	movzx  eax,ah
c00236e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00236eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00236ef:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00236f3:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00236f8:	83 c4 20             	add    esp,0x20
c00236fb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023701:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023708:	74 7c                	je     c0023786 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002370a:	31 c0                	xor    eax,eax
c002370c:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0023712:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023718:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002371e:	7e 66                	jle    c0023786 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023720:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023723:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002372a:	39 cb                	cmp    ebx,ecx
c002372c:	75 55                	jne    c0023783 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002372e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023735:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023739:	75 48                	jne    c0023783 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002373b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002373f:	83 ec 0c             	sub    esp,0xc
c0023742:	68 f2 d6 02 c0       	push   0xc002d6f2
c0023747:	e8 af f1 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002374c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023750:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0023756:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002375a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023760:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023768:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c002376c:	52                   	push   edx
c002376d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023771:	53                   	push   ebx
c0023772:	68 17 d7 02 c0       	push   0xc002d717
c0023777:	e8 7f f1 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002377c:	83 c4 20             	add    esp,0x20
c002377f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023783:	40                   	inc    eax
c0023784:	eb 86                	jmp    c002370c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023786:	31 d2                	xor    edx,edx
c0023788:	83 ec 0c             	sub    esp,0xc
c002378b:	57                   	push   edi
c002378c:	53                   	push   ebx
c002378d:	56                   	push   esi
c002378e:	52                   	push   edx
c002378f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023793:	55                   	push   ebp
c0023794:	e8 6b f9 ff ff       	call   c0023104 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023799:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002379d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00237a1:	42                   	inc    edx
c00237a2:	83 c4 20             	add    esp,0x20
c00237a5:	83 fa 06             	cmp    edx,0x6
c00237a8:	75 de                	jne    c0023788 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00237aa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00237af:	83 ec 0c             	sub    esp,0xc
c00237b2:	86 e0                	xchg   al,ah
c00237b4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00237b9:	6a 02                	push   0x2
c00237bb:	57                   	push   edi
c00237bc:	53                   	push   ebx
c00237bd:	56                   	push   esi
c00237be:	55                   	push   ebp
c00237bf:	e8 6a f7 ff ff       	call   c0022f2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00237c4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00237c9:	83 c4 20             	add    esp,0x20
c00237cc:	57                   	push   edi
c00237cd:	53                   	push   ebx
c00237ce:	56                   	push   esi
c00237cf:	55                   	push   ebp
c00237d0:	e8 97 f8 ff ff       	call   c002306c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00237d5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00237d9:	57                   	push   edi
c00237da:	53                   	push   ebx
c00237db:	56                   	push   esi
c00237dc:	55                   	push   ebp
c00237dd:	e8 f4 f7 ff ff       	call   c0022fd6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237e2:	b9 09 00 00 00       	mov    ecx,0x9
c00237e7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00237ec:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00237f0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00237f4:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00237f8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00237fc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023800:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023804:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023808:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	fc                   	cld    
c0023810:	89 e7                	mov    edi,esp
c0023812:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023816:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023818:	55                   	push   ebp
c0023819:	e8 e2 fc ff ff       	call   c0023500 <PCI::foundDevice(PCIDeviceInfo)>
c002381e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023824:	5b                   	pop    ebx
c0023825:	5e                   	pop    esi
c0023826:	5f                   	pop    edi
c0023827:	5d                   	pop    ebp
c0023828:	c3                   	ret    
c0023829:	90                   	nop

c002382a <PCI::checkDevice(unsigned char, unsigned char)>:
c002382a:	55                   	push   ebp
c002382b:	57                   	push   edi
c002382c:	56                   	push   esi
c002382d:	53                   	push   ebx
c002382e:	83 ec 0c             	sub    esp,0xc
c0023831:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023835:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002383a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002383f:	6a 00                	push   0x0
c0023841:	56                   	push   esi
c0023842:	57                   	push   edi
c0023843:	55                   	push   ebp
c0023844:	e8 8d f7 ff ff       	call   c0022fd6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023849:	6a 00                	push   0x0
c002384b:	56                   	push   esi
c002384c:	57                   	push   edi
c002384d:	55                   	push   ebp
c002384e:	e8 1f fe ff ff       	call   c0023672 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023853:	83 c4 20             	add    esp,0x20
c0023856:	6a 00                	push   0x0
c0023858:	56                   	push   esi
c0023859:	57                   	push   edi
c002385a:	55                   	push   ebp
c002385b:	e8 9a f7 ff ff       	call   c0022ffa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023860:	83 c4 10             	add    esp,0x10
c0023863:	84 c0                	test   al,al
c0023865:	79 27                	jns    c002388e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023867:	bb 01 00 00 00       	mov    ebx,0x1
c002386c:	53                   	push   ebx
c002386d:	56                   	push   esi
c002386e:	57                   	push   edi
c002386f:	55                   	push   ebp
c0023870:	e8 61 f7 ff ff       	call   c0022fd6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023875:	83 c4 10             	add    esp,0x10
c0023878:	66 40                	inc    ax
c002387a:	74 0c                	je     c0023888 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002387c:	53                   	push   ebx
c002387d:	56                   	push   esi
c002387e:	57                   	push   edi
c002387f:	55                   	push   ebp
c0023880:	e8 ed fd ff ff       	call   c0023672 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023885:	83 c4 10             	add    esp,0x10
c0023888:	43                   	inc    ebx
c0023889:	83 fb 08             	cmp    ebx,0x8
c002388c:	75 de                	jne    c002386c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002388e:	83 c4 0c             	add    esp,0xc
c0023891:	5b                   	pop    ebx
c0023892:	5e                   	pop    esi
c0023893:	5f                   	pop    edi
c0023894:	5d                   	pop    ebp
c0023895:	c3                   	ret    

c0023896 <PCI::detect()>:
c0023896:	56                   	push   esi
c0023897:	53                   	push   ebx
c0023898:	53                   	push   ebx
c0023899:	31 db                	xor    ebx,ebx
c002389b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002389f:	6a 00                	push   0x0
c00238a1:	6a 00                	push   0x0
c00238a3:	6a 00                	push   0x0
c00238a5:	56                   	push   esi
c00238a6:	e8 4f f7 ff ff       	call   c0022ffa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00238ab:	83 c4 10             	add    esp,0x10
c00238ae:	a8 80                	test   al,0x80
c00238b0:	75 21                	jne    c00238d3 <PCI::detect()+0x3d>
c00238b2:	51                   	push   ecx
c00238b3:	51                   	push   ecx
c00238b4:	6a 00                	push   0x0
c00238b6:	56                   	push   esi
c00238b7:	e8 20 fc ff ff       	call   c00234dc <PCI::checkBus(unsigned char)>
c00238bc:	83 c4 10             	add    esp,0x10
c00238bf:	eb 24                	jmp    c00238e5 <PCI::detect()+0x4f>
c00238c1:	52                   	push   edx
c00238c2:	52                   	push   edx
c00238c3:	53                   	push   ebx
c00238c4:	43                   	inc    ebx
c00238c5:	56                   	push   esi
c00238c6:	e8 11 fc ff ff       	call   c00234dc <PCI::checkBus(unsigned char)>
c00238cb:	83 c4 10             	add    esp,0x10
c00238ce:	83 fb 08             	cmp    ebx,0x8
c00238d1:	74 12                	je     c00238e5 <PCI::detect()+0x4f>
c00238d3:	53                   	push   ebx
c00238d4:	6a 00                	push   0x0
c00238d6:	6a 00                	push   0x0
c00238d8:	56                   	push   esi
c00238d9:	e8 f8 f6 ff ff       	call   c0022fd6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238de:	83 c4 10             	add    esp,0x10
c00238e1:	66 40                	inc    ax
c00238e3:	74 dc                	je     c00238c1 <PCI::detect()+0x2b>
c00238e5:	58                   	pop    eax
c00238e6:	5b                   	pop    ebx
c00238e7:	5e                   	pop    esi
c00238e8:	c3                   	ret    
c00238e9:	90                   	nop

c00238ea <IDE::close(int, int, void*)>:
c00238ea:	83 c8 ff             	or     eax,0xffffffff
c00238ed:	c3                   	ret    

c00238ee <IDE::IDE()>:
c00238ee:	83 ec 0c             	sub    esp,0xc
c00238f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238f5:	83 ec 08             	sub    esp,0x8
c00238f8:	68 60 d7 02 c0       	push   0xc002d760
c00238fd:	50                   	push   eax
c00238fe:	e8 df 07 ff ff       	call   c00140e2 <HardDiskController::HardDiskController(char const*)>
c0023903:	83 c4 10             	add    esp,0x10
c0023906:	ba b0 d9 02 c0       	mov    edx,0xc002d9b0
c002390b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002390f:	89 10                	mov    DWORD PTR [eax],edx
c0023911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023915:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002391c:	90                   	nop
c002391d:	83 c4 0c             	add    esp,0xc
c0023920:	c3                   	ret    
c0023921:	90                   	nop

c0023922 <IDE::prepareInterrupt(unsigned char)>:
c0023922:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002392b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023933:	c3                   	ret    

c0023934 <selectDrive(unsigned char, unsigned char)>:
c0023934:	c3                   	ret    
c0023935:	90                   	nop

c0023936 <IDE::getBase(unsigned char)>:
c0023936:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002393b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002393f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023947:	c3                   	ret    

c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023948:	55                   	push   ebp
c0023949:	57                   	push   edi
c002394a:	56                   	push   esi
c002394b:	53                   	push   ebx
c002394c:	83 ec 1c             	sub    esp,0x1c
c002394f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023957:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002395a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002395e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023962:	80 f9 03             	cmp    cl,0x3
c0023965:	77 51                	ja     c00239b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023967:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002396b:	0f b6 f2             	movzx  esi,dl
c002396e:	0f b6 db             	movzx  ebx,bl
c0023971:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023974:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023978:	83 ca 80             	or     edx,0xffffff80
c002397b:	0f b6 d2             	movzx  edx,dl
c002397e:	52                   	push   edx
c002397f:	6a 0c                	push   0xc
c0023981:	56                   	push   esi
c0023982:	57                   	push   edi
c0023983:	e8 c0 ff ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023988:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002398d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023991:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023995:	ee                   	out    dx,al
c0023996:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002399b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002399f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00239a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00239a7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00239af:	83 c4 2c             	add    esp,0x2c
c00239b2:	5b                   	pop    ebx
c00239b3:	5e                   	pop    esi
c00239b4:	5f                   	pop    edi
c00239b5:	5d                   	pop    ebp
c00239b6:	eb 90                	jmp    c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b8:	80 fb 07             	cmp    bl,0x7
c00239bb:	77 12                	ja     c00239cf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00239bd:	0f b6 d2             	movzx  edx,dl
c00239c0:	0f b6 db             	movzx  ebx,bl
c00239c3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00239cb:	89 da                	mov    edx,ebx
c00239cd:	eb 2f                	jmp    c00239fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00239cf:	80 fb 0d             	cmp    bl,0xd
c00239d2:	77 13                	ja     c00239e7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00239d4:	0f b6 d2             	movzx  edx,dl
c00239d7:	0f b6 db             	movzx  ebx,bl
c00239da:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00239e1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00239e5:	eb 17                	jmp    c00239fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00239e7:	80 fb 15             	cmp    bl,0x15
c00239ea:	77 13                	ja     c00239ff <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00239ec:	0f b6 d2             	movzx  edx,dl
c00239ef:	0f b6 db             	movzx  ebx,bl
c00239f2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00239fa:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00239fe:	ee                   	out    dx,al
c00239ff:	83 c4 1c             	add    esp,0x1c
c0023a02:	5b                   	pop    ebx
c0023a03:	5e                   	pop    esi
c0023a04:	5f                   	pop    edi
c0023a05:	5d                   	pop    ebp
c0023a06:	c3                   	ret    
c0023a07:	90                   	nop

c0023a08 <IDE::read(unsigned char, unsigned char)>:
c0023a08:	55                   	push   ebp
c0023a09:	57                   	push   edi
c0023a0a:	56                   	push   esi
c0023a0b:	53                   	push   ebx
c0023a0c:	83 ec 1c             	sub    esp,0x1c
c0023a0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023a13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a17:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023a1a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a1e:	3c 03                	cmp    al,0x3
c0023a20:	77 43                	ja     c0023a65 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023a22:	0f b6 f2             	movzx  esi,dl
c0023a25:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023a28:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023a2c:	83 c8 80             	or     eax,0xffffff80
c0023a2f:	0f b6 c0             	movzx  eax,al
c0023a32:	50                   	push   eax
c0023a33:	6a 0c                	push   0xc
c0023a35:	56                   	push   esi
c0023a36:	57                   	push   edi
c0023a37:	e8 0c ff ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a3c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023a41:	0f b6 c3             	movzx  eax,bl
c0023a44:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023a48:	ec                   	in     al,dx
c0023a49:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a4d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023a52:	52                   	push   edx
c0023a53:	6a 0c                	push   0xc
c0023a55:	56                   	push   esi
c0023a56:	57                   	push   edi
c0023a57:	e8 ec fe ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a5c:	83 c4 20             	add    esp,0x20
c0023a5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023a63:	eb 49                	jmp    c0023aae <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a65:	80 fb 07             	cmp    bl,0x7
c0023a68:	77 12                	ja     c0023a7c <IDE::read(unsigned char, unsigned char)+0x74>
c0023a6a:	0f b6 d2             	movzx  edx,dl
c0023a6d:	0f b6 c3             	movzx  eax,bl
c0023a70:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023a78:	89 c2                	mov    edx,eax
c0023a7a:	eb 31                	jmp    c0023aad <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a7c:	80 fb 0d             	cmp    bl,0xd
c0023a7f:	77 13                	ja     c0023a94 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023a81:	0f b6 d2             	movzx  edx,dl
c0023a84:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023a8b:	0f b6 d3             	movzx  edx,bl
c0023a8e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023a92:	eb 19                	jmp    c0023aad <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a94:	31 c0                	xor    eax,eax
c0023a96:	80 fb 15             	cmp    bl,0x15
c0023a99:	77 13                	ja     c0023aae <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a9b:	0f b6 d2             	movzx  edx,dl
c0023a9e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023aa6:	0f b6 d3             	movzx  edx,bl
c0023aa9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023aad:	ec                   	in     al,dx
c0023aae:	83 c4 1c             	add    esp,0x1c
c0023ab1:	5b                   	pop    ebx
c0023ab2:	5e                   	pop    esi
c0023ab3:	5f                   	pop    edi
c0023ab4:	5d                   	pop    ebp
c0023ab5:	c3                   	ret    

c0023ab6 <IDE::waitInterrupt(unsigned char)>:
c0023ab6:	55                   	push   ebp
c0023ab7:	57                   	push   edi
c0023ab8:	56                   	push   esi
c0023ab9:	53                   	push   ebx
c0023aba:	31 db                	xor    ebx,ebx
c0023abc:	83 ec 0c             	sub    esp,0xc
c0023abf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023ac3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023ac8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023ad0:	89 e8                	mov    eax,ebp
c0023ad2:	84 c0                	test   al,al
c0023ad4:	75 34                	jne    c0023b0a <IDE::waitInterrupt(unsigned char)+0x54>
c0023ad6:	52                   	push   edx
c0023ad7:	6a 0c                	push   0xc
c0023ad9:	56                   	push   esi
c0023ada:	57                   	push   edi
c0023adb:	e8 28 ff ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023ae0:	83 c4 10             	add    esp,0x10
c0023ae3:	a8 01                	test   al,0x1
c0023ae5:	75 2b                	jne    c0023b12 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ae7:	f6 c3 04             	test   bl,0x4
c0023aea:	75 16                	jne    c0023b02 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023aec:	83 fb 32             	cmp    ebx,0x32
c0023aef:	7e 11                	jle    c0023b02 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023af1:	50                   	push   eax
c0023af2:	50                   	push   eax
c0023af3:	6a 00                	push   0x0
c0023af5:	68 80 96 98 00       	push   0x989680
c0023afa:	e8 6c a9 ff ff       	call   c001e46b <nanoSleep(unsigned long long)>
c0023aff:	83 c4 10             	add    esp,0x10
c0023b02:	83 fb 3c             	cmp    ebx,0x3c
c0023b05:	74 0b                	je     c0023b12 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b07:	43                   	inc    ebx
c0023b08:	eb be                	jmp    c0023ac8 <IDE::waitInterrupt(unsigned char)+0x12>
c0023b0a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023b12:	83 c4 0c             	add    esp,0xc
c0023b15:	89 e8                	mov    eax,ebp
c0023b17:	5b                   	pop    ebx
c0023b18:	5e                   	pop    esi
c0023b19:	5f                   	pop    edi
c0023b1a:	5d                   	pop    ebp
c0023b1b:	c3                   	ret    

c0023b1c <ideChannel0IRQHandler(regs*, void*)>:
c0023b1c:	83 ec 10             	sub    esp,0x10
c0023b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b23:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023b2a:	6a 07                	push   0x7
c0023b2c:	6a 00                	push   0x0
c0023b2e:	50                   	push   eax
c0023b2f:	e8 d4 fe ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023b34:	83 c4 1c             	add    esp,0x1c
c0023b37:	c3                   	ret    

c0023b38 <ideChannel1IRQHandler(regs*, void*)>:
c0023b38:	83 ec 10             	sub    esp,0x10
c0023b3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b3f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023b46:	6a 07                	push   0x7
c0023b48:	6a 01                	push   0x1
c0023b4a:	50                   	push   eax
c0023b4b:	e8 b8 fe ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023b50:	83 c4 1c             	add    esp,0x1c
c0023b53:	c3                   	ret    

c0023b54 <IDE::enableIRQs(unsigned char, bool)>:
c0023b54:	57                   	push   edi
c0023b55:	56                   	push   esi
c0023b56:	be 04 00 00 00       	mov    esi,0x4
c0023b5b:	53                   	push   ebx
c0023b5c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023b65:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023b6a:	0f 94 c0             	sete   al
c0023b6d:	d1 e0                	shl    eax,1
c0023b6f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023b76:	0f b6 c0             	movzx  eax,al
c0023b79:	50                   	push   eax
c0023b7a:	6a 0c                	push   0xc
c0023b7c:	57                   	push   edi
c0023b7d:	53                   	push   ebx
c0023b7e:	e8 c5 fd ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b83:	83 c4 10             	add    esp,0x10
c0023b86:	50                   	push   eax
c0023b87:	6a 0c                	push   0xc
c0023b89:	57                   	push   edi
c0023b8a:	53                   	push   ebx
c0023b8b:	e8 78 fe ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023b90:	83 c4 10             	add    esp,0x10
c0023b93:	4e                   	dec    esi
c0023b94:	75 f0                	jne    c0023b86 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023b96:	5b                   	pop    ebx
c0023b97:	5e                   	pop    esi
c0023b98:	5f                   	pop    edi
c0023b99:	c3                   	ret    

c0023b9a <IDE::open(int, int, void*)>:
c0023b9a:	55                   	push   ebp
c0023b9b:	57                   	push   edi
c0023b9c:	56                   	push   esi
c0023b9d:	53                   	push   ebx
c0023b9e:	83 ec 1c             	sub    esp,0x1c
c0023ba1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023ba5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023bae:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023bb7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023bbe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023bc5:	0f 85 b0 02 00 00    	jne    c0023e7b <IDE::open(int, int, void*)+0x2e1>
c0023bcb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023bd1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023bd5:	83 e0 7f             	and    eax,0x7f
c0023bd8:	3c 05                	cmp    al,0x5
c0023bda:	74 04                	je     c0023be0 <IDE::open(int, int, void*)+0x46>
c0023bdc:	3c 0f                	cmp    al,0xf
c0023bde:	75 32                	jne    c0023c12 <IDE::open(int, int, void*)+0x78>
c0023be0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023be6:	83 e0 fc             	and    eax,0xfffffffc
c0023be9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023bf0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023bf6:	83 e0 fc             	and    eax,0xfffffffc
c0023bf9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023c00:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023c06:	83 e0 fc             	and    eax,0xfffffffc
c0023c09:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c10:	eb 14                	jmp    c0023c26 <IDE::open(int, int, void*)+0x8c>
c0023c12:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c1c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c26:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023c2d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023c34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c38:	89 c6                	mov    esi,eax
c0023c3a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c3f:	c1 e6 10             	shl    esi,0x10
c0023c42:	89 e8                	mov    eax,ebp
c0023c44:	89 fa                	mov    edx,edi
c0023c46:	c1 e0 0b             	shl    eax,0xb
c0023c49:	09 f0                	or     eax,esi
c0023c4b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023c52:	c1 e6 08             	shl    esi,0x8
c0023c55:	09 c6                	or     esi,eax
c0023c57:	89 f0                	mov    eax,esi
c0023c59:	0d 08 00 00 80       	or     eax,0x80000008
c0023c5e:	ef                   	out    dx,eax
c0023c5f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023c64:	89 ca                	mov    edx,ecx
c0023c66:	ed                   	in     eax,dx
c0023c67:	c1 e8 10             	shr    eax,0x10
c0023c6a:	3d ff ff 00 00       	cmp    eax,0xffff
c0023c6f:	0f 84 f5 00 00 00    	je     c0023d6a <IDE::open(int, int, void*)+0x1d0>
c0023c75:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023c7b:	89 fa                	mov    edx,edi
c0023c7d:	89 f0                	mov    eax,esi
c0023c7f:	ef                   	out    dx,eax
c0023c80:	b0 fe                	mov    al,0xfe
c0023c82:	89 ca                	mov    edx,ecx
c0023c84:	ee                   	out    dx,al
c0023c85:	89 f0                	mov    eax,esi
c0023c87:	89 fa                	mov    edx,edi
c0023c89:	ef                   	out    dx,eax
c0023c8a:	89 ca                	mov    edx,ecx
c0023c8c:	ed                   	in     eax,dx
c0023c8d:	3c fe                	cmp    al,0xfe
c0023c8f:	0f 85 a9 00 00 00    	jne    c0023d3e <IDE::open(int, int, void*)+0x1a4>
c0023c95:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0023c9b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023ca2:	74 33                	je     c0023cd7 <IDE::open(int, int, void*)+0x13d>
c0023ca4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023caa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023cae:	40                   	inc    eax
c0023caf:	83 ec 0c             	sub    esp,0xc
c0023cb2:	0f b6 c0             	movzx  eax,al
c0023cb5:	50                   	push   eax
c0023cb6:	55                   	push   ebp
c0023cb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023cbb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023cc1:	51                   	push   ecx
c0023cc2:	e8 1d 41 ff ff       	call   c0017de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023cc7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023ccc:	83 c4 1c             	add    esp,0x1c
c0023ccf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023cd5:	eb 0a                	jmp    c0023ce1 <IDE::open(int, int, void*)+0x147>
c0023cd7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023ce1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023ce8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023cef:	c1 e1 10             	shl    ecx,0x10
c0023cf2:	c1 e0 08             	shl    eax,0x8
c0023cf5:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023cfa:	09 c1                	or     ecx,eax
c0023cfc:	89 fa                	mov    edx,edi
c0023cfe:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023d05:	c1 e0 0b             	shl    eax,0xb
c0023d08:	09 c1                	or     ecx,eax
c0023d0a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023d10:	89 c8                	mov    eax,ecx
c0023d12:	ef                   	out    dx,eax
c0023d13:	be fc 0c 00 00       	mov    esi,0xcfc
c0023d18:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023d1e:	89 f2                	mov    edx,esi
c0023d20:	ee                   	out    dx,al
c0023d21:	89 c8                	mov    eax,ecx
c0023d23:	89 fa                	mov    edx,edi
c0023d25:	ef                   	out    dx,eax
c0023d26:	89 f2                	mov    edx,esi
c0023d28:	ed                   	in     eax,dx
c0023d29:	0f b6 c0             	movzx  eax,al
c0023d2c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023d32:	74 46                	je     c0023d7a <IDE::open(int, int, void*)+0x1e0>
c0023d34:	83 ec 0c             	sub    esp,0xc
c0023d37:	68 78 d7 02 c0       	push   0xc002d778
c0023d3c:	eb 34                	jmp    c0023d72 <IDE::open(int, int, void*)+0x1d8>
c0023d3e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023d47:	75 17                	jne    c0023d60 <IDE::open(int, int, void*)+0x1c6>
c0023d49:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023d4e:	74 07                	je     c0023d57 <IDE::open(int, int, void*)+0x1bd>
c0023d50:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023d55:	75 09                	jne    c0023d60 <IDE::open(int, int, void*)+0x1c6>
c0023d57:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d5e:	eb 1a                	jmp    c0023d7a <IDE::open(int, int, void*)+0x1e0>
c0023d60:	83 ec 0c             	sub    esp,0xc
c0023d63:	68 80 d7 02 c0       	push   0xc002d780
c0023d68:	eb 08                	jmp    c0023d72 <IDE::open(int, int, void*)+0x1d8>
c0023d6a:	83 ec 0c             	sub    esp,0xc
c0023d6d:	68 b1 d7 02 c0       	push   0xc002d7b1
c0023d72:	e8 38 66 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023d81:	79 1a                	jns    c0023d9d <IDE::open(int, int, void*)+0x203>
c0023d83:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023d89:	83 e0 fc             	and    eax,0xfffffffc
c0023d8c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023d93:	83 c0 08             	add    eax,0x8
c0023d96:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023d9d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023da3:	89 c2                	mov    edx,eax
c0023da5:	83 e2 0f             	and    edx,0xf
c0023da8:	66 83 fa 08          	cmp    dx,0x8
c0023dac:	75 0a                	jne    c0023db8 <IDE::open(int, int, void*)+0x21e>
c0023dae:	83 e8 02             	sub    eax,0x2
c0023db1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023db8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023dbe:	89 c2                	mov    edx,eax
c0023dc0:	83 e2 0f             	and    edx,0xf
c0023dc3:	66 83 fa 08          	cmp    dx,0x8
c0023dc7:	75 0a                	jne    c0023dd3 <IDE::open(int, int, void*)+0x239>
c0023dc9:	83 e8 02             	sub    eax,0x2
c0023dcc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023dd3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023dda:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023de1:	89 d0                	mov    eax,edx
c0023de3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023de6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dea:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023dee:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023df1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023df6:	0f b6 c9             	movzx  ecx,cl
c0023df9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023e00:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e03:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e07:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023e0b:	8d 50 02             	lea    edx,[eax+0x2]
c0023e0e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e13:	0f b6 d2             	movzx  edx,dl
c0023e16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023e1c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e1f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e23:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023e27:	8d 48 03             	lea    ecx,[eax+0x3]
c0023e2a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e2f:	0f b6 c9             	movzx  ecx,cl
c0023e32:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023e38:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e3b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e3f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023e43:	8d 50 04             	lea    edx,[eax+0x4]
c0023e46:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023e4c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e51:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023e58:	66 85 f6             	test   si,si
c0023e5b:	74 6b                	je     c0023ec8 <IDE::open(int, int, void*)+0x32e>
c0023e5d:	0f b6 d2             	movzx  edx,dl
c0023e60:	83 c0 05             	add    eax,0x5
c0023e63:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e66:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e6a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023e6e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023e74:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e79:	eb 4d                	jmp    c0023ec8 <IDE::open(int, int, void*)+0x32e>
c0023e7b:	83 ec 0c             	sub    esp,0xc
c0023e7e:	68 db d7 02 c0       	push   0xc002d7db
c0023e83:	e8 73 ea fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0023e88:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023e8e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e95:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023e9c:	83 c4 10             	add    esp,0x10
c0023e9f:	66 05 06 02          	add    ax,0x206
c0023ea3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023eaa:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023eb1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023eb8:	66 05 06 02          	add    ax,0x206
c0023ebc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023ec3:	e9 d5 fe ff ff       	jmp    c0023d9d <IDE::open(int, int, void*)+0x203>
c0023ec8:	52                   	push   edx
c0023ec9:	52                   	push   edx
c0023eca:	6a 00                	push   0x0
c0023ecc:	53                   	push   ebx
c0023ecd:	e8 50 fa ff ff       	call   c0023922 <IDE::prepareInterrupt(unsigned char)>
c0023ed2:	59                   	pop    ecx
c0023ed3:	5e                   	pop    esi
c0023ed4:	6a 01                	push   0x1
c0023ed6:	53                   	push   ebx
c0023ed7:	e8 46 fa ff ff       	call   c0023922 <IDE::prepareInterrupt(unsigned char)>
c0023edc:	83 c4 0c             	add    esp,0xc
c0023edf:	6a 00                	push   0x0
c0023ee1:	6a 00                	push   0x0
c0023ee3:	53                   	push   ebx
c0023ee4:	e8 6b fc ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0023ee9:	83 c4 0c             	add    esp,0xc
c0023eec:	6a 00                	push   0x0
c0023eee:	6a 01                	push   0x1
c0023ef0:	53                   	push   ebx
c0023ef1:	e8 5e fc ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0023ef6:	83 c4 10             	add    esp,0x10
c0023ef9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023f00:	74 40                	je     c0023f42 <IDE::open(int, int, void*)+0x3a8>
c0023f02:	83 ec 0c             	sub    esp,0xc
c0023f05:	68 ec d7 02 c0       	push   0xc002d7ec
c0023f0a:	e8 ec e9 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0023f0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f12:	6a 01                	push   0x1
c0023f14:	68 1c 3b 02 c0       	push   0xc0023b1c
c0023f19:	6a 0e                	push   0xe
c0023f1b:	53                   	push   ebx
c0023f1c:	e8 8b fd fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f21:	83 c4 14             	add    esp,0x14
c0023f24:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023f2a:	53                   	push   ebx
c0023f2b:	6a 01                	push   0x1
c0023f2d:	68 38 3b 02 c0       	push   0xc0023b38
c0023f32:	6a 0f                	push   0xf
c0023f34:	53                   	push   ebx
c0023f35:	e8 72 fd fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f3a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023f40:	eb 4a                	jmp    c0023f8c <IDE::open(int, int, void*)+0x3f2>
c0023f42:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023f4c:	50                   	push   eax
c0023f4d:	6a 0f                	push   0xf
c0023f4f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f55:	68 08 d8 02 c0       	push   0xc002d808
c0023f5a:	e8 9c e9 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0023f5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f62:	6a 00                	push   0x0
c0023f64:	68 1c 3b 02 c0       	push   0xc0023b1c
c0023f69:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f6f:	53                   	push   ebx
c0023f70:	e8 37 fd fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f75:	83 c4 14             	add    esp,0x14
c0023f78:	53                   	push   ebx
c0023f79:	6a 00                	push   0x0
c0023f7b:	68 38 3b 02 c0       	push   0xc0023b38
c0023f80:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023f86:	53                   	push   ebx
c0023f87:	e8 20 fd fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f8e:	83 c4 20             	add    esp,0x20
c0023f91:	83 ec 0c             	sub    esp,0xc
c0023f94:	53                   	push   ebx
c0023f95:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023f98:	83 c4 0c             	add    esp,0xc
c0023f9b:	6a 07                	push   0x7
c0023f9d:	6a 00                	push   0x0
c0023f9f:	53                   	push   ebx
c0023fa0:	e8 63 fa ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023fa5:	83 c4 0c             	add    esp,0xc
c0023fa8:	6a 07                	push   0x7
c0023faa:	6a 01                	push   0x1
c0023fac:	53                   	push   ebx
c0023fad:	e8 56 fa ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0023fb2:	83 c4 0c             	add    esp,0xc
c0023fb5:	6a 01                	push   0x1
c0023fb7:	6a 00                	push   0x0
c0023fb9:	53                   	push   ebx
c0023fba:	e8 95 fb ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0023fbf:	83 c4 0c             	add    esp,0xc
c0023fc2:	6a 01                	push   0x1
c0023fc4:	6a 01                	push   0x1
c0023fc6:	53                   	push   ebx
c0023fc7:	e8 88 fb ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0023fcc:	83 c4 2c             	add    esp,0x2c
c0023fcf:	31 c0                	xor    eax,eax
c0023fd1:	5b                   	pop    ebx
c0023fd2:	5e                   	pop    esi
c0023fd3:	5f                   	pop    edi
c0023fd4:	5d                   	pop    ebp
c0023fd5:	c3                   	ret    

c0023fd6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023fd6:	55                   	push   ebp
c0023fd7:	57                   	push   edi
c0023fd8:	56                   	push   esi
c0023fd9:	53                   	push   ebx
c0023fda:	83 ec 1c             	sub    esp,0x1c
c0023fdd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023fe1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023fe5:	8d 50 f8             	lea    edx,[eax-0x8]
c0023fe8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023fec:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023ff0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023ff4:	80 fa 03             	cmp    dl,0x3
c0023ff7:	77 5d                	ja     c0024056 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023ff9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ffd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024001:	0f b6 db             	movzx  ebx,bl
c0024004:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024007:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002400b:	83 ca 80             	or     edx,0xffffff80
c002400e:	0f b6 d2             	movzx  edx,dl
c0024011:	52                   	push   edx
c0024012:	6a 0c                	push   0xc
c0024014:	53                   	push   ebx
c0024015:	56                   	push   esi
c0024016:	e8 2d f9 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0024020:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024024:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024028:	0f b6 c0             	movzx  eax,al
c002402b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002402f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024031:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024036:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002403a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002403e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024042:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002404a:	83 c4 2c             	add    esp,0x2c
c002404d:	5b                   	pop    ebx
c002404e:	5e                   	pop    esi
c002404f:	5f                   	pop    edi
c0024050:	5d                   	pop    ebp
c0024051:	e9 f2 f8 ff ff       	jmp    c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024056:	3c 07                	cmp    al,0x7
c0024058:	77 10                	ja     c002406a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002405a:	0f b6 db             	movzx  ebx,bl
c002405d:	0f b6 d0             	movzx  edx,al
c0024060:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024068:	eb 2d                	jmp    c0024097 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002406a:	3c 0d                	cmp    al,0xd
c002406c:	77 13                	ja     c0024081 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002406e:	0f b6 db             	movzx  ebx,bl
c0024071:	0f b6 c0             	movzx  eax,al
c0024074:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002407b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002407f:	eb 16                	jmp    c0024097 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024081:	3c 15                	cmp    al,0x15
c0024083:	77 14                	ja     c0024099 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024085:	0f b6 db             	movzx  ebx,bl
c0024088:	0f b6 c0             	movzx  eax,al
c002408b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024093:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024097:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024099:	83 c4 1c             	add    esp,0x1c
c002409c:	5b                   	pop    ebx
c002409d:	5e                   	pop    esi
c002409e:	5f                   	pop    edi
c002409f:	5d                   	pop    ebp
c00240a0:	c3                   	ret    
c00240a1:	90                   	nop

c00240a2 <IDE::detect()>:
c00240a2:	55                   	push   ebp
c00240a3:	57                   	push   edi
c00240a4:	56                   	push   esi
c00240a5:	53                   	push   ebx
c00240a6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00240ac:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00240b3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00240ba:	0f 85 be 02 00 00    	jne    c002437e <IDE::detect()+0x2dc>
c00240c0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00240c7:	31 f6                	xor    esi,esi
c00240c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00240d1:	31 ed                	xor    ebp,ebp
c00240d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240d7:	c1 e0 06             	shl    eax,0x6
c00240da:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00240e2:	89 e8                	mov    eax,ebp
c00240e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00240e8:	c1 e0 04             	shl    eax,0x4
c00240eb:	83 c8 a0             	or     eax,0xffffffa0
c00240ee:	0f b6 c0             	movzx  eax,al
c00240f1:	50                   	push   eax
c00240f2:	6a 06                	push   0x6
c00240f4:	56                   	push   esi
c00240f5:	53                   	push   ebx
c00240f6:	e8 4d f8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240fb:	83 c4 0c             	add    esp,0xc
c00240fe:	6a 0c                	push   0xc
c0024100:	56                   	push   esi
c0024101:	53                   	push   ebx
c0024102:	e8 01 f9 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024107:	83 c4 0c             	add    esp,0xc
c002410a:	6a 0c                	push   0xc
c002410c:	56                   	push   esi
c002410d:	53                   	push   ebx
c002410e:	e8 f5 f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024113:	83 c4 0c             	add    esp,0xc
c0024116:	6a 0c                	push   0xc
c0024118:	56                   	push   esi
c0024119:	53                   	push   ebx
c002411a:	e8 e9 f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002411f:	83 c4 0c             	add    esp,0xc
c0024122:	6a 0c                	push   0xc
c0024124:	56                   	push   esi
c0024125:	53                   	push   ebx
c0024126:	e8 dd f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002412b:	68 ec 00 00 00       	push   0xec
c0024130:	6a 07                	push   0x7
c0024132:	56                   	push   esi
c0024133:	53                   	push   ebx
c0024134:	e8 0f f8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024139:	83 c4 1c             	add    esp,0x1c
c002413c:	6a 0c                	push   0xc
c002413e:	56                   	push   esi
c002413f:	53                   	push   ebx
c0024140:	e8 c3 f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024145:	83 c4 0c             	add    esp,0xc
c0024148:	6a 0c                	push   0xc
c002414a:	56                   	push   esi
c002414b:	53                   	push   ebx
c002414c:	e8 b7 f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024151:	83 c4 0c             	add    esp,0xc
c0024154:	6a 0c                	push   0xc
c0024156:	56                   	push   esi
c0024157:	53                   	push   ebx
c0024158:	e8 ab f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002415d:	83 c4 0c             	add    esp,0xc
c0024160:	6a 0c                	push   0xc
c0024162:	56                   	push   esi
c0024163:	53                   	push   ebx
c0024164:	e8 9f f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024169:	83 c4 0c             	add    esp,0xc
c002416c:	6a 0c                	push   0xc
c002416e:	56                   	push   esi
c002416f:	53                   	push   ebx
c0024170:	e8 93 f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024175:	83 c4 10             	add    esp,0x10
c0024178:	84 c0                	test   al,al
c002417a:	0f 84 8b 01 00 00    	je     c002430b <IDE::detect()+0x269>
c0024180:	31 ff                	xor    edi,edi
c0024182:	50                   	push   eax
c0024183:	6a 0c                	push   0xc
c0024185:	56                   	push   esi
c0024186:	53                   	push   ebx
c0024187:	e8 7c f8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002418c:	83 c4 10             	add    esp,0x10
c002418f:	a8 01                	test   al,0x1
c0024191:	0f 85 8e 01 00 00    	jne    c0024325 <IDE::detect()+0x283>
c0024197:	84 c0                	test   al,al
c0024199:	78 04                	js     c002419f <IDE::detect()+0xfd>
c002419b:	a8 08                	test   al,0x8
c002419d:	75 27                	jne    c00241c6 <IDE::detect()+0x124>
c002419f:	47                   	inc    edi
c00241a0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00241a6:	7e da                	jle    c0024182 <IDE::detect()+0xe0>
c00241a8:	50                   	push   eax
c00241a9:	50                   	push   eax
c00241aa:	6a 00                	push   0x0
c00241ac:	68 40 4b 4c 00       	push   0x4c4b40
c00241b1:	e8 b5 a2 ff ff       	call   c001e46b <nanoSleep(unsigned long long)>
c00241b6:	83 c4 10             	add    esp,0x10
c00241b9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00241bf:	75 c1                	jne    c0024182 <IDE::detect()+0xe0>
c00241c1:	e9 5f 01 00 00       	jmp    c0024325 <IDE::detect()+0x283>
c00241c6:	31 c9                	xor    ecx,ecx
c00241c8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00241cc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00241d0:	83 ec 0c             	sub    esp,0xc
c00241d3:	68 80 00 00 00       	push   0x80
c00241d8:	57                   	push   edi
c00241d9:	6a 00                	push   0x0
c00241db:	56                   	push   esi
c00241dc:	53                   	push   ebx
c00241dd:	e8 f4 fd ff ff       	call   c0023fd6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00241e2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00241e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00241eb:	89 d1                	mov    ecx,edx
c00241ed:	c1 e0 06             	shl    eax,0x6
c00241f0:	01 d8                	add    eax,ebx
c00241f2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00241f9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024200:	89 f2                	mov    edx,esi
c0024202:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024208:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002420c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024212:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024216:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002421d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024225:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002422c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024234:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002423a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024241:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024247:	8d 54 24 58          	lea    edx,[esp+0x58]
c002424b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002424f:	83 c4 20             	add    esp,0x20
c0024252:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024255:	83 c0 02             	add    eax,0x2
c0024258:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002425e:	83 c7 02             	add    edi,0x2
c0024261:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024264:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002426a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002426e:	75 e2                	jne    c0024252 <IDE::detect()+0x1b0>
c0024270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024274:	c1 e0 06             	shl    eax,0x6
c0024277:	01 d8                	add    eax,ebx
c0024279:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002427f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024286:	66 c1 ea 09          	shr    dx,0x9
c002428a:	83 e2 01             	and    edx,0x1
c002428d:	84 c9                	test   cl,cl
c002428f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024295:	75 2f                	jne    c00242c6 <IDE::detect()+0x224>
c0024297:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002429d:	85 c0                	test   eax,eax
c002429f:	74 66                	je     c0024307 <IDE::detect()+0x265>
c00242a1:	50                   	push   eax
c00242a2:	55                   	push   ebp
c00242a3:	56                   	push   esi
c00242a4:	68 24 d8 02 c0       	push   0xc002d824
c00242a9:	e8 4d e6 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00242ae:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00242b5:	e8 48 b6 fe ff       	call   c000f902 <malloc>
c00242ba:	89 c7                	mov    edi,eax
c00242bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00242bf:	e8 78 06 00 00       	call   c002493c <ATA::ATA()>
c00242c4:	eb 28                	jmp    c00242ee <IDE::detect()+0x24c>
c00242c6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00242cc:	55                   	push   ebp
c00242cd:	56                   	push   esi
c00242ce:	68 53 d8 02 c0       	push   0xc002d853
c00242d3:	e8 23 e6 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00242d8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00242df:	e8 1e b6 fe ff       	call   c000f902 <malloc>
c00242e4:	89 c7                	mov    edi,eax
c00242e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00242e9:	e8 56 0c 00 00       	call   c0024f44 <ATAPI::ATAPI()>
c00242ee:	5a                   	pop    edx
c00242ef:	59                   	pop    ecx
c00242f0:	57                   	push   edi
c00242f1:	53                   	push   ebx
c00242f2:	e8 3d fa fe ff       	call   c0013d34 <Device::addChild(Device*)>
c00242f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00242f9:	53                   	push   ebx
c00242fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00242fe:	6a 00                	push   0x0
c0024300:	57                   	push   edi
c0024301:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024304:	83 c4 20             	add    esp,0x20
c0024307:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002430b:	4d                   	dec    ebp
c002430c:	74 0a                	je     c0024318 <IDE::detect()+0x276>
c002430e:	bd 01 00 00 00       	mov    ebp,0x1
c0024313:	e9 bb fd ff ff       	jmp    c00240d3 <IDE::detect()+0x31>
c0024318:	4e                   	dec    esi
c0024319:	74 63                	je     c002437e <IDE::detect()+0x2dc>
c002431b:	be 01 00 00 00       	mov    esi,0x1
c0024320:	e9 ac fd ff ff       	jmp    c00240d1 <IDE::detect()+0x2f>
c0024325:	50                   	push   eax
c0024326:	6a 04                	push   0x4
c0024328:	56                   	push   esi
c0024329:	53                   	push   ebx
c002432a:	e8 d9 f6 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002432f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024333:	83 c4 0c             	add    esp,0xc
c0024336:	6a 05                	push   0x5
c0024338:	56                   	push   esi
c0024339:	53                   	push   ebx
c002433a:	e8 c9 f6 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002433f:	83 c4 10             	add    esp,0x10
c0024342:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024346:	80 fa 14             	cmp    dl,0x14
c0024349:	75 04                	jne    c002434f <IDE::detect()+0x2ad>
c002434b:	3c eb                	cmp    al,0xeb
c002434d:	eb 07                	jmp    c0024356 <IDE::detect()+0x2b4>
c002434f:	3c 96                	cmp    al,0x96
c0024351:	75 b8                	jne    c002430b <IDE::detect()+0x269>
c0024353:	80 fa 69             	cmp    dl,0x69
c0024356:	75 b3                	jne    c002430b <IDE::detect()+0x269>
c0024358:	68 a1 00 00 00       	push   0xa1
c002435d:	6a 07                	push   0x7
c002435f:	56                   	push   esi
c0024360:	53                   	push   ebx
c0024361:	e8 e2 f5 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024366:	5f                   	pop    edi
c0024367:	58                   	pop    eax
c0024368:	6a 00                	push   0x0
c002436a:	68 40 42 0f 00       	push   0xf4240
c002436f:	e8 f7 a0 ff ff       	call   c001e46b <nanoSleep(unsigned long long)>
c0024374:	83 c4 10             	add    esp,0x10
c0024377:	b1 01                	mov    cl,0x1
c0024379:	e9 4a fe ff ff       	jmp    c00241c8 <IDE::detect()+0x126>
c002437e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024384:	5b                   	pop    ebx
c0024385:	5e                   	pop    esi
c0024386:	5f                   	pop    edi
c0024387:	5d                   	pop    ebp
c0024388:	c3                   	ret    
c0024389:	90                   	nop

c002438a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002438a:	55                   	push   ebp
c002438b:	57                   	push   edi
c002438c:	56                   	push   esi
c002438d:	53                   	push   ebx
c002438e:	83 ec 1c             	sub    esp,0x1c
c0024391:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024395:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024399:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002439d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00243a1:	88 c3                	mov    bl,al
c00243a3:	84 c0                	test   al,al
c00243a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243a9:	0f 84 67 01 00 00    	je     c0024516 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00243af:	83 ec 0c             	sub    esp,0xc
c00243b2:	68 84 d8 02 c0       	push   0xc002d884
c00243b7:	e8 3f e5 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00243bc:	83 c4 10             	add    esp,0x10
c00243bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243c3:	3c 01                	cmp    al,0x1
c00243c5:	75 17                	jne    c00243de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00243c7:	83 ec 0c             	sub    esp,0xc
c00243ca:	b3 13                	mov    bl,0x13
c00243cc:	68 90 d8 02 c0       	push   0xc002d890
c00243d1:	e8 25 e5 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00243d6:	83 c4 10             	add    esp,0x10
c00243d9:	e9 25 01 00 00       	jmp    c0024503 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243de:	3c 02                	cmp    al,0x2
c00243e0:	0f 85 ef 00 00 00    	jne    c00244d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00243e6:	d1 e6                	shl    esi,1
c00243e8:	09 ee                	or     esi,ebp
c00243ea:	52                   	push   edx
c00243eb:	89 f0                	mov    eax,esi
c00243ed:	6a 01                	push   0x1
c00243ef:	0f b6 f0             	movzx  esi,al
c00243f2:	c1 e6 06             	shl    esi,0x6
c00243f5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00243fd:	50                   	push   eax
c00243fe:	57                   	push   edi
c00243ff:	e8 04 f6 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024404:	83 c4 10             	add    esp,0x10
c0024407:	89 c6                	mov    esi,eax
c0024409:	a8 01                	test   al,0x1
c002440b:	74 12                	je     c002441f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002440d:	83 ec 0c             	sub    esp,0xc
c0024410:	b3 07                	mov    bl,0x7
c0024412:	68 a5 d8 02 c0       	push   0xc002d8a5
c0024417:	e8 df e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002441c:	83 c4 10             	add    esp,0x10
c002441f:	f7 c6 02 00 00 00    	test   esi,0x2
c0024425:	74 12                	je     c0024439 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024427:	83 ec 0c             	sub    esp,0xc
c002442a:	b3 03                	mov    bl,0x3
c002442c:	68 c3 d8 02 c0       	push   0xc002d8c3
c0024431:	e8 c5 e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	f7 c6 04 00 00 00    	test   esi,0x4
c002443f:	74 12                	je     c0024453 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024441:	83 ec 0c             	sub    esp,0xc
c0024444:	b3 14                	mov    bl,0x14
c0024446:	68 e3 d8 02 c0       	push   0xc002d8e3
c002444b:	e8 ab e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024450:	83 c4 10             	add    esp,0x10
c0024453:	f7 c6 08 00 00 00    	test   esi,0x8
c0024459:	74 12                	je     c002446d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002445b:	83 ec 0c             	sub    esp,0xc
c002445e:	b3 03                	mov    bl,0x3
c0024460:	68 c3 d8 02 c0       	push   0xc002d8c3
c0024465:	e8 91 e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002446a:	83 c4 10             	add    esp,0x10
c002446d:	f7 c6 10 00 00 00    	test   esi,0x10
c0024473:	74 12                	je     c0024487 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024475:	83 ec 0c             	sub    esp,0xc
c0024478:	b3 15                	mov    bl,0x15
c002447a:	68 fb d8 02 c0       	push   0xc002d8fb
c002447f:	e8 77 e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024484:	83 c4 10             	add    esp,0x10
c0024487:	f7 c6 20 00 00 00    	test   esi,0x20
c002448d:	74 12                	je     c00244a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002448f:	83 ec 0c             	sub    esp,0xc
c0024492:	b3 03                	mov    bl,0x3
c0024494:	68 c3 d8 02 c0       	push   0xc002d8c3
c0024499:	e8 5d e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002449e:	83 c4 10             	add    esp,0x10
c00244a1:	f7 c6 40 00 00 00    	test   esi,0x40
c00244a7:	74 12                	je     c00244bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00244a9:	83 ec 0c             	sub    esp,0xc
c00244ac:	b3 16                	mov    bl,0x16
c00244ae:	68 15 d9 02 c0       	push   0xc002d915
c00244b3:	e8 43 e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00244b8:	83 c4 10             	add    esp,0x10
c00244bb:	89 f0                	mov    eax,esi
c00244bd:	84 c0                	test   al,al
c00244bf:	79 42                	jns    c0024503 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244c1:	83 ec 0c             	sub    esp,0xc
c00244c4:	b3 0d                	mov    bl,0xd
c00244c6:	68 36 d9 02 c0       	push   0xc002d936
c00244cb:	e8 2b e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00244d0:	83 c4 10             	add    esp,0x10
c00244d3:	eb 2e                	jmp    c0024503 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244d5:	3c 03                	cmp    al,0x3
c00244d7:	75 14                	jne    c00244ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00244d9:	83 ec 0c             	sub    esp,0xc
c00244dc:	b3 17                	mov    bl,0x17
c00244de:	68 4a d9 02 c0       	push   0xc002d94a
c00244e3:	e8 13 e4 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00244e8:	83 c4 10             	add    esp,0x10
c00244eb:	eb 16                	jmp    c0024503 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244ed:	3c 04                	cmp    al,0x4
c00244ef:	75 12                	jne    c0024503 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244f1:	83 ec 0c             	sub    esp,0xc
c00244f4:	b3 08                	mov    bl,0x8
c00244f6:	68 60 d9 02 c0       	push   0xc002d960
c00244fb:	e8 fb e3 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024500:	83 c4 10             	add    esp,0x10
c0024503:	50                   	push   eax
c0024504:	50                   	push   eax
c0024505:	0f b6 c3             	movzx  eax,bl
c0024508:	50                   	push   eax
c0024509:	68 78 d9 02 c0       	push   0xc002d978
c002450e:	e8 e8 e3 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024513:	83 c4 10             	add    esp,0x10
c0024516:	83 c4 1c             	add    esp,0x1c
c0024519:	88 d8                	mov    al,bl
c002451b:	5b                   	pop    ebx
c002451c:	5e                   	pop    esi
c002451d:	5f                   	pop    edi
c002451e:	5d                   	pop    ebp
c002451f:	c3                   	ret    

c0024520 <IDE::polling(unsigned char, unsigned int)>:
c0024520:	57                   	push   edi
c0024521:	56                   	push   esi
c0024522:	53                   	push   ebx
c0024523:	bb 04 00 00 00       	mov    ebx,0x4
c0024528:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002452c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024531:	52                   	push   edx
c0024532:	6a 0c                	push   0xc
c0024534:	56                   	push   esi
c0024535:	57                   	push   edi
c0024536:	e8 cd f4 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002453b:	83 c4 10             	add    esp,0x10
c002453e:	4b                   	dec    ebx
c002453f:	75 f0                	jne    c0024531 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024541:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024546:	50                   	push   eax
c0024547:	6a 0c                	push   0xc
c0024549:	56                   	push   esi
c002454a:	57                   	push   edi
c002454b:	e8 b8 f4 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024550:	83 c4 10             	add    esp,0x10
c0024553:	a8 01                	test   al,0x1
c0024555:	74 12                	je     c0024569 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024557:	83 ec 0c             	sub    esp,0xc
c002455a:	68 92 d9 02 c0       	push   0xc002d992
c002455f:	e8 97 e3 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024564:	83 c4 10             	add    esp,0x10
c0024567:	eb 17                	jmp    c0024580 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024569:	a8 20                	test   al,0x20
c002456b:	75 0f                	jne    c002457c <IDE::polling(unsigned char, unsigned int)+0x5c>
c002456d:	4b                   	dec    ebx
c002456e:	74 10                	je     c0024580 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024570:	84 c0                	test   al,al
c0024572:	78 d2                	js     c0024546 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024574:	a8 08                	test   al,0x8
c0024576:	74 ce                	je     c0024546 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024578:	31 c0                	xor    eax,eax
c002457a:	eb 06                	jmp    c0024582 <IDE::polling(unsigned char, unsigned int)+0x62>
c002457c:	b0 01                	mov    al,0x1
c002457e:	eb 02                	jmp    c0024582 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024580:	b0 02                	mov    al,0x2
c0024582:	5b                   	pop    ebx
c0024583:	5e                   	pop    esi
c0024584:	5f                   	pop    edi
c0024585:	c3                   	ret    

c0024586 <SATABus::close(int, int, void*)>:
c0024586:	31 c0                	xor    eax,eax
c0024588:	c3                   	ret    
c0024589:	90                   	nop

c002458a <SATABus::detect()>:
c002458a:	c3                   	ret    
c002458b:	90                   	nop

c002458c <SATABus::SATABus()>:
c002458c:	83 ec 0c             	sub    esp,0xc
c002458f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024593:	83 ec 08             	sub    esp,0x8
c0024596:	68 d4 d9 02 c0       	push   0xc002d9d4
c002459b:	50                   	push   eax
c002459c:	e8 41 fb fe ff       	call   c00140e2 <HardDiskController::HardDiskController(char const*)>
c00245a1:	83 c4 10             	add    esp,0x10
c00245a4:	ba 90 da 02 c0       	mov    edx,0xc002da90
c00245a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245ad:	89 10                	mov    DWORD PTR [eax],edx
c00245af:	83 ec 0c             	sub    esp,0xc
c00245b2:	6a 50                	push   0x50
c00245b4:	e8 a2 b7 fe ff       	call   c000fd5b <Phys::allocateContiguousPages(int)>
c00245b9:	83 c4 10             	add    esp,0x10
c00245bc:	89 c2                	mov    edx,eax
c00245be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00245c8:	83 ec 0c             	sub    esp,0xc
c00245cb:	6a 50                	push   0x50
c00245cd:	e8 23 cf fe ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c00245d2:	83 c4 10             	add    esp,0x10
c00245d5:	89 c2                	mov    edx,eax
c00245d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00245e1:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c00245e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00245ea:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00245f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00245f4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00245fa:	83 ec 0c             	sub    esp,0xc
c00245fd:	6a 03                	push   0x3
c00245ff:	6a 50                	push   0x50
c0024601:	51                   	push   ecx
c0024602:	52                   	push   edx
c0024603:	50                   	push   eax
c0024604:	e8 19 da fe ff       	call   c0012022 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024609:	83 c4 20             	add    esp,0x20
c002460c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024610:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002461a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024620:	83 ec 04             	sub    esp,0x4
c0024623:	52                   	push   edx
c0024624:	50                   	push   eax
c0024625:	68 f8 d9 02 c0       	push   0xc002d9f8
c002462a:	e8 cc e2 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002462f:	83 c4 10             	add    esp,0x10
c0024632:	90                   	nop
c0024633:	83 c4 0c             	add    esp,0xc
c0024636:	c3                   	ret    
c0024637:	90                   	nop

c0024638 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024638:	83 ec 0c             	sub    esp,0xc
c002463b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002463f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024642:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024645:	09 c2                	or     edx,eax
c0024647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002464b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024651:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024653:	31 c0                	xor    eax,eax
c0024655:	c1 e9 08             	shr    ecx,0x8
c0024658:	83 e1 0f             	and    ecx,0xf
c002465b:	39 c8                	cmp    eax,ecx
c002465d:	74 0a                	je     c0024669 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002465f:	f6 c2 01             	test   dl,0x1
c0024662:	74 18                	je     c002467c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024664:	d1 ea                	shr    edx,1
c0024666:	40                   	inc    eax
c0024667:	eb f2                	jmp    c002465b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024669:	83 ec 0c             	sub    esp,0xc
c002466c:	68 1c da 02 c0       	push   0xc002da1c
c0024671:	e8 39 5d ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0024676:	83 c4 10             	add    esp,0x10
c0024679:	83 c8 ff             	or     eax,0xffffffff
c002467c:	83 c4 0c             	add    esp,0xc
c002467f:	c3                   	ret    

c0024680 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024680:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024684:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024687:	89 c2                	mov    edx,eax
c0024689:	c1 ea 08             	shr    edx,0x8
c002468c:	83 e2 0f             	and    edx,0xf
c002468f:	fe ca                	dec    dl
c0024691:	75 31                	jne    c00246c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024693:	83 e0 0f             	and    eax,0xf
c0024696:	3c 03                	cmp    al,0x3
c0024698:	75 2a                	jne    c00246c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002469a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002469d:	b8 02 00 00 00       	mov    eax,0x2
c00246a2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00246a8:	74 1c                	je     c00246c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246aa:	b8 04 00 00 00       	mov    eax,0x4
c00246af:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00246b5:	74 0f                	je     c00246c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246b7:	31 c0                	xor    eax,eax
c00246b9:	83 fa 03             	cmp    edx,0x3
c00246bc:	0f 94 c0             	sete   al
c00246bf:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00246c3:	c3                   	ret    
c00246c4:	31 c0                	xor    eax,eax
c00246c6:	c3                   	ret    
c00246c7:	90                   	nop

c00246c8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00246c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00246cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246cf:	0f ba e2 0f          	bt     edx,0xf
c00246d3:	72 f7                	jb     c00246cc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00246d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246d8:	83 ca 10             	or     edx,0x10
c00246db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246e1:	83 ca 01             	or     edx,0x1
c00246e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246e7:	c3                   	ret    

c00246e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00246e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00246ec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246ef:	83 e2 fe             	and    edx,0xfffffffe
c00246f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246f5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246f8:	83 e2 ef             	and    edx,0xffffffef
c00246fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024701:	0f ba e2 0e          	bt     edx,0xe
c0024705:	72 f7                	jb     c00246fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024707:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002470a:	0f ba e2 0f          	bt     edx,0xf
c002470e:	72 ee                	jb     c00246fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024710:	c3                   	ret    
c0024711:	90                   	nop

c0024712 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024712:	55                   	push   ebp
c0024713:	57                   	push   edi
c0024714:	56                   	push   esi
c0024715:	53                   	push   ebx
c0024716:	83 ec 1c             	sub    esp,0x1c
c0024719:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002471d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024721:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024725:	53                   	push   ebx
c0024726:	89 fd                	mov    ebp,edi
c0024728:	56                   	push   esi
c0024729:	c1 e5 0a             	shl    ebp,0xa
c002472c:	e8 b7 ff ff ff       	call   c00246e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024731:	83 ec 0c             	sub    esp,0xc
c0024734:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002473a:	01 e8                	add    eax,ebp
c002473c:	89 03                	mov    DWORD PTR [ebx],eax
c002473e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024740:	68 00 04 00 00       	push   0x400
c0024745:	6a 00                	push   0x0
c0024747:	50                   	push   eax
c0024748:	e8 03 c0 fd ff       	call   c0000750 <memset>
c002474d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024753:	89 fa                	mov    edx,edi
c0024755:	01 e8                	add    eax,ebp
c0024757:	c1 e7 0d             	shl    edi,0xd
c002475a:	89 03                	mov    DWORD PTR [ebx],eax
c002475c:	c1 e2 08             	shl    edx,0x8
c002475f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024766:	81 c2 00 80 00 00    	add    edx,0x8000
c002476c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024770:	89 d0                	mov    eax,edx
c0024772:	83 c4 1c             	add    esp,0x1c
c0024775:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002477b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002477e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024781:	68 00 01 00 00       	push   0x100
c0024786:	6a 00                	push   0x0
c0024788:	50                   	push   eax
c0024789:	e8 c2 bf fd ff       	call   c0000750 <memset>
c002478e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024792:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024798:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002479e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00247a2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00247a5:	83 c4 10             	add    esp,0x10
c00247a8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00247af:	31 ff                	xor    edi,edi
c00247b1:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00247b7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00247bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247c1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00247c7:	83 c5 20             	add    ebp,0x20
c00247ca:	01 f8                	add    eax,edi
c00247cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247cf:	52                   	push   edx
c00247d0:	68 00 01 00 00       	push   0x100
c00247d5:	6a 00                	push   0x0
c00247d7:	50                   	push   eax
c00247d8:	e8 73 bf fd ff       	call   c0000750 <memset>
c00247dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00247ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00247f1:	01 f8                	add    eax,edi
c00247f3:	81 c7 00 01 00 00    	add    edi,0x100
c00247f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247fc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024802:	75 b3                	jne    c00247b7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024804:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024808:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002480c:	83 c4 1c             	add    esp,0x1c
c002480f:	5b                   	pop    ebx
c0024810:	5e                   	pop    esi
c0024811:	5f                   	pop    edi
c0024812:	5d                   	pop    ebp
c0024813:	e9 b0 fe ff ff       	jmp    c00246c8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024818 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024818:	55                   	push   ebp
c0024819:	57                   	push   edi
c002481a:	56                   	push   esi
c002481b:	53                   	push   ebx
c002481c:	31 db                	xor    ebx,ebx
c002481e:	83 ec 0c             	sub    esp,0xc
c0024821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024825:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024829:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002482c:	f7 c7 01 00 00 00    	test   edi,0x1
c0024832:	0f 84 aa 00 00 00    	je     c00248e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024838:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002483c:	89 d8                	mov    eax,ebx
c002483e:	c1 e0 07             	shl    eax,0x7
c0024841:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024848:	55                   	push   ebp
c0024849:	56                   	push   esi
c002484a:	e8 31 fe ff ff       	call   c0024680 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002484f:	5a                   	pop    edx
c0024850:	83 f8 01             	cmp    eax,0x1
c0024853:	59                   	pop    ecx
c0024854:	75 30                	jne    c0024886 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024856:	50                   	push   eax
c0024857:	50                   	push   eax
c0024858:	53                   	push   ebx
c0024859:	68 41 da 02 c0       	push   0xc002da41
c002485e:	e8 98 e0 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024863:	83 c4 0c             	add    esp,0xc
c0024866:	53                   	push   ebx
c0024867:	55                   	push   ebp
c0024868:	56                   	push   esi
c0024869:	e8 a4 fe ff ff       	call   c0024712 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002486e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024875:	e8 88 b0 fe ff       	call   c000f902 <malloc>
c002487a:	89 c5                	mov    ebp,eax
c002487c:	89 04 24             	mov    DWORD PTR [esp],eax
c002487f:	e8 24 0d 00 00       	call   c00255a8 <SATA::SATA()>
c0024884:	eb 33                	jmp    c00248b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024886:	83 f8 04             	cmp    eax,0x4
c0024889:	75 47                	jne    c00248d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002488b:	50                   	push   eax
c002488c:	50                   	push   eax
c002488d:	53                   	push   ebx
c002488e:	68 58 da 02 c0       	push   0xc002da58
c0024893:	e8 63 e0 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024898:	83 c4 0c             	add    esp,0xc
c002489b:	53                   	push   ebx
c002489c:	55                   	push   ebp
c002489d:	56                   	push   esi
c002489e:	e8 6f fe ff ff       	call   c0024712 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248a3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00248aa:	e8 53 b0 fe ff       	call   c000f902 <malloc>
c00248af:	89 c5                	mov    ebp,eax
c00248b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00248b4:	e8 65 10 00 00       	call   c002591e <SATAPI::SATAPI()>
c00248b9:	5a                   	pop    edx
c00248ba:	59                   	pop    ecx
c00248bb:	55                   	push   ebp
c00248bc:	56                   	push   esi
c00248bd:	e8 72 f4 fe ff       	call   c0013d34 <Device::addChild(Device*)>
c00248c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00248c5:	56                   	push   esi
c00248c6:	6a 00                	push   0x0
c00248c8:	53                   	push   ebx
c00248c9:	55                   	push   ebp
c00248ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248cd:	83 c4 20             	add    esp,0x20
c00248d0:	eb 10                	jmp    c00248e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00248d2:	50                   	push   eax
c00248d3:	50                   	push   eax
c00248d4:	53                   	push   ebx
c00248d5:	68 71 da 02 c0       	push   0xc002da71
c00248da:	e8 1c e0 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00248df:	83 c4 10             	add    esp,0x10
c00248e2:	d1 ef                	shr    edi,1
c00248e4:	43                   	inc    ebx
c00248e5:	83 fb 20             	cmp    ebx,0x20
c00248e8:	0f 85 3e ff ff ff    	jne    c002482c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00248ee:	83 c4 0c             	add    esp,0xc
c00248f1:	5b                   	pop    ebx
c00248f2:	5e                   	pop    esi
c00248f3:	5f                   	pop    edi
c00248f4:	5d                   	pop    ebp
c00248f5:	c3                   	ret    

c00248f6 <SATABus::open(int, int, void*)>:
c00248f6:	83 ec 14             	sub    esp,0x14
c00248f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248fd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024903:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024909:	52                   	push   edx
c002490a:	50                   	push   eax
c002490b:	e8 08 ff ff ff       	call   c0024818 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024910:	31 c0                	xor    eax,eax
c0024912:	83 c4 1c             	add    esp,0x1c
c0024915:	c3                   	ret    

c0024916 <ATA::close(int, int, void*)>:
c0024916:	83 ec 0c             	sub    esp,0xc
c0024919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024923:	85 c0                	test   eax,eax
c0024925:	74 0c                	je     c0024933 <ATA::close(int, int, void*)+0x1d>
c0024927:	83 ec 0c             	sub    esp,0xc
c002492a:	8b 10                	mov    edx,DWORD PTR [eax]
c002492c:	50                   	push   eax
c002492d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024930:	83 c4 10             	add    esp,0x10
c0024933:	31 c0                	xor    eax,eax
c0024935:	83 c4 0c             	add    esp,0xc
c0024938:	c3                   	ret    
c0024939:	90                   	nop

c002493a <ATA::powerSaving(PowerSavingLevel)>:
c002493a:	c3                   	ret    
c002493b:	90                   	nop

c002493c <ATA::ATA()>:
c002493c:	83 ec 0c             	sub    esp,0xc
c002493f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024943:	83 ec 04             	sub    esp,0x4
c0024946:	68 00 02 00 00       	push   0x200
c002494b:	68 59 db 02 c0       	push   0xc002db59
c0024950:	50                   	push   eax
c0024951:	e8 24 f8 fe ff       	call   c001417a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	ba dc da 02 c0       	mov    edx,0xc002dadc
c002495e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024962:	89 10                	mov    DWORD PTR [eax],edx
c0024964:	90                   	nop
c0024965:	83 c4 0c             	add    esp,0xc
c0024968:	c3                   	ret    
c0024969:	90                   	nop

c002496a <ATA::flush(bool)>:
c002496a:	53                   	push   ebx
c002496b:	83 ec 08             	sub    esp,0x8
c002496e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024977:	19 c0                	sbb    eax,eax
c0024979:	83 e0 fd             	and    eax,0xfffffffd
c002497c:	05 ea 00 00 00       	add    eax,0xea
c0024981:	50                   	push   eax
c0024982:	6a 07                	push   0x7
c0024984:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002498b:	50                   	push   eax
c002498c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024992:	e8 b1 ef ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024997:	83 c4 0c             	add    esp,0xc
c002499a:	6a 00                	push   0x0
c002499c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a3:	50                   	push   eax
c00249a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249aa:	e8 71 fb ff ff       	call   c0024520 <IDE::polling(unsigned char, unsigned int)>
c00249af:	83 c4 18             	add    esp,0x18
c00249b2:	5b                   	pop    ebx
c00249b3:	c3                   	ret    

c00249b4 <ATA::readyForCommand()>:
c00249b4:	56                   	push   esi
c00249b5:	53                   	push   ebx
c00249b6:	31 db                	xor    ebx,ebx
c00249b8:	50                   	push   eax
c00249b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00249bd:	50                   	push   eax
c00249be:	6a 0c                	push   0xc
c00249c0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00249c7:	50                   	push   eax
c00249c8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00249ce:	e8 35 f0 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c00249d3:	83 c4 10             	add    esp,0x10
c00249d6:	a8 88                	test   al,0x88
c00249d8:	74 23                	je     c00249fd <ATA::readyForCommand()+0x49>
c00249da:	43                   	inc    ebx
c00249db:	83 fb 63             	cmp    ebx,0x63
c00249de:	7e dd                	jle    c00249bd <ATA::readyForCommand()+0x9>
c00249e0:	51                   	push   ecx
c00249e1:	51                   	push   ecx
c00249e2:	6a 00                	push   0x0
c00249e4:	68 40 42 0f 00       	push   0xf4240
c00249e9:	e8 7d 9a ff ff       	call   c001e46b <nanoSleep(unsigned long long)>
c00249ee:	83 c4 10             	add    esp,0x10
c00249f1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00249f7:	75 c4                	jne    c00249bd <ATA::readyForCommand()+0x9>
c00249f9:	31 c0                	xor    eax,eax
c00249fb:	eb 02                	jmp    c00249ff <ATA::readyForCommand()+0x4b>
c00249fd:	b0 01                	mov    al,0x1
c00249ff:	5a                   	pop    edx
c0024a00:	5b                   	pop    ebx
c0024a01:	5e                   	pop    esi
c0024a02:	c3                   	ret    
c0024a03:	90                   	nop

c0024a04 <ATA::access(unsigned long long, int, void*, bool)>:
c0024a04:	55                   	push   ebp
c0024a05:	57                   	push   edi
c0024a06:	56                   	push   esi
c0024a07:	53                   	push   ebx
c0024a08:	83 ec 2c             	sub    esp,0x2c
c0024a0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a13:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a1b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024a1f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024a23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a31:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024a37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a3b:	c1 e0 06             	shl    eax,0x6
c0024a3e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024a46:	74 5d                	je     c0024aa5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024a48:	89 fa                	mov    edx,edi
c0024a4a:	89 f0                	mov    eax,esi
c0024a4c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024a50:	c1 ea 1c             	shr    edx,0x1c
c0024a53:	89 d1                	mov    ecx,edx
c0024a55:	09 c1                	or     ecx,eax
c0024a57:	74 25                	je     c0024a7e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024a59:	31 ed                	xor    ebp,ebp
c0024a5b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024a62:	89 fa                	mov    edx,edi
c0024a64:	89 f0                	mov    eax,esi
c0024a66:	0f ad d0             	shrd   eax,edx,cl
c0024a69:	d3 ea                	shr    edx,cl
c0024a6b:	f6 c1 20             	test   cl,0x20
c0024a6e:	74 02                	je     c0024a72 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024a70:	89 d0                	mov    eax,edx
c0024a72:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024a76:	45                   	inc    ebp
c0024a77:	83 fd 06             	cmp    ebp,0x6
c0024a7a:	75 df                	jne    c0024a5b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024a7c:	eb 76                	jmp    c0024af4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024a7e:	89 f0                	mov    eax,esi
c0024a80:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024a85:	89 fa                	mov    edx,edi
c0024a87:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a8e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024a92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a97:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024a9b:	c1 ee 18             	shr    esi,0x18
c0024a9e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024aa3:	eb 56                	jmp    c0024afb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024aa5:	6a 00                	push   0x0
c0024aa7:	6a 3f                	push   0x3f
c0024aa9:	57                   	push   edi
c0024aaa:	56                   	push   esi
c0024aab:	e8 24 29 00 00       	call   c00273d4 <__umoddi3>
c0024ab0:	83 c4 10             	add    esp,0x10
c0024ab3:	40                   	inc    eax
c0024ab4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024ab8:	6a 00                	push   0x0
c0024aba:	68 f0 03 00 00       	push   0x3f0
c0024abf:	57                   	push   edi
c0024ac0:	56                   	push   esi
c0024ac1:	e8 0e 28 00 00       	call   c00272d4 <__udivdi3>
c0024ac6:	83 c4 10             	add    esp,0x10
c0024ac9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024ace:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024ad5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024ada:	6a 00                	push   0x0
c0024adc:	6a 3f                	push   0x3f
c0024ade:	57                   	push   edi
c0024adf:	56                   	push   esi
c0024ae0:	e8 ef 27 00 00       	call   c00272d4 <__udivdi3>
c0024ae5:	83 c4 10             	add    esp,0x10
c0024ae8:	89 c6                	mov    esi,eax
c0024aea:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024aef:	83 e6 0f             	and    esi,0xf
c0024af2:	eb 07                	jmp    c0024afb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024af4:	31 f6                	xor    esi,esi
c0024af6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024afb:	bf 01 00 00 00       	mov    edi,0x1
c0024b00:	50                   	push   eax
c0024b01:	6a 00                	push   0x0
c0024b03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0a:	50                   	push   eax
c0024b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b0f:	e8 40 f0 ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0024b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b17:	e8 98 fe ff ff       	call   c00249b4 <ATA::readyForCommand()>
c0024b1c:	83 c4 10             	add    esp,0x10
c0024b1f:	84 c0                	test   al,al
c0024b21:	0f 84 5a 02 00 00    	je     c0024d81 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024b27:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b2d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b33:	c1 e0 04             	shl    eax,0x4
c0024b36:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024b3d:	09 c6                	or     esi,eax
c0024b3f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024b44:	75 05                	jne    c0024b4b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024b46:	83 ce a0             	or     esi,0xffffffa0
c0024b49:	eb 03                	jmp    c0024b4e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024b4b:	83 ce e0             	or     esi,0xffffffe0
c0024b4e:	89 f0                	mov    eax,esi
c0024b50:	0f b6 f0             	movzx  esi,al
c0024b53:	56                   	push   esi
c0024b54:	6a 06                	push   0x6
c0024b56:	51                   	push   ecx
c0024b57:	52                   	push   edx
c0024b58:	e8 eb ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b5d:	83 c4 10             	add    esp,0x10
c0024b60:	6a 00                	push   0x0
c0024b62:	6a 01                	push   0x1
c0024b64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b6b:	50                   	push   eax
c0024b6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b72:	e8 d1 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b77:	83 c4 10             	add    esp,0x10
c0024b7a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b7f:	75 6e                	jne    c0024bef <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024b81:	6a 00                	push   0x0
c0024b83:	6a 08                	push   0x8
c0024b85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b8c:	50                   	push   eax
c0024b8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b93:	e8 b0 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b98:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024b9d:	50                   	push   eax
c0024b9e:	6a 09                	push   0x9
c0024ba0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba7:	50                   	push   eax
c0024ba8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bae:	e8 95 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb3:	83 c4 20             	add    esp,0x20
c0024bb6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024bbb:	50                   	push   eax
c0024bbc:	6a 0a                	push   0xa
c0024bbe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bc5:	50                   	push   eax
c0024bc6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bcc:	e8 77 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024bd6:	50                   	push   eax
c0024bd7:	6a 0b                	push   0xb
c0024bd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024be0:	50                   	push   eax
c0024be1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be7:	e8 5c ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bec:	83 c4 20             	add    esp,0x20
c0024bef:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024bf4:	50                   	push   eax
c0024bf5:	6a 02                	push   0x2
c0024bf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bfe:	50                   	push   eax
c0024bff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c05:	e8 3e ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c0a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024c0f:	50                   	push   eax
c0024c10:	6a 03                	push   0x3
c0024c12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c19:	50                   	push   eax
c0024c1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c20:	e8 23 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c25:	83 c4 20             	add    esp,0x20
c0024c28:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024c2d:	50                   	push   eax
c0024c2e:	6a 04                	push   0x4
c0024c30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c37:	50                   	push   eax
c0024c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c3e:	e8 05 ed ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024c48:	50                   	push   eax
c0024c49:	6a 05                	push   0x5
c0024c4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c52:	50                   	push   eax
c0024c53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c59:	e8 ea ec ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c5e:	83 c4 20             	add    esp,0x20
c0024c61:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c66:	0f 94 c0             	sete   al
c0024c69:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c6e:	74 09                	je     c0024c79 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024c70:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024c77:	eb 07                	jmp    c0024c80 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024c79:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024c80:	0f b6 c0             	movzx  eax,al
c0024c83:	50                   	push   eax
c0024c84:	6a 07                	push   0x7
c0024c86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c8d:	50                   	push   eax
c0024c8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c94:	e8 af ec ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c99:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024c9d:	83 c4 10             	add    esp,0x10
c0024ca0:	85 f6                	test   esi,esi
c0024ca2:	0f 84 ba 00 00 00    	je     c0024d62 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024ca8:	50                   	push   eax
c0024ca9:	6a 01                	push   0x1
c0024cab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb2:	50                   	push   eax
c0024cb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cb9:	e8 62 f8 ff ff       	call   c0024520 <IDE::polling(unsigned char, unsigned int)>
c0024cbe:	83 c4 10             	add    esp,0x10
c0024cc1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024cc7:	84 c0                	test   al,al
c0024cc9:	74 2c                	je     c0024cf7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024ccb:	0f b6 f8             	movzx  edi,al
c0024cce:	0f b6 d2             	movzx  edx,dl
c0024cd1:	57                   	push   edi
c0024cd2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024cd9:	50                   	push   eax
c0024cda:	52                   	push   edx
c0024cdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ce1:	e8 a4 f6 ff ff       	call   c002438a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024ce6:	c7 04 24 b4 da 02 c0 	mov    DWORD PTR [esp],0xc002dab4
c0024ced:	e8 09 dc fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0024cf2:	e9 87 00 00 00       	jmp    c0024d7e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024cf7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024cfc:	74 33                	je     c0024d31 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024cfe:	31 ed                	xor    ebp,ebp
c0024d00:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024d04:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024d08:	50                   	push   eax
c0024d09:	50                   	push   eax
c0024d0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d11:	50                   	push   eax
c0024d12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d18:	e8 19 ec ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c0024d1d:	89 c2                	mov    edx,eax
c0024d1f:	89 f8                	mov    eax,edi
c0024d21:	66 ef                	out    dx,ax
c0024d23:	45                   	inc    ebp
c0024d24:	83 c4 10             	add    esp,0x10
c0024d27:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024d2d:	75 d1                	jne    c0024d00 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024d2f:	eb 23                	jmp    c0024d54 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024d31:	0f b6 d2             	movzx  edx,dl
c0024d34:	51                   	push   ecx
c0024d35:	51                   	push   ecx
c0024d36:	52                   	push   edx
c0024d37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d3d:	e8 f4 eb ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c0024d42:	b9 00 01 00 00       	mov    ecx,0x100
c0024d47:	89 c2                	mov    edx,eax
c0024d49:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024d4d:	fc                   	cld    
c0024d4e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024d51:	83 c4 10             	add    esp,0x10
c0024d54:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024d5c:	4e                   	dec    esi
c0024d5d:	e9 3e ff ff ff       	jmp    c0024ca0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024d62:	31 ff                	xor    edi,edi
c0024d64:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d69:	74 16                	je     c0024d81 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024d6b:	50                   	push   eax
c0024d6c:	50                   	push   eax
c0024d6d:	31 c0                	xor    eax,eax
c0024d6f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024d74:	0f 94 c0             	sete   al
c0024d77:	50                   	push   eax
c0024d78:	53                   	push   ebx
c0024d79:	e8 ec fb ff ff       	call   c002496a <ATA::flush(bool)>
c0024d7e:	83 c4 10             	add    esp,0x10
c0024d81:	83 c4 2c             	add    esp,0x2c
c0024d84:	89 f8                	mov    eax,edi
c0024d86:	5b                   	pop    ebx
c0024d87:	5e                   	pop    esi
c0024d88:	5f                   	pop    edi
c0024d89:	5d                   	pop    ebp
c0024d8a:	c3                   	ret    
c0024d8b:	90                   	nop

c0024d8c <ATA::read(unsigned long long, int, void*)>:
c0024d8c:	57                   	push   edi
c0024d8d:	b8 04 00 00 00       	mov    eax,0x4
c0024d92:	56                   	push   esi
c0024d93:	53                   	push   ebx
c0024d94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d9c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024da3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024da7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024dad:	77 25                	ja     c0024dd4 <ATA::read(unsigned long long, int, void*)+0x48>
c0024daf:	b8 06 00 00 00       	mov    eax,0x6
c0024db4:	85 f6                	test   esi,esi
c0024db6:	74 1c                	je     c0024dd4 <ATA::read(unsigned long long, int, void*)+0x48>
c0024db8:	50                   	push   eax
c0024db9:	50                   	push   eax
c0024dba:	6a 00                	push   0x0
c0024dbc:	56                   	push   esi
c0024dbd:	52                   	push   edx
c0024dbe:	53                   	push   ebx
c0024dbf:	51                   	push   ecx
c0024dc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dc4:	e8 3b fc ff ff       	call   c0024a04 <ATA::access(unsigned long long, int, void*, bool)>
c0024dc9:	83 c4 20             	add    esp,0x20
c0024dcc:	85 c0                	test   eax,eax
c0024dce:	0f 95 c0             	setne  al
c0024dd1:	0f b6 c0             	movzx  eax,al
c0024dd4:	5b                   	pop    ebx
c0024dd5:	5e                   	pop    esi
c0024dd6:	5f                   	pop    edi
c0024dd7:	c3                   	ret    

c0024dd8 <ATA::write(unsigned long long, int, void*)>:
c0024dd8:	57                   	push   edi
c0024dd9:	b8 04 00 00 00       	mov    eax,0x4
c0024dde:	56                   	push   esi
c0024ddf:	53                   	push   ebx
c0024de0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024de4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024de8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024deb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024def:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024df3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024df9:	77 25                	ja     c0024e20 <ATA::write(unsigned long long, int, void*)+0x48>
c0024dfb:	b8 06 00 00 00       	mov    eax,0x6
c0024e00:	85 f6                	test   esi,esi
c0024e02:	74 1c                	je     c0024e20 <ATA::write(unsigned long long, int, void*)+0x48>
c0024e04:	50                   	push   eax
c0024e05:	50                   	push   eax
c0024e06:	6a 01                	push   0x1
c0024e08:	56                   	push   esi
c0024e09:	52                   	push   edx
c0024e0a:	53                   	push   ebx
c0024e0b:	51                   	push   ecx
c0024e0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e10:	e8 ef fb ff ff       	call   c0024a04 <ATA::access(unsigned long long, int, void*, bool)>
c0024e15:	83 c4 20             	add    esp,0x20
c0024e18:	85 c0                	test   eax,eax
c0024e1a:	0f 95 c0             	setne  al
c0024e1d:	0f b6 c0             	movzx  eax,al
c0024e20:	5b                   	pop    ebx
c0024e21:	5e                   	pop    esi
c0024e22:	5f                   	pop    edi
c0024e23:	c3                   	ret    

c0024e24 <ATA::detectCHS()>:
c0024e24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024e28:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024e2e:	c1 e0 06             	shl    eax,0x6
c0024e31:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024e37:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024e41:	c7 44 24 04 bf da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dabf
c0024e49:	e9 61 55 ff ff       	jmp    c001a3af <Krnl::panic(char const*)>

c0024e4e <ATA::open(int, int, void*)>:
c0024e4e:	53                   	push   ebx
c0024e4f:	83 ec 08             	sub    esp,0x8
c0024e52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e5e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e64:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e6a:	c1 e0 06             	shl    eax,0x6
c0024e6d:	01 d0                	add    eax,edx
c0024e6f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024e76:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024e7c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024e83:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024e8d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024e93:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024e9a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024ea1:	75 0c                	jne    c0024eaf <ATA::open(int, int, void*)+0x61>
c0024ea3:	83 ec 0c             	sub    esp,0xc
c0024ea6:	53                   	push   ebx
c0024ea7:	e8 78 ff ff ff       	call   c0024e24 <ATA::detectCHS()>
c0024eac:	83 c4 10             	add    esp,0x10
c0024eaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024eb5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024ebb:	c1 e0 06             	shl    eax,0x6
c0024ebe:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024ec5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ecf:	d1 e8                	shr    eax,1
c0024ed1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024ed7:	6a 04                	push   0x4
c0024ed9:	6a 0c                	push   0xc
c0024edb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ee2:	50                   	push   eax
c0024ee3:	52                   	push   edx
c0024ee4:	e8 5f ea ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ee9:	90                   	nop
c0024eea:	90                   	nop
c0024eeb:	6a 00                	push   0x0
c0024eed:	6a 0c                	push   0xc
c0024eef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ef6:	50                   	push   eax
c0024ef7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024efd:	e8 46 ea ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f02:	83 c4 14             	add    esp,0x14
c0024f05:	53                   	push   ebx
c0024f06:	e8 d7 f2 fe ff       	call   c00141e2 <PhysicalDisk::startCache()>
c0024f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f0e:	e8 89 15 ff ff       	call   c001649c <createPartitionsForDisk(PhysicalDisk*)>
c0024f13:	31 c0                	xor    eax,eax
c0024f15:	83 c4 18             	add    esp,0x18
c0024f18:	5b                   	pop    ebx
c0024f19:	c3                   	ret    

c0024f1a <ATAPI::write(unsigned long long, int, void*)>:
c0024f1a:	b8 03 00 00 00       	mov    eax,0x3
c0024f1f:	c3                   	ret    

c0024f20 <ATAPI::close(int, int, void*)>:
c0024f20:	83 ec 0c             	sub    esp,0xc
c0024f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f2d:	85 c0                	test   eax,eax
c0024f2f:	74 0c                	je     c0024f3d <ATAPI::close(int, int, void*)+0x1d>
c0024f31:	83 ec 0c             	sub    esp,0xc
c0024f34:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f36:	50                   	push   eax
c0024f37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f3a:	83 c4 10             	add    esp,0x10
c0024f3d:	31 c0                	xor    eax,eax
c0024f3f:	83 c4 0c             	add    esp,0xc
c0024f42:	c3                   	ret    
c0024f43:	90                   	nop

c0024f44 <ATAPI::ATAPI()>:
c0024f44:	83 ec 0c             	sub    esp,0xc
c0024f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f4b:	83 ec 04             	sub    esp,0x4
c0024f4e:	68 00 08 00 00       	push   0x800
c0024f53:	68 f9 db 02 c0       	push   0xc002dbf9
c0024f58:	50                   	push   eax
c0024f59:	e8 1c f2 fe ff       	call   c001417a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f5e:	83 c4 10             	add    esp,0x10
c0024f61:	ba 14 db 02 c0       	mov    edx,0xc002db14
c0024f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f6a:	89 10                	mov    DWORD PTR [eax],edx
c0024f6c:	90                   	nop
c0024f6d:	83 c4 0c             	add    esp,0xc
c0024f70:	c3                   	ret    
c0024f71:	90                   	nop

c0024f72 <ATAPI::readyForCommand()>:
c0024f72:	56                   	push   esi
c0024f73:	53                   	push   ebx
c0024f74:	31 db                	xor    ebx,ebx
c0024f76:	50                   	push   eax
c0024f77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024f7b:	50                   	push   eax
c0024f7c:	6a 0c                	push   0xc
c0024f7e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024f85:	50                   	push   eax
c0024f86:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024f8c:	e8 77 ea ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0024f91:	83 c4 10             	add    esp,0x10
c0024f94:	a8 88                	test   al,0x88
c0024f96:	74 23                	je     c0024fbb <ATAPI::readyForCommand()+0x49>
c0024f98:	43                   	inc    ebx
c0024f99:	83 fb 63             	cmp    ebx,0x63
c0024f9c:	7e dd                	jle    c0024f7b <ATAPI::readyForCommand()+0x9>
c0024f9e:	51                   	push   ecx
c0024f9f:	51                   	push   ecx
c0024fa0:	6a 00                	push   0x0
c0024fa2:	68 40 42 0f 00       	push   0xf4240
c0024fa7:	e8 bf 94 ff ff       	call   c001e46b <nanoSleep(unsigned long long)>
c0024fac:	83 c4 10             	add    esp,0x10
c0024faf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024fb5:	75 c4                	jne    c0024f7b <ATAPI::readyForCommand()+0x9>
c0024fb7:	31 c0                	xor    eax,eax
c0024fb9:	eb 02                	jmp    c0024fbd <ATAPI::readyForCommand()+0x4b>
c0024fbb:	b0 01                	mov    al,0x1
c0024fbd:	5a                   	pop    edx
c0024fbe:	5b                   	pop    ebx
c0024fbf:	5e                   	pop    esi
c0024fc0:	c3                   	ret    
c0024fc1:	90                   	nop

c0024fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024fc2:	55                   	push   ebp
c0024fc3:	57                   	push   edi
c0024fc4:	56                   	push   esi
c0024fc5:	53                   	push   ebx
c0024fc6:	83 ec 20             	sub    esp,0x20
c0024fc9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024fcd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024fd1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024fd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024fd9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024fdd:	6a 01                	push   0x1
c0024fdf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fe6:	50                   	push   eax
c0024fe7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fed:	e8 62 eb ff ff       	call   c0023b54 <IDE::enableIRQs(unsigned char, bool)>
c0024ff2:	5e                   	pop    esi
c0024ff3:	58                   	pop    eax
c0024ff4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ffb:	50                   	push   eax
c0024ffc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025002:	e8 1b e9 ff ff       	call   c0023922 <IDE::prepareInterrupt(unsigned char)>
c0025007:	89 3c 24             	mov    DWORD PTR [esp],edi
c002500a:	e8 63 ff ff ff       	call   c0024f72 <ATAPI::readyForCommand()>
c002500f:	83 c4 10             	add    esp,0x10
c0025012:	84 c0                	test   al,al
c0025014:	75 0a                	jne    c0025020 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0025016:	bb 01 00 00 00       	mov    ebx,0x1
c002501b:	e9 57 02 00 00       	jmp    c0025277 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025020:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025026:	c1 e0 04             	shl    eax,0x4
c0025029:	0f b6 c0             	movzx  eax,al
c002502c:	50                   	push   eax
c002502d:	6a 06                	push   0x6
c002502f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025036:	50                   	push   eax
c0025037:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002503d:	e8 06 e9 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025042:	6a 00                	push   0x0
c0025044:	6a 01                	push   0x1
c0025046:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002504d:	50                   	push   eax
c002504e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025054:	e8 ef e8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025059:	83 c4 20             	add    esp,0x20
c002505c:	0f b6 c3             	movzx  eax,bl
c002505f:	0f b6 df             	movzx  ebx,bh
c0025062:	50                   	push   eax
c0025063:	6a 04                	push   0x4
c0025065:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002506c:	50                   	push   eax
c002506d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025073:	e8 d0 e8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025078:	53                   	push   ebx
c0025079:	6a 05                	push   0x5
c002507b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025082:	50                   	push   eax
c0025083:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025089:	e8 ba e8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002508e:	83 c4 20             	add    esp,0x20
c0025091:	68 a0 00 00 00       	push   0xa0
c0025096:	6a 07                	push   0x7
c0025098:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002509f:	50                   	push   eax
c00250a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a6:	e8 9d e8 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250ab:	83 c4 0c             	add    esp,0xc
c00250ae:	6a 01                	push   0x1
c00250b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250b7:	50                   	push   eax
c00250b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250be:	e8 5d f4 ff ff       	call   c0024520 <IDE::polling(unsigned char, unsigned int)>
c00250c3:	83 c4 10             	add    esp,0x10
c00250c6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00250cc:	84 c0                	test   al,al
c00250ce:	74 23                	je     c00250f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00250d0:	0f b6 d8             	movzx  ebx,al
c00250d3:	0f b6 d2             	movzx  edx,dl
c00250d6:	53                   	push   ebx
c00250d7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00250de:	50                   	push   eax
c00250df:	52                   	push   edx
c00250e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250e6:	e8 9f f2 ff ff       	call   c002438a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00250eb:	83 c4 10             	add    esp,0x10
c00250ee:	e9 84 01 00 00       	jmp    c0025277 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00250f3:	0f b6 d2             	movzx  edx,dl
c00250f6:	53                   	push   ebx
c00250f7:	53                   	push   ebx
c00250f8:	52                   	push   edx
c00250f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ff:	e8 32 e8 ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c0025104:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025108:	b9 06 00 00 00       	mov    ecx,0x6
c002510d:	89 c2                	mov    edx,eax
c002510f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025112:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025116:	83 c4 10             	add    esp,0x10
c0025119:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002511f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025126:	85 db                	test   ebx,ebx
c0025128:	0f 84 ec 00 00 00    	je     c002521a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002512e:	51                   	push   ecx
c002512f:	51                   	push   ecx
c0025130:	52                   	push   edx
c0025131:	50                   	push   eax
c0025132:	e8 7f e9 ff ff       	call   c0023ab6 <IDE::waitInterrupt(unsigned char)>
c0025137:	83 c4 10             	add    esp,0x10
c002513a:	84 c0                	test   al,al
c002513c:	0f 84 d4 fe ff ff    	je     c0025016 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025142:	56                   	push   esi
c0025143:	56                   	push   esi
c0025144:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002514b:	50                   	push   eax
c002514c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025152:	e8 cb e7 ff ff       	call   c0023922 <IDE::prepareInterrupt(unsigned char)>
c0025157:	83 c4 0c             	add    esp,0xc
c002515a:	6a 04                	push   0x4
c002515c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025163:	50                   	push   eax
c0025164:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002516a:	e8 99 e8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c002516f:	83 c4 0c             	add    esp,0xc
c0025172:	89 c6                	mov    esi,eax
c0025174:	6a 05                	push   0x5
c0025176:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002517d:	50                   	push   eax
c002517e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025184:	e8 7f e8 ff ff       	call   c0023a08 <IDE::read(unsigned char, unsigned char)>
c0025189:	89 f1                	mov    ecx,esi
c002518b:	0f b6 c0             	movzx  eax,al
c002518e:	0f b6 f1             	movzx  esi,cl
c0025191:	c1 e0 08             	shl    eax,0x8
c0025194:	09 c6                	or     esi,eax
c0025196:	d1 fe                	sar    esi,1
c0025198:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002519c:	83 c4 10             	add    esp,0x10
c002519f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00251a4:	74 41                	je     c00251e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00251a6:	31 c9                	xor    ecx,ecx
c00251a8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251ae:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251b5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00251b9:	75 0a                	jne    c00251c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00251bb:	01 c9                	add    ecx,ecx
c00251bd:	01 cd                	add    ebp,ecx
c00251bf:	4b                   	dec    ebx
c00251c0:	e9 54 ff ff ff       	jmp    c0025119 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00251c5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00251ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00251ce:	51                   	push   ecx
c00251cf:	51                   	push   ecx
c00251d0:	52                   	push   edx
c00251d1:	50                   	push   eax
c00251d2:	e8 5f e7 ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c00251d7:	89 c2                	mov    edx,eax
c00251d9:	89 f0                	mov    eax,esi
c00251db:	66 ef                	out    dx,ax
c00251dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00251e1:	83 c4 10             	add    esp,0x10
c00251e4:	41                   	inc    ecx
c00251e5:	eb c1                	jmp    c00251a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00251e7:	31 f6                	xor    esi,esi
c00251e9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251ef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251f6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00251fa:	75 06                	jne    c0025202 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00251fc:	01 f6                	add    esi,esi
c00251fe:	01 f5                	add    ebp,esi
c0025200:	eb bd                	jmp    c00251bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025202:	51                   	push   ecx
c0025203:	51                   	push   ecx
c0025204:	52                   	push   edx
c0025205:	50                   	push   eax
c0025206:	e8 2b e7 ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c002520b:	89 c2                	mov    edx,eax
c002520d:	66 ed                	in     ax,dx
c002520f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025214:	83 c4 10             	add    esp,0x10
c0025217:	46                   	inc    esi
c0025218:	eb cf                	jmp    c00251e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002521a:	51                   	push   ecx
c002521b:	51                   	push   ecx
c002521c:	52                   	push   edx
c002521d:	50                   	push   eax
c002521e:	e8 93 e8 ff ff       	call   c0023ab6 <IDE::waitInterrupt(unsigned char)>
c0025223:	83 c4 10             	add    esp,0x10
c0025226:	84 c0                	test   al,al
c0025228:	0f 84 e8 fd ff ff    	je     c0025016 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002522e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025233:	52                   	push   edx
c0025234:	52                   	push   edx
c0025235:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002523c:	50                   	push   eax
c002523d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025243:	e8 da e6 ff ff       	call   c0023922 <IDE::prepareInterrupt(unsigned char)>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	50                   	push   eax
c002524c:	50                   	push   eax
c002524d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025254:	50                   	push   eax
c0025255:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002525b:	e8 d6 e6 ff ff       	call   c0023936 <IDE::getBase(unsigned char)>
c0025260:	8d 50 07             	lea    edx,[eax+0x7]
c0025263:	ec                   	in     al,dx
c0025264:	83 c4 10             	add    esp,0x10
c0025267:	a8 88                	test   al,0x88
c0025269:	74 0a                	je     c0025275 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002526b:	4b                   	dec    ebx
c002526c:	75 dd                	jne    c002524b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002526e:	bb 02 00 00 00       	mov    ebx,0x2
c0025273:	eb 02                	jmp    c0025277 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025275:	31 db                	xor    ebx,ebx
c0025277:	83 c4 1c             	add    esp,0x1c
c002527a:	89 d8                	mov    eax,ebx
c002527c:	5b                   	pop    ebx
c002527d:	5e                   	pop    esi
c002527e:	5f                   	pop    edi
c002527f:	5d                   	pop    ebp
c0025280:	c3                   	ret    
c0025281:	90                   	nop

c0025282 <ATAPI::diskRemoved()>:
c0025282:	83 ec 18             	sub    esp,0x18
c0025285:	68 05 dc 02 c0       	push   0xc002dc05
c002528a:	e8 6c d6 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002528f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025293:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002529a:	83 c4 1c             	add    esp,0x1c
c002529d:	c3                   	ret    

c002529e <ATAPI::eject()>:
c002529e:	57                   	push   edi
c002529f:	b9 03 00 00 00       	mov    ecx,0x3
c00252a4:	53                   	push   ebx
c00252a5:	83 ec 14             	sub    esp,0x14
c00252a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252b0:	fc                   	cld    
c00252b1:	31 c0                	xor    eax,eax
c00252b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252b5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252ba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252bf:	50                   	push   eax
c00252c0:	50                   	push   eax
c00252c1:	6a 00                	push   0x0
c00252c3:	6a 00                	push   0x0
c00252c5:	6a 00                	push   0x0
c00252c7:	6a 02                	push   0x2
c00252c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252cd:	50                   	push   eax
c00252ce:	53                   	push   ebx
c00252cf:	e8 ee fc ff ff       	call   c0024fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252d4:	83 c4 14             	add    esp,0x14
c00252d7:	53                   	push   ebx
c00252d8:	e8 a5 ff ff ff       	call   c0025282 <ATAPI::diskRemoved()>
c00252dd:	83 c4 24             	add    esp,0x24
c00252e0:	31 c0                	xor    eax,eax
c00252e2:	5b                   	pop    ebx
c00252e3:	5f                   	pop    edi
c00252e4:	c3                   	ret    
c00252e5:	90                   	nop

c00252e6 <ATAPI::diskInserted()>:
c00252e6:	53                   	push   ebx
c00252e7:	83 ec 14             	sub    esp,0x14
c00252ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00252ee:	68 1c dc 02 c0       	push   0xc002dc1c
c00252f3:	e8 03 d6 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c00252f8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00252ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025302:	e8 db ee fe ff       	call   c00141e2 <PhysicalDisk::startCache()>
c0025307:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002530b:	83 c4 18             	add    esp,0x18
c002530e:	5b                   	pop    ebx
c002530f:	e9 88 11 ff ff       	jmp    c001649c <createPartitionsForDisk(PhysicalDisk*)>

c0025314 <ATAPI::detectMedia()>:
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	83 ec 28             	sub    esp,0x28
c0025319:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002531d:	6a 0c                	push   0xc
c002531f:	6a 00                	push   0x0
c0025321:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025325:	56                   	push   esi
c0025326:	e8 25 b4 fd ff       	call   c0000750 <memset>
c002532b:	58                   	pop    eax
c002532c:	5a                   	pop    edx
c002532d:	6a 00                	push   0x0
c002532f:	6a 00                	push   0x0
c0025331:	6a 00                	push   0x0
c0025333:	6a 00                	push   0x0
c0025335:	56                   	push   esi
c0025336:	53                   	push   ebx
c0025337:	e8 86 fc ff ff       	call   c0024fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002533c:	83 c4 1c             	add    esp,0x1c
c002533f:	6a 0c                	push   0xc
c0025341:	6a 00                	push   0x0
c0025343:	56                   	push   esi
c0025344:	e8 07 b4 fd ff       	call   c0000750 <memset>
c0025349:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002534e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025353:	59                   	pop    ecx
c0025354:	58                   	pop    eax
c0025355:	6a 01                	push   0x1
c0025357:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002535b:	50                   	push   eax
c002535c:	6a 00                	push   0x0
c002535e:	6a 12                	push   0x12
c0025360:	56                   	push   esi
c0025361:	53                   	push   ebx
c0025362:	e8 5b fc ff ff       	call   c0024fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025367:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002536b:	83 c4 20             	add    esp,0x20
c002536e:	83 e0 7f             	and    eax,0x7f
c0025371:	3c 70                	cmp    al,0x70
c0025373:	74 15                	je     c002538a <ATAPI::detectMedia()+0x76>
c0025375:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002537c:	75 0c                	jne    c002538a <ATAPI::detectMedia()+0x76>
c002537e:	83 ec 0c             	sub    esp,0xc
c0025381:	53                   	push   ebx
c0025382:	e8 5f ff ff ff       	call   c00252e6 <ATAPI::diskInserted()>
c0025387:	83 c4 10             	add    esp,0x10
c002538a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002538e:	83 e0 0f             	and    eax,0xf
c0025391:	3c 02                	cmp    al,0x2
c0025393:	75 1b                	jne    c00253b0 <ATAPI::detectMedia()+0x9c>
c0025395:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002539a:	75 2d                	jne    c00253c9 <ATAPI::detectMedia()+0xb5>
c002539c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253a3:	74 24                	je     c00253c9 <ATAPI::detectMedia()+0xb5>
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	53                   	push   ebx
c00253a9:	e8 d4 fe ff ff       	call   c0025282 <ATAPI::diskRemoved()>
c00253ae:	eb 16                	jmp    c00253c6 <ATAPI::detectMedia()+0xb2>
c00253b0:	84 c0                	test   al,al
c00253b2:	75 15                	jne    c00253c9 <ATAPI::detectMedia()+0xb5>
c00253b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253bb:	75 0c                	jne    c00253c9 <ATAPI::detectMedia()+0xb5>
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	53                   	push   ebx
c00253c1:	e8 20 ff ff ff       	call   c00252e6 <ATAPI::diskInserted()>
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	83 c4 24             	add    esp,0x24
c00253cc:	5b                   	pop    ebx
c00253cd:	5e                   	pop    esi
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <ATAPI::open(int, int, void*)>:
c00253d0:	53                   	push   ebx
c00253d1:	83 ec 08             	sub    esp,0x8
c00253d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00253dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00253e0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253e6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00253ec:	c1 e0 06             	shl    eax,0x6
c00253ef:	01 d0                	add    eax,edx
c00253f1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00253f8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00253fe:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025405:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002540f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025415:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002541c:	6a 04                	push   0x4
c002541e:	6a 0c                	push   0xc
c0025420:	51                   	push   ecx
c0025421:	52                   	push   edx
c0025422:	e8 21 e5 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025427:	90                   	nop
c0025428:	90                   	nop
c0025429:	6a 00                	push   0x0
c002542b:	6a 0c                	push   0xc
c002542d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025434:	50                   	push   eax
c0025435:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002543b:	e8 08 e5 ff ff       	call   c0023948 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025440:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025447:	83 c4 14             	add    esp,0x14
c002544a:	53                   	push   ebx
c002544b:	e8 c4 fe ff ff       	call   c0025314 <ATAPI::detectMedia()>
c0025450:	31 c0                	xor    eax,eax
c0025452:	83 c4 18             	add    esp,0x18
c0025455:	5b                   	pop    ebx
c0025456:	c3                   	ret    
c0025457:	90                   	nop

c0025458 <ATAPI::read(unsigned long long, int, void*)>:
c0025458:	55                   	push   ebp
c0025459:	57                   	push   edi
c002545a:	56                   	push   esi
c002545b:	53                   	push   ebx
c002545c:	83 ec 1c             	sub    esp,0x1c
c002545f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025463:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025467:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002546b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025472:	74 41                	je     c00254b5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025474:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025478:	b9 03 00 00 00       	mov    ecx,0x3
c002547d:	fc                   	cld    
c002547e:	31 c0                	xor    eax,eax
c0025480:	86 fb                	xchg   bl,bh
c0025482:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025484:	c1 c3 10             	rol    ebx,0x10
c0025487:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002548c:	89 e8                	mov    eax,ebp
c002548e:	86 fb                	xchg   bl,bh
c0025490:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025494:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025498:	50                   	push   eax
c0025499:	50                   	push   eax
c002549a:	55                   	push   ebp
c002549b:	c1 e5 0b             	shl    ebp,0xb
c002549e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00254a2:	6a 00                	push   0x0
c00254a4:	55                   	push   ebp
c00254a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254a9:	50                   	push   eax
c00254aa:	56                   	push   esi
c00254ab:	e8 12 fb ff ff       	call   c0024fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254b0:	83 c4 20             	add    esp,0x20
c00254b3:	eb 1a                	jmp    c00254cf <ATAPI::read(unsigned long long, int, void*)+0x77>
c00254b5:	83 ec 0c             	sub    esp,0xc
c00254b8:	56                   	push   esi
c00254b9:	e8 56 fe ff ff       	call   c0025314 <ATAPI::detectMedia()>
c00254be:	83 c4 10             	add    esp,0x10
c00254c1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00254c8:	75 aa                	jne    c0025474 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00254ca:	b8 02 00 00 00       	mov    eax,0x2
c00254cf:	83 c4 1c             	add    esp,0x1c
c00254d2:	5b                   	pop    ebx
c00254d3:	5e                   	pop    esi
c00254d4:	5f                   	pop    edi
c00254d5:	5d                   	pop    ebp
c00254d6:	c3                   	ret    
c00254d7:	90                   	nop

c00254d8 <SATA::close(int, int, void*)>:
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00254e5:	85 c0                	test   eax,eax
c00254e7:	74 0c                	je     c00254f5 <SATA::close(int, int, void*)+0x1d>
c00254e9:	83 ec 0c             	sub    esp,0xc
c00254ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00254ee:	50                   	push   eax
c00254ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	31 c0                	xor    eax,eax
c00254f7:	83 c4 0c             	add    esp,0xc
c00254fa:	c3                   	ret    
c00254fb:	90                   	nop

c00254fc <SATA::powerSaving(PowerSavingLevel)>:
c00254fc:	c3                   	ret    
c00254fd:	90                   	nop

c00254fe <SATA::open(int, int, void*)>:
c00254fe:	56                   	push   esi
c00254ff:	53                   	push   ebx
c0025500:	50                   	push   eax
c0025501:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025505:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025509:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025513:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025519:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025523:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025527:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025531:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025537:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002553e:	e8 63 a7 fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025543:	89 c6                	mov    esi,eax
c0025545:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002554b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025551:	e8 50 a7 fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025556:	39 c6                	cmp    esi,eax
c0025558:	74 10                	je     c002556a <SATA::open(int, int, void*)+0x6c>
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	68 44 db 02 c0       	push   0xc002db44
c0025562:	e8 48 4e ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025567:	83 c4 10             	add    esp,0x10
c002556a:	83 ec 0c             	sub    esp,0xc
c002556d:	6a 02                	push   0x2
c002556f:	e8 81 bf fe ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0025574:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002557a:	6a 03                	push   0x3
c002557c:	50                   	push   eax
c002557d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025583:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c0025589:	e8 9e c7 fe ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c002558e:	83 c4 14             	add    esp,0x14
c0025591:	53                   	push   ebx
c0025592:	e8 4b ec fe ff       	call   c00141e2 <PhysicalDisk::startCache()>
c0025597:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002559a:	e8 fd 0e ff ff       	call   c001649c <createPartitionsForDisk(PhysicalDisk*)>
c002559f:	83 c4 14             	add    esp,0x14
c00255a2:	31 c0                	xor    eax,eax
c00255a4:	5b                   	pop    ebx
c00255a5:	5e                   	pop    esi
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop

c00255a8 <SATA::SATA()>:
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255af:	83 ec 04             	sub    esp,0x4
c00255b2:	68 00 02 00 00       	push   0x200
c00255b7:	68 58 db 02 c0       	push   0xc002db58
c00255bc:	50                   	push   eax
c00255bd:	e8 b8 eb fe ff       	call   c001417a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00255c2:	83 c4 10             	add    esp,0x10
c00255c5:	ba c8 db 02 c0       	mov    edx,0xc002dbc8
c00255ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ce:	89 10                	mov    DWORD PTR [eax],edx
c00255d0:	90                   	nop
c00255d1:	83 c4 0c             	add    esp,0xc
c00255d4:	c3                   	ret    
c00255d5:	90                   	nop

c00255d6 <SATA::access(unsigned long long, int, void*, bool)>:
c00255d6:	55                   	push   ebp
c00255d7:	57                   	push   edi
c00255d8:	56                   	push   esi
c00255d9:	53                   	push   ebx
c00255da:	83 ec 2c             	sub    esp,0x2c
c00255dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00255e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00255e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00255e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00255ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00255f1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00255f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255fa:	7e 10                	jle    c002560c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00255fc:	83 ec 0c             	sub    esp,0xc
c00255ff:	68 68 db 02 c0       	push   0xc002db68
c0025604:	e8 a6 4d ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025609:	83 c4 10             	add    esp,0x10
c002560c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025612:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025618:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002561e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025622:	89 d0                	mov    eax,edx
c0025624:	c1 e0 07             	shl    eax,0x7
c0025627:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002562b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025635:	51                   	push   ecx
c0025636:	8d 42 02             	lea    eax,[edx+0x2]
c0025639:	51                   	push   ecx
c002563a:	c1 e0 07             	shl    eax,0x7
c002563d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025641:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025645:	50                   	push   eax
c0025646:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002564c:	e8 e7 ef ff ff       	call   c0024638 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025651:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025655:	83 c4 10             	add    esp,0x10
c0025658:	b8 01 00 00 00       	mov    eax,0x1
c002565d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025662:	0f 84 cb 01 00 00    	je     c0025833 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025668:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002566c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025670:	c1 e0 09             	shl    eax,0x9
c0025673:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002567c:	74 0e                	je     c002568c <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002567e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025684:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025688:	89 c1                	mov    ecx,eax
c002568a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002568c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025690:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025696:	8d 42 02             	lea    eax,[edx+0x2]
c0025699:	c1 e0 07             	shl    eax,0x7
c002569c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00256a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00256a2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00256a8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00256ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256b2:	c1 e1 05             	shl    ecx,0x5
c00256b5:	01 c8                	add    eax,ecx
c00256b7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00256bb:	83 e1 01             	and    ecx,0x1
c00256be:	89 ce                	mov    esi,ecx
c00256c0:	8a 08                	mov    cl,BYTE PTR [eax]
c00256c2:	c1 e6 06             	shl    esi,0x6
c00256c5:	83 e1 bf             	and    ecx,0xffffffbf
c00256c8:	09 f1                	or     ecx,esi
c00256ca:	88 08                	mov    BYTE PTR [eax],cl
c00256cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00256ce:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00256d4:	81 c9 05 00 01 00    	or     ecx,0x10005
c00256da:	89 08                	mov    DWORD PTR [eax],ecx
c00256dc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00256e2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00256e8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00256ee:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00256f1:	50                   	push   eax
c00256f2:	68 90 00 00 00       	push   0x90
c00256f7:	6a 00                	push   0x0
c00256f9:	56                   	push   esi
c00256fa:	e8 51 b0 fd ff       	call   c0000750 <memset>
c00256ff:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025705:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025709:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002570f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025713:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025717:	83 c4 10             	add    esp,0x10
c002571a:	48                   	dec    eax
c002571b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025720:	89 c1                	mov    ecx,eax
c0025722:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025728:	25 00 00 c0 ff       	and    eax,0xffc00000
c002572d:	09 c8                	or     eax,ecx
c002572f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025735:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025738:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002573f:	66 25 00 7f          	and    ax,0x7f00
c0025743:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025747:	66 0d 27 80          	or     ax,0x8027
c002574b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025750:	66 89 06             	mov    WORD PTR [esi],ax
c0025753:	19 c0                	sbb    eax,eax
c0025755:	83 e0 f0             	and    eax,0xfffffff0
c0025758:	83 c0 35             	add    eax,0x35
c002575b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002575e:	89 e8                	mov    eax,ebp
c0025760:	c1 e8 10             	shr    eax,0x10
c0025763:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025766:	89 e8                	mov    eax,ebp
c0025768:	c1 e8 18             	shr    eax,0x18
c002576b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002576e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025772:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025775:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025779:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002577c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025780:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025784:	89 d6                	mov    esi,edx
c0025786:	31 c0                	xor    eax,eax
c0025788:	c1 e6 07             	shl    esi,0x7
c002578b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002578f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025795:	80 e1 88             	and    cl,0x88
c0025798:	74 0a                	je     c00257a4 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002579a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002579f:	74 0a                	je     c00257ab <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00257a1:	40                   	inc    eax
c00257a2:	eb eb                	jmp    c002578f <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00257a4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00257a9:	75 0a                	jne    c00257b5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00257ab:	83 ec 0c             	sub    esp,0xc
c00257ae:	68 a1 db 02 c0       	push   0xc002dba1
c00257b3:	eb 56                	jmp    c002580b <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00257b5:	b8 01 00 00 00       	mov    eax,0x1
c00257ba:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00257be:	c1 e2 07             	shl    edx,0x7
c00257c1:	d3 e0                	shl    eax,cl
c00257c3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00257c7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00257cd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00257d3:	85 c8                	test   eax,ecx
c00257d5:	74 20                	je     c00257f7 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00257d7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00257dd:	0f ba e1 1e          	bt     ecx,0x1e
c00257e1:	73 ea                	jae    c00257cd <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00257e3:	83 ec 0c             	sub    esp,0xc
c00257e6:	68 af db 02 c0       	push   0xc002dbaf
c00257eb:	e8 bf 4b ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00257f0:	83 c4 10             	add    esp,0x10
c00257f3:	31 c0                	xor    eax,eax
c00257f5:	eb 3c                	jmp    c0025833 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257f7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00257fd:	0f ba e0 1e          	bt     eax,0x1e
c0025801:	73 17                	jae    c002581a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025803:	83 ec 0c             	sub    esp,0xc
c0025806:	68 af db 02 c0       	push   0xc002dbaf
c002580b:	e8 9f 4b ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025810:	83 c4 10             	add    esp,0x10
c0025813:	b8 01 00 00 00       	mov    eax,0x1
c0025818:	eb 19                	jmp    c0025833 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002581a:	31 c0                	xor    eax,eax
c002581c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025821:	75 10                	jne    c0025833 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025823:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025829:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002582d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025831:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025833:	83 c4 2c             	add    esp,0x2c
c0025836:	5b                   	pop    ebx
c0025837:	5e                   	pop    esi
c0025838:	5f                   	pop    edi
c0025839:	5d                   	pop    ebp
c002583a:	c3                   	ret    
c002583b:	90                   	nop

c002583c <SATA::read(unsigned long long, int, void*)>:
c002583c:	57                   	push   edi
c002583d:	b8 04 00 00 00       	mov    eax,0x4
c0025842:	56                   	push   esi
c0025843:	53                   	push   ebx
c0025844:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025848:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002584c:	8d 7a ff             	lea    edi,[edx-0x1]
c002584f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025853:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025857:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002585d:	77 25                	ja     c0025884 <SATA::read(unsigned long long, int, void*)+0x48>
c002585f:	b8 06 00 00 00       	mov    eax,0x6
c0025864:	85 f6                	test   esi,esi
c0025866:	74 1c                	je     c0025884 <SATA::read(unsigned long long, int, void*)+0x48>
c0025868:	50                   	push   eax
c0025869:	50                   	push   eax
c002586a:	6a 00                	push   0x0
c002586c:	56                   	push   esi
c002586d:	52                   	push   edx
c002586e:	53                   	push   ebx
c002586f:	51                   	push   ecx
c0025870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025874:	e8 5d fd ff ff       	call   c00255d6 <SATA::access(unsigned long long, int, void*, bool)>
c0025879:	83 c4 20             	add    esp,0x20
c002587c:	85 c0                	test   eax,eax
c002587e:	0f 95 c0             	setne  al
c0025881:	0f b6 c0             	movzx  eax,al
c0025884:	5b                   	pop    ebx
c0025885:	5e                   	pop    esi
c0025886:	5f                   	pop    edi
c0025887:	c3                   	ret    

c0025888 <SATA::write(unsigned long long, int, void*)>:
c0025888:	55                   	push   ebp
c0025889:	b8 04 00 00 00       	mov    eax,0x4
c002588e:	57                   	push   edi
c002588f:	56                   	push   esi
c0025890:	53                   	push   ebx
c0025891:	83 ec 0c             	sub    esp,0xc
c0025894:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025898:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002589c:	8d 73 ff             	lea    esi,[ebx-0x1]
c002589f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00258a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00258a7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00258ad:	77 3d                	ja     c00258ec <SATA::write(unsigned long long, int, void*)+0x64>
c00258af:	b8 06 00 00 00       	mov    eax,0x6
c00258b4:	85 ed                	test   ebp,ebp
c00258b6:	74 34                	je     c00258ec <SATA::write(unsigned long long, int, void*)+0x64>
c00258b8:	c1 e3 09             	shl    ebx,0x9
c00258bb:	01 eb                	add    ebx,ebp
c00258bd:	89 d6                	mov    esi,edx
c00258bf:	89 cf                	mov    edi,ecx
c00258c1:	83 c6 01             	add    esi,0x1
c00258c4:	83 d7 00             	adc    edi,0x0
c00258c7:	50                   	push   eax
c00258c8:	50                   	push   eax
c00258c9:	6a 01                	push   0x1
c00258cb:	55                   	push   ebp
c00258cc:	81 c5 00 02 00 00    	add    ebp,0x200
c00258d2:	6a 01                	push   0x1
c00258d4:	51                   	push   ecx
c00258d5:	52                   	push   edx
c00258d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00258da:	e8 f7 fc ff ff       	call   c00255d6 <SATA::access(unsigned long long, int, void*, bool)>
c00258df:	83 c4 20             	add    esp,0x20
c00258e2:	89 f2                	mov    edx,esi
c00258e4:	89 f9                	mov    ecx,edi
c00258e6:	39 dd                	cmp    ebp,ebx
c00258e8:	75 d3                	jne    c00258bd <SATA::write(unsigned long long, int, void*)+0x35>
c00258ea:	31 c0                	xor    eax,eax
c00258ec:	83 c4 0c             	add    esp,0xc
c00258ef:	5b                   	pop    ebx
c00258f0:	5e                   	pop    esi
c00258f1:	5f                   	pop    edi
c00258f2:	5d                   	pop    ebp
c00258f3:	c3                   	ret    

c00258f4 <SATAPI::write(unsigned long long, int, void*)>:
c00258f4:	b8 03 00 00 00       	mov    eax,0x3
c00258f9:	c3                   	ret    

c00258fa <SATAPI::close(int, int, void*)>:
c00258fa:	83 ec 0c             	sub    esp,0xc
c00258fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025901:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025907:	85 c0                	test   eax,eax
c0025909:	74 0c                	je     c0025917 <SATAPI::close(int, int, void*)+0x1d>
c002590b:	83 ec 0c             	sub    esp,0xc
c002590e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025910:	50                   	push   eax
c0025911:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025914:	83 c4 10             	add    esp,0x10
c0025917:	31 c0                	xor    eax,eax
c0025919:	83 c4 0c             	add    esp,0xc
c002591c:	c3                   	ret    
c002591d:	90                   	nop

c002591e <SATAPI::SATAPI()>:
c002591e:	83 ec 0c             	sub    esp,0xc
c0025921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025925:	83 ec 04             	sub    esp,0x4
c0025928:	68 00 08 00 00       	push   0x800
c002592d:	68 f8 db 02 c0       	push   0xc002dbf8
c0025932:	50                   	push   eax
c0025933:	e8 42 e8 fe ff       	call   c001417a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025938:	83 c4 10             	add    esp,0x10
c002593b:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0025940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025944:	89 10                	mov    DWORD PTR [eax],edx
c0025946:	90                   	nop
c0025947:	83 c4 0c             	add    esp,0xc
c002594a:	c3                   	ret    
c002594b:	90                   	nop

c002594c <SATAPI::diskRemoved()>:
c002594c:	83 ec 18             	sub    esp,0x18
c002594f:	68 04 dc 02 c0       	push   0xc002dc04
c0025954:	e8 a2 cf fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0025959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002595d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025964:	83 c4 1c             	add    esp,0x1c
c0025967:	c3                   	ret    

c0025968 <SATAPI::diskInserted()>:
c0025968:	53                   	push   ebx
c0025969:	83 ec 14             	sub    esp,0x14
c002596c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025970:	68 1b dc 02 c0       	push   0xc002dc1b
c0025975:	e8 81 cf fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002597a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025981:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025984:	e8 59 e8 fe ff       	call   c00141e2 <PhysicalDisk::startCache()>
c0025989:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002598d:	83 c4 18             	add    esp,0x18
c0025990:	5b                   	pop    ebx
c0025991:	e9 06 0b ff ff       	jmp    c001649c <createPartitionsForDisk(PhysicalDisk*)>

c0025996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025996:	55                   	push   ebp
c0025997:	57                   	push   edi
c0025998:	56                   	push   esi
c0025999:	53                   	push   ebx
c002599a:	83 ec 34             	sub    esp,0x34
c002599d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00259a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259a5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00259a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00259ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00259b1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00259b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00259c1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00259c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00259cb:	c1 e0 07             	shl    eax,0x7
c00259ce:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00259d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00259d6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00259e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259e4:	8d 58 02             	lea    ebx,[eax+0x2]
c00259e7:	c1 e3 07             	shl    ebx,0x7
c00259ea:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00259ee:	53                   	push   ebx
c00259ef:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00259f5:	e8 3e ec ff ff       	call   c0024638 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00259fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00259fe:	83 c4 10             	add    esp,0x10
c0025a01:	b8 01 00 00 00       	mov    eax,0x1
c0025a06:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025a0b:	0f 84 85 01 00 00    	je     c0025b96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a11:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025a19:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025a1f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025a25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a29:	c1 e1 05             	shl    ecx,0x5
c0025a2c:	01 c8                	add    eax,ecx
c0025a2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025a30:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025a36:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025a3c:	89 08                	mov    DWORD PTR [eax],ecx
c0025a3e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a44:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025a4a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025a50:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025a53:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025a56:	50                   	push   eax
c0025a57:	68 90 00 00 00       	push   0x90
c0025a5c:	6a 00                	push   0x0
c0025a5e:	53                   	push   ebx
c0025a5f:	e8 ec ac fd ff       	call   c0000750 <memset>
c0025a64:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025a68:	b9 0c 00 00 00       	mov    ecx,0xc
c0025a6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a6f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025a75:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025a79:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025a7f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025a83:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a87:	48                   	dec    eax
c0025a88:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a8d:	89 c1                	mov    ecx,eax
c0025a8f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025a95:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a9a:	09 c8                	or     eax,ecx
c0025a9c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025aa2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025aa5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025aac:	66 25 00 7f          	and    ax,0x7f00
c0025ab0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025ab4:	66 0d 27 80          	or     ax,0x8027
c0025ab8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025abc:	66 89 03             	mov    WORD PTR [ebx],ax
c0025abf:	89 d0                	mov    eax,edx
c0025ac1:	c1 ea 18             	shr    edx,0x18
c0025ac4:	c1 e8 10             	shr    eax,0x10
c0025ac7:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025aca:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025acd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025ad1:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025ad4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025ad8:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025adb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025adf:	83 c4 10             	add    esp,0x10
c0025ae2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025ae6:	31 c0                	xor    eax,eax
c0025ae8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025aec:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025af2:	80 e2 88             	and    dl,0x88
c0025af5:	74 0a                	je     c0025b01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025af7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025afc:	74 0a                	je     c0025b08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025afe:	40                   	inc    eax
c0025aff:	eb eb                	jmp    c0025aec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025b01:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b06:	75 0f                	jne    c0025b17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025b08:	83 ec 0c             	sub    esp,0xc
c0025b0b:	68 a1 db 02 c0       	push   0xc002dba1
c0025b10:	e8 9a 48 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025b15:	eb 3f                	jmp    c0025b56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025b17:	ba 01 00 00 00       	mov    edx,0x1
c0025b1c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025b24:	d3 e2                	shl    edx,cl
c0025b26:	c1 e0 07             	shl    eax,0x7
c0025b29:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025b2f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025b33:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025b39:	85 ca                	test   edx,ecx
c0025b3b:	74 23                	je     c0025b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025b3d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025b43:	0f ba e1 1e          	bt     ecx,0x1e
c0025b47:	73 ea                	jae    c0025b33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025b49:	83 ec 0c             	sub    esp,0xc
c0025b4c:	68 33 dc 02 c0       	push   0xc002dc33
c0025b51:	e8 a5 cd fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0025b56:	83 c4 10             	add    esp,0x10
c0025b59:	b8 01 00 00 00       	mov    eax,0x1
c0025b5e:	eb 36                	jmp    c0025b96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b60:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025b66:	0f ba e0 1e          	bt     eax,0x1e
c0025b6a:	73 0a                	jae    c0025b76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025b6c:	83 ec 0c             	sub    esp,0xc
c0025b6f:	68 46 dc 02 c0       	push   0xc002dc46
c0025b74:	eb db                	jmp    c0025b51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025b76:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025b7b:	74 17                	je     c0025b94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b7d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025b82:	74 10                	je     c0025b94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b84:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025b8a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025b8e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025b92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b94:	31 c0                	xor    eax,eax
c0025b96:	83 c4 2c             	add    esp,0x2c
c0025b99:	5b                   	pop    ebx
c0025b9a:	5e                   	pop    esi
c0025b9b:	5f                   	pop    edi
c0025b9c:	5d                   	pop    ebp
c0025b9d:	c3                   	ret    

c0025b9e <SATAPI::eject()>:
c0025b9e:	57                   	push   edi
c0025b9f:	b9 03 00 00 00       	mov    ecx,0x3
c0025ba4:	53                   	push   ebx
c0025ba5:	83 ec 14             	sub    esp,0x14
c0025ba8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025bac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025bb0:	fc                   	cld    
c0025bb1:	31 c0                	xor    eax,eax
c0025bb3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025bb5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025bba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025bbf:	50                   	push   eax
c0025bc0:	6a 00                	push   0x0
c0025bc2:	6a 00                	push   0x0
c0025bc4:	6a 00                	push   0x0
c0025bc6:	6a 00                	push   0x0
c0025bc8:	6a 02                	push   0x2
c0025bca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025bce:	50                   	push   eax
c0025bcf:	53                   	push   ebx
c0025bd0:	e8 c1 fd ff ff       	call   c0025996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025bd5:	83 c4 14             	add    esp,0x14
c0025bd8:	53                   	push   ebx
c0025bd9:	e8 6e fd ff ff       	call   c002594c <SATAPI::diskRemoved()>
c0025bde:	83 c4 24             	add    esp,0x24
c0025be1:	31 c0                	xor    eax,eax
c0025be3:	5b                   	pop    ebx
c0025be4:	5f                   	pop    edi
c0025be5:	c3                   	ret    

c0025be6 <SATAPI::detectMedia()>:
c0025be6:	56                   	push   esi
c0025be7:	53                   	push   ebx
c0025be8:	83 ec 28             	sub    esp,0x28
c0025beb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025bef:	6a 0c                	push   0xc
c0025bf1:	6a 00                	push   0x0
c0025bf3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025bf7:	56                   	push   esi
c0025bf8:	e8 53 ab fd ff       	call   c0000750 <memset>
c0025bfd:	83 c4 0c             	add    esp,0xc
c0025c00:	6a 00                	push   0x0
c0025c02:	6a 00                	push   0x0
c0025c04:	6a 00                	push   0x0
c0025c06:	6a 00                	push   0x0
c0025c08:	6a 00                	push   0x0
c0025c0a:	56                   	push   esi
c0025c0b:	53                   	push   ebx
c0025c0c:	e8 85 fd ff ff       	call   c0025996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c11:	83 c4 1c             	add    esp,0x1c
c0025c14:	6a 0c                	push   0xc
c0025c16:	6a 00                	push   0x0
c0025c18:	56                   	push   esi
c0025c19:	e8 32 ab fd ff       	call   c0000750 <memset>
c0025c1e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025c23:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025c28:	83 c4 0c             	add    esp,0xc
c0025c2b:	6a 01                	push   0x1
c0025c2d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025c31:	50                   	push   eax
c0025c32:	6a 00                	push   0x0
c0025c34:	6a 00                	push   0x0
c0025c36:	6a 12                	push   0x12
c0025c38:	56                   	push   esi
c0025c39:	53                   	push   ebx
c0025c3a:	e8 57 fd ff ff       	call   c0025996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c3f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025c43:	83 c4 20             	add    esp,0x20
c0025c46:	83 e0 7f             	and    eax,0x7f
c0025c49:	3c 70                	cmp    al,0x70
c0025c4b:	74 15                	je     c0025c62 <SATAPI::detectMedia()+0x7c>
c0025c4d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c54:	75 0c                	jne    c0025c62 <SATAPI::detectMedia()+0x7c>
c0025c56:	83 ec 0c             	sub    esp,0xc
c0025c59:	53                   	push   ebx
c0025c5a:	e8 09 fd ff ff       	call   c0025968 <SATAPI::diskInserted()>
c0025c5f:	83 c4 10             	add    esp,0x10
c0025c62:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025c66:	83 e0 0f             	and    eax,0xf
c0025c69:	3c 02                	cmp    al,0x2
c0025c6b:	75 1b                	jne    c0025c88 <SATAPI::detectMedia()+0xa2>
c0025c6d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025c72:	75 2d                	jne    c0025ca1 <SATAPI::detectMedia()+0xbb>
c0025c74:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c7b:	74 24                	je     c0025ca1 <SATAPI::detectMedia()+0xbb>
c0025c7d:	83 ec 0c             	sub    esp,0xc
c0025c80:	53                   	push   ebx
c0025c81:	e8 c6 fc ff ff       	call   c002594c <SATAPI::diskRemoved()>
c0025c86:	eb 16                	jmp    c0025c9e <SATAPI::detectMedia()+0xb8>
c0025c88:	84 c0                	test   al,al
c0025c8a:	75 15                	jne    c0025ca1 <SATAPI::detectMedia()+0xbb>
c0025c8c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c93:	75 0c                	jne    c0025ca1 <SATAPI::detectMedia()+0xbb>
c0025c95:	83 ec 0c             	sub    esp,0xc
c0025c98:	53                   	push   ebx
c0025c99:	e8 ca fc ff ff       	call   c0025968 <SATAPI::diskInserted()>
c0025c9e:	83 c4 10             	add    esp,0x10
c0025ca1:	83 c4 24             	add    esp,0x24
c0025ca4:	5b                   	pop    ebx
c0025ca5:	5e                   	pop    esi
c0025ca6:	c3                   	ret    
c0025ca7:	90                   	nop

c0025ca8 <SATAPI::open(int, int, void*)>:
c0025ca8:	56                   	push   esi
c0025ca9:	53                   	push   ebx
c0025caa:	50                   	push   eax
c0025cab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cb3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025cbd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025cc3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025ccd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cd1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025cdb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025ce1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025ce8:	e8 b9 9f fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025ced:	89 c6                	mov    esi,eax
c0025cef:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025cf5:	81 c6 00 10 00 00    	add    esi,0x1000
c0025cfb:	e8 a6 9f fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025d00:	39 c6                	cmp    esi,eax
c0025d02:	74 10                	je     c0025d14 <SATAPI::open(int, int, void*)+0x6c>
c0025d04:	83 ec 0c             	sub    esp,0xc
c0025d07:	68 5b dc 02 c0       	push   0xc002dc5b
c0025d0c:	e8 9e 46 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025d11:	83 c4 10             	add    esp,0x10
c0025d14:	83 ec 0c             	sub    esp,0xc
c0025d17:	6a 02                	push   0x2
c0025d19:	e8 d7 b7 fe ff       	call   c00114f5 <Virt::allocateKernelVirtualPages(int)>
c0025d1e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025d24:	6a 03                	push   0x3
c0025d26:	50                   	push   eax
c0025d27:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025d2d:	ff 35 b0 f3 02 c0    	push   DWORD PTR ds:0xc002f3b0
c0025d33:	e8 f4 bf fe ff       	call   c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025d38:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025d3f:	83 c4 14             	add    esp,0x14
c0025d42:	53                   	push   ebx
c0025d43:	e8 9e fe ff ff       	call   c0025be6 <SATAPI::detectMedia()>
c0025d48:	83 c4 14             	add    esp,0x14
c0025d4b:	31 c0                	xor    eax,eax
c0025d4d:	5b                   	pop    ebx
c0025d4e:	5e                   	pop    esi
c0025d4f:	c3                   	ret    

c0025d50 <SATAPI::read(unsigned long long, int, void*)>:
c0025d50:	55                   	push   ebp
c0025d51:	57                   	push   edi
c0025d52:	56                   	push   esi
c0025d53:	53                   	push   ebx
c0025d54:	83 ec 1c             	sub    esp,0x1c
c0025d57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d5f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025d63:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d6a:	74 19                	je     c0025d85 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025d6c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025d71:	7e 2e                	jle    c0025da1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d73:	83 ec 0c             	sub    esp,0xc
c0025d76:	68 71 dc 02 c0       	push   0xc002dc71
c0025d7b:	e8 2f 46 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0025d80:	83 c4 10             	add    esp,0x10
c0025d83:	eb 1c                	jmp    c0025da1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d85:	83 ec 0c             	sub    esp,0xc
c0025d88:	55                   	push   ebp
c0025d89:	e8 58 fe ff ff       	call   c0025be6 <SATAPI::detectMedia()>
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	b8 02 00 00 00       	mov    eax,0x2
c0025d96:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d9d:	75 cd                	jne    c0025d6c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025d9f:	eb 49                	jmp    c0025dea <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025da1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025da5:	b9 03 00 00 00       	mov    ecx,0x3
c0025daa:	fc                   	cld    
c0025dab:	31 c0                	xor    eax,eax
c0025dad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025daf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025db4:	89 d8                	mov    eax,ebx
c0025db6:	86 e0                	xchg   al,ah
c0025db8:	c1 c0 10             	rol    eax,0x10
c0025dbb:	86 e0                	xchg   al,ah
c0025dbd:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025dc1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025dc5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025dc9:	50                   	push   eax
c0025dca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025dce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025dd2:	56                   	push   esi
c0025dd3:	53                   	push   ebx
c0025dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025dd8:	c1 e0 0b             	shl    eax,0xb
c0025ddb:	50                   	push   eax
c0025ddc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025de0:	50                   	push   eax
c0025de1:	55                   	push   ebp
c0025de2:	e8 af fb ff ff       	call   c0025996 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025de7:	83 c4 20             	add    esp,0x20
c0025dea:	83 c4 1c             	add    esp,0x1c
c0025ded:	5b                   	pop    ebx
c0025dee:	5e                   	pop    esi
c0025def:	5f                   	pop    edi
c0025df0:	5d                   	pop    ebp
c0025df1:	c3                   	ret    

c0025df2 <AVX::open(int, int, void*)>:
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	e8 3e 11 00 00       	call   c0026f38 <avxInit>
c0025dfa:	b8 00 00 00 00       	mov    eax,0x0
c0025dff:	83 c4 0c             	add    esp,0xc
c0025e02:	c3                   	ret    
c0025e03:	90                   	nop

c0025e04 <AVX::close(int, int, void*)>:
c0025e04:	83 ec 0c             	sub    esp,0xc
c0025e07:	e8 2d 11 00 00       	call   c0026f39 <avxClose>
c0025e0c:	b8 00 00 00 00       	mov    eax,0x0
c0025e11:	83 c4 0c             	add    esp,0xc
c0025e14:	c3                   	ret    
c0025e15:	90                   	nop

c0025e16 <AVX::available()>:
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	e8 12 11 00 00       	call   c0026f30 <avxDetect>
c0025e1e:	85 c0                	test   eax,eax
c0025e20:	0f 95 c0             	setne  al
c0025e23:	83 c4 0c             	add    esp,0xc
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <AVX::save(void*)>:
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e2f:	83 ec 0c             	sub    esp,0xc
c0025e32:	50                   	push   eax
c0025e33:	e8 fe 10 00 00       	call   c0026f36 <avxSave>
c0025e38:	83 c4 10             	add    esp,0x10
c0025e3b:	90                   	nop
c0025e3c:	83 c4 0c             	add    esp,0xc
c0025e3f:	c3                   	ret    

c0025e40 <AVX::load(void*)>:
c0025e40:	83 ec 0c             	sub    esp,0xc
c0025e43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e47:	83 ec 0c             	sub    esp,0xc
c0025e4a:	50                   	push   eax
c0025e4b:	e8 e7 10 00 00       	call   c0026f37 <avxLoad>
c0025e50:	83 c4 10             	add    esp,0x10
c0025e53:	90                   	nop
c0025e54:	83 c4 0c             	add    esp,0xc
c0025e57:	c3                   	ret    

c0025e58 <AVX::AVX()>:
c0025e58:	83 ec 0c             	sub    esp,0xc
c0025e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5f:	83 ec 08             	sub    esp,0x8
c0025e62:	68 d4 dc 02 c0       	push   0xc002dcd4
c0025e67:	50                   	push   eax
c0025e68:	e8 eb e3 fe ff       	call   c0014258 <FPU::FPU(char const*)>
c0025e6d:	83 c4 10             	add    esp,0x10
c0025e70:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0025e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e79:	89 10                	mov    DWORD PTR [eax],edx
c0025e7b:	90                   	nop
c0025e7c:	83 c4 0c             	add    esp,0xc
c0025e7f:	c3                   	ret    

c0025e80 <MMX::available()>:
c0025e80:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0025e85:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025e8b:	83 e0 20             	and    eax,0x20
c0025e8e:	84 c0                	test   al,al
c0025e90:	0f 95 c0             	setne  al
c0025e93:	c3                   	ret    

c0025e94 <MMX::open(int, int, void*)>:
c0025e94:	83 ec 0c             	sub    esp,0xc
c0025e97:	e8 26 11 00 00       	call   c0026fc2 <x87Init>
c0025e9c:	b8 00 00 00 00       	mov    eax,0x0
c0025ea1:	83 c4 0c             	add    esp,0xc
c0025ea4:	c3                   	ret    
c0025ea5:	90                   	nop

c0025ea6 <MMX::close(int, int, void*)>:
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	e8 2e 11 00 00       	call   c0026fdc <x87Close>
c0025eae:	b8 00 00 00 00       	mov    eax,0x0
c0025eb3:	83 c4 0c             	add    esp,0xc
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop

c0025eb8 <MMX::save(void*)>:
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ebf:	83 ec 0c             	sub    esp,0xc
c0025ec2:	50                   	push   eax
c0025ec3:	e8 e9 10 00 00       	call   c0026fb1 <x87Save>
c0025ec8:	83 c4 10             	add    esp,0x10
c0025ecb:	90                   	nop
c0025ecc:	83 c4 0c             	add    esp,0xc
c0025ecf:	c3                   	ret    

c0025ed0 <MMX::load(void*)>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ed7:	83 ec 0c             	sub    esp,0xc
c0025eda:	50                   	push   eax
c0025edb:	e8 da 10 00 00       	call   c0026fba <x87Load>
c0025ee0:	83 c4 10             	add    esp,0x10
c0025ee3:	90                   	nop
c0025ee4:	83 c4 0c             	add    esp,0xc
c0025ee7:	c3                   	ret    

c0025ee8 <MMX::MMX()>:
c0025ee8:	83 ec 0c             	sub    esp,0xc
c0025eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eef:	83 ec 08             	sub    esp,0x8
c0025ef2:	68 14 dd 02 c0       	push   0xc002dd14
c0025ef7:	50                   	push   eax
c0025ef8:	e8 5b e3 fe ff       	call   c0014258 <FPU::FPU(char const*)>
c0025efd:	83 c4 10             	add    esp,0x10
c0025f00:	ba 24 dd 02 c0       	mov    edx,0xc002dd24
c0025f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f09:	89 10                	mov    DWORD PTR [eax],edx
c0025f0b:	90                   	nop
c0025f0c:	83 c4 0c             	add    esp,0xc
c0025f0f:	c3                   	ret    

c0025f10 <SSE::open(int, int, void*)>:
c0025f10:	83 ec 0c             	sub    esp,0xc
c0025f13:	e8 5c 10 00 00       	call   c0026f74 <sseInit>
c0025f18:	b8 00 00 00 00       	mov    eax,0x0
c0025f1d:	83 c4 0c             	add    esp,0xc
c0025f20:	c3                   	ret    
c0025f21:	90                   	nop

c0025f22 <SSE::close(int, int, void*)>:
c0025f22:	83 ec 0c             	sub    esp,0xc
c0025f25:	e8 5a 10 00 00       	call   c0026f84 <sseClose>
c0025f2a:	b8 00 00 00 00       	mov    eax,0x0
c0025f2f:	83 c4 0c             	add    esp,0xc
c0025f32:	c3                   	ret    
c0025f33:	90                   	nop

c0025f34 <SSE::available()>:
c0025f34:	83 ec 1c             	sub    esp,0x1c
c0025f37:	e8 14 10 00 00       	call   c0026f50 <absolutelyNoChanceInHell>
c0025f3c:	85 c0                	test   eax,eax
c0025f3e:	0f 95 c0             	setne  al
c0025f41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025f45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025f49:	83 c4 1c             	add    esp,0x1c
c0025f4c:	c3                   	ret    
c0025f4d:	90                   	nop

c0025f4e <SSE::save(void*)>:
c0025f4e:	83 ec 0c             	sub    esp,0xc
c0025f51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f55:	83 ec 0c             	sub    esp,0xc
c0025f58:	50                   	push   eax
c0025f59:	e8 0a 10 00 00       	call   c0026f68 <sseSave>
c0025f5e:	83 c4 10             	add    esp,0x10
c0025f61:	90                   	nop
c0025f62:	83 c4 0c             	add    esp,0xc
c0025f65:	c3                   	ret    

c0025f66 <SSE::load(void*)>:
c0025f66:	83 ec 0c             	sub    esp,0xc
c0025f69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f6d:	83 ec 0c             	sub    esp,0xc
c0025f70:	50                   	push   eax
c0025f71:	e8 f8 0f 00 00       	call   c0026f6e <sseLoad>
c0025f76:	83 c4 10             	add    esp,0x10
c0025f79:	90                   	nop
c0025f7a:	83 c4 0c             	add    esp,0xc
c0025f7d:	c3                   	ret    

c0025f7e <SSE::SSE()>:
c0025f7e:	83 ec 0c             	sub    esp,0xc
c0025f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f85:	83 ec 08             	sub    esp,0x8
c0025f88:	68 54 dd 02 c0       	push   0xc002dd54
c0025f8d:	50                   	push   eax
c0025f8e:	e8 c5 e2 fe ff       	call   c0014258 <FPU::FPU(char const*)>
c0025f93:	83 c4 10             	add    esp,0x10
c0025f96:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c0025f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9f:	89 10                	mov    DWORD PTR [eax],edx
c0025fa1:	90                   	nop
c0025fa2:	83 c4 0c             	add    esp,0xc
c0025fa5:	c3                   	ret    

c0025fa6 <x87::open(int, int, void*)>:
c0025fa6:	83 ec 0c             	sub    esp,0xc
c0025fa9:	e8 14 10 00 00       	call   c0026fc2 <x87Init>
c0025fae:	b8 00 00 00 00       	mov    eax,0x0
c0025fb3:	83 c4 0c             	add    esp,0xc
c0025fb6:	c3                   	ret    
c0025fb7:	90                   	nop

c0025fb8 <x87::close(int, int, void*)>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	e8 1c 10 00 00       	call   c0026fdc <x87Close>
c0025fc0:	b8 00 00 00 00       	mov    eax,0x0
c0025fc5:	83 c4 0c             	add    esp,0xc
c0025fc8:	c3                   	ret    
c0025fc9:	90                   	nop

c0025fca <x87::available()>:
c0025fca:	83 ec 0c             	sub    esp,0xc
c0025fcd:	e8 c4 0f 00 00       	call   c0026f96 <x87Detect>
c0025fd2:	85 c0                	test   eax,eax
c0025fd4:	0f 95 c0             	setne  al
c0025fd7:	83 c4 0c             	add    esp,0xc
c0025fda:	c3                   	ret    
c0025fdb:	90                   	nop

c0025fdc <x87::save(void*)>:
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe3:	83 ec 0c             	sub    esp,0xc
c0025fe6:	50                   	push   eax
c0025fe7:	e8 c5 0f 00 00       	call   c0026fb1 <x87Save>
c0025fec:	83 c4 10             	add    esp,0x10
c0025fef:	90                   	nop
c0025ff0:	83 c4 0c             	add    esp,0xc
c0025ff3:	c3                   	ret    

c0025ff4 <x87::load(void*)>:
c0025ff4:	83 ec 0c             	sub    esp,0xc
c0025ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ffb:	83 ec 0c             	sub    esp,0xc
c0025ffe:	50                   	push   eax
c0025fff:	e8 b6 0f 00 00       	call   c0026fba <x87Load>
c0026004:	83 c4 10             	add    esp,0x10
c0026007:	90                   	nop
c0026008:	83 c4 0c             	add    esp,0xc
c002600b:	c3                   	ret    

c002600c <x87::x87()>:
c002600c:	83 ec 0c             	sub    esp,0xc
c002600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026013:	83 ec 08             	sub    esp,0x8
c0026016:	68 94 dd 02 c0       	push   0xc002dd94
c002601b:	50                   	push   eax
c002601c:	e8 37 e2 fe ff       	call   c0014258 <FPU::FPU(char const*)>
c0026021:	83 c4 10             	add    esp,0x10
c0026024:	ba a4 dd 02 c0       	mov    edx,0xc002dda4
c0026029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602d:	89 10                	mov    DWORD PTR [eax],edx
c002602f:	90                   	nop
c0026030:	83 c4 0c             	add    esp,0xc
c0026033:	c3                   	ret    

c0026034 <APIC::disable()>:
c0026034:	90                   	nop
c0026035:	c3                   	ret    

c0026036 <APIC::close(int, int, void*)>:
c0026036:	55                   	push   ebp
c0026037:	89 e5                	mov    ebp,esp
c0026039:	83 ec 08             	sub    esp,0x8
c002603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002603f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026041:	83 c0 3c             	add    eax,0x3c
c0026044:	8b 00                	mov    eax,DWORD PTR [eax]
c0026046:	83 ec 0c             	sub    esp,0xc
c0026049:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002604c:	ff d0                	call   eax
c002604e:	83 c4 10             	add    esp,0x10
c0026051:	b8 00 00 00 00       	mov    eax,0x0
c0026056:	c9                   	leave  
c0026057:	c3                   	ret    

c0026058 <IOAPIC::close(int, int, void*)>:
c0026058:	b8 00 00 00 00       	mov    eax,0x0
c002605d:	c3                   	ret    

c002605e <APIC::io_wait()>:
c002605e:	eb 00                	jmp    c0026060 <APIC::io_wait()+0x2>
c0026060:	eb 00                	jmp    c0026062 <APIC::io_wait()+0x4>
c0026062:	90                   	nop
c0026063:	c3                   	ret    

c0026064 <APIC::getBase()>:
c0026064:	55                   	push   ebp
c0026065:	89 e5                	mov    ebp,esp
c0026067:	83 ec 18             	sub    esp,0x18
c002606a:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c002606f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026075:	83 e0 08             	and    eax,0x8
c0026078:	84 c0                	test   al,al
c002607a:	75 07                	jne    c0026083 <APIC::getBase()+0x1f>
c002607c:	b8 00 00 00 00       	mov    eax,0x0
c0026081:	eb 21                	jmp    c00260a4 <APIC::getBase()+0x40>
c0026083:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0026088:	83 ec 08             	sub    esp,0x8
c002608b:	6a 1b                	push   0x1b
c002608d:	50                   	push   eax
c002608e:	e8 f1 8d fe ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c0026093:	83 c4 10             	add    esp,0x10
c0026096:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026099:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002609c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002609f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00260a4:	c9                   	leave  
c00260a5:	c3                   	ret    

c00260a6 <APIC::eoi(unsigned char)>:
c00260a6:	55                   	push   ebp
c00260a7:	89 e5                	mov    ebp,esp
c00260a9:	83 ec 28             	sub    esp,0x28
c00260ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00260b2:	83 ec 0c             	sub    esp,0xc
c00260b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b8:	e8 a7 ff ff ff       	call   c0026064 <APIC::getBase()>
c00260bd:	83 c4 10             	add    esp,0x10
c00260c0:	05 b0 00 00 00       	add    eax,0xb0
c00260c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00260c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00260d1:	90                   	nop
c00260d2:	c9                   	leave  
c00260d3:	c3                   	ret    

c00260d4 <APIC::open(int, int, void*)>:
c00260d4:	55                   	push   ebp
c00260d5:	89 e5                	mov    ebp,esp
c00260d7:	57                   	push   edi
c00260d8:	56                   	push   esi
c00260d9:	53                   	push   ebx
c00260da:	83 ec 2c             	sub    esp,0x2c
c00260dd:	83 ec 0c             	sub    esp,0xc
c00260e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e3:	e8 7c ff ff ff       	call   c0026064 <APIC::getBase()>
c00260e8:	83 c4 10             	add    esp,0x10
c00260eb:	89 c2                	mov    edx,eax
c00260ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260f6:	0f b6 f8             	movzx  edi,al
c00260f9:	89 d0                	mov    eax,edx
c00260fb:	ba 00 00 00 00       	mov    edx,0x0
c0026100:	89 c1                	mov    ecx,eax
c0026102:	80 e5 ff             	and    ch,0xff
c0026105:	89 cb                	mov    ebx,ecx
c0026107:	0f b6 f2             	movzx  esi,dl
c002610a:	89 d8                	mov    eax,ebx
c002610c:	89 f2                	mov    edx,esi
c002610e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026111:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026114:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026118:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002611c:	83 e0 00             	and    eax,0x0
c002611f:	09 d0                	or     eax,edx
c0026121:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026128:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002612e:	8d 50 01             	lea    edx,[eax+0x1]
c0026131:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026134:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002613a:	0f b6 d0             	movzx  edx,al
c002613d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026140:	83 c2 08             	add    edx,0x8
c0026143:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026147:	0f b6 c9             	movzx  ecx,cl
c002614a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026150:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615a:	e8 05 ff ff ff       	call   c0026064 <APIC::getBase()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	05 f0 00 00 00       	add    eax,0xf0
c0026167:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002616a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002616d:	8b 00                	mov    eax,DWORD PTR [eax]
c002616f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026172:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026179:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026180:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026183:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026186:	89 10                	mov    DWORD PTR [eax],edx
c0026188:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002618f:	a1 10 1b 03 c0       	mov    eax,ds:0xc0031b10
c0026194:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026197:	7d 7c                	jge    c0026215 <APIC::open(int, int, void*)+0x141>
c0026199:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002619c:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c00261a3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00261a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261a9:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c00261b0:	c1 e8 08             	shr    eax,0x8
c00261b3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00261b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261ba:	8b 04 85 20 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4e0]
c00261c1:	c1 e8 18             	shr    eax,0x18
c00261c4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00261c7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00261cb:	75 40                	jne    c002620d <APIC::open(int, int, void*)+0x139>
c00261cd:	83 ec 0c             	sub    esp,0xc
c00261d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d3:	e8 8c fe ff ff       	call   c0026064 <APIC::getBase()>
c00261d8:	83 c4 10             	add    esp,0x10
c00261db:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00261df:	75 07                	jne    c00261e8 <APIC::open(int, int, void*)+0x114>
c00261e1:	ba 60 03 00 00       	mov    edx,0x360
c00261e6:	eb 05                	jmp    c00261ed <APIC::open(int, int, void*)+0x119>
c00261e8:	ba 50 03 00 00       	mov    edx,0x350
c00261ed:	01 d0                	add    eax,edx
c00261ef:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00261f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00261f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261f7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00261fa:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026201:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026205:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026208:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002620b:	89 10                	mov    DWORD PTR [eax],edx
c002620d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026210:	e9 7a ff ff ff       	jmp    c002618f <APIC::open(int, int, void*)+0xbb>
c0026215:	b8 00 00 00 00       	mov    eax,0x0
c002621a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002621d:	5b                   	pop    ebx
c002621e:	5e                   	pop    esi
c002621f:	5f                   	pop    edi
c0026220:	5d                   	pop    ebp
c0026221:	c3                   	ret    

c0026222 <IOAPIC::IOAPIC()>:
c0026222:	83 ec 0c             	sub    esp,0xc
c0026225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026229:	83 ec 08             	sub    esp,0x8
c002622c:	68 d4 dd 02 c0       	push   0xc002ddd4
c0026231:	50                   	push   eax
c0026232:	e8 01 dd fe ff       	call   c0013f38 <Device::Device(char const*)>
c0026237:	83 c4 10             	add    esp,0x10
c002623a:	ba fc de 02 c0       	mov    edx,0xc002defc
c002623f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026243:	89 10                	mov    DWORD PTR [eax],edx
c0026245:	90                   	nop
c0026246:	83 c4 0c             	add    esp,0xc
c0026249:	c3                   	ret    

c002624a <APIC::APIC()>:
c002624a:	53                   	push   ebx
c002624b:	83 ec 18             	sub    esp,0x18
c002624e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026252:	83 ec 08             	sub    esp,0x8
c0026255:	68 dc dd 02 c0       	push   0xc002dddc
c002625a:	50                   	push   eax
c002625b:	e8 52 e4 fe ff       	call   c00146b2 <InterruptController::InterruptController(char const*)>
c0026260:	83 c4 10             	add    esp,0x10
c0026263:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0026268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002626c:	89 10                	mov    DWORD PTR [eax],edx
c002626e:	a0 e0 35 03 c0       	mov    al,ds:0xc00335e0
c0026273:	83 f0 01             	xor    eax,0x1
c0026276:	84 c0                	test   al,al
c0026278:	0f 84 a1 00 00 00    	je     c002631f <APIC::APIC()+0xd5>
c002627e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026283:	a0 c0 1b 03 c0       	mov    al,ds:0xc0031bc0
c0026288:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002628c:	0f 83 86 00 00 00    	jae    c0026318 <APIC::APIC()+0xce>
c0026292:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002629a:	83 ec 0c             	sub    esp,0xc
c002629d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262a1:	e8 5c 96 fe ff       	call   c000f902 <malloc>
c00262a6:	83 c4 10             	add    esp,0x10
c00262a9:	89 c3                	mov    ebx,eax
c00262ab:	83 ec 0c             	sub    esp,0xc
c00262ae:	53                   	push   ebx
c00262af:	e8 6e ff ff ff       	call   c0026222 <IOAPIC::IOAPIC()>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00262bb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00262c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00262c4:	89 14 85 c0 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffcca40],edx
c00262cb:	a1 a0 35 03 c0       	mov    eax,ds:0xc00335a0
c00262d0:	40                   	inc    eax
c00262d1:	a3 a0 35 03 c0       	mov    ds:0xc00335a0,eax
c00262d6:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00262db:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00262e1:	83 ec 08             	sub    esp,0x8
c00262e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262e8:	50                   	push   eax
c00262e9:	e8 46 da fe ff       	call   c0013d34 <Device::addChild(Device*)>
c00262ee:	83 c4 10             	add    esp,0x10
c00262f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00262f7:	83 c0 08             	add    eax,0x8
c00262fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00262fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026301:	6a 00                	push   0x0
c0026303:	6a 00                	push   0x0
c0026305:	52                   	push   edx
c0026306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002630a:	ff d0                	call   eax
c002630c:	83 c4 10             	add    esp,0x10
c002630f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026313:	e9 6b ff ff ff       	jmp    c0026283 <APIC::APIC()+0x39>
c0026318:	c6 05 e0 35 03 c0 01 	mov    BYTE PTR ds:0xc00335e0,0x1
c002631f:	90                   	nop
c0026320:	83 c4 18             	add    esp,0x18
c0026323:	5b                   	pop    ebx
c0026324:	c3                   	ret    
c0026325:	90                   	nop

c0026326 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026326:	55                   	push   ebp
c0026327:	89 e5                	mov    ebp,esp
c0026329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002632c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026332:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026335:	72 1d                	jb     c0026354 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026343:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026349:	01 d0                	add    eax,edx
c002634b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002634e:	73 04                	jae    c0026354 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026350:	b0 01                	mov    al,0x1
c0026352:	eb 02                	jmp    c0026356 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026354:	b0 00                	mov    al,0x0
c0026356:	5d                   	pop    ebp
c0026357:	c3                   	ret    

c0026358 <IOAPIC::read(int)>:
c0026358:	55                   	push   ebp
c0026359:	89 e5                	mov    ebp,esp
c002635b:	83 ec 10             	sub    esp,0x10
c002635e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026361:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026367:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002636a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002636d:	0f b6 d0             	movzx  edx,al
c0026370:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026373:	89 10                	mov    DWORD PTR [eax],edx
c0026375:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026378:	83 c0 10             	add    eax,0x10
c002637b:	8b 00                	mov    eax,DWORD PTR [eax]
c002637d:	c9                   	leave  
c002637e:	c3                   	ret    
c002637f:	90                   	nop

c0026380 <IOAPIC::open(int, int, void*)>:
c0026380:	55                   	push   ebp
c0026381:	89 e5                	mov    ebp,esp
c0026383:	57                   	push   edi
c0026384:	56                   	push   esi
c0026385:	53                   	push   ebx
c0026386:	83 ec 0c             	sub    esp,0xc
c0026389:	83 ec 0c             	sub    esp,0xc
c002638c:	68 07 de 02 c0       	push   0xc002de07
c0026391:	e8 65 c5 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0026396:	83 c4 10             	add    esp,0x10
c0026399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002639c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002639f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263ae:	8b 14 85 00 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce400]
c00263b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263c7:	8b 14 85 80 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce380]
c00263ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263d1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00263d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263da:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00263e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263e3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263e9:	0f b6 f8             	movzx  edi,al
c00263ec:	89 d0                	mov    eax,edx
c00263ee:	ba 00 00 00 00       	mov    edx,0x0
c00263f3:	89 c1                	mov    ecx,eax
c00263f5:	80 e5 ff             	and    ch,0xff
c00263f8:	89 cb                	mov    ebx,ecx
c00263fa:	0f b6 f2             	movzx  esi,dl
c00263fd:	89 d8                	mov    eax,ebx
c00263ff:	89 f2                	mov    edx,esi
c0026401:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026404:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026407:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002640b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002640f:	83 e0 00             	and    eax,0x0
c0026412:	09 d0                	or     eax,edx
c0026414:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002641b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026421:	8d 50 01             	lea    edx,[eax+0x1]
c0026424:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026427:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002642d:	0f b6 d0             	movzx  edx,al
c0026430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026433:	83 c2 08             	add    edx,0x8
c0026436:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002643a:	0f b6 c9             	movzx  ecx,cl
c002643d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026443:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026447:	83 ec 08             	sub    esp,0x8
c002644a:	6a 01                	push   0x1
c002644c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002644f:	e8 04 ff ff ff       	call   c0026358 <IOAPIC::read(int)>
c0026454:	83 c4 10             	add    esp,0x10
c0026457:	c1 f8 10             	sar    eax,0x10
c002645a:	0f b6 c0             	movzx  eax,al
c002645d:	8d 50 01             	lea    edx,[eax+0x1]
c0026460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026463:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026469:	b8 00 00 00 00       	mov    eax,0x0
c002646e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026471:	5b                   	pop    ebx
c0026472:	5e                   	pop    esi
c0026473:	5f                   	pop    edi
c0026474:	5d                   	pop    ebp
c0026475:	c3                   	ret    

c0026476 <IOAPIC::write(int, int)>:
c0026476:	55                   	push   ebp
c0026477:	89 e5                	mov    ebp,esp
c0026479:	83 ec 10             	sub    esp,0x10
c002647c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002647f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026485:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026488:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002648b:	0f b6 d0             	movzx  edx,al
c002648e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026491:	89 10                	mov    DWORD PTR [eax],edx
c0026493:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026496:	8d 50 10             	lea    edx,[eax+0x10]
c0026499:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002649c:	89 02                	mov    DWORD PTR [edx],eax
c002649e:	90                   	nop
c002649f:	c9                   	leave  
c00264a0:	c3                   	ret    
c00264a1:	90                   	nop

c00264a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00264a2:	55                   	push   ebp
c00264a3:	89 e5                	mov    ebp,esp
c00264a5:	53                   	push   ebx
c00264a6:	83 ec 2c             	sub    esp,0x2c
c00264a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264ac:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00264af:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00264b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00264b5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00264b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264bb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00264be:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264c1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264c4:	88 d8                	mov    al,bl
c00264c6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00264c9:	88 c8                	mov    al,cl
c00264cb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264ce:	88 d0                	mov    al,dl
c00264d0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00264d3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264d7:	83 c0 08             	add    eax,0x8
c00264da:	01 c0                	add    eax,eax
c00264dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264df:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264e3:	83 c0 08             	add    eax,0x8
c00264e6:	01 c0                	add    eax,eax
c00264e8:	40                   	inc    eax
c00264e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00264ef:	50                   	push   eax
c00264f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264f3:	e8 60 fe ff ff       	call   c0026358 <IOAPIC::read(int)>
c00264f8:	83 c4 08             	add    esp,0x8
c00264fb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00264fe:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026505:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026508:	c1 e0 18             	shl    eax,0x18
c002650b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002650e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026511:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026514:	52                   	push   edx
c0026515:	50                   	push   eax
c0026516:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026519:	e8 58 ff ff ff       	call   c0026476 <IOAPIC::write(int, int)>
c002651e:	83 c4 0c             	add    esp,0xc
c0026521:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026524:	50                   	push   eax
c0026525:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026528:	e8 2b fe ff ff       	call   c0026358 <IOAPIC::read(int)>
c002652d:	83 c4 08             	add    esp,0x8
c0026530:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026533:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002653a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026541:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026548:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002654c:	74 09                	je     c0026557 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002654e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026555:	eb 07                	jmp    c002655e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026557:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002655e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026562:	74 09                	je     c002656d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026564:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002656b:	eb 07                	jmp    c0026574 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002656d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026574:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002657b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002657f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026582:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026585:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026588:	52                   	push   edx
c0026589:	50                   	push   eax
c002658a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002658d:	e8 e4 fe ff ff       	call   c0026476 <IOAPIC::write(int, int)>
c0026592:	83 c4 0c             	add    esp,0xc
c0026595:	90                   	nop
c0026596:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026599:	c9                   	leave  
c002659a:	c3                   	ret    
c002659b:	90                   	nop

c002659c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002659c:	55                   	push   ebp
c002659d:	89 e5                	mov    ebp,esp
c002659f:	57                   	push   edi
c00265a0:	56                   	push   esi
c00265a1:	53                   	push   ebx
c00265a2:	83 ec 2c             	sub    esp,0x2c
c00265a5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00265a8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00265ab:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00265af:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00265b3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00265b7:	74 5a                	je     c0026613 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265b9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00265bd:	7f 44                	jg     c0026603 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00265bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265c2:	05 a0 e4 02 c0       	add    eax,0xc002e4a0
c00265c7:	8a 00                	mov    al,BYTE PTR [eax]
c00265c9:	0f b6 c0             	movzx  eax,al
c00265cc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00265cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265d2:	66 8b 84 00 a0 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce460]
c00265da:	0f b7 c0             	movzx  eax,ax
c00265dd:	83 e0 02             	and    eax,0x2
c00265e0:	85 c0                	test   eax,eax
c00265e2:	74 04                	je     c00265e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00265e4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00265e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265eb:	66 8b 84 00 a0 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce460]
c00265f3:	0f b7 c0             	movzx  eax,ax
c00265f6:	83 e0 08             	and    eax,0x8
c00265f9:	85 c0                	test   eax,eax
c00265fb:	74 16                	je     c0026613 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265fd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026601:	eb 10                	jmp    c0026613 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026603:	83 ec 0c             	sub    esp,0xc
c0026606:	68 18 de 02 c0       	push   0xc002de18
c002660b:	e8 9f 3d ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0026610:	83 c4 10             	add    esp,0x10
c0026613:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026617:	a1 a0 35 03 c0       	mov    eax,ds:0xc00335a0
c002661c:	83 ec 08             	sub    esp,0x8
c002661f:	50                   	push   eax
c0026620:	68 50 de 02 c0       	push   0xc002de50
c0026625:	e8 d1 c2 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002662a:	83 c4 10             	add    esp,0x10
c002662d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026634:	a1 a0 35 03 c0       	mov    eax,ds:0xc00335a0
c0026639:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002663c:	7d 67                	jge    c00266a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002663e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026641:	8b 04 85 c0 35 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcca40]
c0026648:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002664b:	83 ec 08             	sub    esp,0x8
c002664e:	52                   	push   edx
c002664f:	50                   	push   eax
c0026650:	e8 d1 fc ff ff       	call   c0026326 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026655:	83 c4 10             	add    esp,0x10
c0026658:	84 c0                	test   al,al
c002665a:	74 44                	je     c00266a0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002665c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002665f:	8b 1c 85 c0 35 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcca40]
c0026666:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002666a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002666d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026671:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026674:	83 c0 20             	add    eax,0x20
c0026677:	0f b6 f0             	movzx  esi,al
c002667a:	b8 00 00 00 00       	mov    eax,0x0
c002667f:	99                   	cdq    
c0026680:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026683:	0f b6 c9             	movzx  ecx,cl
c0026686:	83 ec 04             	sub    esp,0x4
c0026689:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002668c:	57                   	push   edi
c002668d:	56                   	push   esi
c002668e:	52                   	push   edx
c002668f:	50                   	push   eax
c0026690:	51                   	push   ecx
c0026691:	53                   	push   ebx
c0026692:	e8 0b fe ff ff       	call   c00264a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026697:	83 c4 20             	add    esp,0x20
c002669a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002669e:	eb 05                	jmp    c00266a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00266a0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00266a3:	eb 8f                	jmp    c0026634 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00266a5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00266a8:	83 f0 01             	xor    eax,0x1
c00266ab:	84 c0                	test   al,al
c00266ad:	74 10                	je     c00266bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00266af:	83 ec 0c             	sub    esp,0xc
c00266b2:	68 67 de 02 c0       	push   0xc002de67
c00266b7:	e8 f3 3c ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00266bc:	83 c4 10             	add    esp,0x10
c00266bf:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00266c3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00266ca:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00266ce:	7f 65                	jg     c0026735 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00266d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266d6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266dd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266e0:	01 ca                	add    edx,ecx
c00266e2:	83 c2 54             	add    edx,0x54
c00266e5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00266e9:	85 c0                	test   eax,eax
c00266eb:	75 43                	jne    c0026730 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00266ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266f3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266fa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266fd:	01 ca                	add    edx,ecx
c00266ff:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026702:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026705:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002670c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002670f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026716:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026719:	01 ca                	add    edx,ecx
c002671b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026721:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026724:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026728:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002672b:	83 e8 20             	sub    eax,0x20
c002672e:	eb 1a                	jmp    c002674a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026730:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026733:	eb 95                	jmp    c00266ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026735:	83 ec 0c             	sub    esp,0xc
c0026738:	68 74 de 02 c0       	push   0xc002de74
c002673d:	e8 6d 3c ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0026742:	83 c4 10             	add    esp,0x10
c0026745:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002674a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002674d:	5b                   	pop    ebx
c002674e:	5e                   	pop    esi
c002674f:	5f                   	pop    edi
c0026750:	5d                   	pop    ebp
c0026751:	c3                   	ret    

c0026752 <PIC::disable()>:
c0026752:	55                   	push   ebp
c0026753:	89 e5                	mov    ebp,esp
c0026755:	83 ec 10             	sub    esp,0x10
c0026758:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002675e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026762:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026765:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026769:	ee                   	out    dx,al
c002676a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026770:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026774:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026777:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002677b:	ee                   	out    dx,al
c002677c:	90                   	nop
c002677d:	c9                   	leave  
c002677e:	c3                   	ret    
c002677f:	90                   	nop

c0026780 <PIC::close(int, int, void*)>:
c0026780:	55                   	push   ebp
c0026781:	89 e5                	mov    ebp,esp
c0026783:	83 ec 08             	sub    esp,0x8
c0026786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026789:	8b 00                	mov    eax,DWORD PTR [eax]
c002678b:	83 c0 3c             	add    eax,0x3c
c002678e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026790:	83 ec 0c             	sub    esp,0xc
c0026793:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026796:	ff d0                	call   eax
c0026798:	83 c4 10             	add    esp,0x10
c002679b:	b8 00 00 00 00       	mov    eax,0x0
c00267a0:	c9                   	leave  
c00267a1:	c3                   	ret    

c00267a2 <PIC::PIC()>:
c00267a2:	83 ec 0c             	sub    esp,0xc
c00267a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a9:	83 ec 08             	sub    esp,0x8
c00267ac:	68 20 df 02 c0       	push   0xc002df20
c00267b1:	50                   	push   eax
c00267b2:	e8 fb de fe ff       	call   c00146b2 <InterruptController::InterruptController(char const*)>
c00267b7:	83 c4 10             	add    esp,0x10
c00267ba:	ba 4c df 02 c0       	mov    edx,0xc002df4c
c00267bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c3:	89 10                	mov    DWORD PTR [eax],edx
c00267c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267cf:	0f b6 d0             	movzx  edx,al
c00267d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00267dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267e7:	0f b6 d0             	movzx  edx,al
c00267ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ee:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00267f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267fd:	8d 50 01             	lea    edx,[eax+0x1]
c0026800:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026804:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002680a:	0f b6 d0             	movzx  edx,al
c002680d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026811:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026815:	83 e1 3f             	and    ecx,0x3f
c0026818:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026820:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026826:	0f b6 d0             	movzx  edx,al
c0026829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026838:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002683e:	0f b6 d0             	movzx  edx,al
c0026841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026845:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002684e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026854:	8d 50 01             	lea    edx,[eax+0x1]
c0026857:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002685b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026861:	0f b6 d0             	movzx  edx,al
c0026864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026868:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002686c:	83 e1 3f             	and    ecx,0x3f
c002686f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026873:	90                   	nop
c0026874:	83 c4 0c             	add    esp,0xc
c0026877:	c3                   	ret    

c0026878 <PIC::ioWait()>:
c0026878:	eb 00                	jmp    c002687a <PIC::ioWait()+0x2>
c002687a:	eb 00                	jmp    c002687c <PIC::ioWait()+0x4>
c002687c:	90                   	nop
c002687d:	c3                   	ret    

c002687e <PIC::getIRQReg(int)>:
c002687e:	55                   	push   ebp
c002687f:	89 e5                	mov    ebp,esp
c0026881:	83 ec 10             	sub    esp,0x10
c0026884:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026887:	0f b6 c0             	movzx  eax,al
c002688a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026890:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026893:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026896:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002689a:	ee                   	out    dx,al
c002689b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002689e:	0f b6 c0             	movzx  eax,al
c00268a1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268a7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00268aa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268ad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268b1:	ee                   	out    dx,al
c00268b2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00268b8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00268bc:	89 c2                	mov    edx,eax
c00268be:	ec                   	in     al,dx
c00268bf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00268c2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268c5:	0f b6 c0             	movzx  eax,al
c00268c8:	c1 e0 08             	shl    eax,0x8
c00268cb:	89 c1                	mov    ecx,eax
c00268cd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00268d3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00268d7:	89 c2                	mov    edx,eax
c00268d9:	ec                   	in     al,dx
c00268da:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00268dd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00268e0:	0f b6 c0             	movzx  eax,al
c00268e3:	09 c8                	or     eax,ecx
c00268e5:	c9                   	leave  
c00268e6:	c3                   	ret    
c00268e7:	90                   	nop

c00268e8 <PIC::eoi(unsigned char)>:
c00268e8:	55                   	push   ebp
c00268e9:	89 e5                	mov    ebp,esp
c00268eb:	83 ec 14             	sub    esp,0x14
c00268ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268f1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00268f4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00268f8:	75 1e                	jne    c0026918 <PIC::eoi(unsigned char)+0x30>
c00268fa:	6a 0b                	push   0xb
c00268fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ff:	e8 7a ff ff ff       	call   c002687e <PIC::getIRQReg(int)>
c0026904:	83 c4 08             	add    esp,0x8
c0026907:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002690b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002690f:	25 80 00 00 00       	and    eax,0x80
c0026914:	85 c0                	test   eax,eax
c0026916:	74 5f                	je     c0026977 <PIC::eoi(unsigned char)+0x8f>
c0026918:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002691c:	75 2d                	jne    c002694b <PIC::eoi(unsigned char)+0x63>
c002691e:	6a 0b                	push   0xb
c0026920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026923:	e8 56 ff ff ff       	call   c002687e <PIC::getIRQReg(int)>
c0026928:	83 c4 08             	add    esp,0x8
c002692b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002692f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026932:	66 85 c0             	test   ax,ax
c0026935:	78 14                	js     c002694b <PIC::eoi(unsigned char)+0x63>
c0026937:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002693d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026941:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026944:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026948:	ee                   	out    dx,al
c0026949:	eb 2d                	jmp    c0026978 <PIC::eoi(unsigned char)+0x90>
c002694b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002694f:	76 12                	jbe    c0026963 <PIC::eoi(unsigned char)+0x7b>
c0026951:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026957:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002695b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002695e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026962:	ee                   	out    dx,al
c0026963:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026969:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002696d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026970:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026974:	ee                   	out    dx,al
c0026975:	eb 01                	jmp    c0026978 <PIC::eoi(unsigned char)+0x90>
c0026977:	90                   	nop
c0026978:	c9                   	leave  
c0026979:	c3                   	ret    

c002697a <PIC::remap()>:
c002697a:	55                   	push   ebp
c002697b:	89 e5                	mov    ebp,esp
c002697d:	83 ec 48             	sub    esp,0x48
c0026980:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026987:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002698e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026994:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026997:	89 c2                	mov    edx,eax
c0026999:	ec                   	in     al,dx
c002699a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002699d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00269a0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00269a3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00269a9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00269ac:	89 c2                	mov    edx,eax
c00269ae:	ec                   	in     al,dx
c00269af:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00269b2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00269b5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00269b8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00269be:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00269c2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00269c5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00269c8:	ee                   	out    dx,al
c00269c9:	83 ec 0c             	sub    esp,0xc
c00269cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269cf:	e8 a4 fe ff ff       	call   c0026878 <PIC::ioWait()>
c00269d4:	83 c4 10             	add    esp,0x10
c00269d7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00269dd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00269e1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00269e4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00269e7:	ee                   	out    dx,al
c00269e8:	83 ec 0c             	sub    esp,0xc
c00269eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269ee:	e8 85 fe ff ff       	call   c0026878 <PIC::ioWait()>
c00269f3:	83 c4 10             	add    esp,0x10
c00269f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00269f9:	0f b6 c0             	movzx  eax,al
c00269fc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026a02:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026a05:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026a08:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026a0b:	ee                   	out    dx,al
c0026a0c:	83 ec 0c             	sub    esp,0xc
c0026a0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a12:	e8 61 fe ff ff       	call   c0026878 <PIC::ioWait()>
c0026a17:	83 c4 10             	add    esp,0x10
c0026a1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a1d:	0f b6 c0             	movzx  eax,al
c0026a20:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026a26:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026a29:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026a2c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026a2f:	ee                   	out    dx,al
c0026a30:	83 ec 0c             	sub    esp,0xc
c0026a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a36:	e8 3d fe ff ff       	call   c0026878 <PIC::ioWait()>
c0026a3b:	83 c4 10             	add    esp,0x10
c0026a3e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026a44:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026a48:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026a4b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026a4e:	ee                   	out    dx,al
c0026a4f:	83 ec 0c             	sub    esp,0xc
c0026a52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a55:	e8 1e fe ff ff       	call   c0026878 <PIC::ioWait()>
c0026a5a:	83 c4 10             	add    esp,0x10
c0026a5d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026a63:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026a67:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026a6a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a6d:	ee                   	out    dx,al
c0026a6e:	83 ec 0c             	sub    esp,0xc
c0026a71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a74:	e8 ff fd ff ff       	call   c0026878 <PIC::ioWait()>
c0026a79:	83 c4 10             	add    esp,0x10
c0026a7c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026a82:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026a86:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026a89:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026a8c:	ee                   	out    dx,al
c0026a8d:	83 ec 0c             	sub    esp,0xc
c0026a90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a93:	e8 e0 fd ff ff       	call   c0026878 <PIC::ioWait()>
c0026a98:	83 c4 10             	add    esp,0x10
c0026a9b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026aa1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026aa5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026aa8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026aab:	ee                   	out    dx,al
c0026aac:	83 ec 0c             	sub    esp,0xc
c0026aaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ab2:	e8 c1 fd ff ff       	call   c0026878 <PIC::ioWait()>
c0026ab7:	83 c4 10             	add    esp,0x10
c0026aba:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026abe:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026ac4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026ac7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026aca:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026acd:	ee                   	out    dx,al
c0026ace:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026ad2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026ad8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026adb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026ade:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026ae1:	ee                   	out    dx,al
c0026ae2:	90                   	nop
c0026ae3:	c9                   	leave  
c0026ae4:	c3                   	ret    
c0026ae5:	90                   	nop

c0026ae6 <PIC::open(int, int, void*)>:
c0026ae6:	55                   	push   ebp
c0026ae7:	89 e5                	mov    ebp,esp
c0026ae9:	83 ec 18             	sub    esp,0x18
c0026aec:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026af2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026af6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026af9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026afd:	ee                   	out    dx,al
c0026afe:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026b04:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026b08:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026b0b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026b0f:	ee                   	out    dx,al
c0026b10:	83 ec 0c             	sub    esp,0xc
c0026b13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b16:	e8 5f fe ff ff       	call   c002697a <PIC::remap()>
c0026b1b:	83 c4 10             	add    esp,0x10
c0026b1e:	b8 00 00 00 00       	mov    eax,0x0
c0026b23:	c9                   	leave  
c0026b24:	c3                   	ret    
c0026b25:	90                   	nop

c0026b26 <APICTimer::close(int, int, void*)>:
c0026b26:	b8 00 00 00 00       	mov    eax,0x0
c0026b2b:	c3                   	ret    

c0026b2c <apicTimerHandler(regs*, void*)>:
c0026b2c:	83 ec 0c             	sub    esp,0xc
c0026b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b35:	99                   	cdq    
c0026b36:	52                   	push   edx
c0026b37:	50                   	push   eax
c0026b38:	6a 00                	push   0x0
c0026b3a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026b3f:	e8 90 07 00 00       	call   c00272d4 <__udivdi3>
c0026b44:	83 c4 10             	add    esp,0x10
c0026b47:	83 ec 08             	sub    esp,0x8
c0026b4a:	52                   	push   edx
c0026b4b:	50                   	push   eax
c0026b4c:	e8 f0 fc fe ff       	call   c0016841 <timerHandler(unsigned long long)>
c0026b51:	83 c4 10             	add    esp,0x10
c0026b54:	90                   	nop
c0026b55:	83 c4 0c             	add    esp,0xc
c0026b58:	c3                   	ret    
c0026b59:	90                   	nop

c0026b5a <APICTimer::write(int)>:
c0026b5a:	53                   	push   ebx
c0026b5b:	83 ec 28             	sub    esp,0x28
c0026b5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026b66:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026b6c:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0026b71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b77:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b7d:	83 ec 0c             	sub    esp,0xc
c0026b80:	50                   	push   eax
c0026b81:	e8 de f4 ff ff       	call   c0026064 <APIC::getBase()>
c0026b86:	83 c4 10             	add    esp,0x10
c0026b89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026b8d:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0026b92:	8b 15 b4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8b4
c0026b98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026b9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ba4:	05 e0 03 00 00       	add    eax,0x3e0
c0026ba9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bb3:	05 80 03 00 00       	add    eax,0x380
c0026bb8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026bbe:	fb                   	sti    
c0026bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026bc7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026bcc:	83 d2 00             	adc    edx,0x0
c0026bcf:	89 c1                	mov    ecx,eax
c0026bd1:	89 d3                	mov    ebx,edx
c0026bd3:	a1 b0 f8 02 c0       	mov    eax,ds:0xc002f8b0
c0026bd8:	8b 15 b4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8b4
c0026bde:	39 c8                	cmp    eax,ecx
c0026be0:	89 d0                	mov    eax,edx
c0026be2:	19 d8                	sbb    eax,ebx
c0026be4:	73 02                	jae    c0026be8 <APICTimer::write(int)+0x8e>
c0026be6:	eb d7                	jmp    c0026bbf <APICTimer::write(int)+0x65>
c0026be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bec:	05 20 03 00 00       	add    eax,0x320
c0026bf1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bfb:	05 90 03 00 00       	add    eax,0x390
c0026c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c02:	f7 d0                	not    eax
c0026c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c08:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c10:	ba 00 00 00 00       	mov    edx,0x0
c0026c15:	f7 f3                	div    ebx
c0026c17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026c1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026c25:	0d 00 00 02 00       	or     eax,0x20000
c0026c2a:	89 c2                	mov    edx,eax
c0026c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c30:	05 20 03 00 00       	add    eax,0x320
c0026c35:	89 10                	mov    DWORD PTR [eax],edx
c0026c37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c3b:	05 e0 03 00 00       	add    eax,0x3e0
c0026c40:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c4a:	05 80 03 00 00       	add    eax,0x380
c0026c4f:	89 c2                	mov    edx,eax
c0026c51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c55:	89 02                	mov    DWORD PTR [edx],eax
c0026c57:	90                   	nop
c0026c58:	83 c4 28             	add    esp,0x28
c0026c5b:	5b                   	pop    ebx
c0026c5c:	c3                   	ret    
c0026c5d:	90                   	nop

c0026c5e <APICTimer::open(int, int, void*)>:
c0026c5e:	57                   	push   edi
c0026c5f:	56                   	push   esi
c0026c60:	53                   	push   ebx
c0026c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c67:	83 c0 24             	add    eax,0x24
c0026c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c6c:	83 ec 08             	sub    esp,0x8
c0026c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c77:	ff d0                	call   eax
c0026c79:	83 c4 10             	add    esp,0x10
c0026c7c:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0026c81:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c87:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c8d:	83 ec 0c             	sub    esp,0xc
c0026c90:	50                   	push   eax
c0026c91:	e8 ce f3 ff ff       	call   c0026064 <APIC::getBase()>
c0026c96:	83 c4 10             	add    esp,0x10
c0026c99:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ca9:	0f b6 f8             	movzx  edi,al
c0026cac:	89 d0                	mov    eax,edx
c0026cae:	ba 00 00 00 00       	mov    edx,0x0
c0026cb3:	89 c1                	mov    ecx,eax
c0026cb5:	80 e5 ff             	and    ch,0xff
c0026cb8:	89 cb                	mov    ebx,ecx
c0026cba:	0f b6 f2             	movzx  esi,dl
c0026cbd:	89 d8                	mov    eax,ebx
c0026cbf:	89 f2                	mov    edx,esi
c0026cc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cc5:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026cc8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026ccc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026cd0:	83 e0 00             	and    eax,0x0
c0026cd3:	09 d0                	or     eax,edx
c0026cd5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cdd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ce3:	8d 50 01             	lea    edx,[eax+0x1]
c0026ce6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cea:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026cf0:	0f b6 d0             	movzx  edx,al
c0026cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cf7:	83 c2 08             	add    edx,0x8
c0026cfa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026cfe:	0f b6 c9             	movzx  ecx,cl
c0026d01:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026d07:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d13:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d21:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026d27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d2b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026d31:	83 ec 0c             	sub    esp,0xc
c0026d34:	51                   	push   ecx
c0026d35:	6a 01                	push   0x1
c0026d37:	68 2c 6b 02 c0       	push   0xc0026b2c
c0026d3c:	52                   	push   edx
c0026d3d:	50                   	push   eax
c0026d3e:	e8 69 cf fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d43:	83 c4 20             	add    esp,0x20
c0026d46:	89 c2                	mov    edx,eax
c0026d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d4c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d52:	b8 00 00 00 00       	mov    eax,0x0
c0026d57:	5b                   	pop    ebx
c0026d58:	5e                   	pop    esi
c0026d59:	5f                   	pop    edi
c0026d5a:	c3                   	ret    
c0026d5b:	90                   	nop

c0026d5c <APICTimer::APICTimer()>:
c0026d5c:	83 ec 0c             	sub    esp,0xc
c0026d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d63:	83 ec 08             	sub    esp,0x8
c0026d66:	68 8c df 02 c0       	push   0xc002df8c
c0026d6b:	50                   	push   eax
c0026d6c:	e8 41 fa fe ff       	call   c00167b2 <Timer::Timer(char const*)>
c0026d71:	83 c4 10             	add    esp,0x10
c0026d74:	ba a0 df 02 c0       	mov    edx,0xc002dfa0
c0026d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d7d:	89 10                	mov    DWORD PTR [eax],edx
c0026d7f:	90                   	nop
c0026d80:	83 c4 0c             	add    esp,0xc
c0026d83:	c3                   	ret    

c0026d84 <PIT::write(int)>:
c0026d84:	83 ec 10             	sub    esp,0x10
c0026d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026d99:	a3 e4 35 03 c0       	mov    ds:0xc00335e4,eax
c0026d9e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026da3:	99                   	cdq    
c0026da4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026dac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026db3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026db8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026dbc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026dc1:	ee                   	out    dx,al
c0026dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026dc6:	0f b6 c0             	movzx  eax,al
c0026dc9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026dd0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026dd4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026dd8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026ddd:	ee                   	out    dx,al
c0026dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026de2:	c1 f8 08             	sar    eax,0x8
c0026de5:	0f b6 c0             	movzx  eax,al
c0026de8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026def:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026df3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026df7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026dfc:	ee                   	out    dx,al
c0026dfd:	90                   	nop
c0026dfe:	83 c4 10             	add    esp,0x10
c0026e01:	c3                   	ret    

c0026e02 <pitHandler(regs*, void*)>:
c0026e02:	83 ec 0c             	sub    esp,0xc
c0026e05:	a1 e4 35 03 c0       	mov    eax,ds:0xc00335e4
c0026e0a:	99                   	cdq    
c0026e0b:	52                   	push   edx
c0026e0c:	50                   	push   eax
c0026e0d:	6a 00                	push   0x0
c0026e0f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e14:	e8 bb 04 00 00       	call   c00272d4 <__udivdi3>
c0026e19:	83 c4 10             	add    esp,0x10
c0026e1c:	83 ec 08             	sub    esp,0x8
c0026e1f:	52                   	push   edx
c0026e20:	50                   	push   eax
c0026e21:	e8 1b fa fe ff       	call   c0016841 <timerHandler(unsigned long long)>
c0026e26:	83 c4 10             	add    esp,0x10
c0026e29:	90                   	nop
c0026e2a:	83 c4 0c             	add    esp,0xc
c0026e2d:	c3                   	ret    

c0026e2e <PIT::open(int, int, void*)>:
c0026e2e:	83 ec 0c             	sub    esp,0xc
c0026e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e37:	83 c0 24             	add    eax,0x24
c0026e3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e3c:	83 ec 08             	sub    esp,0x8
c0026e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e47:	ff d0                	call   eax
c0026e49:	83 c4 10             	add    esp,0x10
c0026e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e50:	83 ec 0c             	sub    esp,0xc
c0026e53:	6a 00                	push   0x0
c0026e55:	6a 01                	push   0x1
c0026e57:	68 02 6e 02 c0       	push   0xc0026e02
c0026e5c:	6a 00                	push   0x0
c0026e5e:	50                   	push   eax
c0026e5f:	e8 48 ce fe ff       	call   c0013cac <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026e64:	83 c4 20             	add    esp,0x20
c0026e67:	89 c2                	mov    edx,eax
c0026e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e6d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026e73:	b8 00 00 00 00       	mov    eax,0x0
c0026e78:	83 c4 0c             	add    esp,0xc
c0026e7b:	c3                   	ret    

c0026e7c <PIT::close(int, int, void*)>:
c0026e7c:	83 ec 0c             	sub    esp,0xc
c0026e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e83:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e91:	6a 01                	push   0x1
c0026e93:	68 02 6e 02 c0       	push   0xc0026e02
c0026e98:	6a 00                	push   0x0
c0026e9a:	50                   	push   eax
c0026e9b:	e8 56 ce fe ff       	call   c0013cf6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026ea0:	83 c4 10             	add    esp,0x10
c0026ea3:	b8 00 00 00 00       	mov    eax,0x0
c0026ea8:	83 c4 0c             	add    esp,0xc
c0026eab:	c3                   	ret    

c0026eac <PIT::PIT()>:
c0026eac:	83 ec 0c             	sub    esp,0xc
c0026eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb3:	83 ec 08             	sub    esp,0x8
c0026eb6:	68 c8 df 02 c0       	push   0xc002dfc8
c0026ebb:	50                   	push   eax
c0026ebc:	e8 f1 f8 fe ff       	call   c00167b2 <Timer::Timer(char const*)>
c0026ec1:	83 c4 10             	add    esp,0x10
c0026ec4:	ba f0 df 02 c0       	mov    edx,0xc002dff0
c0026ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ecd:	89 10                	mov    DWORD PTR [eax],edx
c0026ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ed3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ed9:	0f b6 d0             	movzx  edx,al
c0026edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eeb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ef1:	0f b6 d0             	movzx  edx,al
c0026ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f07:	8d 50 01             	lea    edx,[eax+0x1]
c0026f0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026f0e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026f14:	0f b6 d0             	movzx  edx,al
c0026f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f1b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026f1f:	83 e1 3f             	and    ecx,0x3f
c0026f22:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026f26:	90                   	nop
c0026f27:	83 c4 0c             	add    esp,0xc
c0026f2a:	c3                   	ret    
c0026f2b:	66 90                	xchg   ax,ax
c0026f2d:	66 90                	xchg   ax,ax
c0026f2f:	90                   	nop

c0026f30 <avxDetect>:
c0026f30:	b8 00 00 00 00       	mov    eax,0x0
c0026f35:	c3                   	ret    

c0026f36 <avxSave>:
c0026f36:	c3                   	ret    

c0026f37 <avxLoad>:
c0026f37:	c3                   	ret    

c0026f38 <avxInit>:
c0026f38:	c3                   	ret    

c0026f39 <avxClose>:
c0026f39:	c3                   	ret    

c0026f3a <wouldSheSayYes>:
c0026f3a:	c3                   	ret    
c0026f3b:	49                   	dec    ecx
c0026f3c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026f40:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026f44:	75 20                	jne    c0026f66 <sseDetect.noSSE+0x1>
c0026f46:	4e                   	dec    esi
c0026f47:	79 61                	jns    c0026faa <x87Detect+0x14>
c0026f49:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026f4e:	66 90                	xchg   ax,ax

c0026f50 <absolutelyNoChanceInHell>:
c0026f50:	b8 01 00 00 00       	mov    eax,0x1
c0026f55:	0f a2                	cpuid  
c0026f57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026f5d:	74 06                	je     c0026f65 <sseDetect.noSSE>
c0026f5f:	b8 01 00 00 00       	mov    eax,0x1
c0026f64:	c3                   	ret    

c0026f65 <sseDetect.noSSE>:
c0026f65:	31 c0                	xor    eax,eax
c0026f67:	c3                   	ret    

c0026f68 <sseSave>:
c0026f68:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026f6d:	c3                   	ret    

c0026f6e <sseLoad>:
c0026f6e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026f73:	c3                   	ret    

c0026f74 <sseInit>:
c0026f74:	e8 49 00 00 00       	call   c0026fc2 <x87Init>
c0026f79:	0f 20 e0             	mov    eax,cr4
c0026f7c:	66 0d 00 06          	or     ax,0x600
c0026f80:	0f 22 e0             	mov    cr4,eax
c0026f83:	c3                   	ret    

c0026f84 <sseClose>:
c0026f84:	c3                   	ret    
c0026f85:	66 90                	xchg   ax,ax
c0026f87:	66 90                	xchg   ax,ax
c0026f89:	66 90                	xchg   ax,ax
c0026f8b:	66 90                	xchg   ax,ax
c0026f8d:	66 90                	xchg   ax,ax
c0026f8f:	90                   	nop

c0026f90 <value_37F>:
c0026f90:	7f 03                	jg     c0026f95 <value_37A+0x1>

c0026f92 <value_37E>:
c0026f92:	7e 03                	jle    c0026f97 <x87Detect+0x1>

c0026f94 <value_37A>:
c0026f94:	7a 03                	jp     c0026f99 <x87Detect+0x3>

c0026f96 <x87Detect>:
c0026f96:	b8 01 00 00 00       	mov    eax,0x1
c0026f9b:	0f a2                	cpuid  
c0026f9d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026fa3:	74 06                	je     c0026fab <x87Detect.nox87>
c0026fa5:	b8 01 00 00 00       	mov    eax,0x1
c0026faa:	c3                   	ret    

c0026fab <x87Detect.nox87>:
c0026fab:	b8 00 00 00 00       	mov    eax,0x0
c0026fb0:	c3                   	ret    

c0026fb1 <x87Save>:
c0026fb1:	55                   	push   ebp
c0026fb2:	89 e5                	mov    ebp,esp
c0026fb4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026fb8:	c9                   	leave  
c0026fb9:	c3                   	ret    

c0026fba <x87Load>:
c0026fba:	55                   	push   ebp
c0026fbb:	89 e5                	mov    ebp,esp
c0026fbd:	dd 65 08             	frstor [ebp+0x8]
c0026fc0:	c9                   	leave  
c0026fc1:	c3                   	ret    

c0026fc2 <x87Init>:
c0026fc2:	9b db e3             	finit  
c0026fc5:	0f 20 c0             	mov    eax,cr0
c0026fc8:	66 25 fb ff          	and    ax,0xfffb
c0026fcc:	66 0d 22 00          	or     ax,0x22
c0026fd0:	0f 22 c0             	mov    cr0,eax
c0026fd3:	0f 06                	clts   
c0026fd5:	d9 2d 94 6f 02 c0    	fldcw  WORD PTR ds:0xc0026f94
c0026fdb:	c3                   	ret    

c0026fdc <x87Close>:
c0026fdc:	c3                   	ret    
c0026fdd:	66 90                	xchg   ax,ax
c0026fdf:	90                   	nop

c0026fe0 <__do_global_ctors_aux>:
c0026fe0:	a1 18 9c 02 c0       	mov    eax,ds:0xc0029c18
c0026fe5:	83 f8 ff             	cmp    eax,0xffffffff
c0026fe8:	74 1a                	je     c0027004 <__do_global_ctors_aux+0x24>
c0026fea:	55                   	push   ebp
c0026feb:	89 e5                	mov    ebp,esp
c0026fed:	53                   	push   ebx
c0026fee:	52                   	push   edx
c0026fef:	bb 18 9c 02 c0       	mov    ebx,0xc0029c18
c0026ff4:	ff d0                	call   eax
c0026ff6:	83 eb 04             	sub    ebx,0x4
c0026ff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026ffb:	83 f8 ff             	cmp    eax,0xffffffff
c0026ffe:	75 f4                	jne    c0026ff4 <__do_global_ctors_aux+0x14>
c0027000:	58                   	pop    eax
c0027001:	5b                   	pop    ebx
c0027002:	5d                   	pop    ebp
c0027003:	c3                   	ret    
c0027004:	c3                   	ret    
c0027005:	66 90                	xchg   ax,ax
c0027007:	90                   	nop

c0027008 <__divdi3>:
c0027008:	55                   	push   ebp
c0027009:	57                   	push   edi
c002700a:	56                   	push   esi
c002700b:	53                   	push   ebx
c002700c:	83 ec 1c             	sub    esp,0x1c
c002700f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027013:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027017:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002701a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002701e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027022:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027026:	85 db                	test   ebx,ebx
c0027028:	0f 88 8e 00 00 00    	js     c00270bc <__divdi3+0xb4>
c002702e:	89 dd                	mov    ebp,ebx
c0027030:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027038:	89 d3                	mov    ebx,edx
c002703a:	85 d2                	test   edx,edx
c002703c:	79 0d                	jns    c002704b <__divdi3+0x43>
c002703e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027042:	f7 d8                	neg    eax
c0027044:	83 d2 00             	adc    edx,0x0
c0027047:	f7 da                	neg    edx
c0027049:	89 d3                	mov    ebx,edx
c002704b:	89 c7                	mov    edi,eax
c002704d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027050:	85 db                	test   ebx,ebx
c0027052:	75 48                	jne    c002709c <__divdi3+0x94>
c0027054:	39 ef                	cmp    edi,ebp
c0027056:	76 24                	jbe    c002707c <__divdi3+0x74>
c0027058:	89 ea                	mov    edx,ebp
c002705a:	f7 f7                	div    edi
c002705c:	89 c1                	mov    ecx,eax
c002705e:	31 f6                	xor    esi,esi
c0027060:	89 c8                	mov    eax,ecx
c0027062:	89 f2                	mov    edx,esi
c0027064:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027068:	85 c9                	test   ecx,ecx
c002706a:	74 07                	je     c0027073 <__divdi3+0x6b>
c002706c:	f7 d8                	neg    eax
c002706e:	83 d2 00             	adc    edx,0x0
c0027071:	f7 da                	neg    edx
c0027073:	83 c4 1c             	add    esp,0x1c
c0027076:	5b                   	pop    ebx
c0027077:	5e                   	pop    esi
c0027078:	5f                   	pop    edi
c0027079:	5d                   	pop    ebp
c002707a:	c3                   	ret    
c002707b:	90                   	nop
c002707c:	85 ff                	test   edi,edi
c002707e:	75 0b                	jne    c002708b <__divdi3+0x83>
c0027080:	b8 01 00 00 00       	mov    eax,0x1
c0027085:	31 d2                	xor    edx,edx
c0027087:	f7 f3                	div    ebx
c0027089:	89 c7                	mov    edi,eax
c002708b:	31 d2                	xor    edx,edx
c002708d:	89 e8                	mov    eax,ebp
c002708f:	f7 f7                	div    edi
c0027091:	89 c6                	mov    esi,eax
c0027093:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027096:	f7 f7                	div    edi
c0027098:	89 c1                	mov    ecx,eax
c002709a:	eb c4                	jmp    c0027060 <__divdi3+0x58>
c002709c:	39 eb                	cmp    ebx,ebp
c002709e:	77 3c                	ja     c00270dc <__divdi3+0xd4>
c00270a0:	0f bd f3             	bsr    esi,ebx
c00270a3:	83 f6 1f             	xor    esi,0x1f
c00270a6:	75 40                	jne    c00270e8 <__divdi3+0xe0>
c00270a8:	39 eb                	cmp    ebx,ebp
c00270aa:	72 09                	jb     c00270b5 <__divdi3+0xad>
c00270ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00270af:	0f 87 97 00 00 00    	ja     c002714c <__divdi3+0x144>
c00270b5:	b9 01 00 00 00       	mov    ecx,0x1
c00270ba:	eb a4                	jmp    c0027060 <__divdi3+0x58>
c00270bc:	f7 d9                	neg    ecx
c00270be:	83 d3 00             	adc    ebx,0x0
c00270c1:	f7 db                	neg    ebx
c00270c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00270c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00270ca:	89 dd                	mov    ebp,ebx
c00270cc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00270d4:	e9 5f ff ff ff       	jmp    c0027038 <__divdi3+0x30>
c00270d9:	8d 76 00             	lea    esi,[esi+0x0]
c00270dc:	31 f6                	xor    esi,esi
c00270de:	31 c9                	xor    ecx,ecx
c00270e0:	e9 7b ff ff ff       	jmp    c0027060 <__divdi3+0x58>
c00270e5:	8d 76 00             	lea    esi,[esi+0x0]
c00270e8:	b8 20 00 00 00       	mov    eax,0x20
c00270ed:	29 f0                	sub    eax,esi
c00270ef:	89 f1                	mov    ecx,esi
c00270f1:	d3 e3                	shl    ebx,cl
c00270f3:	89 fa                	mov    edx,edi
c00270f5:	88 c1                	mov    cl,al
c00270f7:	d3 ea                	shr    edx,cl
c00270f9:	09 da                	or     edx,ebx
c00270fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00270ff:	89 f1                	mov    ecx,esi
c0027101:	d3 e7                	shl    edi,cl
c0027103:	89 eb                	mov    ebx,ebp
c0027105:	88 c1                	mov    cl,al
c0027107:	d3 eb                	shr    ebx,cl
c0027109:	89 f1                	mov    ecx,esi
c002710b:	d3 e5                	shl    ebp,cl
c002710d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027110:	88 c1                	mov    cl,al
c0027112:	d3 ea                	shr    edx,cl
c0027114:	09 d5                	or     ebp,edx
c0027116:	89 e8                	mov    eax,ebp
c0027118:	89 da                	mov    edx,ebx
c002711a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002711e:	89 d3                	mov    ebx,edx
c0027120:	89 c5                	mov    ebp,eax
c0027122:	f7 e7                	mul    edi
c0027124:	39 d3                	cmp    ebx,edx
c0027126:	72 18                	jb     c0027140 <__divdi3+0x138>
c0027128:	74 0a                	je     c0027134 <__divdi3+0x12c>
c002712a:	89 e9                	mov    ecx,ebp
c002712c:	31 f6                	xor    esi,esi
c002712e:	e9 2d ff ff ff       	jmp    c0027060 <__divdi3+0x58>
c0027133:	90                   	nop
c0027134:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027137:	89 f1                	mov    ecx,esi
c0027139:	d3 e7                	shl    edi,cl
c002713b:	39 c7                	cmp    edi,eax
c002713d:	73 eb                	jae    c002712a <__divdi3+0x122>
c002713f:	90                   	nop
c0027140:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027143:	31 f6                	xor    esi,esi
c0027145:	e9 16 ff ff ff       	jmp    c0027060 <__divdi3+0x58>
c002714a:	66 90                	xchg   ax,ax
c002714c:	31 c9                	xor    ecx,ecx
c002714e:	e9 0d ff ff ff       	jmp    c0027060 <__divdi3+0x58>
c0027153:	90                   	nop

c0027154 <__moddi3>:
c0027154:	55                   	push   ebp
c0027155:	57                   	push   edi
c0027156:	56                   	push   esi
c0027157:	53                   	push   ebx
c0027158:	83 ec 2c             	sub    esp,0x2c
c002715b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002715f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027163:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027167:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002716b:	85 db                	test   ebx,ebx
c002716d:	0f 88 85 00 00 00    	js     c00271f8 <__moddi3+0xa4>
c0027173:	89 de                	mov    esi,ebx
c0027175:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002717d:	89 d7                	mov    edi,edx
c002717f:	85 d2                	test   edx,edx
c0027181:	79 09                	jns    c002718c <__moddi3+0x38>
c0027183:	f7 d8                	neg    eax
c0027185:	83 d2 00             	adc    edx,0x0
c0027188:	f7 da                	neg    edx
c002718a:	89 d7                	mov    edi,edx
c002718c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027190:	89 cd                	mov    ebp,ecx
c0027192:	85 ff                	test   edi,edi
c0027194:	75 52                	jne    c00271e8 <__moddi3+0x94>
c0027196:	89 c3                	mov    ebx,eax
c0027198:	39 f0                	cmp    eax,esi
c002719a:	76 24                	jbe    c00271c0 <__moddi3+0x6c>
c002719c:	89 c8                	mov    eax,ecx
c002719e:	89 f2                	mov    edx,esi
c00271a0:	f7 f3                	div    ebx
c00271a2:	89 d6                	mov    esi,edx
c00271a4:	89 f0                	mov    eax,esi
c00271a6:	31 d2                	xor    edx,edx
c00271a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00271ac:	85 c9                	test   ecx,ecx
c00271ae:	74 07                	je     c00271b7 <__moddi3+0x63>
c00271b0:	f7 d8                	neg    eax
c00271b2:	83 d2 00             	adc    edx,0x0
c00271b5:	f7 da                	neg    edx
c00271b7:	83 c4 2c             	add    esp,0x2c
c00271ba:	5b                   	pop    ebx
c00271bb:	5e                   	pop    esi
c00271bc:	5f                   	pop    edi
c00271bd:	5d                   	pop    ebp
c00271be:	c3                   	ret    
c00271bf:	90                   	nop
c00271c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00271c4:	85 db                	test   ebx,ebx
c00271c6:	75 0d                	jne    c00271d5 <__moddi3+0x81>
c00271c8:	b8 01 00 00 00       	mov    eax,0x1
c00271cd:	31 d2                	xor    edx,edx
c00271cf:	f7 f7                	div    edi
c00271d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271d5:	89 f0                	mov    eax,esi
c00271d7:	31 d2                	xor    edx,edx
c00271d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271dd:	f7 f7                	div    edi
c00271df:	89 e8                	mov    eax,ebp
c00271e1:	f7 f7                	div    edi
c00271e3:	89 d6                	mov    esi,edx
c00271e5:	eb bd                	jmp    c00271a4 <__moddi3+0x50>
c00271e7:	90                   	nop
c00271e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00271ec:	39 f7                	cmp    edi,esi
c00271ee:	76 20                	jbe    c0027210 <__moddi3+0xbc>
c00271f0:	89 c8                	mov    eax,ecx
c00271f2:	89 f2                	mov    edx,esi
c00271f4:	eb b2                	jmp    c00271a8 <__moddi3+0x54>
c00271f6:	66 90                	xchg   ax,ax
c00271f8:	f7 d9                	neg    ecx
c00271fa:	83 d3 00             	adc    ebx,0x0
c00271fd:	f7 db                	neg    ebx
c00271ff:	89 de                	mov    esi,ebx
c0027201:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027209:	e9 6f ff ff ff       	jmp    c002717d <__moddi3+0x29>
c002720e:	66 90                	xchg   ax,ax
c0027210:	0f bd c7             	bsr    eax,edi
c0027213:	83 f0 1f             	xor    eax,0x1f
c0027216:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002721a:	75 24                	jne    c0027240 <__moddi3+0xec>
c002721c:	39 f7                	cmp    edi,esi
c002721e:	72 06                	jb     c0027226 <__moddi3+0xd2>
c0027220:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027224:	77 0c                	ja     c0027232 <__moddi3+0xde>
c0027226:	89 e9                	mov    ecx,ebp
c0027228:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002722c:	19 fe                	sbb    esi,edi
c002722e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027232:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027236:	89 f2                	mov    edx,esi
c0027238:	e9 6b ff ff ff       	jmp    c00271a8 <__moddi3+0x54>
c002723d:	8d 76 00             	lea    esi,[esi+0x0]
c0027240:	b8 20 00 00 00       	mov    eax,0x20
c0027245:	89 c2                	mov    edx,eax
c0027247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002724b:	29 da                	sub    edx,ebx
c002724d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027251:	88 d9                	mov    cl,bl
c0027253:	d3 e7                	shl    edi,cl
c0027255:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027259:	88 d1                	mov    cl,dl
c002725b:	d3 e8                	shr    eax,cl
c002725d:	09 c7                	or     edi,eax
c002725f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027263:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027267:	89 d8                	mov    eax,ebx
c0027269:	88 d9                	mov    cl,bl
c002726b:	d3 e7                	shl    edi,cl
c002726d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027271:	89 f3                	mov    ebx,esi
c0027273:	88 d1                	mov    cl,dl
c0027275:	d3 eb                	shr    ebx,cl
c0027277:	89 c7                	mov    edi,eax
c0027279:	88 c1                	mov    cl,al
c002727b:	d3 e6                	shl    esi,cl
c002727d:	89 e8                	mov    eax,ebp
c002727f:	88 d1                	mov    cl,dl
c0027281:	d3 e8                	shr    eax,cl
c0027283:	09 f0                	or     eax,esi
c0027285:	89 f9                	mov    ecx,edi
c0027287:	d3 e5                	shl    ebp,cl
c0027289:	89 da                	mov    edx,ebx
c002728b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002728f:	89 d3                	mov    ebx,edx
c0027291:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027295:	89 c6                	mov    esi,eax
c0027297:	89 d1                	mov    ecx,edx
c0027299:	39 d3                	cmp    ebx,edx
c002729b:	72 27                	jb     c00272c4 <__moddi3+0x170>
c002729d:	74 21                	je     c00272c0 <__moddi3+0x16c>
c002729f:	29 f5                	sub    ebp,esi
c00272a1:	19 cb                	sbb    ebx,ecx
c00272a3:	89 de                	mov    esi,ebx
c00272a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00272a9:	d3 e6                	shl    esi,cl
c00272ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00272af:	89 f9                	mov    ecx,edi
c00272b1:	d3 ed                	shr    ebp,cl
c00272b3:	09 ee                	or     esi,ebp
c00272b5:	89 f0                	mov    eax,esi
c00272b7:	d3 eb                	shr    ebx,cl
c00272b9:	89 da                	mov    edx,ebx
c00272bb:	e9 e8 fe ff ff       	jmp    c00271a8 <__moddi3+0x54>
c00272c0:	39 c5                	cmp    ebp,eax
c00272c2:	73 db                	jae    c002729f <__moddi3+0x14b>
c00272c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00272c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00272cc:	89 d1                	mov    ecx,edx
c00272ce:	89 c6                	mov    esi,eax
c00272d0:	eb cd                	jmp    c002729f <__moddi3+0x14b>
c00272d2:	66 90                	xchg   ax,ax

c00272d4 <__udivdi3>:
c00272d4:	55                   	push   ebp
c00272d5:	57                   	push   edi
c00272d6:	56                   	push   esi
c00272d7:	53                   	push   ebx
c00272d8:	83 ec 1c             	sub    esp,0x1c
c00272db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00272df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00272e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00272eb:	85 d2                	test   edx,edx
c00272ed:	75 41                	jne    c0027330 <__udivdi3+0x5c>
c00272ef:	39 f7                	cmp    edi,esi
c00272f1:	76 15                	jbe    c0027308 <__udivdi3+0x34>
c00272f3:	89 e8                	mov    eax,ebp
c00272f5:	89 f2                	mov    edx,esi
c00272f7:	f7 f7                	div    edi
c00272f9:	31 db                	xor    ebx,ebx
c00272fb:	89 da                	mov    edx,ebx
c00272fd:	83 c4 1c             	add    esp,0x1c
c0027300:	5b                   	pop    ebx
c0027301:	5e                   	pop    esi
c0027302:	5f                   	pop    edi
c0027303:	5d                   	pop    ebp
c0027304:	c3                   	ret    
c0027305:	8d 76 00             	lea    esi,[esi+0x0]
c0027308:	89 f9                	mov    ecx,edi
c002730a:	85 ff                	test   edi,edi
c002730c:	75 0b                	jne    c0027319 <__udivdi3+0x45>
c002730e:	b8 01 00 00 00       	mov    eax,0x1
c0027313:	31 d2                	xor    edx,edx
c0027315:	f7 f7                	div    edi
c0027317:	89 c1                	mov    ecx,eax
c0027319:	31 d2                	xor    edx,edx
c002731b:	89 f0                	mov    eax,esi
c002731d:	f7 f1                	div    ecx
c002731f:	89 c3                	mov    ebx,eax
c0027321:	89 e8                	mov    eax,ebp
c0027323:	f7 f1                	div    ecx
c0027325:	89 da                	mov    edx,ebx
c0027327:	83 c4 1c             	add    esp,0x1c
c002732a:	5b                   	pop    ebx
c002732b:	5e                   	pop    esi
c002732c:	5f                   	pop    edi
c002732d:	5d                   	pop    ebp
c002732e:	c3                   	ret    
c002732f:	90                   	nop
c0027330:	39 f2                	cmp    edx,esi
c0027332:	77 1c                	ja     c0027350 <__udivdi3+0x7c>
c0027334:	0f bd da             	bsr    ebx,edx
c0027337:	83 f3 1f             	xor    ebx,0x1f
c002733a:	75 24                	jne    c0027360 <__udivdi3+0x8c>
c002733c:	39 f2                	cmp    edx,esi
c002733e:	72 08                	jb     c0027348 <__udivdi3+0x74>
c0027340:	39 ef                	cmp    edi,ebp
c0027342:	0f 87 84 00 00 00    	ja     c00273cc <__udivdi3+0xf8>
c0027348:	b8 01 00 00 00       	mov    eax,0x1
c002734d:	eb ac                	jmp    c00272fb <__udivdi3+0x27>
c002734f:	90                   	nop
c0027350:	31 db                	xor    ebx,ebx
c0027352:	31 c0                	xor    eax,eax
c0027354:	89 da                	mov    edx,ebx
c0027356:	83 c4 1c             	add    esp,0x1c
c0027359:	5b                   	pop    ebx
c002735a:	5e                   	pop    esi
c002735b:	5f                   	pop    edi
c002735c:	5d                   	pop    ebp
c002735d:	c3                   	ret    
c002735e:	66 90                	xchg   ax,ax
c0027360:	b8 20 00 00 00       	mov    eax,0x20
c0027365:	29 d8                	sub    eax,ebx
c0027367:	88 d9                	mov    cl,bl
c0027369:	d3 e2                	shl    edx,cl
c002736b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002736f:	89 fa                	mov    edx,edi
c0027371:	88 c1                	mov    cl,al
c0027373:	d3 ea                	shr    edx,cl
c0027375:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027379:	09 d1                	or     ecx,edx
c002737b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002737f:	88 d9                	mov    cl,bl
c0027381:	d3 e7                	shl    edi,cl
c0027383:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027387:	89 f7                	mov    edi,esi
c0027389:	88 c1                	mov    cl,al
c002738b:	d3 ef                	shr    edi,cl
c002738d:	88 d9                	mov    cl,bl
c002738f:	d3 e6                	shl    esi,cl
c0027391:	89 ea                	mov    edx,ebp
c0027393:	88 c1                	mov    cl,al
c0027395:	d3 ea                	shr    edx,cl
c0027397:	09 d6                	or     esi,edx
c0027399:	89 f0                	mov    eax,esi
c002739b:	89 fa                	mov    edx,edi
c002739d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273a1:	89 d7                	mov    edi,edx
c00273a3:	89 c6                	mov    esi,eax
c00273a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273a9:	39 d7                	cmp    edi,edx
c00273ab:	72 13                	jb     c00273c0 <__udivdi3+0xec>
c00273ad:	74 09                	je     c00273b8 <__udivdi3+0xe4>
c00273af:	89 f0                	mov    eax,esi
c00273b1:	31 db                	xor    ebx,ebx
c00273b3:	e9 43 ff ff ff       	jmp    c00272fb <__udivdi3+0x27>
c00273b8:	88 d9                	mov    cl,bl
c00273ba:	d3 e5                	shl    ebp,cl
c00273bc:	39 c5                	cmp    ebp,eax
c00273be:	73 ef                	jae    c00273af <__udivdi3+0xdb>
c00273c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00273c3:	31 db                	xor    ebx,ebx
c00273c5:	e9 31 ff ff ff       	jmp    c00272fb <__udivdi3+0x27>
c00273ca:	66 90                	xchg   ax,ax
c00273cc:	31 c0                	xor    eax,eax
c00273ce:	e9 28 ff ff ff       	jmp    c00272fb <__udivdi3+0x27>
c00273d3:	90                   	nop

c00273d4 <__umoddi3>:
c00273d4:	55                   	push   ebp
c00273d5:	57                   	push   edi
c00273d6:	56                   	push   esi
c00273d7:	53                   	push   ebx
c00273d8:	83 ec 1c             	sub    esp,0x1c
c00273db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00273df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00273e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00273e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00273eb:	89 da                	mov    edx,ebx
c00273ed:	85 c0                	test   eax,eax
c00273ef:	75 37                	jne    c0027428 <__umoddi3+0x54>
c00273f1:	39 df                	cmp    edi,ebx
c00273f3:	76 13                	jbe    c0027408 <__umoddi3+0x34>
c00273f5:	89 f0                	mov    eax,esi
c00273f7:	f7 f7                	div    edi
c00273f9:	89 d0                	mov    eax,edx
c00273fb:	31 d2                	xor    edx,edx
c00273fd:	83 c4 1c             	add    esp,0x1c
c0027400:	5b                   	pop    ebx
c0027401:	5e                   	pop    esi
c0027402:	5f                   	pop    edi
c0027403:	5d                   	pop    ebp
c0027404:	c3                   	ret    
c0027405:	8d 76 00             	lea    esi,[esi+0x0]
c0027408:	89 fd                	mov    ebp,edi
c002740a:	85 ff                	test   edi,edi
c002740c:	75 0b                	jne    c0027419 <__umoddi3+0x45>
c002740e:	b8 01 00 00 00       	mov    eax,0x1
c0027413:	31 d2                	xor    edx,edx
c0027415:	f7 f7                	div    edi
c0027417:	89 c5                	mov    ebp,eax
c0027419:	89 d8                	mov    eax,ebx
c002741b:	31 d2                	xor    edx,edx
c002741d:	f7 f5                	div    ebp
c002741f:	89 f0                	mov    eax,esi
c0027421:	f7 f5                	div    ebp
c0027423:	89 d0                	mov    eax,edx
c0027425:	eb d4                	jmp    c00273fb <__umoddi3+0x27>
c0027427:	90                   	nop
c0027428:	89 f1                	mov    ecx,esi
c002742a:	39 d8                	cmp    eax,ebx
c002742c:	76 0a                	jbe    c0027438 <__umoddi3+0x64>
c002742e:	89 f0                	mov    eax,esi
c0027430:	83 c4 1c             	add    esp,0x1c
c0027433:	5b                   	pop    ebx
c0027434:	5e                   	pop    esi
c0027435:	5f                   	pop    edi
c0027436:	5d                   	pop    ebp
c0027437:	c3                   	ret    
c0027438:	0f bd e8             	bsr    ebp,eax
c002743b:	83 f5 1f             	xor    ebp,0x1f
c002743e:	75 1c                	jne    c002745c <__umoddi3+0x88>
c0027440:	39 d8                	cmp    eax,ebx
c0027442:	72 04                	jb     c0027448 <__umoddi3+0x74>
c0027444:	39 f7                	cmp    edi,esi
c0027446:	77 08                	ja     c0027450 <__umoddi3+0x7c>
c0027448:	89 da                	mov    edx,ebx
c002744a:	29 fe                	sub    esi,edi
c002744c:	19 c2                	sbb    edx,eax
c002744e:	89 f1                	mov    ecx,esi
c0027450:	89 c8                	mov    eax,ecx
c0027452:	83 c4 1c             	add    esp,0x1c
c0027455:	5b                   	pop    ebx
c0027456:	5e                   	pop    esi
c0027457:	5f                   	pop    edi
c0027458:	5d                   	pop    ebp
c0027459:	c3                   	ret    
c002745a:	66 90                	xchg   ax,ax
c002745c:	ba 20 00 00 00       	mov    edx,0x20
c0027461:	29 ea                	sub    edx,ebp
c0027463:	89 e9                	mov    ecx,ebp
c0027465:	d3 e0                	shl    eax,cl
c0027467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002746b:	89 f8                	mov    eax,edi
c002746d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027471:	88 d1                	mov    cl,dl
c0027473:	d3 e8                	shr    eax,cl
c0027475:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027479:	09 c1                	or     ecx,eax
c002747b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002747f:	89 e9                	mov    ecx,ebp
c0027481:	d3 e7                	shl    edi,cl
c0027483:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027487:	89 d8                	mov    eax,ebx
c0027489:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002748d:	88 d1                	mov    cl,dl
c002748f:	d3 e8                	shr    eax,cl
c0027491:	89 c7                	mov    edi,eax
c0027493:	89 e9                	mov    ecx,ebp
c0027495:	d3 e3                	shl    ebx,cl
c0027497:	89 f0                	mov    eax,esi
c0027499:	88 d1                	mov    cl,dl
c002749b:	d3 e8                	shr    eax,cl
c002749d:	09 d8                	or     eax,ebx
c002749f:	89 e9                	mov    ecx,ebp
c00274a1:	d3 e6                	shl    esi,cl
c00274a3:	89 f3                	mov    ebx,esi
c00274a5:	89 fa                	mov    edx,edi
c00274a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00274ab:	89 d1                	mov    ecx,edx
c00274ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00274b1:	89 c6                	mov    esi,eax
c00274b3:	89 d7                	mov    edi,edx
c00274b5:	39 d1                	cmp    ecx,edx
c00274b7:	72 27                	jb     c00274e0 <__umoddi3+0x10c>
c00274b9:	74 21                	je     c00274dc <__umoddi3+0x108>
c00274bb:	89 ca                	mov    edx,ecx
c00274bd:	29 f3                	sub    ebx,esi
c00274bf:	19 fa                	sbb    edx,edi
c00274c1:	89 d0                	mov    eax,edx
c00274c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00274c7:	d3 e0                	shl    eax,cl
c00274c9:	89 e9                	mov    ecx,ebp
c00274cb:	d3 eb                	shr    ebx,cl
c00274cd:	09 d8                	or     eax,ebx
c00274cf:	d3 ea                	shr    edx,cl
c00274d1:	83 c4 1c             	add    esp,0x1c
c00274d4:	5b                   	pop    ebx
c00274d5:	5e                   	pop    esi
c00274d6:	5f                   	pop    edi
c00274d7:	5d                   	pop    ebp
c00274d8:	c3                   	ret    
c00274d9:	8d 76 00             	lea    esi,[esi+0x0]
c00274dc:	39 c3                	cmp    ebx,eax
c00274de:	73 db                	jae    c00274bb <__umoddi3+0xe7>
c00274e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00274e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00274e8:	89 d7                	mov    edi,edx
c00274ea:	89 c6                	mov    esi,eax
c00274ec:	eb cd                	jmp    c00274bb <__umoddi3+0xe7>

c00274ee <__addsf3>:
c00274ee:	55                   	push   ebp
c00274ef:	89 e5                	mov    ebp,esp
c00274f1:	57                   	push   edi
c00274f2:	56                   	push   esi
c00274f3:	53                   	push   ebx
c00274f4:	83 ec 08             	sub    esp,0x8
c00274f7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274fa:	89 fa                	mov    edx,edi
c00274fc:	89 f8                	mov    eax,edi
c00274fe:	c1 f8 17             	sar    eax,0x17
c0027501:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027504:	c1 e2 08             	shl    edx,0x8
c0027507:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002750d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027510:	89 de                	mov    esi,ebx
c0027512:	c1 fe 17             	sar    esi,0x17
c0027515:	c1 e3 08             	shl    ebx,0x8
c0027518:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002751e:	31 f0                	xor    eax,esi
c0027520:	0f 88 3b 01 00 00    	js     c0027661 <__addsf3+0x173>
c0027526:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027529:	29 f1                	sub    ecx,esi
c002752b:	85 c9                	test   ecx,ecx
c002752d:	7e 54                	jle    c0027583 <__addsf3+0x95>
c002752f:	89 f0                	mov    eax,esi
c0027531:	84 c0                	test   al,al
c0027533:	75 10                	jne    c0027545 <__addsf3+0x57>
c0027535:	85 db                	test   ebx,ebx
c0027537:	0f 84 aa 02 00 00    	je     c00277e7 <__addsf3+0x2f9>
c002753d:	49                   	dec    ecx
c002753e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027541:	74 38                	je     c002757b <__addsf3+0x8d>
c0027543:	eb 13                	jmp    c0027558 <__addsf3+0x6a>
c0027545:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027548:	f7 d0                	not    eax
c002754a:	84 c0                	test   al,al
c002754c:	0f 84 95 02 00 00    	je     c00277e7 <__addsf3+0x2f9>
c0027552:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027558:	83 f9 1f             	cmp    ecx,0x1f
c002755b:	0f 8f 86 02 00 00    	jg     c00277e7 <__addsf3+0x2f9>
c0027561:	89 de                	mov    esi,ebx
c0027563:	d3 ee                	shr    esi,cl
c0027565:	b8 20 00 00 00       	mov    eax,0x20
c002756a:	29 c8                	sub    eax,ecx
c002756c:	89 c1                	mov    ecx,eax
c002756e:	d3 e3                	shl    ebx,cl
c0027570:	31 c0                	xor    eax,eax
c0027572:	85 db                	test   ebx,ebx
c0027574:	0f 95 c0             	setne  al
c0027577:	09 f0                	or     eax,esi
c0027579:	01 d0                	add    eax,edx
c002757b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002757e:	e9 b6 00 00 00       	jmp    c0027639 <__addsf3+0x14b>
c0027583:	74 5c                	je     c00275e1 <__addsf3+0xf3>
c0027585:	89 f1                	mov    ecx,esi
c0027587:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002758a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002758d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027591:	75 14                	jne    c00275a7 <__addsf3+0xb9>
c0027593:	85 d2                	test   edx,edx
c0027595:	0f 84 4c 02 00 00    	je     c00277e7 <__addsf3+0x2f9>
c002759b:	49                   	dec    ecx
c002759c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002759f:	0f 84 94 00 00 00    	je     c0027639 <__addsf3+0x14b>
c00275a5:	eb 12                	jmp    c00275b9 <__addsf3+0xcb>
c00275a7:	89 f0                	mov    eax,esi
c00275a9:	f7 d0                	not    eax
c00275ab:	84 c0                	test   al,al
c00275ad:	0f 84 34 02 00 00    	je     c00277e7 <__addsf3+0x2f9>
c00275b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275b9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275bc:	83 f9 1f             	cmp    ecx,0x1f
c00275bf:	0f 8f 22 02 00 00    	jg     c00277e7 <__addsf3+0x2f9>
c00275c5:	89 d7                	mov    edi,edx
c00275c7:	d3 ef                	shr    edi,cl
c00275c9:	b8 20 00 00 00       	mov    eax,0x20
c00275ce:	29 c8                	sub    eax,ecx
c00275d0:	89 c1                	mov    ecx,eax
c00275d2:	d3 e2                	shl    edx,cl
c00275d4:	31 c0                	xor    eax,eax
c00275d6:	85 d2                	test   edx,edx
c00275d8:	0f 95 c0             	setne  al
c00275db:	09 f8                	or     eax,edi
c00275dd:	01 d8                	add    eax,ebx
c00275df:	eb 58                	jmp    c0027639 <__addsf3+0x14b>
c00275e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275e4:	8d 70 01             	lea    esi,[eax+0x1]
c00275e7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00275ed:	75 32                	jne    c0027621 <__addsf3+0x133>
c00275ef:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00275f3:	75 1f                	jne    c0027614 <__addsf3+0x126>
c00275f5:	85 d2                	test   edx,edx
c00275f7:	0f 84 e0 01 00 00    	je     c00277dd <__addsf3+0x2ef>
c00275fd:	85 db                	test   ebx,ebx
c00275ff:	0f 84 e2 01 00 00    	je     c00277e7 <__addsf3+0x2f9>
c0027605:	89 d0                	mov    eax,edx
c0027607:	01 d8                	add    eax,ebx
c0027609:	0f 89 a9 01 00 00    	jns    c00277b8 <__addsf3+0x2ca>
c002760f:	e9 9d 01 00 00       	jmp    c00277b1 <__addsf3+0x2c3>
c0027614:	85 d2                	test   edx,edx
c0027616:	0f 85 cb 01 00 00    	jne    c00277e7 <__addsf3+0x2f9>
c002761c:	e9 bc 01 00 00       	jmp    c00277dd <__addsf3+0x2ef>
c0027621:	31 c0                	xor    eax,eax
c0027623:	89 f1                	mov    ecx,esi
c0027625:	f7 d1                	not    ecx
c0027627:	84 c9                	test   cl,cl
c0027629:	0f 84 90 01 00 00    	je     c00277bf <__addsf3+0x2d1>
c002762f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027632:	d1 e8                	shr    eax,1
c0027634:	e9 86 01 00 00       	jmp    c00277bf <__addsf3+0x2d1>
c0027639:	85 c0                	test   eax,eax
c002763b:	0f 89 7e 01 00 00    	jns    c00277bf <__addsf3+0x2d1>
c0027641:	46                   	inc    esi
c0027642:	89 f2                	mov    edx,esi
c0027644:	f7 d2                	not    edx
c0027646:	84 d2                	test   dl,dl
c0027648:	0f 84 6f 01 00 00    	je     c00277bd <__addsf3+0x2cf>
c002764e:	89 c2                	mov    edx,eax
c0027650:	83 e2 01             	and    edx,0x1
c0027653:	d1 e8                	shr    eax,1
c0027655:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002765a:	09 d0                	or     eax,edx
c002765c:	e9 5e 01 00 00       	jmp    c00277bf <__addsf3+0x2d1>
c0027661:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027665:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027668:	89 f0                	mov    eax,esi
c002766a:	0f b6 c0             	movzx  eax,al
c002766d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027670:	29 c1                	sub    ecx,eax
c0027672:	85 c9                	test   ecx,ecx
c0027674:	7e 55                	jle    c00276cb <__addsf3+0x1dd>
c0027676:	85 c0                	test   eax,eax
c0027678:	75 11                	jne    c002768b <__addsf3+0x19d>
c002767a:	85 db                	test   ebx,ebx
c002767c:	0f 84 65 01 00 00    	je     c00277e7 <__addsf3+0x2f9>
c0027682:	49                   	dec    ecx
c0027683:	75 19                	jne    c002769e <__addsf3+0x1b0>
c0027685:	89 d0                	mov    eax,edx
c0027687:	29 d8                	sub    eax,ebx
c0027689:	eb 38                	jmp    c00276c3 <__addsf3+0x1d5>
c002768b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002768e:	f7 d0                	not    eax
c0027690:	84 c0                	test   al,al
c0027692:	0f 84 4f 01 00 00    	je     c00277e7 <__addsf3+0x2f9>
c0027698:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002769e:	83 f9 1f             	cmp    ecx,0x1f
c00276a1:	0f 8f 40 01 00 00    	jg     c00277e7 <__addsf3+0x2f9>
c00276a7:	89 de                	mov    esi,ebx
c00276a9:	d3 ee                	shr    esi,cl
c00276ab:	b8 20 00 00 00       	mov    eax,0x20
c00276b0:	29 c8                	sub    eax,ecx
c00276b2:	89 c1                	mov    ecx,eax
c00276b4:	d3 e3                	shl    ebx,cl
c00276b6:	31 c0                	xor    eax,eax
c00276b8:	85 db                	test   ebx,ebx
c00276ba:	0f 95 c0             	setne  al
c00276bd:	09 f0                	or     eax,esi
c00276bf:	29 c2                	sub    edx,eax
c00276c1:	89 d0                	mov    eax,edx
c00276c3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276c6:	e9 af 00 00 00       	jmp    c002777a <__addsf3+0x28c>
c00276cb:	74 5c                	je     c0027729 <__addsf3+0x23b>
c00276cd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00276d0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276d3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00276d7:	75 14                	jne    c00276ed <__addsf3+0x1ff>
c00276d9:	85 d2                	test   edx,edx
c00276db:	0f 84 06 01 00 00    	je     c00277e7 <__addsf3+0x2f9>
c00276e1:	48                   	dec    eax
c00276e2:	75 1b                	jne    c00276ff <__addsf3+0x211>
c00276e4:	89 d8                	mov    eax,ebx
c00276e6:	29 d0                	sub    eax,edx
c00276e8:	e9 8d 00 00 00       	jmp    c002777a <__addsf3+0x28c>
c00276ed:	89 f1                	mov    ecx,esi
c00276ef:	f7 d1                	not    ecx
c00276f1:	84 c9                	test   cl,cl
c00276f3:	0f 84 ee 00 00 00    	je     c00277e7 <__addsf3+0x2f9>
c00276f9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027702:	83 f8 1f             	cmp    eax,0x1f
c0027705:	0f 8f dc 00 00 00    	jg     c00277e7 <__addsf3+0x2f9>
c002770b:	89 d7                	mov    edi,edx
c002770d:	88 c1                	mov    cl,al
c002770f:	d3 ef                	shr    edi,cl
c0027711:	b9 20 00 00 00       	mov    ecx,0x20
c0027716:	29 c1                	sub    ecx,eax
c0027718:	d3 e2                	shl    edx,cl
c002771a:	31 c0                	xor    eax,eax
c002771c:	85 d2                	test   edx,edx
c002771e:	0f 95 c0             	setne  al
c0027721:	09 f8                	or     eax,edi
c0027723:	29 c3                	sub    ebx,eax
c0027725:	89 d8                	mov    eax,ebx
c0027727:	eb 51                	jmp    c002777a <__addsf3+0x28c>
c0027729:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002772c:	40                   	inc    eax
c002772d:	a8 fe                	test   al,0xfe
c002772f:	75 3d                	jne    c002776e <__addsf3+0x280>
c0027731:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027735:	0f 85 a7 00 00 00    	jne    c00277e2 <__addsf3+0x2f4>
c002773b:	85 d2                	test   edx,edx
c002773d:	75 12                	jne    c0027751 <__addsf3+0x263>
c002773f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027742:	85 db                	test   ebx,ebx
c0027744:	0f 85 9d 00 00 00    	jne    c00277e7 <__addsf3+0x2f9>
c002774a:	31 ff                	xor    edi,edi
c002774c:	e9 96 00 00 00       	jmp    c00277e7 <__addsf3+0x2f9>
c0027751:	85 db                	test   ebx,ebx
c0027753:	0f 84 8e 00 00 00    	je     c00277e7 <__addsf3+0x2f9>
c0027759:	89 d0                	mov    eax,edx
c002775b:	29 d8                	sub    eax,ebx
c002775d:	79 06                	jns    c0027765 <__addsf3+0x277>
c002775f:	89 d8                	mov    eax,ebx
c0027761:	29 d0                	sub    eax,edx
c0027763:	eb 5a                	jmp    c00277bf <__addsf3+0x2d1>
c0027765:	bf 00 00 00 00       	mov    edi,0x0
c002776a:	74 7b                	je     c00277e7 <__addsf3+0x2f9>
c002776c:	eb 4a                	jmp    c00277b8 <__addsf3+0x2ca>
c002776e:	89 d0                	mov    eax,edx
c0027770:	29 d8                	sub    eax,ebx
c0027772:	79 12                	jns    c0027786 <__addsf3+0x298>
c0027774:	89 d8                	mov    eax,ebx
c0027776:	29 d0                	sub    eax,edx
c0027778:	eb 09                	jmp    c0027783 <__addsf3+0x295>
c002777a:	85 c0                	test   eax,eax
c002777c:	79 41                	jns    c00277bf <__addsf3+0x2d1>
c002777e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027783:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027786:	31 f6                	xor    esi,esi
c0027788:	85 c0                	test   eax,eax
c002778a:	74 33                	je     c00277bf <__addsf3+0x2d1>
c002778c:	0f bd c8             	bsr    ecx,eax
c002778f:	83 f1 1f             	xor    ecx,0x1f
c0027792:	d3 e0                	shl    eax,cl
c0027794:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027798:	39 ca                	cmp    edx,ecx
c002779a:	7f 10                	jg     c00277ac <__addsf3+0x2be>
c002779c:	29 d1                	sub    ecx,edx
c002779e:	41                   	inc    ecx
c002779f:	d3 e8                	shr    eax,cl
c00277a1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277a4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00277aa:	eb 13                	jmp    c00277bf <__addsf3+0x2d1>
c00277ac:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277af:	29 ce                	sub    esi,ecx
c00277b1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277b6:	eb 07                	jmp    c00277bf <__addsf3+0x2d1>
c00277b8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277bb:	eb 02                	jmp    c00277bf <__addsf3+0x2d1>
c00277bd:	31 c0                	xor    eax,eax
c00277bf:	89 c2                	mov    edx,eax
c00277c1:	c1 ea 08             	shr    edx,0x8
c00277c4:	a8 7f                	test   al,0x7f
c00277c6:	0f 95 c1             	setne  cl
c00277c9:	09 d1                	or     ecx,edx
c00277cb:	83 e1 01             	and    ecx,0x1
c00277ce:	c1 e8 07             	shr    eax,0x7
c00277d1:	21 c8                	and    eax,ecx
c00277d3:	c1 e6 17             	shl    esi,0x17
c00277d6:	09 d6                	or     esi,edx
c00277d8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00277db:	eb 0a                	jmp    c00277e7 <__addsf3+0x2f9>
c00277dd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277e0:	eb 05                	jmp    c00277e7 <__addsf3+0x2f9>
c00277e2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00277e7:	89 f8                	mov    eax,edi
c00277e9:	5a                   	pop    edx
c00277ea:	59                   	pop    ecx
c00277eb:	5b                   	pop    ebx
c00277ec:	5e                   	pop    esi
c00277ed:	5f                   	pop    edi
c00277ee:	5d                   	pop    ebp
c00277ef:	c3                   	ret    

c00277f0 <__subsf3>:
c00277f0:	55                   	push   ebp
c00277f1:	89 e5                	mov    ebp,esp
c00277f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277f6:	05 00 00 00 80       	add    eax,0x80000000
c00277fb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00277fe:	5d                   	pop    ebp
c00277ff:	e9 ea fc ff ff       	jmp    c00274ee <__addsf3>

c0027804 <__negsf2>:
c0027804:	55                   	push   ebp
c0027805:	89 e5                	mov    ebp,esp
c0027807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002780a:	05 00 00 00 80       	add    eax,0x80000000
c002780f:	5d                   	pop    ebp
c0027810:	c3                   	ret    

c0027811 <__mulsf3>:
c0027811:	55                   	push   ebp
c0027812:	89 e5                	mov    ebp,esp
c0027814:	57                   	push   edi
c0027815:	56                   	push   esi
c0027816:	53                   	push   ebx
c0027817:	83 ec 1c             	sub    esp,0x1c
c002781a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002781d:	89 f0                	mov    eax,esi
c002781f:	89 f1                	mov    ecx,esi
c0027821:	c1 f9 17             	sar    ecx,0x17
c0027824:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027827:	c1 e0 08             	shl    eax,0x8
c002782a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002782f:	89 c1                	mov    ecx,eax
c0027831:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027834:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027837:	89 c7                	mov    edi,eax
c0027839:	c1 ff 17             	sar    edi,0x17
c002783c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027840:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027843:	89 f8                	mov    eax,edi
c0027845:	0f b6 c0             	movzx  eax,al
c0027848:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002784b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002784f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027852:	42                   	inc    edx
c0027853:	80 e2 fe             	and    dl,0xfe
c0027856:	75 7b                	jne    c00278d3 <__mulsf3+0xc2>
c0027858:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002785c:	74 54                	je     c00278b2 <__mulsf3+0xa1>
c002785e:	85 c9                	test   ecx,ecx
c0027860:	0f 85 64 01 00 00    	jne    c00279ca <__mulsf3+0x1b9>
c0027866:	8d 57 01             	lea    edx,[edi+0x1]
c0027869:	80 e2 fe             	and    dl,0xfe
c002786c:	75 1f                	jne    c002788d <__mulsf3+0x7c>
c002786e:	85 c0                	test   eax,eax
c0027870:	b8 00 00 00 00       	mov    eax,0x0
c0027875:	74 29                	je     c00278a0 <__mulsf3+0x8f>
c0027877:	53                   	push   ebx
c0027878:	53                   	push   ebx
c0027879:	50                   	push   eax
c002787a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002787d:	e8 96 05 00 00       	call   c0027e18 <__nesf2>
c0027882:	83 c4 10             	add    esp,0x10
c0027885:	85 c0                	test   eax,eax
c0027887:	0f 85 3a 01 00 00    	jne    c00279c7 <__mulsf3+0x1b6>
c002788d:	85 ff                	test   edi,edi
c002788f:	0f 89 35 01 00 00    	jns    c00279ca <__mulsf3+0x1b9>
c0027895:	81 c6 00 00 00 80    	add    esi,0x80000000
c002789b:	e9 2a 01 00 00       	jmp    c00279ca <__mulsf3+0x1b9>
c00278a0:	51                   	push   ecx
c00278a1:	51                   	push   ecx
c00278a2:	50                   	push   eax
c00278a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278a6:	e8 6d 05 00 00       	call   c0027e18 <__nesf2>
c00278ab:	83 c4 10             	add    esp,0x10
c00278ae:	85 c0                	test   eax,eax
c00278b0:	eb 15                	jmp    c00278c7 <__mulsf3+0xb6>
c00278b2:	85 c9                	test   ecx,ecx
c00278b4:	74 0b                	je     c00278c1 <__mulsf3+0xb0>
c00278b6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00278b9:	01 c9                	add    ecx,ecx
c00278bb:	78 16                	js     c00278d3 <__mulsf3+0xc2>
c00278bd:	89 d3                	mov    ebx,edx
c00278bf:	eb f5                	jmp    c00278b6 <__mulsf3+0xa5>
c00278c1:	89 f8                	mov    eax,edi
c00278c3:	f7 d0                	not    eax
c00278c5:	84 c0                	test   al,al
c00278c7:	75 c4                	jne    c002788d <__mulsf3+0x7c>
c00278c9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00278ce:	e9 f7 00 00 00       	jmp    c00279ca <__mulsf3+0x1b9>
c00278d3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00278d6:	c1 e6 08             	shl    esi,0x8
c00278d9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00278df:	8d 57 01             	lea    edx,[edi+0x1]
c00278e2:	80 e2 fe             	and    dl,0xfe
c00278e5:	75 63                	jne    c002794a <__mulsf3+0x139>
c00278e7:	85 c0                	test   eax,eax
c00278e9:	74 2f                	je     c002791a <__mulsf3+0x109>
c00278eb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00278ef:	0f 89 d2 00 00 00    	jns    c00279c7 <__mulsf3+0x1b6>
c00278f5:	52                   	push   edx
c00278f6:	52                   	push   edx
c00278f7:	6a 00                	push   0x0
c00278f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278fc:	e8 dc 04 00 00       	call   c0027ddd <__eqsf2>
c0027901:	83 c4 10             	add    esp,0x10
c0027904:	85 c0                	test   eax,eax
c0027906:	0f 85 bb 00 00 00    	jne    c00279c7 <__mulsf3+0x1b6>
c002790c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002790f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027915:	e9 b0 00 00 00       	jmp    c00279ca <__mulsf3+0x1b9>
c002791a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002791d:	50                   	push   eax
c002791e:	50                   	push   eax
c002791f:	6a 00                	push   0x0
c0027921:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027924:	e8 b4 04 00 00       	call   c0027ddd <__eqsf2>
c0027929:	83 c4 10             	add    esp,0x10
c002792c:	85 c0                	test   eax,eax
c002792e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027931:	75 0c                	jne    c002793f <__mulsf3+0x12e>
c0027933:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027937:	0f 89 8a 00 00 00    	jns    c00279c7 <__mulsf3+0x1b6>
c002793d:	eb cd                	jmp    c002790c <__mulsf3+0xfb>
c002793f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027942:	01 f6                	add    esi,esi
c0027944:	78 04                	js     c002794a <__mulsf3+0x139>
c0027946:	89 c3                	mov    ebx,eax
c0027948:	eb f5                	jmp    c002793f <__mulsf3+0x12e>
c002794a:	89 c8                	mov    eax,ecx
c002794c:	0d 00 00 00 80       	or     eax,0x80000000
c0027951:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027957:	f7 e6                	mul    esi
c0027959:	85 c0                	test   eax,eax
c002795b:	0f 95 c0             	setne  al
c002795e:	0f b6 c0             	movzx  eax,al
c0027961:	09 c2                	or     edx,eax
c0027963:	78 03                	js     c0027968 <__mulsf3+0x157>
c0027965:	01 d2                	add    edx,edx
c0027967:	4b                   	dec    ebx
c0027968:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002796e:	7f 22                	jg     c0027992 <__mulsf3+0x181>
c0027970:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027976:	85 db                	test   ebx,ebx
c0027978:	7f 23                	jg     c002799d <__mulsf3+0x18c>
c002797a:	83 fb e9             	cmp    ebx,0xffffffe9
c002797d:	7c 1a                	jl     c0027999 <__mulsf3+0x188>
c002797f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027985:	b9 01 00 00 00       	mov    ecx,0x1
c002798a:	29 d9                	sub    ecx,ebx
c002798c:	d3 ea                	shr    edx,cl
c002798e:	31 db                	xor    ebx,ebx
c0027990:	eb 0b                	jmp    c002799d <__mulsf3+0x18c>
c0027992:	bb ff 00 00 00       	mov    ebx,0xff
c0027997:	eb 02                	jmp    c002799b <__mulsf3+0x18a>
c0027999:	31 db                	xor    ebx,ebx
c002799b:	31 d2                	xor    edx,edx
c002799d:	89 d0                	mov    eax,edx
c002799f:	c1 e8 08             	shr    eax,0x8
c00279a2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00279a5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00279ab:	09 fb                	or     ebx,edi
c00279ad:	c1 e3 17             	shl    ebx,0x17
c00279b0:	09 c3                	or     ebx,eax
c00279b2:	f6 c2 7f             	test   dl,0x7f
c00279b5:	0f 95 c1             	setne  cl
c00279b8:	09 c8                	or     eax,ecx
c00279ba:	83 e0 01             	and    eax,0x1
c00279bd:	c1 ea 07             	shr    edx,0x7
c00279c0:	21 c2                	and    edx,eax
c00279c2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00279c5:	eb 03                	jmp    c00279ca <__mulsf3+0x1b9>
c00279c7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00279ca:	89 f0                	mov    eax,esi
c00279cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00279cf:	5b                   	pop    ebx
c00279d0:	5e                   	pop    esi
c00279d1:	5f                   	pop    edi
c00279d2:	5d                   	pop    ebp
c00279d3:	c3                   	ret    

c00279d4 <__divsf3>:
c00279d4:	55                   	push   ebp
c00279d5:	89 e5                	mov    ebp,esp
c00279d7:	57                   	push   edi
c00279d8:	56                   	push   esi
c00279d9:	53                   	push   ebx
c00279da:	83 ec 1c             	sub    esp,0x1c
c00279dd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279e0:	89 d8                	mov    eax,ebx
c00279e2:	89 d9                	mov    ecx,ebx
c00279e4:	c1 f9 17             	sar    ecx,0x17
c00279e7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279ea:	c1 e0 08             	shl    eax,0x8
c00279ed:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00279f2:	89 c1                	mov    ecx,eax
c00279f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279fa:	89 c7                	mov    edi,eax
c00279fc:	c1 ff 17             	sar    edi,0x17
c00279ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027a03:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027a06:	89 f8                	mov    eax,edi
c0027a08:	0f b6 c0             	movzx  eax,al
c0027a0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a0e:	29 c6                	sub    esi,eax
c0027a10:	83 c6 7f             	add    esi,0x7f
c0027a13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027a16:	42                   	inc    edx
c0027a17:	80 e2 fe             	and    dl,0xfe
c0027a1a:	0f 85 9c 00 00 00    	jne    c0027abc <__divsf3+0xe8>
c0027a20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a24:	74 33                	je     c0027a59 <__divsf3+0x85>
c0027a26:	85 c9                	test   ecx,ecx
c0027a28:	0f 85 c7 01 00 00    	jne    c0027bf5 <__divsf3+0x221>
c0027a2e:	8d 57 01             	lea    edx,[edi+0x1]
c0027a31:	80 e2 fe             	and    dl,0xfe
c0027a34:	75 2f                	jne    c0027a65 <__divsf3+0x91>
c0027a36:	85 c0                	test   eax,eax
c0027a38:	74 2b                	je     c0027a65 <__divsf3+0x91>
c0027a3a:	51                   	push   ecx
c0027a3b:	51                   	push   ecx
c0027a3c:	6a 00                	push   0x0
c0027a3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a41:	e8 d2 03 00 00       	call   c0027e18 <__nesf2>
c0027a46:	83 c4 10             	add    esp,0x10
c0027a49:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a4c:	85 c0                	test   eax,eax
c0027a4e:	0f 85 a1 01 00 00    	jne    c0027bf5 <__divsf3+0x221>
c0027a54:	e9 92 01 00 00       	jmp    c0027beb <__divsf3+0x217>
c0027a59:	85 c9                	test   ecx,ecx
c0027a5b:	75 1b                	jne    c0027a78 <__divsf3+0xa4>
c0027a5d:	8d 57 01             	lea    edx,[edi+0x1]
c0027a60:	80 e2 fe             	and    dl,0xfe
c0027a63:	74 1e                	je     c0027a83 <__divsf3+0xaf>
c0027a65:	85 ff                	test   edi,edi
c0027a67:	0f 89 88 01 00 00    	jns    c0027bf5 <__divsf3+0x221>
c0027a6d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027a73:	e9 7d 01 00 00       	jmp    c0027bf5 <__divsf3+0x221>
c0027a78:	8d 56 ff             	lea    edx,[esi-0x1]
c0027a7b:	01 c9                	add    ecx,ecx
c0027a7d:	78 3d                	js     c0027abc <__divsf3+0xe8>
c0027a7f:	89 d6                	mov    esi,edx
c0027a81:	eb f5                	jmp    c0027a78 <__divsf3+0xa4>
c0027a83:	85 c0                	test   eax,eax
c0027a85:	b8 00 00 00 00       	mov    eax,0x0
c0027a8a:	74 18                	je     c0027aa4 <__divsf3+0xd0>
c0027a8c:	52                   	push   edx
c0027a8d:	52                   	push   edx
c0027a8e:	50                   	push   eax
c0027a8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a92:	e8 81 03 00 00       	call   c0027e18 <__nesf2>
c0027a97:	83 c4 10             	add    esp,0x10
c0027a9a:	85 c0                	test   eax,eax
c0027a9c:	0f 85 50 01 00 00    	jne    c0027bf2 <__divsf3+0x21e>
c0027aa2:	eb c1                	jmp    c0027a65 <__divsf3+0x91>
c0027aa4:	56                   	push   esi
c0027aa5:	56                   	push   esi
c0027aa6:	50                   	push   eax
c0027aa7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aaa:	e8 69 03 00 00       	call   c0027e18 <__nesf2>
c0027aaf:	83 c4 10             	add    esp,0x10
c0027ab2:	85 c0                	test   eax,eax
c0027ab4:	0f 84 31 01 00 00    	je     c0027beb <__divsf3+0x217>
c0027aba:	eb a9                	jmp    c0027a65 <__divsf3+0x91>
c0027abc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027abf:	c1 e3 08             	shl    ebx,0x8
c0027ac2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ac8:	8d 57 01             	lea    edx,[edi+0x1]
c0027acb:	80 e2 fe             	and    dl,0xfe
c0027ace:	75 71                	jne    c0027b41 <__divsf3+0x16d>
c0027ad0:	85 c0                	test   eax,eax
c0027ad2:	ba 00 00 00 00       	mov    edx,0x0
c0027ad7:	74 2f                	je     c0027b08 <__divsf3+0x134>
c0027ad9:	51                   	push   ecx
c0027ada:	51                   	push   ecx
c0027adb:	52                   	push   edx
c0027adc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027adf:	e8 f9 02 00 00       	call   c0027ddd <__eqsf2>
c0027ae4:	83 c4 10             	add    esp,0x10
c0027ae7:	85 c0                	test   eax,eax
c0027ae9:	0f 85 03 01 00 00    	jne    c0027bf2 <__divsf3+0x21e>
c0027aef:	31 d2                	xor    edx,edx
c0027af1:	89 d3                	mov    ebx,edx
c0027af3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af6:	31 f8                	xor    eax,edi
c0027af8:	0f 89 f7 00 00 00    	jns    c0027bf5 <__divsf3+0x221>
c0027afe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027b03:	e9 ed 00 00 00       	jmp    c0027bf5 <__divsf3+0x221>
c0027b08:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027b0b:	50                   	push   eax
c0027b0c:	50                   	push   eax
c0027b0d:	52                   	push   edx
c0027b0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b11:	e8 c7 02 00 00       	call   c0027ddd <__eqsf2>
c0027b16:	83 c4 10             	add    esp,0x10
c0027b19:	85 c0                	test   eax,eax
c0027b1b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b1e:	75 16                	jne    c0027b36 <__divsf3+0x162>
c0027b20:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b23:	31 fb                	xor    ebx,edi
c0027b25:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027b2b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027b31:	e9 bf 00 00 00       	jmp    c0027bf5 <__divsf3+0x221>
c0027b36:	8d 46 01             	lea    eax,[esi+0x1]
c0027b39:	01 db                	add    ebx,ebx
c0027b3b:	78 04                	js     c0027b41 <__divsf3+0x16d>
c0027b3d:	89 c6                	mov    esi,eax
c0027b3f:	eb f5                	jmp    c0027b36 <__divsf3+0x162>
c0027b41:	89 c8                	mov    eax,ecx
c0027b43:	0d 00 00 00 80       	or     eax,0x80000000
c0027b48:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027b4e:	31 d2                	xor    edx,edx
c0027b50:	39 d8                	cmp    eax,ebx
c0027b52:	72 07                	jb     c0027b5b <__divsf3+0x187>
c0027b54:	29 d8                	sub    eax,ebx
c0027b56:	ba 01 00 00 00       	mov    edx,0x1
c0027b5b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027b62:	01 d2                	add    edx,edx
c0027b64:	89 c1                	mov    ecx,eax
c0027b66:	01 c0                	add    eax,eax
c0027b68:	85 c9                	test   ecx,ecx
c0027b6a:	78 04                	js     c0027b70 <__divsf3+0x19c>
c0027b6c:	39 c3                	cmp    ebx,eax
c0027b6e:	77 05                	ja     c0027b75 <__divsf3+0x1a1>
c0027b70:	29 d8                	sub    eax,ebx
c0027b72:	83 ca 01             	or     edx,0x1
c0027b75:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027b78:	75 e8                	jne    c0027b62 <__divsf3+0x18e>
c0027b7a:	85 c0                	test   eax,eax
c0027b7c:	0f 95 c0             	setne  al
c0027b7f:	0f b6 c0             	movzx  eax,al
c0027b82:	c1 e2 06             	shl    edx,0x6
c0027b85:	09 c2                	or     edx,eax
c0027b87:	78 03                	js     c0027b8c <__divsf3+0x1b8>
c0027b89:	01 d2                	add    edx,edx
c0027b8b:	4e                   	dec    esi
c0027b8c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027b92:	7f 22                	jg     c0027bb6 <__divsf3+0x1e2>
c0027b94:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b9a:	85 f6                	test   esi,esi
c0027b9c:	7f 23                	jg     c0027bc1 <__divsf3+0x1ed>
c0027b9e:	83 fe e9             	cmp    esi,0xffffffe9
c0027ba1:	7c 1a                	jl     c0027bbd <__divsf3+0x1e9>
c0027ba3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ba9:	b9 01 00 00 00       	mov    ecx,0x1
c0027bae:	29 f1                	sub    ecx,esi
c0027bb0:	d3 ea                	shr    edx,cl
c0027bb2:	31 f6                	xor    esi,esi
c0027bb4:	eb 0b                	jmp    c0027bc1 <__divsf3+0x1ed>
c0027bb6:	be ff 00 00 00       	mov    esi,0xff
c0027bbb:	eb 02                	jmp    c0027bbf <__divsf3+0x1eb>
c0027bbd:	31 f6                	xor    esi,esi
c0027bbf:	31 d2                	xor    edx,edx
c0027bc1:	89 d0                	mov    eax,edx
c0027bc3:	c1 e8 08             	shr    eax,0x8
c0027bc6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027bc9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027bcf:	09 fe                	or     esi,edi
c0027bd1:	c1 e6 17             	shl    esi,0x17
c0027bd4:	09 c6                	or     esi,eax
c0027bd6:	f6 c2 7f             	test   dl,0x7f
c0027bd9:	0f 95 c1             	setne  cl
c0027bdc:	09 c8                	or     eax,ecx
c0027bde:	83 e0 01             	and    eax,0x1
c0027be1:	c1 ea 07             	shr    edx,0x7
c0027be4:	21 c2                	and    edx,eax
c0027be6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027be9:	eb 0a                	jmp    c0027bf5 <__divsf3+0x221>
c0027beb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027bf0:	eb 03                	jmp    c0027bf5 <__divsf3+0x221>
c0027bf2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bf5:	89 d8                	mov    eax,ebx
c0027bf7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027bfa:	5b                   	pop    ebx
c0027bfb:	5e                   	pop    esi
c0027bfc:	5f                   	pop    edi
c0027bfd:	5d                   	pop    ebp
c0027bfe:	c3                   	ret    

c0027bff <__floatsisf>:
c0027bff:	55                   	push   ebp
c0027c00:	89 e5                	mov    ebp,esp
c0027c02:	53                   	push   ebx
c0027c03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c06:	85 d2                	test   edx,edx
c0027c08:	7e 2b                	jle    c0027c35 <__floatsisf+0x36>
c0027c0a:	0f bd ca             	bsr    ecx,edx
c0027c0d:	83 f1 1f             	xor    ecx,0x1f
c0027c10:	d3 e2                	shl    edx,cl
c0027c12:	89 d0                	mov    eax,edx
c0027c14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c19:	89 c3                	mov    ebx,eax
c0027c1b:	c1 eb 08             	shr    ebx,0x8
c0027c1e:	80 e2 7f             	and    dl,0x7f
c0027c21:	0f 95 c2             	setne  dl
c0027c24:	09 da                	or     edx,ebx
c0027c26:	83 e2 01             	and    edx,0x1
c0027c29:	c1 e8 07             	shr    eax,0x7
c0027c2c:	21 c2                	and    edx,eax
c0027c2e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c33:	eb 32                	jmp    c0027c67 <__floatsisf+0x68>
c0027c35:	b8 00 00 00 00       	mov    eax,0x0
c0027c3a:	74 34                	je     c0027c70 <__floatsisf+0x71>
c0027c3c:	f7 da                	neg    edx
c0027c3e:	0f bd ca             	bsr    ecx,edx
c0027c41:	83 f1 1f             	xor    ecx,0x1f
c0027c44:	d3 e2                	shl    edx,cl
c0027c46:	89 d0                	mov    eax,edx
c0027c48:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c4d:	89 c3                	mov    ebx,eax
c0027c4f:	c1 eb 08             	shr    ebx,0x8
c0027c52:	80 e2 7f             	and    dl,0x7f
c0027c55:	0f 95 c2             	setne  dl
c0027c58:	09 da                	or     edx,ebx
c0027c5a:	83 e2 01             	and    edx,0x1
c0027c5d:	c1 e8 07             	shr    eax,0x7
c0027c60:	21 c2                	and    edx,eax
c0027c62:	b8 9e 01 00 00       	mov    eax,0x19e
c0027c67:	29 c8                	sub    eax,ecx
c0027c69:	c1 e0 17             	shl    eax,0x17
c0027c6c:	09 d8                	or     eax,ebx
c0027c6e:	01 d0                	add    eax,edx
c0027c70:	5b                   	pop    ebx
c0027c71:	5d                   	pop    ebp
c0027c72:	c3                   	ret    

c0027c73 <__floatunsisf>:
c0027c73:	55                   	push   ebp
c0027c74:	89 e5                	mov    ebp,esp
c0027c76:	53                   	push   ebx
c0027c77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c7a:	31 c0                	xor    eax,eax
c0027c7c:	85 d2                	test   edx,edx
c0027c7e:	74 32                	je     c0027cb2 <__floatunsisf+0x3f>
c0027c80:	0f bd ca             	bsr    ecx,edx
c0027c83:	83 f1 1f             	xor    ecx,0x1f
c0027c86:	d3 e2                	shl    edx,cl
c0027c88:	89 d0                	mov    eax,edx
c0027c8a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c8f:	89 c3                	mov    ebx,eax
c0027c91:	c1 eb 08             	shr    ebx,0x8
c0027c94:	80 e2 7f             	and    dl,0x7f
c0027c97:	0f 95 c2             	setne  dl
c0027c9a:	09 da                	or     edx,ebx
c0027c9c:	83 e2 01             	and    edx,0x1
c0027c9f:	c1 e8 07             	shr    eax,0x7
c0027ca2:	21 c2                	and    edx,eax
c0027ca4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027ca9:	29 c8                	sub    eax,ecx
c0027cab:	c1 e0 17             	shl    eax,0x17
c0027cae:	09 d8                	or     eax,ebx
c0027cb0:	01 d0                	add    eax,edx
c0027cb2:	5b                   	pop    ebx
c0027cb3:	5d                   	pop    ebp
c0027cb4:	c3                   	ret    

c0027cb5 <__fixsfsi>:
c0027cb5:	55                   	push   ebp
c0027cb6:	89 e5                	mov    ebp,esp
c0027cb8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027cbb:	89 d1                	mov    ecx,edx
c0027cbd:	c1 e1 08             	shl    ecx,0x8
c0027cc0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027cc6:	c1 fa 17             	sar    edx,0x17
c0027cc9:	78 1c                	js     c0027ce7 <__fixsfsi+0x32>
c0027ccb:	83 ea 7f             	sub    edx,0x7f
c0027cce:	31 c0                	xor    eax,eax
c0027cd0:	83 fa 1e             	cmp    edx,0x1e
c0027cd3:	77 40                	ja     c0027d15 <__fixsfsi+0x60>
c0027cd5:	89 c8                	mov    eax,ecx
c0027cd7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cdc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ce1:	29 d1                	sub    ecx,edx
c0027ce3:	d3 e8                	shr    eax,cl
c0027ce5:	eb 2e                	jmp    c0027d15 <__fixsfsi+0x60>
c0027ce7:	31 c0                	xor    eax,eax
c0027ce9:	81 c2 81 00 00 00    	add    edx,0x81
c0027cef:	78 24                	js     c0027d15 <__fixsfsi+0x60>
c0027cf1:	83 fa 1e             	cmp    edx,0x1e
c0027cf4:	7e 09                	jle    c0027cff <__fixsfsi+0x4a>
c0027cf6:	83 fa 1f             	cmp    edx,0x1f
c0027cf9:	75 18                	jne    c0027d13 <__fixsfsi+0x5e>
c0027cfb:	85 c9                	test   ecx,ecx
c0027cfd:	75 14                	jne    c0027d13 <__fixsfsi+0x5e>
c0027cff:	89 c8                	mov    eax,ecx
c0027d01:	0d 00 00 00 80       	or     eax,0x80000000
c0027d06:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d0b:	29 d1                	sub    ecx,edx
c0027d0d:	d3 e8                	shr    eax,cl
c0027d0f:	f7 d8                	neg    eax
c0027d11:	eb 02                	jmp    c0027d15 <__fixsfsi+0x60>
c0027d13:	31 c0                	xor    eax,eax
c0027d15:	5d                   	pop    ebp
c0027d16:	c3                   	ret    

c0027d17 <__fixunssfsi>:
c0027d17:	55                   	push   ebp
c0027d18:	89 e5                	mov    ebp,esp
c0027d1a:	53                   	push   ebx
c0027d1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d1e:	89 d3                	mov    ebx,edx
c0027d20:	c1 fb 17             	sar    ebx,0x17
c0027d23:	83 eb 7f             	sub    ebx,0x7f
c0027d26:	31 c0                	xor    eax,eax
c0027d28:	83 fb 1f             	cmp    ebx,0x1f
c0027d2b:	77 18                	ja     c0027d45 <__fixunssfsi+0x2e>
c0027d2d:	89 d0                	mov    eax,edx
c0027d2f:	c1 e0 08             	shl    eax,0x8
c0027d32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d37:	0d 00 00 00 80       	or     eax,0x80000000
c0027d3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d41:	29 d9                	sub    ecx,ebx
c0027d43:	d3 e8                	shr    eax,cl
c0027d45:	5b                   	pop    ebx
c0027d46:	5d                   	pop    ebp
c0027d47:	c3                   	ret    

c0027d48 <__cmpsf2>:
c0027d48:	55                   	push   ebp
c0027d49:	89 e5                	mov    ebp,esp
c0027d4b:	57                   	push   edi
c0027d4c:	56                   	push   esi
c0027d4d:	53                   	push   ebx
c0027d4e:	83 ec 24             	sub    esp,0x24
c0027d51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d57:	e8 4f 10 00 00       	call   c0028dab <__truncdfsf2>
c0027d5c:	5a                   	pop    edx
c0027d5d:	59                   	pop    ecx
c0027d5e:	89 c3                	mov    ebx,eax
c0027d60:	c1 e8 17             	shr    eax,0x17
c0027d63:	0f b6 f0             	movzx  esi,al
c0027d66:	89 d8                	mov    eax,ebx
c0027d68:	c1 e8 1f             	shr    eax,0x1f
c0027d6b:	31 c6                	xor    esi,eax
c0027d6d:	c1 e3 08             	shl    ebx,0x8
c0027d70:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d73:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d76:	e8 30 10 00 00       	call   c0028dab <__truncdfsf2>
c0027d7b:	83 c4 10             	add    esp,0x10
c0027d7e:	89 c1                	mov    ecx,eax
c0027d80:	c1 e9 17             	shr    ecx,0x17
c0027d83:	0f b6 c9             	movzx  ecx,cl
c0027d86:	89 c7                	mov    edi,eax
c0027d88:	c1 ef 1f             	shr    edi,0x1f
c0027d8b:	89 ca                	mov    edx,ecx
c0027d8d:	31 fa                	xor    edx,edi
c0027d8f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d92:	c1 e0 08             	shl    eax,0x8
c0027d95:	89 c2                	mov    edx,eax
c0027d97:	89 d8                	mov    eax,ebx
c0027d99:	09 d0                	or     eax,edx
c0027d9b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027da0:	09 f0                	or     eax,esi
c0027da2:	75 08                	jne    c0027dac <__cmpsf2+0x64>
c0027da4:	31 c0                	xor    eax,eax
c0027da6:	39 f9                	cmp    ecx,edi
c0027da8:	75 0c                	jne    c0027db6 <__cmpsf2+0x6e>
c0027daa:	eb 29                	jmp    c0027dd5 <__cmpsf2+0x8d>
c0027dac:	b8 01 00 00 00       	mov    eax,0x1
c0027db1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027db4:	7f 1f                	jg     c0027dd5 <__cmpsf2+0x8d>
c0027db6:	83 c8 ff             	or     eax,0xffffffff
c0027db9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027dbc:	7c 17                	jl     c0027dd5 <__cmpsf2+0x8d>
c0027dbe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027dc4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027dca:	b8 01 00 00 00       	mov    eax,0x1
c0027dcf:	39 d3                	cmp    ebx,edx
c0027dd1:	77 02                	ja     c0027dd5 <__cmpsf2+0x8d>
c0027dd3:	19 c0                	sbb    eax,eax
c0027dd5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027dd8:	5b                   	pop    ebx
c0027dd9:	5e                   	pop    esi
c0027dda:	5f                   	pop    edi
c0027ddb:	5d                   	pop    ebp
c0027ddc:	c3                   	ret    

c0027ddd <__eqsf2>:
c0027ddd:	55                   	push   ebp
c0027dde:	89 e5                	mov    ebp,esp
c0027de0:	83 ec 24             	sub    esp,0x24
c0027de3:	6a 01                	push   0x1
c0027de5:	83 ec 0c             	sub    esp,0xc
c0027de8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027deb:	e8 df 10 00 00       	call   c0028ecf <__extendsfdf2>
c0027df0:	83 c4 10             	add    esp,0x10
c0027df3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027df6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027df9:	52                   	push   edx
c0027dfa:	50                   	push   eax
c0027dfb:	50                   	push   eax
c0027dfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027dff:	e8 cb 10 00 00       	call   c0028ecf <__extendsfdf2>
c0027e04:	59                   	pop    ecx
c0027e05:	59                   	pop    ecx
c0027e06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e0c:	52                   	push   edx
c0027e0d:	50                   	push   eax
c0027e0e:	e8 35 ff ff ff       	call   c0027d48 <__cmpsf2>
c0027e13:	83 c4 20             	add    esp,0x20
c0027e16:	c9                   	leave  
c0027e17:	c3                   	ret    

c0027e18 <__nesf2>:
c0027e18:	eb c3                	jmp    c0027ddd <__eqsf2>

c0027e1a <__gtsf2>:
c0027e1a:	55                   	push   ebp
c0027e1b:	89 e5                	mov    ebp,esp
c0027e1d:	83 ec 24             	sub    esp,0x24
c0027e20:	6a ff                	push   0xffffffff
c0027e22:	83 ec 0c             	sub    esp,0xc
c0027e25:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e28:	e8 a2 10 00 00       	call   c0028ecf <__extendsfdf2>
c0027e2d:	83 c4 10             	add    esp,0x10
c0027e30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e33:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e36:	52                   	push   edx
c0027e37:	50                   	push   eax
c0027e38:	50                   	push   eax
c0027e39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e3c:	e8 8e 10 00 00       	call   c0028ecf <__extendsfdf2>
c0027e41:	59                   	pop    ecx
c0027e42:	59                   	pop    ecx
c0027e43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e46:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e49:	52                   	push   edx
c0027e4a:	50                   	push   eax
c0027e4b:	e8 f8 fe ff ff       	call   c0027d48 <__cmpsf2>
c0027e50:	83 c4 20             	add    esp,0x20
c0027e53:	c9                   	leave  
c0027e54:	c3                   	ret    

c0027e55 <__gesf2>:
c0027e55:	eb c3                	jmp    c0027e1a <__gtsf2>

c0027e57 <__ltsf2>:
c0027e57:	eb 84                	jmp    c0027ddd <__eqsf2>

c0027e59 <__lesf2>:
c0027e59:	eb 82                	jmp    c0027ddd <__eqsf2>

c0027e5b <__adddf3>:
c0027e5b:	55                   	push   ebp
c0027e5c:	89 e5                	mov    ebp,esp
c0027e5e:	57                   	push   edi
c0027e5f:	56                   	push   esi
c0027e60:	53                   	push   ebx
c0027e61:	83 ec 24             	sub    esp,0x24
c0027e64:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e67:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e76:	89 c8                	mov    eax,ecx
c0027e78:	89 ce                	mov    esi,ecx
c0027e7a:	c1 fe 14             	sar    esi,0x14
c0027e7d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027e80:	89 fb                	mov    ebx,edi
c0027e82:	89 fa                	mov    edx,edi
c0027e84:	c1 e2 0b             	shl    edx,0xb
c0027e87:	c1 e0 0b             	shl    eax,0xb
c0027e8a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e8f:	c1 eb 15             	shr    ebx,0x15
c0027e92:	09 d8                	or     eax,ebx
c0027e94:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e9a:	c1 fe 14             	sar    esi,0x14
c0027e9d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027ea0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027ea3:	89 f3                	mov    ebx,esi
c0027ea5:	c1 e3 0b             	shl    ebx,0xb
c0027ea8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027eab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027eae:	c1 e3 0b             	shl    ebx,0xb
c0027eb1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027eb7:	c1 ee 15             	shr    esi,0x15
c0027eba:	09 f3                	or     ebx,esi
c0027ebc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027ebf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ec2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027ec5:	0f 88 5f 02 00 00    	js     c002812a <__adddf3+0x2cf>
c0027ecb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ece:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027ed1:	85 db                	test   ebx,ebx
c0027ed3:	0f 8e c7 00 00 00    	jle    c0027fa0 <__adddf3+0x145>
c0027ed9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027ee0:	75 1a                	jne    c0027efc <__adddf3+0xa1>
c0027ee2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ee5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027ee8:	0f 84 b2 05 00 00    	je     c00284a0 <__adddf3+0x645>
c0027eee:	4b                   	dec    ebx
c0027eef:	75 23                	jne    c0027f14 <__adddf3+0xb9>
c0027ef1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027ef4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027ef7:	e9 99 00 00 00       	jmp    c0027f95 <__adddf3+0x13a>
c0027efc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027eff:	f7 d6                	not    esi
c0027f01:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f07:	0f 84 93 05 00 00    	je     c00284a0 <__adddf3+0x645>
c0027f0d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027f14:	83 fb 1f             	cmp    ebx,0x1f
c0027f17:	7e 42                	jle    c0027f5b <__adddf3+0x100>
c0027f19:	83 fb 3f             	cmp    ebx,0x3f
c0027f1c:	0f 8f 7e 05 00 00    	jg     c00284a0 <__adddf3+0x645>
c0027f22:	83 e3 1f             	and    ebx,0x1f
c0027f25:	89 d9                	mov    ecx,ebx
c0027f27:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f2a:	d3 ef                	shr    edi,cl
c0027f2c:	31 db                	xor    ebx,ebx
c0027f2e:	85 c9                	test   ecx,ecx
c0027f30:	74 15                	je     c0027f47 <__adddf3+0xec>
c0027f32:	be 20 00 00 00       	mov    esi,0x20
c0027f37:	29 ce                	sub    esi,ecx
c0027f39:	89 f1                	mov    ecx,esi
c0027f3b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f3e:	d3 e6                	shl    esi,cl
c0027f40:	31 db                	xor    ebx,ebx
c0027f42:	85 f6                	test   esi,esi
c0027f44:	0f 95 c3             	setne  bl
c0027f47:	31 c9                	xor    ecx,ecx
c0027f49:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027f4d:	0f 95 c1             	setne  cl
c0027f50:	09 cf                	or     edi,ecx
c0027f52:	09 fb                	or     ebx,edi
c0027f54:	01 da                	add    edx,ebx
c0027f56:	83 d0 00             	adc    eax,0x0
c0027f59:	eb 3a                	jmp    c0027f95 <__adddf3+0x13a>
c0027f5b:	bf 20 00 00 00       	mov    edi,0x20
c0027f60:	29 df                	sub    edi,ebx
c0027f62:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f65:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f68:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f6b:	d3 e6                	shl    esi,cl
c0027f6d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f70:	88 d9                	mov    cl,bl
c0027f72:	d3 ef                	shr    edi,cl
c0027f74:	09 fe                	or     esi,edi
c0027f76:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f79:	88 d9                	mov    cl,bl
c0027f7b:	d3 ef                	shr    edi,cl
c0027f7d:	89 fb                	mov    ebx,edi
c0027f7f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f82:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f85:	d3 e7                	shl    edi,cl
c0027f87:	85 ff                	test   edi,edi
c0027f89:	0f 95 c1             	setne  cl
c0027f8c:	0f b6 c9             	movzx  ecx,cl
c0027f8f:	09 ce                	or     esi,ecx
c0027f91:	01 f2                	add    edx,esi
c0027f93:	11 d8                	adc    eax,ebx
c0027f95:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f98:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f9b:	e9 52 01 00 00       	jmp    c00280f2 <__adddf3+0x297>
c0027fa0:	0f 84 d5 00 00 00    	je     c002807b <__adddf3+0x220>
c0027fa6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fa9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027fac:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027faf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fb2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fb9:	75 20                	jne    c0027fdb <__adddf3+0x180>
c0027fbb:	89 d6                	mov    esi,edx
c0027fbd:	09 c6                	or     esi,eax
c0027fbf:	0f 84 db 04 00 00    	je     c00284a0 <__adddf3+0x645>
c0027fc5:	4b                   	dec    ebx
c0027fc6:	75 29                	jne    c0027ff1 <__adddf3+0x196>
c0027fc8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fcb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027fce:	01 d1                	add    ecx,edx
c0027fd0:	11 c6                	adc    esi,eax
c0027fd2:	89 f0                	mov    eax,esi
c0027fd4:	89 ca                	mov    edx,ecx
c0027fd6:	e9 17 01 00 00       	jmp    c00280f2 <__adddf3+0x297>
c0027fdb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fde:	f7 d6                	not    esi
c0027fe0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027fe6:	0f 84 b4 04 00 00    	je     c00284a0 <__adddf3+0x645>
c0027fec:	0d 00 00 00 80       	or     eax,0x80000000
c0027ff1:	83 fb 1f             	cmp    ebx,0x1f
c0027ff4:	7e 48                	jle    c002803e <__adddf3+0x1e3>
c0027ff6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ff9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ffc:	83 fb 3f             	cmp    ebx,0x3f
c0027fff:	0f 8f 9b 04 00 00    	jg     c00284a0 <__adddf3+0x645>
c0028005:	83 e3 1f             	and    ebx,0x1f
c0028008:	89 d9                	mov    ecx,ebx
c002800a:	89 c7                	mov    edi,eax
c002800c:	d3 ef                	shr    edi,cl
c002800e:	31 db                	xor    ebx,ebx
c0028010:	85 c9                	test   ecx,ecx
c0028012:	74 12                	je     c0028026 <__adddf3+0x1cb>
c0028014:	be 20 00 00 00       	mov    esi,0x20
c0028019:	29 ce                	sub    esi,ecx
c002801b:	89 f1                	mov    ecx,esi
c002801d:	d3 e0                	shl    eax,cl
c002801f:	31 db                	xor    ebx,ebx
c0028021:	85 c0                	test   eax,eax
c0028023:	0f 95 c3             	setne  bl
c0028026:	31 c0                	xor    eax,eax
c0028028:	85 d2                	test   edx,edx
c002802a:	0f 95 c0             	setne  al
c002802d:	09 c7                	or     edi,eax
c002802f:	09 fb                	or     ebx,edi
c0028031:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028034:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028037:	01 da                	add    edx,ebx
c0028039:	83 d6 00             	adc    esi,0x0
c002803c:	eb 39                	jmp    c0028077 <__adddf3+0x21c>
c002803e:	be 20 00 00 00       	mov    esi,0x20
c0028043:	29 de                	sub    esi,ebx
c0028045:	89 c7                	mov    edi,eax
c0028047:	89 f1                	mov    ecx,esi
c0028049:	d3 e7                	shl    edi,cl
c002804b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002804e:	89 d7                	mov    edi,edx
c0028050:	88 d9                	mov    cl,bl
c0028052:	d3 ef                	shr    edi,cl
c0028054:	89 f9                	mov    ecx,edi
c0028056:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028059:	09 cf                	or     edi,ecx
c002805b:	88 d9                	mov    cl,bl
c002805d:	d3 e8                	shr    eax,cl
c002805f:	89 f1                	mov    ecx,esi
c0028061:	d3 e2                	shl    edx,cl
c0028063:	85 d2                	test   edx,edx
c0028065:	0f 95 c2             	setne  dl
c0028068:	0f b6 d2             	movzx  edx,dl
c002806b:	09 d7                	or     edi,edx
c002806d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028070:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028073:	01 fa                	add    edx,edi
c0028075:	11 c6                	adc    esi,eax
c0028077:	89 f0                	mov    eax,esi
c0028079:	eb 77                	jmp    c00280f2 <__adddf3+0x297>
c002807b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002807e:	46                   	inc    esi
c002807f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028082:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028088:	75 41                	jne    c00280cb <__adddf3+0x270>
c002808a:	89 d3                	mov    ebx,edx
c002808c:	09 c3                	or     ebx,eax
c002808e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028095:	75 27                	jne    c00280be <__adddf3+0x263>
c0028097:	85 db                	test   ebx,ebx
c0028099:	0f 84 fb 03 00 00    	je     c002849a <__adddf3+0x63f>
c002809f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280a2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00280a5:	0f 84 f5 03 00 00    	je     c00284a0 <__adddf3+0x645>
c00280ab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280ae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280b1:	85 c0                	test   eax,eax
c00280b3:	0f 89 91 03 00 00    	jns    c002844a <__adddf3+0x5ef>
c00280b9:	e9 85 03 00 00       	jmp    c0028443 <__adddf3+0x5e8>
c00280be:	85 db                	test   ebx,ebx
c00280c0:	0f 85 da 03 00 00    	jne    c00284a0 <__adddf3+0x645>
c00280c6:	e9 cf 03 00 00       	jmp    c002849a <__adddf3+0x63f>
c00280cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280d4:	f7 d1                	not    ecx
c00280d6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00280dc:	0f 84 70 03 00 00    	je     c0028452 <__adddf3+0x5f7>
c00280e2:	d1 ea                	shr    edx,1
c00280e4:	89 c1                	mov    ecx,eax
c00280e6:	c1 e1 1f             	shl    ecx,0x1f
c00280e9:	09 ca                	or     edx,ecx
c00280eb:	d1 e8                	shr    eax,1
c00280ed:	e9 6f 03 00 00       	jmp    c0028461 <__adddf3+0x606>
c00280f2:	85 c0                	test   eax,eax
c00280f4:	0f 89 67 03 00 00    	jns    c0028461 <__adddf3+0x606>
c00280fa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00280fd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028100:	f7 d1                	not    ecx
c0028102:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028108:	0f 84 44 03 00 00    	je     c0028452 <__adddf3+0x5f7>
c002810e:	89 d1                	mov    ecx,edx
c0028110:	d1 e9                	shr    ecx,1
c0028112:	83 e2 01             	and    edx,0x1
c0028115:	09 ca                	or     edx,ecx
c0028117:	89 c1                	mov    ecx,eax
c0028119:	c1 e1 1f             	shl    ecx,0x1f
c002811c:	09 ca                	or     edx,ecx
c002811e:	d1 e8                	shr    eax,1
c0028120:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028125:	e9 37 03 00 00       	jmp    c0028461 <__adddf3+0x606>
c002812a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002812d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028133:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028136:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028139:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002813f:	29 de                	sub    esi,ebx
c0028141:	85 f6                	test   esi,esi
c0028143:	0f 8e bd 00 00 00    	jle    c0028206 <__adddf3+0x3ab>
c0028149:	85 db                	test   ebx,ebx
c002814b:	75 17                	jne    c0028164 <__adddf3+0x309>
c002814d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028150:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028153:	0f 84 47 03 00 00    	je     c00284a0 <__adddf3+0x645>
c0028159:	4e                   	dec    esi
c002815a:	75 20                	jne    c002817c <__adddf3+0x321>
c002815c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002815f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028162:	eb 5b                	jmp    c00281bf <__adddf3+0x364>
c0028164:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028167:	f7 d3                	not    ebx
c0028169:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002816f:	0f 84 2b 03 00 00    	je     c00284a0 <__adddf3+0x645>
c0028175:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002817c:	83 fe 1f             	cmp    esi,0x1f
c002817f:	7e 49                	jle    c00281ca <__adddf3+0x36f>
c0028181:	83 fe 3f             	cmp    esi,0x3f
c0028184:	0f 8f 16 03 00 00    	jg     c00284a0 <__adddf3+0x645>
c002818a:	83 e6 1f             	and    esi,0x1f
c002818d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028190:	89 f1                	mov    ecx,esi
c0028192:	d3 ef                	shr    edi,cl
c0028194:	31 db                	xor    ebx,ebx
c0028196:	85 f6                	test   esi,esi
c0028198:	74 13                	je     c00281ad <__adddf3+0x352>
c002819a:	b9 20 00 00 00       	mov    ecx,0x20
c002819f:	29 f1                	sub    ecx,esi
c00281a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281a4:	d3 e6                	shl    esi,cl
c00281a6:	31 db                	xor    ebx,ebx
c00281a8:	85 f6                	test   esi,esi
c00281aa:	0f 95 c3             	setne  bl
c00281ad:	31 c9                	xor    ecx,ecx
c00281af:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00281b3:	0f 95 c1             	setne  cl
c00281b6:	09 cf                	or     edi,ecx
c00281b8:	09 fb                	or     ebx,edi
c00281ba:	29 da                	sub    edx,ebx
c00281bc:	83 d8 00             	sbb    eax,0x0
c00281bf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281c5:	e9 aa 01 00 00       	jmp    c0028374 <__adddf3+0x519>
c00281ca:	bf 20 00 00 00       	mov    edi,0x20
c00281cf:	29 f7                	sub    edi,esi
c00281d1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281d4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281d7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00281da:	d3 e3                	shl    ebx,cl
c00281dc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00281df:	89 f1                	mov    ecx,esi
c00281e1:	d3 ef                	shr    edi,cl
c00281e3:	09 fb                	or     ebx,edi
c00281e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00281e8:	89 f1                	mov    ecx,esi
c00281ea:	d3 ef                	shr    edi,cl
c00281ec:	89 fe                	mov    esi,edi
c00281ee:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00281f1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00281f4:	d3 e7                	shl    edi,cl
c00281f6:	85 ff                	test   edi,edi
c00281f8:	0f 95 c1             	setne  cl
c00281fb:	0f b6 c9             	movzx  ecx,cl
c00281fe:	09 cb                	or     ebx,ecx
c0028200:	29 da                	sub    edx,ebx
c0028202:	19 f0                	sbb    eax,esi
c0028204:	eb b9                	jmp    c00281bf <__adddf3+0x364>
c0028206:	0f 84 cd 00 00 00    	je     c00282d9 <__adddf3+0x47e>
c002820c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002820f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028212:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028215:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028219:	75 1b                	jne    c0028236 <__adddf3+0x3db>
c002821b:	89 d6                	mov    esi,edx
c002821d:	09 c6                	or     esi,eax
c002821f:	0f 84 7b 02 00 00    	je     c00284a0 <__adddf3+0x645>
c0028225:	4b                   	dec    ebx
c0028226:	75 24                	jne    c002824c <__adddf3+0x3f1>
c0028228:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002822b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002822e:	29 d1                	sub    ecx,edx
c0028230:	19 c6                	sbb    esi,eax
c0028232:	89 ca                	mov    edx,ecx
c0028234:	eb 61                	jmp    c0028297 <__adddf3+0x43c>
c0028236:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028239:	f7 d6                	not    esi
c002823b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028241:	0f 84 59 02 00 00    	je     c00284a0 <__adddf3+0x645>
c0028247:	0d 00 00 00 80       	or     eax,0x80000000
c002824c:	83 fb 1f             	cmp    ebx,0x1f
c002824f:	7e 4d                	jle    c002829e <__adddf3+0x443>
c0028251:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028254:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028257:	83 fb 3f             	cmp    ebx,0x3f
c002825a:	0f 8f 40 02 00 00    	jg     c00284a0 <__adddf3+0x645>
c0028260:	83 e3 1f             	and    ebx,0x1f
c0028263:	89 d9                	mov    ecx,ebx
c0028265:	89 c7                	mov    edi,eax
c0028267:	d3 ef                	shr    edi,cl
c0028269:	31 db                	xor    ebx,ebx
c002826b:	85 c9                	test   ecx,ecx
c002826d:	74 12                	je     c0028281 <__adddf3+0x426>
c002826f:	be 20 00 00 00       	mov    esi,0x20
c0028274:	29 ce                	sub    esi,ecx
c0028276:	89 f1                	mov    ecx,esi
c0028278:	d3 e0                	shl    eax,cl
c002827a:	31 db                	xor    ebx,ebx
c002827c:	85 c0                	test   eax,eax
c002827e:	0f 95 c3             	setne  bl
c0028281:	31 c0                	xor    eax,eax
c0028283:	85 d2                	test   edx,edx
c0028285:	0f 95 c0             	setne  al
c0028288:	09 c7                	or     edi,eax
c002828a:	09 fb                	or     ebx,edi
c002828c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002828f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028292:	29 da                	sub    edx,ebx
c0028294:	83 de 00             	sbb    esi,0x0
c0028297:	89 f0                	mov    eax,esi
c0028299:	e9 d6 00 00 00       	jmp    c0028374 <__adddf3+0x519>
c002829e:	be 20 00 00 00       	mov    esi,0x20
c00282a3:	29 de                	sub    esi,ebx
c00282a5:	89 c7                	mov    edi,eax
c00282a7:	89 f1                	mov    ecx,esi
c00282a9:	d3 e7                	shl    edi,cl
c00282ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282ae:	89 d7                	mov    edi,edx
c00282b0:	88 d9                	mov    cl,bl
c00282b2:	d3 ef                	shr    edi,cl
c00282b4:	89 f9                	mov    ecx,edi
c00282b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282b9:	09 cf                	or     edi,ecx
c00282bb:	88 d9                	mov    cl,bl
c00282bd:	d3 e8                	shr    eax,cl
c00282bf:	89 f1                	mov    ecx,esi
c00282c1:	d3 e2                	shl    edx,cl
c00282c3:	85 d2                	test   edx,edx
c00282c5:	0f 95 c2             	setne  dl
c00282c8:	0f b6 d2             	movzx  edx,dl
c00282cb:	09 d7                	or     edi,edx
c00282cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00282d3:	29 fa                	sub    edx,edi
c00282d5:	19 c6                	sbb    esi,eax
c00282d7:	eb be                	jmp    c0028297 <__adddf3+0x43c>
c00282d9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282df:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00282e5:	75 6a                	jne    c0028351 <__adddf3+0x4f6>
c00282e7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282eb:	75 58                	jne    c0028345 <__adddf3+0x4ea>
c00282ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00282f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282f3:	89 d6                	mov    esi,edx
c00282f5:	09 c6                	or     esi,eax
c00282f7:	75 17                	jne    c0028310 <__adddf3+0x4b5>
c00282f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282ff:	85 db                	test   ebx,ebx
c0028301:	0f 85 99 01 00 00    	jne    c00284a0 <__adddf3+0x645>
c0028307:	31 ff                	xor    edi,edi
c0028309:	31 c9                	xor    ecx,ecx
c002830b:	e9 90 01 00 00       	jmp    c00284a0 <__adddf3+0x645>
c0028310:	85 db                	test   ebx,ebx
c0028312:	0f 84 88 01 00 00    	je     c00284a0 <__adddf3+0x645>
c0028318:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002831b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002831e:	85 c0                	test   eax,eax
c0028320:	79 10                	jns    c0028332 <__adddf3+0x4d7>
c0028322:	31 c9                	xor    ecx,ecx
c0028324:	f7 da                	neg    edx
c0028326:	0f 95 c1             	setne  cl
c0028329:	01 c8                	add    eax,ecx
c002832b:	f7 d8                	neg    eax
c002832d:	e9 2f 01 00 00       	jmp    c0028461 <__adddf3+0x606>
c0028332:	31 ff                	xor    edi,edi
c0028334:	31 c9                	xor    ecx,ecx
c0028336:	89 c3                	mov    ebx,eax
c0028338:	09 d3                	or     ebx,edx
c002833a:	0f 84 60 01 00 00    	je     c00284a0 <__adddf3+0x645>
c0028340:	e9 05 01 00 00       	jmp    c002844a <__adddf3+0x5ef>
c0028345:	31 ff                	xor    edi,edi
c0028347:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002834c:	e9 4f 01 00 00       	jmp    c00284a0 <__adddf3+0x645>
c0028351:	89 c1                	mov    ecx,eax
c0028353:	89 d0                	mov    eax,edx
c0028355:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028358:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002835b:	89 ca                	mov    edx,ecx
c002835d:	85 c9                	test   ecx,ecx
c002835f:	79 2c                	jns    c002838d <__adddf3+0x532>
c0028361:	31 c9                	xor    ecx,ecx
c0028363:	f7 d8                	neg    eax
c0028365:	0f 95 c1             	setne  cl
c0028368:	01 ca                	add    edx,ecx
c002836a:	f7 da                	neg    edx
c002836c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002836f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028372:	eb 19                	jmp    c002838d <__adddf3+0x532>
c0028374:	85 c0                	test   eax,eax
c0028376:	0f 89 e5 00 00 00    	jns    c0028461 <__adddf3+0x606>
c002837c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028381:	89 c1                	mov    ecx,eax
c0028383:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028386:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028389:	89 d0                	mov    eax,edx
c002838b:	89 ca                	mov    edx,ecx
c002838d:	85 d2                	test   edx,edx
c002838f:	74 59                	je     c00283ea <__adddf3+0x58f>
c0028391:	0f bd da             	bsr    ebx,edx
c0028394:	83 f3 1f             	xor    ebx,0x1f
c0028397:	88 d9                	mov    cl,bl
c0028399:	d3 e2                	shl    edx,cl
c002839b:	bf 20 00 00 00       	mov    edi,0x20
c00283a0:	89 f9                	mov    ecx,edi
c00283a2:	29 d9                	sub    ecx,ebx
c00283a4:	89 c6                	mov    esi,eax
c00283a6:	d3 ee                	shr    esi,cl
c00283a8:	09 d6                	or     esi,edx
c00283aa:	88 d9                	mov    cl,bl
c00283ac:	d3 e0                	shl    eax,cl
c00283ae:	89 c2                	mov    edx,eax
c00283b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283b3:	25 ff 07 00 00       	and    eax,0x7ff
c00283b8:	39 d8                	cmp    eax,ebx
c00283ba:	7f 22                	jg     c00283de <__adddf3+0x583>
c00283bc:	29 c3                	sub    ebx,eax
c00283be:	43                   	inc    ebx
c00283bf:	88 d9                	mov    cl,bl
c00283c1:	d3 ea                	shr    edx,cl
c00283c3:	29 df                	sub    edi,ebx
c00283c5:	89 f9                	mov    ecx,edi
c00283c7:	89 f0                	mov    eax,esi
c00283c9:	d3 e0                	shl    eax,cl
c00283cb:	09 c2                	or     edx,eax
c00283cd:	89 f0                	mov    eax,esi
c00283cf:	88 d9                	mov    cl,bl
c00283d1:	d3 e8                	shr    eax,cl
c00283d3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283d6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00283dc:	eb 6f                	jmp    c002844d <__adddf3+0x5f2>
c00283de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283e1:	29 d8                	sub    eax,ebx
c00283e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283e6:	89 f0                	mov    eax,esi
c00283e8:	eb 59                	jmp    c0028443 <__adddf3+0x5e8>
c00283ea:	85 c0                	test   eax,eax
c00283ec:	74 6a                	je     c0028458 <__adddf3+0x5fd>
c00283ee:	0f bd c8             	bsr    ecx,eax
c00283f1:	83 f1 1f             	xor    ecx,0x1f
c00283f4:	d3 e0                	shl    eax,cl
c00283f6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00283f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283ff:	83 c1 20             	add    ecx,0x20
c0028402:	39 cb                	cmp    ebx,ecx
c0028404:	7f 35                	jg     c002843b <__adddf3+0x5e0>
c0028406:	29 d9                	sub    ecx,ebx
c0028408:	8d 71 01             	lea    esi,[ecx+0x1]
c002840b:	83 fe 1f             	cmp    esi,0x1f
c002840e:	7e 09                	jle    c0028419 <__adddf3+0x5be>
c0028410:	83 e9 1f             	sub    ecx,0x1f
c0028413:	d3 e8                	shr    eax,cl
c0028415:	89 c3                	mov    ebx,eax
c0028417:	eb 11                	jmp    c002842a <__adddf3+0x5cf>
c0028419:	b9 20 00 00 00       	mov    ecx,0x20
c002841e:	29 f1                	sub    ecx,esi
c0028420:	89 c3                	mov    ebx,eax
c0028422:	d3 e3                	shl    ebx,cl
c0028424:	89 f1                	mov    ecx,esi
c0028426:	d3 e8                	shr    eax,cl
c0028428:	89 c2                	mov    edx,eax
c002842a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002842d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028432:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028435:	89 d0                	mov    eax,edx
c0028437:	89 da                	mov    edx,ebx
c0028439:	eb 26                	jmp    c0028461 <__adddf3+0x606>
c002843b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002843e:	29 cf                	sub    edi,ecx
c0028440:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028443:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028448:	eb 17                	jmp    c0028461 <__adddf3+0x606>
c002844a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002844d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028450:	eb 0f                	jmp    c0028461 <__adddf3+0x606>
c0028452:	31 d2                	xor    edx,edx
c0028454:	31 c0                	xor    eax,eax
c0028456:	eb 09                	jmp    c0028461 <__adddf3+0x606>
c0028458:	89 c2                	mov    edx,eax
c002845a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028461:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028464:	c1 e1 14             	shl    ecx,0x14
c0028467:	89 c3                	mov    ebx,eax
c0028469:	c1 eb 0b             	shr    ebx,0xb
c002846c:	09 d9                	or     ecx,ebx
c002846e:	89 d3                	mov    ebx,edx
c0028470:	c1 eb 0b             	shr    ebx,0xb
c0028473:	c1 e0 15             	shl    eax,0x15
c0028476:	09 d8                	or     eax,ebx
c0028478:	89 c7                	mov    edi,eax
c002847a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028480:	0f 95 c0             	setne  al
c0028483:	89 c6                	mov    esi,eax
c0028485:	09 f3                	or     ebx,esi
c0028487:	83 e3 01             	and    ebx,0x1
c002848a:	c1 ea 0a             	shr    edx,0xa
c002848d:	21 da                	and    edx,ebx
c002848f:	89 f8                	mov    eax,edi
c0028491:	01 d0                	add    eax,edx
c0028493:	83 d1 00             	adc    ecx,0x0
c0028496:	89 c7                	mov    edi,eax
c0028498:	eb 06                	jmp    c00284a0 <__adddf3+0x645>
c002849a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002849d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00284a0:	89 f8                	mov    eax,edi
c00284a2:	89 ca                	mov    edx,ecx
c00284a4:	83 c4 24             	add    esp,0x24
c00284a7:	5b                   	pop    ebx
c00284a8:	5e                   	pop    esi
c00284a9:	5f                   	pop    edi
c00284aa:	5d                   	pop    ebp
c00284ab:	c3                   	ret    

c00284ac <__subdf3>:
c00284ac:	55                   	push   ebp
c00284ad:	89 e5                	mov    ebp,esp
c00284af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284b5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284bb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00284be:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00284c1:	5d                   	pop    ebp
c00284c2:	e9 94 f9 ff ff       	jmp    c0027e5b <__adddf3>

c00284c7 <__negdf2>:
c00284c7:	55                   	push   ebp
c00284c8:	89 e5                	mov    ebp,esp
c00284ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00284cd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00284d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284d6:	5d                   	pop    ebp
c00284d7:	c3                   	ret    

c00284d8 <__muldf3>:
c00284d8:	55                   	push   ebp
c00284d9:	89 e5                	mov    ebp,esp
c00284db:	57                   	push   edi
c00284dc:	56                   	push   esi
c00284dd:	53                   	push   ebx
c00284de:	83 ec 24             	sub    esp,0x24
c00284e1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00284e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00284e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00284f0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00284f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284f6:	89 c8                	mov    eax,ecx
c00284f8:	c1 f8 14             	sar    eax,0x14
c00284fb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00284fe:	89 f8                	mov    eax,edi
c0028500:	89 fb                	mov    ebx,edi
c0028502:	c1 e3 0b             	shl    ebx,0xb
c0028505:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028508:	c1 e1 0b             	shl    ecx,0xb
c002850b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028511:	c1 e8 15             	shr    eax,0x15
c0028514:	09 c1                	or     ecx,eax
c0028516:	89 d6                	mov    esi,edx
c0028518:	89 d0                	mov    eax,edx
c002851a:	c1 f8 14             	sar    eax,0x14
c002851d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028520:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028523:	89 c3                	mov    ebx,eax
c0028525:	c1 e3 0b             	shl    ebx,0xb
c0028528:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002852b:	c1 e6 0b             	shl    esi,0xb
c002852e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028534:	c1 e8 15             	shr    eax,0x15
c0028537:	09 c6                	or     esi,eax
c0028539:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002853c:	25 ff 07 00 00       	and    eax,0x7ff
c0028541:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028544:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028547:	25 ff 07 00 00       	and    eax,0x7ff
c002854c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002854f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028552:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028555:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002855c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002855f:	40                   	inc    eax
c0028560:	a9 fe 07 00 00       	test   eax,0x7fe
c0028565:	0f 85 8d 00 00 00    	jne    c00285f8 <__muldf3+0x120>
c002856b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002856e:	09 c8                	or     eax,ecx
c0028570:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028574:	74 44                	je     c00285ba <__muldf3+0xe2>
c0028576:	85 c0                	test   eax,eax
c0028578:	0f 85 31 02 00 00    	jne    c00287af <__muldf3+0x2d7>
c002857e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028581:	40                   	inc    eax
c0028582:	a9 fe 07 00 00       	test   eax,0x7fe
c0028587:	75 13                	jne    c002859c <__muldf3+0xc4>
c0028589:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002858c:	09 f1                	or     ecx,esi
c002858e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028592:	74 22                	je     c00285b6 <__muldf3+0xde>
c0028594:	85 c9                	test   ecx,ecx
c0028596:	0f 85 0d 02 00 00    	jne    c00287a9 <__muldf3+0x2d1>
c002859c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00285a0:	0f 89 09 02 00 00    	jns    c00287af <__muldf3+0x2d7>
c00285a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285a9:	05 00 00 00 80       	add    eax,0x80000000
c00285ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285b1:	e9 f9 01 00 00       	jmp    c00287af <__muldf3+0x2d7>
c00285b6:	85 c9                	test   ecx,ecx
c00285b8:	eb 2e                	jmp    c00285e8 <__muldf3+0x110>
c00285ba:	85 c0                	test   eax,eax
c00285bc:	74 20                	je     c00285de <__muldf3+0x106>
c00285be:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00285c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285c7:	c1 ef 1f             	shr    edi,0x1f
c00285ca:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00285cd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00285d0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285d3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00285d6:	09 f9                	or     ecx,edi
c00285d8:	78 1e                	js     c00285f8 <__muldf3+0x120>
c00285da:	89 c3                	mov    ebx,eax
c00285dc:	eb e0                	jmp    c00285be <__muldf3+0xe6>
c00285de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285e1:	f7 d0                	not    eax
c00285e3:	a9 ff 07 00 00       	test   eax,0x7ff
c00285e8:	75 b2                	jne    c002859c <__muldf3+0xc4>
c00285ea:	31 ff                	xor    edi,edi
c00285ec:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00285f3:	e9 b7 01 00 00       	jmp    c00287af <__muldf3+0x2d7>
c00285f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285fb:	40                   	inc    eax
c00285fc:	a9 fe 07 00 00       	test   eax,0x7fe
c0028601:	75 57                	jne    c002865a <__muldf3+0x182>
c0028603:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028606:	09 f0                	or     eax,esi
c0028608:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002860c:	74 23                	je     c0028631 <__muldf3+0x159>
c002860e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028612:	0f 89 91 01 00 00    	jns    c00287a9 <__muldf3+0x2d1>
c0028618:	85 c0                	test   eax,eax
c002861a:	0f 85 89 01 00 00    	jne    c00287a9 <__muldf3+0x2d1>
c0028620:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028623:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028629:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002862c:	e9 7e 01 00 00       	jmp    c00287af <__muldf3+0x2d7>
c0028631:	85 c0                	test   eax,eax
c0028633:	75 0c                	jne    c0028641 <__muldf3+0x169>
c0028635:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028639:	0f 89 6a 01 00 00    	jns    c00287a9 <__muldf3+0x2d1>
c002863f:	eb df                	jmp    c0028620 <__muldf3+0x148>
c0028641:	01 f6                	add    esi,esi
c0028643:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028646:	c1 ea 1f             	shr    edx,0x1f
c0028649:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002864c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002864f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028652:	09 d6                	or     esi,edx
c0028654:	78 04                	js     c002865a <__muldf3+0x182>
c0028656:	89 c3                	mov    ebx,eax
c0028658:	eb e7                	jmp    c0028641 <__muldf3+0x169>
c002865a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028660:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028666:	89 c8                	mov    eax,ecx
c0028668:	f7 e6                	mul    esi
c002866a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002866d:	89 c7                	mov    edi,eax
c002866f:	89 c8                	mov    eax,ecx
c0028671:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028674:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028677:	89 c1                	mov    ecx,eax
c0028679:	89 f0                	mov    eax,esi
c002867b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002867e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028681:	89 c6                	mov    esi,eax
c0028683:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028686:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028689:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002868c:	31 c0                	xor    eax,eax
c002868e:	01 f1                	add    ecx,esi
c0028690:	0f 92 c0             	setb   al
c0028693:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028696:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028699:	83 d6 00             	adc    esi,0x0
c002869c:	01 c7                	add    edi,eax
c002869e:	83 d6 00             	adc    esi,0x0
c00286a1:	01 ca                	add    edx,ecx
c00286a3:	0f 92 c1             	setb   cl
c00286a6:	0f b6 c9             	movzx  ecx,cl
c00286a9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00286ac:	83 d6 00             	adc    esi,0x0
c00286af:	01 cf                	add    edi,ecx
c00286b1:	83 d6 00             	adc    esi,0x0
c00286b4:	31 c9                	xor    ecx,ecx
c00286b6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00286b9:	0f 95 c1             	setne  cl
c00286bc:	09 cf                	or     edi,ecx
c00286be:	85 f6                	test   esi,esi
c00286c0:	78 0c                	js     c00286ce <__muldf3+0x1f6>
c00286c2:	01 f6                	add    esi,esi
c00286c4:	89 f8                	mov    eax,edi
c00286c6:	c1 e8 1f             	shr    eax,0x1f
c00286c9:	09 c6                	or     esi,eax
c00286cb:	01 ff                	add    edi,edi
c00286cd:	4b                   	dec    ebx
c00286ce:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00286d4:	0f 8f 85 00 00 00    	jg     c002875f <__muldf3+0x287>
c00286da:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00286e0:	85 db                	test   ebx,ebx
c00286e2:	0f 8f 84 00 00 00    	jg     c002876c <__muldf3+0x294>
c00286e8:	83 fb cc             	cmp    ebx,0xffffffcc
c00286eb:	7c 79                	jl     c0028766 <__muldf3+0x28e>
c00286ed:	ba 01 00 00 00       	mov    edx,0x1
c00286f2:	29 da                	sub    edx,ebx
c00286f4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00286fa:	83 fa 1f             	cmp    edx,0x1f
c00286fd:	7e 30                	jle    c002872f <__muldf3+0x257>
c00286ff:	83 fa 20             	cmp    edx,0x20
c0028702:	75 0b                	jne    c002870f <__muldf3+0x237>
c0028704:	31 c0                	xor    eax,eax
c0028706:	85 ff                	test   edi,edi
c0028708:	0f 95 c0             	setne  al
c002870b:	89 c7                	mov    edi,eax
c002870d:	eb 1a                	jmp    c0028729 <__muldf3+0x251>
c002870f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028712:	89 f0                	mov    eax,esi
c0028714:	d3 e0                	shl    eax,cl
c0028716:	09 f8                	or     eax,edi
c0028718:	0f 95 c0             	setne  al
c002871b:	0f b6 c0             	movzx  eax,al
c002871e:	89 c7                	mov    edi,eax
c0028720:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028725:	29 d9                	sub    ecx,ebx
c0028727:	d3 ee                	shr    esi,cl
c0028729:	09 f7                	or     edi,esi
c002872b:	31 db                	xor    ebx,ebx
c002872d:	eb 3b                	jmp    c002876a <__muldf3+0x292>
c002872f:	83 c3 1f             	add    ebx,0x1f
c0028732:	89 f0                	mov    eax,esi
c0028734:	88 d9                	mov    cl,bl
c0028736:	d3 e0                	shl    eax,cl
c0028738:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002873b:	89 f8                	mov    eax,edi
c002873d:	88 d1                	mov    cl,dl
c002873f:	d3 e8                	shr    eax,cl
c0028741:	89 c1                	mov    ecx,eax
c0028743:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028746:	09 c8                	or     eax,ecx
c0028748:	88 d9                	mov    cl,bl
c002874a:	d3 e7                	shl    edi,cl
c002874c:	31 db                	xor    ebx,ebx
c002874e:	85 ff                	test   edi,edi
c0028750:	0f 95 c3             	setne  bl
c0028753:	89 df                	mov    edi,ebx
c0028755:	09 c7                	or     edi,eax
c0028757:	88 d1                	mov    cl,dl
c0028759:	d3 ee                	shr    esi,cl
c002875b:	31 db                	xor    ebx,ebx
c002875d:	eb 0d                	jmp    c002876c <__muldf3+0x294>
c002875f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028764:	eb 02                	jmp    c0028768 <__muldf3+0x290>
c0028766:	31 db                	xor    ebx,ebx
c0028768:	31 ff                	xor    edi,edi
c002876a:	31 f6                	xor    esi,esi
c002876c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002876f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028772:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028777:	09 c3                	or     ebx,eax
c0028779:	c1 e3 14             	shl    ebx,0x14
c002877c:	89 f0                	mov    eax,esi
c002877e:	c1 e8 0b             	shr    eax,0xb
c0028781:	09 c3                	or     ebx,eax
c0028783:	89 f8                	mov    eax,edi
c0028785:	c1 e8 0b             	shr    eax,0xb
c0028788:	c1 e6 15             	shl    esi,0x15
c002878b:	09 c6                	or     esi,eax
c002878d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028793:	0f 95 c1             	setne  cl
c0028796:	09 c8                	or     eax,ecx
c0028798:	83 e0 01             	and    eax,0x1
c002879b:	c1 ef 0a             	shr    edi,0xa
c002879e:	21 c7                	and    edi,eax
c00287a0:	01 f7                	add    edi,esi
c00287a2:	83 d3 00             	adc    ebx,0x0
c00287a5:	89 da                	mov    edx,ebx
c00287a7:	eb 03                	jmp    c00287ac <__muldf3+0x2d4>
c00287a9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287ac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00287af:	89 f8                	mov    eax,edi
c00287b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00287b4:	83 c4 24             	add    esp,0x24
c00287b7:	5b                   	pop    ebx
c00287b8:	5e                   	pop    esi
c00287b9:	5f                   	pop    edi
c00287ba:	5d                   	pop    ebp
c00287bb:	c3                   	ret    

c00287bc <__divdf3>:
c00287bc:	55                   	push   ebp
c00287bd:	89 e5                	mov    ebp,esp
c00287bf:	57                   	push   edi
c00287c0:	56                   	push   esi
c00287c1:	53                   	push   ebx
c00287c2:	83 ec 2c             	sub    esp,0x2c
c00287c5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00287c8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287ce:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00287d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00287d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00287d7:	89 ce                	mov    esi,ecx
c00287d9:	89 c8                	mov    eax,ecx
c00287db:	c1 f8 14             	sar    eax,0x14
c00287de:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00287e1:	89 f8                	mov    eax,edi
c00287e3:	89 fb                	mov    ebx,edi
c00287e5:	c1 e3 0b             	shl    ebx,0xb
c00287e8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00287eb:	c1 e6 0b             	shl    esi,0xb
c00287ee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00287f4:	c1 e8 15             	shr    eax,0x15
c00287f7:	09 c6                	or     esi,eax
c00287f9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00287fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00287ff:	89 c2                	mov    edx,eax
c0028801:	c1 fa 14             	sar    edx,0x14
c0028804:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028807:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002880a:	89 de                	mov    esi,ebx
c002880c:	c1 e6 0b             	shl    esi,0xb
c002880f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028812:	c1 e0 0b             	shl    eax,0xb
c0028815:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002881a:	c1 eb 15             	shr    ebx,0x15
c002881d:	09 d8                	or     eax,ebx
c002881f:	89 c2                	mov    edx,eax
c0028821:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028824:	25 ff 07 00 00       	and    eax,0x7ff
c0028829:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002882c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002882f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028835:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028838:	29 d8                	sub    eax,ebx
c002883a:	05 ff 03 00 00       	add    eax,0x3ff
c002883f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028842:	46                   	inc    esi
c0028843:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028849:	0f 85 a5 00 00 00    	jne    c00288f4 <__divdf3+0x138>
c002884f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028852:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028855:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028859:	74 2a                	je     c0028885 <__divdf3+0xc9>
c002885b:	85 f6                	test   esi,esi
c002885d:	0f 85 cc 02 00 00    	jne    c0028b2f <__divdf3+0x373>
c0028863:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028866:	40                   	inc    eax
c0028867:	a9 fe 07 00 00       	test   eax,0x7fe
c002886c:	75 26                	jne    c0028894 <__divdf3+0xd8>
c002886e:	85 db                	test   ebx,ebx
c0028870:	74 22                	je     c0028894 <__divdf3+0xd8>
c0028872:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028875:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028878:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002887b:	09 d0                	or     eax,edx
c002887d:	0f 85 ac 02 00 00    	jne    c0028b2f <__divdf3+0x373>
c0028883:	eb 63                	jmp    c00288e8 <__divdf3+0x12c>
c0028885:	85 f6                	test   esi,esi
c0028887:	75 22                	jne    c00288ab <__divdf3+0xef>
c0028889:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002888c:	40                   	inc    eax
c002888d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028892:	74 36                	je     c00288ca <__divdf3+0x10e>
c0028894:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028898:	0f 89 91 02 00 00    	jns    c0028b2f <__divdf3+0x373>
c002889e:	89 f8                	mov    eax,edi
c00288a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288a6:	e9 80 02 00 00       	jmp    c0028b2b <__divdf3+0x36f>
c00288ab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288ae:	01 f6                	add    esi,esi
c00288b0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00288b3:	c1 ef 1f             	shr    edi,0x1f
c00288b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00288b9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00288bc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00288bf:	09 f7                	or     edi,esi
c00288c1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00288c4:	78 2e                	js     c00288f4 <__divdf3+0x138>
c00288c6:	89 c8                	mov    eax,ecx
c00288c8:	eb e1                	jmp    c00288ab <__divdf3+0xef>
c00288ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288cd:	09 d0                	or     eax,edx
c00288cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00288d3:	74 0f                	je     c00288e4 <__divdf3+0x128>
c00288d5:	85 c0                	test   eax,eax
c00288d7:	74 bb                	je     c0028894 <__divdf3+0xd8>
c00288d9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00288dc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00288df:	e9 4b 02 00 00       	jmp    c0028b2f <__divdf3+0x373>
c00288e4:	85 c0                	test   eax,eax
c00288e6:	75 ac                	jne    c0028894 <__divdf3+0xd8>
c00288e8:	31 ff                	xor    edi,edi
c00288ea:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00288ef:	e9 3b 02 00 00       	jmp    c0028b2f <__divdf3+0x373>
c00288f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00288f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00288fa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028900:	75 6b                	jne    c002896d <__divdf3+0x1b1>
c0028902:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028905:	09 d6                	or     esi,edx
c0028907:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002890b:	74 28                	je     c0028935 <__divdf3+0x179>
c002890d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028910:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028913:	85 f6                	test   esi,esi
c0028915:	0f 85 14 02 00 00    	jne    c0028b2f <__divdf3+0x373>
c002891b:	31 ff                	xor    edi,edi
c002891d:	31 c9                	xor    ecx,ecx
c002891f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028922:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028925:	0f 89 04 02 00 00    	jns    c0028b2f <__divdf3+0x373>
c002892b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028930:	e9 fa 01 00 00       	jmp    c0028b2f <__divdf3+0x373>
c0028935:	85 f6                	test   esi,esi
c0028937:	75 1b                	jne    c0028954 <__divdf3+0x198>
c0028939:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002893c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002893f:	25 00 00 00 80       	and    eax,0x80000000
c0028944:	31 c9                	xor    ecx,ecx
c0028946:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002894b:	89 cf                	mov    edi,ecx
c002894d:	89 c1                	mov    ecx,eax
c002894f:	e9 db 01 00 00       	jmp    c0028b2f <__divdf3+0x373>
c0028954:	01 d2                	add    edx,edx
c0028956:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028959:	c1 eb 1f             	shr    ebx,0x1f
c002895c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002895f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028962:	8d 48 01             	lea    ecx,[eax+0x1]
c0028965:	09 da                	or     edx,ebx
c0028967:	78 04                	js     c002896d <__divdf3+0x1b1>
c0028969:	89 c8                	mov    eax,ecx
c002896b:	eb e7                	jmp    c0028954 <__divdf3+0x198>
c002896d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028970:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028976:	81 ca 00 00 00 80    	or     edx,0x80000000
c002897c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002897f:	39 d6                	cmp    esi,edx
c0028981:	77 0d                	ja     c0028990 <__divdf3+0x1d4>
c0028983:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028986:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028989:	72 1b                	jb     c00289a6 <__divdf3+0x1ea>
c002898b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002898e:	75 16                	jne    c00289a6 <__divdf3+0x1ea>
c0028990:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028993:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028996:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028999:	83 de 00             	sbb    esi,0x0
c002899c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002899f:	ba 01 00 00 00       	mov    edx,0x1
c00289a4:	eb 02                	jmp    c00289a8 <__divdf3+0x1ec>
c00289a6:	31 d2                	xor    edx,edx
c00289a8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00289af:	31 ff                	xor    edi,edi
c00289b1:	01 ff                	add    edi,edi
c00289b3:	89 d1                	mov    ecx,edx
c00289b5:	c1 e9 1f             	shr    ecx,0x1f
c00289b8:	09 cf                	or     edi,ecx
c00289ba:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00289bd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00289c0:	89 da                	mov    edx,ebx
c00289c2:	89 f3                	mov    ebx,esi
c00289c4:	8d 34 36             	lea    esi,[esi+esi*1]
c00289c7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289ca:	c1 e9 1f             	shr    ecx,0x1f
c00289cd:	09 ce                	or     esi,ecx
c00289cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289d2:	01 c9                	add    ecx,ecx
c00289d4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00289d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00289da:	85 db                	test   ebx,ebx
c00289dc:	78 29                	js     c0028a07 <__divdf3+0x24b>
c00289de:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00289e1:	72 07                	jb     c00289ea <__divdf3+0x22e>
c00289e3:	75 3c                	jne    c0028a21 <__divdf3+0x265>
c00289e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00289e8:	77 37                	ja     c0028a21 <__divdf3+0x265>
c00289ea:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289ed:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00289f0:	31 d2                	xor    edx,edx
c00289f2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00289f5:	0f 97 c2             	seta   dl
c00289f8:	29 d6                	sub    esi,edx
c00289fa:	89 d9                	mov    ecx,ebx
c00289fc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00289ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028a02:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028a05:	eb 17                	jmp    c0028a1e <__divdf3+0x262>
c0028a07:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a0a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a10:	0f 97 c1             	seta   cl
c0028a13:	0f b6 c9             	movzx  ecx,cl
c0028a16:	29 ce                	sub    esi,ecx
c0028a18:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028a1b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028a1e:	83 ca 01             	or     edx,0x1
c0028a21:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028a24:	75 8b                	jne    c00289b1 <__divdf3+0x1f5>
c0028a26:	c1 e7 09             	shl    edi,0x9
c0028a29:	89 d1                	mov    ecx,edx
c0028a2b:	c1 e9 17             	shr    ecx,0x17
c0028a2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a31:	09 f3                	or     ebx,esi
c0028a33:	0f 95 c3             	setne  bl
c0028a36:	0f b6 db             	movzx  ebx,bl
c0028a39:	c1 e2 09             	shl    edx,0x9
c0028a3c:	09 d3                	or     ebx,edx
c0028a3e:	89 ca                	mov    edx,ecx
c0028a40:	09 fa                	or     edx,edi
c0028a42:	78 0c                	js     c0028a50 <__divdf3+0x294>
c0028a44:	01 d2                	add    edx,edx
c0028a46:	89 d9                	mov    ecx,ebx
c0028a48:	c1 e9 1f             	shr    ecx,0x1f
c0028a4b:	09 ca                	or     edx,ecx
c0028a4d:	01 db                	add    ebx,ebx
c0028a4f:	48                   	dec    eax
c0028a50:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028a55:	0f 8f 83 00 00 00    	jg     c0028ade <__divdf3+0x322>
c0028a5b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a61:	85 c0                	test   eax,eax
c0028a63:	0f 8f 82 00 00 00    	jg     c0028aeb <__divdf3+0x32f>
c0028a69:	83 f8 cc             	cmp    eax,0xffffffcc
c0028a6c:	7c 77                	jl     c0028ae5 <__divdf3+0x329>
c0028a6e:	be 01 00 00 00       	mov    esi,0x1
c0028a73:	29 c6                	sub    esi,eax
c0028a75:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a7b:	83 fe 1f             	cmp    esi,0x1f
c0028a7e:	7e 2f                	jle    c0028aaf <__divdf3+0x2f3>
c0028a80:	83 fe 20             	cmp    esi,0x20
c0028a83:	75 0a                	jne    c0028a8f <__divdf3+0x2d3>
c0028a85:	85 db                	test   ebx,ebx
c0028a87:	0f 95 c3             	setne  bl
c0028a8a:	0f b6 db             	movzx  ebx,bl
c0028a8d:	eb 1a                	jmp    c0028aa9 <__divdf3+0x2ed>
c0028a8f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028a92:	89 d7                	mov    edi,edx
c0028a94:	d3 e7                	shl    edi,cl
c0028a96:	89 f9                	mov    ecx,edi
c0028a98:	09 d9                	or     ecx,ebx
c0028a9a:	0f 95 c3             	setne  bl
c0028a9d:	0f b6 db             	movzx  ebx,bl
c0028aa0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028aa5:	29 c1                	sub    ecx,eax
c0028aa7:	d3 ea                	shr    edx,cl
c0028aa9:	09 d3                	or     ebx,edx
c0028aab:	31 c0                	xor    eax,eax
c0028aad:	eb 3a                	jmp    c0028ae9 <__divdf3+0x32d>
c0028aaf:	83 c0 1f             	add    eax,0x1f
c0028ab2:	89 d7                	mov    edi,edx
c0028ab4:	88 c1                	mov    cl,al
c0028ab6:	d3 e7                	shl    edi,cl
c0028ab8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028abb:	89 df                	mov    edi,ebx
c0028abd:	89 f1                	mov    ecx,esi
c0028abf:	d3 ef                	shr    edi,cl
c0028ac1:	89 f9                	mov    ecx,edi
c0028ac3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ac6:	09 cf                	or     edi,ecx
c0028ac8:	88 c1                	mov    cl,al
c0028aca:	d3 e3                	shl    ebx,cl
c0028acc:	85 db                	test   ebx,ebx
c0028ace:	0f 95 c3             	setne  bl
c0028ad1:	0f b6 db             	movzx  ebx,bl
c0028ad4:	09 fb                	or     ebx,edi
c0028ad6:	89 f1                	mov    ecx,esi
c0028ad8:	d3 ea                	shr    edx,cl
c0028ada:	31 c0                	xor    eax,eax
c0028adc:	eb 0d                	jmp    c0028aeb <__divdf3+0x32f>
c0028ade:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028ae3:	eb 02                	jmp    c0028ae7 <__divdf3+0x32b>
c0028ae5:	31 c0                	xor    eax,eax
c0028ae7:	31 db                	xor    ebx,ebx
c0028ae9:	31 d2                	xor    edx,edx
c0028aeb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028aee:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028af1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028af7:	09 c8                	or     eax,ecx
c0028af9:	c1 e0 14             	shl    eax,0x14
c0028afc:	89 d1                	mov    ecx,edx
c0028afe:	c1 e9 0b             	shr    ecx,0xb
c0028b01:	09 c8                	or     eax,ecx
c0028b03:	89 c6                	mov    esi,eax
c0028b05:	89 d9                	mov    ecx,ebx
c0028b07:	c1 e9 0b             	shr    ecx,0xb
c0028b0a:	c1 e2 15             	shl    edx,0x15
c0028b0d:	09 ca                	or     edx,ecx
c0028b0f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028b15:	0f 95 c0             	setne  al
c0028b18:	09 c1                	or     ecx,eax
c0028b1a:	83 e1 01             	and    ecx,0x1
c0028b1d:	c1 eb 0a             	shr    ebx,0xa
c0028b20:	21 cb                	and    ebx,ecx
c0028b22:	01 d3                	add    ebx,edx
c0028b24:	89 d8                	mov    eax,ebx
c0028b26:	83 d6 00             	adc    esi,0x0
c0028b29:	89 f2                	mov    edx,esi
c0028b2b:	89 c7                	mov    edi,eax
c0028b2d:	89 d1                	mov    ecx,edx
c0028b2f:	89 f8                	mov    eax,edi
c0028b31:	89 ca                	mov    edx,ecx
c0028b33:	83 c4 2c             	add    esp,0x2c
c0028b36:	5b                   	pop    ebx
c0028b37:	5e                   	pop    esi
c0028b38:	5f                   	pop    edi
c0028b39:	5d                   	pop    ebp
c0028b3a:	c3                   	ret    

c0028b3b <__floatsidf>:
c0028b3b:	55                   	push   ebp
c0028b3c:	89 e5                	mov    ebp,esp
c0028b3e:	56                   	push   esi
c0028b3f:	53                   	push   ebx
c0028b40:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b43:	85 db                	test   ebx,ebx
c0028b45:	7e 15                	jle    c0028b5c <__floatsidf+0x21>
c0028b47:	0f bd cb             	bsr    ecx,ebx
c0028b4a:	83 f1 1f             	xor    ecx,0x1f
c0028b4d:	d3 e3                	shl    ebx,cl
c0028b4f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b55:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b5a:	eb 21                	jmp    c0028b7d <__floatsidf+0x42>
c0028b5c:	b8 00 00 00 00       	mov    eax,0x0
c0028b61:	ba 00 00 00 00       	mov    edx,0x0
c0028b66:	74 2a                	je     c0028b92 <__floatsidf+0x57>
c0028b68:	f7 db                	neg    ebx
c0028b6a:	0f bd cb             	bsr    ecx,ebx
c0028b6d:	83 f1 1f             	xor    ecx,0x1f
c0028b70:	d3 e3                	shl    ebx,cl
c0028b72:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b78:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028b7d:	29 c8                	sub    eax,ecx
c0028b7f:	c1 e0 14             	shl    eax,0x14
c0028b82:	89 c1                	mov    ecx,eax
c0028b84:	89 de                	mov    esi,ebx
c0028b86:	c1 ee 0b             	shr    esi,0xb
c0028b89:	09 f1                	or     ecx,esi
c0028b8b:	89 ca                	mov    edx,ecx
c0028b8d:	c1 e3 15             	shl    ebx,0x15
c0028b90:	89 d8                	mov    eax,ebx
c0028b92:	5b                   	pop    ebx
c0028b93:	5e                   	pop    esi
c0028b94:	5d                   	pop    ebp
c0028b95:	c3                   	ret    

c0028b96 <__floatunsidf>:
c0028b96:	55                   	push   ebp
c0028b97:	89 e5                	mov    ebp,esp
c0028b99:	56                   	push   esi
c0028b9a:	53                   	push   ebx
c0028b9b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b9e:	85 db                	test   ebx,ebx
c0028ba0:	74 2a                	je     c0028bcc <__floatunsidf+0x36>
c0028ba2:	0f bd cb             	bsr    ecx,ebx
c0028ba5:	83 f1 1f             	xor    ecx,0x1f
c0028ba8:	d3 e3                	shl    ebx,cl
c0028baa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028bb0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028bb5:	29 c8                	sub    eax,ecx
c0028bb7:	c1 e0 14             	shl    eax,0x14
c0028bba:	89 c1                	mov    ecx,eax
c0028bbc:	89 de                	mov    esi,ebx
c0028bbe:	c1 ee 0b             	shr    esi,0xb
c0028bc1:	09 f1                	or     ecx,esi
c0028bc3:	89 ca                	mov    edx,ecx
c0028bc5:	c1 e3 15             	shl    ebx,0x15
c0028bc8:	89 d8                	mov    eax,ebx
c0028bca:	eb 04                	jmp    c0028bd0 <__floatunsidf+0x3a>
c0028bcc:	31 c0                	xor    eax,eax
c0028bce:	31 d2                	xor    edx,edx
c0028bd0:	5b                   	pop    ebx
c0028bd1:	5e                   	pop    esi
c0028bd2:	5d                   	pop    ebp
c0028bd3:	c3                   	ret    

c0028bd4 <__fixdfsi>:
c0028bd4:	55                   	push   ebp
c0028bd5:	89 e5                	mov    ebp,esp
c0028bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028bda:	89 d1                	mov    ecx,edx
c0028bdc:	c1 e1 0b             	shl    ecx,0xb
c0028bdf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028be8:	c1 e8 15             	shr    eax,0x15
c0028beb:	09 c1                	or     ecx,eax
c0028bed:	c1 fa 14             	sar    edx,0x14
c0028bf0:	78 1f                	js     c0028c11 <__fixdfsi+0x3d>
c0028bf2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028bf8:	31 c0                	xor    eax,eax
c0028bfa:	83 fa 1e             	cmp    edx,0x1e
c0028bfd:	77 40                	ja     c0028c3f <__fixdfsi+0x6b>
c0028bff:	89 c8                	mov    eax,ecx
c0028c01:	0d 00 00 00 80       	or     eax,0x80000000
c0028c06:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c0b:	29 d1                	sub    ecx,edx
c0028c0d:	d3 e8                	shr    eax,cl
c0028c0f:	eb 2e                	jmp    c0028c3f <__fixdfsi+0x6b>
c0028c11:	31 c0                	xor    eax,eax
c0028c13:	81 c2 01 04 00 00    	add    edx,0x401
c0028c19:	78 24                	js     c0028c3f <__fixdfsi+0x6b>
c0028c1b:	83 fa 1e             	cmp    edx,0x1e
c0028c1e:	7e 09                	jle    c0028c29 <__fixdfsi+0x55>
c0028c20:	83 fa 1f             	cmp    edx,0x1f
c0028c23:	75 18                	jne    c0028c3d <__fixdfsi+0x69>
c0028c25:	85 c9                	test   ecx,ecx
c0028c27:	75 14                	jne    c0028c3d <__fixdfsi+0x69>
c0028c29:	89 c8                	mov    eax,ecx
c0028c2b:	0d 00 00 00 80       	or     eax,0x80000000
c0028c30:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c35:	29 d1                	sub    ecx,edx
c0028c37:	d3 e8                	shr    eax,cl
c0028c39:	f7 d8                	neg    eax
c0028c3b:	eb 02                	jmp    c0028c3f <__fixdfsi+0x6b>
c0028c3d:	31 c0                	xor    eax,eax
c0028c3f:	5d                   	pop    ebp
c0028c40:	c3                   	ret    

c0028c41 <__fixunsdfsi>:
c0028c41:	55                   	push   ebp
c0028c42:	89 e5                	mov    ebp,esp
c0028c44:	53                   	push   ebx
c0028c45:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028c48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c4b:	89 d3                	mov    ebx,edx
c0028c4d:	c1 fb 14             	sar    ebx,0x14
c0028c50:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028c56:	31 c0                	xor    eax,eax
c0028c58:	83 fb 1f             	cmp    ebx,0x1f
c0028c5b:	77 1d                	ja     c0028c7a <__fixunsdfsi+0x39>
c0028c5d:	89 d0                	mov    eax,edx
c0028c5f:	c1 e0 0b             	shl    eax,0xb
c0028c62:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c67:	c1 e9 15             	shr    ecx,0x15
c0028c6a:	09 c8                	or     eax,ecx
c0028c6c:	0d 00 00 00 80       	or     eax,0x80000000
c0028c71:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c76:	29 d9                	sub    ecx,ebx
c0028c78:	d3 e8                	shr    eax,cl
c0028c7a:	5b                   	pop    ebx
c0028c7b:	5d                   	pop    ebp
c0028c7c:	c3                   	ret    

c0028c7d <__cmpdf2>:
c0028c7d:	55                   	push   ebp
c0028c7e:	89 e5                	mov    ebp,esp
c0028c80:	57                   	push   edi
c0028c81:	56                   	push   esi
c0028c82:	53                   	push   ebx
c0028c83:	83 ec 0c             	sub    esp,0xc
c0028c86:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028c89:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028c8c:	89 ca                	mov    edx,ecx
c0028c8e:	c1 ea 14             	shr    edx,0x14
c0028c91:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028c97:	89 cb                	mov    ebx,ecx
c0028c99:	c1 fb 1f             	sar    ebx,0x1f
c0028c9c:	31 da                	xor    edx,ebx
c0028c9e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ca1:	89 df                	mov    edi,ebx
c0028ca3:	c1 e7 0b             	shl    edi,0xb
c0028ca6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028ca9:	c1 e1 0b             	shl    ecx,0xb
c0028cac:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028cb2:	c1 eb 15             	shr    ebx,0x15
c0028cb5:	09 d9                	or     ecx,ebx
c0028cb7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028cba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028cbd:	89 ce                	mov    esi,ecx
c0028cbf:	c1 ee 14             	shr    esi,0x14
c0028cc2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028cc8:	89 cb                	mov    ebx,ecx
c0028cca:	c1 fb 1f             	sar    ebx,0x1f
c0028ccd:	31 de                	xor    esi,ebx
c0028ccf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028cd2:	89 df                	mov    edi,ebx
c0028cd4:	c1 e7 0b             	shl    edi,0xb
c0028cd7:	c1 e1 0b             	shl    ecx,0xb
c0028cda:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ce0:	c1 eb 15             	shr    ebx,0x15
c0028ce3:	09 d9                	or     ecx,ebx
c0028ce5:	89 d3                	mov    ebx,edx
c0028ce7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028ced:	43                   	inc    ebx
c0028cee:	83 fb 01             	cmp    ebx,0x1
c0028cf1:	77 08                	ja     c0028cfb <__cmpdf2+0x7e>
c0028cf3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028cf6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028cf9:	75 68                	jne    c0028d63 <__cmpdf2+0xe6>
c0028cfb:	89 f3                	mov    ebx,esi
c0028cfd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028d03:	43                   	inc    ebx
c0028d04:	83 fb 01             	cmp    ebx,0x1
c0028d07:	77 06                	ja     c0028d0f <__cmpdf2+0x92>
c0028d09:	89 fb                	mov    ebx,edi
c0028d0b:	09 cb                	or     ebx,ecx
c0028d0d:	75 54                	jne    c0028d63 <__cmpdf2+0xe6>
c0028d0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028d12:	09 f8                	or     eax,edi
c0028d14:	09 c8                	or     eax,ecx
c0028d16:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028d19:	75 12                	jne    c0028d2d <__cmpdf2+0xb0>
c0028d1b:	8d 42 01             	lea    eax,[edx+0x1]
c0028d1e:	83 f8 01             	cmp    eax,0x1
c0028d21:	77 0a                	ja     c0028d2d <__cmpdf2+0xb0>
c0028d23:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028d26:	31 c0                	xor    eax,eax
c0028d28:	83 fb 01             	cmp    ebx,0x1
c0028d2b:	76 36                	jbe    c0028d63 <__cmpdf2+0xe6>
c0028d2d:	b8 01 00 00 00       	mov    eax,0x1
c0028d32:	39 f2                	cmp    edx,esi
c0028d34:	7f 2d                	jg     c0028d63 <__cmpdf2+0xe6>
c0028d36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028d3b:	7c 26                	jl     c0028d63 <__cmpdf2+0xe6>
c0028d3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d40:	77 07                	ja     c0028d49 <__cmpdf2+0xcc>
c0028d42:	72 16                	jb     c0028d5a <__cmpdf2+0xdd>
c0028d44:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028d47:	76 0a                	jbe    c0028d53 <__cmpdf2+0xd6>
c0028d49:	89 d0                	mov    eax,edx
c0028d4b:	c1 f8 1f             	sar    eax,0x1f
c0028d4e:	83 c8 01             	or     eax,0x1
c0028d51:	eb 10                	jmp    c0028d63 <__cmpdf2+0xe6>
c0028d53:	b8 00 00 00 00       	mov    eax,0x0
c0028d58:	73 09                	jae    c0028d63 <__cmpdf2+0xe6>
c0028d5a:	89 d0                	mov    eax,edx
c0028d5c:	c1 f8 1f             	sar    eax,0x1f
c0028d5f:	83 e0 02             	and    eax,0x2
c0028d62:	48                   	dec    eax
c0028d63:	83 c4 0c             	add    esp,0xc
c0028d66:	5b                   	pop    ebx
c0028d67:	5e                   	pop    esi
c0028d68:	5f                   	pop    edi
c0028d69:	5d                   	pop    ebp
c0028d6a:	c3                   	ret    

c0028d6b <__eqdf2>:
c0028d6b:	55                   	push   ebp
c0028d6c:	89 e5                	mov    ebp,esp
c0028d6e:	50                   	push   eax
c0028d6f:	6a 01                	push   0x1
c0028d71:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d74:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d7d:	e8 fb fe ff ff       	call   c0028c7d <__cmpdf2>
c0028d82:	83 c4 18             	add    esp,0x18
c0028d85:	c9                   	leave  
c0028d86:	c3                   	ret    

c0028d87 <__nedf2>:
c0028d87:	eb e2                	jmp    c0028d6b <__eqdf2>

c0028d89 <__gtdf2>:
c0028d89:	55                   	push   ebp
c0028d8a:	89 e5                	mov    ebp,esp
c0028d8c:	50                   	push   eax
c0028d8d:	6a ff                	push   0xffffffff
c0028d8f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d92:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d9b:	e8 dd fe ff ff       	call   c0028c7d <__cmpdf2>
c0028da0:	83 c4 18             	add    esp,0x18
c0028da3:	c9                   	leave  
c0028da4:	c3                   	ret    

c0028da5 <__gedf2>:
c0028da5:	eb e2                	jmp    c0028d89 <__gtdf2>

c0028da7 <__ltdf2>:
c0028da7:	eb c2                	jmp    c0028d6b <__eqdf2>

c0028da9 <__ledf2>:
c0028da9:	eb c0                	jmp    c0028d6b <__eqdf2>

c0028dab <__truncdfsf2>:
c0028dab:	55                   	push   ebp
c0028dac:	89 e5                	mov    ebp,esp
c0028dae:	57                   	push   edi
c0028daf:	56                   	push   esi
c0028db0:	53                   	push   ebx
c0028db1:	83 ec 0c             	sub    esp,0xc
c0028db4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028db7:	89 d1                	mov    ecx,edx
c0028db9:	c1 f9 14             	sar    ecx,0x14
c0028dbc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028dbf:	89 df                	mov    edi,ebx
c0028dc1:	c1 e7 0b             	shl    edi,0xb
c0028dc4:	89 d0                	mov    eax,edx
c0028dc6:	c1 e0 0b             	shl    eax,0xb
c0028dc9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028dce:	c1 eb 15             	shr    ebx,0x15
c0028dd1:	09 d8                	or     eax,ebx
c0028dd3:	89 cb                	mov    ebx,ecx
c0028dd5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028ddb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028de1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028de7:	0f 86 9e 00 00 00    	jbe    c0028e8b <__truncdfsf2+0xe0>
c0028ded:	85 db                	test   ebx,ebx
c0028def:	75 0a                	jne    c0028dfb <__truncdfsf2+0x50>
c0028df1:	c1 fa 17             	sar    edx,0x17
c0028df4:	30 d2                	xor    dl,dl
c0028df6:	e9 84 00 00 00       	jmp    c0028e7f <__truncdfsf2+0xd4>
c0028dfb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028e01:	83 fe 83             	cmp    esi,0xffffff83
c0028e04:	7d 4b                	jge    c0028e51 <__truncdfsf2+0xa6>
c0028e06:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028e0b:	29 f1                	sub    ecx,esi
c0028e0d:	83 f9 1f             	cmp    ecx,0x1f
c0028e10:	7f 6b                	jg     c0028e7d <__truncdfsf2+0xd2>
c0028e12:	0d 00 00 00 80       	or     eax,0x80000000
c0028e17:	89 c3                	mov    ebx,eax
c0028e19:	d3 eb                	shr    ebx,cl
c0028e1b:	be 01 00 00 00       	mov    esi,0x1
c0028e20:	d3 e6                	shl    esi,cl
c0028e22:	4e                   	dec    esi
c0028e23:	21 f0                	and    eax,esi
c0028e25:	09 f8                	or     eax,edi
c0028e27:	0f 95 c0             	setne  al
c0028e2a:	0f b6 c0             	movzx  eax,al
c0028e2d:	09 c3                	or     ebx,eax
c0028e2f:	89 d9                	mov    ecx,ebx
c0028e31:	c1 e9 08             	shr    ecx,0x8
c0028e34:	f6 c3 7f             	test   bl,0x7f
c0028e37:	0f 95 c0             	setne  al
c0028e3a:	09 c8                	or     eax,ecx
c0028e3c:	83 e0 01             	and    eax,0x1
c0028e3f:	c1 eb 07             	shr    ebx,0x7
c0028e42:	21 c3                	and    ebx,eax
c0028e44:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028e4a:	09 d1                	or     ecx,edx
c0028e4c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028e4f:	eb 76                	jmp    c0028ec7 <__truncdfsf2+0x11c>
c0028e51:	83 c6 80             	add    esi,0xffffff80
c0028e54:	7e 1d                	jle    c0028e73 <__truncdfsf2+0xc8>
c0028e56:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028e5c:	75 0b                	jne    c0028e69 <__truncdfsf2+0xbe>
c0028e5e:	09 f8                	or     eax,edi
c0028e60:	74 09                	je     c0028e6b <__truncdfsf2+0xc0>
c0028e62:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028e67:	eb 02                	jmp    c0028e6b <__truncdfsf2+0xc0>
c0028e69:	31 c0                	xor    eax,eax
c0028e6b:	c1 fa 17             	sar    edx,0x17
c0028e6e:	80 ca ff             	or     dl,0xff
c0028e71:	eb 0e                	jmp    c0028e81 <__truncdfsf2+0xd6>
c0028e73:	c1 fa 1f             	sar    edx,0x1f
c0028e76:	c1 e2 08             	shl    edx,0x8
c0028e79:	09 ca                	or     edx,ecx
c0028e7b:	eb 04                	jmp    c0028e81 <__truncdfsf2+0xd6>
c0028e7d:	31 d2                	xor    edx,edx
c0028e7f:	31 c0                	xor    eax,eax
c0028e81:	c1 e2 17             	shl    edx,0x17
c0028e84:	c1 e8 08             	shr    eax,0x8
c0028e87:	09 d0                	or     eax,edx
c0028e89:	eb 3c                	jmp    c0028ec7 <__truncdfsf2+0x11c>
c0028e8b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028e91:	89 ca                	mov    edx,ecx
c0028e93:	c1 fa 0b             	sar    edx,0xb
c0028e96:	c1 e2 08             	shl    edx,0x8
c0028e99:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028e9c:	31 db                	xor    ebx,ebx
c0028e9e:	85 ff                	test   edi,edi
c0028ea0:	0f 95 c3             	setne  bl
c0028ea3:	09 d8                	or     eax,ebx
c0028ea5:	89 c3                	mov    ebx,eax
c0028ea7:	c1 eb 08             	shr    ebx,0x8
c0028eaa:	a8 7f                	test   al,0x7f
c0028eac:	0f 95 c2             	setne  dl
c0028eaf:	89 d6                	mov    esi,edx
c0028eb1:	09 de                	or     esi,ebx
c0028eb3:	83 e6 01             	and    esi,0x1
c0028eb6:	c1 e8 07             	shr    eax,0x7
c0028eb9:	21 f0                	and    eax,esi
c0028ebb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028ebe:	09 ca                	or     edx,ecx
c0028ec0:	c1 e2 17             	shl    edx,0x17
c0028ec3:	09 da                	or     edx,ebx
c0028ec5:	01 d0                	add    eax,edx
c0028ec7:	83 c4 0c             	add    esp,0xc
c0028eca:	5b                   	pop    ebx
c0028ecb:	5e                   	pop    esi
c0028ecc:	5f                   	pop    edi
c0028ecd:	5d                   	pop    ebp
c0028ece:	c3                   	ret    

c0028ecf <__extendsfdf2>:
c0028ecf:	55                   	push   ebp
c0028ed0:	89 e5                	mov    ebp,esp
c0028ed2:	57                   	push   edi
c0028ed3:	56                   	push   esi
c0028ed4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028ed7:	89 d1                	mov    ecx,edx
c0028ed9:	c1 f9 17             	sar    ecx,0x17
c0028edc:	c1 e2 08             	shl    edx,0x8
c0028edf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028ee5:	89 c8                	mov    eax,ecx
c0028ee7:	80 e4 f8             	and    ah,0xf8
c0028eea:	8d 71 01             	lea    esi,[ecx+0x1]
c0028eed:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028ef3:	75 27                	jne    c0028f1c <__extendsfdf2+0x4d>
c0028ef5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028efb:	75 18                	jne    c0028f15 <__extendsfdf2+0x46>
c0028efd:	85 d2                	test   edx,edx
c0028eff:	74 20                	je     c0028f21 <__extendsfdf2+0x52>
c0028f01:	41                   	inc    ecx
c0028f02:	01 d2                	add    edx,edx
c0028f04:	79 fb                	jns    c0028f01 <__extendsfdf2+0x32>
c0028f06:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028f0c:	29 c8                	sub    eax,ecx
c0028f0e:	05 81 03 00 00       	add    eax,0x381
c0028f13:	eb 0c                	jmp    c0028f21 <__extendsfdf2+0x52>
c0028f15:	05 00 07 00 00       	add    eax,0x700
c0028f1a:	eb 05                	jmp    c0028f21 <__extendsfdf2+0x52>
c0028f1c:	05 80 03 00 00       	add    eax,0x380
c0028f21:	c1 e0 14             	shl    eax,0x14
c0028f24:	89 c1                	mov    ecx,eax
c0028f26:	89 d0                	mov    eax,edx
c0028f28:	c1 e8 0b             	shr    eax,0xb
c0028f2b:	09 c1                	or     ecx,eax
c0028f2d:	c1 e2 15             	shl    edx,0x15
c0028f30:	89 d0                	mov    eax,edx
c0028f32:	89 ca                	mov    edx,ecx
c0028f34:	5e                   	pop    esi
c0028f35:	5f                   	pop    edi
c0028f36:	5d                   	pop    ebp
c0028f37:	c3                   	ret    
c0028f38:	66 90                	xchg   ax,ax
c0028f3a:	66 90                	xchg   ax,ax
c0028f3c:	66 90                	xchg   ax,ax
c0028f3e:	66 90                	xchg   ax,ax

c0028f40 <fabs>:
c0028f40:	83 ec 0c             	sub    esp,0xc
c0028f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0028f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028f53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028f57:	dd 04 24             	fld    QWORD PTR [esp]
c0028f5a:	83 c4 0c             	add    esp,0xc
c0028f5d:	c3                   	ret    
c0028f5e:	66 90                	xchg   ax,ax

c0028f60 <lrint>:
c0028f60:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028f64:	83 ec 04             	sub    esp,0x4
c0028f67:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f6a:	58                   	pop    eax
c0028f6b:	c3                   	ret    

c0028f6c <lrintf>:
c0028f6c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028f70:	83 ec 04             	sub    esp,0x4
c0028f73:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f76:	58                   	pop    eax
c0028f77:	c3                   	ret    

Disassembly of section .init:

c0028f78 <_init>:
c0028f78:	55                   	push   ebp
c0028f79:	89 e5                	mov    ebp,esp
c0028f7b:	e8 98 71 fd ff       	call   c0000118 <frame_dummy>
c0028f80:	e8 5b e0 ff ff       	call   c0026fe0 <__do_global_ctors_aux>
c0028f85:	5d                   	pop    ebp
c0028f86:	c3                   	ret    

Disassembly of section .fini:

c0028f87 <_fini>:
c0028f87:	55                   	push   ebp
c0028f88:	89 e5                	mov    ebp,esp
c0028f8a:	e8 19 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028f8f:	5d                   	pop    ebp
c0028f90:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028f92 <Computer::~Computer()>:
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c0028f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9e:	89 10                	mov    DWORD PTR [eax],edx
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	50                   	push   eax
c0028fa8:	e8 55 ac fe ff       	call   c0013c02 <Device::~Device()>
c0028fad:	83 c4 10             	add    esp,0x10
c0028fb0:	90                   	nop
c0028fb1:	83 c4 0c             	add    esp,0xc
c0028fb4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028fb6 <Computer::~Computer()>:
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	83 ec 0c             	sub    esp,0xc
c0028fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc0:	e8 cd ff ff ff       	call   c0028f92 <Computer::~Computer()>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	83 ec 08             	sub    esp,0x8
c0028fcb:	68 ec 01 00 00       	push   0x1ec
c0028fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd4:	e8 42 98 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	83 c4 0c             	add    esp,0xc
c0028fdf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028fe0 <idleCommon()>:
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	fa                   	cli    
c0028fe4:	ff 05 68 27 03 c0    	inc    DWORD PTR ds:0xc0032768
c0028fea:	e8 79 51 ff ff       	call   c001e168 <schedule()>
c0028fef:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c0028ff4:	48                   	dec    eax
c0028ff5:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c0028ffa:	75 01                	jne    c0028ffd <idleCommon()+0x1d>
c0028ffc:	fb                   	sti    
c0028ffd:	83 c4 0c             	add    esp,0xc
c0029000:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029002 <LinkedList<UnixFile>::~LinkedList()>:
c0029002:	90                   	nop
c0029003:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029004 <LinkedList<UnixFile>::LinkedList()>:
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029015:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029020:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029035:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029040:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029047:	83 ec 0c             	sub    esp,0xc
c002904a:	68 06 af 02 c0       	push   0xc002af06
c002904f:	e8 a7 98 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0029054:	83 c4 10             	add    esp,0x10
c0029057:	90                   	nop
c0029058:	83 c4 0c             	add    esp,0xc
c002905b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002905c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029064:	75 10                	jne    c0029076 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029066:	83 ec 0c             	sub    esp,0xc
c0029069:	68 20 af 02 c0       	push   0xc002af20
c002906e:	e8 3c 13 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	8b 00                	mov    eax,DWORD PTR [eax]
c002907c:	85 c0                	test   eax,eax
c002907e:	74 34                	je     c00290b4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029087:	85 c0                	test   eax,eax
c0029089:	74 29                	je     c00290b4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002908b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029092:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029096:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290ab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290b2:	eb 65                	jmp    c0029119 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ba:	85 c0                	test   eax,eax
c00290bc:	75 4b                	jne    c0029109 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290c5:	85 c0                	test   eax,eax
c00290c7:	75 40                	jne    c0029109 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290d1:	89 10                	mov    DWORD PTR [eax],edx
c00290d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290f3:	85 c0                	test   eax,eax
c00290f5:	74 22                	je     c0029119 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290f7:	83 ec 0c             	sub    esp,0xc
c00290fa:	68 42 af 02 c0       	push   0xc002af42
c00290ff:	e8 ab 12 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029104:	83 c4 10             	add    esp,0x10
c0029107:	eb 10                	jmp    c0029119 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029109:	83 ec 0c             	sub    esp,0xc
c002910c:	68 4c af 02 c0       	push   0xc002af4c
c0029111:	e8 99 12 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029116:	83 c4 10             	add    esp,0x10
c0029119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029120:	8d 50 01             	lea    edx,[eax+0x1]
c0029123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029127:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002912a:	90                   	nop
c002912b:	83 c4 0c             	add    esp,0xc
c002912e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029130 <LinkedList<UnixFile>::getFirstElement()>:
c0029130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029134:	8b 00                	mov    eax,DWORD PTR [eax]
c0029136:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029138 <LinkedList<UnixFile>::removeFirst()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029141:	85 c0                	test   eax,eax
c0029143:	75 12                	jne    c0029157 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029145:	83 ec 0c             	sub    esp,0xc
c0029148:	68 58 af 02 c0       	push   0xc002af58
c002914d:	e8 5d 12 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029152:	83 c4 10             	add    esp,0x10
c0029155:	eb 7e                	jmp    c00291d5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002915e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029161:	85 c0                	test   eax,eax
c0029163:	74 10                	je     c0029175 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029165:	83 ec 0c             	sub    esp,0xc
c0029168:	68 a3 af 02 c0       	push   0xc002afa3
c002916d:	e8 3d 12 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029172:	83 c4 10             	add    esp,0x10
c0029175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029179:	8b 00                	mov    eax,DWORD PTR [eax]
c002917b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002917e:	85 c0                	test   eax,eax
c0029180:	75 33                	jne    c00291b5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029186:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002919e:	83 f8 01             	cmp    eax,0x1
c00291a1:	74 21                	je     c00291c4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291a3:	83 ec 0c             	sub    esp,0xc
c00291a6:	68 7c af 02 c0       	push   0xc002af7c
c00291ab:	e8 ff 11 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00291b0:	83 c4 10             	add    esp,0x10
c00291b3:	eb 0f                	jmp    c00291c4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00291bb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	89 10                	mov    DWORD PTR [eax],edx
c00291c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291d5:	83 c4 0c             	add    esp,0xc
c00291d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00291da <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00291da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291e1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00291e2 <DriverlessDevice::~DriverlessDevice()>:
c00291e2:	ba 5c b7 02 c0       	mov    edx,0xc002b75c
c00291e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291eb:	89 10                	mov    DWORD PTR [eax],edx
c00291ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291f1:	50                   	push   eax
c00291f2:	e8 0b aa fe ff       	call   c0013c02 <Device::~Device()>
c00291f7:	83 c4 04             	add    esp,0x4
c00291fa:	90                   	nop
c00291fb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00291fc <DriverlessDevice::~DriverlessDevice()>:
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	83 ec 0c             	sub    esp,0xc
c0029202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029206:	e8 d7 ff ff ff       	call   c00291e2 <DriverlessDevice::~DriverlessDevice()>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	83 ec 08             	sub    esp,0x8
c0029211:	68 58 01 00 00       	push   0x158
c0029216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921a:	e8 fc 95 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c002921f:	83 c4 10             	add    esp,0x10
c0029222:	83 c4 0c             	add    esp,0xc
c0029225:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029226 <LinkedList<Device>::addElement(Device*)>:
c0029226:	83 ec 0c             	sub    esp,0xc
c0029229:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002922e:	75 10                	jne    c0029240 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029230:	83 ec 0c             	sub    esp,0xc
c0029233:	68 20 af 02 c0       	push   0xc002af20
c0029238:	e8 72 11 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c002923d:	83 c4 10             	add    esp,0x10
c0029240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029244:	8b 00                	mov    eax,DWORD PTR [eax]
c0029246:	85 c0                	test   eax,eax
c0029248:	74 3a                	je     c0029284 <LinkedList<Device>::addElement(Device*)+0x5e>
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029251:	85 c0                	test   eax,eax
c0029253:	74 2f                	je     c0029284 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029259:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002925c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029260:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002926e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029278:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029282:	eb 68                	jmp    c00292ec <LinkedList<Device>::addElement(Device*)+0xc6>
c0029284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029288:	8b 00                	mov    eax,DWORD PTR [eax]
c002928a:	85 c0                	test   eax,eax
c002928c:	75 4e                	jne    c00292dc <LinkedList<Device>::addElement(Device*)+0xb6>
c002928e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029295:	85 c0                	test   eax,eax
c0029297:	75 43                	jne    c00292dc <LinkedList<Device>::addElement(Device*)+0xb6>
c0029299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292a1:	89 10                	mov    DWORD PTR [eax],edx
c00292a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00292ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292b5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00292bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c6:	85 c0                	test   eax,eax
c00292c8:	74 22                	je     c00292ec <LinkedList<Device>::addElement(Device*)+0xc6>
c00292ca:	83 ec 0c             	sub    esp,0xc
c00292cd:	68 42 af 02 c0       	push   0xc002af42
c00292d2:	e8 d8 10 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00292d7:	83 c4 10             	add    esp,0x10
c00292da:	eb 10                	jmp    c00292ec <LinkedList<Device>::addElement(Device*)+0xc6>
c00292dc:	83 ec 0c             	sub    esp,0xc
c00292df:	68 4c af 02 c0       	push   0xc002af4c
c00292e4:	e8 c6 10 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292f3:	8d 50 01             	lea    edx,[eax+0x1]
c00292f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292fd:	90                   	nop
c00292fe:	83 c4 0c             	add    esp,0xc
c0029301:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029302 <LinkedList<Device>::LinkedList()>:
c0029302:	83 ec 0c             	sub    esp,0xc
c0029305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029309:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002930f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029313:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002931a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029329:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002932f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002933a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029345:	83 ec 0c             	sub    esp,0xc
c0029348:	68 06 af 02 c0       	push   0xc002af06
c002934d:	e8 a9 95 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c0029352:	83 c4 10             	add    esp,0x10
c0029355:	90                   	nop
c0029356:	83 c4 0c             	add    esp,0xc
c0029359:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002935a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002935a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002935e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029360:	85 c0                	test   eax,eax
c0029362:	75 0e                	jne    c0029372 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002936b:	85 c0                	test   eax,eax
c002936d:	75 03                	jne    c0029372 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002936f:	b0 01                	mov    al,0x1
c0029371:	c3                   	ret    
c0029372:	b0 00                	mov    al,0x0
c0029374:	90                   	nop
c0029375:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029376 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002937a:	8b 00                	mov    eax,DWORD PTR [eax]
c002937c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002937e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002937e:	83 ec 0c             	sub    esp,0xc
c0029381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029385:	8b 00                	mov    eax,DWORD PTR [eax]
c0029387:	85 c0                	test   eax,eax
c0029389:	75 15                	jne    c00293a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002938b:	83 ec 0c             	sub    esp,0xc
c002938e:	68 58 af 02 c0       	push   0xc002af58
c0029393:	e8 17 10 ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029398:	83 c4 10             	add    esp,0x10
c002939b:	e9 88 00 00 00       	jmp    c0029428 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00293a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293aa:	85 c0                	test   eax,eax
c00293ac:	0f 95 c0             	setne  al
c00293af:	84 c0                	test   al,al
c00293b1:	74 10                	je     c00293c3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00293b3:	83 ec 0c             	sub    esp,0xc
c00293b6:	68 a3 af 02 c0       	push   0xc002afa3
c00293bb:	e8 ef 0f ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00293c0:	83 c4 10             	add    esp,0x10
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00293c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293cc:	85 c0                	test   eax,eax
c00293ce:	0f 94 c0             	sete   al
c00293d1:	84 c0                	test   al,al
c00293d3:	74 33                	je     c0029408 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00293d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293f1:	83 f8 01             	cmp    eax,0x1
c00293f4:	74 21                	je     c0029417 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00293f6:	83 ec 0c             	sub    esp,0xc
c00293f9:	68 7c af 02 c0       	push   0xc002af7c
c00293fe:	e8 ac 0f ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	eb 0f                	jmp    c0029417 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940c:	8b 00                	mov    eax,DWORD PTR [eax]
c002940e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029415:	89 10                	mov    DWORD PTR [eax],edx
c0029417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002941e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029425:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029428:	83 c4 0c             	add    esp,0xc
c002942b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002942c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002942c:	83 ec 0c             	sub    esp,0xc
c002942f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029434:	75 10                	jne    c0029446 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029436:	83 ec 0c             	sub    esp,0xc
c0029439:	68 20 af 02 c0       	push   0xc002af20
c002943e:	e8 6c 0f ff ff       	call   c001a3af <Krnl::panic(char const*)>
c0029443:	83 c4 10             	add    esp,0x10
c0029446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944a:	8b 00                	mov    eax,DWORD PTR [eax]
c002944c:	85 c0                	test   eax,eax
c002944e:	74 34                	je     c0029484 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029457:	85 c0                	test   eax,eax
c0029459:	74 29                	je     c0029484 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002945b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029466:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029471:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002947b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029482:	eb 65                	jmp    c00294e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029488:	8b 00                	mov    eax,DWORD PTR [eax]
c002948a:	85 c0                	test   eax,eax
c002948c:	75 4b                	jne    c00294d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002948e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029495:	85 c0                	test   eax,eax
c0029497:	75 40                	jne    c00294d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294a1:	89 10                	mov    DWORD PTR [eax],edx
c00294a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00294bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294c3:	85 c0                	test   eax,eax
c00294c5:	74 22                	je     c00294e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294c7:	83 ec 0c             	sub    esp,0xc
c00294ca:	68 42 af 02 c0       	push   0xc002af42
c00294cf:	e8 db 0e ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00294d4:	83 c4 10             	add    esp,0x10
c00294d7:	eb 10                	jmp    c00294e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294d9:	83 ec 0c             	sub    esp,0xc
c00294dc:	68 4c af 02 c0       	push   0xc002af4c
c00294e1:	e8 c9 0e ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00294e6:	83 c4 10             	add    esp,0x10
c00294e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294f0:	8d 50 01             	lea    edx,[eax+0x1]
c00294f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294fa:	90                   	nop
c00294fb:	83 c4 0c             	add    esp,0xc
c00294fe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029500 <ACPI::~ACPI()>:
c0029500:	83 ec 0c             	sub    esp,0xc
c0029503:	ba b8 c1 02 c0       	mov    edx,0xc002c1b8
c0029508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950c:	89 10                	mov    DWORD PTR [eax],edx
c002950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029512:	83 ec 0c             	sub    esp,0xc
c0029515:	50                   	push   eax
c0029516:	e8 e7 a6 fe ff       	call   c0013c02 <Device::~Device()>
c002951b:	83 c4 10             	add    esp,0x10
c002951e:	90                   	nop
c002951f:	83 c4 0c             	add    esp,0xc
c0029522:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029524 <ACPI::~ACPI()>:
c0029524:	83 ec 0c             	sub    esp,0xc
c0029527:	83 ec 0c             	sub    esp,0xc
c002952a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002952e:	e8 cd ff ff ff       	call   c0029500 <ACPI::~ACPI()>
c0029533:	83 c4 10             	add    esp,0x10
c0029536:	83 ec 08             	sub    esp,0x8
c0029539:	68 64 12 00 00       	push   0x1264
c002953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029542:	e8 d4 92 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029547:	83 c4 10             	add    esp,0x10
c002954a:	83 c4 0c             	add    esp,0xc
c002954d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002954e <LinkedList<Device>::~LinkedList()>:
c002954e:	90                   	nop
c002954f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029550 <LinkedList<Device>::isEmpty()>:
c0029550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029554:	8b 00                	mov    eax,DWORD PTR [eax]
c0029556:	85 c0                	test   eax,eax
c0029558:	75 0e                	jne    c0029568 <LinkedList<Device>::isEmpty()+0x18>
c002955a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002955e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029561:	85 c0                	test   eax,eax
c0029563:	75 03                	jne    c0029568 <LinkedList<Device>::isEmpty()+0x18>
c0029565:	b0 01                	mov    al,0x1
c0029567:	c3                   	ret    
c0029568:	b0 00                	mov    al,0x0
c002956a:	90                   	nop
c002956b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002956c <LinkedList<Device>::getFirstElement()>:
c002956c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029570:	8b 00                	mov    eax,DWORD PTR [eax]
c0029572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029574 <LinkedList<Device>::removeFirst()>:
c0029574:	83 ec 0c             	sub    esp,0xc
c0029577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957b:	8b 00                	mov    eax,DWORD PTR [eax]
c002957d:	85 c0                	test   eax,eax
c002957f:	75 15                	jne    c0029596 <LinkedList<Device>::removeFirst()+0x22>
c0029581:	83 ec 0c             	sub    esp,0xc
c0029584:	68 58 af 02 c0       	push   0xc002af58
c0029589:	e8 21 0e ff ff       	call   c001a3af <Krnl::panic(char const*)>
c002958e:	83 c4 10             	add    esp,0x10
c0029591:	e9 87 00 00 00       	jmp    c002961d <LinkedList<Device>::removeFirst()+0xa9>
c0029596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002959d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295a3:	85 c0                	test   eax,eax
c00295a5:	74 10                	je     c00295b7 <LinkedList<Device>::removeFirst()+0x43>
c00295a7:	83 ec 0c             	sub    esp,0xc
c00295aa:	68 a3 af 02 c0       	push   0xc002afa3
c00295af:	e8 fb 0d ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00295b4:	83 c4 10             	add    esp,0x10
c00295b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00295bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295c3:	85 c0                	test   eax,eax
c00295c5:	75 33                	jne    c00295fa <LinkedList<Device>::removeFirst()+0x86>
c00295c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295e3:	83 f8 01             	cmp    eax,0x1
c00295e6:	74 24                	je     c002960c <LinkedList<Device>::removeFirst()+0x98>
c00295e8:	83 ec 0c             	sub    esp,0xc
c00295eb:	68 7c af 02 c0       	push   0xc002af7c
c00295f0:	e8 ba 0d ff ff       	call   c001a3af <Krnl::panic(char const*)>
c00295f5:	83 c4 10             	add    esp,0x10
c00295f8:	eb 12                	jmp    c002960c <LinkedList<Device>::removeFirst()+0x98>
c00295fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0029600:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960a:	89 10                	mov    DWORD PTR [eax],edx
c002960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029610:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029613:	8d 50 ff             	lea    edx,[eax-0x1]
c0029616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002961d:	83 c4 0c             	add    esp,0xc
c0029620:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029622 <CPU::~CPU()>:
c0029622:	83 ec 0c             	sub    esp,0xc
c0029625:	ba a8 c5 02 c0       	mov    edx,0xc002c5a8
c002962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962e:	89 10                	mov    DWORD PTR [eax],edx
c0029630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029634:	83 ec 0c             	sub    esp,0xc
c0029637:	50                   	push   eax
c0029638:	e8 c5 a5 fe ff       	call   c0013c02 <Device::~Device()>
c002963d:	83 c4 10             	add    esp,0x10
c0029640:	90                   	nop
c0029641:	83 c4 0c             	add    esp,0xc
c0029644:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029646 <CPU::~CPU()>:
c0029646:	83 ec 0c             	sub    esp,0xc
c0029649:	83 ec 0c             	sub    esp,0xc
c002964c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029650:	e8 cd ff ff ff       	call   c0029622 <CPU::~CPU()>
c0029655:	83 c4 10             	add    esp,0x10
c0029658:	83 ec 08             	sub    esp,0x8
c002965b:	68 98 11 00 00       	push   0x1198
c0029660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029664:	e8 b2 91 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029669:	83 c4 10             	add    esp,0x10
c002966c:	83 c4 0c             	add    esp,0xc
c002966f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029670 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029670:	90                   	nop
c0029671:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029672 <ThreadControlBlock::ThreadControlBlock()>:
c0029672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029676:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002967d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029681:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002968c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029697:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00296a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296ad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00296b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296b5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00296b9:	90                   	nop
c00296ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00296bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00296bc:	83 ec 0c             	sub    esp,0xc
c00296bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00296df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00296ff:	83 ec 0c             	sub    esp,0xc
c0029702:	68 06 af 02 c0       	push   0xc002af06
c0029707:	e8 ef 91 fe ff       	call   c00128fb <Dbg::kprintf(char const*, ...)>
c002970c:	83 c4 10             	add    esp,0x10
c002970f:	90                   	nop
c0029710:	83 c4 0c             	add    esp,0xc
c0029713:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029714 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029718:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002971b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002971c <Vm::_FPUState::_FPUState()>:
c002971c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029720:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029727:	90                   	nop
c0029728:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002972a <PCI::~PCI()>:
c002972a:	83 ec 0c             	sub    esp,0xc
c002972d:	ba 3c d7 02 c0       	mov    edx,0xc002d73c
c0029732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029736:	89 10                	mov    DWORD PTR [eax],edx
c0029738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973c:	83 ec 0c             	sub    esp,0xc
c002973f:	50                   	push   eax
c0029740:	e8 8d 9e fe ff       	call   c00135d2 <Bus::~Bus()>
c0029745:	83 c4 10             	add    esp,0x10
c0029748:	90                   	nop
c0029749:	83 c4 0c             	add    esp,0xc
c002974c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002974e <PCI::~PCI()>:
c002974e:	83 ec 0c             	sub    esp,0xc
c0029751:	83 ec 0c             	sub    esp,0xc
c0029754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029758:	e8 cd ff ff ff       	call   c002972a <PCI::~PCI()>
c002975d:	83 c4 10             	add    esp,0x10
c0029760:	83 ec 08             	sub    esp,0x8
c0029763:	68 5c 01 00 00       	push   0x15c
c0029768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002976c:	e8 aa 90 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029771:	83 c4 10             	add    esp,0x10
c0029774:	83 c4 0c             	add    esp,0xc
c0029777:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029778 <IDE::~IDE()>:
c0029778:	83 ec 0c             	sub    esp,0xc
c002977b:	ba b0 d9 02 c0       	mov    edx,0xc002d9b0
c0029780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029784:	89 10                	mov    DWORD PTR [eax],edx
c0029786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978a:	83 ec 0c             	sub    esp,0xc
c002978d:	50                   	push   eax
c002978e:	e8 85 a9 fe ff       	call   c0014118 <HardDiskController::~HardDiskController()>
c0029793:	83 c4 10             	add    esp,0x10
c0029796:	90                   	nop
c0029797:	83 c4 0c             	add    esp,0xc
c002979a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002979c <IDE::~IDE()>:
c002979c:	83 ec 0c             	sub    esp,0xc
c002979f:	83 ec 0c             	sub    esp,0xc
c00297a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a6:	e8 cd ff ff ff       	call   c0029778 <IDE::~IDE()>
c00297ab:	83 c4 10             	add    esp,0x10
c00297ae:	83 ec 08             	sub    esp,0x8
c00297b1:	68 70 02 00 00       	push   0x270
c00297b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ba:	e8 5c 90 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c00297bf:	83 c4 10             	add    esp,0x10
c00297c2:	83 c4 0c             	add    esp,0xc
c00297c5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00297c6 <SATABus::~SATABus()>:
c00297c6:	83 ec 0c             	sub    esp,0xc
c00297c9:	ba 90 da 02 c0       	mov    edx,0xc002da90
c00297ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d2:	89 10                	mov    DWORD PTR [eax],edx
c00297d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d8:	83 ec 0c             	sub    esp,0xc
c00297db:	50                   	push   eax
c00297dc:	e8 37 a9 fe ff       	call   c0014118 <HardDiskController::~HardDiskController()>
c00297e1:	83 c4 10             	add    esp,0x10
c00297e4:	90                   	nop
c00297e5:	83 c4 0c             	add    esp,0xc
c00297e8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00297ea <SATABus::~SATABus()>:
c00297ea:	83 ec 0c             	sub    esp,0xc
c00297ed:	83 ec 0c             	sub    esp,0xc
c00297f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f4:	e8 cd ff ff ff       	call   c00297c6 <SATABus::~SATABus()>
c00297f9:	83 c4 10             	add    esp,0x10
c00297fc:	83 ec 08             	sub    esp,0x8
c00297ff:	68 64 01 00 00       	push   0x164
c0029804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029808:	e8 0e 90 fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c002980d:	83 c4 10             	add    esp,0x10
c0029810:	83 c4 0c             	add    esp,0xc
c0029813:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029814 <ATA::~ATA()>:
c0029814:	83 ec 0c             	sub    esp,0xc
c0029817:	ba dc da 02 c0       	mov    edx,0xc002dadc
c002981c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029820:	89 10                	mov    DWORD PTR [eax],edx
c0029822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029826:	83 ec 0c             	sub    esp,0xc
c0029829:	50                   	push   eax
c002982a:	e8 db a9 fe ff       	call   c001420a <PhysicalDisk::~PhysicalDisk()>
c002982f:	83 c4 10             	add    esp,0x10
c0029832:	90                   	nop
c0029833:	83 c4 0c             	add    esp,0xc
c0029836:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029838 <ATA::~ATA()>:
c0029838:	83 ec 0c             	sub    esp,0xc
c002983b:	83 ec 0c             	sub    esp,0xc
c002983e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029842:	e8 cd ff ff ff       	call   c0029814 <ATA::~ATA()>
c0029847:	83 c4 10             	add    esp,0x10
c002984a:	83 ec 08             	sub    esp,0x8
c002984d:	68 7c 01 00 00       	push   0x17c
c0029852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029856:	e8 c0 8f fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c002985b:	83 c4 10             	add    esp,0x10
c002985e:	83 c4 0c             	add    esp,0xc
c0029861:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029862 <ATAPI::~ATAPI()>:
c0029862:	83 ec 0c             	sub    esp,0xc
c0029865:	ba 14 db 02 c0       	mov    edx,0xc002db14
c002986a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986e:	89 10                	mov    DWORD PTR [eax],edx
c0029870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029874:	83 ec 0c             	sub    esp,0xc
c0029877:	50                   	push   eax
c0029878:	e8 8d a9 fe ff       	call   c001420a <PhysicalDisk::~PhysicalDisk()>
c002987d:	83 c4 10             	add    esp,0x10
c0029880:	90                   	nop
c0029881:	83 c4 0c             	add    esp,0xc
c0029884:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029886 <ATAPI::~ATAPI()>:
c0029886:	83 ec 0c             	sub    esp,0xc
c0029889:	83 ec 0c             	sub    esp,0xc
c002988c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029890:	e8 cd ff ff ff       	call   c0029862 <ATAPI::~ATAPI()>
c0029895:	83 c4 10             	add    esp,0x10
c0029898:	83 ec 08             	sub    esp,0x8
c002989b:	68 80 01 00 00       	push   0x180
c00298a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298a4:	e8 72 8f fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c00298a9:	83 c4 10             	add    esp,0x10
c00298ac:	83 c4 0c             	add    esp,0xc
c00298af:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00298b0 <SATA::~SATA()>:
c00298b0:	83 ec 0c             	sub    esp,0xc
c00298b3:	ba c8 db 02 c0       	mov    edx,0xc002dbc8
c00298b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298bc:	89 10                	mov    DWORD PTR [eax],edx
c00298be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c2:	83 ec 0c             	sub    esp,0xc
c00298c5:	50                   	push   eax
c00298c6:	e8 3f a9 fe ff       	call   c001420a <PhysicalDisk::~PhysicalDisk()>
c00298cb:	83 c4 10             	add    esp,0x10
c00298ce:	90                   	nop
c00298cf:	83 c4 0c             	add    esp,0xc
c00298d2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00298d4 <SATA::~SATA()>:
c00298d4:	83 ec 0c             	sub    esp,0xc
c00298d7:	83 ec 0c             	sub    esp,0xc
c00298da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298de:	e8 cd ff ff ff       	call   c00298b0 <SATA::~SATA()>
c00298e3:	83 c4 10             	add    esp,0x10
c00298e6:	83 ec 08             	sub    esp,0x8
c00298e9:	68 7c 01 00 00       	push   0x17c
c00298ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f2:	e8 24 8f fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c00298f7:	83 c4 10             	add    esp,0x10
c00298fa:	83 c4 0c             	add    esp,0xc
c00298fd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00298fe <SATAPI::~SATAPI()>:
c00298fe:	83 ec 0c             	sub    esp,0xc
c0029901:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0029906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990a:	89 10                	mov    DWORD PTR [eax],edx
c002990c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029910:	83 ec 0c             	sub    esp,0xc
c0029913:	50                   	push   eax
c0029914:	e8 f1 a8 fe ff       	call   c001420a <PhysicalDisk::~PhysicalDisk()>
c0029919:	83 c4 10             	add    esp,0x10
c002991c:	90                   	nop
c002991d:	83 c4 0c             	add    esp,0xc
c0029920:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029922 <SATAPI::~SATAPI()>:
c0029922:	83 ec 0c             	sub    esp,0xc
c0029925:	83 ec 0c             	sub    esp,0xc
c0029928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002992c:	e8 cd ff ff ff       	call   c00298fe <SATAPI::~SATAPI()>
c0029931:	83 c4 10             	add    esp,0x10
c0029934:	83 ec 08             	sub    esp,0x8
c0029937:	68 80 01 00 00       	push   0x180
c002993c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029940:	e8 d6 8e fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029945:	83 c4 10             	add    esp,0x10
c0029948:	83 c4 0c             	add    esp,0xc
c002994b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002994c <AVX::~AVX()>:
c002994c:	83 ec 0c             	sub    esp,0xc
c002994f:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0029954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029958:	89 10                	mov    DWORD PTR [eax],edx
c002995a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995e:	83 ec 0c             	sub    esp,0xc
c0029961:	50                   	push   eax
c0029962:	e8 27 a9 fe ff       	call   c001428e <FPU::~FPU()>
c0029967:	83 c4 10             	add    esp,0x10
c002996a:	90                   	nop
c002996b:	83 c4 0c             	add    esp,0xc
c002996e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029970 <AVX::~AVX()>:
c0029970:	83 ec 0c             	sub    esp,0xc
c0029973:	83 ec 0c             	sub    esp,0xc
c0029976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002997a:	e8 cd ff ff ff       	call   c002994c <AVX::~AVX()>
c002997f:	83 c4 10             	add    esp,0x10
c0029982:	83 ec 08             	sub    esp,0x8
c0029985:	68 58 01 00 00       	push   0x158
c002998a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002998e:	e8 88 8e fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029993:	83 c4 10             	add    esp,0x10
c0029996:	83 c4 0c             	add    esp,0xc
c0029999:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002999a <MMX::~MMX()>:
c002999a:	83 ec 0c             	sub    esp,0xc
c002999d:	ba 24 dd 02 c0       	mov    edx,0xc002dd24
c00299a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a6:	89 10                	mov    DWORD PTR [eax],edx
c00299a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ac:	83 ec 0c             	sub    esp,0xc
c00299af:	50                   	push   eax
c00299b0:	e8 d9 a8 fe ff       	call   c001428e <FPU::~FPU()>
c00299b5:	83 c4 10             	add    esp,0x10
c00299b8:	90                   	nop
c00299b9:	83 c4 0c             	add    esp,0xc
c00299bc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00299be <MMX::~MMX()>:
c00299be:	83 ec 0c             	sub    esp,0xc
c00299c1:	83 ec 0c             	sub    esp,0xc
c00299c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c8:	e8 cd ff ff ff       	call   c002999a <MMX::~MMX()>
c00299cd:	83 c4 10             	add    esp,0x10
c00299d0:	83 ec 08             	sub    esp,0x8
c00299d3:	68 58 01 00 00       	push   0x158
c00299d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299dc:	e8 3a 8e fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c00299e1:	83 c4 10             	add    esp,0x10
c00299e4:	83 c4 0c             	add    esp,0xc
c00299e7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00299e8 <SSE::~SSE()>:
c00299e8:	83 ec 0c             	sub    esp,0xc
c00299eb:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c00299f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f4:	89 10                	mov    DWORD PTR [eax],edx
c00299f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fa:	83 ec 0c             	sub    esp,0xc
c00299fd:	50                   	push   eax
c00299fe:	e8 8b a8 fe ff       	call   c001428e <FPU::~FPU()>
c0029a03:	83 c4 10             	add    esp,0x10
c0029a06:	90                   	nop
c0029a07:	83 c4 0c             	add    esp,0xc
c0029a0a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029a0c <SSE::~SSE()>:
c0029a0c:	83 ec 0c             	sub    esp,0xc
c0029a0f:	83 ec 0c             	sub    esp,0xc
c0029a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a16:	e8 cd ff ff ff       	call   c00299e8 <SSE::~SSE()>
c0029a1b:	83 c4 10             	add    esp,0x10
c0029a1e:	83 ec 08             	sub    esp,0x8
c0029a21:	68 58 01 00 00       	push   0x158
c0029a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a2a:	e8 ec 8d fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029a2f:	83 c4 10             	add    esp,0x10
c0029a32:	83 c4 0c             	add    esp,0xc
c0029a35:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029a36 <x87::~x87()>:
c0029a36:	83 ec 0c             	sub    esp,0xc
c0029a39:	ba a4 dd 02 c0       	mov    edx,0xc002dda4
c0029a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a42:	89 10                	mov    DWORD PTR [eax],edx
c0029a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a48:	83 ec 0c             	sub    esp,0xc
c0029a4b:	50                   	push   eax
c0029a4c:	e8 3d a8 fe ff       	call   c001428e <FPU::~FPU()>
c0029a51:	83 c4 10             	add    esp,0x10
c0029a54:	90                   	nop
c0029a55:	83 c4 0c             	add    esp,0xc
c0029a58:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029a5a <x87::~x87()>:
c0029a5a:	83 ec 0c             	sub    esp,0xc
c0029a5d:	83 ec 0c             	sub    esp,0xc
c0029a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a64:	e8 cd ff ff ff       	call   c0029a36 <x87::~x87()>
c0029a69:	83 c4 10             	add    esp,0x10
c0029a6c:	83 ec 08             	sub    esp,0x8
c0029a6f:	68 58 01 00 00       	push   0x158
c0029a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a78:	e8 9e 8d fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029a7d:	83 c4 10             	add    esp,0x10
c0029a80:	83 c4 0c             	add    esp,0xc
c0029a83:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029a84 <IOAPIC::~IOAPIC()>:
c0029a84:	83 ec 0c             	sub    esp,0xc
c0029a87:	ba fc de 02 c0       	mov    edx,0xc002defc
c0029a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a90:	89 10                	mov    DWORD PTR [eax],edx
c0029a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a96:	83 ec 0c             	sub    esp,0xc
c0029a99:	50                   	push   eax
c0029a9a:	e8 63 a1 fe ff       	call   c0013c02 <Device::~Device()>
c0029a9f:	83 c4 10             	add    esp,0x10
c0029aa2:	90                   	nop
c0029aa3:	83 c4 0c             	add    esp,0xc
c0029aa6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029aa8 <IOAPIC::~IOAPIC()>:
c0029aa8:	83 ec 0c             	sub    esp,0xc
c0029aab:	83 ec 0c             	sub    esp,0xc
c0029aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab2:	e8 cd ff ff ff       	call   c0029a84 <IOAPIC::~IOAPIC()>
c0029ab7:	83 c4 10             	add    esp,0x10
c0029aba:	83 ec 08             	sub    esp,0x8
c0029abd:	68 68 01 00 00       	push   0x168
c0029ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac6:	e8 50 8d fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029acb:	83 c4 10             	add    esp,0x10
c0029ace:	83 c4 0c             	add    esp,0xc
c0029ad1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029ad2 <APIC::~APIC()>:
c0029ad2:	83 ec 0c             	sub    esp,0xc
c0029ad5:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0029ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ade:	89 10                	mov    DWORD PTR [eax],edx
c0029ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae4:	83 ec 0c             	sub    esp,0xc
c0029ae7:	50                   	push   eax
c0029ae8:	e8 6b ac fe ff       	call   c0014758 <InterruptController::~InterruptController()>
c0029aed:	83 c4 10             	add    esp,0x10
c0029af0:	90                   	nop
c0029af1:	83 c4 0c             	add    esp,0xc
c0029af4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029af6 <APIC::~APIC()>:
c0029af6:	83 ec 0c             	sub    esp,0xc
c0029af9:	83 ec 0c             	sub    esp,0xc
c0029afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b00:	e8 cd ff ff ff       	call   c0029ad2 <APIC::~APIC()>
c0029b05:	83 c4 10             	add    esp,0x10
c0029b08:	83 ec 08             	sub    esp,0x8
c0029b0b:	68 58 21 00 00       	push   0x2158
c0029b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b14:	e8 02 8d fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029b19:	83 c4 10             	add    esp,0x10
c0029b1c:	83 c4 0c             	add    esp,0xc
c0029b1f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029b20 <PIC::~PIC()>:
c0029b20:	83 ec 0c             	sub    esp,0xc
c0029b23:	ba 4c df 02 c0       	mov    edx,0xc002df4c
c0029b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b2c:	89 10                	mov    DWORD PTR [eax],edx
c0029b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b32:	83 ec 0c             	sub    esp,0xc
c0029b35:	50                   	push   eax
c0029b36:	e8 1d ac fe ff       	call   c0014758 <InterruptController::~InterruptController()>
c0029b3b:	83 c4 10             	add    esp,0x10
c0029b3e:	90                   	nop
c0029b3f:	83 c4 0c             	add    esp,0xc
c0029b42:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029b44 <PIC::~PIC()>:
c0029b44:	83 ec 0c             	sub    esp,0xc
c0029b47:	83 ec 0c             	sub    esp,0xc
c0029b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b4e:	e8 cd ff ff ff       	call   c0029b20 <PIC::~PIC()>
c0029b53:	83 c4 10             	add    esp,0x10
c0029b56:	83 ec 08             	sub    esp,0x8
c0029b59:	68 58 21 00 00       	push   0x2158
c0029b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b62:	e8 b4 8c fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029b67:	83 c4 10             	add    esp,0x10
c0029b6a:	83 c4 0c             	add    esp,0xc
c0029b6d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029b6e <APICTimer::~APICTimer()>:
c0029b6e:	83 ec 0c             	sub    esp,0xc
c0029b71:	ba a0 df 02 c0       	mov    edx,0xc002dfa0
c0029b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b7a:	89 10                	mov    DWORD PTR [eax],edx
c0029b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b80:	83 ec 0c             	sub    esp,0xc
c0029b83:	50                   	push   eax
c0029b84:	e8 5f cc fe ff       	call   c00167e8 <Timer::~Timer()>
c0029b89:	83 c4 10             	add    esp,0x10
c0029b8c:	90                   	nop
c0029b8d:	83 c4 0c             	add    esp,0xc
c0029b90:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029b92 <APICTimer::~APICTimer()>:
c0029b92:	83 ec 0c             	sub    esp,0xc
c0029b95:	83 ec 0c             	sub    esp,0xc
c0029b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b9c:	e8 cd ff ff ff       	call   c0029b6e <APICTimer::~APICTimer()>
c0029ba1:	83 c4 10             	add    esp,0x10
c0029ba4:	83 ec 08             	sub    esp,0x8
c0029ba7:	68 60 01 00 00       	push   0x160
c0029bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb0:	e8 66 8c fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029bb5:	83 c4 10             	add    esp,0x10
c0029bb8:	83 c4 0c             	add    esp,0xc
c0029bbb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029bbc <PIT::~PIT()>:
c0029bbc:	83 ec 0c             	sub    esp,0xc
c0029bbf:	ba f0 df 02 c0       	mov    edx,0xc002dff0
c0029bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bc8:	89 10                	mov    DWORD PTR [eax],edx
c0029bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bce:	83 ec 0c             	sub    esp,0xc
c0029bd1:	50                   	push   eax
c0029bd2:	e8 11 cc fe ff       	call   c00167e8 <Timer::~Timer()>
c0029bd7:	83 c4 10             	add    esp,0x10
c0029bda:	90                   	nop
c0029bdb:	83 c4 0c             	add    esp,0xc
c0029bde:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029be0 <PIT::~PIT()>:
c0029be0:	83 ec 0c             	sub    esp,0xc
c0029be3:	83 ec 0c             	sub    esp,0xc
c0029be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bea:	e8 cd ff ff ff       	call   c0029bbc <PIT::~PIT()>
c0029bef:	83 c4 10             	add    esp,0x10
c0029bf2:	83 ec 08             	sub    esp,0x8
c0029bf5:	68 5c 01 00 00       	push   0x15c
c0029bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bfe:	e8 18 8c fe ff       	call   c001281b <operator delete(void*, unsigned long)>
c0029c03:	83 c4 10             	add    esp,0x10
c0029c06:	83 c4 0c             	add    esp,0xc
c0029c09:	c3                   	ret    
