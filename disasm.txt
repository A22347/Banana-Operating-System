
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 94 fb 01 c0       	mov    eax,0xc001fb94
c0000025:	3d 94 fb 01 c0       	cmp    eax,0xc001fb94
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 94 fb 01 c0       	push   0xc001fb94
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 94 fb 01 c0       	mov    eax,0xc001fb94
c0000051:	2d 94 fb 01 c0       	sub    eax,0xc001fb94
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 94 fb 01 c0       	push   0xc001fb94
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 28 ce 01 c0       	mov    ebx,0xc001ce28
c0000097:	81 eb 24 ce 01 c0    	sub    ebx,0xc001ce24
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 24 ce 01 c0       	mov    esi,0xc001ce24
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 94 fb 01 c0       	push   0xc001fb94
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 94 fb 01 c0       	push   0xc001fb94
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 b4 2d 01 00       	call   c0013064 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 66 a0 00 00       	call   c000a32e <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 92 2d 01 00       	call   c0013064 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 9b 32 01 00       	call   c001358c <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 ea 38 01 00       	call   c0013be4 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 70 fe 00 00       	jmp    c00101f2 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 40 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe31c0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31c0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 40 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe31c0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 40 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe31c0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 40 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe31c0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 44 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe30bc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 8a 52 01 00       	jmp    c0016f74 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 b8 52 01 00       	jmp    c0016fb8 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 dd 52 01 00       	jmp    c0016ffc <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 a0 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f60]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 a0 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f60]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 98 f0 01 c0       	mov    edx,0xc001f098
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 5c cf 01 c0       	mov    edx,0xc001cf5c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 62 cf 01 c0       	mov    eax,0xc001cf62
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 20 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2fe0]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 6b cf 01 c0       	mov    eax,0xc001cf6b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 a0 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f60]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 f0 cf 01 c0       	mov    eax,0xc001cff0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb e0 cf 01 c0       	mov    ebx,0xc001cfe0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba c0 cf 01 c0       	mov    edx,0xc001cfc0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba d0 cf 01 c0       	mov    edx,0xc001cfd0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 72 cf 01 c0       	mov    edx,0xc001cf72
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 7e cf 01 c0       	mov    edx,0xc001cf7e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 92 cf 01 c0       	mov    edx,0xc001cf92
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c c0 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d3c0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 c0 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d3c0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 c0 d1 01 c0       	mov    eax,0xc001d1c0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 00 d1 01 c0       	mov    eax,0xc001d100
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 c0 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f40]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 d1 18 01 00       	call   c0017850 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 c0 d4 01 c0       	push   0xc001d4c0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 c0 d4 01 c0       	push   0xc001d4c0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 c3 d4 01 c0       	push   0xc001d4c3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 ca d4 01 c0       	push   0xc001d4ca
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 0a 51 00 00       	call   c000bae2 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 d1 d4 01 c0       	push   0xc001d4d1
c0006a09:	e8 81 91 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 ea d4 01 c0       	push   0xc001d4ea
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 7e c9 00 00       	call   c00133b4 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 91 cb 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 30 40 01 c0       	push   0xc0014030
c0006a5a:	52                   	push   edx
c0006a5b:	e8 7c cb 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 e8 d5 01 c0       	push   0xc001d5e8
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 16 91 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006a79:	e8 91 d9 00 00       	call   c001440f <Vm::initialise8086()>
c0006a7e:	e8 a5 3e 00 00       	call   c000a928 <Fs::initVFS()>
c0006a83:	c7 04 24 f7 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4f7
c0006a8a:	e8 00 91 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 e8 d5 01 c0       	push   0xc001d5e8
c0006aae:	e8 dc 90 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006ab3:	e8 b2 95 00 00       	call   c001006a <Krnl::loadSystemEnv()>
c0006ab8:	e8 0f 98 00 00       	call   c00102cc <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 11 d5 01 c0       	push   0xc001d511
c0006ac7:	68 1a d5 01 c0       	push   0xc001d51a
c0006acc:	e8 79 ae 00 00       	call   c001194a <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 5b 49 00 00       	call   c000b434 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 0c d6 01 c0 	mov    DWORD PTR [esp],0xc001d60c
c0006ae0:	e8 aa 90 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 e9 4f 00 00       	call   c000bae0 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 22 d5 01 c0 	mov    DWORD PTR [esp],0xc001d522
c0006afe:	e8 8c 90 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 33 d5 01 c0       	push   0xc001d533
c0006b12:	e8 ba c2 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 e2 c4 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 cb ce 00 00       	call   c00139f8 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 4f d5 01 c0       	push   0xc001d54f
c0006b41:	50                   	push   eax
c0006b42:	e8 15 50 00 00       	call   c000bb5c <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 58 d6 01 c0       	mov    edx,0xc001d658
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 f5 51 01 00       	call   c001be26 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 50 84 00 00       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 29 84 00 00       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 07 84 00 00       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 e5 83 00 00       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 f3 82 00 00       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 ce 82 00 00       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 5f 50 01 00       	call   c001bde0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 5c 4d 01 00       	call   c001bb00 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 ea 82 00 00       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 58 d5 01 c0       	push   0xc001d558
c0006e14:	e8 ee 93 00 00       	call   c0010207 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 5e d5 01 c0       	push   0xc001d55e
c0006e4c:	e8 b6 93 00 00       	call   c0010207 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 9b 7c 00 00       	jmp    c000eb34 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 64 d5 01 c0       	push   0xc001d564
c0006eed:	0f 94 05 00 f8 01 c0 	sete   BYTE PTR ds:0xc001f800
c0006ef4:	e8 96 8c 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 bd 77 00 00       	call   c000e6cc <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 a6 4a 00 00       	call   c000b9c4 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 7c d5 01 c0 	mov    DWORD PTR [esp],0xc001d57c
c0006f37:	e8 53 8c 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 22 82 00 00       	call   c000f174 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 63 4a 00 00       	call   c000b9c4 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 2c d6 01 c0       	push   0xc001d62c
c0006f7e:	e8 0c 8c 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006f83:	e8 be e5 00 00       	call   c0015546 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 96 d5 01 c0 	mov    DWORD PTR [esp],0xc001d596
c0006f8f:	e8 fb 8b 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 54 c7 00 00       	call   c00136f4 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 96 35 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 c2 d5 01 c0       	push   0xc001d5c2
c000700e:	e8 f4 91 00 00       	call   c0010207 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 cf d5 01 c0       	push   0xc001d5cf
c0007023:	e8 df 91 00 00       	call   c0010207 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 d9 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d5d9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 c8 91 00 00       	jmp    c0010207 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 fb df 00 00       	call   c0015220 <HalSystemIdle()>
c0007225:	e8 b8 51 01 00       	call   c001c3e2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 90 bb 01 c0       	push   0xc001bb90
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 a0 bb 01 c0       	push   0xc001bba0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 aa bb 01 c0       	push   0xc001bbaa
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 b4 bb 01 c0       	push   0xc001bbb4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 be bb 01 c0       	push   0xc001bbbe
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 c8 bb 01 c0       	push   0xc001bbc8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 d2 bb 01 c0       	push   0xc001bbd2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 dc bb 01 c0       	push   0xc001bbdc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 e6 bb 01 c0       	push   0xc001bbe6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 ee bb 01 c0       	push   0xc001bbee
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 f8 bb 01 c0       	push   0xc001bbf8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 00 bc 01 c0       	push   0xc001bc00
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 08 bc 01 c0       	push   0xc001bc08
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 10 bc 01 c0       	push   0xc001bc10
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 18 bc 01 c0       	push   0xc001bc18
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 20 bc 01 c0       	push   0xc001bc20
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 2a bc 01 c0       	push   0xc001bc2a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 34 bc 01 c0       	push   0xc001bc34
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 3e bc 01 c0       	push   0xc001bc3e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 d8 bc 01 c0       	push   0xc001bcd8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 df bc 01 c0       	push   0xc001bcdf
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ca bc 01 c0       	push   0xc001bcca
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 d1 bc 01 c0       	push   0xc001bcd1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 48 bc 01 c0       	push   0xc001bc48
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 52 bc 01 c0       	push   0xc001bc52
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 5c bc 01 c0       	push   0xc001bc5c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 66 bc 01 c0       	push   0xc001bc66
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 70 bc 01 c0       	push   0xc001bc70
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 7a bc 01 c0       	push   0xc001bc7a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 84 bc 01 c0       	push   0xc001bc84
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 8e bc 01 c0       	push   0xc001bc8e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 98 bc 01 c0       	push   0xc001bc98
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 a2 bc 01 c0       	push   0xc001bca2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 ac bc 01 c0       	push   0xc001bcac
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 b6 bc 01 c0       	push   0xc001bcb6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 c0 bc 01 c0       	push   0xc001bcc0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 71 bd 01 c0       	push   0xc001bd71
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 7b bd 01 c0       	push   0xc001bd7b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 85 bd 01 c0       	push   0xc001bd85
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 8f bd 01 c0       	push   0xc001bd8f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 99 bd 01 c0       	push   0xc001bd99
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 a3 bd 01 c0       	push   0xc001bda3
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 ad bd 01 c0       	push   0xc001bdad
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 b7 bd 01 c0       	push   0xc001bdb7
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 e6 bb 01 c0       	push   0xc001bbe6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 e8 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7e8
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d e8 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7e8
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 e8 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f7e8,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 e8 f7 01 c0       	mov    eax,ds:0xc001f7e8
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 7c d6 01 c0       	push   0xc001d67c
c000770e:	e8 74 2e 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 ac d6 01 c0       	push   0xc001d6ac
c000772d:	e8 d5 8a 00 00       	call   c0010207 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 b1 d6 01 c0       	push   0xc001d6b1
c0007743:	e8 bf 8a 00 00       	call   c0010207 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 b8 d6 01 c0       	push   0xc001d6b8
c0007862:	e8 20 2d 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 b5 82 00 00       	call   c000fb21 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 dc 4a 01 00       	call   c001c37a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 d0 d6 01 c0       	push   0xc001d6d0
c000792c:	e8 d6 88 00 00       	call   c0010207 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 d0 d6 01 c0       	push   0xc001d6d0
c0007993:	e8 6f 88 00 00       	call   c0010207 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 ec f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7ec
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 ec f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7ec
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 ec f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7ec
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 75 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d775
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 84 87 00 00       	jmp    c0010207 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 5e 27 00 00       	call   c000a24e <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 f8 d6 01 c0       	push   0xc001d6f8
c0007aff:	e8 03 87 00 00       	call   c0010207 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 8b d7 01 c0       	push   0xc001d78b
c0007c18:	e8 6a 29 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 28 d7 01 c0       	push   0xc001d728
c0007ca4:	e8 de 28 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 4c d7 01 c0       	push   0xc001d74c
c0007d40:	e8 42 28 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 b1 d7 01 c0       	push   0xc001d7b1
c0007d76:	e8 0c 28 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 a3 d7 01 c0       	push   0xc001d7a3
c0007de5:	e8 1d 84 00 00       	call   c0010207 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 10 d8 01 c0       	mov    edx,0xc001d810
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 97 25 00 00       	call   c000a491 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 cd d7 01 c0       	push   0xc001d7cd
c0007fa7:	e8 5b 82 00 00       	call   c0010207 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 07 b8 00 00       	call   c00137fc <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 d3 41 01 00       	call   c001c260 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 ea d7 01 c0       	push   0xc001d7ea
c00080a2:	e8 60 81 00 00       	call   c0010207 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 10 d8 01 c0       	mov    edx,0xc001d810
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba a4 d8 01 c0       	mov    edx,0xc001d8a4
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 20 23 00 00       	call   c000a491 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 58 46 00 00       	call   c000c7e4 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 26 e2 00 00       	call   c00163d8 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 20 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07e0]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 20 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07e0]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 d8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0928]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 b0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0950]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 49 df 00 00       	call   c0016264 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 a4 df 00 00       	jmp    c001636c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 24 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d824
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 f3 7d 00 00       	jmp    c0010207 <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 6c 2e 00 00       	jmp    c000b3db <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 32 d8 01 c0       	mov    esi,0xc001d832
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 b6 da 00 00       	call   c001636c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba a4 d8 01 c0       	mov    edx,0xc001d8a4
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 43 d8 01 c0       	push   0xc001d843
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 49 d8 01 c0       	push   0xc001d849
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 4f d8 01 c0       	push   0xc001d84f
c0008b78:	e8 8a 76 00 00       	call   c0010207 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba 6c d9 01 c0       	mov    edx,0xc001d96c
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 60 f8 01 c0       	mov    eax,ds:0xc001f860
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 60 f8 01 c0    	mov    DWORD PTR ds:0xc001f860,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 c3 35 01 00       	call   c001c448 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba 88 d9 01 c0       	mov    edx,0xc001d988
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba 6c d9 01 c0       	mov    edx,0xc001d96c
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 c7 34 01 00       	call   c001c51c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 bb 34 01 00       	call   c001c524 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 c1 33 01 00       	call   c001c448 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 44 d9 01 c0       	push   0xc001d944
c00090a9:	e8 59 71 00 00       	call   c0010207 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 b5 13 00 00       	call   c000a491 <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba 88 d9 01 c0       	mov    edx,0xc001d988
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 69 13 00 00       	call   c000a491 <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 ca 33 01 00       	call   c001c51c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 57 34 01 00       	call   c001c5c6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 15 32 01 00       	call   c001c406 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 e4 f7 01 c0       	push   0xc001f7e4
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 04 c4 01 c0       	push   0xc001c404
c0009206:	e8 36 12 00 00       	call   c000a441 <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 68 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f868
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d 68 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f868
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d 64 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f864
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 64 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f864,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 9c d9 01 c0       	push   0xc001d99c
c00092ff:	e8 03 6f 00 00       	call   c0010207 <KePanic(char const*)>
c0009304:	8b 3d 64 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f864
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 64 f8 01 c0       	mov    eax,ds:0xc001f864
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 64 f8 01 c0    	mov    DWORD PTR ds:0xc001f864,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 64 f8 01 c0       	mov    ds:0xc001f864,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 6c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f86c
c00093bf:	03 05 74 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f874
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d 6c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f86c
c00093d5:	a1 70 f8 01 c0       	mov    eax,ds:0xc001f870
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d 70 f8 01 c0    	cmp    DWORD PTR ds:0xc001f870,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 2d db 01 c0       	push   0xc001db2d
c0009419:	e8 e9 6d 00 00       	call   c0010207 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 44 db 01 c0       	push   0xc001db44
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d 70 f8 01 c0    	mov    DWORD PTR ds:0xc001f870,ebx
c00094b7:	c6 05 78 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f878,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 74 f8 01 c0       	mov    ds:0xc001f874,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 6c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f86c,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 70 f8 01 c0       	mov    eax,ds:0xc001f870
c00094e9:	f7 35 6c f8 01 c0    	div    DWORD PTR ds:0xc001f86c
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 bc d9 01 c0       	push   0xc001d9bc
c0009521:	e8 e1 6c 00 00       	call   c0010207 <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 5b db 01 c0       	push   0xc001db5b
c00095e8:	e8 1a 6c 00 00       	call   c0010207 <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 e0 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d9e0
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 c6 6b 00 00       	jmp    c0010207 <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 77 db 01 c0       	push   0xc001db77
c000964f:	e8 b3 6b 00 00       	call   c0010207 <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 93 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db93
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 6a 6b 00 00       	jmp    c0010207 <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 04 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da04
c00096bd:	e9 c5 0e 00 00       	jmp    c000a587 <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 ad db 01 c0       	push   0xc001dbad
c000971e:	e8 64 0e 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 28 da 01 c0       	push   0xc001da28
c0009969:	e8 19 0c 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 90 da 01 c0       	push   0xc001da90
c0009986:	e8 7c 68 00 00       	call   c0010207 <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 b4 da 01 c0       	push   0xc001dab4
c0009ae1:	e8 21 67 00 00       	call   c0010207 <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 e0 da 01 c0       	push   0xc001dae0
c0009da4:	e8 5e 64 00 00       	call   c0010207 <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 28             	sub    esp,0x28
c0009e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e98:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ec6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 68 1c 00 00       	call   c000bc58 <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 c7 db 01 c0       	push   0xc001dbc7
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	90                   	nop
c000a099:	83 c4 28             	add    esp,0x28
c000a09c:	5b                   	pop    ebx
c000a09d:	c3                   	ret    

c000a09e <VAS::evict(unsigned long)>:
c000a09e:	55                   	push   ebp
c000a09f:	57                   	push   edi
c000a0a0:	56                   	push   esi
c000a0a1:	53                   	push   ebx
c000a0a2:	83 ec 1c             	sub    esp,0x1c
c000a0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0b1:	e8 10 f3 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a0b6:	8b 0d 6c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f86c
c000a0bc:	89 c7                	mov    edi,eax
c000a0be:	85 c9                	test   ecx,ecx
c000a0c0:	7e 3e                	jle    c000a100 <VAS::evict(unsigned long)+0x62>
c000a0c2:	89 ee                	mov    esi,ebp
c000a0c4:	31 db                	xor    ebx,ebx
c000a0c6:	83 ec 0c             	sub    esp,0xc
c000a0c9:	57                   	push   edi
c000a0ca:	e8 e5 f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a0cf:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0d2:	01 d8                	add    eax,ebx
c000a0d4:	6a 01                	push   0x1
c000a0d6:	31 d2                	xor    edx,edx
c000a0d8:	43                   	inc    ebx
c000a0d9:	52                   	push   edx
c000a0da:	81 c6 00 02 00 00    	add    esi,0x200
c000a0e0:	50                   	push   eax
c000a0e1:	0f be 05 78 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f878
c000a0e8:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0ef:	52                   	push   edx
c000a0f0:	e8 23 2c 00 00       	call   c000cd18 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0f5:	83 c4 20             	add    esp,0x20
c000a0f8:	39 1d 6c f8 01 c0    	cmp    DWORD PTR ds:0xc001f86c,ebx
c000a0fe:	7f c6                	jg     c000a0c6 <VAS::evict(unsigned long)+0x28>
c000a100:	83 ec 08             	sub    esp,0x8
c000a103:	c1 e7 0b             	shl    edi,0xb
c000a106:	55                   	push   ebp
c000a107:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a10b:	50                   	push   eax
c000a10c:	e8 49 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a111:	8b 10                	mov    edx,DWORD PTR [eax]
c000a113:	89 d1                	mov    ecx,edx
c000a115:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a11b:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a121:	09 cf                	or     edi,ecx
c000a123:	89 38                	mov    DWORD PTR [eax],edi
c000a125:	89 14 24             	mov    DWORD PTR [esp],edx
c000a128:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a12e:	e8 00 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a133:	0f 20 d8             	mov    eax,cr3
c000a136:	0f 22 d8             	mov    cr3,eax
c000a139:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a13e:	c7 44 24 40 d5 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dbd5
c000a146:	8d 50 01             	lea    edx,[eax+0x1]
c000a149:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a14d:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a153:	83 c4 2c             	add    esp,0x2c
c000a156:	5b                   	pop    ebx
c000a157:	5e                   	pop    esi
c000a158:	5f                   	pop    edi
c000a159:	5d                   	pop    ebp
c000a15a:	e9 28 04 00 00       	jmp    c000a587 <Dbg::kprintf(char const*, ...)>
c000a15f:	90                   	nop

c000a160 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a160:	55                   	push   ebp
c000a161:	57                   	push   edi
c000a162:	56                   	push   esi
c000a163:	53                   	push   ebx
c000a164:	83 ec 14             	sub    esp,0x14
c000a167:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a16b:	53                   	push   ebx
c000a16c:	68 e6 db 01 c0       	push   0xc001dbe6
c000a171:	e8 11 04 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a176:	83 c4 10             	add    esp,0x10
c000a179:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a17f:	74 21                	je     c000a1a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a181:	83 ec 08             	sub    esp,0x8
c000a184:	53                   	push   ebx
c000a185:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a189:	57                   	push   edi
c000a18a:	e8 cb f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a18f:	83 c4 10             	add    esp,0x10
c000a192:	89 c6                	mov    esi,eax
c000a194:	85 c0                	test   eax,eax
c000a196:	74 0a                	je     c000a1a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a198:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a19a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a1a0:	74 0a                	je     c000a1ac <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a1a2:	31 c0                	xor    eax,eax
c000a1a4:	83 c4 0c             	add    esp,0xc
c000a1a7:	5b                   	pop    ebx
c000a1a8:	5e                   	pop    esi
c000a1a9:	5f                   	pop    edi
c000a1aa:	5d                   	pop    ebp
c000a1ab:	c3                   	ret    
c000a1ac:	e8 e4 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a1b1:	c1 ed 0b             	shr    ebp,0xb
c000a1b4:	8b 16                	mov    edx,DWORD PTR [esi]
c000a1b6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a1bc:	09 c2                	or     edx,eax
c000a1be:	81 ca 01 08 00 00    	or     edx,0x801
c000a1c4:	89 16                	mov    DWORD PTR [esi],edx
c000a1c6:	8b 35 6c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f86c
c000a1cc:	85 f6                	test   esi,esi
c000a1ce:	7e 3e                	jle    c000a20e <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1d0:	89 df                	mov    edi,ebx
c000a1d2:	31 f6                	xor    esi,esi
c000a1d4:	83 ec 0c             	sub    esp,0xc
c000a1d7:	55                   	push   ebp
c000a1d8:	e8 d7 f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a1dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1e0:	01 f0                	add    eax,esi
c000a1e2:	6a 01                	push   0x1
c000a1e4:	31 d2                	xor    edx,edx
c000a1e6:	46                   	inc    esi
c000a1e7:	52                   	push   edx
c000a1e8:	81 c7 00 02 00 00    	add    edi,0x200
c000a1ee:	50                   	push   eax
c000a1ef:	0f be 05 78 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f878
c000a1f6:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1fd:	51                   	push   ecx
c000a1fe:	e8 a9 2a 00 00       	call   c000ccac <LogicalDisk::read(unsigned long long, int, void*)>
c000a203:	83 c4 20             	add    esp,0x20
c000a206:	39 35 6c f8 01 c0    	cmp    DWORD PTR ds:0xc001f86c,esi
c000a20c:	7f c6                	jg     c000a1d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a20e:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a213:	48                   	dec    eax
c000a214:	52                   	push   edx
c000a215:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a21a:	50                   	push   eax
c000a21b:	53                   	push   ebx
c000a21c:	68 f9 db 01 c0       	push   0xc001dbf9
c000a221:	e8 61 03 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a226:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a229:	e8 68 f1 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a22e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	48                   	dec    eax
c000a237:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a23c:	85 c0                	test   eax,eax
c000a23e:	75 01                	jne    c000a241 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a240:	fb                   	sti    
c000a241:	0f 20 d8             	mov    eax,cr3
c000a244:	0f 22 d8             	mov    cr3,eax
c000a247:	b0 01                	mov    al,0x1
c000a249:	e9 56 ff ff ff       	jmp    c000a1a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a24e <VAS::scanForEviction()>:
c000a24e:	57                   	push   edi
c000a24f:	31 ff                	xor    edi,edi
c000a251:	56                   	push   esi
c000a252:	53                   	push   ebx
c000a253:	83 ec 10             	sub    esp,0x10
c000a256:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a25a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a25d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a263:	75 0e                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a265:	89 da                	mov    edx,ebx
c000a267:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a26a:	c1 ea 16             	shr    edx,0x16
c000a26d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a271:	74 4e                	je     c000a2c1 <VAS::scanForEviction()+0x73>
c000a273:	53                   	push   ebx
c000a274:	56                   	push   esi
c000a275:	e8 e0 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a27a:	5a                   	pop    edx
c000a27b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a27d:	59                   	pop    ecx
c000a27e:	89 d1                	mov    ecx,edx
c000a280:	81 e1 01 08 00 00    	and    ecx,0x801
c000a286:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a28c:	74 3e                	je     c000a2cc <VAS::scanForEviction()+0x7e>
c000a28e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a294:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a29a:	76 2b                	jbe    c000a2c7 <VAS::scanForEviction()+0x79>
c000a29c:	47                   	inc    edi
c000a29d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a2a4:	83 ff 03             	cmp    edi,0x3
c000a2a7:	74 32                	je     c000a2db <VAS::scanForEviction()+0x8d>
c000a2a9:	31 db                	xor    ebx,ebx
c000a2ab:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2b1:	75 c0                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a2b3:	89 da                	mov    edx,ebx
c000a2b5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2b8:	c1 ea 16             	shr    edx,0x16
c000a2bb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2bf:	75 b2                	jne    c000a273 <VAS::scanForEviction()+0x25>
c000a2c1:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2c7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2ca:	eb 91                	jmp    c000a25d <VAS::scanForEviction()+0xf>
c000a2cc:	f6 c2 20             	test   dl,0x20
c000a2cf:	74 13                	je     c000a2e4 <VAS::scanForEviction()+0x96>
c000a2d1:	83 e2 df             	and    edx,0xffffffdf
c000a2d4:	89 10                	mov    DWORD PTR [eax],edx
c000a2d6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2d9:	eb b3                	jmp    c000a28e <VAS::scanForEviction()+0x40>
c000a2db:	83 c4 10             	add    esp,0x10
c000a2de:	31 c0                	xor    eax,eax
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	5f                   	pop    edi
c000a2e3:	c3                   	ret    
c000a2e4:	83 ec 08             	sub    esp,0x8
c000a2e7:	89 d0                	mov    eax,edx
c000a2e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f2:	53                   	push   ebx
c000a2f3:	68 0e dc 01 c0       	push   0xc001dc0e
c000a2f8:	e8 8a 02 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a2fd:	58                   	pop    eax
c000a2fe:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a301:	5a                   	pop    edx
c000a302:	51                   	push   ecx
c000a303:	56                   	push   esi
c000a304:	e8 95 fd ff ff       	call   c000a09e <VAS::evict(unsigned long)>
c000a309:	5b                   	pop    ebx
c000a30a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a30d:	5f                   	pop    edi
c000a30e:	50                   	push   eax
c000a30f:	68 22 dc 01 c0       	push   0xc001dc22
c000a314:	e8 6e 02 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a319:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a320:	83 c4 10             	add    esp,0x10
c000a323:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a327:	83 c4 10             	add    esp,0x10
c000a32a:	5b                   	pop    ebx
c000a32b:	5e                   	pop    esi
c000a32c:	5f                   	pop    edi
c000a32d:	c3                   	ret    

c000a32e <mapVASFirstTime>:
c000a32e:	55                   	push   ebp
c000a32f:	57                   	push   edi
c000a330:	56                   	push   esi
c000a331:	53                   	push   ebx
c000a332:	83 ec 0c             	sub    esp,0xc
c000a335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a33a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a33d:	4a                   	dec    edx
c000a33e:	0f 84 e5 00 00 00    	je     c000a429 <mapVASFirstTime+0xfb>
c000a344:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a347:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a34a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a34f:	c1 e5 15             	shl    ebp,0x15
c000a352:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a357:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a35d:	29 eb                	sub    ebx,ebp
c000a35f:	29 ef                	sub    edi,ebp
c000a361:	e8 2f d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a366:	83 ec 0c             	sub    esp,0xc
c000a369:	68 03 04 00 00       	push   0x403
c000a36e:	6a 01                	push   0x1
c000a370:	53                   	push   ebx
c000a371:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a377:	50                   	push   eax
c000a378:	56                   	push   esi
c000a379:	e8 74 f8 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a37e:	83 c4 20             	add    esp,0x20
c000a381:	39 fb                	cmp    ebx,edi
c000a383:	75 dc                	jne    c000a361 <mapVASFirstTime+0x33>
c000a385:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a38a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a38f:	29 eb                	sub    ebx,ebp
c000a391:	29 ef                	sub    edi,ebp
c000a393:	e8 fd d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a398:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a39c:	19 d2                	sbb    edx,edx
c000a39e:	83 ec 0c             	sub    esp,0xc
c000a3a1:	83 e2 04             	and    edx,0x4
c000a3a4:	81 c2 03 04 00 00    	add    edx,0x403
c000a3aa:	52                   	push   edx
c000a3ab:	6a 01                	push   0x1
c000a3ad:	53                   	push   ebx
c000a3ae:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a3b4:	50                   	push   eax
c000a3b5:	56                   	push   esi
c000a3b6:	e8 37 f8 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3bb:	83 c4 20             	add    esp,0x20
c000a3be:	39 df                	cmp    edi,ebx
c000a3c0:	75 d1                	jne    c000a393 <mapVASFirstTime+0x65>
c000a3c2:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a3c7:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a3cd:	c1 eb 0c             	shr    ebx,0xc
c000a3d0:	53                   	push   ebx
c000a3d1:	68 7d 00 02 c0       	push   0xc002007d
c000a3d6:	68 00 00 02 c0       	push   0xc0020000
c000a3db:	68 04 db 01 c0       	push   0xc001db04
c000a3e0:	e8 a2 01 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a3e5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000a3ec:	53                   	push   ebx
c000a3ed:	68 00 00 02 c0       	push   0xc0020000
c000a3f2:	68 00 00 02 c0       	push   0xc0020000
c000a3f7:	56                   	push   esi
c000a3f8:	e8 f5 f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3fd:	83 c4 14             	add    esp,0x14
c000a400:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a405:	6a 07                	push   0x7
c000a407:	53                   	push   ebx
c000a408:	68 00 00 02 c0       	push   0xc0020000
c000a40d:	68 00 00 02 c0       	push   0xc0020000
c000a412:	50                   	push   eax
c000a413:	e8 da f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a418:	0f 20 d8             	mov    eax,cr3
c000a41b:	0f 22 d8             	mov    cr3,eax
c000a41e:	83 c4 20             	add    esp,0x20
c000a421:	83 c4 0c             	add    esp,0xc
c000a424:	5b                   	pop    ebx
c000a425:	5e                   	pop    esi
c000a426:	5f                   	pop    edi
c000a427:	5d                   	pop    ebp
c000a428:	c3                   	ret    
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	68 35 dc 01 c0       	push   0xc001dc35
c000a431:	e8 51 01 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a436:	83 c4 10             	add    esp,0x10
c000a439:	83 c4 0c             	add    esp,0xc
c000a43c:	5b                   	pop    ebx
c000a43d:	5e                   	pop    esi
c000a43e:	5f                   	pop    edi
c000a43f:	5d                   	pop    ebp
c000a440:	c3                   	ret    

c000a441 <__cxa_atexit>:
c000a441:	31 c0                	xor    eax,eax
c000a443:	c3                   	ret    

c000a444 <__cxa_finalize>:
c000a444:	c3                   	ret    

c000a445 <__stack_chk_fail>:
c000a445:	55                   	push   ebp
c000a446:	89 e5                	mov    ebp,esp
c000a448:	83 ec 10             	sub    esp,0x10
c000a44b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a44e:	68 4e dc 01 c0       	push   0xc001dc4e
c000a453:	e8 2f 01 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a458:	58                   	pop    eax
c000a459:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a45c:	5a                   	pop    edx
c000a45d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a460:	68 4e dc 01 c0       	push   0xc001dc4e
c000a465:	e8 1d 01 00 00       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000a46a:	c7 04 24 56 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc56
c000a471:	e8 91 5d 00 00       	call   c0010207 <KePanic(char const*)>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	c9                   	leave  
c000a47a:	c3                   	ret    

c000a47b <__cxa_pure_virtual>:
c000a47b:	83 ec 18             	sub    esp,0x18
c000a47e:	68 6e dc 01 c0       	push   0xc001dc6e
c000a483:	e8 7f 5d 00 00       	call   c0010207 <KePanic(char const*)>
c000a488:	83 c4 1c             	add    esp,0x1c
c000a48b:	c3                   	ret    

c000a48c <operator new[](unsigned long)>:
c000a48c:	e9 28 d3 ff ff       	jmp    c00077b9 <malloc>

c000a491 <operator delete(void*, unsigned long)>:
c000a491:	e9 43 d3 ff ff       	jmp    c00077d9 <rfree>

c000a496 <operator delete[](void*)>:
c000a496:	e9 3e d3 ff ff       	jmp    c00077d9 <rfree>

c000a49b <operator delete[](void*, unsigned long)>:
c000a49b:	e9 39 d3 ff ff       	jmp    c00077d9 <rfree>

c000a4a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a4a0:	55                   	push   ebp
c000a4a1:	b9 04 00 00 00       	mov    ecx,0x4
c000a4a6:	57                   	push   edi
c000a4a7:	56                   	push   esi
c000a4a8:	be 33 d8 01 c0       	mov    esi,0xc001d833
c000a4ad:	53                   	push   ebx
c000a4ae:	83 ec 20             	sub    esp,0x20
c000a4b1:	a1 32 d8 01 c0       	mov    eax,ds:0xc001d832
c000a4b6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a4ba:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a4be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4c2:	a1 3f d8 01 c0       	mov    eax,ds:0xc001d83f
c000a4c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4cf:	fc                   	cld    
c000a4d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a4d2:	89 ee                	mov    esi,ebp
c000a4d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a4d8:	eb 02                	jmp    c000a4dc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a4da:	89 c6                	mov    esi,eax
c000a4dc:	31 d2                	xor    edx,edx
c000a4de:	41                   	inc    ecx
c000a4df:	89 f0                	mov    eax,esi
c000a4e1:	f7 f3                	div    ebx
c000a4e3:	39 de                	cmp    esi,ebx
c000a4e5:	73 f3                	jae    c000a4da <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4e7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4ea:	eb 02                	jmp    c000a4ee <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4ec:	89 c5                	mov    ebp,eax
c000a4ee:	31 d2                	xor    edx,edx
c000a4f0:	49                   	dec    ecx
c000a4f1:	89 e8                	mov    eax,ebp
c000a4f3:	f7 f3                	div    ebx
c000a4f5:	39 dd                	cmp    ebp,ebx
c000a4f7:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4fb:	88 11                	mov    BYTE PTR [ecx],dl
c000a4fd:	73 ed                	jae    c000a4ec <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a503:	83 c4 20             	add    esp,0x20
c000a506:	5b                   	pop    ebx
c000a507:	5e                   	pop    esi
c000a508:	5f                   	pop    edi
c000a509:	5d                   	pop    ebp
c000a50a:	c3                   	ret    

c000a50b <Dbg::logc(char)>:
c000a50b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a50f:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a516:	75 12                	jne    c000a52a <Dbg::logc(char)+0x1f>
c000a518:	ba fd 03 00 00       	mov    edx,0x3fd
c000a51d:	ec                   	in     al,dx
c000a51e:	a8 20                	test   al,0x20
c000a520:	74 fb                	je     c000a51d <Dbg::logc(char)+0x12>
c000a522:	ba f8 03 00 00       	mov    edx,0x3f8
c000a527:	88 c8                	mov    al,cl
c000a529:	ee                   	out    dx,al
c000a52a:	c3                   	ret    

c000a52b <Dbg::logs(char*)>:
c000a52b:	53                   	push   ebx
c000a52c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a530:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a533:	84 c0                	test   al,al
c000a535:	74 0f                	je     c000a546 <Dbg::logs(char*)+0x1b>
c000a537:	50                   	push   eax
c000a538:	43                   	inc    ebx
c000a539:	e8 cd ff ff ff       	call   c000a50b <Dbg::logc(char)>
c000a53e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a541:	5a                   	pop    edx
c000a542:	84 c0                	test   al,al
c000a544:	75 f1                	jne    c000a537 <Dbg::logs(char*)+0xc>
c000a546:	5b                   	pop    ebx
c000a547:	c3                   	ret    

c000a548 <Dbg::logWriteInt(unsigned int)>:
c000a548:	83 ec 10             	sub    esp,0x10
c000a54b:	6a 0a                	push   0xa
c000a54d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a551:	50                   	push   eax
c000a552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a556:	50                   	push   eax
c000a557:	e8 44 ff ff ff       	call   c000a4a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a55c:	50                   	push   eax
c000a55d:	e8 c9 ff ff ff       	call   c000a52b <Dbg::logs(char*)>
c000a562:	83 c4 20             	add    esp,0x20
c000a565:	c3                   	ret    

c000a566 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a566:	83 ec 10             	sub    esp,0x10
c000a569:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a56d:	50                   	push   eax
c000a56e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a572:	50                   	push   eax
c000a573:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a577:	52                   	push   edx
c000a578:	e8 23 ff ff ff       	call   c000a4a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a57d:	50                   	push   eax
c000a57e:	e8 a8 ff ff ff       	call   c000a52b <Dbg::logs(char*)>
c000a583:	83 c4 20             	add    esp,0x20
c000a586:	c3                   	ret    

c000a587 <Dbg::kprintf(char const*, ...)>:
c000a587:	55                   	push   ebp
c000a588:	57                   	push   edi
c000a589:	56                   	push   esi
c000a58a:	53                   	push   ebx
c000a58b:	83 ec 0c             	sub    esp,0xc
c000a58e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a592:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a599:	74 08                	je     c000a5a3 <Dbg::kprintf(char const*, ...)+0x1c>
c000a59b:	83 c4 0c             	add    esp,0xc
c000a59e:	5b                   	pop    ebx
c000a59f:	5e                   	pop    esi
c000a5a0:	5f                   	pop    edi
c000a5a1:	5d                   	pop    ebp
c000a5a2:	c3                   	ret    
c000a5a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a5a7:	31 ff                	xor    edi,edi
c000a5a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a5ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b0:	84 c0                	test   al,al
c000a5b2:	74 e7                	je     c000a59b <Dbg::kprintf(char const*, ...)+0x14>
c000a5b4:	8d 77 01             	lea    esi,[edi+0x1]
c000a5b7:	3c 25                	cmp    al,0x25
c000a5b9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5bc:	75 47                	jne    c000a605 <Dbg::kprintf(char const*, ...)+0x7e>
c000a5be:	83 c7 02             	add    edi,0x2
c000a5c1:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a5c4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a5c7:	83 e8 25             	sub    eax,0x25
c000a5ca:	3c 53                	cmp    al,0x53
c000a5cc:	0f 87 d2 00 00 00    	ja     c000a6a4 <Dbg::kprintf(char const*, ...)+0x11d>
c000a5d2:	25 ff 00 00 00       	and    eax,0xff
c000a5d7:	ff 24 85 84 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe237c]
c000a5de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5e2:	89 c8                	mov    eax,ecx
c000a5e4:	83 c1 04             	add    ecx,0x4
c000a5e7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5eb:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5ed:	55                   	push   ebp
c000a5ee:	e8 55 ff ff ff       	call   c000a548 <Dbg::logWriteInt(unsigned int)>
c000a5f3:	58                   	pop    eax
c000a5f4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5f7:	84 c0                	test   al,al
c000a5f9:	74 a0                	je     c000a59b <Dbg::kprintf(char const*, ...)+0x14>
c000a5fb:	8d 77 01             	lea    esi,[edi+0x1]
c000a5fe:	3c 25                	cmp    al,0x25
c000a600:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a603:	74 b9                	je     c000a5be <Dbg::kprintf(char const*, ...)+0x37>
c000a605:	50                   	push   eax
c000a606:	89 f7                	mov    edi,esi
c000a608:	e8 fe fe ff ff       	call   c000a50b <Dbg::logc(char)>
c000a60d:	89 ee                	mov    esi,ebp
c000a60f:	58                   	pop    eax
c000a610:	eb e2                	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a612:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a616:	89 c8                	mov    eax,ecx
c000a618:	83 c1 04             	add    ecx,0x4
c000a61b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a61d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a621:	50                   	push   eax
c000a622:	e8 04 ff ff ff       	call   c000a52b <Dbg::logs(char*)>
c000a627:	58                   	pop    eax
c000a628:	eb ca                	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a62a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a62e:	89 d0                	mov    eax,edx
c000a630:	83 c2 04             	add    edx,0x4
c000a633:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a637:	8b 00                	mov    eax,DWORD PTR [eax]
c000a639:	50                   	push   eax
c000a63a:	e8 09 ff ff ff       	call   c000a548 <Dbg::logWriteInt(unsigned int)>
c000a63f:	58                   	pop    eax
c000a640:	eb b2                	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a642:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a646:	89 d0                	mov    eax,edx
c000a648:	83 c2 04             	add    edx,0x4
c000a64b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a64e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a652:	50                   	push   eax
c000a653:	e8 b3 fe ff ff       	call   c000a50b <Dbg::logc(char)>
c000a658:	58                   	pop    eax
c000a659:	eb 99                	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a65b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a65f:	89 c8                	mov    eax,ecx
c000a661:	83 c1 04             	add    ecx,0x4
c000a664:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a668:	6a 10                	push   0x10
c000a66a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a66c:	51                   	push   ecx
c000a66d:	e8 f4 fe ff ff       	call   c000a566 <Dbg::logWriteIntBase(unsigned int, int)>
c000a672:	5d                   	pop    ebp
c000a673:	58                   	pop    eax
c000a674:	e9 7b ff ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a679:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a67d:	89 d0                	mov    eax,edx
c000a67f:	83 c2 08             	add    edx,0x8
c000a682:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a686:	6a 10                	push   0x10
c000a688:	8b 00                	mov    eax,DWORD PTR [eax]
c000a68a:	50                   	push   eax
c000a68b:	e8 d6 fe ff ff       	call   c000a566 <Dbg::logWriteIntBase(unsigned int, int)>
c000a690:	58                   	pop    eax
c000a691:	5a                   	pop    edx
c000a692:	e9 5d ff ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a697:	6a 25                	push   0x25
c000a699:	e8 6d fe ff ff       	call   c000a50b <Dbg::logc(char)>
c000a69e:	5a                   	pop    edx
c000a69f:	e9 50 ff ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6a4:	6a 25                	push   0x25
c000a6a6:	e8 60 fe ff ff       	call   c000a50b <Dbg::logc(char)>
c000a6ab:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a6af:	50                   	push   eax
c000a6b0:	e8 56 fe ff ff       	call   c000a50b <Dbg::logc(char)>
c000a6b5:	5a                   	pop    edx
c000a6b6:	59                   	pop    ecx
c000a6b7:	e9 38 ff ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)+0x6d>

c000a6bc <File::read(unsigned long long, void*, int*)>:
c000a6bc:	53                   	push   ebx
c000a6bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6cc:	3c 19                	cmp    al,0x19
c000a6ce:	77 35                	ja     c000a705 <File::read(unsigned long long, void*, int*)+0x49>
c000a6d0:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6d7:	85 c0                	test   eax,eax
c000a6d9:	74 2a                	je     c000a705 <File::read(unsigned long long, void*, int*)+0x49>
c000a6db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6e1:	85 c0                	test   eax,eax
c000a6e3:	74 20                	je     c000a705 <File::read(unsigned long long, void*, int*)+0x49>
c000a6e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6e9:	74 21                	je     c000a70c <File::read(unsigned long long, void*, int*)+0x50>
c000a6eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6ff:	5b                   	pop    ebx
c000a700:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a703:	ff e0                	jmp    eax
c000a705:	b8 0b 00 00 00       	mov    eax,0xb
c000a70a:	eb 05                	jmp    c000a711 <File::read(unsigned long long, void*, int*)+0x55>
c000a70c:	b8 05 00 00 00       	mov    eax,0x5
c000a711:	5b                   	pop    ebx
c000a712:	c3                   	ret    
c000a713:	90                   	nop

c000a714 <File::write(unsigned long long, void*, int*)>:
c000a714:	53                   	push   ebx
c000a715:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a719:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a71d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a724:	3c 19                	cmp    al,0x19
c000a726:	77 35                	ja     c000a75d <File::write(unsigned long long, void*, int*)+0x49>
c000a728:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a72f:	85 c0                	test   eax,eax
c000a731:	74 2a                	je     c000a75d <File::write(unsigned long long, void*, int*)+0x49>
c000a733:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a739:	85 c0                	test   eax,eax
c000a73b:	74 20                	je     c000a75d <File::write(unsigned long long, void*, int*)+0x49>
c000a73d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a741:	74 21                	je     c000a764 <File::write(unsigned long long, void*, int*)+0x50>
c000a743:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a745:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a749:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a74f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a753:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a757:	5b                   	pop    ebx
c000a758:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a75b:	ff e0                	jmp    eax
c000a75d:	b8 0b 00 00 00       	mov    eax,0xb
c000a762:	eb 05                	jmp    c000a769 <File::write(unsigned long long, void*, int*)+0x55>
c000a764:	b8 05 00 00 00       	mov    eax,0x5
c000a769:	5b                   	pop    ebx
c000a76a:	c3                   	ret    
c000a76b:	90                   	nop

c000a76c <Directory::read(unsigned long long, void*, int*)>:
c000a76c:	53                   	push   ebx
c000a76d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a771:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a775:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a77c:	3c 19                	cmp    al,0x19
c000a77e:	77 35                	ja     c000a7b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a780:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a787:	85 c0                	test   eax,eax
c000a789:	74 2a                	je     c000a7b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a78b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a791:	85 c0                	test   eax,eax
c000a793:	74 20                	je     c000a7b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a795:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a799:	74 21                	je     c000a7bc <Directory::read(unsigned long long, void*, int*)+0x50>
c000a79b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a79d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7af:	5b                   	pop    ebx
c000a7b0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a7b3:	ff e0                	jmp    eax
c000a7b5:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ba:	eb 05                	jmp    c000a7c1 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a7bc:	b8 05 00 00 00       	mov    eax,0x5
c000a7c1:	5b                   	pop    ebx
c000a7c2:	c3                   	ret    
c000a7c3:	90                   	nop

c000a7c4 <Directory::write(unsigned long long, void*, int*)>:
c000a7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a7cf:	b8 0b 00 00 00       	mov    eax,0xb
c000a7d4:	80 fa 19             	cmp    dl,0x19
c000a7d7:	77 18                	ja     c000a7f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7d9:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a7e0:	85 d2                	test   edx,edx
c000a7e2:	74 0d                	je     c000a7f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7e4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7eb:	19 c0                	sbb    eax,eax
c000a7ed:	83 e0 0a             	and    eax,0xa
c000a7f0:	40                   	inc    eax
c000a7f1:	c3                   	ret    

c000a7f2 <File::isAtty()>:
c000a7f2:	31 c0                	xor    eax,eax
c000a7f4:	c3                   	ret    
c000a7f5:	90                   	nop

c000a7f6 <Directory::isAtty()>:
c000a7f6:	31 c0                	xor    eax,eax
c000a7f8:	c3                   	ret    
c000a7f9:	90                   	nop

c000a7fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7fa:	b8 0a 00 00 00       	mov    eax,0xa
c000a7ff:	c3                   	ret    

c000a800 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a800:	b8 0a 00 00 00       	mov    eax,0xa
c000a805:	c3                   	ret    

c000a806 <Filesystem::allocateSwapfile(char const*, int)>:
c000a806:	31 c0                	xor    eax,eax
c000a808:	31 d2                	xor    edx,edx
c000a80a:	c3                   	ret    
c000a80b:	90                   	nop

c000a80c <File::~File()>:
c000a80c:	83 ec 0c             	sub    esp,0xc
c000a80f:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000a814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a818:	89 10                	mov    DWORD PTR [eax],edx
c000a81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a81e:	83 ec 0c             	sub    esp,0xc
c000a821:	50                   	push   eax
c000a822:	e8 fd e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a827:	83 c4 10             	add    esp,0x10
c000a82a:	90                   	nop
c000a82b:	83 c4 0c             	add    esp,0xc
c000a82e:	c3                   	ret    
c000a82f:	90                   	nop

c000a830 <File::~File()>:
c000a830:	83 ec 0c             	sub    esp,0xc
c000a833:	83 ec 0c             	sub    esp,0xc
c000a836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a83a:	e8 cd ff ff ff       	call   c000a80c <File::~File()>
c000a83f:	83 c4 10             	add    esp,0x10
c000a842:	83 ec 08             	sub    esp,0x8
c000a845:	68 14 01 00 00       	push   0x114
c000a84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a84e:	e8 3e fc ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000a853:	83 c4 10             	add    esp,0x10
c000a856:	83 c4 0c             	add    esp,0xc
c000a859:	c3                   	ret    

c000a85a <Directory::~Directory()>:
c000a85a:	83 ec 0c             	sub    esp,0xc
c000a85d:	ba 60 de 01 c0       	mov    edx,0xc001de60
c000a862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a866:	89 10                	mov    DWORD PTR [eax],edx
c000a868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a86c:	83 ec 0c             	sub    esp,0xc
c000a86f:	50                   	push   eax
c000a870:	e8 af e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a875:	83 c4 10             	add    esp,0x10
c000a878:	90                   	nop
c000a879:	83 c4 0c             	add    esp,0xc
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Directory::~Directory()>:
c000a87e:	83 ec 0c             	sub    esp,0xc
c000a881:	83 ec 0c             	sub    esp,0xc
c000a884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a888:	e8 cd ff ff ff       	call   c000a85a <Directory::~Directory()>
c000a88d:	83 c4 10             	add    esp,0x10
c000a890:	83 ec 08             	sub    esp,0x8
c000a893:	68 14 01 00 00       	push   0x114
c000a898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89c:	e8 f0 fb ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	83 c4 0c             	add    esp,0xc
c000a8a7:	c3                   	ret    

c000a8a8 <Filesystem::Filesystem()>:
c000a8a8:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000a8ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8b1:	89 10                	mov    DWORD PTR [eax],edx
c000a8b3:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a8b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c4:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a8c9:	90                   	nop
c000a8ca:	c3                   	ret    
c000a8cb:	90                   	nop

c000a8cc <Filesystem::~Filesystem()>:
c000a8cc:	ba dc dd 01 c0       	mov    edx,0xc001dddc
c000a8d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8d5:	89 10                	mov    DWORD PTR [eax],edx
c000a8d7:	90                   	nop
c000a8d8:	c3                   	ret    
c000a8d9:	90                   	nop

c000a8da <Filesystem::~Filesystem()>:
c000a8da:	83 ec 0c             	sub    esp,0xc
c000a8dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8e1:	e8 e6 ff ff ff       	call   c000a8cc <Filesystem::~Filesystem()>
c000a8e6:	83 c4 04             	add    esp,0x4
c000a8e9:	83 ec 08             	sub    esp,0x8
c000a8ec:	6a 08                	push   0x8
c000a8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f2:	e8 9a fb ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	83 c4 0c             	add    esp,0xc
c000a8fd:	c3                   	ret    

c000a8fe <Fs::getcwd(Process*, char*, int)>:
c000a8fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a902:	31 c0                	xor    eax,eax
c000a904:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a907:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a90b:	7d 15                	jge    c000a922 <Fs::getcwd(Process*, char*, int)+0x24>
c000a90d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a911:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a918:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a91b:	84 c9                	test   cl,cl
c000a91d:	74 06                	je     c000a925 <Fs::getcwd(Process*, char*, int)+0x27>
c000a91f:	40                   	inc    eax
c000a920:	eb e2                	jmp    c000a904 <Fs::getcwd(Process*, char*, int)+0x6>
c000a922:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a925:	31 c0                	xor    eax,eax
c000a927:	c3                   	ret    

c000a928 <Fs::initVFS()>:
c000a928:	83 ec 18             	sub    esp,0x18
c000a92b:	6a 08                	push   0x8
c000a92d:	e8 87 ce ff ff       	call   c00077b9 <malloc>
c000a932:	89 04 24             	mov    DWORD PTR [esp],eax
c000a935:	e8 de c7 00 00       	call   c0017118 <FAT::FAT()>
c000a93a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a941:	e8 73 ce ff ff       	call   c00077b9 <malloc>
c000a946:	89 04 24             	mov    DWORD PTR [esp],eax
c000a949:	e8 26 d5 00 00       	call   c0017e74 <ISO9660::ISO9660()>
c000a94e:	83 c4 1c             	add    esp,0x1c
c000a951:	c3                   	ret    

c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a952:	55                   	push   ebp
c000a953:	57                   	push   edi
c000a954:	56                   	push   esi
c000a955:	53                   	push   ebx
c000a956:	81 ec 10 04 00 00    	sub    esp,0x410
c000a95c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a963:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a96a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a971:	68 00 04 00 00       	push   0x400
c000a976:	6a 00                	push   0x0
c000a978:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a97c:	56                   	push   esi
c000a97d:	e8 4e 5b ff ff       	call   c00004d0 <memset>
c000a982:	83 c4 10             	add    esp,0x10
c000a985:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a989:	75 0b                	jne    c000a996 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a98b:	50                   	push   eax
c000a98c:	50                   	push   eax
c000a98d:	57                   	push   edi
c000a98e:	56                   	push   esi
c000a98f:	e8 6c 5c ff ff       	call   c0000600 <strcpy>
c000a994:	eb 41                	jmp    c000a9d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a996:	8a 07                	mov    al,BYTE PTR [edi]
c000a998:	3c 5c                	cmp    al,0x5c
c000a99a:	74 04                	je     c000a9a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a99c:	3c 2f                	cmp    al,0x2f
c000a99e:	75 18                	jne    c000a9b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a9a0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9a3:	3c 60                	cmp    al,0x60
c000a9a5:	7e 03                	jle    c000a9aa <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a9a7:	83 e8 20             	sub    eax,0x20
c000a9aa:	88 04 24             	mov    BYTE PTR [esp],al
c000a9ad:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9b4:	50                   	push   eax
c000a9b5:	50                   	push   eax
c000a9b6:	eb 18                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a9b8:	50                   	push   eax
c000a9b9:	50                   	push   eax
c000a9ba:	55                   	push   ebp
c000a9bb:	56                   	push   esi
c000a9bc:	e8 3f 5c ff ff       	call   c0000600 <strcpy>
c000a9c1:	5a                   	pop    edx
c000a9c2:	59                   	pop    ecx
c000a9c3:	68 fa eb 01 c0       	push   0xc001ebfa
c000a9c8:	56                   	push   esi
c000a9c9:	e8 f2 5d ff ff       	call   c00007c0 <strcat>
c000a9ce:	5d                   	pop    ebp
c000a9cf:	58                   	pop    eax
c000a9d0:	57                   	push   edi
c000a9d1:	56                   	push   esi
c000a9d2:	e8 e9 5d ff ff       	call   c00007c0 <strcat>
c000a9d7:	83 c4 10             	add    esp,0x10
c000a9da:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9dd:	3c 60                	cmp    al,0x60
c000a9df:	7e 03                	jle    c000a9e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9e1:	83 e8 20             	sub    eax,0x20
c000a9e4:	88 04 24             	mov    BYTE PTR [esp],al
c000a9e7:	88 03                	mov    BYTE PTR [ebx],al
c000a9e9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9f0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9fa:	bf 03 00 00 00       	mov    edi,0x3
c000a9ff:	b8 03 00 00 00       	mov    eax,0x3
c000aa04:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa07:	84 d2                	test   dl,dl
c000aa09:	0f 84 91 00 00 00    	je     c000aaa0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa12:	80 fa 5c             	cmp    dl,0x5c
c000aa15:	74 05                	je     c000aa1c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa17:	80 fa 2f             	cmp    dl,0x2f
c000aa1a:	75 12                	jne    c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa1c:	89 c5                	mov    ebp,eax
c000aa1e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa23:	74 09                	je     c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa25:	40                   	inc    eax
c000aa26:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa2a:	89 cf                	mov    edi,ecx
c000aa2c:	eb d6                	jmp    c000aa04 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aa2e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aa33:	75 5b                	jne    c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa35:	80 fa 2e             	cmp    dl,0x2e
c000aa38:	75 56                	jne    c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa3a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa3e:	74 19                	je     c000aa59 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa40:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa45:	74 53                	je     c000aa9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa47:	89 f9                	mov    ecx,edi
c000aa49:	41                   	inc    ecx
c000aa4a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa4d:	80 fa 2f             	cmp    dl,0x2f
c000aa50:	74 f7                	je     c000aa49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa52:	80 fa 5c             	cmp    dl,0x5c
c000aa55:	74 f2                	je     c000aa49 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa57:	eb d1                	jmp    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa59:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa5e:	74 3a                	je     c000aa9a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa60:	83 f8 03             	cmp    eax,0x3
c000aa63:	74 c5                	je     c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa65:	41                   	inc    ecx
c000aa66:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa69:	80 fa 2f             	cmp    dl,0x2f
c000aa6c:	74 f7                	je     c000aa65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa6e:	80 fa 5c             	cmp    dl,0x5c
c000aa71:	74 f2                	je     c000aa65 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa73:	48                   	dec    eax
c000aa74:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa78:	75 06                	jne    c000aa80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa7e:	eb f3                	jmp    c000aa73 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa80:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa84:	74 07                	je     c000aa8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa86:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa8a:	48                   	dec    eax
c000aa8b:	eb f3                	jmp    c000aa80 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa8d:	40                   	inc    eax
c000aa8e:	eb 9a                	jmp    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa90:	80 fa 2f             	cmp    dl,0x2f
c000aa93:	74 95                	je     c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa95:	80 fa 5c             	cmp    dl,0x5c
c000aa98:	74 90                	je     c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa9a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa9d:	40                   	inc    eax
c000aa9e:	eb 8a                	jmp    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaa0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aaa4:	83 ec 0c             	sub    esp,0xc
c000aaa7:	53                   	push   ebx
c000aaa8:	e8 93 5a ff ff       	call   c0000540 <strlen>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aab5:	75 26                	jne    c000aadd <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aab7:	83 ec 0c             	sub    esp,0xc
c000aaba:	53                   	push   ebx
c000aabb:	e8 80 5a ff ff       	call   c0000540 <strlen>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aac8:	74 26                	je     c000aaf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	53                   	push   ebx
c000aace:	e8 6d 5a ff ff       	call   c0000540 <strlen>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aadb:	eb c7                	jmp    c000aaa4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aadd:	83 ec 0c             	sub    esp,0xc
c000aae0:	53                   	push   ebx
c000aae1:	e8 5a 5a ff ff       	call   c0000540 <strlen>
c000aae6:	83 c4 10             	add    esp,0x10
c000aae9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaee:	74 c7                	je     c000aab7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aaf0:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aaf6:	5b                   	pop    ebx
c000aaf7:	5e                   	pop    esi
c000aaf8:	5f                   	pop    edi
c000aaf9:	5d                   	pop    ebp
c000aafa:	c3                   	ret    
c000aafb:	90                   	nop

c000aafc <File::File(char const*, Process*)>:
c000aafc:	83 ec 0c             	sub    esp,0xc
c000aaff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab03:	83 ec 08             	sub    esp,0x8
c000ab06:	6a 00                	push   0x0
c000ab08:	50                   	push   eax
c000ab09:	e8 34 e3 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000ab0e:	83 c4 10             	add    esp,0x10
c000ab11:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000ab16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1a:	89 10                	mov    DWORD PTR [eax],edx
c000ab1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab20:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2a:	83 c0 0d             	add    eax,0xd
c000ab2d:	83 ec 04             	sub    esp,0x4
c000ab30:	52                   	push   edx
c000ab31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab35:	50                   	push   eax
c000ab36:	e8 17 fe ff ff       	call   c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab3b:	83 c4 10             	add    esp,0x10
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab45:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab56:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab64:	25 ff 00 00 00       	and    eax,0xff
c000ab69:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab70:	85 c0                	test   eax,eax
c000ab72:	74 42                	je     c000abb6 <File::File(char const*, Process*)+0xba>
c000ab74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab78:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab7e:	25 ff 00 00 00       	and    eax,0xff
c000ab83:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab8a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab90:	85 c0                	test   eax,eax
c000ab92:	75 22                	jne    c000abb6 <File::File(char const*, Process*)+0xba>
c000ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab98:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab9e:	25 ff 00 00 00       	and    eax,0xff
c000aba3:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000abaa:	83 ec 0c             	sub    esp,0xc
c000abad:	50                   	push   eax
c000abae:	e8 37 20 00 00       	call   c000cbea <LogicalDisk::mount()>
c000abb3:	83 c4 10             	add    esp,0x10
c000abb6:	90                   	nop
c000abb7:	83 c4 0c             	add    esp,0xc
c000abba:	c3                   	ret    
c000abbb:	90                   	nop

c000abbc <File::open(FileOpenMode)>:
c000abbc:	53                   	push   ebx
c000abbd:	b8 0b 00 00 00       	mov    eax,0xb
c000abc2:	83 ec 08             	sub    esp,0x8
c000abc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abc9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000abd0:	80 fa 19             	cmp    dl,0x19
c000abd3:	77 40                	ja     c000ac15 <File::open(FileOpenMode)+0x59>
c000abd5:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abdc:	85 d2                	test   edx,edx
c000abde:	74 35                	je     c000ac15 <File::open(FileOpenMode)+0x59>
c000abe0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abe6:	85 d2                	test   edx,edx
c000abe8:	74 2b                	je     c000ac15 <File::open(FileOpenMode)+0x59>
c000abea:	b8 06 00 00 00       	mov    eax,0x6
c000abef:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abf3:	75 20                	jne    c000ac15 <File::open(FileOpenMode)+0x59>
c000abf5:	8b 02                	mov    eax,DWORD PTR [edx]
c000abf7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac01:	51                   	push   ecx
c000ac02:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac05:	51                   	push   ecx
c000ac06:	52                   	push   edx
c000ac07:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac0a:	83 c4 10             	add    esp,0x10
c000ac0d:	85 c0                	test   eax,eax
c000ac0f:	75 04                	jne    c000ac15 <File::open(FileOpenMode)+0x59>
c000ac11:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac15:	83 c4 08             	add    esp,0x8
c000ac18:	5b                   	pop    ebx
c000ac19:	c3                   	ret    

c000ac1a <File::close()>:
c000ac1a:	53                   	push   ebx
c000ac1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac20:	83 ec 08             	sub    esp,0x8
c000ac23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac27:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac2e:	80 fa 19             	cmp    dl,0x19
c000ac31:	77 41                	ja     c000ac74 <File::close()+0x5a>
c000ac33:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac3a:	85 db                	test   ebx,ebx
c000ac3c:	74 36                	je     c000ac74 <File::close()+0x5a>
c000ac3e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac45:	74 2d                	je     c000ac74 <File::close()+0x5a>
c000ac47:	b8 05 00 00 00       	mov    eax,0x5
c000ac4c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac50:	74 22                	je     c000ac74 <File::close()+0x5a>
c000ac52:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac56:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac5d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac63:	53                   	push   ebx
c000ac64:	53                   	push   ebx
c000ac65:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac67:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac6d:	50                   	push   eax
c000ac6e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac71:	83 c4 10             	add    esp,0x10
c000ac74:	83 c4 08             	add    esp,0x8
c000ac77:	5b                   	pop    ebx
c000ac78:	c3                   	ret    
c000ac79:	90                   	nop

c000ac7a <File::seek(unsigned long long)>:
c000ac7a:	56                   	push   esi
c000ac7b:	53                   	push   ebx
c000ac7c:	b8 0b 00 00 00       	mov    eax,0xb
c000ac81:	51                   	push   ecx
c000ac82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac8a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac95:	80 fa 19             	cmp    dl,0x19
c000ac98:	77 31                	ja     c000accb <File::seek(unsigned long long)+0x51>
c000ac9a:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000aca1:	85 d2                	test   edx,edx
c000aca3:	74 26                	je     c000accb <File::seek(unsigned long long)+0x51>
c000aca5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acab:	85 d2                	test   edx,edx
c000acad:	74 1c                	je     c000accb <File::seek(unsigned long long)+0x51>
c000acaf:	b8 05 00 00 00       	mov    eax,0x5
c000acb4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000acb8:	74 11                	je     c000accb <File::seek(unsigned long long)+0x51>
c000acba:	8b 02                	mov    eax,DWORD PTR [edx]
c000acbc:	53                   	push   ebx
c000acbd:	51                   	push   ecx
c000acbe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000acc4:	52                   	push   edx
c000acc5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	5a                   	pop    edx
c000accc:	5b                   	pop    ebx
c000accd:	5e                   	pop    esi
c000acce:	c3                   	ret    
c000accf:	90                   	nop

c000acd0 <File::tell(unsigned long long*)>:
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	b8 0b 00 00 00       	mov    eax,0xb
c000acd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acdc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ace3:	80 fa 19             	cmp    dl,0x19
c000ace6:	77 34                	ja     c000ad1c <File::tell(unsigned long long*)+0x4c>
c000ace8:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000acef:	85 d2                	test   edx,edx
c000acf1:	74 29                	je     c000ad1c <File::tell(unsigned long long*)+0x4c>
c000acf3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acf9:	85 d2                	test   edx,edx
c000acfb:	74 1f                	je     c000ad1c <File::tell(unsigned long long*)+0x4c>
c000acfd:	b8 05 00 00 00       	mov    eax,0x5
c000ad02:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad06:	74 14                	je     c000ad1c <File::tell(unsigned long long*)+0x4c>
c000ad08:	50                   	push   eax
c000ad09:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad0f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad15:	52                   	push   edx
c000ad16:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	83 c4 0c             	add    esp,0xc
c000ad1f:	c3                   	ret    

c000ad20 <File::rewind()>:
c000ad20:	83 ec 10             	sub    esp,0x10
c000ad23:	6a 00                	push   0x0
c000ad25:	6a 00                	push   0x0
c000ad27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad2b:	e8 4a ff ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c000ad30:	83 c4 1c             	add    esp,0x1c
c000ad33:	c3                   	ret    

c000ad34 <File::unlink()>:
c000ad34:	83 ec 0c             	sub    esp,0xc
c000ad37:	b8 0b 00 00 00       	mov    eax,0xb
c000ad3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad47:	80 f9 19             	cmp    cl,0x19
c000ad4a:	77 2f                	ja     c000ad7b <File::unlink()+0x47>
c000ad4c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad53:	85 c9                	test   ecx,ecx
c000ad55:	74 24                	je     c000ad7b <File::unlink()+0x47>
c000ad57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad5d:	85 c9                	test   ecx,ecx
c000ad5f:	74 1a                	je     c000ad7b <File::unlink()+0x47>
c000ad61:	b8 06 00 00 00       	mov    eax,0x6
c000ad66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad6a:	75 0f                	jne    c000ad7b <File::unlink()+0x47>
c000ad6c:	83 c2 0d             	add    edx,0xd
c000ad6f:	50                   	push   eax
c000ad70:	50                   	push   eax
c000ad71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad73:	52                   	push   edx
c000ad74:	51                   	push   ecx
c000ad75:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	83 c4 0c             	add    esp,0xc
c000ad7e:	c3                   	ret    
c000ad7f:	90                   	nop

c000ad80 <File::rename(char const*)>:
c000ad80:	83 ec 0c             	sub    esp,0xc
c000ad83:	b8 0b 00 00 00       	mov    eax,0xb
c000ad88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad93:	80 f9 19             	cmp    cl,0x19
c000ad96:	77 32                	ja     c000adca <File::rename(char const*)+0x4a>
c000ad98:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad9f:	85 c9                	test   ecx,ecx
c000ada1:	74 27                	je     c000adca <File::rename(char const*)+0x4a>
c000ada3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ada9:	85 c9                	test   ecx,ecx
c000adab:	74 1d                	je     c000adca <File::rename(char const*)+0x4a>
c000adad:	b8 06 00 00 00       	mov    eax,0x6
c000adb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb6:	75 12                	jne    c000adca <File::rename(char const*)+0x4a>
c000adb8:	83 c2 0d             	add    edx,0xd
c000adbb:	50                   	push   eax
c000adbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000adc2:	52                   	push   edx
c000adc3:	51                   	push   ecx
c000adc4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000adc7:	83 c4 10             	add    esp,0x10
c000adca:	83 c4 0c             	add    esp,0xc
c000adcd:	c3                   	ret    

c000adce <File::chfatattr(unsigned char, unsigned char)>:
c000adce:	57                   	push   edi
c000adcf:	b8 0b 00 00 00       	mov    eax,0xb
c000add4:	56                   	push   esi
c000add5:	53                   	push   ebx
c000add6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000adde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ade5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ade9:	80 f9 19             	cmp    cl,0x19
c000adec:	77 37                	ja     c000ae25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adee:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adf5:	85 c9                	test   ecx,ecx
c000adf7:	74 2c                	je     c000ae25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adf9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adff:	85 c9                	test   ecx,ecx
c000ae01:	74 22                	je     c000ae25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae03:	b8 06 00 00 00       	mov    eax,0x6
c000ae08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae0c:	75 17                	jne    c000ae25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae0e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae10:	89 f0                	mov    eax,esi
c000ae12:	83 c2 0d             	add    edx,0xd
c000ae15:	0f b6 f0             	movzx  esi,al
c000ae18:	0f b6 db             	movzx  ebx,bl
c000ae1b:	56                   	push   esi
c000ae1c:	53                   	push   ebx
c000ae1d:	52                   	push   edx
c000ae1e:	51                   	push   ecx
c000ae1f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	5b                   	pop    ebx
c000ae26:	5e                   	pop    esi
c000ae27:	5f                   	pop    edi
c000ae28:	c3                   	ret    
c000ae29:	90                   	nop

c000ae2a <File::exists()>:
c000ae2a:	83 ec 0c             	sub    esp,0xc
c000ae2d:	31 c0                	xor    eax,eax
c000ae2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae33:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae3a:	80 f9 19             	cmp    cl,0x19
c000ae3d:	77 24                	ja     c000ae63 <File::exists()+0x39>
c000ae3f:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae46:	85 c9                	test   ecx,ecx
c000ae48:	74 19                	je     c000ae63 <File::exists()+0x39>
c000ae4a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae50:	85 c9                	test   ecx,ecx
c000ae52:	74 0f                	je     c000ae63 <File::exists()+0x39>
c000ae54:	83 c2 0d             	add    edx,0xd
c000ae57:	50                   	push   eax
c000ae58:	50                   	push   eax
c000ae59:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae5b:	52                   	push   edx
c000ae5c:	51                   	push   ecx
c000ae5d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	83 c4 0c             	add    esp,0xc
c000ae66:	c3                   	ret    
c000ae67:	90                   	nop

c000ae68 <File::stat(unsigned long long*, bool*)>:
c000ae68:	56                   	push   esi
c000ae69:	53                   	push   ebx
c000ae6a:	50                   	push   eax
c000ae6b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae83:	80 f9 19             	cmp    cl,0x19
c000ae86:	77 3d                	ja     c000aec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae88:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae8f:	85 c9                	test   ecx,ecx
c000ae91:	74 32                	je     c000aec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae99:	85 c9                	test   ecx,ecx
c000ae9b:	74 28                	je     c000aec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aea3:	74 13                	je     c000aeb8 <File::stat(unsigned long long*, bool*)+0x50>
c000aea5:	83 ec 04             	sub    esp,0x4
c000aea8:	56                   	push   esi
c000aea9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000aeaf:	51                   	push   ecx
c000aeb0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000aeb3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000aeb6:	eb 0a                	jmp    c000aec2 <File::stat(unsigned long long*, bool*)+0x5a>
c000aeb8:	53                   	push   ebx
c000aeb9:	83 c2 0d             	add    edx,0xd
c000aebc:	56                   	push   esi
c000aebd:	52                   	push   edx
c000aebe:	51                   	push   ecx
c000aebf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000aec2:	83 c4 10             	add    esp,0x10
c000aec5:	5a                   	pop    edx
c000aec6:	5b                   	pop    ebx
c000aec7:	5e                   	pop    esi
c000aec8:	c3                   	ret    

c000aec9 <Fs::setcwd(Process*, char*)>:
c000aec9:	55                   	push   ebp
c000aeca:	57                   	push   edi
c000aecb:	56                   	push   esi
c000aecc:	53                   	push   ebx
c000aecd:	81 ec 20 02 00 00    	sub    esp,0x220
c000aed3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000aeda:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aee0:	57                   	push   edi
c000aee1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aee8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aeec:	56                   	push   esi
c000aeed:	e8 60 fa ff ff       	call   c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aef2:	89 34 24             	mov    DWORD PTR [esp],esi
c000aef5:	e8 46 56 ff ff       	call   c0000540 <strlen>
c000aefa:	83 c4 10             	add    esp,0x10
c000aefd:	83 f8 02             	cmp    eax,0x2
c000af00:	77 15                	ja     c000af17 <Fs::setcwd(Process*, char*)+0x4e>
c000af02:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af07:	83 eb 41             	sub    ebx,0x41
c000af0a:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af11:	85 c0                	test   eax,eax
c000af13:	75 1c                	jne    c000af31 <Fs::setcwd(Process*, char*)+0x68>
c000af15:	eb 2f                	jmp    c000af46 <Fs::setcwd(Process*, char*)+0x7d>
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	56                   	push   esi
c000af1b:	e8 20 56 ff ff       	call   c0000540 <strlen>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	83 f8 03             	cmp    eax,0x3
c000af26:	75 57                	jne    c000af7f <Fs::setcwd(Process*, char*)+0xb6>
c000af28:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000af2d:	75 50                	jne    c000af7f <Fs::setcwd(Process*, char*)+0xb6>
c000af2f:	eb d1                	jmp    c000af02 <Fs::setcwd(Process*, char*)+0x39>
c000af31:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af38:	75 0c                	jne    c000af46 <Fs::setcwd(Process*, char*)+0x7d>
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	50                   	push   eax
c000af3e:	e8 a7 1c 00 00       	call   c000cbea <LogicalDisk::mount()>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	b8 03 00 00 00       	mov    eax,0x3
c000af4b:	83 fb 19             	cmp    ebx,0x19
c000af4e:	0f 87 c6 00 00 00    	ja     c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000af54:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af5b:	b8 05 00 00 00       	mov    eax,0x5
c000af60:	85 d2                	test   edx,edx
c000af62:	0f 84 b2 00 00 00    	je     c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000af68:	b8 06 00 00 00       	mov    eax,0x6
c000af6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af74:	0f 85 92 00 00 00    	jne    c000b00c <Fs::setcwd(Process*, char*)+0x143>
c000af7a:	e9 9b 00 00 00       	jmp    c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 14 01 00 00       	push   0x114
c000af87:	e8 2d c8 ff ff       	call   c00077b9 <malloc>
c000af8c:	83 c4 0c             	add    esp,0xc
c000af8f:	89 c3                	mov    ebx,eax
c000af91:	55                   	push   ebp
c000af92:	56                   	push   esi
c000af93:	50                   	push   eax
c000af94:	e8 63 fb ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000af99:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af9e:	83 c4 0c             	add    esp,0xc
c000afa1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000afa5:	50                   	push   eax
c000afa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000afaa:	50                   	push   eax
c000afab:	53                   	push   ebx
c000afac:	e8 b7 fe ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c000afb1:	83 c4 10             	add    esp,0x10
c000afb4:	83 f8 02             	cmp    eax,0x2
c000afb7:	74 04                	je     c000afbd <Fs::setcwd(Process*, char*)+0xf4>
c000afb9:	85 c0                	test   eax,eax
c000afbb:	74 1c                	je     c000afd9 <Fs::setcwd(Process*, char*)+0x110>
c000afbd:	b8 01 00 00 00       	mov    eax,0x1
c000afc2:	85 db                	test   ebx,ebx
c000afc4:	74 54                	je     c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afcb:	53                   	push   ebx
c000afcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	b8 01 00 00 00       	mov    eax,0x1
c000afd7:	eb 41                	jmp    c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000afd9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afde:	75 1c                	jne    c000affc <Fs::setcwd(Process*, char*)+0x133>
c000afe0:	b8 02 00 00 00       	mov    eax,0x2
c000afe5:	85 db                	test   ebx,ebx
c000afe7:	74 31                	je     c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000afe9:	83 ec 0c             	sub    esp,0xc
c000afec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afee:	53                   	push   ebx
c000afef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aff2:	83 c4 10             	add    esp,0x10
c000aff5:	b8 02 00 00 00       	mov    eax,0x2
c000affa:	eb 1e                	jmp    c000b01a <Fs::setcwd(Process*, char*)+0x151>
c000affc:	85 db                	test   ebx,ebx
c000affe:	74 0c                	je     c000b00c <Fs::setcwd(Process*, char*)+0x143>
c000b000:	83 ec 0c             	sub    esp,0xc
c000b003:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b005:	53                   	push   ebx
c000b006:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	50                   	push   eax
c000b00d:	50                   	push   eax
c000b00e:	56                   	push   esi
c000b00f:	57                   	push   edi
c000b010:	e8 eb 55 ff ff       	call   c0000600 <strcpy>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	31 c0                	xor    eax,eax
c000b01a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b020:	5b                   	pop    ebx
c000b021:	5e                   	pop    esi
c000b022:	5f                   	pop    edi
c000b023:	5d                   	pop    ebp
c000b024:	c3                   	ret    
c000b025:	90                   	nop

c000b026 <Directory::Directory(char const*, Process*)>:
c000b026:	83 ec 0c             	sub    esp,0xc
c000b029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02d:	83 ec 08             	sub    esp,0x8
c000b030:	6a 00                	push   0x0
c000b032:	50                   	push   eax
c000b033:	e8 0a de ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	ba 60 de 01 c0       	mov    edx,0xc001de60
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b04a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b054:	83 c0 0d             	add    eax,0xd
c000b057:	83 ec 04             	sub    esp,0x4
c000b05a:	52                   	push   edx
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	50                   	push   eax
c000b060:	e8 ed f8 ff ff       	call   c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b06f:	8d 50 bf             	lea    edx,[eax-0x41]
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b080:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b088:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b08e:	25 ff 00 00 00       	and    eax,0xff
c000b093:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b09a:	85 c0                	test   eax,eax
c000b09c:	74 42                	je     c000b0e0 <Directory::Directory(char const*, Process*)+0xba>
c000b09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0a8:	25 ff 00 00 00       	and    eax,0xff
c000b0ad:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0b4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 22                	jne    c000b0e0 <Directory::Directory(char const*, Process*)+0xba>
c000b0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0c8:	25 ff 00 00 00       	and    eax,0xff
c000b0cd:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	50                   	push   eax
c000b0d8:	e8 0d 1b 00 00       	call   c000cbea <LogicalDisk::mount()>
c000b0dd:	83 c4 10             	add    esp,0x10
c000b0e0:	90                   	nop
c000b0e1:	83 c4 0c             	add    esp,0xc
c000b0e4:	c3                   	ret    
c000b0e5:	90                   	nop

c000b0e6 <Directory::open()>:
c000b0e6:	53                   	push   ebx
c000b0e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ec:	83 ec 08             	sub    esp,0x8
c000b0ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0fa:	80 fa 19             	cmp    dl,0x19
c000b0fd:	77 3d                	ja     c000b13c <Directory::open()+0x56>
c000b0ff:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b106:	85 d2                	test   edx,edx
c000b108:	74 32                	je     c000b13c <Directory::open()+0x56>
c000b10a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b110:	85 d2                	test   edx,edx
c000b112:	74 28                	je     c000b13c <Directory::open()+0x56>
c000b114:	b8 06 00 00 00       	mov    eax,0x6
c000b119:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b11d:	75 1d                	jne    c000b13c <Directory::open()+0x56>
c000b11f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b125:	50                   	push   eax
c000b126:	8b 02                	mov    eax,DWORD PTR [edx]
c000b128:	51                   	push   ecx
c000b129:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b12c:	51                   	push   ecx
c000b12d:	52                   	push   edx
c000b12e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	85 c0                	test   eax,eax
c000b136:	75 04                	jne    c000b13c <Directory::open()+0x56>
c000b138:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b13c:	83 c4 08             	add    esp,0x8
c000b13f:	5b                   	pop    ebx
c000b140:	c3                   	ret    
c000b141:	90                   	nop

c000b142 <Directory::close()>:
c000b142:	53                   	push   ebx
c000b143:	b8 0b 00 00 00       	mov    eax,0xb
c000b148:	83 ec 08             	sub    esp,0x8
c000b14b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b14f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b156:	80 fa 19             	cmp    dl,0x19
c000b159:	77 41                	ja     c000b19c <Directory::close()+0x5a>
c000b15b:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b162:	85 db                	test   ebx,ebx
c000b164:	74 36                	je     c000b19c <Directory::close()+0x5a>
c000b166:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b16d:	74 2d                	je     c000b19c <Directory::close()+0x5a>
c000b16f:	b8 05 00 00 00       	mov    eax,0x5
c000b174:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b178:	74 22                	je     c000b19c <Directory::close()+0x5a>
c000b17a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b17e:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b185:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b18b:	53                   	push   ebx
c000b18c:	53                   	push   ebx
c000b18d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b18f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b195:	50                   	push   eax
c000b196:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	83 c4 08             	add    esp,0x8
c000b19f:	5b                   	pop    ebx
c000b1a0:	c3                   	ret    
c000b1a1:	90                   	nop

c000b1a2 <Directory::unlink()>:
c000b1a2:	83 ec 0c             	sub    esp,0xc
c000b1a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1b5:	80 f9 19             	cmp    cl,0x19
c000b1b8:	77 2f                	ja     c000b1e9 <Directory::unlink()+0x47>
c000b1ba:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 24                	je     c000b1e9 <Directory::unlink()+0x47>
c000b1c5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1cb:	85 c9                	test   ecx,ecx
c000b1cd:	74 1a                	je     c000b1e9 <Directory::unlink()+0x47>
c000b1cf:	b8 06 00 00 00       	mov    eax,0x6
c000b1d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1d8:	75 0f                	jne    c000b1e9 <Directory::unlink()+0x47>
c000b1da:	83 c2 0d             	add    edx,0xd
c000b1dd:	50                   	push   eax
c000b1de:	50                   	push   eax
c000b1df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1e1:	52                   	push   edx
c000b1e2:	51                   	push   ecx
c000b1e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1e6:	83 c4 10             	add    esp,0x10
c000b1e9:	83 c4 0c             	add    esp,0xc
c000b1ec:	c3                   	ret    
c000b1ed:	90                   	nop

c000b1ee <Directory::rename(char const*)>:
c000b1ee:	83 ec 0c             	sub    esp,0xc
c000b1f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b201:	80 f9 19             	cmp    cl,0x19
c000b204:	77 32                	ja     c000b238 <Directory::rename(char const*)+0x4a>
c000b206:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b20d:	85 c9                	test   ecx,ecx
c000b20f:	74 27                	je     c000b238 <Directory::rename(char const*)+0x4a>
c000b211:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b217:	85 c9                	test   ecx,ecx
c000b219:	74 1d                	je     c000b238 <Directory::rename(char const*)+0x4a>
c000b21b:	b8 06 00 00 00       	mov    eax,0x6
c000b220:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b224:	75 12                	jne    c000b238 <Directory::rename(char const*)+0x4a>
c000b226:	83 c2 0d             	add    edx,0xd
c000b229:	50                   	push   eax
c000b22a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b22c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b230:	52                   	push   edx
c000b231:	51                   	push   ecx
c000b232:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	83 c4 0c             	add    esp,0xc
c000b23b:	c3                   	ret    

c000b23c <Directory::exists()>:
c000b23c:	83 ec 0c             	sub    esp,0xc
c000b23f:	31 c0                	xor    eax,eax
c000b241:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b245:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b24c:	80 f9 19             	cmp    cl,0x19
c000b24f:	77 24                	ja     c000b275 <Directory::exists()+0x39>
c000b251:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b258:	85 c9                	test   ecx,ecx
c000b25a:	74 19                	je     c000b275 <Directory::exists()+0x39>
c000b25c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b262:	85 c9                	test   ecx,ecx
c000b264:	74 0f                	je     c000b275 <Directory::exists()+0x39>
c000b266:	83 c2 0d             	add    edx,0xd
c000b269:	50                   	push   eax
c000b26a:	50                   	push   eax
c000b26b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26d:	52                   	push   edx
c000b26e:	51                   	push   ecx
c000b26f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	83 c4 0c             	add    esp,0xc
c000b278:	c3                   	ret    
c000b279:	90                   	nop

c000b27a <Directory::read(dirent*)>:
c000b27a:	83 ec 1c             	sub    esp,0x1c
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b286:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b28d:	80 fa 19             	cmp    dl,0x19
c000b290:	77 30                	ja     c000b2c2 <Directory::read(dirent*)+0x48>
c000b292:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b299:	85 d2                	test   edx,edx
c000b29b:	74 25                	je     c000b2c2 <Directory::read(dirent*)+0x48>
c000b29d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b2a4:	74 1c                	je     c000b2c2 <Directory::read(dirent*)+0x48>
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2af:	52                   	push   edx
c000b2b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b4:	6a 00                	push   0x0
c000b2b6:	68 10 01 00 00       	push   0x110
c000b2bb:	51                   	push   ecx
c000b2bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2bf:	83 c4 20             	add    esp,0x20
c000b2c2:	83 c4 1c             	add    esp,0x1c
c000b2c5:	c3                   	ret    

c000b2c6 <Directory::create()>:
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d9:	80 f9 19             	cmp    cl,0x19
c000b2dc:	77 2f                	ja     c000b30d <Directory::create()+0x47>
c000b2de:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2e5:	85 c9                	test   ecx,ecx
c000b2e7:	74 24                	je     c000b30d <Directory::create()+0x47>
c000b2e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2ef:	85 c9                	test   ecx,ecx
c000b2f1:	74 1a                	je     c000b30d <Directory::create()+0x47>
c000b2f3:	b8 06 00 00 00       	mov    eax,0x6
c000b2f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2fc:	75 0f                	jne    c000b30d <Directory::create()+0x47>
c000b2fe:	83 c2 0d             	add    edx,0xd
c000b301:	50                   	push   eax
c000b302:	50                   	push   eax
c000b303:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b305:	52                   	push   edx
c000b306:	51                   	push   ecx
c000b307:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	83 c4 0c             	add    esp,0xc
c000b310:	c3                   	ret    
c000b311:	90                   	nop

c000b312 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b312:	b8 0a 00 00 00       	mov    eax,0xa
c000b317:	c3                   	ret    

c000b318 <Bus::Bus(char const*)>:
c000b318:	83 ec 0c             	sub    esp,0xc
c000b31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b31f:	83 ec 08             	sub    esp,0x8
c000b322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b326:	50                   	push   eax
c000b327:	e8 30 08 00 00       	call   c000bb5c <Device::Device(char const*)>
c000b32c:	83 c4 10             	add    esp,0x10
c000b32f:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000b334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b338:	89 10                	mov    DWORD PTR [eax],edx
c000b33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b33e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b348:	90                   	nop
c000b349:	83 c4 0c             	add    esp,0xc
c000b34c:	c3                   	ret    
c000b34d:	90                   	nop
c000b34e:	66 90                	xchg   ax,ax

c000b350 <Bus::~Bus()>:
c000b350:	83 ec 0c             	sub    esp,0xc
c000b353:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000b358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35c:	89 10                	mov    DWORD PTR [eax],edx
c000b35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	50                   	push   eax
c000b366:	e8 5b 05 00 00       	call   c000b8c6 <Device::~Device()>
c000b36b:	83 c4 10             	add    esp,0x10
c000b36e:	90                   	nop
c000b36f:	83 c4 0c             	add    esp,0xc
c000b372:	c3                   	ret    
c000b373:	90                   	nop

c000b374 <Bus::~Bus()>:
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	83 ec 0c             	sub    esp,0xc
c000b37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b37e:	e8 cd ff ff ff       	call   c000b350 <Bus::~Bus()>
c000b383:	83 c4 10             	add    esp,0x10
c000b386:	83 ec 08             	sub    esp,0x8
c000b389:	68 58 01 00 00       	push   0x158
c000b38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b392:	e8 fa f0 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000b397:	83 c4 10             	add    esp,0x10
c000b39a:	83 c4 0c             	add    esp,0xc
c000b39d:	c3                   	ret    

c000b39e <beepThread(void*)>:
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b3a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3aa:	48                   	dec    eax
c000b3ab:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b3b0:	75 01                	jne    c000b3b3 <beepThread(void*)+0x15>
c000b3b2:	fb                   	sti    
c000b3b3:	83 ec 0c             	sub    esp,0xc
c000b3b6:	6b c2 0a             	imul   eax,edx,0xa
c000b3b9:	50                   	push   eax
c000b3ba:	e8 3d 87 00 00       	call   c0013afc <milliTenthSleep(unsigned int)>
c000b3bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b3c6:	e8 e3 a4 00 00       	call   c00158ae <HalMakeBeep(int)>
c000b3cb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b3d3:	83 c4 1c             	add    esp,0x1c
c000b3d6:	e9 1d 86 00 00       	jmp    c00139f8 <blockTask(TaskState)>

c000b3db <Krnl::beep(int, int, bool)>:
c000b3db:	56                   	push   esi
c000b3dc:	53                   	push   ebx
c000b3dd:	83 ec 10             	sub    esp,0x10
c000b3e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ec:	e8 bd a4 00 00       	call   c00158ae <HalMakeBeep(int)>
c000b3f1:	83 c4 10             	add    esp,0x10
c000b3f4:	89 f0                	mov    eax,esi
c000b3f6:	84 c0                	test   al,al
c000b3f8:	74 1e                	je     c000b418 <Krnl::beep(int, int, bool)+0x3d>
c000b3fa:	83 ec 0c             	sub    esp,0xc
c000b3fd:	6b db 0a             	imul   ebx,ebx,0xa
c000b400:	53                   	push   ebx
c000b401:	e8 f6 86 00 00       	call   c0013afc <milliTenthSleep(unsigned int)>
c000b406:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b40e:	83 c4 14             	add    esp,0x14
c000b411:	5b                   	pop    ebx
c000b412:	5e                   	pop    esi
c000b413:	e9 96 a4 00 00       	jmp    c00158ae <HalMakeBeep(int)>
c000b418:	68 e6 00 00 00       	push   0xe6
c000b41d:	53                   	push   ebx
c000b41e:	68 9e b3 00 c0       	push   0xc000b39e
c000b423:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b429:	e8 ae 81 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c000b42e:	83 c4 14             	add    esp,0x14
c000b431:	5b                   	pop    ebx
c000b432:	5e                   	pop    esi
c000b433:	c3                   	ret    

c000b434 <User::loadClockSettings(int)>:
c000b434:	53                   	push   ebx
c000b435:	83 ec 14             	sub    esp,0x14
c000b438:	68 14 01 00 00       	push   0x114
c000b43d:	e8 77 c3 ff ff       	call   c00077b9 <malloc>
c000b442:	83 c4 0c             	add    esp,0xc
c000b445:	89 c3                	mov    ebx,eax
c000b447:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b44d:	68 a0 de 01 c0       	push   0xc001dea0
c000b452:	50                   	push   eax
c000b453:	e8 a4 f6 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000b458:	58                   	pop    eax
c000b459:	5a                   	pop    edx
c000b45a:	6a 01                	push   0x1
c000b45c:	53                   	push   ebx
c000b45d:	e8 5a f7 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c000b462:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b465:	e8 b0 f7 ff ff       	call   c000ac1a <File::close()>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	85 db                	test   ebx,ebx
c000b46f:	74 0f                	je     c000b480 <User::loadClockSettings(int)+0x4c>
c000b471:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b473:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b477:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b47a:	83 c4 08             	add    esp,0x8
c000b47d:	5b                   	pop    ebx
c000b47e:	ff e0                	jmp    eax
c000b480:	83 c4 08             	add    esp,0x8
c000b483:	5b                   	pop    ebx
c000b484:	c3                   	ret    
c000b485:	90                   	nop

c000b486 <Clock::Clock(char const*)>:
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48d:	83 ec 08             	sub    esp,0x8
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	50                   	push   eax
c000b495:	e8 c2 06 00 00       	call   c000bb5c <Device::Device(char const*)>
c000b49a:	83 c4 10             	add    esp,0x10
c000b49d:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a6:	89 10                	mov    DWORD PTR [eax],edx
c000b4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ac:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b4b6:	90                   	nop
c000b4b7:	83 c4 0c             	add    esp,0xc
c000b4ba:	c3                   	ret    
c000b4bb:	90                   	nop

c000b4bc <Clock::~Clock()>:
c000b4bc:	83 ec 0c             	sub    esp,0xc
c000b4bf:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000b4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c8:	89 10                	mov    DWORD PTR [eax],edx
c000b4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ce:	83 ec 0c             	sub    esp,0xc
c000b4d1:	50                   	push   eax
c000b4d2:	e8 ef 03 00 00       	call   c000b8c6 <Device::~Device()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	90                   	nop
c000b4db:	83 c4 0c             	add    esp,0xc
c000b4de:	c3                   	ret    
c000b4df:	90                   	nop

c000b4e0 <Clock::~Clock()>:
c000b4e0:	83 ec 0c             	sub    esp,0xc
c000b4e3:	83 ec 0c             	sub    esp,0xc
c000b4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ea:	e8 cd ff ff ff       	call   c000b4bc <Clock::~Clock()>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	83 ec 08             	sub    esp,0x8
c000b4f5:	68 58 01 00 00       	push   0x158
c000b4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fe:	e8 8e ef ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	83 c4 0c             	add    esp,0xc
c000b509:	c3                   	ret    

c000b50a <Clock::timeInSecondsLocal()>:
c000b50a:	53                   	push   ebx
c000b50b:	83 ec 14             	sub    esp,0x14
c000b50e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b512:	8b 10                	mov    edx,DWORD PTR [eax]
c000b514:	50                   	push   eax
c000b515:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b518:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b51f:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b525:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b52b:	89 cb                	mov    ebx,ecx
c000b52d:	c1 fb 1f             	sar    ebx,0x1f
c000b530:	01 c8                	add    eax,ecx
c000b532:	11 da                	adc    edx,ebx
c000b534:	83 c4 10             	add    esp,0x10
c000b537:	31 c9                	xor    ecx,ecx
c000b539:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b540:	74 05                	je     c000b547 <Clock::timeInSecondsLocal()+0x3d>
c000b542:	b9 08 07 00 00       	mov    ecx,0x708
c000b547:	31 db                	xor    ebx,ebx
c000b549:	01 c8                	add    eax,ecx
c000b54b:	11 da                	adc    edx,ebx
c000b54d:	83 c4 08             	add    esp,0x8
c000b550:	5b                   	pop    ebx
c000b551:	c3                   	ret    

c000b552 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b552:	57                   	push   edi
c000b553:	56                   	push   esi
c000b554:	53                   	push   ebx
c000b555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b559:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b55d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b55f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b563:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b566:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b56d:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b573:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b579:	99                   	cdq    
c000b57a:	29 c6                	sub    esi,eax
c000b57c:	19 d7                	sbb    edi,edx
c000b57e:	89 f0                	mov    eax,esi
c000b580:	89 fa                	mov    edx,edi
c000b582:	31 f6                	xor    esi,esi
c000b584:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b58b:	74 05                	je     c000b592 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b58d:	be 08 07 00 00       	mov    esi,0x708
c000b592:	31 ff                	xor    edi,edi
c000b594:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b598:	29 f0                	sub    eax,esi
c000b59a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b59e:	19 fa                	sbb    edx,edi
c000b5a0:	89 d8                	mov    eax,ebx
c000b5a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	ff e0                	jmp    eax

c000b5ab <datetimeToSeconds(datetime_t)>:
c000b5ab:	55                   	push   ebp
c000b5ac:	57                   	push   edi
c000b5ad:	56                   	push   esi
c000b5ae:	53                   	push   ebx
c000b5af:	83 ec 14             	sub    esp,0x14
c000b5b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5b6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5ba:	89 d3                	mov    ebx,edx
c000b5bc:	0f b6 c6             	movzx  eax,dh
c000b5bf:	c1 eb 10             	shr    ebx,0x10
c000b5c2:	48                   	dec    eax
c000b5c3:	66 81 eb 6c 07       	sub    bx,0x76c
c000b5c8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b5cc:	0f b6 f5             	movzx  esi,ch
c000b5cf:	89 cf                	mov    edi,ecx
c000b5d1:	6b f6 3c             	imul   esi,esi,0x3c
c000b5d4:	c1 ef 10             	shr    edi,0x10
c000b5d7:	0f b6 c9             	movzx  ecx,cl
c000b5da:	89 f8                	mov    eax,edi
c000b5dc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5e2:	0f b6 f8             	movzx  edi,al
c000b5e5:	0f b6 d2             	movzx  edx,dl
c000b5e8:	01 fe                	add    esi,edi
c000b5ea:	01 f1                	add    ecx,esi
c000b5ec:	0f b7 f3             	movzx  esi,bx
c000b5ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b5f3:	c1 f9 1f             	sar    ecx,0x1f
c000b5f6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5ff:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b604:	8b 0c 8d 00 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2100]
c000b60b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b60f:	76 29                	jbe    c000b63a <datetimeToSeconds(datetime_t)+0x8f>
c000b611:	f6 c3 03             	test   bl,0x3
c000b614:	75 24                	jne    c000b63a <datetimeToSeconds(datetime_t)+0x8f>
c000b616:	31 d2                	xor    edx,edx
c000b618:	bf 64 00 00 00       	mov    edi,0x64
c000b61d:	89 d8                	mov    eax,ebx
c000b61f:	66 f7 f7             	div    di
c000b622:	66 85 d2             	test   dx,dx
c000b625:	75 12                	jne    c000b639 <datetimeToSeconds(datetime_t)+0x8e>
c000b627:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b62d:	bf 90 01 00 00       	mov    edi,0x190
c000b632:	99                   	cdq    
c000b633:	f7 ff                	idiv   edi
c000b635:	85 d2                	test   edx,edx
c000b637:	75 01                	jne    c000b63a <datetimeToSeconds(datetime_t)+0x8f>
c000b639:	41                   	inc    ecx
c000b63a:	66 83 fb 46          	cmp    bx,0x46
c000b63e:	76 45                	jbe    c000b685 <datetimeToSeconds(datetime_t)+0xda>
c000b640:	bb 46 00 00 00       	mov    ebx,0x46
c000b645:	bf 64 00 00 00       	mov    edi,0x64
c000b64a:	bd 90 01 00 00       	mov    ebp,0x190
c000b64f:	b8 6d 01 00 00       	mov    eax,0x16d
c000b654:	f6 c3 03             	test   bl,0x3
c000b657:	75 23                	jne    c000b67c <datetimeToSeconds(datetime_t)+0xd1>
c000b659:	89 d8                	mov    eax,ebx
c000b65b:	99                   	cdq    
c000b65c:	f7 ff                	idiv   edi
c000b65e:	b8 6e 01 00 00       	mov    eax,0x16e
c000b663:	85 d2                	test   edx,edx
c000b665:	75 15                	jne    c000b67c <datetimeToSeconds(datetime_t)+0xd1>
c000b667:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b66d:	99                   	cdq    
c000b66e:	f7 fd                	idiv   ebp
c000b670:	31 c0                	xor    eax,eax
c000b672:	85 d2                	test   edx,edx
c000b674:	0f 94 c0             	sete   al
c000b677:	05 6d 01 00 00       	add    eax,0x16d
c000b67c:	01 c1                	add    ecx,eax
c000b67e:	43                   	inc    ebx
c000b67f:	39 f3                	cmp    ebx,esi
c000b681:	7c cc                	jl     c000b64f <datetimeToSeconds(datetime_t)+0xa4>
c000b683:	eb 3b                	jmp    c000b6c0 <datetimeToSeconds(datetime_t)+0x115>
c000b685:	74 39                	je     c000b6c0 <datetimeToSeconds(datetime_t)+0x115>
c000b687:	b8 45 00 00 00       	mov    eax,0x45
c000b68c:	89 c2                	mov    edx,eax
c000b68e:	83 e2 03             	and    edx,0x3
c000b691:	39 f0                	cmp    eax,esi
c000b693:	7e 13                	jle    c000b6a8 <datetimeToSeconds(datetime_t)+0xfd>
c000b695:	85 d2                	test   edx,edx
c000b697:	0f 94 c2             	sete   dl
c000b69a:	48                   	dec    eax
c000b69b:	0f b6 d2             	movzx  edx,dl
c000b69e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b6a4:	29 d1                	sub    ecx,edx
c000b6a6:	eb e4                	jmp    c000b68c <datetimeToSeconds(datetime_t)+0xe1>
c000b6a8:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6ad:	85 d2                	test   edx,edx
c000b6af:	75 0d                	jne    c000b6be <datetimeToSeconds(datetime_t)+0x113>
c000b6b1:	31 c0                	xor    eax,eax
c000b6b3:	66 85 db             	test   bx,bx
c000b6b6:	0f 95 c0             	setne  al
c000b6b9:	05 6d 01 00 00       	add    eax,0x16d
c000b6be:	29 c1                	sub    ecx,eax
c000b6c0:	b8 80 51 01 00       	mov    eax,0x15180
c000b6c5:	f7 e9                	imul   ecx
c000b6c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b6cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b6cf:	83 c4 14             	add    esp,0x14
c000b6d2:	5b                   	pop    ebx
c000b6d3:	5e                   	pop    esi
c000b6d4:	5f                   	pop    edi
c000b6d5:	5d                   	pop    ebp
c000b6d6:	c3                   	ret    
c000b6d7:	90                   	nop

c000b6d8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b6d8:	57                   	push   edi
c000b6d9:	56                   	push   esi
c000b6da:	53                   	push   ebx
c000b6db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6e1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6ec:	e8 ba fe ff ff       	call   c000b5ab <datetimeToSeconds(datetime_t)>
c000b6f1:	59                   	pop    ecx
c000b6f2:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6f9:	5b                   	pop    ebx
c000b6fa:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b700:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b706:	89 cb                	mov    ebx,ecx
c000b708:	c1 fb 1f             	sar    ebx,0x1f
c000b70b:	29 c8                	sub    eax,ecx
c000b70d:	19 da                	sbb    edx,ebx
c000b70f:	31 c9                	xor    ecx,ecx
c000b711:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b718:	74 05                	je     c000b71f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b71a:	b9 08 07 00 00       	mov    ecx,0x708
c000b71f:	31 db                	xor    ebx,ebx
c000b721:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b725:	29 c8                	sub    eax,ecx
c000b727:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b72b:	19 da                	sbb    edx,ebx
c000b72d:	89 f8                	mov    eax,edi
c000b72f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b733:	5b                   	pop    ebx
c000b734:	5e                   	pop    esi
c000b735:	5f                   	pop    edi
c000b736:	ff e0                	jmp    eax

c000b738 <secondsToDatetime(unsigned long long)>:
c000b738:	55                   	push   ebp
c000b739:	57                   	push   edi
c000b73a:	56                   	push   esi
c000b73b:	53                   	push   ebx
c000b73c:	83 ec 1c             	sub    esp,0x1c
c000b73f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b743:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b747:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b74b:	6a 00                	push   0x0
c000b74d:	68 80 51 01 00       	push   0x15180
c000b752:	55                   	push   ebp
c000b753:	57                   	push   edi
c000b754:	e8 07 0a 01 00       	call   c001c160 <__udivdi3>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b762:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b766:	6a 00                	push   0x0
c000b768:	68 80 51 01 00       	push   0x15180
c000b76d:	55                   	push   ebp
c000b76e:	57                   	push   edi
c000b76f:	bf 10 0e 00 00       	mov    edi,0xe10
c000b774:	e8 e7 0a 01 00       	call   c001c260 <__umoddi3>
c000b779:	83 c4 10             	add    esp,0x10
c000b77c:	99                   	cdq    
c000b77d:	f7 ff                	idiv   edi
c000b77f:	bf 3c 00 00 00       	mov    edi,0x3c
c000b784:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b787:	89 d0                	mov    eax,edx
c000b789:	99                   	cdq    
c000b78a:	f7 ff                	idiv   edi
c000b78c:	85 db                	test   ebx,ebx
c000b78e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b791:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b794:	79 11                	jns    c000b7a7 <secondsToDatetime(unsigned long long)+0x6f>
c000b796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b79a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b7a0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7a5:	eb 07                	jmp    c000b7ae <secondsToDatetime(unsigned long long)+0x76>
c000b7a7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7ac:	89 d8                	mov    eax,ebx
c000b7ae:	bf b4 05 00 00       	mov    edi,0x5b4
c000b7b3:	99                   	cdq    
c000b7b4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b7b9:	f7 f9                	idiv   ecx
c000b7bb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b7c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7c4:	31 d2                	xor    edx,edx
c000b7c6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b7ce:	01 c3                	add    ebx,eax
c000b7d0:	89 d8                	mov    eax,ebx
c000b7d2:	f7 f1                	div    ecx
c000b7d4:	31 d2                	xor    edx,edx
c000b7d6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b7d9:	89 d8                	mov    eax,ebx
c000b7db:	f7 f7                	div    edi
c000b7dd:	31 d2                	xor    edx,edx
c000b7df:	29 c1                	sub    ecx,eax
c000b7e1:	89 d8                	mov    eax,ebx
c000b7e3:	f7 f5                	div    ebp
c000b7e5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b7ea:	29 c1                	sub    ecx,eax
c000b7ec:	31 d2                	xor    edx,edx
c000b7ee:	89 c8                	mov    eax,ecx
c000b7f0:	f7 f5                	div    ebp
c000b7f2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7fb:	31 d2                	xor    edx,edx
c000b7fd:	89 c8                	mov    eax,ecx
c000b7ff:	f7 f5                	div    ebp
c000b801:	31 d2                	xor    edx,edx
c000b803:	01 c3                	add    ebx,eax
c000b805:	89 c8                	mov    eax,ecx
c000b807:	f7 f7                	div    edi
c000b809:	bf 99 00 00 00       	mov    edi,0x99
c000b80e:	29 c3                	sub    ebx,eax
c000b810:	31 d2                	xor    edx,edx
c000b812:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b81a:	29 c3                	sub    ebx,eax
c000b81c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b81f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b822:	bb 05 00 00 00       	mov    ebx,0x5
c000b827:	83 c1 02             	add    ecx,0x2
c000b82a:	89 c8                	mov    eax,ecx
c000b82c:	f7 f7                	div    edi
c000b82e:	31 d2                	xor    edx,edx
c000b830:	89 c7                	mov    edi,eax
c000b832:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b838:	83 c0 02             	add    eax,0x2
c000b83b:	f7 f3                	div    ebx
c000b83d:	89 eb                	mov    ebx,ebp
c000b83f:	29 c3                	sub    ebx,eax
c000b841:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b847:	88 1e                	mov    BYTE PTR [esi],bl
c000b849:	19 c0                	sbb    eax,eax
c000b84b:	31 d2                	xor    edx,edx
c000b84d:	83 e0 0c             	and    eax,0xc
c000b850:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b854:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b85c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b860:	83 f9 01             	cmp    ecx,0x1
c000b863:	0f 96 c2             	setbe  dl
c000b866:	41                   	inc    ecx
c000b867:	01 d0                	add    eax,edx
c000b869:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b86c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b870:	83 c4 1c             	add    esp,0x1c
c000b873:	89 f0                	mov    eax,esi
c000b875:	5b                   	pop    ebx
c000b876:	5e                   	pop    esi
c000b877:	5f                   	pop    edi
c000b878:	5d                   	pop    ebp
c000b879:	c2 04 00             	ret    0x4

c000b87c <Clock::timeInDatetimeLocal()>:
c000b87c:	53                   	push   ebx
c000b87d:	83 ec 14             	sub    esp,0x14
c000b880:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b884:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b888:	e8 7d fc ff ff       	call   c000b50a <Clock::timeInSecondsLocal()>
c000b88d:	83 c4 0c             	add    esp,0xc
c000b890:	52                   	push   edx
c000b891:	50                   	push   eax
c000b892:	53                   	push   ebx
c000b893:	e8 a0 fe ff ff       	call   c000b738 <secondsToDatetime(unsigned long long)>
c000b898:	89 d8                	mov    eax,ebx
c000b89a:	83 c4 14             	add    esp,0x14
c000b89d:	5b                   	pop    ebx
c000b89e:	c2 04 00             	ret    0x4
c000b8a1:	90                   	nop

c000b8a2 <Device::hibernate()>:
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Device::wake()>:
c000b8a4:	c3                   	ret    
c000b8a5:	90                   	nop

c000b8a6 <Device::detect()>:
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <Device::disableLegacy()>:
c000b8a8:	c3                   	ret    
c000b8a9:	90                   	nop

c000b8aa <Device::powerSaving(PowerSavingLevel)>:
c000b8aa:	c3                   	ret    
c000b8ab:	90                   	nop

c000b8ac <DriverlessDevice::close(int, int, void*)>:
c000b8ac:	31 c0                	xor    eax,eax
c000b8ae:	c3                   	ret    
c000b8af:	90                   	nop

c000b8b0 <DriverlessDevice::detect()>:
c000b8b0:	c3                   	ret    
c000b8b1:	90                   	nop

c000b8b2 <DriverlessDevice::open(int, int, void*)>:
c000b8b2:	83 ec 18             	sub    esp,0x18
c000b8b5:	68 30 df 01 c0       	push   0xc001df30
c000b8ba:	e8 48 49 00 00       	call   c0010207 <KePanic(char const*)>
c000b8bf:	83 c8 ff             	or     eax,0xffffffff
c000b8c2:	83 c4 1c             	add    esp,0x1c
c000b8c5:	c3                   	ret    

c000b8c6 <Device::~Device()>:
c000b8c6:	ba 90 df 01 c0       	mov    edx,0xc001df90
c000b8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8cf:	89 10                	mov    DWORD PTR [eax],edx
c000b8d1:	90                   	nop
c000b8d2:	c3                   	ret    
c000b8d3:	90                   	nop

c000b8d4 <Device::~Device()>:
c000b8d4:	83 ec 0c             	sub    esp,0xc
c000b8d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b8db:	e8 e6 ff ff ff       	call   c000b8c6 <Device::~Device()>
c000b8e0:	83 c4 04             	add    esp,0x4
c000b8e3:	83 ec 08             	sub    esp,0x8
c000b8e6:	68 58 01 00 00       	push   0x158
c000b8eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ef:	e8 9d eb ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000b8f4:	83 c4 10             	add    esp,0x10
c000b8f7:	83 c4 0c             	add    esp,0xc
c000b8fa:	c3                   	ret    
c000b8fb:	90                   	nop

c000b8fc <Device::findAndLoadDriver()>:
c000b8fc:	c7 44 24 04 4e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df4e
c000b904:	e9 7e ec ff ff       	jmp    c000a587 <Dbg::kprintf(char const*, ...)>
c000b909:	90                   	nop

c000b90a <Device::preOpenPCI(PCIDeviceInfo)>:
c000b90a:	57                   	push   edi
c000b90b:	b9 09 00 00 00       	mov    ecx,0x9
c000b910:	56                   	push   esi
c000b911:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b915:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b919:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b923:	81 c7 18 01 00 00    	add    edi,0x118
c000b929:	fc                   	cld    
c000b92a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b92c:	5e                   	pop    esi
c000b92d:	5f                   	pop    edi
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Device::preOpenACPI(void*, char*, char*)>:
c000b930:	57                   	push   edi
c000b931:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b936:	56                   	push   esi
c000b937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b93b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b93f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b949:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b94f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b955:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b959:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b95b:	b9 0e 00 00 00       	mov    ecx,0xe
c000b960:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b966:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b96c:	5e                   	pop    esi
c000b96d:	5f                   	pop    edi
c000b96e:	c3                   	ret    
c000b96f:	90                   	nop

c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b970:	53                   	push   ebx
c000b971:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b979:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b97d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b981:	0f b6 c0             	movzx  eax,al
c000b984:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b988:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b98c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b990:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b994:	5b                   	pop    ebx
c000b995:	e9 a6 05 00 00       	jmp    c000bf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b99a <Device::getParent()>:
c000b99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b9a4:	c3                   	ret    
c000b9a5:	90                   	nop

c000b9a6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b9a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9ae:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b9b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9bf:	e9 e8 06 00 00       	jmp    c000c0ac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b9c4 <Device::addChild(Device*)>:
c000b9c4:	53                   	push   ebx
c000b9c5:	83 ec 08             	sub    esp,0x8
c000b9c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9d0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b9d6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9de:	85 d2                	test   edx,edx
c000b9e0:	74 04                	je     c000b9e6 <Device::addChild(Device*)+0x22>
c000b9e2:	89 d3                	mov    ebx,edx
c000b9e4:	eb f6                	jmp    c000b9dc <Device::addChild(Device*)+0x18>
c000b9e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b9e9:	83 ec 0c             	sub    esp,0xc
c000b9ec:	6a 08                	push   0x8
c000b9ee:	e8 c6 bd ff ff       	call   c00077b9 <malloc>
c000b9f3:	89 03                	mov    DWORD PTR [ebx],eax
c000b9f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba02:	83 c4 18             	add    esp,0x18
c000ba05:	5b                   	pop    ebx
c000ba06:	c3                   	ret    
c000ba07:	90                   	nop

c000ba08 <Device::removeAllChildren()>:
c000ba08:	56                   	push   esi
c000ba09:	53                   	push   ebx
c000ba0a:	52                   	push   edx
c000ba0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba0f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba18:	74 17                	je     c000ba31 <Device::removeAllChildren()+0x29>
c000ba1a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba1d:	85 c0                	test   eax,eax
c000ba1f:	74 0c                	je     c000ba2d <Device::removeAllChildren()+0x25>
c000ba21:	83 ec 0c             	sub    esp,0xc
c000ba24:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba26:	50                   	push   eax
c000ba27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba2a:	83 c4 10             	add    esp,0x10
c000ba2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2f:	eb e4                	jmp    c000ba15 <Device::removeAllChildren()+0xd>
c000ba31:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba3d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba4a:	58                   	pop    eax
c000ba4b:	5b                   	pop    ebx
c000ba4c:	5e                   	pop    esi
c000ba4d:	c3                   	ret    

c000ba4e <Device::hibernateAll()>:
c000ba4e:	53                   	push   ebx
c000ba4f:	83 ec 14             	sub    esp,0x14
c000ba52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba58:	53                   	push   ebx
c000ba59:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba5c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba68:	74 0f                	je     c000ba79 <Device::hibernateAll()+0x2b>
c000ba6a:	83 ec 0c             	sub    esp,0xc
c000ba6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba70:	e8 d9 ff ff ff       	call   c000ba4e <Device::hibernateAll()>
c000ba75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba77:	eb e9                	jmp    c000ba62 <Device::hibernateAll()+0x14>
c000ba79:	83 c4 08             	add    esp,0x8
c000ba7c:	5b                   	pop    ebx
c000ba7d:	c3                   	ret    

c000ba7e <Device::wakeAll()>:
c000ba7e:	53                   	push   ebx
c000ba7f:	83 ec 14             	sub    esp,0x14
c000ba82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba88:	53                   	push   ebx
c000ba89:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba8c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba98:	74 0f                	je     c000baa9 <Device::wakeAll()+0x2b>
c000ba9a:	83 ec 0c             	sub    esp,0xc
c000ba9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baa0:	e8 d9 ff ff ff       	call   c000ba7e <Device::wakeAll()>
c000baa5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa7:	eb e9                	jmp    c000ba92 <Device::wakeAll()+0x14>
c000baa9:	83 c4 08             	add    esp,0x8
c000baac:	5b                   	pop    ebx
c000baad:	c3                   	ret    

c000baae <Device::detectAll()>:
c000baae:	53                   	push   ebx
c000baaf:	83 ec 14             	sub    esp,0x14
c000bab2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bab8:	53                   	push   ebx
c000bab9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000babc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bac2:	83 c4 10             	add    esp,0x10
c000bac5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bac8:	74 0f                	je     c000bad9 <Device::detectAll()+0x2b>
c000baca:	83 ec 0c             	sub    esp,0xc
c000bacd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bad0:	e8 d9 ff ff ff       	call   c000baae <Device::detectAll()>
c000bad5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bad7:	eb e9                	jmp    c000bac2 <Device::detectAll()+0x14>
c000bad9:	83 c4 08             	add    esp,0x8
c000badc:	5b                   	pop    ebx
c000badd:	c3                   	ret    

c000bade <Device::disableLegacyAll()>:
c000bade:	c3                   	ret    
c000badf:	90                   	nop

c000bae0 <Device::loadDriversForAll()>:
c000bae0:	c3                   	ret    
c000bae1:	90                   	nop

c000bae2 <Device::closeAll()>:
c000bae2:	53                   	push   ebx
c000bae3:	83 ec 08             	sub    esp,0x8
c000bae6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000baea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baec:	6a 00                	push   0x0
c000baee:	6a 00                	push   0x0
c000baf0:	6a 00                	push   0x0
c000baf2:	53                   	push   ebx
c000baf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baf6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bafc:	83 c4 10             	add    esp,0x10
c000baff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb02:	74 0f                	je     c000bb13 <Device::closeAll()+0x31>
c000bb04:	83 ec 0c             	sub    esp,0xc
c000bb07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb0a:	e8 d3 ff ff ff       	call   c000bae2 <Device::closeAll()>
c000bb0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb11:	eb e9                	jmp    c000bafc <Device::closeAll()+0x1a>
c000bb13:	83 c4 08             	add    esp,0x8
c000bb16:	5b                   	pop    ebx
c000bb17:	c3                   	ret    

c000bb18 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb18:	56                   	push   esi
c000bb19:	53                   	push   ebx
c000bb1a:	83 ec 0c             	sub    esp,0xc
c000bb1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb21:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb25:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb27:	56                   	push   esi
c000bb28:	53                   	push   ebx
c000bb29:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb32:	83 c4 10             	add    esp,0x10
c000bb35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb38:	74 0f                	je     c000bb49 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb3a:	52                   	push   edx
c000bb3b:	52                   	push   edx
c000bb3c:	56                   	push   esi
c000bb3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb40:	e8 d3 ff ff ff       	call   c000bb18 <Device::powerSavingAll(PowerSavingLevel)>
c000bb45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb47:	eb e9                	jmp    c000bb32 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb49:	58                   	pop    eax
c000bb4a:	5b                   	pop    ebx
c000bb4b:	5e                   	pop    esi
c000bb4c:	c3                   	ret    
c000bb4d:	90                   	nop

c000bb4e <Device::setName(char const*)>:
c000bb4e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb56:	e9 a5 4a ff ff       	jmp    c0000600 <strcpy>
c000bb5b:	90                   	nop

c000bb5c <Device::Device(char const*)>:
c000bb5c:	83 ec 1c             	sub    esp,0x1c
c000bb5f:	ba 90 df 01 c0       	mov    edx,0xc001df90
c000bb64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb68:	89 10                	mov    DWORD PTR [eax],edx
c000bb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bba2:	83 ec 08             	sub    esp,0x8
c000bba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbad:	e8 9c ff ff ff       	call   c000bb4e <Device::setName(char const*)>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc4:	e8 f0 bb ff ff       	call   c00077b9 <malloc>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bbdd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc08:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc13:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc2c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc3a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc48:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc52:	90                   	nop
c000bc53:	83 c4 1c             	add    esp,0x1c
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <Device::getName()>:
c000bc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc5c:	05 d0 00 00 00       	add    eax,0xd0
c000bc61:	c3                   	ret    

c000bc62 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc69:	83 ec 08             	sub    esp,0x8
c000bc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc70:	50                   	push   eax
c000bc71:	e8 e6 fe ff ff       	call   c000bb5c <Device::Device(char const*)>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	ba bc df 01 c0       	mov    edx,0xc001dfbc
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	89 10                	mov    DWORD PTR [eax],edx
c000bc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc88:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc92:	90                   	nop
c000bc93:	83 c4 0c             	add    esp,0xc
c000bc96:	c3                   	ret    
c000bc97:	90                   	nop

c000bc98 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc98:	57                   	push   edi
c000bc99:	56                   	push   esi
c000bc9a:	53                   	push   ebx
c000bc9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc9f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bca3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bca7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bcad:	75 0c                	jne    c000bcbb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bcaf:	52                   	push   edx
c000bcb0:	52                   	push   edx
c000bcb1:	53                   	push   ebx
c000bcb2:	56                   	push   esi
c000bcb3:	e8 5a 09 01 00       	call   c001c612 <LinkedList<Device>::addElement(Device*)>
c000bcb8:	83 c4 10             	add    esp,0x10
c000bcbb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcc4:	74 12                	je     c000bcd8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bcc6:	50                   	push   eax
c000bcc7:	57                   	push   edi
c000bcc8:	56                   	push   esi
c000bcc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bccc:	e8 c7 ff ff ff       	call   c000bc98 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bcd3:	83 c4 10             	add    esp,0x10
c000bcd6:	eb e9                	jmp    c000bcc1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bcd8:	5b                   	pop    ebx
c000bcd9:	5e                   	pop    esi
c000bcda:	5f                   	pop    edi
c000bcdb:	c3                   	ret    

c000bcdc <getDevicesOfType(DeviceType)>:
c000bcdc:	53                   	push   ebx
c000bcdd:	83 ec 14             	sub    esp,0x14
c000bce0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bce4:	53                   	push   ebx
c000bce5:	e8 04 0a 01 00       	call   c001c6ee <LinkedList<Device>::LinkedList()>
c000bcea:	83 c4 0c             	add    esp,0xc
c000bced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcf1:	53                   	push   ebx
c000bcf2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bcf8:	e8 9b ff ff ff       	call   c000bc98 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcfd:	89 d8                	mov    eax,ebx
c000bcff:	83 c4 18             	add    esp,0x18
c000bd02:	5b                   	pop    ebx
c000bd03:	c2 04 00             	ret    0x4
c000bd06:	66 90                	xchg   ax,ax

c000bd08 <HardDiskController::HardDiskController(char const*)>:
c000bd08:	83 ec 0c             	sub    esp,0xc
c000bd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0f:	83 ec 08             	sub    esp,0x8
c000bd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd16:	50                   	push   eax
c000bd17:	e8 40 fe ff ff       	call   c000bb5c <Device::Device(char const*)>
c000bd1c:	83 c4 10             	add    esp,0x10
c000bd1f:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c000bd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd28:	89 10                	mov    DWORD PTR [eax],edx
c000bd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd38:	90                   	nop
c000bd39:	83 c4 0c             	add    esp,0xc
c000bd3c:	c3                   	ret    
c000bd3d:	90                   	nop
c000bd3e:	66 90                	xchg   ax,ax

c000bd40 <HardDiskController::~HardDiskController()>:
c000bd40:	83 ec 0c             	sub    esp,0xc
c000bd43:	ba e8 df 01 c0       	mov    edx,0xc001dfe8
c000bd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4c:	89 10                	mov    DWORD PTR [eax],edx
c000bd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd52:	83 ec 0c             	sub    esp,0xc
c000bd55:	50                   	push   eax
c000bd56:	e8 6b fb ff ff       	call   c000b8c6 <Device::~Device()>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	90                   	nop
c000bd5f:	83 c4 0c             	add    esp,0xc
c000bd62:	c3                   	ret    
c000bd63:	90                   	nop

c000bd64 <HardDiskController::~HardDiskController()>:
c000bd64:	83 ec 0c             	sub    esp,0xc
c000bd67:	83 ec 0c             	sub    esp,0xc
c000bd6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6e:	e8 cd ff ff ff       	call   c000bd40 <HardDiskController::~HardDiskController()>
c000bd73:	83 c4 10             	add    esp,0x10
c000bd76:	83 ec 08             	sub    esp,0x8
c000bd79:	68 58 01 00 00       	push   0x158
c000bd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd82:	e8 0a e7 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	83 c4 0c             	add    esp,0xc
c000bd8d:	c3                   	ret    

c000bd8e <PhysicalDisk::eject()>:
c000bd8e:	83 c8 ff             	or     eax,0xffffffff
c000bd91:	c3                   	ret    

c000bd92 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd92:	83 ec 0c             	sub    esp,0xc
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	83 ec 08             	sub    esp,0x8
c000bd9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bda0:	50                   	push   eax
c000bda1:	e8 b6 fd ff ff       	call   c000bb5c <Device::Device(char const*)>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	ba 14 e0 01 c0       	mov    edx,0xc001e014
c000bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb2:	89 10                	mov    DWORD PTR [eax],edx
c000bdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bde0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bdf4:	90                   	nop
c000bdf5:	83 c4 0c             	add    esp,0xc
c000bdf8:	c3                   	ret    
c000bdf9:	90                   	nop

c000bdfa <PhysicalDisk::startCache()>:
c000bdfa:	56                   	push   esi
c000bdfb:	53                   	push   ebx
c000bdfc:	83 ec 10             	sub    esp,0x10
c000bdff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be03:	6a 44                	push   0x44
c000be05:	e8 af b9 ff ff       	call   c00077b9 <malloc>
c000be0a:	89 c6                	mov    esi,eax
c000be0c:	58                   	pop    eax
c000be0d:	5a                   	pop    edx
c000be0e:	53                   	push   ebx
c000be0f:	56                   	push   esi
c000be10:	e8 eb 15 00 00       	call   c000d400 <VCache::VCache(PhysicalDisk*)>
c000be15:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be1b:	83 c4 14             	add    esp,0x14
c000be1e:	5b                   	pop    ebx
c000be1f:	5e                   	pop    esi
c000be20:	c3                   	ret    
c000be21:	90                   	nop

c000be22 <PhysicalDisk::~PhysicalDisk()>:
c000be22:	83 ec 0c             	sub    esp,0xc
c000be25:	ba 14 e0 01 c0       	mov    edx,0xc001e014
c000be2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2e:	89 10                	mov    DWORD PTR [eax],edx
c000be30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	50                   	push   eax
c000be38:	e8 89 fa ff ff       	call   c000b8c6 <Device::~Device()>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	90                   	nop
c000be41:	83 c4 0c             	add    esp,0xc
c000be44:	c3                   	ret    
c000be45:	90                   	nop

c000be46 <PhysicalDisk::~PhysicalDisk()>:
c000be46:	83 ec 0c             	sub    esp,0xc
c000be49:	83 ec 0c             	sub    esp,0xc
c000be4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be50:	e8 cd ff ff ff       	call   c000be22 <PhysicalDisk::~PhysicalDisk()>
c000be55:	83 c4 10             	add    esp,0x10
c000be58:	83 ec 08             	sub    esp,0x8
c000be5b:	68 6c 01 00 00       	push   0x16c
c000be60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be64:	e8 28 e6 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	83 c4 0c             	add    esp,0xc
c000be6f:	c3                   	ret    

c000be70 <int_handler>:
c000be70:	55                   	push   ebp
c000be71:	57                   	push   edi
c000be72:	56                   	push   esi
c000be73:	53                   	push   ebx
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be7b:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be82:	74 0b                	je     c000be8f <int_handler+0x1f>
c000be84:	fa                   	cli    
c000be85:	f4                   	hlt    
c000be86:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be8d:	75 f5                	jne    c000be84 <int_handler+0x14>
c000be8f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be92:	8d 46 e0             	lea    eax,[esi-0x20]
c000be95:	83 f8 17             	cmp    eax,0x17
c000be98:	76 3e                	jbe    c000bed8 <int_handler+0x68>
c000be9a:	c1 e6 04             	shl    esi,0x4
c000be9d:	31 db                	xor    ebx,ebx
c000be9f:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bea5:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000beab:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000beaf:	85 c0                	test   eax,eax
c000beb1:	74 13                	je     c000bec6 <int_handler+0x56>
c000beb3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000beb6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000beba:	74 2a                	je     c000bee6 <int_handler+0x76>
c000bebc:	83 ec 08             	sub    esp,0x8
c000bebf:	52                   	push   edx
c000bec0:	57                   	push   edi
c000bec1:	ff d0                	call   eax
c000bec3:	83 c4 10             	add    esp,0x10
c000bec6:	43                   	inc    ebx
c000bec7:	83 fb 04             	cmp    ebx,0x4
c000beca:	75 df                	jne    c000beab <int_handler+0x3b>
c000becc:	83 c4 0c             	add    esp,0xc
c000becf:	31 c0                	xor    eax,eax
c000bed1:	5b                   	pop    ebx
c000bed2:	31 d2                	xor    edx,edx
c000bed4:	5e                   	pop    esi
c000bed5:	5f                   	pop    edi
c000bed6:	5d                   	pop    ebp
c000bed7:	c3                   	ret    
c000bed8:	83 ec 0c             	sub    esp,0xc
c000bedb:	50                   	push   eax
c000bedc:	e8 0a 9a 00 00       	call   c00158eb <HalEndOfInterrupt(int)>
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	eb b4                	jmp    c000be9a <int_handler+0x2a>
c000bee6:	83 ec 08             	sub    esp,0x8
c000bee9:	52                   	push   edx
c000beea:	57                   	push   edi
c000beeb:	ff d0                	call   eax
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	83 c4 0c             	add    esp,0xc
c000bef3:	5b                   	pop    ebx
c000bef4:	5e                   	pop    esi
c000bef5:	5f                   	pop    edi
c000bef6:	5d                   	pop    ebp
c000bef7:	c3                   	ret    

c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bef8:	56                   	push   esi
c000bef9:	31 c0                	xor    eax,eax
c000befb:	53                   	push   ebx
c000befc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf04:	89 ca                	mov    edx,ecx
c000bf06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf0a:	c1 e2 04             	shl    edx,0x4
c000bf0d:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bf15:	74 15                	je     c000bf2c <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf17:	40                   	inc    eax
c000bf18:	83 f8 04             	cmp    eax,0x4
c000bf1b:	75 f0                	jne    c000bf0d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf1d:	c7 44 24 0c 44 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e044
c000bf25:	5b                   	pop    ebx
c000bf26:	5e                   	pop    esi
c000bf27:	e9 db 42 00 00       	jmp    c0010207 <KePanic(char const*)>
c000bf2c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf2f:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bf36:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	c3                   	ret    

c000bf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf40:	57                   	push   edi
c000bf41:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bf47:	56                   	push   esi
c000bf48:	53                   	push   ebx
c000bf49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf51:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf58:	74 5b                	je     c000bfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf5a:	89 c7                	mov    edi,eax
c000bf5c:	84 c0                	test   al,al
c000bf5e:	74 24                	je     c000bf84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf60:	83 fe 0f             	cmp    esi,0xf
c000bf63:	0f 8f d9 00 00 00    	jg     c000c042 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf69:	8a 86 80 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0780]
c000bf6f:	25 ff 00 00 00       	and    eax,0xff
c000bf74:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf7c:	89 c6                	mov    esi,eax
c000bf7e:	66 d1 ef             	shr    di,1
c000bf81:	83 e7 01             	and    edi,0x1
c000bf84:	83 ec 08             	sub    esp,0x8
c000bf87:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf8c:	31 db                	xor    ebx,ebx
c000bf8e:	50                   	push   eax
c000bf8f:	68 51 e0 01 c0       	push   0xc001e051
c000bf94:	e8 ee e5 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000bf99:	83 c4 10             	add    esp,0x10
c000bf9c:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bfa1:	85 c0                	test   eax,eax
c000bfa3:	7f 51                	jg     c000bff6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bfa5:	83 ec 0c             	sub    esp,0xc
c000bfa8:	68 68 e0 01 c0       	push   0xc001e068
c000bfad:	e8 55 42 00 00       	call   c0010207 <KePanic(char const*)>
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bfb8:	31 d2                	xor    edx,edx
c000bfba:	89 c8                	mov    eax,ecx
c000bfbc:	c1 e0 04             	shl    eax,0x4
c000bfbf:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bfc6:	85 db                	test   ebx,ebx
c000bfc8:	0f 84 8b 00 00 00    	je     c000c059 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bfce:	42                   	inc    edx
c000bfcf:	83 fa 04             	cmp    edx,0x4
c000bfd2:	75 eb                	jne    c000bfbf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bfd4:	83 ec 0c             	sub    esp,0xc
c000bfd7:	68 bc e0 01 c0       	push   0xc001e0bc
c000bfdc:	e8 26 42 00 00       	call   c0010207 <KePanic(char const*)>
c000bfe1:	83 c4 10             	add    esp,0x10
c000bfe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfe9:	5b                   	pop    ebx
c000bfea:	5e                   	pop    esi
c000bfeb:	5f                   	pop    edi
c000bfec:	c3                   	ret    
c000bfed:	43                   	inc    ebx
c000bfee:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bff4:	7e af                	jle    c000bfa5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bff6:	83 ec 08             	sub    esp,0x8
c000bff9:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c000:	56                   	push   esi
c000c001:	50                   	push   eax
c000c002:	e8 d1 f5 00 00       	call   c001b5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c007:	83 c4 10             	add    esp,0x10
c000c00a:	84 c0                	test   al,al
c000c00c:	74 df                	je     c000bfed <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c00e:	81 e7 ff 00 00 00    	and    edi,0xff
c000c014:	50                   	push   eax
c000c015:	8d 46 20             	lea    eax,[esi+0x20]
c000c018:	57                   	push   edi
c000c019:	25 ff 00 00 00       	and    eax,0xff
c000c01e:	6a 00                	push   0x0
c000c020:	50                   	push   eax
c000c021:	89 f0                	mov    eax,esi
c000c023:	6a 00                	push   0x0
c000c025:	25 ff 00 00 00       	and    eax,0xff
c000c02a:	6a 00                	push   0x0
c000c02c:	50                   	push   eax
c000c02d:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c034:	50                   	push   eax
c000c035:	e8 18 f7 00 00       	call   c001b752 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c03a:	83 c4 20             	add    esp,0x20
c000c03d:	e9 73 ff ff ff       	jmp    c000bfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c042:	83 ec 0c             	sub    esp,0xc
c000c045:	31 ff                	xor    edi,edi
c000c047:	68 84 e0 01 c0       	push   0xc001e084
c000c04c:	e8 b6 41 00 00       	call   c0010207 <KePanic(char const*)>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	e9 2b ff ff ff       	jmp    c000bf84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c059:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c060:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c06b:	5b                   	pop    ebx
c000c06c:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c073:	89 f0                	mov    eax,esi
c000c075:	5e                   	pop    esi
c000c076:	5f                   	pop    edi
c000c077:	c3                   	ret    

c000c078 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c07c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c080:	c1 e0 04             	shl    eax,0x4
c000c083:	8d 50 10             	lea    edx,[eax+0x10]
c000c086:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c08c:	74 08                	je     c000c096 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c08e:	83 c0 04             	add    eax,0x4
c000c091:	39 d0                	cmp    eax,edx
c000c093:	75 f1                	jne    c000c086 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c095:	c3                   	ret    
c000c096:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0a0:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0aa:	eb e2                	jmp    c000c08e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c0ac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c0ac:	53                   	push   ebx
c000c0ad:	83 ec 08             	sub    esp,0x8
c000c0b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c0b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c0b9:	74 0e                	je     c000c0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0bb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c0c0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c0c7:	75 37                	jne    c000c100 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cd:	83 c0 20             	add    eax,0x20
c000c0d0:	c1 e0 04             	shl    eax,0x4
c000c0d3:	8d 50 10             	lea    edx,[eax+0x10]
c000c0d6:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c0dc:	74 0c                	je     c000c0ea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0de:	83 c0 04             	add    eax,0x4
c000c0e1:	39 d0                	cmp    eax,edx
c000c0e3:	75 f1                	jne    c000c0d6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0e5:	83 c4 08             	add    esp,0x8
c000c0e8:	5b                   	pop    ebx
c000c0e9:	c3                   	ret    
c000c0ea:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0f4:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0fe:	eb de                	jmp    c000c0de <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c100:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c105:	7f 12                	jg     c000c119 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c107:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c10b:	31 c0                	xor    eax,eax
c000c10d:	8a 81 80 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0780]
c000c113:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c117:	eb b0                	jmp    c000c0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	68 75 e0 01 c0       	push   0xc001e075
c000c121:	e8 e1 40 00 00       	call   c0010207 <KePanic(char const*)>
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	eb 9e                	jmp    c000c0c9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c12b <setupINTS()>:
c000c12b:	31 c0                	xor    eax,eax
c000c12d:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c137:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c141:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c14b:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c155:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c15f:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c169:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c173:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c17d:	83 c0 10             	add    eax,0x10
c000c180:	3d 00 10 00 00       	cmp    eax,0x1000
c000c185:	75 a6                	jne    c000c12d <setupINTS()+0x2>
c000c187:	c3                   	ret    

c000c188 <convertLegacyIRQNumber(int)>:
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c195:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c19c:	74 0f                	je     c000c1ad <convertLegacyIRQNumber(int)+0x25>
c000c19e:	83 f8 0f             	cmp    eax,0xf
c000c1a1:	7f 0e                	jg     c000c1b1 <convertLegacyIRQNumber(int)+0x29>
c000c1a3:	31 c9                	xor    ecx,ecx
c000c1a5:	8a 88 80 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0780]
c000c1ab:	89 c8                	mov    eax,ecx
c000c1ad:	83 c4 0c             	add    esp,0xc
c000c1b0:	c3                   	ret    
c000c1b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1b5:	83 ec 0c             	sub    esp,0xc
c000c1b8:	68 84 e0 01 c0       	push   0xc001e084
c000c1bd:	e8 45 40 00 00       	call   c0010207 <KePanic(char const*)>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c9:	83 c4 0c             	add    esp,0xc
c000c1cc:	c3                   	ret    
c000c1cd:	90                   	nop

c000c1ce <startGUI(void*)>:
c000c1ce:	55                   	push   ebp
c000c1cf:	89 e5                	mov    ebp,esp
c000c1d1:	53                   	push   ebx
c000c1d2:	83 ec 04             	sub    esp,0x4
c000c1d5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1da:	48                   	dec    eax
c000c1db:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1e0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1e5:	85 c0                	test   eax,eax
c000c1e7:	75 01                	jne    c000c1ea <startGUI(void*)+0x1c>
c000c1e9:	fb                   	sti    
c000c1ea:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1f0:	83 ec 08             	sub    esp,0x8
c000c1f3:	6a 01                	push   0x1
c000c1f5:	68 e1 e0 01 c0       	push   0xc001e0e1
c000c1fa:	e8 d2 6b 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000c1ff:	83 c4 10             	add    esp,0x10
c000c202:	83 ec 08             	sub    esp,0x8
c000c205:	53                   	push   ebx
c000c206:	50                   	push   eax
c000c207:	e8 f6 6d 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c215:	83 ec 08             	sub    esp,0x8
c000c218:	6a 01                	push   0x1
c000c21a:	68 fb e0 01 c0       	push   0xc001e0fb
c000c21f:	e8 ad 6b 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	83 ec 08             	sub    esp,0x8
c000c22a:	53                   	push   ebx
c000c22b:	50                   	push   eax
c000c22c:	e8 d1 6d 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	90                   	nop
c000c235:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c238:	c9                   	leave  
c000c239:	c3                   	ret    

c000c23a <startGUIVESA(void*)>:
c000c23a:	55                   	push   ebp
c000c23b:	89 e5                	mov    ebp,esp
c000c23d:	53                   	push   ebx
c000c23e:	83 ec 04             	sub    esp,0x4
c000c241:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c246:	48                   	dec    eax
c000c247:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c24c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c251:	85 c0                	test   eax,eax
c000c253:	75 01                	jne    c000c256 <startGUIVESA(void*)+0x1c>
c000c255:	fb                   	sti    
c000c256:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c25c:	83 ec 08             	sub    esp,0x8
c000c25f:	6a 01                	push   0x1
c000c261:	68 19 e1 01 c0       	push   0xc001e119
c000c266:	e8 66 6b 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	83 ec 08             	sub    esp,0x8
c000c271:	53                   	push   ebx
c000c272:	50                   	push   eax
c000c273:	e8 8a 6d 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c281:	83 ec 08             	sub    esp,0x8
c000c284:	6a 01                	push   0x1
c000c286:	68 fb e0 01 c0       	push   0xc001e0fb
c000c28b:	e8 41 6b 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	83 ec 08             	sub    esp,0x8
c000c296:	53                   	push   ebx
c000c297:	50                   	push   eax
c000c298:	e8 65 6d 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	90                   	nop
c000c2a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2a4:	c9                   	leave  
c000c2a5:	c3                   	ret    

c000c2a6 <sendKeyToTerminal(unsigned char)>:
c000c2a6:	55                   	push   ebp
c000c2a7:	89 e5                	mov    ebp,esp
c000c2a9:	83 ec 28             	sub    esp,0x28
c000c2ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c2b2:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c2b8:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c2bb:	25 ff 00 00 00       	and    eax,0xff
c000c2c0:	83 ec 08             	sub    esp,0x8
c000c2c3:	50                   	push   eax
c000c2c4:	52                   	push   edx
c000c2c5:	e8 7c c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c2ca:	83 c4 10             	add    esp,0x10
c000c2cd:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c2d1:	74 0a                	je     c000c2dd <sendKeyToTerminal(unsigned char)+0x37>
c000c2d3:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c2d7:	0f 85 8f 00 00 00    	jne    c000c36c <sendKeyToTerminal(unsigned char)+0xc6>
c000c2dd:	fa                   	cli    
c000c2de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2e3:	40                   	inc    eax
c000c2e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2e9:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2ee:	40                   	inc    eax
c000c2ef:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2f4:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2fc:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c306:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c30a:	74 1f                	je     c000c32b <sendKeyToTerminal(unsigned char)+0x85>
c000c30c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c30f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c312:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c315:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c318:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c31b:	83 ec 0c             	sub    esp,0xc
c000c31e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c321:	e8 9a 79 00 00       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c000c326:	83 c4 10             	add    esp,0x10
c000c329:	eb db                	jmp    c000c306 <sendKeyToTerminal(unsigned char)+0x60>
c000c32b:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c330:	48                   	dec    eax
c000c331:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c336:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c33b:	85 c0                	test   eax,eax
c000c33d:	75 18                	jne    c000c357 <sendKeyToTerminal(unsigned char)+0xb1>
c000c33f:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c344:	85 c0                	test   eax,eax
c000c346:	74 0f                	je     c000c357 <sendKeyToTerminal(unsigned char)+0xb1>
c000c348:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c352:	e8 a5 74 00 00       	call   c00137fc <schedule()>
c000c357:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c35c:	48                   	dec    eax
c000c35d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c362:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c367:	85 c0                	test   eax,eax
c000c369:	75 01                	jne    c000c36c <sendKeyToTerminal(unsigned char)+0xc6>
c000c36b:	fb                   	sti    
c000c36c:	90                   	nop
c000c36d:	c9                   	leave  
c000c36e:	c3                   	ret    

c000c36f <sendKeyboardToken(KeyboardToken)>:
c000c36f:	55                   	push   ebp
c000c370:	89 e5                	mov    ebp,esp
c000c372:	83 ec 18             	sub    esp,0x18
c000c375:	e8 dd 3e 00 00       	call   c0010257 <Krnl::userIOReceived()>
c000c37a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c380:	25 ff ff 00 00       	and    eax,0xffff
c000c385:	83 f2 01             	xor    edx,0x1
c000c388:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c38e:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c393:	85 c0                	test   eax,eax
c000c395:	74 24                	je     c000c3bb <sendKeyboardToken(KeyboardToken)+0x4c>
c000c397:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c39d:	83 ec 04             	sub    esp,0x4
c000c3a0:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c3a5:	83 ec 08             	sub    esp,0x8
c000c3a8:	89 e2                	mov    edx,esp
c000c3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ad:	89 02                	mov    DWORD PTR [edx],eax
c000c3af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c3b2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c3b6:	ff d1                	call   ecx
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c3bf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c3c2:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3c7:	38 c2                	cmp    dl,al
c000c3c9:	74 1e                	je     c000c3e9 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c3cb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c3ce:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c3d3:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c3d8:	25 ff 00 00 00       	and    eax,0xff
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	50                   	push   eax
c000c3e1:	e8 b2 bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c3ec:	84 c0                	test   al,al
c000c3ee:	0f 84 ae 00 00 00    	je     c000c4a2 <sendKeyboardToken(KeyboardToken)+0x133>
c000c3f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f7:	66 3d 10 03          	cmp    ax,0x310
c000c3fb:	75 06                	jne    c000c403 <sendKeyboardToken(KeyboardToken)+0x94>
c000c3fd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	66 3d 11 03          	cmp    ax,0x311
c000c40a:	75 06                	jne    c000c412 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c40c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c415:	66 3d 12 03          	cmp    ax,0x312
c000c419:	75 06                	jne    c000c421 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c41b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c424:	66 3d 13 03          	cmp    ax,0x313
c000c428:	75 06                	jne    c000c430 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c42a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c433:	66 3d 14 03          	cmp    ax,0x314
c000c437:	75 06                	jne    c000c43f <sendKeyboardToken(KeyboardToken)+0xd0>
c000c439:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c442:	66 3d 15 03          	cmp    ax,0x315
c000c446:	75 06                	jne    c000c44e <sendKeyboardToken(KeyboardToken)+0xdf>
c000c448:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c451:	66 3d 16 03          	cmp    ax,0x316
c000c455:	75 06                	jne    c000c45d <sendKeyboardToken(KeyboardToken)+0xee>
c000c457:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c45d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c460:	66 3d 17 03          	cmp    ax,0x317
c000c464:	75 06                	jne    c000c46c <sendKeyboardToken(KeyboardToken)+0xfd>
c000c466:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46f:	66 3d 18 03          	cmp    ax,0x318
c000c473:	75 06                	jne    c000c47b <sendKeyboardToken(KeyboardToken)+0x10c>
c000c475:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47e:	66 3d 19 03          	cmp    ax,0x319
c000c482:	75 06                	jne    c000c48a <sendKeyboardToken(KeyboardToken)+0x11b>
c000c484:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48d:	66 3d 1a 03          	cmp    ax,0x31a
c000c491:	0f 85 c9 00 00 00    	jne    c000c560 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c497:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c49d:	e9 be 00 00 00       	jmp    c000c560 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a5:	66 3d 10 03          	cmp    ax,0x310
c000c4a9:	75 0a                	jne    c000c4b5 <sendKeyboardToken(KeyboardToken)+0x146>
c000c4ab:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c4b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b8:	66 3d 11 03          	cmp    ax,0x311
c000c4bc:	75 0a                	jne    c000c4c8 <sendKeyboardToken(KeyboardToken)+0x159>
c000c4be:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c4c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4cb:	66 3d 12 03          	cmp    ax,0x312
c000c4cf:	75 0a                	jne    c000c4db <sendKeyboardToken(KeyboardToken)+0x16c>
c000c4d1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c4d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4de:	66 3d 13 03          	cmp    ax,0x313
c000c4e2:	75 0a                	jne    c000c4ee <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4e4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c4ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f1:	66 3d 14 03          	cmp    ax,0x314
c000c4f5:	75 0a                	jne    c000c501 <sendKeyboardToken(KeyboardToken)+0x192>
c000c4f7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c504:	66 3d 15 03          	cmp    ax,0x315
c000c508:	75 0a                	jne    c000c514 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c50a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c510:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c517:	66 3d 16 03          	cmp    ax,0x316
c000c51b:	75 0a                	jne    c000c527 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c51d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c523:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52a:	66 3d 17 03          	cmp    ax,0x317
c000c52e:	75 0a                	jne    c000c53a <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c530:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c536:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53d:	66 3d 18 03          	cmp    ax,0x318
c000c541:	75 0a                	jne    c000c54d <sendKeyboardToken(KeyboardToken)+0x1de>
c000c543:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c549:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c550:	66 3d 19 03          	cmp    ax,0x319
c000c554:	75 0a                	jne    c000c560 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c556:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c55c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c563:	66 3d 00 02          	cmp    ax,0x200
c000c567:	75 2c                	jne    c000c595 <sendKeyboardToken(KeyboardToken)+0x226>
c000c569:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c56e:	83 f0 01             	xor    eax,0x1
c000c571:	84 c0                	test   al,al
c000c573:	74 20                	je     c000c595 <sendKeyboardToken(KeyboardToken)+0x226>
c000c575:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c57a:	6a 01                	push   0x1
c000c57c:	6a 00                	push   0x0
c000c57e:	68 ce c1 00 c0       	push   0xc000c1ce
c000c583:	50                   	push   eax
c000c584:	e8 53 70 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c593:	eb 33                	jmp    c000c5c8 <sendKeyboardToken(KeyboardToken)+0x259>
c000c595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c598:	66 3d 01 02          	cmp    ax,0x201
c000c59c:	75 2a                	jne    c000c5c8 <sendKeyboardToken(KeyboardToken)+0x259>
c000c59e:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c5a3:	83 f0 01             	xor    eax,0x1
c000c5a6:	84 c0                	test   al,al
c000c5a8:	74 1e                	je     c000c5c8 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5aa:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c5af:	6a 01                	push   0x1
c000c5b1:	6a 00                	push   0x0
c000c5b3:	68 3a c2 00 c0       	push   0xc000c23a
c000c5b8:	50                   	push   eax
c000c5b9:	e8 1e 70 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c000c5be:	83 c4 10             	add    esp,0x10
c000c5c1:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cb:	66 3d 1d 03          	cmp    ax,0x31d
c000c5cf:	75 06                	jne    c000c5d7 <sendKeyboardToken(KeyboardToken)+0x268>
c000c5d1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5da:	66 3d 1c 03          	cmp    ax,0x31c
c000c5de:	75 06                	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x277>
c000c5e0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 3d 1b 03          	cmp    ax,0x31b
c000c5ed:	75 06                	jne    c000c5f5 <sendKeyboardToken(KeyboardToken)+0x286>
c000c5ef:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f8:	66 3d 1e 03          	cmp    ax,0x31e
c000c5fc:	75 06                	jne    c000c604 <sendKeyboardToken(KeyboardToken)+0x295>
c000c5fe:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c607:	66 3d 1f 03          	cmp    ax,0x31f
c000c60b:	75 06                	jne    c000c613 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c60d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c616:	66 3d 1a 03          	cmp    ax,0x31a
c000c61a:	75 06                	jne    c000c622 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c61c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c622:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c626:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c629:	83 f0 01             	xor    eax,0x1
c000c62c:	84 c0                	test   al,al
c000c62e:	74 7b                	je     c000c6ab <sendKeyboardToken(KeyboardToken)+0x33c>
c000c630:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c635:	84 c0                	test   al,al
c000c637:	74 43                	je     c000c67c <sendKeyboardToken(KeyboardToken)+0x30d>
c000c639:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c63d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c641:	74 2d                	je     c000c670 <sendKeyboardToken(KeyboardToken)+0x301>
c000c643:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c649:	89 d0                	mov    eax,edx
c000c64b:	c1 e0 02             	shl    eax,0x2
c000c64e:	01 d0                	add    eax,edx
c000c650:	01 c0                	add    eax,eax
c000c652:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65a:	25 ff ff 00 00       	and    eax,0xffff
c000c65f:	8d 50 d0             	lea    edx,[eax-0x30]
c000c662:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c667:	01 d0                	add    eax,edx
c000c669:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c66e:	eb 71                	jmp    c000c6e1 <sendKeyboardToken(KeyboardToken)+0x372>
c000c670:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c67a:	eb 65                	jmp    c000c6e1 <sendKeyboardToken(KeyboardToken)+0x372>
c000c67c:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c681:	85 c0                	test   eax,eax
c000c683:	74 1a                	je     c000c69f <sendKeyboardToken(KeyboardToken)+0x330>
c000c685:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c68a:	25 ff 00 00 00       	and    eax,0xff
c000c68f:	83 ec 0c             	sub    esp,0xc
c000c692:	50                   	push   eax
c000c693:	e8 0e fc ff ff       	call   c000c2a6 <sendKeyToTerminal(unsigned char)>
c000c698:	83 c4 10             	add    esp,0x10
c000c69b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c69f:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6a9:	eb 36                	jmp    c000c6e1 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ae:	66 3d 01 01          	cmp    ax,0x101
c000c6b2:	75 2d                	jne    c000c6e1 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6b4:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	74 1a                	je     c000c6d7 <sendKeyboardToken(KeyboardToken)+0x368>
c000c6bd:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6c2:	25 ff 00 00 00       	and    eax,0xff
c000c6c7:	83 ec 0c             	sub    esp,0xc
c000c6ca:	50                   	push   eax
c000c6cb:	e8 d6 fb ff ff       	call   c000c2a6 <sendKeyToTerminal(unsigned char)>
c000c6d0:	83 c4 10             	add    esp,0x10
c000c6d3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6d7:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6e1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6e4:	83 f0 01             	xor    eax,0x1
c000c6e7:	84 c0                	test   al,al
c000c6e9:	74 4e                	je     c000c739 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ee:	83 f0 01             	xor    eax,0x1
c000c6f1:	84 c0                	test   al,al
c000c6f3:	74 44                	je     c000c739 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6f5:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6fa:	83 f0 01             	xor    eax,0x1
c000c6fd:	84 c0                	test   al,al
c000c6ff:	74 38                	je     c000c739 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c704:	66 83 f8 1f          	cmp    ax,0x1f
c000c708:	76 09                	jbe    c000c713 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70d:	66 83 f8 7e          	cmp    ax,0x7e
c000c711:	76 12                	jbe    c000c725 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c716:	66 83 f8 0a          	cmp    ax,0xa
c000c71a:	74 09                	je     c000c725 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71f:	66 83 f8 08          	cmp    ax,0x8
c000c723:	75 14                	jne    c000c739 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c728:	25 ff 00 00 00       	and    eax,0xff
c000c72d:	83 ec 0c             	sub    esp,0xc
c000c730:	50                   	push   eax
c000c731:	e8 70 fb ff ff       	call   c000c2a6 <sendKeyToTerminal(unsigned char)>
c000c736:	83 c4 10             	add    esp,0x10
c000c739:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c73c:	83 f0 01             	xor    eax,0x1
c000c73f:	84 c0                	test   al,al
c000c741:	74 51                	je     c000c794 <sendKeyboardToken(KeyboardToken)+0x425>
c000c743:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c746:	83 f0 01             	xor    eax,0x1
c000c749:	84 c0                	test   al,al
c000c74b:	74 47                	je     c000c794 <sendKeyboardToken(KeyboardToken)+0x425>
c000c74d:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c752:	84 c0                	test   al,al
c000c754:	74 3e                	je     c000c794 <sendKeyboardToken(KeyboardToken)+0x425>
c000c756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c759:	66 83 f8 3f          	cmp    ax,0x3f
c000c75d:	76 35                	jbe    c000c794 <sendKeyboardToken(KeyboardToken)+0x425>
c000c75f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c762:	66 83 f8 7f          	cmp    ax,0x7f
c000c766:	77 2c                	ja     c000c794 <sendKeyboardToken(KeyboardToken)+0x425>
c000c768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c76b:	88 c2                	mov    dl,al
c000c76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c770:	66 83 f8 5f          	cmp    ax,0x5f
c000c774:	76 04                	jbe    c000c77a <sendKeyboardToken(KeyboardToken)+0x40b>
c000c776:	b0 20                	mov    al,0x20
c000c778:	eb 02                	jmp    c000c77c <sendKeyboardToken(KeyboardToken)+0x40d>
c000c77a:	b0 00                	mov    al,0x0
c000c77c:	29 c2                	sub    edx,eax
c000c77e:	88 d0                	mov    al,dl
c000c780:	83 e8 40             	sub    eax,0x40
c000c783:	25 ff 00 00 00       	and    eax,0xff
c000c788:	83 ec 0c             	sub    esp,0xc
c000c78b:	50                   	push   eax
c000c78c:	e8 15 fb ff ff       	call   c000c2a6 <sendKeyToTerminal(unsigned char)>
c000c791:	83 c4 10             	add    esp,0x10
c000c794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c797:	66 3d 00 03          	cmp    ax,0x300
c000c79b:	75 0f                	jne    c000c7ac <sendKeyboardToken(KeyboardToken)+0x43d>
c000c79d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7a0:	83 f0 01             	xor    eax,0x1
c000c7a3:	84 c0                	test   al,al
c000c7a5:	74 05                	je     c000c7ac <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7a7:	e8 ed b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c7ac:	90                   	nop
c000c7ad:	c9                   	leave  
c000c7ae:	c3                   	ret    

c000c7af <clearInternalKeybuffer(VgaText*)>:
c000c7af:	55                   	push   ebp
c000c7b0:	89 e5                	mov    ebp,esp
c000c7b2:	83 ec 08             	sub    esp,0x8
c000c7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b8:	05 b2 00 00 00       	add    eax,0xb2
c000c7bd:	83 ec 0c             	sub    esp,0xc
c000c7c0:	50                   	push   eax
c000c7c1:	e8 7a 3d ff ff       	call   c0000540 <strlen>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7cc:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7d2:	83 ec 04             	sub    esp,0x4
c000c7d5:	50                   	push   eax
c000c7d6:	6a 00                	push   0x0
c000c7d8:	52                   	push   edx
c000c7d9:	e8 f2 3c ff ff       	call   c00004d0 <memset>
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	90                   	nop
c000c7e2:	c9                   	leave  
c000c7e3:	c3                   	ret    

c000c7e4 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7e4:	55                   	push   ebp
c000c7e5:	89 e5                	mov    ebp,esp
c000c7e7:	83 ec 18             	sub    esp,0x18
c000c7ea:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7ef:	85 c0                	test   eax,eax
c000c7f1:	74 2a                	je     c000c81d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c7f3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7f9:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7ff:	83 ec 04             	sub    esp,0x4
c000c802:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c807:	83 ec 08             	sub    esp,0x8
c000c80a:	89 e2                	mov    edx,esp
c000c80c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c80f:	89 02                	mov    DWORD PTR [edx],eax
c000c811:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c814:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c818:	ff d1                	call   ecx
c000c81a:	83 c4 10             	add    esp,0x10
c000c81d:	fb                   	sti    
c000c81e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c825:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c829:	0f 84 db 00 00 00    	je     c000c90a <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c832:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c838:	84 c0                	test   al,al
c000c83a:	75 28                	jne    c000c864 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c83c:	fa                   	cli    
c000c83d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c842:	40                   	inc    eax
c000c843:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c848:	e8 af 6f 00 00       	call   c00137fc <schedule()>
c000c84d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c852:	48                   	dec    eax
c000c853:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c858:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c85d:	85 c0                	test   eax,eax
c000c85f:	75 ce                	jne    c000c82f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c861:	fb                   	sti    
c000c862:	eb cb                	jmp    c000c82f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c864:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c867:	8d 50 01             	lea    edx,[eax+0x1]
c000c86a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c86d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c870:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c876:	88 10                	mov    BYTE PTR [eax],dl
c000c878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87b:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c881:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c884:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c888:	75 2e                	jne    c000c8b8 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c88a:	83 ec 0c             	sub    esp,0xc
c000c88d:	68 34 e1 01 c0       	push   0xc001e134
c000c892:	e8 f0 dc ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000c897:	83 c4 10             	add    esp,0x10
c000c89a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c89f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c8a4:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c8aa:	83 ec 08             	sub    esp,0x8
c000c8ad:	6a 02                	push   0x2
c000c8af:	50                   	push   eax
c000c8b0:	e8 3e 3d 00 00       	call   c00105f3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c8b5:	83 c4 10             	add    esp,0x10
c000c8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8bb:	05 b2 00 00 00       	add    eax,0xb2
c000c8c0:	83 ec 0c             	sub    esp,0xc
c000c8c3:	50                   	push   eax
c000c8c4:	e8 77 3c ff ff       	call   c0000540 <strlen>
c000c8c9:	83 c4 10             	add    esp,0x10
c000c8cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8cf:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8d5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c8d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8db:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8e1:	83 ec 04             	sub    esp,0x4
c000c8e4:	50                   	push   eax
c000c8e5:	51                   	push   ecx
c000c8e6:	52                   	push   edx
c000c8e7:	e8 f4 3a ff ff       	call   c00003e0 <memmove>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8f5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8f9:	74 0a                	je     c000c905 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8fb:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8ff:	0f 85 20 ff ff ff    	jne    c000c825 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c905:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c908:	eb 03                	jmp    c000c90d <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c90a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c90d:	c9                   	leave  
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Keyboard::Keyboard(char const*)>:
c000c910:	83 ec 0c             	sub    esp,0xc
c000c913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c917:	83 ec 08             	sub    esp,0x8
c000c91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91e:	50                   	push   eax
c000c91f:	e8 38 f2 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000c924:	83 c4 10             	add    esp,0x10
c000c927:	ba 4c e1 01 c0       	mov    edx,0xc001e14c
c000c92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c930:	89 10                	mov    DWORD PTR [eax],edx
c000c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c936:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c940:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c947:	90                   	nop
c000c948:	83 c4 0c             	add    esp,0xc
c000c94b:	c3                   	ret    

c000c94c <Keyboard::~Keyboard()>:
c000c94c:	83 ec 0c             	sub    esp,0xc
c000c94f:	ba 4c e1 01 c0       	mov    edx,0xc001e14c
c000c954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c958:	89 10                	mov    DWORD PTR [eax],edx
c000c95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 5f ef ff ff       	call   c000b8c6 <Device::~Device()>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	90                   	nop
c000c96b:	83 c4 0c             	add    esp,0xc
c000c96e:	c3                   	ret    
c000c96f:	90                   	nop

c000c970 <Keyboard::~Keyboard()>:
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	83 ec 0c             	sub    esp,0xc
c000c976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c97a:	e8 cd ff ff ff       	call   c000c94c <Keyboard::~Keyboard()>
c000c97f:	83 c4 10             	add    esp,0x10
c000c982:	83 ec 08             	sub    esp,0x8
c000c985:	68 5c 01 00 00       	push   0x15c
c000c98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98e:	e8 fe da ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	83 c4 0c             	add    esp,0xc
c000c999:	c3                   	ret    

c000c99a <LogicalDisk::close(int, int, void*)>:
c000c99a:	83 c8 ff             	or     eax,0xffffffff
c000c99d:	c3                   	ret    

c000c99e <LogicalDisk::~LogicalDisk()>:
c000c99e:	83 ec 0c             	sub    esp,0xc
c000c9a1:	ba c4 e1 01 c0       	mov    edx,0xc001e1c4
c000c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9aa:	89 10                	mov    DWORD PTR [eax],edx
c000c9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b0:	83 ec 0c             	sub    esp,0xc
c000c9b3:	50                   	push   eax
c000c9b4:	e8 0d ef ff ff       	call   c000b8c6 <Device::~Device()>
c000c9b9:	83 c4 10             	add    esp,0x10
c000c9bc:	90                   	nop
c000c9bd:	83 c4 0c             	add    esp,0xc
c000c9c0:	c3                   	ret    
c000c9c1:	90                   	nop

c000c9c2 <LogicalDisk::~LogicalDisk()>:
c000c9c2:	83 ec 0c             	sub    esp,0xc
c000c9c5:	83 ec 0c             	sub    esp,0xc
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	e8 cd ff ff ff       	call   c000c99e <LogicalDisk::~LogicalDisk()>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	83 ec 08             	sub    esp,0x8
c000c9d7:	68 74 01 00 00       	push   0x174
c000c9dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9e0:	e8 ac da ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000c9e5:	83 c4 10             	add    esp,0x10
c000c9e8:	83 c4 0c             	add    esp,0xc
c000c9eb:	c3                   	ret    

c000c9ec <LogicalDisk::open(int, int, void*)>:
c000c9ec:	83 ec 18             	sub    esp,0x18
c000c9ef:	68 78 e1 01 c0       	push   0xc001e178
c000c9f4:	e8 0e 38 00 00       	call   c0010207 <KePanic(char const*)>
c000c9f9:	83 c8 ff             	or     eax,0xffffffff
c000c9fc:	83 c4 1c             	add    esp,0x1c
c000c9ff:	c3                   	ret    

c000ca00 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca00:	53                   	push   ebx
c000ca01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca0d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca13:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca19:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca1f:	77 10                	ja     c000ca31 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca21:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca27:	89 d3                	mov    ebx,edx
c000ca29:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca2f:	72 05                	jb     c000ca36 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ca31:	83 c8 ff             	or     eax,0xffffffff
c000ca34:	89 c2                	mov    edx,eax
c000ca36:	5b                   	pop    ebx
c000ca37:	c3                   	ret    

c000ca38 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ca38:	56                   	push   esi
c000ca39:	83 c8 ff             	or     eax,0xffffffff
c000ca3c:	53                   	push   ebx
c000ca3d:	89 c2                	mov    edx,eax
c000ca3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca43:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca4b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca51:	77 27                	ja     c000ca7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca53:	89 d8                	mov    eax,ebx
c000ca55:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca5b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca66:	89 c2                	mov    edx,eax
c000ca68:	73 10                	jae    c000ca7a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca6a:	89 c8                	mov    eax,ecx
c000ca6c:	89 da                	mov    edx,ebx
c000ca6e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca74:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca7a:	5b                   	pop    ebx
c000ca7b:	5e                   	pop    esi
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca7e:	83 ec 1c             	sub    esp,0x1c
c000ca81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca95:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000caa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caa4:	83 ec 08             	sub    esp,0x8
c000caa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000caab:	50                   	push   eax
c000caac:	e8 ab f0 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	ba c4 e1 01 c0       	mov    edx,0xc001e1c4
c000cab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cabd:	89 10                	mov    DWORD PTR [eax],edx
c000cabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cac3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cace:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cae3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caef:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000caf5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cafb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb06:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb0c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb1a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb24:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb2e:	90                   	nop
c000cb2f:	83 c4 1c             	add    esp,0x1c
c000cb32:	c3                   	ret    
c000cb33:	90                   	nop

c000cb34 <LogicalDisk::assignDriveLetter()>:
c000cb34:	55                   	push   ebp
c000cb35:	57                   	push   edi
c000cb36:	56                   	push   esi
c000cb37:	53                   	push   ebx
c000cb38:	83 ec 14             	sub    esp,0x14
c000cb3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb3f:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cb45:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb4b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb4f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb55:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb5b:	3c 01                	cmp    al,0x1
c000cb5d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb61:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb65:	19 c0                	sbb    eax,eax
c000cb67:	83 e0 02             	and    eax,0x2
c000cb6a:	83 c0 41             	add    eax,0x41
c000cb6d:	0f be e8             	movsx  ebp,al
c000cb70:	3c 43                	cmp    al,0x43
c000cb72:	75 10                	jne    c000cb84 <LogicalDisk::assignDriveLetter()+0x50>
c000cb74:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb7b:	75 5d                	jne    c000cbda <LogicalDisk::assignDriveLetter()+0xa6>
c000cb7d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb82:	75 56                	jne    c000cbda <LogicalDisk::assignDriveLetter()+0xa6>
c000cb84:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb87:	ba 01 00 00 00       	mov    edx,0x1
c000cb8c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb90:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb94:	d3 e2                	shl    edx,cl
c000cb96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb9a:	89 d7                	mov    edi,edx
c000cb9c:	89 d6                	mov    esi,edx
c000cb9e:	c1 ff 1f             	sar    edi,0x1f
c000cba1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cba5:	21 f9                	and    ecx,edi
c000cba7:	09 d1                	or     ecx,edx
c000cba9:	75 2f                	jne    c000cbda <LogicalDisk::assignDriveLetter()+0xa6>
c000cbab:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cbaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbb3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cbb9:	09 f2                	or     edx,esi
c000cbbb:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cbc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbc5:	09 fa                	or     edx,edi
c000cbc7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cbcb:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cbd1:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cbd8:	eb 08                	jmp    c000cbe2 <LogicalDisk::assignDriveLetter()+0xae>
c000cbda:	45                   	inc    ebp
c000cbdb:	40                   	inc    eax
c000cbdc:	3c 5b                	cmp    al,0x5b
c000cbde:	75 90                	jne    c000cb70 <LogicalDisk::assignDriveLetter()+0x3c>
c000cbe0:	31 c0                	xor    eax,eax
c000cbe2:	83 c4 14             	add    esp,0x14
c000cbe5:	5b                   	pop    ebx
c000cbe6:	5e                   	pop    esi
c000cbe7:	5f                   	pop    edi
c000cbe8:	5d                   	pop    ebp
c000cbe9:	c3                   	ret    

c000cbea <LogicalDisk::mount()>:
c000cbea:	56                   	push   esi
c000cbeb:	53                   	push   ebx
c000cbec:	53                   	push   ebx
c000cbed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbf1:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cbf7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc01:	85 db                	test   ebx,ebx
c000cc03:	74 27                	je     c000cc2c <LogicalDisk::mount()+0x42>
c000cc05:	51                   	push   ecx
c000cc06:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc0f:	83 e8 41             	sub    eax,0x41
c000cc12:	50                   	push   eax
c000cc13:	56                   	push   esi
c000cc14:	53                   	push   ebx
c000cc15:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc18:	83 c4 10             	add    esp,0x10
c000cc1b:	84 c0                	test   al,al
c000cc1d:	74 08                	je     c000cc27 <LogicalDisk::mount()+0x3d>
c000cc1f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc25:	eb 07                	jmp    c000cc2e <LogicalDisk::mount()+0x44>
c000cc27:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc2a:	eb d5                	jmp    c000cc01 <LogicalDisk::mount()+0x17>
c000cc2c:	31 c0                	xor    eax,eax
c000cc2e:	5a                   	pop    edx
c000cc2f:	5b                   	pop    ebx
c000cc30:	5e                   	pop    esi
c000cc31:	c3                   	ret    

c000cc32 <LogicalDisk::unmount()>:
c000cc32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc36:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc40:	c3                   	ret    
c000cc41:	90                   	nop

c000cc42 <LogicalDisk::eject()>:
c000cc42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc46:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc4c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc52:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc55:	90                   	nop

c000cc56 <LogicalDisk::unassignDriveLetter()>:
c000cc56:	57                   	push   edi
c000cc57:	56                   	push   esi
c000cc58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc5c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc63:	84 c9                	test   cl,cl
c000cc65:	75 0f                	jne    c000cc76 <LogicalDisk::unassignDriveLetter()+0x20>
c000cc67:	c7 44 24 0c 9c e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e19c
c000cc6f:	5e                   	pop    esi
c000cc70:	5f                   	pop    edi
c000cc71:	e9 91 35 00 00       	jmp    c0010207 <KePanic(char const*)>
c000cc76:	83 e9 41             	sub    ecx,0x41
c000cc79:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc80:	b8 01 00 00 00       	mov    eax,0x1
c000cc85:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc90:	d3 e0                	shl    eax,cl
c000cc92:	89 c7                	mov    edi,eax
c000cc94:	f7 d0                	not    eax
c000cc96:	c1 ff 1f             	sar    edi,0x1f
c000cc99:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc9f:	89 fe                	mov    esi,edi
c000cca1:	f7 d6                	not    esi
c000cca3:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cca9:	5e                   	pop    esi
c000ccaa:	5f                   	pop    edi
c000ccab:	c3                   	ret    

c000ccac <LogicalDisk::read(unsigned long long, int, void*)>:
c000ccac:	57                   	push   edi
c000ccad:	56                   	push   esi
c000ccae:	53                   	push   ebx
c000ccaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccb7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccbf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccc5:	77 41                	ja     c000cd08 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ccc7:	99                   	cdq    
c000ccc8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccce:	01 c8                	add    eax,ecx
c000ccd0:	11 da                	adc    edx,ebx
c000ccd2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ccd8:	19 d7                	sbb    edi,edx
c000ccda:	72 33                	jb     c000cd0f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ccdc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cce2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cce8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccec:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccf0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccf6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd00:	5b                   	pop    ebx
c000cd01:	5e                   	pop    esi
c000cd02:	5f                   	pop    edi
c000cd03:	e9 4e 0a 00 00       	jmp    c000d756 <VCache::read(unsigned long long, int, void*)>
c000cd08:	b8 05 00 00 00       	mov    eax,0x5
c000cd0d:	eb 05                	jmp    c000cd14 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd0f:	b8 07 00 00 00       	mov    eax,0x7
c000cd14:	5b                   	pop    ebx
c000cd15:	5e                   	pop    esi
c000cd16:	5f                   	pop    edi
c000cd17:	c3                   	ret    

c000cd18 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd18:	57                   	push   edi
c000cd19:	56                   	push   esi
c000cd1a:	53                   	push   ebx
c000cd1b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd23:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd2b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd31:	77 41                	ja     c000cd74 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cd33:	99                   	cdq    
c000cd34:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd3a:	01 c8                	add    eax,ecx
c000cd3c:	11 da                	adc    edx,ebx
c000cd3e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd44:	19 d7                	sbb    edi,edx
c000cd46:	72 33                	jb     c000cd7b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd48:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd4e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd58:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd5c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd6c:	5b                   	pop    ebx
c000cd6d:	5e                   	pop    esi
c000cd6e:	5f                   	pop    edi
c000cd6f:	e9 cc 08 00 00       	jmp    c000d640 <VCache::write(unsigned long long, int, void*)>
c000cd74:	b8 05 00 00 00       	mov    eax,0x5
c000cd79:	eb 05                	jmp    c000cd80 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd7b:	b8 07 00 00 00       	mov    eax,0x7
c000cd80:	5b                   	pop    ebx
c000cd81:	5e                   	pop    esi
c000cd82:	5f                   	pop    edi
c000cd83:	c3                   	ret    

c000cd84 <Mouse::Mouse(char const*)>:
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8b:	83 ec 08             	sub    esp,0x8
c000cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd92:	50                   	push   eax
c000cd93:	e8 c4 ed ff ff       	call   c000bb5c <Device::Device(char const*)>
c000cd98:	83 c4 10             	add    esp,0x10
c000cd9b:	ba f0 e1 01 c0       	mov    edx,0xc001e1f0
c000cda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda4:	89 10                	mov    DWORD PTR [eax],edx
c000cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cdb4:	90                   	nop
c000cdb5:	83 c4 0c             	add    esp,0xc
c000cdb8:	c3                   	ret    
c000cdb9:	90                   	nop
c000cdba:	66 90                	xchg   ax,ax

c000cdbc <Mouse::~Mouse()>:
c000cdbc:	83 ec 0c             	sub    esp,0xc
c000cdbf:	ba f0 e1 01 c0       	mov    edx,0xc001e1f0
c000cdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc8:	89 10                	mov    DWORD PTR [eax],edx
c000cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdce:	83 ec 0c             	sub    esp,0xc
c000cdd1:	50                   	push   eax
c000cdd2:	e8 ef ea ff ff       	call   c000b8c6 <Device::~Device()>
c000cdd7:	83 c4 10             	add    esp,0x10
c000cdda:	90                   	nop
c000cddb:	83 c4 0c             	add    esp,0xc
c000cdde:	c3                   	ret    
c000cddf:	90                   	nop

c000cde0 <Mouse::~Mouse()>:
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	83 ec 0c             	sub    esp,0xc
c000cde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdea:	e8 cd ff ff ff       	call   c000cdbc <Mouse::~Mouse()>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	83 ec 08             	sub    esp,0x8
c000cdf5:	68 58 01 00 00       	push   0x158
c000cdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfe:	e8 8e d6 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	83 c4 0c             	add    esp,0xc
c000ce09:	c3                   	ret    

c000ce0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce0a:	55                   	push   ebp
c000ce0b:	57                   	push   edi
c000ce0c:	56                   	push   esi
c000ce0d:	53                   	push   ebx
c000ce0e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce14:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce1b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce22:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce29:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ce30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce38:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce3f:	e8 14 ee ff ff       	call   c000bc58 <Device::getName()>
c000ce44:	5a                   	pop    edx
c000ce45:	59                   	pop    ecx
c000ce46:	50                   	push   eax
c000ce47:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce4b:	55                   	push   ebp
c000ce4c:	e8 af 37 ff ff       	call   c0000600 <strcpy>
c000ce51:	5b                   	pop    ebx
c000ce52:	58                   	pop    eax
c000ce53:	68 14 e2 01 c0       	push   0xc001e214
c000ce58:	55                   	push   ebp
c000ce59:	e8 62 39 ff ff       	call   c00007c0 <strcat>
c000ce5e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce65:	e8 4f a9 ff ff       	call   c00077b9 <malloc>
c000ce6a:	83 c4 0c             	add    esp,0xc
c000ce6d:	89 c3                	mov    ebx,eax
c000ce6f:	57                   	push   edi
c000ce70:	56                   	push   esi
c000ce71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce79:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce80:	55                   	push   ebp
c000ce81:	50                   	push   eax
c000ce82:	e8 f7 fb ff ff       	call   c000ca7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce87:	83 c4 14             	add    esp,0x14
c000ce8a:	53                   	push   ebx
c000ce8b:	e8 a4 fc ff ff       	call   c000cb34 <LogicalDisk::assignDriveLetter()>
c000ce90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce93:	e8 52 fd ff ff       	call   c000cbea <LogicalDisk::mount()>
c000ce98:	58                   	pop    eax
c000ce99:	5a                   	pop    edx
c000ce9a:	53                   	push   ebx
c000ce9b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cea2:	e8 1d eb ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c000cea7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cead:	5b                   	pop    ebx
c000ceae:	5e                   	pop    esi
c000ceaf:	5f                   	pop    edi
c000ceb0:	5d                   	pop    ebp
c000ceb1:	c3                   	ret    

c000ceb2 <createPartitionsForDisk(PhysicalDisk*)>:
c000ceb2:	55                   	push   ebp
c000ceb3:	57                   	push   edi
c000ceb4:	56                   	push   esi
c000ceb5:	53                   	push   ebx
c000ceb6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cebc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cec3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cec9:	3d 00 02 00 00       	cmp    eax,0x200
c000cece:	74 27                	je     c000cef7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ced0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ced6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cedc:	83 ec 10             	sub    esp,0x10
c000cedf:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cee3:	99                   	cdq    
c000cee4:	c1 e6 0a             	shl    esi,0xa
c000cee7:	52                   	push   edx
c000cee8:	89 fd                	mov    ebp,edi
c000ceea:	50                   	push   eax
c000ceeb:	55                   	push   ebp
c000ceec:	56                   	push   esi
c000ceed:	e8 6e f2 00 00       	call   c001c160 <__udivdi3>
c000cef2:	e9 b1 00 00 00       	jmp    c000cfa8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cef7:	83 ec 0c             	sub    esp,0xc
c000cefa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cefc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf00:	56                   	push   esi
c000cf01:	6a 01                	push   0x1
c000cf03:	6a 00                	push   0x0
c000cf05:	6a 00                	push   0x0
c000cf07:	53                   	push   ebx
c000cf08:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf0b:	83 c4 20             	add    esp,0x20
c000cf0e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf16:	75 0a                	jne    c000cf22 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf18:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf20:	74 2c                	je     c000cf4e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf34:	83 ec 10             	sub    esp,0x10
c000cf37:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf3b:	89 f7                	mov    edi,esi
c000cf3d:	c1 e0 0a             	shl    eax,0xa
c000cf40:	c1 ff 1f             	sar    edi,0x1f
c000cf43:	57                   	push   edi
c000cf44:	56                   	push   esi
c000cf45:	52                   	push   edx
c000cf46:	50                   	push   eax
c000cf47:	e8 14 f2 00 00       	call   c001c160 <__udivdi3>
c000cf4c:	eb 5a                	jmp    c000cfa8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf4e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf55:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf5c:	83 e1 7f             	and    ecx,0x7f
c000cf5f:	83 e0 7f             	and    eax,0x7f
c000cf62:	01 c1                	add    ecx,eax
c000cf64:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf6b:	83 e0 7f             	and    eax,0x7f
c000cf6e:	01 c1                	add    ecx,eax
c000cf70:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf77:	83 e0 7f             	and    eax,0x7f
c000cf7a:	00 c1                	add    cl,al
c000cf7c:	74 41                	je     c000cfbf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf7e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf84:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf8a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf90:	83 ec 10             	sub    esp,0x10
c000cf93:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf97:	89 f7                	mov    edi,esi
c000cf99:	c1 e0 0a             	shl    eax,0xa
c000cf9c:	c1 ff 1f             	sar    edi,0x1f
c000cf9f:	57                   	push   edi
c000cfa0:	56                   	push   esi
c000cfa1:	52                   	push   edx
c000cfa2:	50                   	push   eax
c000cfa3:	e8 b8 f1 00 00       	call   c001c160 <__udivdi3>
c000cfa8:	83 c4 14             	add    esp,0x14
c000cfab:	52                   	push   edx
c000cfac:	50                   	push   eax
c000cfad:	6a 00                	push   0x0
c000cfaf:	6a 00                	push   0x0
c000cfb1:	53                   	push   ebx
c000cfb2:	e8 53 fe ff ff       	call   c000ce0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfb7:	83 c4 20             	add    esp,0x20
c000cfba:	e9 79 01 00 00       	jmp    c000d138 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cfbf:	89 f0                	mov    eax,esi
c000cfc1:	31 f6                	xor    esi,esi
c000cfc3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cfca:	75 02                	jne    c000cfce <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cfcc:	89 f1                	mov    ecx,esi
c000cfce:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cfd5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cfdc:	c1 e2 08             	shl    edx,0x8
c000cfdf:	c1 e7 10             	shl    edi,0x10
c000cfe2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cfea:	09 fa                	or     edx,edi
c000cfec:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cff4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cffb:	83 c0 10             	add    eax,0x10
c000cffe:	09 fa                	or     edx,edi
c000d000:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d007:	c1 e7 18             	shl    edi,0x18
c000d00a:	09 fa                	or     edx,edi
c000d00c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d013:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d017:	c1 e7 10             	shl    edi,0x10
c000d01a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d021:	c1 e2 08             	shl    edx,0x8
c000d024:	09 fa                	or     edx,edi
c000d026:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d02d:	09 fa                	or     edx,edi
c000d02f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d036:	c1 e7 18             	shl    edi,0x18
c000d039:	09 fa                	or     edx,edi
c000d03b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d03f:	46                   	inc    esi
c000d040:	83 fe 04             	cmp    esi,0x4
c000d043:	0f 85 7a ff ff ff    	jne    c000cfc3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d04d:	83 f0 01             	xor    eax,0x1
c000d050:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d054:	75 57                	jne    c000d0ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d05a:	83 f0 01             	xor    eax,0x1
c000d05d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d061:	75 4a                	jne    c000d0ad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d063:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d067:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d06f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d077:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d07d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d083:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d089:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d08d:	89 f7                	mov    edi,esi
c000d08f:	c1 e0 0a             	shl    eax,0xa
c000d092:	c1 ff 1f             	sar    edi,0x1f
c000d095:	57                   	push   edi
c000d096:	56                   	push   esi
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 c2 f0 00 00       	call   c001c160 <__udivdi3>
c000d09e:	83 c4 10             	add    esp,0x10
c000d0a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d0ad:	84 c9                	test   cl,cl
c000d0af:	74 53                	je     c000d104 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d0b1:	0f b6 c9             	movzx  ecx,cl
c000d0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d0c0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d0c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0cc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d0d0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d0d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0e4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0e8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0ec:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0f0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0fc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d100:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d104:	31 ed                	xor    ebp,ebp
c000d106:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d10a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d10e:	89 f8                	mov    eax,edi
c000d110:	09 f0                	or     eax,esi
c000d112:	74 1e                	je     c000d132 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d114:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d118:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d11c:	89 d1                	mov    ecx,edx
c000d11e:	09 c1                	or     ecx,eax
c000d120:	74 10                	je     c000d132 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d122:	83 ec 0c             	sub    esp,0xc
c000d125:	57                   	push   edi
c000d126:	56                   	push   esi
c000d127:	52                   	push   edx
c000d128:	50                   	push   eax
c000d129:	53                   	push   ebx
c000d12a:	e8 db fc ff ff       	call   c000ce0a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d12f:	83 c4 20             	add    esp,0x20
c000d132:	45                   	inc    ebp
c000d133:	83 fd 04             	cmp    ebp,0x4
c000d136:	75 ce                	jne    c000d106 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d138:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d13e:	5b                   	pop    ebx
c000d13f:	5e                   	pop    esi
c000d140:	5f                   	pop    edi
c000d141:	5d                   	pop    ebp
c000d142:	c3                   	ret    
c000d143:	90                   	nop

c000d144 <Serial::Serial(char const*)>:
c000d144:	83 ec 0c             	sub    esp,0xc
c000d147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14b:	83 ec 08             	sub    esp,0x8
c000d14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d152:	50                   	push   eax
c000d153:	e8 04 ea ff ff       	call   c000bb5c <Device::Device(char const*)>
c000d158:	83 c4 10             	add    esp,0x10
c000d15b:	ba 28 e2 01 c0       	mov    edx,0xc001e228
c000d160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d164:	89 10                	mov    DWORD PTR [eax],edx
c000d166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d174:	90                   	nop
c000d175:	83 c4 0c             	add    esp,0xc
c000d178:	c3                   	ret    
c000d179:	90                   	nop
c000d17a:	66 90                	xchg   ax,ax

c000d17c <Serial::~Serial()>:
c000d17c:	83 ec 0c             	sub    esp,0xc
c000d17f:	ba 28 e2 01 c0       	mov    edx,0xc001e228
c000d184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d188:	89 10                	mov    DWORD PTR [eax],edx
c000d18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18e:	83 ec 0c             	sub    esp,0xc
c000d191:	50                   	push   eax
c000d192:	e8 2f e7 ff ff       	call   c000b8c6 <Device::~Device()>
c000d197:	83 c4 10             	add    esp,0x10
c000d19a:	90                   	nop
c000d19b:	83 c4 0c             	add    esp,0xc
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <Serial::~Serial()>:
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	83 ec 0c             	sub    esp,0xc
c000d1a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1aa:	e8 cd ff ff ff       	call   c000d17c <Serial::~Serial()>
c000d1af:	83 c4 10             	add    esp,0x10
c000d1b2:	83 ec 08             	sub    esp,0x8
c000d1b5:	68 58 01 00 00       	push   0x158
c000d1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1be:	e8 ce d2 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	83 c4 0c             	add    esp,0xc
c000d1c9:	c3                   	ret    
c000d1ca:	66 90                	xchg   ax,ax

c000d1cc <Timer::Timer(char const*)>:
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d3:	83 ec 08             	sub    esp,0x8
c000d1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1da:	50                   	push   eax
c000d1db:	e8 7c e9 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	ba 6c e2 01 c0       	mov    edx,0xc001e26c
c000d1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ec:	89 10                	mov    DWORD PTR [eax],edx
c000d1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1fc:	90                   	nop
c000d1fd:	83 c4 0c             	add    esp,0xc
c000d200:	c3                   	ret    
c000d201:	90                   	nop
c000d202:	66 90                	xchg   ax,ax

c000d204 <Timer::~Timer()>:
c000d204:	83 ec 0c             	sub    esp,0xc
c000d207:	ba 6c e2 01 c0       	mov    edx,0xc001e26c
c000d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d210:	89 10                	mov    DWORD PTR [eax],edx
c000d212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d216:	83 ec 0c             	sub    esp,0xc
c000d219:	50                   	push   eax
c000d21a:	e8 a7 e6 ff ff       	call   c000b8c6 <Device::~Device()>
c000d21f:	83 c4 10             	add    esp,0x10
c000d222:	90                   	nop
c000d223:	83 c4 0c             	add    esp,0xc
c000d226:	c3                   	ret    
c000d227:	90                   	nop

c000d228 <Timer::~Timer()>:
c000d228:	83 ec 0c             	sub    esp,0xc
c000d22b:	83 ec 0c             	sub    esp,0xc
c000d22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d232:	e8 cd ff ff ff       	call   c000d204 <Timer::~Timer()>
c000d237:	83 c4 10             	add    esp,0x10
c000d23a:	83 ec 08             	sub    esp,0x8
c000d23d:	68 5c 01 00 00       	push   0x15c
c000d242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d246:	e8 46 d2 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000d24b:	83 c4 10             	add    esp,0x10
c000d24e:	83 c4 0c             	add    esp,0xc
c000d251:	c3                   	ret    

c000d252 <Timer::read()>:
c000d252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d256:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d25c:	c3                   	ret    

c000d25d <setupTimer(int)>:
c000d25d:	53                   	push   ebx
c000d25e:	83 ec 14             	sub    esp,0x14
c000d261:	68 5c 01 00 00       	push   0x15c
c000d266:	e8 4e a5 ff ff       	call   c00077b9 <malloc>
c000d26b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d26e:	89 c3                	mov    ebx,eax
c000d270:	e8 fb e7 00 00       	call   c001ba70 <PIT::PIT()>
c000d275:	58                   	pop    eax
c000d276:	5a                   	pop    edx
c000d277:	53                   	push   ebx
c000d278:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d27e:	e8 41 e7 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c000d283:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d285:	6a 00                	push   0x0
c000d287:	6a 00                	push   0x0
c000d289:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d28d:	53                   	push   ebx
c000d28e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d291:	89 d8                	mov    eax,ebx
c000d293:	83 c4 28             	add    esp,0x28
c000d296:	5b                   	pop    ebx
c000d297:	c3                   	ret    

c000d298 <timerHandler(unsigned int)>:
c000d298:	56                   	push   esi
c000d299:	53                   	push   ebx
c000d29a:	51                   	push   ecx
c000d29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29f:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d2a5:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d2ac:	0f 84 4a 01 00 00    	je     c000d3fc <timerHandler(unsigned int)+0x164>
c000d2b2:	fa                   	cli    
c000d2b3:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d2b9:	83 ec 0c             	sub    esp,0xc
c000d2bc:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d2c2:	68 78 51 02 c0       	push   0xc0025178
c000d2c7:	e8 64 f4 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2cc:	83 c4 10             	add    esp,0x10
c000d2cf:	84 c0                	test   al,al
c000d2d1:	0f 85 a1 00 00 00    	jne    c000d378 <timerHandler(unsigned int)+0xe0>
c000d2d7:	83 ec 0c             	sub    esp,0xc
c000d2da:	68 78 51 02 c0       	push   0xc0025178
c000d2df:	e8 68 f4 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2e4:	83 c4 10             	add    esp,0x10
c000d2e7:	89 c6                	mov    esi,eax
c000d2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2ec:	83 ec 0c             	sub    esp,0xc
c000d2ef:	68 78 51 02 c0       	push   0xc0025178
c000d2f4:	e8 53 f4 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2f9:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d300:	89 c3                	mov    ebx,eax
c000d302:	e8 4d f4 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d307:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d30a:	83 c4 10             	add    esp,0x10
c000d30d:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d313:	77 23                	ja     c000d338 <timerHandler(unsigned int)+0xa0>
c000d315:	83 ec 0c             	sub    esp,0xc
c000d318:	53                   	push   ebx
c000d319:	e8 a2 69 00 00       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c000d31e:	83 c4 10             	add    esp,0x10
c000d321:	39 de                	cmp    esi,ebx
c000d323:	75 27                	jne    c000d34c <timerHandler(unsigned int)+0xb4>
c000d325:	83 ec 0c             	sub    esp,0xc
c000d328:	68 78 51 02 c0       	push   0xc0025178
c000d32d:	e8 1a f4 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d332:	89 c6                	mov    esi,eax
c000d334:	eb 12                	jmp    c000d348 <timerHandler(unsigned int)+0xb0>
c000d336:	66 90                	xchg   ax,ax
c000d338:	52                   	push   edx
c000d339:	52                   	push   edx
c000d33a:	53                   	push   ebx
c000d33b:	68 78 51 02 c0       	push   0xc0025178
c000d340:	e8 c7 f4 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d345:	8d 76 00             	lea    esi,[esi+0x0]
c000d348:	83 c4 10             	add    esp,0x10
c000d34b:	90                   	nop
c000d34c:	83 ec 0c             	sub    esp,0xc
c000d34f:	68 78 51 02 c0       	push   0xc0025178
c000d354:	e8 d7 f3 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d359:	83 c4 10             	add    esp,0x10
c000d35c:	84 c0                	test   al,al
c000d35e:	75 18                	jne    c000d378 <timerHandler(unsigned int)+0xe0>
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	68 78 51 02 c0       	push   0xc0025178
c000d368:	e8 df f3 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d36d:	83 c4 10             	add    esp,0x10
c000d370:	39 f0                	cmp    eax,esi
c000d372:	0f 85 74 ff ff ff    	jne    c000d2ec <timerHandler(unsigned int)+0x54>
c000d378:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d37d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d381:	74 41                	je     c000d3c4 <timerHandler(unsigned int)+0x12c>
c000d383:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d38a:	74 38                	je     c000d3c4 <timerHandler(unsigned int)+0x12c>
c000d38c:	fa                   	cli    
c000d38d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d393:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d398:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d39e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d3a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3a7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d3aa:	72 08                	jb     c000d3b4 <timerHandler(unsigned int)+0x11c>
c000d3ac:	e8 4b 64 00 00       	call   c00137fc <schedule()>
c000d3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3b4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3b9:	48                   	dec    eax
c000d3ba:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3bf:	75 03                	jne    c000d3c4 <timerHandler(unsigned int)+0x12c>
c000d3c1:	fb                   	sti    
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d3c9:	48                   	dec    eax
c000d3ca:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d3cf:	75 1b                	jne    c000d3ec <timerHandler(unsigned int)+0x154>
c000d3d1:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d3d8:	74 12                	je     c000d3ec <timerHandler(unsigned int)+0x154>
c000d3da:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d3e4:	e8 13 64 00 00       	call   c00137fc <schedule()>
c000d3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3ec:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3f1:	48                   	dec    eax
c000d3f2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3f7:	75 03                	jne    c000d3fc <timerHandler(unsigned int)+0x164>
c000d3f9:	fb                   	sti    
c000d3fa:	66 90                	xchg   ax,ax
c000d3fc:	58                   	pop    eax
c000d3fd:	5b                   	pop    ebx
c000d3fe:	5e                   	pop    esi
c000d3ff:	c3                   	ret    

c000d400 <VCache::VCache(PhysicalDisk*)>:
c000d400:	53                   	push   ebx
c000d401:	83 ec 18             	sub    esp,0x18
c000d404:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40d:	89 10                	mov    DWORD PTR [eax],edx
c000d40f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d413:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d429:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d430:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d442:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d458:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d45c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d460:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d467:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d46e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d472:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d482:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d491:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d499:	83 ec 0c             	sub    esp,0xc
c000d49c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a0:	e8 14 a3 ff ff       	call   c00077b9 <malloc>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 c3                	mov    ebx,eax
c000d4aa:	83 ec 0c             	sub    esp,0xc
c000d4ad:	53                   	push   ebx
c000d4ae:	e8 15 61 00 00       	call   c00135c8 <Mutex::Mutex()>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d4bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d4c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4cc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d4d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4d7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d4dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4e8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4f8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4fb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d502:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d506:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d50a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d510:	05 00 01 00 00       	add    eax,0x100
c000d515:	c1 e0 04             	shl    eax,0x4
c000d518:	83 ec 0c             	sub    esp,0xc
c000d51b:	50                   	push   eax
c000d51c:	e8 98 a2 ff ff       	call   c00077b9 <malloc>
c000d521:	83 c4 10             	add    esp,0x10
c000d524:	89 c2                	mov    edx,eax
c000d526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d531:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d540:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d544:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d54a:	c1 e0 06             	shl    eax,0x6
c000d54d:	83 ec 0c             	sub    esp,0xc
c000d550:	50                   	push   eax
c000d551:	e8 63 a2 ff ff       	call   c00077b9 <malloc>
c000d556:	83 c4 10             	add    esp,0x10
c000d559:	89 c2                	mov    edx,eax
c000d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d562:	90                   	nop
c000d563:	83 c4 18             	add    esp,0x18
c000d566:	5b                   	pop    ebx
c000d567:	c3                   	ret    

c000d568 <VCache::invalidateReadBuffer()>:
c000d568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d56c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d572:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d576:	c3                   	ret    
c000d577:	90                   	nop

c000d578 <VCache::writeWriteBuffer()>:
c000d578:	53                   	push   ebx
c000d579:	83 ec 08             	sub    esp,0x8
c000d57c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d580:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d584:	74 1e                	je     c000d5a4 <VCache::writeWriteBuffer()+0x2c>
c000d586:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d589:	83 ec 0c             	sub    esp,0xc
c000d58c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d58e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d591:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d594:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d597:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d59a:	50                   	push   eax
c000d59b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d59e:	83 c4 20             	add    esp,0x20
c000d5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d5ab:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d5b2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d5b6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d5bd:	83 c4 08             	add    esp,0x8
c000d5c0:	5b                   	pop    ebx
c000d5c1:	c3                   	ret    
c000d5c2:	66 90                	xchg   ax,ax

c000d5c4 <VCache::~VCache()>:
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d0:	89 10                	mov    DWORD PTR [eax],edx
c000d5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d5d9:	84 c0                	test   al,al
c000d5db:	74 0f                	je     c000d5ec <VCache::~VCache()+0x28>
c000d5dd:	83 ec 0c             	sub    esp,0xc
c000d5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e4:	e8 8f ff ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5f3:	83 ec 0c             	sub    esp,0xc
c000d5f6:	50                   	push   eax
c000d5f7:	e8 cd a1 ff ff       	call   c00077c9 <free>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d603:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	50                   	push   eax
c000d60a:	e8 ba a1 ff ff       	call   c00077c9 <free>
c000d60f:	83 c4 10             	add    esp,0x10
c000d612:	90                   	nop
c000d613:	83 c4 0c             	add    esp,0xc
c000d616:	c3                   	ret    
c000d617:	90                   	nop

c000d618 <VCache::~VCache()>:
c000d618:	83 ec 0c             	sub    esp,0xc
c000d61b:	83 ec 0c             	sub    esp,0xc
c000d61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d622:	e8 9d ff ff ff       	call   c000d5c4 <VCache::~VCache()>
c000d627:	83 c4 10             	add    esp,0x10
c000d62a:	83 ec 08             	sub    esp,0x8
c000d62d:	6a 44                	push   0x44
c000d62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d633:	e8 59 ce ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	83 c4 0c             	add    esp,0xc
c000d63e:	c3                   	ret    
c000d63f:	90                   	nop

c000d640 <VCache::write(unsigned long long, int, void*)>:
c000d640:	55                   	push   ebp
c000d641:	57                   	push   edi
c000d642:	56                   	push   esi
c000d643:	53                   	push   ebx
c000d644:	83 ec 1c             	sub    esp,0x1c
c000d647:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d64b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d653:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d657:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d65b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d65f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d663:	31 c0                	xor    eax,eax
c000d665:	8d 76 00             	lea    esi,[esi+0x0]
c000d668:	39 e8                	cmp    eax,ebp
c000d66a:	7d 18                	jge    c000d684 <VCache::write(unsigned long long, int, void*)+0x44>
c000d66c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d66f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d675:	0f af c8             	imul   ecx,eax
c000d678:	89 ca                	mov    edx,ecx
c000d67a:	01 f2                	add    edx,esi
c000d67c:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d67e:	40                   	inc    eax
c000d67f:	eb e7                	jmp    c000d668 <VCache::write(unsigned long long, int, void*)+0x28>
c000d681:	8d 76 00             	lea    esi,[esi+0x0]
c000d684:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d688:	74 0a                	je     c000d694 <VCache::write(unsigned long long, int, void*)+0x54>
c000d68a:	53                   	push   ebx
c000d68b:	e8 d8 fe ff ff       	call   c000d568 <VCache::invalidateReadBuffer()>
c000d690:	58                   	pop    eax
c000d691:	8d 76 00             	lea    esi,[esi+0x0]
c000d694:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d698:	74 5a                	je     c000d6f4 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d69a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d69d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6a1:	89 f8                	mov    eax,edi
c000d6a3:	99                   	cdq    
c000d6a4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d6a7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d6aa:	31 c1                	xor    ecx,eax
c000d6ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6b0:	31 d0                	xor    eax,edx
c000d6b2:	09 c1                	or     ecx,eax
c000d6b4:	75 32                	jne    c000d6e8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6b6:	83 fd 01             	cmp    ebp,0x1
c000d6b9:	75 2d                	jne    c000d6e8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6bb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6be:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6c4:	0f af f9             	imul   edi,ecx
c000d6c7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d6ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6cf:	40                   	inc    eax
c000d6d0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d6d3:	83 f8 40             	cmp    eax,0x40
c000d6d6:	75 74                	jne    c000d74c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	53                   	push   ebx
c000d6dc:	e8 97 fe ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c000d6e1:	83 c4 10             	add    esp,0x10
c000d6e4:	eb 66                	jmp    c000d74c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6e6:	66 90                	xchg   ax,ax
c000d6e8:	83 ec 0c             	sub    esp,0xc
c000d6eb:	53                   	push   ebx
c000d6ec:	e8 87 fe ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6f7:	83 fd 3f             	cmp    ebp,0x3f
c000d6fa:	7f 24                	jg     c000d720 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d700:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d703:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d706:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d70a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d70e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d711:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d714:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d71a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d71c:	eb 2e                	jmp    c000d74c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d71e:	66 90                	xchg   ax,ax
c000d720:	8b 10                	mov    edx,DWORD PTR [eax]
c000d722:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d726:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d72a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d72e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d732:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d736:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d73a:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d73e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d741:	83 c4 1c             	add    esp,0x1c
c000d744:	5b                   	pop    ebx
c000d745:	5e                   	pop    esi
c000d746:	5f                   	pop    edi
c000d747:	5d                   	pop    ebp
c000d748:	ff e0                	jmp    eax
c000d74a:	66 90                	xchg   ax,ax
c000d74c:	83 c4 1c             	add    esp,0x1c
c000d74f:	31 c0                	xor    eax,eax
c000d751:	5b                   	pop    ebx
c000d752:	5e                   	pop    esi
c000d753:	5f                   	pop    edi
c000d754:	5d                   	pop    ebp
c000d755:	c3                   	ret    

c000d756 <VCache::read(unsigned long long, int, void*)>:
c000d756:	55                   	push   ebp
c000d757:	57                   	push   edi
c000d758:	56                   	push   esi
c000d759:	53                   	push   ebx
c000d75a:	83 ec 1c             	sub    esp,0x1c
c000d75d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d761:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d765:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d769:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d771:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d775:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d779:	74 0d                	je     c000d788 <VCache::read(unsigned long long, int, void*)+0x32>
c000d77b:	83 ec 0c             	sub    esp,0xc
c000d77e:	55                   	push   ebp
c000d77f:	e8 f4 fd ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	90                   	nop
c000d788:	83 ec 0c             	sub    esp,0xc
c000d78b:	55                   	push   ebp
c000d78c:	e8 d7 fd ff ff       	call   c000d568 <VCache::invalidateReadBuffer()>
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d797:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d79d:	6a 00                	push   0x0
c000d79f:	53                   	push   ebx
c000d7a0:	e8 2b 2d ff ff       	call   c00004d0 <memset>
c000d7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7ae:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d7b2:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d7b6:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d7ba:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d7be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d7c2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d7c5:	83 c4 2c             	add    esp,0x2c
c000d7c8:	5b                   	pop    ebx
c000d7c9:	5e                   	pop    esi
c000d7ca:	5f                   	pop    edi
c000d7cb:	5d                   	pop    ebp
c000d7cc:	ff e0                	jmp    eax

c000d7ce <Video::putrect(int, int, int, int, unsigned int)>:
c000d7ce:	55                   	push   ebp
c000d7cf:	57                   	push   edi
c000d7d0:	56                   	push   esi
c000d7d1:	53                   	push   ebx
c000d7d2:	83 ec 1c             	sub    esp,0x1c
c000d7d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d7d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7dd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d7e1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d7e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ed:	01 df                	add    edi,ebx
c000d7ef:	39 fb                	cmp    ebx,edi
c000d7f1:	7d 1f                	jge    c000d812 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d7f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7f7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7fb:	7d 12                	jge    c000d80f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7fd:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7ff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d803:	53                   	push   ebx
c000d804:	55                   	push   ebp
c000d805:	45                   	inc    ebp
c000d806:	56                   	push   esi
c000d807:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	eb e8                	jmp    c000d7f7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d80f:	43                   	inc    ebx
c000d810:	eb dd                	jmp    c000d7ef <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d812:	83 c4 1c             	add    esp,0x1c
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	31 ff                	xor    edi,edi
c000d81e:	56                   	push   esi
c000d81f:	53                   	push   ebx
c000d820:	83 ec 1c             	sub    esp,0x1c
c000d823:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d827:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d82b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d832:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d83b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d83f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d843:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d846:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d84a:	01 f9                	add    ecx,edi
c000d84c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d850:	7d 2f                	jge    c000d881 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d852:	31 f6                	xor    esi,esi
c000d854:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d858:	01 f2                	add    edx,esi
c000d85a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d85e:	7d 1a                	jge    c000d87a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d860:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d863:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d866:	46                   	inc    esi
c000d867:	51                   	push   ecx
c000d868:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d86c:	52                   	push   edx
c000d86d:	55                   	push   ebp
c000d86e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d871:	83 c4 10             	add    esp,0x10
c000d874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d878:	eb da                	jmp    c000d854 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d87a:	47                   	inc    edi
c000d87b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d87f:	eb c5                	jmp    c000d846 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d881:	83 c4 1c             	add    esp,0x1c
c000d884:	5b                   	pop    ebx
c000d885:	5e                   	pop    esi
c000d886:	5f                   	pop    edi
c000d887:	5d                   	pop    ebp
c000d888:	c3                   	ret    
c000d889:	90                   	nop

c000d88a <Video::blit(unsigned int*, int, int, int, int)>:
c000d88a:	55                   	push   ebp
c000d88b:	57                   	push   edi
c000d88c:	56                   	push   esi
c000d88d:	53                   	push   ebx
c000d88e:	83 ec 1c             	sub    esp,0x1c
c000d891:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d895:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d899:	85 c0                	test   eax,eax
c000d89b:	79 02                	jns    c000d89f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d89d:	31 c0                	xor    eax,eax
c000d89f:	c1 e0 02             	shl    eax,0x2
c000d8a2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d8a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d8ae:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d8b2:	39 d8                	cmp    eax,ebx
c000d8b4:	7e 49                	jle    c000d8ff <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8b6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8bc:	7c 41                	jl     c000d8ff <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d8be:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d8c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8c6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8ca:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d8ce:	39 f9                	cmp    ecx,edi
c000d8d0:	7e 22                	jle    c000d8f4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d8d2:	83 c5 04             	add    ebp,0x4
c000d8d5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8db:	7c 14                	jl     c000d8f1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d8dd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8df:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d8e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8ea:	56                   	push   esi
c000d8eb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d8ee:	83 c4 10             	add    esp,0x10
c000d8f1:	47                   	inc    edi
c000d8f2:	eb d2                	jmp    c000d8c6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d8f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8f8:	43                   	inc    ebx
c000d8f9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8fd:	eb ab                	jmp    c000d8aa <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8ff:	83 c4 1c             	add    esp,0x1c
c000d902:	5b                   	pop    ebx
c000d903:	5e                   	pop    esi
c000d904:	5f                   	pop    edi
c000d905:	5d                   	pop    ebp
c000d906:	c3                   	ret    
c000d907:	90                   	nop

c000d908 <Video::clearScreen(unsigned int)>:
c000d908:	57                   	push   edi
c000d909:	56                   	push   esi
c000d90a:	53                   	push   ebx
c000d90b:	31 db                	xor    ebx,ebx
c000d90d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d911:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d917:	7e 1f                	jle    c000d938 <Video::clearScreen(unsigned int)+0x30>
c000d919:	31 ff                	xor    edi,edi
c000d91b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d921:	7e 12                	jle    c000d935 <Video::clearScreen(unsigned int)+0x2d>
c000d923:	8b 06                	mov    eax,DWORD PTR [esi]
c000d925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d929:	53                   	push   ebx
c000d92a:	57                   	push   edi
c000d92b:	47                   	inc    edi
c000d92c:	56                   	push   esi
c000d92d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	eb e6                	jmp    c000d91b <Video::clearScreen(unsigned int)+0x13>
c000d935:	43                   	inc    ebx
c000d936:	eb d9                	jmp    c000d911 <Video::clearScreen(unsigned int)+0x9>
c000d938:	5b                   	pop    ebx
c000d939:	5e                   	pop    esi
c000d93a:	5f                   	pop    edi
c000d93b:	c3                   	ret    

c000d93c <Video::putpixel(int, int, unsigned int)>:
c000d93c:	c7 44 24 04 a4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2a4
c000d944:	e9 be 28 00 00       	jmp    c0010207 <KePanic(char const*)>
c000d949:	90                   	nop

c000d94a <Video::Video(char const*)>:
c000d94a:	83 ec 0c             	sub    esp,0xc
c000d94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d951:	83 ec 08             	sub    esp,0x8
c000d954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d958:	50                   	push   eax
c000d959:	e8 fe e1 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000d95e:	83 c4 10             	add    esp,0x10
c000d961:	ba 14 e3 01 c0       	mov    edx,0xc001e314
c000d966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96a:	89 10                	mov    DWORD PTR [eax],edx
c000d96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d970:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d97a:	90                   	nop
c000d97b:	83 c4 0c             	add    esp,0xc
c000d97e:	c3                   	ret    
c000d97f:	90                   	nop

c000d980 <Video::~Video()>:
c000d980:	83 ec 0c             	sub    esp,0xc
c000d983:	ba 14 e3 01 c0       	mov    edx,0xc001e314
c000d988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98c:	89 10                	mov    DWORD PTR [eax],edx
c000d98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d992:	83 ec 0c             	sub    esp,0xc
c000d995:	50                   	push   eax
c000d996:	e8 2b df ff ff       	call   c000b8c6 <Device::~Device()>
c000d99b:	83 c4 10             	add    esp,0x10
c000d99e:	90                   	nop
c000d99f:	83 c4 0c             	add    esp,0xc
c000d9a2:	c3                   	ret    
c000d9a3:	90                   	nop

c000d9a4 <Video::~Video()>:
c000d9a4:	83 ec 0c             	sub    esp,0xc
c000d9a7:	83 ec 0c             	sub    esp,0xc
c000d9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ae:	e8 cd ff ff ff       	call   c000d980 <Video::~Video()>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	83 ec 08             	sub    esp,0x8
c000d9b9:	68 64 01 00 00       	push   0x164
c000d9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c2:	e8 ca ca ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	83 c4 0c             	add    esp,0xc
c000d9cd:	c3                   	ret    

c000d9ce <Video::isMonochrome()>:
c000d9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9d2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d9d8:	c3                   	ret    
c000d9d9:	90                   	nop

c000d9da <Video::getWidth()>:
c000d9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d9e4:	c3                   	ret    
c000d9e5:	90                   	nop

c000d9e6 <Video::getHeight()>:
c000d9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9f0:	c3                   	ret    
c000d9f1:	90                   	nop

c000d9f2 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d9f2:	55                   	push   ebp
c000d9f3:	57                   	push   edi
c000d9f4:	56                   	push   esi
c000d9f5:	53                   	push   ebx
c000d9f6:	83 ec 2c             	sub    esp,0x2c
c000d9f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da01:	83 f8 01             	cmp    eax,0x1
c000da04:	19 c9                	sbb    ecx,ecx
c000da06:	31 db                	xor    ebx,ebx
c000da08:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da0c:	89 cd                	mov    ebp,ecx
c000da0e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da16:	f7 d5                	not    ebp
c000da18:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da1e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da22:	01 d8                	add    eax,ebx
c000da24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da28:	56                   	push   esi
c000da29:	e8 b8 ff ff ff       	call   c000d9e6 <Video::getHeight()>
c000da2e:	59                   	pop    ecx
c000da2f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000da33:	7e 70                	jle    c000daa5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000da35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da39:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000da3d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000da40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da44:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da48:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000da4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da53:	89 f8                	mov    eax,edi
c000da55:	83 c0 20             	add    eax,0x20
c000da58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da5c:	56                   	push   esi
c000da5d:	e8 78 ff ff ff       	call   c000d9da <Video::getWidth()>
c000da62:	5a                   	pop    edx
c000da63:	39 c7                	cmp    edi,eax
c000da65:	7d 34                	jge    c000da9b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da67:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da6c:	74 05                	je     c000da73 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da6e:	8b 06                	mov    eax,DWORD PTR [esi]
c000da70:	55                   	push   ebp
c000da71:	eb 0d                	jmp    c000da80 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da73:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da78:	74 12                	je     c000da8c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000da7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da84:	57                   	push   edi
c000da85:	56                   	push   esi
c000da86:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da90:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da94:	47                   	inc    edi
c000da95:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da99:	75 c1                	jne    c000da5c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da9b:	43                   	inc    ebx
c000da9c:	83 fb 20             	cmp    ebx,0x20
c000da9f:	0f 85 79 ff ff ff    	jne    c000da1e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000daa5:	83 c4 2c             	add    esp,0x2c
c000daa8:	5b                   	pop    ebx
c000daa9:	5e                   	pop    esi
c000daaa:	5f                   	pop    edi
c000daab:	5d                   	pop    ebp
c000daac:	c3                   	ret    
c000daad:	90                   	nop

c000daae <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000daae:	55                   	push   ebp
c000daaf:	57                   	push   edi
c000dab0:	56                   	push   esi
c000dab1:	53                   	push   ebx
c000dab2:	83 ec 28             	sub    esp,0x28
c000dab5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dab9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dabd:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dac1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dac5:	c1 e6 08             	shl    esi,0x8
c000dac8:	01 c6                	add    esi,eax
c000daca:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dace:	c1 e0 08             	shl    eax,0x8
c000dad1:	01 d0                	add    eax,edx
c000dad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dadb:	0f af c6             	imul   eax,esi
c000dade:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dae5:	50                   	push   eax
c000dae6:	e8 ce 9c ff ff       	call   c00077b9 <malloc>
c000daeb:	83 c4 10             	add    esp,0x10
c000daee:	89 c7                	mov    edi,eax
c000daf0:	85 c0                	test   eax,eax
c000daf2:	75 10                	jne    c000db04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	68 c5 e2 01 c0       	push   0xc001e2c5
c000dafc:	e8 06 27 00 00       	call   c0010207 <KePanic(char const*)>
c000db01:	83 c4 10             	add    esp,0x10
c000db04:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db07:	ba 12 00 00 00       	mov    edx,0x12
c000db0c:	84 c0                	test   al,al
c000db0e:	74 11                	je     c000db21 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db10:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db14:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db18:	c1 fa 03             	sar    edx,0x3
c000db1b:	0f af d1             	imul   edx,ecx
c000db1e:	83 c2 12             	add    edx,0x12
c000db21:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000db25:	74 04                	je     c000db2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000db27:	85 f6                	test   esi,esi
c000db29:	75 12                	jne    c000db3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000db2b:	83 ec 0c             	sub    esp,0xc
c000db2e:	68 d5 e2 01 c0       	push   0xc001e2d5
c000db33:	e8 4f ca ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000db38:	e9 b8 00 00 00       	jmp    c000dbf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000db3d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000db41:	80 f9 02             	cmp    cl,0x2
c000db44:	0f 85 96 00 00 00    	jne    c000dbe0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000db4a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000db4f:	75 0e                	jne    c000db5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db51:	84 c0                	test   al,al
c000db53:	75 0a                	jne    c000db5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db55:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db58:	83 e8 18             	sub    eax,0x18
c000db5b:	a8 f7                	test   al,0xf7
c000db5d:	74 0a                	je     c000db69 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db5f:	83 ec 0c             	sub    esp,0xc
c000db62:	68 ea e2 01 c0       	push   0xc001e2ea
c000db67:	eb 7f                	jmp    c000dbe8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db71:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db79:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db7d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db85:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db89:	75 0c                	jne    c000db97 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db8b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db90:	c1 e0 18             	shl    eax,0x18
c000db93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db97:	45                   	inc    ebp
c000db98:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db9d:	c1 e1 10             	shl    ecx,0x10
c000dba0:	89 c8                	mov    eax,ecx
c000dba2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dba7:	c1 e1 08             	shl    ecx,0x8
c000dbaa:	09 c1                	or     ecx,eax
c000dbac:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dbb0:	09 c1                	or     ecx,eax
c000dbb2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dbb6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dbba:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dbbe:	c1 f8 03             	sar    eax,0x3
c000dbc1:	01 c2                	add    edx,eax
c000dbc3:	89 e8                	mov    eax,ebp
c000dbc5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dbc9:	39 c6                	cmp    esi,eax
c000dbcb:	7f b0                	jg     c000db7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dbcd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dbd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbd5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dbd8:	7e 22                	jle    c000dbfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dbda:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dbde:	eb 99                	jmp    c000db79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dbe0:	50                   	push   eax
c000dbe1:	50                   	push   eax
c000dbe2:	51                   	push   ecx
c000dbe3:	68 f8 e2 01 c0       	push   0xc001e2f8
c000dbe8:	e8 9a c9 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000dbed:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbf0:	e8 d4 9b ff ff       	call   c00077c9 <free>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	31 ff                	xor    edi,edi
c000dbfa:	eb 0f                	jmp    c000dc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dbfc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc00:	89 30                	mov    DWORD PTR [eax],esi
c000dc02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc09:	89 30                	mov    DWORD PTR [eax],esi
c000dc0b:	83 c4 1c             	add    esp,0x1c
c000dc0e:	89 f8                	mov    eax,edi
c000dc10:	5b                   	pop    ebx
c000dc11:	5e                   	pop    esi
c000dc12:	5f                   	pop    edi
c000dc13:	5d                   	pop    ebp
c000dc14:	c3                   	ret    
c000dc15:	90                   	nop

c000dc16 <Video::putTGA(int, int, unsigned char*, int)>:
c000dc16:	55                   	push   ebp
c000dc17:	57                   	push   edi
c000dc18:	56                   	push   esi
c000dc19:	53                   	push   ebx
c000dc1a:	83 ec 28             	sub    esp,0x28
c000dc1d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc21:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc25:	50                   	push   eax
c000dc26:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc2a:	50                   	push   eax
c000dc2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc33:	56                   	push   esi
c000dc34:	e8 75 fe ff ff       	call   c000daae <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dc39:	83 c4 20             	add    esp,0x20
c000dc3c:	85 c0                	test   eax,eax
c000dc3e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dc42:	74 35                	je     c000dc79 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc44:	89 c7                	mov    edi,eax
c000dc46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc4a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dc4e:	39 d8                	cmp    eax,ebx
c000dc50:	7e 27                	jle    c000dc79 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc5a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc5e:	39 e8                	cmp    eax,ebp
c000dc60:	7e 14                	jle    c000dc76 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc62:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc64:	83 c7 04             	add    edi,0x4
c000dc67:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc6a:	53                   	push   ebx
c000dc6b:	55                   	push   ebp
c000dc6c:	45                   	inc    ebp
c000dc6d:	56                   	push   esi
c000dc6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	eb e0                	jmp    c000dc56 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc76:	43                   	inc    ebx
c000dc77:	eb cd                	jmp    c000dc46 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc79:	83 c4 1c             	add    esp,0x1c
c000dc7c:	5b                   	pop    ebx
c000dc7d:	5e                   	pop    esi
c000dc7e:	5f                   	pop    edi
c000dc7f:	5d                   	pop    ebp
c000dc80:	c3                   	ret    
c000dc81:	66 90                	xchg   ax,ax
c000dc83:	90                   	nop

c000dc84 <ACPI::close(int, int, void*)>:
c000dc84:	83 ec 1c             	sub    esp,0x1c
c000dc87:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc8f:	74 0b                	je     c000dc9c <ACPI::close(int, int, void*)+0x18>
c000dc91:	b8 00 00 00 00       	mov    eax,0x0
c000dc96:	e9 9d 00 00 00       	jmp    c000dd38 <ACPI::close(int, int, void*)+0xb4>
c000dc9b:	90                   	nop
c000dc9c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dca1:	75 29                	jne    c000dccc <ACPI::close(int, int, void*)+0x48>
c000dca3:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dca8:	85 c0                	test   eax,eax
c000dcaa:	74 08                	je     c000dcb4 <ACPI::close(int, int, void*)+0x30>
c000dcac:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dcb1:	ff d0                	call   eax
c000dcb3:	90                   	nop
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	68 54 e3 01 c0       	push   0xc001e354
c000dcbc:	e8 46 25 00 00       	call   c0010207 <KePanic(char const*)>
c000dcc1:	83 c4 10             	add    esp,0x10
c000dcc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcc9:	eb 6d                	jmp    c000dd38 <ACPI::close(int, int, void*)+0xb4>
c000dccb:	90                   	nop
c000dccc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dcd1:	75 5d                	jne    c000dd30 <ACPI::close(int, int, void*)+0xac>
c000dcd3:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dcd8:	85 c0                	test   eax,eax
c000dcda:	74 08                	je     c000dce4 <ACPI::close(int, int, void*)+0x60>
c000dcdc:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dce1:	ff d0                	call   eax
c000dce3:	90                   	nop
c000dce4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dce9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dcf0:	25 ff 00 00 00       	and    eax,0xff
c000dcf5:	83 e0 02             	and    eax,0x2
c000dcf8:	74 1e                	je     c000dd18 <ACPI::close(int, int, void*)+0x94>
c000dcfa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dd01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd05:	89 c2                	mov    edx,eax
c000dd07:	ec                   	in     al,dx
c000dd08:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd10:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd14:	eb d6                	jmp    c000dcec <ACPI::close(int, int, void*)+0x68>
c000dd16:	66 90                	xchg   ax,ax
c000dd18:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd1f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dd24:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dd28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd2c:	ee                   	out    dx,al
c000dd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd35:	8d 76 00             	lea    esi,[esi+0x0]
c000dd38:	83 c4 1c             	add    esp,0x1c
c000dd3b:	c3                   	ret    

c000dd3c <findRSDP()>:
c000dd3c:	83 ec 1c             	sub    esp,0x1c
c000dd3f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd44:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd4a:	83 e0 04             	and    eax,0x4
c000dd4d:	84 c0                	test   al,al
c000dd4f:	75 07                	jne    c000dd58 <findRSDP()+0x1c>
c000dd51:	b8 00 00 00 00       	mov    eax,0x0
c000dd56:	eb 70                	jmp    c000ddc8 <findRSDP()+0x8c>
c000dd58:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd5d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd62:	7f 1c                	jg     c000dd80 <findRSDP()+0x44>
c000dd64:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd69:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd6f:	83 e2 fb             	and    edx,0xfffffffb
c000dd72:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd78:	b8 00 00 00 00       	mov    eax,0x0
c000dd7d:	eb 49                	jmp    c000ddc8 <findRSDP()+0x8c>
c000dd7f:	90                   	nop
c000dd80:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd88:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd90:	77 2e                	ja     c000ddc0 <findRSDP()+0x84>
c000dd92:	83 ec 04             	sub    esp,0x4
c000dd95:	6a 08                	push   0x8
c000dd97:	68 ef e3 01 c0       	push   0xc001e3ef
c000dd9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dda0:	e8 eb 25 ff ff       	call   c0000390 <memcmp>
c000dda5:	83 c4 10             	add    esp,0x10
c000dda8:	85 c0                	test   eax,eax
c000ddaa:	0f 94 c0             	sete   al
c000ddad:	84 c0                	test   al,al
c000ddaf:	74 07                	je     c000ddb8 <findRSDP()+0x7c>
c000ddb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddb5:	eb 11                	jmp    c000ddc8 <findRSDP()+0x8c>
c000ddb7:	90                   	nop
c000ddb8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ddbd:	eb c9                	jmp    c000dd88 <findRSDP()+0x4c>
c000ddbf:	90                   	nop
c000ddc0:	b8 00 00 00 00       	mov    eax,0x0
c000ddc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddc8:	83 c4 1c             	add    esp,0x1c
c000ddcb:	c3                   	ret    

c000ddcc <loadACPITables(unsigned char*)>:
c000ddcc:	57                   	push   edi
c000ddcd:	56                   	push   esi
c000ddce:	53                   	push   ebx
c000ddcf:	83 ec 60             	sub    esp,0x60
c000ddd2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddd7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dddd:	83 e0 04             	and    eax,0x4
c000dde0:	84 c0                	test   al,al
c000dde2:	0f 84 3c 02 00 00    	je     c000e024 <loadACPITables(unsigned char*)+0x258>
c000dde8:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000dded:	84 c0                	test   al,al
c000ddef:	74 77                	je     c000de68 <loadACPITables(unsigned char*)+0x9c>
c000ddf1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ddf9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ddfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de00:	83 e8 24             	sub    eax,0x24
c000de03:	c1 e8 03             	shr    eax,0x3
c000de06:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de0a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de12:	66 90                	xchg   ax,ax
c000de14:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de18:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de1c:	0f 8d b6 00 00 00    	jge    c000ded8 <loadACPITables(unsigned char*)+0x10c>
c000de22:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de26:	83 c0 24             	add    eax,0x24
c000de29:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000de2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000de31:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000de35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de39:	c1 e0 03             	shl    eax,0x3
c000de3c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000de40:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000de44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000de47:	8b 00                	mov    eax,DWORD PTR [eax]
c000de49:	89 c1                	mov    ecx,eax
c000de4b:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de50:	8d 50 01             	lea    edx,[eax+0x1]
c000de53:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de59:	89 ca                	mov    edx,ecx
c000de5b:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de62:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de66:	eb ac                	jmp    c000de14 <loadACPITables(unsigned char*)+0x48>
c000de68:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de77:	83 e8 24             	sub    eax,0x24
c000de7a:	c1 e8 02             	shr    eax,0x2
c000de7d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de81:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de89:	8d 76 00             	lea    esi,[esi+0x0]
c000de8c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de90:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de94:	7d 42                	jge    c000ded8 <loadACPITables(unsigned char*)+0x10c>
c000de96:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de9a:	83 c0 24             	add    eax,0x24
c000de9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dea1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dea5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dea9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dead:	c1 e0 02             	shl    eax,0x2
c000deb0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000deb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000deb8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deba:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000debf:	8d 50 01             	lea    edx,[eax+0x1]
c000dec2:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dec8:	89 ca                	mov    edx,ecx
c000deca:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000ded1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ded5:	eb b5                	jmp    c000de8c <loadACPITables(unsigned char*)+0xc0>
c000ded7:	90                   	nop
c000ded8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dee0:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dee5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dee9:	0f 8d 39 01 00 00    	jge    c000e028 <loadACPITables(unsigned char*)+0x25c>
c000deef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000def3:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000defa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000defe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df0a:	25 ff 0f 00 00       	and    eax,0xfff
c000df0f:	89 c6                	mov    esi,eax
c000df11:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df17:	83 ec 0c             	sub    esp,0xc
c000df1a:	6a 01                	push   0x1
c000df1c:	e8 64 b3 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	6a 01                	push   0x1
c000df33:	6a 01                	push   0x1
c000df35:	50                   	push   eax
c000df36:	52                   	push   edx
c000df37:	53                   	push   ebx
c000df38:	e8 b5 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df3d:	83 c4 20             	add    esp,0x20
c000df40:	09 f0                	or     eax,esi
c000df42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df46:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df4a:	c1 e0 03             	shl    eax,0x3
c000df4d:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000df52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df5e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df7a:	89 c6                	mov    esi,eax
c000df7c:	89 d7                	mov    edi,edx
c000df7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df80:	89 c8                	mov    eax,ecx
c000df82:	89 fa                	mov    edx,edi
c000df84:	89 f3                	mov    ebx,esi
c000df86:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df8a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dfa1:	05 00 10 00 00       	add    eax,0x1000
c000dfa6:	c1 e8 0c             	shr    eax,0xc
c000dfa9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dfb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfb9:	25 ff 0f 00 00       	and    eax,0xfff
c000dfbe:	89 c6                	mov    esi,eax
c000dfc0:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dfc6:	83 ec 0c             	sub    esp,0xc
c000dfc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dfcd:	e8 b3 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000dfd2:	83 c4 10             	add    esp,0x10
c000dfd5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfd9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfdf:	83 ec 0c             	sub    esp,0xc
c000dfe2:	6a 01                	push   0x1
c000dfe4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfe8:	50                   	push   eax
c000dfe9:	52                   	push   edx
c000dfea:	53                   	push   ebx
c000dfeb:	e8 02 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dff0:	83 c4 20             	add    esp,0x20
c000dff3:	09 f0                	or     eax,esi
c000dff5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	50                   	push   eax
c000e001:	e8 73 b5 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e00d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e011:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e018:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e01c:	e9 bf fe ff ff       	jmp    c000dee0 <loadACPITables(unsigned char*)+0x114>
c000e021:	8d 76 00             	lea    esi,[esi+0x0]
c000e024:	90                   	nop
c000e025:	8d 76 00             	lea    esi,[esi+0x0]
c000e028:	83 c4 60             	add    esp,0x60
c000e02b:	5b                   	pop    ebx
c000e02c:	5e                   	pop    esi
c000e02d:	5f                   	pop    edi
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <findRSDT(unsigned char*)>:
c000e030:	57                   	push   edi
c000e031:	56                   	push   esi
c000e032:	53                   	push   ebx
c000e033:	83 ec 50             	sub    esp,0x50
c000e036:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e03b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e041:	83 e0 04             	and    eax,0x4
c000e044:	84 c0                	test   al,al
c000e046:	75 0c                	jne    c000e054 <findRSDT(unsigned char*)+0x24>
c000e048:	b8 00 00 00 00       	mov    eax,0x0
c000e04d:	e9 26 01 00 00       	jmp    c000e178 <findRSDT(unsigned char*)+0x148>
c000e052:	66 90                	xchg   ax,ax
c000e054:	89 e0                	mov    eax,esp
c000e056:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e05a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e05e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e062:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e06a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e072:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e076:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e07a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e07e:	89 c6                	mov    esi,eax
c000e080:	89 d7                	mov    edi,edx
c000e082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e084:	89 c8                	mov    eax,ecx
c000e086:	89 fa                	mov    edx,edi
c000e088:	89 f3                	mov    ebx,esi
c000e08a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e08e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e092:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e096:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e09a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e09e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e0ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0be:	25 ff 0f 00 00       	and    eax,0xfff
c000e0c3:	89 c6                	mov    esi,eax
c000e0c5:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0cb:	83 ec 0c             	sub    esp,0xc
c000e0ce:	6a 02                	push   0x2
c000e0d0:	e8 b0 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e0dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0e2:	83 ec 0c             	sub    esp,0xc
c000e0e5:	6a 01                	push   0x1
c000e0e7:	6a 02                	push   0x2
c000e0e9:	50                   	push   eax
c000e0ea:	52                   	push   edx
c000e0eb:	53                   	push   ebx
c000e0ec:	e8 01 bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0f1:	83 c4 20             	add    esp,0x20
c000e0f4:	09 f0                	or     eax,esi
c000e0f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0fe:	25 ff 0f 00 00       	and    eax,0xfff
c000e103:	89 c6                	mov    esi,eax
c000e105:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	6a 02                	push   0x2
c000e110:	e8 70 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e11c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e122:	83 ec 0c             	sub    esp,0xc
c000e125:	6a 01                	push   0x1
c000e127:	6a 02                	push   0x2
c000e129:	50                   	push   eax
c000e12a:	52                   	push   edx
c000e12b:	53                   	push   ebx
c000e12c:	e8 c1 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e131:	83 c4 20             	add    esp,0x20
c000e134:	09 f0                	or     eax,esi
c000e136:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e13a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e13f:	75 13                	jne    c000e154 <findRSDT(unsigned char*)+0x124>
c000e141:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e14c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e150:	eb 22                	jmp    c000e174 <findRSDT(unsigned char*)+0x144>
c000e152:	66 90                	xchg   ax,ax
c000e154:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e159:	75 11                	jne    c000e16c <findRSDT(unsigned char*)+0x13c>
c000e15b:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e162:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e166:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e16a:	eb 08                	jmp    c000e174 <findRSDT(unsigned char*)+0x144>
c000e16c:	b8 00 00 00 00       	mov    eax,0x0
c000e171:	eb 05                	jmp    c000e178 <findRSDT(unsigned char*)+0x148>
c000e173:	90                   	nop
c000e174:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e178:	83 c4 50             	add    esp,0x50
c000e17b:	5b                   	pop    ebx
c000e17c:	5e                   	pop    esi
c000e17d:	5f                   	pop    edi
c000e17e:	c3                   	ret    
c000e17f:	90                   	nop

c000e180 <findDataTable(unsigned char*, char*)>:
c000e180:	83 ec 1c             	sub    esp,0x1c
c000e183:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e188:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e18e:	83 e0 04             	and    eax,0x4
c000e191:	84 c0                	test   al,al
c000e193:	75 07                	jne    c000e19c <findDataTable(unsigned char*, char*)+0x1c>
c000e195:	b8 00 00 00 00       	mov    eax,0x0
c000e19a:	eb 58                	jmp    c000e1f4 <findDataTable(unsigned char*, char*)+0x74>
c000e19c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a4:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e1a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e1ad:	7d 3d                	jge    c000e1ec <findDataTable(unsigned char*, char*)+0x6c>
c000e1af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1b3:	c1 e0 03             	shl    eax,0x3
c000e1b6:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e1bb:	83 ec 04             	sub    esp,0x4
c000e1be:	6a 04                	push   0x4
c000e1c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1c4:	50                   	push   eax
c000e1c5:	e8 c6 21 ff ff       	call   c0000390 <memcmp>
c000e1ca:	83 c4 10             	add    esp,0x10
c000e1cd:	85 c0                	test   eax,eax
c000e1cf:	0f 94 c0             	sete   al
c000e1d2:	84 c0                	test   al,al
c000e1d4:	74 0e                	je     c000e1e4 <findDataTable(unsigned char*, char*)+0x64>
c000e1d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1da:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e1e1:	eb 11                	jmp    c000e1f4 <findDataTable(unsigned char*, char*)+0x74>
c000e1e3:	90                   	nop
c000e1e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1e8:	eb ba                	jmp    c000e1a4 <findDataTable(unsigned char*, char*)+0x24>
c000e1ea:	66 90                	xchg   ax,ax
c000e1ec:	b8 00 00 00 00       	mov    eax,0x0
c000e1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1f4:	83 c4 1c             	add    esp,0x1c
c000e1f7:	c3                   	ret    

c000e1f8 <scanMADT()>:
c000e1f8:	53                   	push   ebx
c000e1f9:	83 ec 38             	sub    esp,0x38
c000e1fc:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e201:	25 00 04 00 00       	and    eax,0x400
c000e206:	74 14                	je     c000e21c <scanMADT()+0x24>
c000e208:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e20d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e213:	83 e2 fb             	and    edx,0xfffffffb
c000e216:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e21c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e221:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e227:	83 e0 04             	and    eax,0x4
c000e22a:	84 c0                	test   al,al
c000e22c:	0f 84 8a 04 00 00    	je     c000e6bc <scanMADT()+0x4c4>
c000e232:	e8 05 fb ff ff       	call   c000dd3c <findRSDP()>
c000e237:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e23c:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e241:	85 c0                	test   eax,eax
c000e243:	75 1b                	jne    c000e260 <scanMADT()+0x68>
c000e245:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e24a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e250:	83 e2 fb             	and    edx,0xfffffffb
c000e253:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e259:	e9 66 04 00 00       	jmp    c000e6c4 <scanMADT()+0x4cc>
c000e25e:	66 90                	xchg   ax,ax
c000e260:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e265:	83 ec 0c             	sub    esp,0xc
c000e268:	50                   	push   eax
c000e269:	e8 c2 fd ff ff       	call   c000e030 <findRSDT(unsigned char*)>
c000e26e:	83 c4 10             	add    esp,0x10
c000e271:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e276:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e27b:	85 c0                	test   eax,eax
c000e27d:	75 19                	jne    c000e298 <scanMADT()+0xa0>
c000e27f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e284:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e28a:	83 e2 fb             	and    edx,0xfffffffb
c000e28d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e293:	e9 2c 04 00 00       	jmp    c000e6c4 <scanMADT()+0x4cc>
c000e298:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e29d:	83 ec 0c             	sub    esp,0xc
c000e2a0:	50                   	push   eax
c000e2a1:	e8 26 fb ff ff       	call   c000ddcc <loadACPITables(unsigned char*)>
c000e2a6:	83 c4 10             	add    esp,0x10
c000e2a9:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e2ae:	83 ec 08             	sub    esp,0x8
c000e2b1:	68 f8 e3 01 c0       	push   0xc001e3f8
c000e2b6:	50                   	push   eax
c000e2b7:	e8 c4 fe ff ff       	call   c000e180 <findDataTable(unsigned char*, char*)>
c000e2bc:	83 c4 10             	add    esp,0x10
c000e2bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e2c3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e2c8:	75 1a                	jne    c000e2e4 <scanMADT()+0xec>
c000e2ca:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2cf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2d5:	83 e2 fe             	and    edx,0xfffffffe
c000e2d8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2de:	e9 e1 03 00 00       	jmp    c000e6c4 <scanMADT()+0x4cc>
c000e2e3:	90                   	nop
c000e2e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e2ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e2f3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e2f7:	0f 87 c7 03 00 00    	ja     c000e6c4 <scanMADT()+0x4cc>
c000e2fd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e305:	0f 87 b9 03 00 00    	ja     c000e6c4 <scanMADT()+0x4cc>
c000e30b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e30f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e317:	8d 50 01             	lea    edx,[eax+0x1]
c000e31a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e31e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e322:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e326:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e32a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32e:	8d 50 01             	lea    edx,[eax+0x1]
c000e331:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e335:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e339:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e33d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e341:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e346:	0f 86 74 03 00 00    	jbe    c000e6c0 <scanMADT()+0x4c8>
c000e34c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e351:	75 5d                	jne    c000e3b0 <scanMADT()+0x1b8>
c000e353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e357:	8d 50 01             	lea    edx,[eax+0x1]
c000e35a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e35e:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e364:	81 e2 ff 00 00 00    	and    edx,0xff
c000e36a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e36e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e372:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e378:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e37c:	8d 42 01             	lea    eax,[edx+0x1]
c000e37f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e383:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e388:	8d 48 01             	lea    ecx,[eax+0x1]
c000e38b:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e391:	25 ff 00 00 00       	and    eax,0xff
c000e396:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e39a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e39e:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e3a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3a9:	e9 f6 02 00 00       	jmp    c000e6a4 <scanMADT()+0x4ac>
c000e3ae:	66 90                	xchg   ax,ax
c000e3b0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e3b5:	0f 85 29 01 00 00    	jne    c000e4e4 <scanMADT()+0x2ec>
c000e3bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3c6:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e3cc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3da:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e3e0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e3e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ec:	01 d0                	add    eax,edx
c000e3ee:	83 c0 2c             	add    eax,0x2c
c000e3f1:	8a 00                	mov    al,BYTE PTR [eax]
c000e3f3:	31 d2                	xor    edx,edx
c000e3f5:	88 c2                	mov    dl,al
c000e3f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e402:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e406:	25 ff 00 00 00       	and    eax,0xff
c000e40b:	c1 e0 08             	shl    eax,0x8
c000e40e:	89 d1                	mov    ecx,edx
c000e410:	09 c1                	or     ecx,eax
c000e412:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e416:	8d 50 02             	lea    edx,[eax+0x2]
c000e419:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e41d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e421:	25 ff 00 00 00       	and    eax,0xff
c000e426:	c1 e0 10             	shl    eax,0x10
c000e429:	09 c1                	or     ecx,eax
c000e42b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42f:	8d 50 03             	lea    edx,[eax+0x3]
c000e432:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e436:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e43a:	25 ff 00 00 00       	and    eax,0xff
c000e43f:	c1 e0 18             	shl    eax,0x18
c000e442:	09 c1                	or     ecx,eax
c000e444:	89 ca                	mov    edx,ecx
c000e446:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e44b:	25 ff 00 00 00       	and    eax,0xff
c000e450:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e457:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e45c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e464:	01 d0                	add    eax,edx
c000e466:	83 c0 2c             	add    eax,0x2c
c000e469:	8a 00                	mov    al,BYTE PTR [eax]
c000e46b:	31 d2                	xor    edx,edx
c000e46d:	88 c2                	mov    dl,al
c000e46f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e473:	8d 48 01             	lea    ecx,[eax+0x1]
c000e476:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e47a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e47e:	25 ff 00 00 00       	and    eax,0xff
c000e483:	c1 e0 08             	shl    eax,0x8
c000e486:	89 d1                	mov    ecx,edx
c000e488:	09 c1                	or     ecx,eax
c000e48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48e:	8d 50 02             	lea    edx,[eax+0x2]
c000e491:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e495:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e499:	25 ff 00 00 00       	and    eax,0xff
c000e49e:	c1 e0 10             	shl    eax,0x10
c000e4a1:	09 c1                	or     ecx,eax
c000e4a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a7:	8d 50 03             	lea    edx,[eax+0x3]
c000e4aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4b2:	25 ff 00 00 00       	and    eax,0xff
c000e4b7:	c1 e0 18             	shl    eax,0x18
c000e4ba:	09 c1                	or     ecx,eax
c000e4bc:	89 ca                	mov    edx,ecx
c000e4be:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4c3:	25 ff 00 00 00       	and    eax,0xff
c000e4c8:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e4cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4d4:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4d9:	40                   	inc    eax
c000e4da:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e4df:	e9 c0 01 00 00       	jmp    c000e6a4 <scanMADT()+0x4ac>
c000e4e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e4e9:	0f 85 fd 00 00 00    	jne    c000e5ec <scanMADT()+0x3f4>
c000e4ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e502:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50a:	8d 50 01             	lea    edx,[eax+0x1]
c000e50d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e515:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e519:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e51d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e521:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e525:	01 d0                	add    eax,edx
c000e527:	83 c0 2c             	add    eax,0x2c
c000e52a:	8a 00                	mov    al,BYTE PTR [eax]
c000e52c:	31 d2                	xor    edx,edx
c000e52e:	88 c2                	mov    dl,al
c000e530:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e534:	8d 48 01             	lea    ecx,[eax+0x1]
c000e537:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e53b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e53f:	25 ff 00 00 00       	and    eax,0xff
c000e544:	c1 e0 08             	shl    eax,0x8
c000e547:	89 d1                	mov    ecx,edx
c000e549:	09 c1                	or     ecx,eax
c000e54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54f:	8d 50 02             	lea    edx,[eax+0x2]
c000e552:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e556:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e55a:	25 ff 00 00 00       	and    eax,0xff
c000e55f:	c1 e0 10             	shl    eax,0x10
c000e562:	09 c1                	or     ecx,eax
c000e564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e568:	8d 50 03             	lea    edx,[eax+0x3]
c000e56b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e56f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e573:	25 ff 00 00 00       	and    eax,0xff
c000e578:	c1 e0 18             	shl    eax,0x18
c000e57b:	09 c8                	or     eax,ecx
c000e57d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e581:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e586:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e58a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58e:	01 d0                	add    eax,edx
c000e590:	83 c0 2c             	add    eax,0x2c
c000e593:	8a 00                	mov    al,BYTE PTR [eax]
c000e595:	25 ff 00 00 00       	and    eax,0xff
c000e59a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e59e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e5a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e5a9:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5af:	c1 e2 08             	shl    edx,0x8
c000e5b2:	09 d0                	or     eax,edx
c000e5b4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e5b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5be:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5c2:	25 ff 00 00 00       	and    eax,0xff
c000e5c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e5cb:	88 90 80 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0780],dl
c000e5d1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e5d5:	31 d2                	xor    edx,edx
c000e5d7:	88 c2                	mov    dl,al
c000e5d9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e5de:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e5e6:	e9 b9 00 00 00       	jmp    c000e6a4 <scanMADT()+0x4ac>
c000e5eb:	90                   	nop
c000e5ec:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e5f1:	0f 85 a1 00 00 00    	jne    c000e698 <scanMADT()+0x4a0>
c000e5f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e602:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e606:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e60a:	25 ff 00 00 00       	and    eax,0xff
c000e60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e613:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e617:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e61b:	01 d0                	add    eax,edx
c000e61d:	83 c0 2c             	add    eax,0x2c
c000e620:	8a 00                	mov    al,BYTE PTR [eax]
c000e622:	31 d2                	xor    edx,edx
c000e624:	88 c2                	mov    dl,al
c000e626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e62a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e62d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e631:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e635:	25 ff 00 00 00       	and    eax,0xff
c000e63a:	c1 e0 08             	shl    eax,0x8
c000e63d:	09 d0                	or     eax,edx
c000e63f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e643:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e648:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e64c:	8d 50 01             	lea    edx,[eax+0x1]
c000e64f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e653:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e657:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e65b:	25 ff 00 00 00       	and    eax,0xff
c000e660:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e668:	c1 e0 08             	shl    eax,0x8
c000e66b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e66f:	89 c1                	mov    ecx,eax
c000e671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e675:	c1 e0 18             	shl    eax,0x18
c000e678:	89 c3                	mov    ebx,eax
c000e67a:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e67f:	8d 50 01             	lea    edx,[eax+0x1]
c000e682:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e688:	09 d9                	or     ecx,ebx
c000e68a:	89 ca                	mov    edx,ecx
c000e68c:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e693:	eb 0f                	jmp    c000e6a4 <scanMADT()+0x4ac>
c000e695:	8d 76 00             	lea    esi,[esi+0x0]
c000e698:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e69d:	75 05                	jne    c000e6a4 <scanMADT()+0x4ac>
c000e69f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e6a4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e6a8:	31 d2                	xor    edx,edx
c000e6aa:	88 c2                	mov    dl,al
c000e6ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6b0:	01 d0                	add    eax,edx
c000e6b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e6b6:	e9 31 fc ff ff       	jmp    c000e2ec <scanMADT()+0xf4>
c000e6bb:	90                   	nop
c000e6bc:	90                   	nop
c000e6bd:	eb 05                	jmp    c000e6c4 <scanMADT()+0x4cc>
c000e6bf:	90                   	nop
c000e6c0:	90                   	nop
c000e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c4:	83 c4 38             	add    esp,0x38
c000e6c7:	5b                   	pop    ebx
c000e6c8:	c3                   	ret    
c000e6c9:	90                   	nop
c000e6ca:	66 90                	xchg   ax,ax

c000e6cc <ACPI::ACPI()>:
c000e6cc:	83 ec 0c             	sub    esp,0xc
c000e6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d3:	83 ec 08             	sub    esp,0x8
c000e6d6:	68 fd e3 01 c0       	push   0xc001e3fd
c000e6db:	50                   	push   eax
c000e6dc:	e8 7b d4 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000e6e1:	83 c4 10             	add    esp,0x10
c000e6e4:	ba 34 e5 01 c0       	mov    edx,0xc001e534
c000e6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ed:	89 10                	mov    DWORD PTR [eax],edx
c000e6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e716:	e8 dd fa ff ff       	call   c000e1f8 <scanMADT()>
c000e71b:	90                   	nop
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	c3                   	ret    

c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e720:	83 ec 2c             	sub    esp,0x2c
c000e723:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e727:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e72b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e72f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e733:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e738:	88 d0                	mov    al,dl
c000e73a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e73e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e743:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e74b:	90                   	nop
c000e74c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e750:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e756:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e75a:	0f 8d 9c 00 00 00    	jge    c000e7fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e760:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e764:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e768:	83 c2 2a             	add    edx,0x2a
c000e76b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e76f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e774:	75 7a                	jne    c000e7f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e776:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e77a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e77e:	83 c2 2a             	add    edx,0x2a
c000e781:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e785:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e789:	75 65                	jne    c000e7f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e78b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e790:	74 3a                	je     c000e7cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e792:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e796:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e79a:	83 c2 2a             	add    edx,0x2a
c000e79d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e7a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7a8:	39 c2                	cmp    edx,eax
c000e7aa:	74 10                	je     c000e7bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	68 78 e3 01 c0       	push   0xc001e378
c000e7b4:	e8 4e 1a 00 00       	call   c0010207 <KePanic(char const*)>
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	68 02 e4 01 c0       	push   0xc001e402
c000e7c4:	e8 3e 1a 00 00       	call   c0010207 <KePanic(char const*)>
c000e7c9:	83 c4 10             	add    esp,0x10
c000e7cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e7d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7d8:	83 c2 2a             	add    edx,0x2a
c000e7db:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e7df:	8b 02                	mov    eax,DWORD PTR [edx]
c000e7e1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e7e4:	89 01                	mov    DWORD PTR [ecx],eax
c000e7e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e7e9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7ee:	66 90                	xchg   ax,ax
c000e7f0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7f4:	e9 53 ff ff ff       	jmp    c000e74c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e7fc:	90                   	nop
c000e7fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e801:	83 c4 2c             	add    esp,0x2c
c000e804:	c2 04 00             	ret    0x4
c000e807:	90                   	nop

c000e808 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e808:	83 ec 1c             	sub    esp,0x1c
c000e80b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e80f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e813:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e817:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e81c:	88 c8                	mov    al,cl
c000e81e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e822:	88 d0                	mov    al,dl
c000e824:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e82c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e836:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e839:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e83d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e845:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e84b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e84f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e852:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e856:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e865:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e869:	8d 48 01             	lea    ecx,[eax+0x1]
c000e86c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e870:	83 c2 2a             	add    edx,0x2a
c000e873:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e885:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e888:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e88c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e894:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e89a:	8d 50 01             	lea    edx,[eax+0x1]
c000e89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8b1:	3d 00 02 00 00       	cmp    eax,0x200
c000e8b6:	75 10                	jne    c000e8c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e8b8:	83 ec 0c             	sub    esp,0xc
c000e8bb:	68 11 e4 01 c0       	push   0xc001e411
c000e8c0:	e8 42 19 00 00       	call   c0010207 <KePanic(char const*)>
c000e8c5:	83 c4 10             	add    esp,0x10
c000e8c8:	90                   	nop
c000e8c9:	83 c4 1c             	add    esp,0x1c
c000e8cc:	c3                   	ret    
c000e8cd:	90                   	nop
c000e8ce:	66 90                	xchg   ax,ax

c000e8d0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e8d0:	b8 00 00 00 00       	mov    eax,0x0
c000e8d5:	c3                   	ret    
c000e8d6:	66 90                	xchg   ax,ax

c000e8d8 <ACPI::detectPCI()>:
c000e8d8:	53                   	push   ebx
c000e8d9:	83 ec 28             	sub    esp,0x28
c000e8dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8e1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e8e6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e8eb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8f1:	83 e0 04             	and    eax,0x4
c000e8f4:	84 c0                	test   al,al
c000e8f6:	74 2c                	je     c000e924 <ACPI::detectPCI()+0x4c>
c000e8f8:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8fd:	83 ec 08             	sub    esp,0x8
c000e900:	68 2e e4 01 c0       	push   0xc001e42e
c000e905:	50                   	push   eax
c000e906:	e8 75 f8 ff ff       	call   c000e180 <findDataTable(unsigned char*, char*)>
c000e90b:	83 c4 10             	add    esp,0x10
c000e90e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e912:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e917:	74 0b                	je     c000e924 <ACPI::detectPCI()+0x4c>
c000e919:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e91e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e923:	90                   	nop
c000e924:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e92c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e930:	8a 00                	mov    al,BYTE PTR [eax]
c000e932:	3c 01                	cmp    al,0x1
c000e934:	75 0e                	jne    c000e944 <ACPI::detectPCI()+0x6c>
c000e936:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e93b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e940:	eb 2a                	jmp    c000e96c <ACPI::detectPCI()+0x94>
c000e942:	66 90                	xchg   ax,ax
c000e944:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e948:	8a 00                	mov    al,BYTE PTR [eax]
c000e94a:	3c 02                	cmp    al,0x2
c000e94c:	75 1e                	jne    c000e96c <ACPI::detectPCI()+0x94>
c000e94e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e953:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e958:	74 12                	je     c000e96c <ACPI::detectPCI()+0x94>
c000e95a:	83 ec 0c             	sub    esp,0xc
c000e95d:	68 a8 e3 01 c0       	push   0xc001e3a8
c000e962:	e8 a0 18 00 00       	call   c0010207 <KePanic(char const*)>
c000e967:	83 c4 10             	add    esp,0x10
c000e96a:	66 90                	xchg   ax,ax
c000e96c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e970:	83 f0 01             	xor    eax,0x1
c000e973:	84 c0                	test   al,al
c000e975:	74 41                	je     c000e9b8 <ACPI::detectPCI()+0xe0>
c000e977:	e8 b4 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e97c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e980:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e985:	75 0d                	jne    c000e994 <ACPI::detectPCI()+0xbc>
c000e987:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e98c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e991:	eb 25                	jmp    c000e9b8 <ACPI::detectPCI()+0xe0>
c000e993:	90                   	nop
c000e994:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e999:	75 1d                	jne    c000e9b8 <ACPI::detectPCI()+0xe0>
c000e99b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9a0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9a5:	74 11                	je     c000e9b8 <ACPI::detectPCI()+0xe0>
c000e9a7:	83 ec 0c             	sub    esp,0xc
c000e9aa:	68 a8 e3 01 c0       	push   0xc001e3a8
c000e9af:	e8 53 18 00 00       	call   c0010207 <KePanic(char const*)>
c000e9b4:	83 c4 10             	add    esp,0x10
c000e9b7:	90                   	nop
c000e9b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e9bd:	0f 84 85 00 00 00    	je     c000ea48 <ACPI::detectPCI()+0x170>
c000e9c3:	83 ec 0c             	sub    esp,0xc
c000e9c6:	68 33 e4 01 c0       	push   0xc001e433
c000e9cb:	e8 bf 11 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000e9d0:	83 c4 10             	add    esp,0x10
c000e9d3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e9db:	83 ec 0c             	sub    esp,0xc
c000e9de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9e2:	e8 d2 8d ff ff       	call   c00077b9 <malloc>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	89 c3                	mov    ebx,eax
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	53                   	push   ebx
c000e9f0:	e8 ad 9a 00 00       	call   c00184a2 <PCI::PCI()>
c000e9f5:	83 c4 10             	add    esp,0x10
c000e9f8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea00:	83 ec 08             	sub    esp,0x8
c000ea03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea07:	50                   	push   eax
c000ea08:	e8 b7 cf ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea16:	83 c0 08             	add    eax,0x8
c000ea19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea20:	74 0a                	je     c000ea2c <ACPI::detectPCI()+0x154>
c000ea22:	ba 01 00 00 00       	mov    edx,0x1
c000ea27:	eb 0b                	jmp    c000ea34 <ACPI::detectPCI()+0x15c>
c000ea29:	8d 76 00             	lea    esi,[esi+0x0]
c000ea2c:	ba 02 00 00 00       	mov    edx,0x2
c000ea31:	8d 76 00             	lea    esi,[esi+0x0]
c000ea34:	6a 00                	push   0x0
c000ea36:	6a 00                	push   0x0
c000ea38:	52                   	push   edx
c000ea39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea3d:	ff d0                	call   eax
c000ea3f:	83 c4 10             	add    esp,0x10
c000ea42:	e9 91 00 00 00       	jmp    c000ead8 <ACPI::detectPCI()+0x200>
c000ea47:	90                   	nop
c000ea48:	83 ec 0c             	sub    esp,0xc
c000ea4b:	68 4b e4 01 c0       	push   0xc001e44b
c000ea50:	e8 3a 11 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000ea55:	83 c4 10             	add    esp,0x10
c000ea58:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea5f:	83 ec 0c             	sub    esp,0xc
c000ea62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea66:	e8 4e 8d ff ff       	call   c00077b9 <malloc>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	89 c3                	mov    ebx,eax
c000ea70:	83 ec 0c             	sub    esp,0xc
c000ea73:	53                   	push   ebx
c000ea74:	e8 55 a5 00 00       	call   c0018fce <IDE::IDE()>
c000ea79:	83 c4 10             	add    esp,0x10
c000ea7c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea84:	83 ec 08             	sub    esp,0x8
c000ea87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea8b:	50                   	push   eax
c000ea8c:	e8 33 cf ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c000ea91:	83 c4 10             	add    esp,0x10
c000ea94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea98:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eaa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaa6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eaaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eab3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eabc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c000eac2:	83 c0 08             	add    eax,0x8
c000eac5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eac7:	6a 00                	push   0x0
c000eac9:	6a 00                	push   0x0
c000eacb:	6a 00                	push   0x0
c000eacd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ead1:	ff d0                	call   eax
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	66 90                	xchg   ax,ax
c000ead8:	90                   	nop
c000ead9:	83 c4 28             	add    esp,0x28
c000eadc:	5b                   	pop    ebx
c000eadd:	c3                   	ret    
c000eade:	66 90                	xchg   ax,ax

c000eae0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eae0:	83 ec 1c             	sub    esp,0x1c
c000eae3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eae7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eaea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaee:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eaf4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaf8:	25 ff 00 00 00       	and    eax,0xff
c000eafd:	83 ec 08             	sub    esp,0x8
c000eb00:	50                   	push   eax
c000eb01:	52                   	push   edx
c000eb02:	e8 9f 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb07:	83 c4 10             	add    esp,0x10
c000eb0a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb0e:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb18:	25 ff 00 00 00       	and    eax,0xff
c000eb1d:	83 ec 04             	sub    esp,0x4
c000eb20:	6a 01                	push   0x1
c000eb22:	50                   	push   eax
c000eb23:	52                   	push   edx
c000eb24:	e8 93 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eb29:	83 c4 10             	add    esp,0x10
c000eb2c:	90                   	nop
c000eb2d:	83 c4 1c             	add    esp,0x1c
c000eb30:	c3                   	ret    
c000eb31:	90                   	nop
c000eb32:	66 90                	xchg   ax,ax

c000eb34 <ACPI::sleep()>:
c000eb34:	83 ec 0c             	sub    esp,0xc
c000eb37:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb3c:	85 c0                	test   eax,eax
c000eb3e:	74 08                	je     c000eb48 <ACPI::sleep()+0x14>
c000eb40:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb45:	ff d0                	call   eax
c000eb47:	90                   	nop
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	90                   	nop
c000eb4e:	66 90                	xchg   ax,ax

c000eb50 <ACPI::open(int, int, void*)>:
c000eb50:	57                   	push   edi
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb59:	83 ec 0c             	sub    esp,0xc
c000eb5c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb63:	e8 70 fd ff ff       	call   c000e8d8 <ACPI::detectPCI()>
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	83 ec 0c             	sub    esp,0xc
c000eb6e:	68 d0 e3 01 c0       	push   0xc001e3d0
c000eb73:	e8 17 10 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	83 ec 0c             	sub    esp,0xc
c000eb7e:	68 60 e4 01 c0       	push   0xc001e460
c000eb83:	e8 d2 37 00 00       	call   c001235a <Thr::loadKernelSymbolTable(char const*)>
c000eb88:	83 c4 10             	add    esp,0x10
c000eb8b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb93:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eba8:	e8 0c 8c ff ff       	call   c00077b9 <malloc>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	89 c3                	mov    ebx,eax
c000ebb2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ebb7:	83 ec 04             	sub    esp,0x4
c000ebba:	50                   	push   eax
c000ebbb:	68 7e e4 01 c0       	push   0xc001e47e
c000ebc0:	53                   	push   ebx
c000ebc1:	e8 36 bf ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000ebc6:	83 c4 10             	add    esp,0x10
c000ebc9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ebd0:	83 ec 08             	sub    esp,0x8
c000ebd3:	6a 01                	push   0x1
c000ebd5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebdc:	e8 db bf ff ff       	call   c000abbc <File::open(FileOpenMode)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ebeb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ebf3:	75 17                	jne    c000ec0c <ACPI::open(int, int, void*)+0xbc>
c000ebf5:	83 ec 0c             	sub    esp,0xc
c000ebf8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebff:	e8 16 c0 ff ff       	call   c000ac1a <File::close()>
c000ec04:	83 c4 10             	add    esp,0x10
c000ec07:	eb 0b                	jmp    c000ec14 <ACPI::open(int, int, void*)+0xc4>
c000ec09:	8d 76 00             	lea    esi,[esi+0x0]
c000ec0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec1c:	74 1e                	je     c000ec3c <ACPI::open(int, int, void*)+0xec>
c000ec1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ec25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec27:	83 c0 08             	add    eax,0x8
c000ec2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec2c:	83 ec 0c             	sub    esp,0xc
c000ec2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec36:	ff d0                	call   eax
c000ec38:	83 c4 10             	add    esp,0x10
c000ec3b:	90                   	nop
c000ec3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ec43:	83 f0 01             	xor    eax,0x1
c000ec46:	84 c0                	test   al,al
c000ec48:	74 42                	je     c000ec8c <ACPI::open(int, int, void*)+0x13c>
c000ec4a:	83 ec 0c             	sub    esp,0xc
c000ec4d:	68 9c e4 01 c0       	push   0xc001e49c
c000ec52:	e8 38 0f 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	83 ec 04             	sub    esp,0x4
c000ec5d:	6a 0c                	push   0xc
c000ec5f:	68 b7 e4 01 c0       	push   0xc001e4b7
c000ec64:	68 c8 e4 01 c0       	push   0xc001e4c8
c000ec69:	e8 dc 2c 00 00       	call   c001194a <Reg::readIntWithDefault(char*, char*, int)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec78:	83 ec 0c             	sub    esp,0xc
c000ec7b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec82:	e8 08 a8 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ec87:	83 c4 10             	add    esp,0x10
c000ec8a:	66 90                	xchg   ax,ax
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	68 f7 d4 01 c0       	push   0xc001d4f7
c000ec94:	e8 f6 0e 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eca3:	83 ec 08             	sub    esp,0x8
c000eca6:	6a 12                	push   0x12
c000eca8:	50                   	push   eax
c000eca9:	e8 2e d0 ff ff       	call   c000bcdc <getDevicesOfType(DeviceType)>
c000ecae:	83 c4 0c             	add    esp,0xc
c000ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecbe:	50                   	push   eax
c000ecbf:	e8 78 dc 00 00       	call   c001c93c <LinkedList<Device>::isEmpty()>
c000ecc4:	83 c4 10             	add    esp,0x10
c000ecc7:	83 f0 01             	xor    eax,0x1
c000ecca:	84 c0                	test   al,al
c000eccc:	0f 84 46 01 00 00    	je     c000ee18 <ACPI::open(int, int, void*)+0x2c8>
c000ecd2:	83 ec 0c             	sub    esp,0xc
c000ecd5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecdc:	50                   	push   eax
c000ecdd:	e8 76 dc 00 00       	call   c001c958 <LinkedList<Device>::getFirstElement()>
c000ece2:	83 c4 10             	add    esp,0x10
c000ece5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ecec:	83 ec 0c             	sub    esp,0xc
c000ecef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecf6:	50                   	push   eax
c000ecf7:	e8 64 dc 00 00       	call   c001c960 <LinkedList<Device>::removeFirst()>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed06:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed0d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed18:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed1e:	ba 09 00 00 00       	mov    edx,0x9
c000ed23:	fc                   	cld    
c000ed24:	89 c7                	mov    edi,eax
c000ed26:	89 de                	mov    esi,ebx
c000ed28:	89 d1                	mov    ecx,edx
c000ed2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed2c:	83 ec 08             	sub    esp,0x8
c000ed2f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ed33:	50                   	push   eax
c000ed34:	83 ec 24             	sub    esp,0x24
c000ed37:	89 e0                	mov    eax,esp
c000ed39:	89 c3                	mov    ebx,eax
c000ed3b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ed3f:	ba 09 00 00 00       	mov    edx,0x9
c000ed44:	89 df                	mov    edi,ebx
c000ed46:	89 c6                	mov    esi,eax
c000ed48:	89 d1                	mov    ecx,edx
c000ed4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed4c:	e8 33 9c 00 00       	call   c0018984 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ed51:	83 c4 30             	add    esp,0x30
c000ed54:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed5b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed63:	0f 84 4b ff ff ff    	je     c000ecb4 <ACPI::open(int, int, void*)+0x164>
c000ed69:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed7e:	e8 36 8a ff ff       	call   c00077b9 <malloc>
c000ed83:	83 c4 10             	add    esp,0x10
c000ed86:	89 c3                	mov    ebx,eax
c000ed88:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed8d:	83 ec 04             	sub    esp,0x4
c000ed90:	50                   	push   eax
c000ed91:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed98:	53                   	push   ebx
c000ed99:	e8 5e bd ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eda8:	83 ec 0c             	sub    esp,0xc
c000edab:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edb2:	e8 73 c0 ff ff       	call   c000ae2a <File::exists()>
c000edb7:	83 c4 10             	add    esp,0x10
c000edba:	84 c0                	test   al,al
c000edbc:	74 2a                	je     c000ede8 <ACPI::open(int, int, void*)+0x298>
c000edbe:	83 ec 08             	sub    esp,0x8
c000edc1:	6a 01                	push   0x1
c000edc3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000edca:	e8 02 40 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000edcf:	83 c4 10             	add    esp,0x10
c000edd2:	83 ec 08             	sub    esp,0x8
c000edd5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eddc:	50                   	push   eax
c000eddd:	e8 20 42 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000ede2:	83 c4 10             	add    esp,0x10
c000ede5:	8d 76 00             	lea    esi,[esi+0x0]
c000ede8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000edf0:	0f 84 be fe ff ff    	je     c000ecb4 <ACPI::open(int, int, void*)+0x164>
c000edf6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000edfd:	8b 00                	mov    eax,DWORD PTR [eax]
c000edff:	83 c0 08             	add    eax,0x8
c000ee02:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee04:	83 ec 0c             	sub    esp,0xc
c000ee07:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee0e:	ff d0                	call   eax
c000ee10:	83 c4 10             	add    esp,0x10
c000ee13:	e9 9c fe ff ff       	jmp    c000ecb4 <ACPI::open(int, int, void*)+0x164>
c000ee18:	83 ec 0c             	sub    esp,0xc
c000ee1b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee22:	50                   	push   eax
c000ee23:	e8 10 db 00 00       	call   c001c938 <LinkedList<Device>::~LinkedList()>
c000ee28:	83 c4 10             	add    esp,0x10
c000ee2b:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000ee31:	83 ec 08             	sub    esp,0x8
c000ee34:	6a 01                	push   0x1
c000ee36:	68 cf e4 01 c0       	push   0xc001e4cf
c000ee3b:	e8 91 3f 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000ee40:	83 c4 10             	add    esp,0x10
c000ee43:	83 ec 08             	sub    esp,0x8
c000ee46:	53                   	push   ebx
c000ee47:	50                   	push   eax
c000ee48:	e8 b5 41 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ee55:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee5b:	83 e0 04             	and    eax,0x4
c000ee5e:	84 c0                	test   al,al
c000ee60:	0f 84 16 01 00 00    	je     c000ef7c <ACPI::open(int, int, void*)+0x42c>
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	68 ec e4 01 c0       	push   0xc001e4ec
c000ee6e:	e8 1c 0d 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee81:	83 ec 0c             	sub    esp,0xc
c000ee84:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee8b:	e8 29 89 ff ff       	call   c00077b9 <malloc>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	89 c3                	mov    ebx,eax
c000ee95:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee9a:	83 ec 04             	sub    esp,0x4
c000ee9d:	50                   	push   eax
c000ee9e:	68 09 e5 01 c0       	push   0xc001e509
c000eea3:	53                   	push   ebx
c000eea4:	e8 53 bc ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000eea9:	83 c4 10             	add    esp,0x10
c000eeac:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000eeb3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eebb:	74 1b                	je     c000eed8 <ACPI::open(int, int, void*)+0x388>
c000eebd:	83 ec 0c             	sub    esp,0xc
c000eec0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eec7:	e8 5e bf ff ff       	call   c000ae2a <File::exists()>
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	84 c0                	test   al,al
c000eed1:	74 05                	je     c000eed8 <ACPI::open(int, int, void*)+0x388>
c000eed3:	b0 01                	mov    al,0x1
c000eed5:	eb 05                	jmp    c000eedc <ACPI::open(int, int, void*)+0x38c>
c000eed7:	90                   	nop
c000eed8:	b0 00                	mov    al,0x0
c000eeda:	66 90                	xchg   ax,ax
c000eedc:	84 c0                	test   al,al
c000eede:	74 28                	je     c000ef08 <ACPI::open(int, int, void*)+0x3b8>
c000eee0:	83 ec 08             	sub    esp,0x8
c000eee3:	6a 01                	push   0x1
c000eee5:	68 09 e5 01 c0       	push   0xc001e509
c000eeea:	e8 e2 3e 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c000eeef:	83 c4 10             	add    esp,0x10
c000eef2:	83 ec 08             	sub    esp,0x8
c000eef5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eefc:	50                   	push   eax
c000eefd:	e8 00 41 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c000ef02:	83 c4 10             	add    esp,0x10
c000ef05:	8d 76 00             	lea    esi,[esi+0x0]
c000ef08:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef10:	74 2a                	je     c000ef3c <ACPI::open(int, int, void*)+0x3ec>
c000ef12:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef1a:	74 20                	je     c000ef3c <ACPI::open(int, int, void*)+0x3ec>
c000ef1c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef23:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef25:	83 c0 08             	add    eax,0x8
c000ef28:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef2a:	83 ec 0c             	sub    esp,0xc
c000ef2d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef34:	ff d0                	call   eax
c000ef36:	83 c4 10             	add    esp,0x10
c000ef39:	8d 76 00             	lea    esi,[esi+0x0]
c000ef3c:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000ef41:	83 ec 08             	sub    esp,0x8
c000ef44:	68 26 e5 01 c0       	push   0xc001e526
c000ef49:	50                   	push   eax
c000ef4a:	e8 31 f2 ff ff       	call   c000e180 <findDataTable(unsigned char*, char*)>
c000ef4f:	83 c4 10             	add    esp,0x10
c000ef52:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef59:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef61:	74 19                	je     c000ef7c <ACPI::open(int, int, void*)+0x42c>
c000ef63:	83 ec 08             	sub    esp,0x8
c000ef66:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef6d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef74:	e8 67 fb ff ff       	call   c000eae0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef79:	83 c4 10             	add    esp,0x10
c000ef7c:	b8 00 00 00 00       	mov    eax,0x0
c000ef81:	81 c4 70 01 00 00    	add    esp,0x170
c000ef87:	5b                   	pop    ebx
c000ef88:	5e                   	pop    esi
c000ef89:	5f                   	pop    edi
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <CPU::close(int, int, void*)>:
c000ef8c:	31 c0                	xor    eax,eax
c000ef8e:	c3                   	ret    
c000ef8f:	90                   	nop

c000ef90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef90:	60                   	pusha  
c000ef91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef9d:	9c                   	pushf  
c000ef9e:	fa                   	cli    
c000ef9f:	0f 09                	wbinvd 
c000efa1:	0f 30                	wrmsr  
c000efa3:	9d                   	popf   
c000efa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000efa8:	89 02                	mov    DWORD PTR [edx],eax
c000efaa:	61                   	popa   
c000efab:	c3                   	ret    

c000efac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000efac:	60                   	pusha  
c000efad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efb1:	9c                   	pushf  
c000efb2:	fa                   	cli    
c000efb3:	0f 09                	wbinvd 
c000efb5:	31 c0                	xor    eax,eax
c000efb7:	31 d2                	xor    edx,edx
c000efb9:	0f 32                	rdmsr  
c000efbb:	9d                   	popf   
c000efbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efc0:	89 02                	mov    DWORD PTR [edx],eax
c000efc2:	61                   	popa   
c000efc3:	c3                   	ret    

c000efc4 <CPU::AMD_K6_writeback(int, int, int)>:
c000efc4:	56                   	push   esi
c000efc5:	53                   	push   ebx
c000efc6:	83 ec 10             	sub    esp,0x10
c000efc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efcd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000efd2:	75 5d                	jne    c000f031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efd4:	83 f8 08             	cmp    eax,0x8
c000efd7:	75 09                	jne    c000efe2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000efd9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000efde:	7e 13                	jle    c000eff3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efe0:	eb 30                	jmp    c000f012 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efe2:	83 f8 06             	cmp    eax,0x6
c000efe5:	7c 4a                	jl     c000f031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efe7:	83 f8 07             	cmp    eax,0x7
c000efea:	7e 07                	jle    c000eff3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efec:	83 f8 09             	cmp    eax,0x9
c000efef:	74 21                	je     c000f012 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eff1:	eb 3e                	jmp    c000f031 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eff3:	89 e6                	mov    esi,esp
c000eff5:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000effb:	56                   	push   esi
c000effc:	c1 eb 15             	shr    ebx,0x15
c000efff:	68 82 00 00 c0       	push   0xc0000082
c000f004:	83 e3 7e             	and    ebx,0x7e
c000f007:	e8 a0 ff ff ff       	call   c000efac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f00c:	56                   	push   esi
c000f00d:	6a 00                	push   0x0
c000f00f:	53                   	push   ebx
c000f010:	eb 12                	jmp    c000f024 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f012:	89 e3                	mov    ebx,esp
c000f014:	53                   	push   ebx
c000f015:	68 82 00 00 c0       	push   0xc0000082
c000f01a:	e8 8d ff ff ff       	call   c000efac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f01f:	53                   	push   ebx
c000f020:	6a 00                	push   0x0
c000f022:	6a 00                	push   0x0
c000f024:	68 82 00 00 c0       	push   0xc0000082
c000f029:	e8 62 ff ff ff       	call   c000ef90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f02e:	83 c4 18             	add    esp,0x18
c000f031:	83 c4 10             	add    esp,0x10
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f038:	55                   	push   ebp
c000f039:	57                   	push   edi
c000f03a:	56                   	push   esi
c000f03b:	53                   	push   ebx
c000f03c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f040:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f044:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f048:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f04c:	39 05 90 f8 01 c0    	cmp    DWORD PTR ds:0xc001f890,eax
c000f052:	75 23                	jne    c000f077 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f054:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f059:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f05d:	89 06                	mov    DWORD PTR [esi],eax
c000f05f:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f064:	89 07                	mov    DWORD PTR [edi],eax
c000f066:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f06b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f06e:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f073:	89 02                	mov    DWORD PTR [edx],eax
c000f075:	eb 3f                	jmp    c000f0b6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f077:	31 c9                	xor    ecx,ecx
c000f079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f07d:	0f a2                	cpuid  
c000f07f:	89 06                	mov    DWORD PTR [esi],eax
c000f081:	89 1f                	mov    DWORD PTR [edi],ebx
c000f083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f087:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f08a:	89 10                	mov    DWORD PTR [eax],edx
c000f08c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f090:	a3 90 f8 01 c0       	mov    ds:0xc001f890,eax
c000f095:	8b 06                	mov    eax,DWORD PTR [esi]
c000f097:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f09c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f09e:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f0a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a6:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f0ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b1:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f0b6:	5b                   	pop    ebx
c000f0b7:	5e                   	pop    esi
c000f0b8:	5f                   	pop    edi
c000f0b9:	5d                   	pop    ebp
c000f0ba:	c3                   	ret    
c000f0bb:	90                   	nop

c000f0bc <CPU::cpuidCheckEDX(unsigned int)>:
c000f0bc:	83 ec 10             	sub    esp,0x10
c000f0bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c3:	50                   	push   eax
c000f0c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c8:	50                   	push   eax
c000f0c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0cd:	50                   	push   eax
c000f0ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0d2:	50                   	push   eax
c000f0d3:	6a 01                	push   0x1
c000f0d5:	e8 5e ff ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0de:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f0e2:	0f 95 c0             	setne  al
c000f0e5:	83 c4 24             	add    esp,0x24
c000f0e8:	c3                   	ret    
c000f0e9:	90                   	nop

c000f0ea <CPU::cpuidCheckECX(unsigned int)>:
c000f0ea:	83 ec 10             	sub    esp,0x10
c000f0ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f1:	50                   	push   eax
c000f0f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f6:	50                   	push   eax
c000f0f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0fb:	50                   	push   eax
c000f0fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f100:	50                   	push   eax
c000f101:	6a 01                	push   0x1
c000f103:	e8 30 ff ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f10c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f110:	0f 95 c0             	setne  al
c000f113:	83 c4 24             	add    esp,0x24
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f118:	83 ec 10             	sub    esp,0x10
c000f11b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f11f:	50                   	push   eax
c000f120:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f124:	50                   	push   eax
c000f125:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f129:	50                   	push   eax
c000f12a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f12e:	50                   	push   eax
c000f12f:	6a 07                	push   0x7
c000f131:	e8 02 ff ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f136:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f13a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f13e:	0f 95 c0             	setne  al
c000f141:	83 c4 24             	add    esp,0x24
c000f144:	c3                   	ret    
c000f145:	90                   	nop

c000f146 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f146:	83 ec 10             	sub    esp,0x10
c000f149:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f14d:	50                   	push   eax
c000f14e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f152:	50                   	push   eax
c000f153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f157:	50                   	push   eax
c000f158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f15c:	50                   	push   eax
c000f15d:	6a 07                	push   0x7
c000f15f:	e8 d4 fe ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f164:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f168:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f16c:	0f 95 c0             	setne  al
c000f16f:	83 c4 24             	add    esp,0x24
c000f172:	c3                   	ret    
c000f173:	90                   	nop

c000f174 <CPU::CPU()>:
c000f174:	83 ec 0c             	sub    esp,0xc
c000f177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f17b:	83 ec 08             	sub    esp,0x8
c000f17e:	68 49 e6 01 c0       	push   0xc001e649
c000f183:	50                   	push   eax
c000f184:	e8 d3 c9 ff ff       	call   c000bb5c <Device::Device(char const*)>
c000f189:	83 c4 10             	add    esp,0x10
c000f18c:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c000f191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f195:	89 10                	mov    DWORD PTR [eax],edx
c000f197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f19b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1a9:	05 78 01 00 00       	add    eax,0x178
c000f1ae:	83 ec 0c             	sub    esp,0xc
c000f1b1:	50                   	push   eax
c000f1b2:	e8 c3 7e ff ff       	call   c000707a <GDT::GDT()>
c000f1b7:	83 c4 10             	add    esp,0x10
c000f1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1be:	05 7c 09 00 00       	add    eax,0x97c
c000f1c3:	83 ec 0c             	sub    esp,0xc
c000f1c6:	50                   	push   eax
c000f1c7:	e8 e8 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f1cc:	83 c4 10             	add    esp,0x10
c000f1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1d3:	05 7c 11 00 00       	add    eax,0x117c
c000f1d8:	83 ec 0c             	sub    esp,0xc
c000f1db:	50                   	push   eax
c000f1dc:	e8 e7 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f1e1:	83 c4 10             	add    esp,0x10
c000f1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1fd:	90                   	nop
c000f1fe:	83 c4 0c             	add    esp,0xc
c000f201:	c3                   	ret    

c000f202 <CPU::displayFeatures()>:
c000f202:	c3                   	ret    
c000f203:	90                   	nop

c000f204 <CPU::detectFeatures()>:
c000f204:	55                   	push   ebp
c000f205:	57                   	push   edi
c000f206:	56                   	push   esi
c000f207:	53                   	push   ebx
c000f208:	83 ec 30             	sub    esp,0x30
c000f20b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f20f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f219:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f220:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f226:	6a 0d                	push   0xd
c000f228:	6a 00                	push   0x0
c000f22a:	55                   	push   ebp
c000f22b:	e8 a0 12 ff ff       	call   c00004d0 <memset>
c000f230:	83 c4 10             	add    esp,0x10
c000f233:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f238:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f23f:	0f 84 d5 05 00 00    	je     c000f81a <CPU::detectFeatures()+0x616>
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	89 ef                	mov    edi,ebp
c000f24a:	6a 10                	push   0x10
c000f24c:	e8 6b fe ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f251:	83 e0 01             	and    eax,0x1
c000f254:	8d 14 00             	lea    edx,[eax+eax*1]
c000f257:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f25d:	83 e0 fd             	and    eax,0xfffffffd
c000f260:	09 d0                	or     eax,edx
c000f262:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f268:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f26f:	e8 48 fe ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f274:	83 e0 01             	and    eax,0x1
c000f277:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f27e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f284:	83 e0 fb             	and    eax,0xfffffffb
c000f287:	09 d0                	or     eax,edx
c000f289:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f28f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f296:	e8 21 fe ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f29b:	83 e0 01             	and    eax,0x1
c000f29e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f2a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2ab:	83 e0 f7             	and    eax,0xfffffff7
c000f2ae:	09 d0                	or     eax,edx
c000f2b0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2b6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f2bd:	e8 fa fd ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f2c2:	83 e0 01             	and    eax,0x1
c000f2c5:	c1 e0 04             	shl    eax,0x4
c000f2c8:	88 c2                	mov    dl,al
c000f2ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2d0:	83 e0 ef             	and    eax,0xffffffef
c000f2d3:	09 d0                	or     eax,edx
c000f2d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2db:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f2e2:	e8 d5 fd ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f2e7:	83 e0 01             	and    eax,0x1
c000f2ea:	c1 e0 05             	shl    eax,0x5
c000f2ed:	88 c2                	mov    dl,al
c000f2ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2f5:	83 e0 df             	and    eax,0xffffffdf
c000f2f8:	09 d0                	or     eax,edx
c000f2fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f307:	e8 b0 fd ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f30c:	83 e0 01             	and    eax,0x1
c000f30f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f312:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f318:	83 e0 fd             	and    eax,0xfffffffd
c000f31b:	09 d0                	or     eax,edx
c000f31d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f323:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f32a:	e8 8d fd ff ff       	call   c000f0bc <CPU::cpuidCheckEDX(unsigned int)>
c000f32f:	83 e0 01             	and    eax,0x1
c000f332:	c1 e0 06             	shl    eax,0x6
c000f335:	88 c2                	mov    dl,al
c000f337:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f33d:	83 e0 bf             	and    eax,0xffffffbf
c000f340:	09 d0                	or     eax,edx
c000f342:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f348:	58                   	pop    eax
c000f349:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f34d:	50                   	push   eax
c000f34e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f352:	50                   	push   eax
c000f353:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f357:	56                   	push   esi
c000f358:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f35c:	50                   	push   eax
c000f35d:	6a 00                	push   0x0
c000f35f:	e8 d4 fc ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f364:	b8 04 00 00 00       	mov    eax,0x4
c000f369:	89 c1                	mov    ecx,eax
c000f36b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f36d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f373:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f377:	89 c1                	mov    ecx,eax
c000f379:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f37b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f381:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f385:	89 c1                	mov    ecx,eax
c000f387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f389:	83 c4 18             	add    esp,0x18
c000f38c:	68 58 e5 01 c0       	push   0xc001e558
c000f391:	55                   	push   ebp
c000f392:	e8 49 13 ff ff       	call   c00006e0 <strcmp>
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	85 c0                	test   eax,eax
c000f39c:	75 0f                	jne    c000f3ad <CPU::detectFeatures()+0x1a9>
c000f39e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f3a8:	e9 22 02 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f3ad:	50                   	push   eax
c000f3ae:	50                   	push   eax
c000f3af:	68 65 e5 01 c0       	push   0xc001e565
c000f3b4:	55                   	push   ebp
c000f3b5:	e8 26 13 ff ff       	call   c00006e0 <strcmp>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	85 c0                	test   eax,eax
c000f3bf:	74 dd                	je     c000f39e <CPU::detectFeatures()+0x19a>
c000f3c1:	50                   	push   eax
c000f3c2:	50                   	push   eax
c000f3c3:	68 72 e5 01 c0       	push   0xc001e572
c000f3c8:	55                   	push   ebp
c000f3c9:	e8 12 13 ff ff       	call   c00006e0 <strcmp>
c000f3ce:	83 c4 10             	add    esp,0x10
c000f3d1:	85 c0                	test   eax,eax
c000f3d3:	74 2a                	je     c000f3ff <CPU::detectFeatures()+0x1fb>
c000f3d5:	50                   	push   eax
c000f3d6:	50                   	push   eax
c000f3d7:	68 7f e5 01 c0       	push   0xc001e57f
c000f3dc:	55                   	push   ebp
c000f3dd:	e8 fe 12 ff ff       	call   c00006e0 <strcmp>
c000f3e2:	83 c4 10             	add    esp,0x10
c000f3e5:	85 c0                	test   eax,eax
c000f3e7:	74 16                	je     c000f3ff <CPU::detectFeatures()+0x1fb>
c000f3e9:	50                   	push   eax
c000f3ea:	50                   	push   eax
c000f3eb:	68 8c e5 01 c0       	push   0xc001e58c
c000f3f0:	55                   	push   ebp
c000f3f1:	e8 ea 12 ff ff       	call   c00006e0 <strcmp>
c000f3f6:	83 c4 10             	add    esp,0x10
c000f3f9:	85 c0                	test   eax,eax
c000f3fb:	74 48                	je     c000f445 <CPU::detectFeatures()+0x241>
c000f3fd:	eb 0f                	jmp    c000f40e <CPU::detectFeatures()+0x20a>
c000f3ff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f409:	e9 c1 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f40e:	50                   	push   eax
c000f40f:	50                   	push   eax
c000f410:	68 99 e5 01 c0       	push   0xc001e599
c000f415:	55                   	push   ebp
c000f416:	e8 c5 12 ff ff       	call   c00006e0 <strcmp>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	85 c0                	test   eax,eax
c000f420:	74 23                	je     c000f445 <CPU::detectFeatures()+0x241>
c000f422:	57                   	push   edi
c000f423:	57                   	push   edi
c000f424:	68 a6 e5 01 c0       	push   0xc001e5a6
c000f429:	55                   	push   ebp
c000f42a:	e8 b1 12 ff ff       	call   c00006e0 <strcmp>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	85 c0                	test   eax,eax
c000f434:	75 1e                	jne    c000f454 <CPU::detectFeatures()+0x250>
c000f436:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f440:	e9 8a 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f445:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f44f:	e9 7b 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f454:	56                   	push   esi
c000f455:	56                   	push   esi
c000f456:	68 b3 e5 01 c0       	push   0xc001e5b3
c000f45b:	55                   	push   ebp
c000f45c:	e8 7f 12 ff ff       	call   c00006e0 <strcmp>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	85 c0                	test   eax,eax
c000f466:	75 0f                	jne    c000f477 <CPU::detectFeatures()+0x273>
c000f468:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f472:	e9 58 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f477:	51                   	push   ecx
c000f478:	51                   	push   ecx
c000f479:	68 72 e5 01 c0       	push   0xc001e572
c000f47e:	55                   	push   ebp
c000f47f:	e8 5c 12 ff ff       	call   c00006e0 <strcmp>
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	85 c0                	test   eax,eax
c000f489:	75 0f                	jne    c000f49a <CPU::detectFeatures()+0x296>
c000f48b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f495:	e9 35 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f49a:	52                   	push   edx
c000f49b:	52                   	push   edx
c000f49c:	68 c0 e5 01 c0       	push   0xc001e5c0
c000f4a1:	55                   	push   ebp
c000f4a2:	e8 39 12 ff ff       	call   c00006e0 <strcmp>
c000f4a7:	83 c4 10             	add    esp,0x10
c000f4aa:	85 c0                	test   eax,eax
c000f4ac:	75 0f                	jne    c000f4bd <CPU::detectFeatures()+0x2b9>
c000f4ae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f4b8:	e9 12 01 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f4bd:	50                   	push   eax
c000f4be:	50                   	push   eax
c000f4bf:	68 cd e5 01 c0       	push   0xc001e5cd
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	75 0f                	jne    c000f4e0 <CPU::detectFeatures()+0x2dc>
c000f4d1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f4db:	e9 ef 00 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f4e0:	50                   	push   eax
c000f4e1:	50                   	push   eax
c000f4e2:	68 da e5 01 c0       	push   0xc001e5da
c000f4e7:	55                   	push   ebp
c000f4e8:	e8 f3 11 ff ff       	call   c00006e0 <strcmp>
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	85 c0                	test   eax,eax
c000f4f2:	75 0f                	jne    c000f503 <CPU::detectFeatures()+0x2ff>
c000f4f4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4fe:	e9 cc 00 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f503:	50                   	push   eax
c000f504:	50                   	push   eax
c000f505:	68 e7 e5 01 c0       	push   0xc001e5e7
c000f50a:	55                   	push   ebp
c000f50b:	e8 d0 11 ff ff       	call   c00006e0 <strcmp>
c000f510:	83 c4 10             	add    esp,0x10
c000f513:	85 c0                	test   eax,eax
c000f515:	75 0f                	jne    c000f526 <CPU::detectFeatures()+0x322>
c000f517:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f521:	e9 a9 00 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f526:	50                   	push   eax
c000f527:	50                   	push   eax
c000f528:	68 f4 e5 01 c0       	push   0xc001e5f4
c000f52d:	55                   	push   ebp
c000f52e:	e8 ad 11 ff ff       	call   c00006e0 <strcmp>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	85 c0                	test   eax,eax
c000f538:	75 0f                	jne    c000f549 <CPU::detectFeatures()+0x345>
c000f53a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f544:	e9 86 00 00 00       	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f549:	50                   	push   eax
c000f54a:	50                   	push   eax
c000f54b:	68 01 e6 01 c0       	push   0xc001e601
c000f550:	55                   	push   ebp
c000f551:	e8 8a 11 ff ff       	call   c00006e0 <strcmp>
c000f556:	83 c4 10             	add    esp,0x10
c000f559:	85 c0                	test   eax,eax
c000f55b:	75 0c                	jne    c000f569 <CPU::detectFeatures()+0x365>
c000f55d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f567:	eb 66                	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f569:	50                   	push   eax
c000f56a:	50                   	push   eax
c000f56b:	68 0e e6 01 c0       	push   0xc001e60e
c000f570:	55                   	push   ebp
c000f571:	e8 6a 11 ff ff       	call   c00006e0 <strcmp>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	85 c0                	test   eax,eax
c000f57b:	75 0c                	jne    c000f589 <CPU::detectFeatures()+0x385>
c000f57d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f587:	eb 46                	jmp    c000f5cf <CPU::detectFeatures()+0x3cb>
c000f589:	57                   	push   edi
c000f58a:	57                   	push   edi
c000f58b:	68 1b e6 01 c0       	push   0xc001e61b
c000f590:	55                   	push   ebp
c000f591:	e8 4a 11 ff ff       	call   c00006e0 <strcmp>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	85 c0                	test   eax,eax
c000f59b:	74 e0                	je     c000f57d <CPU::detectFeatures()+0x379>
c000f59d:	56                   	push   esi
c000f59e:	56                   	push   esi
c000f59f:	68 28 e6 01 c0       	push   0xc001e628
c000f5a4:	55                   	push   ebp
c000f5a5:	e8 36 11 ff ff       	call   c00006e0 <strcmp>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	85 c0                	test   eax,eax
c000f5af:	74 cc                	je     c000f57d <CPU::detectFeatures()+0x379>
c000f5b1:	51                   	push   ecx
c000f5b2:	51                   	push   ecx
c000f5b3:	68 35 e6 01 c0       	push   0xc001e635
c000f5b8:	55                   	push   ebp
c000f5b9:	e8 22 11 ff ff       	call   c00006e0 <strcmp>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	74 b8                	je     c000f57d <CPU::detectFeatures()+0x379>
c000f5c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f5cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f5d4:	0f 86 be 00 00 00    	jbe    c000f698 <CPU::detectFeatures()+0x494>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	68 80 00 00 00       	push   0x80
c000f5e2:	e8 31 fb ff ff       	call   c000f118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5e7:	83 e0 01             	and    eax,0x1
c000f5ea:	c1 e0 06             	shl    eax,0x6
c000f5ed:	88 c2                	mov    dl,al
c000f5ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5f5:	83 e0 bf             	and    eax,0xffffffbf
c000f5f8:	09 d0                	or     eax,edx
c000f5fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f600:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f607:	e8 0c fb ff ff       	call   c000f118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f60c:	83 e0 01             	and    eax,0x1
c000f60f:	c1 e0 04             	shl    eax,0x4
c000f612:	88 c2                	mov    dl,al
c000f614:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f61a:	83 e0 ef             	and    eax,0xffffffef
c000f61d:	09 d0                	or     eax,edx
c000f61f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f625:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f62c:	e8 e7 fa ff ff       	call   c000f118 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f631:	c1 e0 07             	shl    eax,0x7
c000f634:	88 c2                	mov    dl,al
c000f636:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f63c:	83 e0 7f             	and    eax,0x7f
c000f63f:	09 d0                	or     eax,edx
c000f641:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f647:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f64e:	e8 f3 fa ff ff       	call   c000f146 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f653:	83 e0 01             	and    eax,0x1
c000f656:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f65d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f663:	83 e0 f7             	and    eax,0xfffffff7
c000f666:	09 d0                	or     eax,edx
c000f668:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f66e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f675:	e8 cc fa ff ff       	call   c000f146 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	83 e0 01             	and    eax,0x1
c000f680:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f687:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f68d:	83 e0 fb             	and    eax,0xfffffffb
c000f690:	09 d0                	or     eax,edx
c000f692:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f698:	83 ec 0c             	sub    esp,0xc
c000f69b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f69f:	50                   	push   eax
c000f6a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6a4:	50                   	push   eax
c000f6a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f6a9:	56                   	push   esi
c000f6aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6ae:	50                   	push   eax
c000f6af:	6a 01                	push   0x1
c000f6b1:	e8 82 f9 ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6ba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f6c0:	88 ca                	mov    dl,cl
c000f6c2:	83 e0 f0             	and    eax,0xfffffff0
c000f6c5:	83 e2 0f             	and    edx,0xf
c000f6c8:	09 d0                	or     eax,edx
c000f6ca:	88 ca                	mov    dl,cl
c000f6cc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f6d2:	c0 ea 04             	shr    dl,0x4
c000f6d5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f6d9:	0f b6 c2             	movzx  eax,dl
c000f6dc:	83 c4 20             	add    esp,0x20
c000f6df:	c1 e0 06             	shl    eax,0x6
c000f6e2:	89 c7                	mov    edi,eax
c000f6e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f6ea:	66 25 3f c0          	and    ax,0xc03f
c000f6ee:	09 f8                	or     eax,edi
c000f6f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f6f7:	89 c8                	mov    eax,ecx
c000f6f9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f700:	c1 e8 08             	shr    eax,0x8
c000f703:	83 e5 3f             	and    ebp,0x3f
c000f706:	83 e0 0f             	and    eax,0xf
c000f709:	89 c7                	mov    edi,eax
c000f70b:	c1 e7 06             	shl    edi,0x6
c000f70e:	09 ef                	or     edi,ebp
c000f710:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f717:	89 fa                	mov    edx,edi
c000f719:	83 e5 c0             	and    ebp,0xffffffc0
c000f71c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f722:	88 c2                	mov    dl,al
c000f724:	c0 ea 02             	shr    dl,0x2
c000f727:	89 d7                	mov    edi,edx
c000f729:	09 ef                	or     edi,ebp
c000f72b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f731:	89 fa                	mov    edx,edi
c000f733:	83 e5 cf             	and    ebp,0xffffffcf
c000f736:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f73c:	89 cf                	mov    edi,ecx
c000f73e:	c1 ef 0c             	shr    edi,0xc
c000f741:	83 e7 03             	and    edi,0x3
c000f744:	c1 e7 04             	shl    edi,0x4
c000f747:	09 ef                	or     edi,ebp
c000f749:	3c 06                	cmp    al,0x6
c000f74b:	89 fa                	mov    edx,edi
c000f74d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f753:	74 04                	je     c000f759 <CPU::detectFeatures()+0x555>
c000f755:	3c 0f                	cmp    al,0xf
c000f757:	75 5c                	jne    c000f7b5 <CPU::detectFeatures()+0x5b1>
c000f759:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f75d:	89 cf                	mov    edi,ecx
c000f75f:	c1 ef 10             	shr    edi,0x10
c000f762:	c1 e7 04             	shl    edi,0x4
c000f765:	09 fa                	or     edx,edi
c000f767:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f76d:	0f b6 d2             	movzx  edx,dl
c000f770:	66 81 e7 3f c0       	and    di,0xc03f
c000f775:	c1 e2 06             	shl    edx,0x6
c000f778:	09 fa                	or     edx,edi
c000f77a:	3c 0f                	cmp    al,0xf
c000f77c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f783:	75 30                	jne    c000f7b5 <CPU::detectFeatures()+0x5b1>
c000f785:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f78b:	c1 e9 14             	shr    ecx,0x14
c000f78e:	83 e0 3f             	and    eax,0x3f
c000f791:	83 c1 0f             	add    ecx,0xf
c000f794:	88 ca                	mov    dl,cl
c000f796:	c0 e9 02             	shr    cl,0x2
c000f799:	c1 e2 06             	shl    edx,0x6
c000f79c:	09 d0                	or     eax,edx
c000f79e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f7a4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f7aa:	83 e0 c0             	and    eax,0xffffffc0
c000f7ad:	09 c1                	or     ecx,eax
c000f7af:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f7bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7c3:	50                   	push   eax
c000f7c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f7c8:	55                   	push   ebp
c000f7c9:	56                   	push   esi
c000f7ca:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f7ce:	57                   	push   edi
c000f7cf:	68 00 00 00 80       	push   0x80000000
c000f7d4:	e8 5f f8 ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7d9:	83 c4 20             	add    esp,0x20
c000f7dc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f7e4:	76 22                	jbe    c000f808 <CPU::detectFeatures()+0x604>
c000f7e6:	83 ec 0c             	sub    esp,0xc
c000f7e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7ed:	50                   	push   eax
c000f7ee:	55                   	push   ebp
c000f7ef:	56                   	push   esi
c000f7f0:	57                   	push   edi
c000f7f1:	68 01 00 00 80       	push   0x80000001
c000f7f6:	e8 3d f8 ff ff       	call   c000f038 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7fb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f805:	83 c4 20             	add    esp,0x20
c000f808:	52                   	push   edx
c000f809:	52                   	push   edx
c000f80a:	68 41 e6 01 c0       	push   0xc001e641
c000f80f:	53                   	push   ebx
c000f810:	e8 39 c3 ff ff       	call   c000bb4e <Device::setName(char const*)>
c000f815:	83 c4 10             	add    esp,0x10
c000f818:	eb 67                	jmp    c000f881 <CPU::detectFeatures()+0x67d>
c000f81a:	50                   	push   eax
c000f81b:	50                   	push   eax
c000f81c:	68 a6 e5 01 c0       	push   0xc001e5a6
c000f821:	55                   	push   ebp
c000f822:	e8 d9 0d ff ff       	call   c0000600 <strcpy>
c000f827:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f831:	e8 8d 09 ff ff       	call   c00001c3 <is486>
c000f836:	83 c4 10             	add    esp,0x10
c000f839:	85 c0                	test   eax,eax
c000f83b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f841:	74 1d                	je     c000f860 <CPU::detectFeatures()+0x65c>
c000f843:	83 c8 07             	or     eax,0x7
c000f846:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f84c:	0f 20 c0             	mov    eax,cr0
c000f84f:	83 e0 14             	and    eax,0x14
c000f852:	83 f8 04             	cmp    eax,0x4
c000f855:	75 0e                	jne    c000f865 <CPU::detectFeatures()+0x661>
c000f857:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f85e:	eb 21                	jmp    c000f881 <CPU::detectFeatures()+0x67d>
c000f860:	83 e0 f8             	and    eax,0xfffffff8
c000f863:	eb e1                	jmp    c000f846 <CPU::detectFeatures()+0x642>
c000f865:	e8 34 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f86a:	83 e0 01             	and    eax,0x1
c000f86d:	8d 14 00             	lea    edx,[eax+eax*1]
c000f870:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f876:	83 e0 fd             	and    eax,0xfffffffd
c000f879:	09 d0                	or     eax,edx
c000f87b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f881:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f888:	74 0e                	je     c000f898 <CPU::detectFeatures()+0x694>
c000f88a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f88f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f896:	eb 20                	jmp    c000f8b8 <CPU::detectFeatures()+0x6b4>
c000f898:	e8 01 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f89d:	83 e0 01             	and    eax,0x1
c000f8a0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8a3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8a9:	83 e0 fd             	and    eax,0xfffffffd
c000f8ac:	09 d0                	or     eax,edx
c000f8ae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8b4:	a8 02                	test   al,0x2
c000f8b6:	75 d2                	jne    c000f88a <CPU::detectFeatures()+0x686>
c000f8b8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f8bf:	83 c4 2c             	add    esp,0x2c
c000f8c2:	5b                   	pop    ebx
c000f8c3:	5e                   	pop    esi
c000f8c4:	5f                   	pop    edi
c000f8c5:	5d                   	pop    ebp
c000f8c6:	c3                   	ret    
c000f8c7:	90                   	nop

c000f8c8 <CPU::setupSMEP()>:
c000f8c8:	0f 20 e0             	mov    eax,cr4
c000f8cb:	0d 00 00 10 00       	or     eax,0x100000
c000f8d0:	0f 22 e0             	mov    cr4,eax
c000f8d3:	c3                   	ret    

c000f8d4 <CPU::setupUMIP()>:
c000f8d4:	0f 20 e0             	mov    eax,cr4
c000f8d7:	80 cc 08             	or     ah,0x8
c000f8da:	0f 22 e0             	mov    cr4,eax
c000f8dd:	c3                   	ret    

c000f8de <CPU::setupTSC()>:
c000f8de:	0f 20 e0             	mov    eax,cr4
c000f8e1:	83 c8 04             	or     eax,0x4
c000f8e4:	0f 22 e0             	mov    cr4,eax
c000f8e7:	c3                   	ret    

c000f8e8 <CPU::setupLargePages()>:
c000f8e8:	0f 20 e0             	mov    eax,cr4
c000f8eb:	83 c8 10             	or     eax,0x10
c000f8ee:	0f 22 e0             	mov    cr4,eax
c000f8f1:	c3                   	ret    

c000f8f2 <CPU::setupPAT()>:
c000f8f2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8f7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8fe:	74 2c                	je     c000f92c <CPU::setupPAT()+0x3a>
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	68 77 02 00 00       	push   0x277
c000f909:	50                   	push   eax
c000f90a:	e8 e3 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f90f:	83 e2 f8             	and    edx,0xfffffff8
c000f912:	83 ca 01             	or     edx,0x1
c000f915:	52                   	push   edx
c000f916:	50                   	push   eax
c000f917:	68 77 02 00 00       	push   0x277
c000f91c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f922:	e8 f7 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f927:	83 c4 28             	add    esp,0x28
c000f92a:	5b                   	pop    ebx
c000f92b:	c3                   	ret    
c000f92c:	c3                   	ret    
c000f92d:	90                   	nop

c000f92e <CPU::setupMTRR()>:
c000f92e:	c3                   	ret    
c000f92f:	90                   	nop

c000f930 <CPU::setupGlobalPages()>:
c000f930:	0f 20 e0             	mov    eax,cr4
c000f933:	0c 80                	or     al,0x80
c000f935:	0f 22 e0             	mov    cr4,eax
c000f938:	c3                   	ret    
c000f939:	90                   	nop

c000f93a <CPU::allowUsermodeDataAccess()>:
c000f93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f93e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f945:	74 03                	je     c000f94a <CPU::allowUsermodeDataAccess()+0x10>
c000f947:	0f 01 cb             	stac   
c000f94a:	c3                   	ret    
c000f94b:	90                   	nop

c000f94c <CPU::prohibitUsermodeDataAccess()>:
c000f94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f950:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f957:	74 03                	je     c000f95c <CPU::prohibitUsermodeDataAccess()+0x10>
c000f959:	0f 01 ca             	clac   
c000f95c:	c3                   	ret    
c000f95d:	90                   	nop

c000f95e <CPU::setupSMAP()>:
c000f95e:	0f 20 e0             	mov    eax,cr4
c000f961:	0d 00 00 20 00       	or     eax,0x200000
c000f966:	0f 22 e0             	mov    cr4,eax
c000f969:	eb e1                	jmp    c000f94c <CPU::prohibitUsermodeDataAccess()>
c000f96b:	90                   	nop

c000f96c <CPU::setupFeatures()>:
c000f96c:	53                   	push   ebx
c000f96d:	83 ec 08             	sub    esp,0x8
c000f970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f974:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f97b:	74 18                	je     c000f995 <CPU::setupFeatures()+0x29>
c000f97d:	83 ec 0c             	sub    esp,0xc
c000f980:	68 4d e6 01 c0       	push   0xc001e64d
c000f985:	e8 fd ab ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000f98a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f98d:	e8 42 ff ff ff       	call   c000f8d4 <CPU::setupUMIP()>
c000f992:	83 c4 10             	add    esp,0x10
c000f995:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f99c:	74 18                	je     c000f9b6 <CPU::setupFeatures()+0x4a>
c000f99e:	83 ec 0c             	sub    esp,0xc
c000f9a1:	68 57 e6 01 c0       	push   0xc001e657
c000f9a6:	e8 dc ab ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000f9ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9ae:	e8 2b ff ff ff       	call   c000f8de <CPU::setupTSC()>
c000f9b3:	83 c4 10             	add    esp,0x10
c000f9b6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f9bd:	74 18                	je     c000f9d7 <CPU::setupFeatures()+0x6b>
c000f9bf:	83 ec 0c             	sub    esp,0xc
c000f9c2:	68 60 e6 01 c0       	push   0xc001e660
c000f9c7:	e8 bb ab ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000f9cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9cf:	e8 14 ff ff ff       	call   c000f8e8 <CPU::setupLargePages()>
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f9de:	74 18                	je     c000f9f8 <CPU::setupFeatures()+0x8c>
c000f9e0:	83 ec 0c             	sub    esp,0xc
c000f9e3:	68 69 e6 01 c0       	push   0xc001e669
c000f9e8:	e8 9a ab ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000f9ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9f0:	e8 3b ff ff ff       	call   c000f930 <CPU::setupGlobalPages()>
c000f9f5:	83 c4 10             	add    esp,0x10
c000f9f8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9ff:	74 18                	je     c000fa19 <CPU::setupFeatures()+0xad>
c000fa01:	83 ec 0c             	sub    esp,0xc
c000fa04:	68 7b e6 01 c0       	push   0xc001e67b
c000fa09:	e8 79 ab ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c000fa0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa11:	e8 dc fe ff ff       	call   c000f8f2 <CPU::setupPAT()>
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa20:	74 11                	je     c000fa33 <CPU::setupFeatures()+0xc7>
c000fa22:	c7 44 24 10 84 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e684
c000fa2a:	83 c4 08             	add    esp,0x8
c000fa2d:	5b                   	pop    ebx
c000fa2e:	e9 54 ab ff ff       	jmp    c000a587 <Dbg::kprintf(char const*, ...)>
c000fa33:	83 c4 08             	add    esp,0x8
c000fa36:	5b                   	pop    ebx
c000fa37:	c3                   	ret    

c000fa38 <CPU::open(int, int, void*)>:
c000fa38:	57                   	push   edi
c000fa39:	56                   	push   esi
c000fa3a:	53                   	push   ebx
c000fa3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa43:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fa49:	83 ec 0c             	sub    esp,0xc
c000fa4c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fa52:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa58:	50                   	push   eax
c000fa59:	e8 7e 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa5e:	83 c4 0c             	add    esp,0xc
c000fa61:	6a 00                	push   0x0
c000fa63:	68 ef be ad de       	push   0xdeadbeef
c000fa68:	57                   	push   edi
c000fa69:	e8 9e 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fa6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa71:	e8 76 91 ff ff       	call   c0008bec <TSS::flush()>
c000fa76:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa7f:	e8 a6 78 ff ff       	call   c000732a <IDT::setup()>
c000fa84:	b8 00 04 00 00       	mov    eax,0x400
c000fa89:	0f 23 f8             	mov    db7,eax
c000fa8c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa96:	e8 fa 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000faa1:	89 30                	mov    DWORD PTR [eax],esi
c000faa3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000faa9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000faac:	58                   	pop    eax
c000faad:	5a                   	pop    edx
c000faae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fab4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fab8:	e8 17 a1 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fabd:	c7 04 24 8e e6 01 c0 	mov    DWORD PTR [esp],0xc001e68e
c000fac4:	e8 c6 00 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000fac9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000facc:	e8 33 f7 ff ff       	call   c000f204 <CPU::detectFeatures()>
c000fad1:	c7 04 24 b1 e6 01 c0 	mov    DWORD PTR [esp],0xc001e6b1
c000fad8:	e8 b2 00 00 00       	call   c000fb8f <KeSetBootMessage(char const*)>
c000fadd:	e8 26 5c 00 00       	call   c0015708 <HalInitialise()>
c000fae2:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fae7:	83 e0 10             	and    eax,0x10
c000faea:	83 f8 01             	cmp    eax,0x1
c000faed:	19 c0                	sbb    eax,eax
c000faef:	83 e0 46             	and    eax,0x46
c000faf2:	83 c0 1e             	add    eax,0x1e
c000faf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000faf8:	e8 60 d7 ff ff       	call   c000d25d <setupTimer(int)>
c000fafd:	83 c4 10             	add    esp,0x10
c000fb00:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb06:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fb0d:	74 0c                	je     c000fb1b <CPU::open(int, int, void*)+0xe3>
c000fb0f:	83 ec 0c             	sub    esp,0xc
c000fb12:	53                   	push   ebx
c000fb13:	e8 54 fe ff ff       	call   c000f96c <CPU::setupFeatures()>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	5b                   	pop    ebx
c000fb1c:	31 c0                	xor    eax,eax
c000fb1e:	5e                   	pop    esi
c000fb1f:	5f                   	pop    edi
c000fb20:	c3                   	ret    

c000fb21 <KeDisplaySplashScreen()>:
c000fb21:	55                   	push   ebp
c000fb22:	bd 05 00 00 00       	mov    ebp,0x5
c000fb27:	57                   	push   edi
c000fb28:	bf a0 f8 01 c0       	mov    edi,0xc001f8a0
c000fb2d:	56                   	push   esi
c000fb2e:	be 0a 00 00 00       	mov    esi,0xa
c000fb33:	53                   	push   ebx
c000fb34:	31 db                	xor    ebx,ebx
c000fb36:	83 ec 0c             	sub    esp,0xc
c000fb39:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fb3c:	84 c0                	test   al,al
c000fb3e:	74 47                	je     c000fb87 <KeDisplaySplashScreen()+0x66>
c000fb40:	80 bb d6 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe072a],0xdb
c000fb47:	75 13                	jne    c000fb5c <KeDisplaySplashScreen()+0x3b>
c000fb49:	0f b6 93 d5 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe072b]
c000fb50:	83 e2 fe             	and    edx,0xfffffffe
c000fb53:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb59:	75 01                	jne    c000fb5c <KeDisplaySplashScreen()+0x3b>
c000fb5b:	46                   	inc    esi
c000fb5c:	3c 0d                	cmp    al,0xd
c000fb5e:	74 24                	je     c000fb84 <KeDisplaySplashScreen()+0x63>
c000fb60:	3c 0a                	cmp    al,0xa
c000fb62:	75 0a                	jne    c000fb6e <KeDisplaySplashScreen()+0x4d>
c000fb64:	45                   	inc    ebp
c000fb65:	be 0a 00 00 00       	mov    esi,0xa
c000fb6a:	31 db                	xor    ebx,ebx
c000fb6c:	eb 16                	jmp    c000fb84 <KeDisplaySplashScreen()+0x63>
c000fb6e:	83 ec 0c             	sub    esp,0xc
c000fb71:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb74:	55                   	push   ebp
c000fb75:	43                   	inc    ebx
c000fb76:	52                   	push   edx
c000fb77:	6a 00                	push   0x0
c000fb79:	6a 0e                	push   0xe
c000fb7b:	50                   	push   eax
c000fb7c:	e8 eb 67 00 00       	call   c001636c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb81:	83 c4 20             	add    esp,0x20
c000fb84:	47                   	inc    edi
c000fb85:	eb b2                	jmp    c000fb39 <KeDisplaySplashScreen()+0x18>
c000fb87:	83 c4 0c             	add    esp,0xc
c000fb8a:	5b                   	pop    ebx
c000fb8b:	5e                   	pop    esi
c000fb8c:	5f                   	pop    edi
c000fb8d:	5d                   	pop    ebp
c000fb8e:	c3                   	ret    

c000fb8f <KeSetBootMessage(char const*)>:
c000fb8f:	57                   	push   edi
c000fb90:	56                   	push   esi
c000fb91:	53                   	push   ebx
c000fb92:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb98:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb9f:	68 9e 00 00 00       	push   0x9e
c000fba4:	6a 00                	push   0x0
c000fba6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fbaa:	56                   	push   esi
c000fbab:	e8 20 09 ff ff       	call   c00004d0 <memset>
c000fbb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb3:	e8 88 09 ff ff       	call   c0000540 <strlen>
c000fbb8:	ba 50 00 00 00       	mov    edx,0x50
c000fbbd:	83 c4 10             	add    esp,0x10
c000fbc0:	29 c2                	sub    edx,eax
c000fbc2:	31 c9                	xor    ecx,ecx
c000fbc4:	83 e2 fe             	and    edx,0xfffffffe
c000fbc7:	01 f2                	add    edx,esi
c000fbc9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fbce:	84 c0                	test   al,al
c000fbd0:	74 0a                	je     c000fbdc <KeSetBootMessage(char const*)+0x4d>
c000fbd2:	80 cc 0f             	or     ah,0xf
c000fbd5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fbd9:	41                   	inc    ecx
c000fbda:	eb ed                	jmp    c000fbc9 <KeSetBootMessage(char const*)+0x3a>
c000fbdc:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fbe1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fbe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fbee:	5b                   	pop    ebx
c000fbef:	5e                   	pop    esi
c000fbf0:	5f                   	pop    edi
c000fbf1:	c3                   	ret    

c000fbf2 <EnvVarContainer::getEnv(char const*)>:
c000fbf2:	57                   	push   edi
c000fbf3:	56                   	push   esi
c000fbf4:	53                   	push   ebx
c000fbf5:	31 db                	xor    ebx,ebx
c000fbf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbfb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fbfd:	7e 2b                	jle    c000fc2a <EnvVarContainer::getEnv(char const*)+0x38>
c000fbff:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc06:	50                   	push   eax
c000fc07:	50                   	push   eax
c000fc08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc0b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc12:	e8 c9 0a ff ff       	call   c00006e0 <strcmp>
c000fc17:	83 c4 10             	add    esp,0x10
c000fc1a:	85 c0                	test   eax,eax
c000fc1c:	75 09                	jne    c000fc27 <EnvVarContainer::getEnv(char const*)+0x35>
c000fc1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc21:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fc25:	eb 05                	jmp    c000fc2c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fc27:	43                   	inc    ebx
c000fc28:	eb d1                	jmp    c000fbfb <EnvVarContainer::getEnv(char const*)+0x9>
c000fc2a:	31 c0                	xor    eax,eax
c000fc2c:	5b                   	pop    ebx
c000fc2d:	5e                   	pop    esi
c000fc2e:	5f                   	pop    edi
c000fc2f:	c3                   	ret    

c000fc30 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fc30:	55                   	push   ebp
c000fc31:	57                   	push   edi
c000fc32:	56                   	push   esi
c000fc33:	53                   	push   ebx
c000fc34:	83 ec 28             	sub    esp,0x28
c000fc37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fc3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fc43:	56                   	push   esi
c000fc44:	e8 f7 08 ff ff       	call   c0000540 <strlen>
c000fc49:	40                   	inc    eax
c000fc4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc4d:	e8 67 7b ff ff       	call   c00077b9 <malloc>
c000fc52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc59:	e8 e2 08 ff ff       	call   c0000540 <strlen>
c000fc5e:	40                   	inc    eax
c000fc5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc62:	e8 52 7b ff ff       	call   c00077b9 <malloc>
c000fc67:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc6e:	e8 cd 08 ff ff       	call   c0000540 <strlen>
c000fc73:	83 c4 0c             	add    esp,0xc
c000fc76:	40                   	inc    eax
c000fc77:	50                   	push   eax
c000fc78:	6a 00                	push   0x0
c000fc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc7e:	e8 4d 08 ff ff       	call   c00004d0 <memset>
c000fc83:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc86:	e8 b5 08 ff ff       	call   c0000540 <strlen>
c000fc8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc97:	89 de                	mov    esi,ebx
c000fc99:	e8 a2 08 ff ff       	call   c0000540 <strlen>
c000fc9e:	83 c4 0c             	add    esp,0xc
c000fca1:	40                   	inc    eax
c000fca2:	50                   	push   eax
c000fca3:	6a 00                	push   0x0
c000fca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca9:	e8 22 08 ff ff       	call   c00004d0 <memset>
c000fcae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcb1:	e8 8a 08 ff ff       	call   c0000540 <strlen>
c000fcb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fcba:	8d 48 01             	lea    ecx,[eax+0x1]
c000fcbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fcc2:	40                   	inc    eax
c000fcc3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fcc6:	c1 e0 03             	shl    eax,0x3
c000fcc9:	5a                   	pop    edx
c000fcca:	59                   	pop    ecx
c000fccb:	50                   	push   eax
c000fccc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fccf:	e8 d1 7a ff ff       	call   c00077a5 <realloc>
c000fcd4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fcd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fcdb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fcde:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fce2:	b9 08 00 00 00       	mov    ecx,0x8
c000fce7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fce9:	83 c4 2c             	add    esp,0x2c
c000fcec:	5b                   	pop    ebx
c000fced:	5e                   	pop    esi
c000fcee:	5f                   	pop    edi
c000fcef:	5d                   	pop    ebp
c000fcf0:	c3                   	ret    
c000fcf1:	90                   	nop

c000fcf2 <EnvVarContainer::deleteEnv(char const*)>:
c000fcf2:	c3                   	ret    
c000fcf3:	90                   	nop

c000fcf4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fcf4:	55                   	push   ebp
c000fcf5:	57                   	push   edi
c000fcf6:	56                   	push   esi
c000fcf7:	53                   	push   ebx
c000fcf8:	81 ec 38 01 00 00    	sub    esp,0x138
c000fcfe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd05:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd0c:	68 14 01 00 00       	push   0x114
c000fd11:	e8 a3 7a ff ff       	call   c00077b9 <malloc>
c000fd16:	83 c4 0c             	add    esp,0xc
c000fd19:	89 c3                	mov    ebx,eax
c000fd1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd25:	50                   	push   eax
c000fd26:	e8 d1 ad ff ff       	call   c000aafc <File::File(char const*, Process*)>
c000fd2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd2e:	e8 f7 b0 ff ff       	call   c000ae2a <File::exists()>
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	84 c0                	test   al,al
c000fd38:	75 31                	jne    c000fd6b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fd3a:	50                   	push   eax
c000fd3b:	50                   	push   eax
c000fd3c:	6a 12                	push   0x12
c000fd3e:	53                   	push   ebx
c000fd3f:	e8 78 ae ff ff       	call   c000abbc <File::open(FileOpenMode)>
c000fd44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd46:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fd49:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd4c:	e8 ef 07 ff ff       	call   c0000540 <strlen>
c000fd51:	5a                   	pop    edx
c000fd52:	31 d2                	xor    edx,edx
c000fd54:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd58:	51                   	push   ecx
c000fd59:	56                   	push   esi
c000fd5a:	52                   	push   edx
c000fd5b:	50                   	push   eax
c000fd5c:	53                   	push   ebx
c000fd5d:	ff d7                	call   edi
c000fd5f:	83 c4 14             	add    esp,0x14
c000fd62:	53                   	push   ebx
c000fd63:	e8 b2 ae ff ff       	call   c000ac1a <File::close()>
c000fd68:	83 c4 10             	add    esp,0x10
c000fd6b:	56                   	push   esi
c000fd6c:	31 f6                	xor    esi,esi
c000fd6e:	68 00 01 00 00       	push   0x100
c000fd73:	6a 00                	push   0x0
c000fd75:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd79:	50                   	push   eax
c000fd7a:	e8 51 07 ff ff       	call   c00004d0 <memset>
c000fd7f:	5f                   	pop    edi
c000fd80:	58                   	pop    eax
c000fd81:	6a 01                	push   0x1
c000fd83:	53                   	push   ebx
c000fd84:	e8 33 ae ff ff       	call   c000abbc <File::open(FileOpenMode)>
c000fd89:	83 c4 10             	add    esp,0x10
c000fd8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd99:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd9d:	51                   	push   ecx
c000fd9e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fda2:	52                   	push   edx
c000fda3:	6a 00                	push   0x0
c000fda5:	6a 01                	push   0x1
c000fda7:	53                   	push   ebx
c000fda8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fdab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fdaf:	83 c4 20             	add    esp,0x20
c000fdb2:	3c 0d                	cmp    al,0xd
c000fdb4:	0f 84 09 01 00 00    	je     c000fec3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fdbf:	0f 84 ef 00 00 00    	je     c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fdc5:	3c 0a                	cmp    al,0xa
c000fdc7:	74 13                	je     c000fddc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdc9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdce:	74 0c                	je     c000fddc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fdd0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fdd6:	0f 8e d8 00 00 00    	jle    c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fde0:	83 ec 0c             	sub    esp,0xc
c000fde3:	8d 78 01             	lea    edi,[eax+0x1]
c000fde6:	57                   	push   edi
c000fde7:	e8 cd 79 ff ff       	call   c00077b9 <malloc>
c000fdec:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fdf0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdf4:	8d 56 04             	lea    edx,[esi+0x4]
c000fdf7:	89 14 24             	mov    DWORD PTR [esp],edx
c000fdfa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdfe:	e8 b6 79 ff ff       	call   c00077b9 <malloc>
c000fe03:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe07:	83 c4 0c             	add    esp,0xc
c000fe0a:	57                   	push   edi
c000fe0b:	6a 00                	push   0x0
c000fe0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe11:	e8 ba 06 ff ff       	call   c00004d0 <memset>
c000fe16:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe1a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe1e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe24:	83 c4 0c             	add    esp,0xc
c000fe27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe2b:	52                   	push   edx
c000fe2c:	6a 00                	push   0x0
c000fe2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fe32:	e8 99 06 ff ff       	call   c00004d0 <memset>
c000fe37:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe3b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fe3f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe42:	e8 f9 06 ff ff       	call   c0000540 <strlen>
c000fe47:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fe4b:	89 c1                	mov    ecx,eax
c000fe4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe52:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fe55:	40                   	inc    eax
c000fe56:	83 c4 10             	add    esp,0x10
c000fe59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe5c:	85 d2                	test   edx,edx
c000fe5e:	75 0c                	jne    c000fe6c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe60:	83 ec 0c             	sub    esp,0xc
c000fe63:	6a 08                	push   0x8
c000fe65:	e8 4f 79 ff ff       	call   c00077b9 <malloc>
c000fe6a:	eb 0c                	jmp    c000fe78 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe6c:	c1 e0 03             	shl    eax,0x3
c000fe6f:	51                   	push   ecx
c000fe70:	51                   	push   ecx
c000fe71:	50                   	push   eax
c000fe72:	52                   	push   edx
c000fe73:	e8 2d 79 ff ff       	call   c00077a5 <realloc>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe7e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe81:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe88:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe8c:	b9 08 00 00 00       	mov    ecx,0x8
c000fe91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe93:	31 f6                	xor    esi,esi
c000fe95:	50                   	push   eax
c000fe96:	68 00 01 00 00       	push   0x100
c000fe9b:	6a 00                	push   0x0
c000fe9d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fea1:	50                   	push   eax
c000fea2:	e8 29 06 ff ff       	call   c00004d0 <memset>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000feb2:	eb 0f                	jmp    c000fec3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000feb4:	3c 3d                	cmp    al,0x3d
c000feb6:	74 07                	je     c000febf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000feb8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000febc:	46                   	inc    esi
c000febd:	eb 04                	jmp    c000fec3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000febf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fec3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fec8:	0f 85 c6 fe ff ff    	jne    c000fd94 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fece:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fed4:	5b                   	pop    ebx
c000fed5:	5e                   	pop    esi
c000fed6:	5f                   	pop    edi
c000fed7:	5d                   	pop    ebp
c000fed8:	c3                   	ret    
c000fed9:	90                   	nop

c000feda <EnvVarContainer::__loadSystem()>:
c000feda:	83 ec 10             	sub    esp,0x10
c000fedd:	68 00 fa 01 c0       	push   0xc001fa00
c000fee2:	68 f4 e6 01 c0       	push   0xc001e6f4
c000fee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feeb:	e8 04 fe ff ff       	call   c000fcf4 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fef0:	83 c4 1c             	add    esp,0x1c
c000fef3:	c3                   	ret    

c000fef4 <EnvVarContainer::__loadUser()>:
c000fef4:	c3                   	ret    
c000fef5:	90                   	nop

c000fef6 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fefa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ff00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff16:	90                   	nop
c000ff17:	c3                   	ret    

c000ff18 <EnvVarContainer::~EnvVarContainer()>:
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff22:	85 c0                	test   eax,eax
c000ff24:	74 1d                	je     c000ff43 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 13                	je     c000ff43 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff37:	83 ec 0c             	sub    esp,0xc
c000ff3a:	50                   	push   eax
c000ff3b:	e8 89 78 ff ff       	call   c00077c9 <free>
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	90                   	nop
c000ff44:	83 c4 0c             	add    esp,0xc
c000ff47:	c3                   	ret    

c000ff48 <Krnl::getEnv(Process*, char const*)>:
c000ff48:	53                   	push   ebx
c000ff49:	83 ec 08             	sub    esp,0x8
c000ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff54:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff5a:	74 04                	je     c000ff60 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff5c:	85 c0                	test   eax,eax
c000ff5e:	75 0b                	jne    c000ff6b <Krnl::getEnv(Process*, char const*)+0x23>
c000ff60:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff65:	85 c0                	test   eax,eax
c000ff67:	75 19                	jne    c000ff82 <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff69:	eb 27                	jmp    c000ff92 <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff6b:	52                   	push   edx
c000ff6c:	52                   	push   edx
c000ff6d:	53                   	push   ebx
c000ff6e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff74:	e8 79 fc ff ff       	call   c000fbf2 <EnvVarContainer::getEnv(char const*)>
c000ff79:	83 c4 10             	add    esp,0x10
c000ff7c:	85 c0                	test   eax,eax
c000ff7e:	75 28                	jne    c000ffa8 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff80:	eb de                	jmp    c000ff60 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff82:	52                   	push   edx
c000ff83:	52                   	push   edx
c000ff84:	53                   	push   ebx
c000ff85:	50                   	push   eax
c000ff86:	e8 67 fc ff ff       	call   c000fbf2 <EnvVarContainer::getEnv(char const*)>
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	85 c0                	test   eax,eax
c000ff90:	75 16                	jne    c000ffa8 <Krnl::getEnv(Process*, char const*)+0x60>
c000ff92:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff96:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff9f:	83 c4 08             	add    esp,0x8
c000ffa2:	5b                   	pop    ebx
c000ffa3:	e9 4a fc ff ff       	jmp    c000fbf2 <EnvVarContainer::getEnv(char const*)>
c000ffa8:	83 c4 08             	add    esp,0x8
c000ffab:	5b                   	pop    ebx
c000ffac:	c3                   	ret    

c000ffad <Krnl::setEnvSystem(char const*, char const*)>:
c000ffad:	83 ec 10             	sub    esp,0x10
c000ffb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffb8:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ffbe:	e8 6d fc ff ff       	call   c000fc30 <EnvVarContainer::setEnv(char const*, char const*)>
c000ffc3:	83 c4 1c             	add    esp,0x1c
c000ffc6:	c3                   	ret    

c000ffc7 <Krnl::setEnvUser(char const*, char const*)>:
c000ffc7:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ffcc:	85 c0                	test   eax,eax
c000ffce:	74 15                	je     c000ffe5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ffd0:	83 ec 10             	sub    esp,0x10
c000ffd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffdb:	50                   	push   eax
c000ffdc:	e8 4f fc ff ff       	call   c000fc30 <EnvVarContainer::setEnv(char const*, char const*)>
c000ffe1:	83 c4 1c             	add    esp,0x1c
c000ffe4:	c3                   	ret    
c000ffe5:	c3                   	ret    

c000ffe6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ffe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffea:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000fff0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fff4:	e9 37 fc ff ff       	jmp    c000fc30 <EnvVarContainer::setEnv(char const*, char const*)>

c000fff9 <Krnl::deleteEnvSystem(char const*)>:
c000fff9:	c3                   	ret    

c000fffa <Krnl::deleteEnvUser(char const*)>:
c000fffa:	c3                   	ret    

c000fffb <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fffb:	c3                   	ret    

c000fffc <Krnl::newProcessEnv(Process*)>:
c000fffc:	83 ec 28             	sub    esp,0x28
c000ffff:	6a 0c                	push   0xc
c0010001:	e8 b3 77 ff ff       	call   c00077b9 <malloc>
c0010006:	5a                   	pop    edx
c0010007:	59                   	pop    ecx
c0010008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001000c:	50                   	push   eax
c001000d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010011:	e8 e0 fe ff ff       	call   c000fef6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010016:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001a:	83 c4 2c             	add    esp,0x2c
c001001d:	c3                   	ret    

c001001e <Krnl::copyProcessEnv(Process*, Process*)>:
c001001e:	57                   	push   edi
c001001f:	56                   	push   esi
c0010020:	53                   	push   ebx
c0010021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010025:	83 ec 0c             	sub    esp,0xc
c0010028:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001002e:	6a 0c                	push   0xc
c0010030:	e8 84 77 ff ff       	call   c00077b9 <malloc>
c0010035:	89 c3                	mov    ebx,eax
c0010037:	58                   	pop    eax
c0010038:	5a                   	pop    edx
c0010039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001003d:	53                   	push   ebx
c001003e:	e8 b3 fe ff ff       	call   c000fef6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010043:	8b 07                	mov    eax,DWORD PTR [edi]
c0010045:	89 03                	mov    DWORD PTR [ebx],eax
c0010047:	c1 e0 03             	shl    eax,0x3
c001004a:	89 04 24             	mov    DWORD PTR [esp],eax
c001004d:	e8 67 77 ff ff       	call   c00077b9 <malloc>
c0010052:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010055:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010057:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001005a:	c1 e1 03             	shl    ecx,0x3
c001005d:	89 c7                	mov    edi,eax
c001005f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010061:	83 c4 10             	add    esp,0x10
c0010064:	89 d8                	mov    eax,ebx
c0010066:	5b                   	pop    ebx
c0010067:	5e                   	pop    esi
c0010068:	5f                   	pop    edi
c0010069:	c3                   	ret    

c001006a <Krnl::loadSystemEnv()>:
c001006a:	53                   	push   ebx
c001006b:	83 ec 14             	sub    esp,0x14
c001006e:	6a 0c                	push   0xc
c0010070:	e8 44 77 ff ff       	call   c00077b9 <malloc>
c0010075:	89 c3                	mov    ebx,eax
c0010077:	58                   	pop    eax
c0010078:	5a                   	pop    edx
c0010079:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001007f:	53                   	push   ebx
c0010080:	e8 71 fe ff ff       	call   c000fef6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010085:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010088:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c001008e:	e8 47 fe ff ff       	call   c000feda <EnvVarContainer::__loadSystem()>
c0010093:	83 c4 18             	add    esp,0x18
c0010096:	5b                   	pop    ebx
c0010097:	c3                   	ret    

c0010098 <Krnl::loadUserEnv()>:
c0010098:	53                   	push   ebx
c0010099:	83 ec 14             	sub    esp,0x14
c001009c:	6a 0c                	push   0xc
c001009e:	e8 16 77 ff ff       	call   c00077b9 <malloc>
c00100a3:	89 c3                	mov    ebx,eax
c00100a5:	58                   	pop    eax
c00100a6:	5a                   	pop    edx
c00100a7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00100ad:	53                   	push   ebx
c00100ae:	e8 43 fe ff ff       	call   c000fef6 <EnvVarContainer::EnvVarContainer(Process*)>
c00100b3:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c00100b9:	83 c4 18             	add    esp,0x18
c00100bc:	5b                   	pop    ebx
c00100bd:	c3                   	ret    

c00100be <Krnl::flushEnv()>:
c00100be:	c3                   	ret    

c00100bf <Krnl::getProcessTotalEnvCount(Process*)>:
c00100bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c3:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c00100c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100cf:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00100d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d6:	03 01                	add    eax,DWORD PTR [ecx]
c00100d8:	85 d2                	test   edx,edx
c00100da:	74 02                	je     c00100de <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00100dc:	03 02                	add    eax,DWORD PTR [edx]
c00100de:	c3                   	ret    

c00100df <Krnl::getProcessEnvPair(Process*, int)>:
c00100df:	57                   	push   edi
c00100e0:	56                   	push   esi
c00100e1:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c00100e7:	53                   	push   ebx
c00100e8:	85 f6                	test   esi,esi
c00100ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100f2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100fe:	75 16                	jne    c0010116 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010100:	39 c2                	cmp    edx,eax
c0010102:	7c 16                	jl     c001011a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010104:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c001010a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001010c:	01 c6                	add    esi,eax
c001010e:	39 d6                	cmp    esi,edx
c0010110:	7e 3c                	jle    c001014e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010112:	29 c2                	sub    edx,eax
c0010114:	eb 04                	jmp    c001011a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010116:	39 c2                	cmp    edx,eax
c0010118:	7d 05                	jge    c001011f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001011a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001011d:	eb 20                	jmp    c001013f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001011f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010121:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010124:	39 d1                	cmp    ecx,edx
c0010126:	7e 04                	jle    c001012c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010128:	29 c2                	sub    edx,eax
c001012a:	eb 10                	jmp    c001013c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001012c:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c0010132:	03 0e                	add    ecx,DWORD PTR [esi]
c0010134:	39 d1                	cmp    ecx,edx
c0010136:	7e 16                	jle    c001014e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010138:	29 c2                	sub    edx,eax
c001013a:	29 fa                	sub    edx,edi
c001013c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001013f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010142:	8b 02                	mov    eax,DWORD PTR [edx]
c0010144:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010147:	89 03                	mov    DWORD PTR [ebx],eax
c0010149:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001014c:	eb 1d                	jmp    c001016b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001014e:	83 ec 0c             	sub    esp,0xc
c0010151:	68 16 e7 01 c0       	push   0xc001e716
c0010156:	e8 ac 00 00 00       	call   c0010207 <KePanic(char const*)>
c001015b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010161:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010168:	83 c4 10             	add    esp,0x10
c001016b:	89 d8                	mov    eax,ebx
c001016d:	5b                   	pop    ebx
c001016e:	5e                   	pop    esi
c001016f:	5f                   	pop    edi
c0010170:	c2 04 00             	ret    0x4

c0010173 <CPU::current()>:
c0010173:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010178:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001017e:	c3                   	ret    

c001017f <operator new(unsigned long)>:
c001017f:	e9 35 76 ff ff       	jmp    c00077b9 <malloc>

c0010184 <operator delete(void*)>:
c0010184:	e9 50 76 ff ff       	jmp    c00077d9 <rfree>

c0010189 <disableIRQs()>:
c0010189:	fa                   	cli    
c001018a:	c3                   	ret    

c001018b <enableIRQs()>:
c001018b:	fb                   	sti    
c001018c:	c3                   	ret    

c001018d <lockScheduler()>:
c001018d:	fa                   	cli    
c001018e:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010194:	c3                   	ret    

c0010195 <unlockScheduler()>:
c0010195:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001019a:	48                   	dec    eax
c001019b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101a0:	75 01                	jne    c00101a3 <unlockScheduler()+0xe>
c00101a2:	fb                   	sti    
c00101a3:	c3                   	ret    

c00101a4 <lockStuff()>:
c00101a4:	fa                   	cli    
c00101a5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00101ab:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00101b1:	c3                   	ret    

c00101b2 <unlockStuff()>:
c00101b2:	83 ec 0c             	sub    esp,0xc
c00101b5:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00101ba:	48                   	dec    eax
c00101bb:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00101c0:	75 18                	jne    c00101da <unlockStuff()+0x28>
c00101c2:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00101c9:	74 0f                	je     c00101da <unlockStuff()+0x28>
c00101cb:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00101d5:	e8 22 36 00 00       	call   c00137fc <schedule()>
c00101da:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101df:	48                   	dec    eax
c00101e0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101e5:	75 01                	jne    c00101e8 <unlockStuff()+0x36>
c00101e7:	fb                   	sti    
c00101e8:	83 c4 0c             	add    esp,0xc
c00101eb:	c3                   	ret    

c00101ec <Virt::getAKernelVAS()>:
c00101ec:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00101f1:	c3                   	ret    

c00101f2 <__not_memcpy>:
c00101f2:	57                   	push   edi
c00101f3:	56                   	push   esi
c00101f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010200:	89 c7                	mov    edi,eax
c0010202:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010204:	5e                   	pop    esi
c0010205:	5f                   	pop    edi
c0010206:	c3                   	ret    

c0010207 <KePanic(char const*)>:
c0010207:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c001020e:	e9 e1 53 00 00       	jmp    c00155f4 <HalPanic(char const*)>

c0010213 <Krnl::powerThread(void*)>:
c0010213:	83 ec 0c             	sub    esp,0xc
c0010216:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001021b:	48                   	dec    eax
c001021c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010221:	75 01                	jne    c0010224 <Krnl::powerThread(void*)+0x11>
c0010223:	fb                   	sti    
c0010224:	83 ec 0c             	sub    esp,0xc
c0010227:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c001022e:	6a 0a                	push   0xa
c0010230:	e8 d7 38 00 00       	call   c0013b0c <sleep(unsigned int)>
c0010235:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	eb e3                	jmp    c0010224 <Krnl::powerThread(void*)+0x11>

c0010241 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010241:	57                   	push   edi
c0010242:	b9 09 00 00 00       	mov    ecx,0x9
c0010247:	56                   	push   esi
c0010248:	bf 60 49 02 c0       	mov    edi,0xc0024960
c001024d:	fc                   	cld    
c001024e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010252:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010254:	5e                   	pop    esi
c0010255:	5f                   	pop    edi
c0010256:	c3                   	ret    

c0010257 <Krnl::userIOReceived()>:
c0010257:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010261:	c3                   	ret    

c0010262 <Krnl::handlePowerButton()>:
c0010262:	83 ec 0c             	sub    esp,0xc
c0010265:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c001026a:	83 f8 02             	cmp    eax,0x2
c001026d:	75 10                	jne    c001027f <Krnl::handlePowerButton()+0x1d>
c001026f:	83 ec 0c             	sub    esp,0xc
c0010272:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010278:	e8 d9 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001027d:	eb 11                	jmp    c0010290 <Krnl::handlePowerButton()+0x2e>
c001027f:	48                   	dec    eax
c0010280:	75 11                	jne    c0010293 <Krnl::handlePowerButton()+0x31>
c0010282:	83 ec 0c             	sub    esp,0xc
c0010285:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001028b:	e8 f6 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010290:	83 c4 10             	add    esp,0x10
c0010293:	83 c4 0c             	add    esp,0xc
c0010296:	c3                   	ret    

c0010297 <Krnl::handleSleepButton()>:
c0010297:	83 ec 0c             	sub    esp,0xc
c001029a:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001029f:	83 f8 02             	cmp    eax,0x2
c00102a2:	75 10                	jne    c00102b4 <Krnl::handleSleepButton()+0x1d>
c00102a4:	83 ec 0c             	sub    esp,0xc
c00102a7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102ad:	e8 a4 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102b2:	eb 11                	jmp    c00102c5 <Krnl::handleSleepButton()+0x2e>
c00102b4:	48                   	dec    eax
c00102b5:	75 11                	jne    c00102c8 <Krnl::handleSleepButton()+0x31>
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102c0:	e8 c1 6b ff ff       	call   c0006e86 <Computer::sleep()>
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	83 c4 0c             	add    esp,0xc
c00102cb:	c3                   	ret    

c00102cc <Krnl::setupPowerManager()>:
c00102cc:	83 ec 0c             	sub    esp,0xc
c00102cf:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102d9:	68 f0 00 00 00       	push   0xf0
c00102de:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102e5:	6a 00                	push   0x0
c00102e7:	68 13 02 01 c0       	push   0xc0010213
c00102ec:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00102f2:	e8 e5 32 00 00       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c00102f7:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c0010301:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c001030b:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c0010315:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c001031f:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c0010329:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c0010333:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c001033d:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c0010347:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c0010351:	83 c4 1c             	add    esp,0x1c
c0010354:	c3                   	ret    
c0010355:	66 90                	xchg   ax,ax
c0010357:	90                   	nop

c0010358 <KeResolveCompatibilitySymbol(char*)>:
c0010358:	83 ec 0c             	sub    esp,0xc
c001035b:	83 ec 08             	sub    esp,0x8
c001035e:	68 30 e7 01 c0       	push   0xc001e730
c0010363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010367:	e8 74 03 ff ff       	call   c00006e0 <strcmp>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	85 c0                	test   eax,eax
c0010371:	0f 94 c0             	sete   al
c0010374:	84 c0                	test   al,al
c0010376:	74 0c                	je     c0010384 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010378:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c001037d:	e9 62 01 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010382:	66 90                	xchg   ax,ax
c0010384:	83 ec 08             	sub    esp,0x8
c0010387:	68 39 e7 01 c0       	push   0xc001e739
c001038c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010390:	e8 4b 03 ff ff       	call   c00006e0 <strcmp>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	85 c0                	test   eax,eax
c001039a:	0f 94 c0             	sete   al
c001039d:	84 c0                	test   al,al
c001039f:	74 0b                	je     c00103ac <KeResolveCompatibilitySymbol(char*)+0x54>
c00103a1:	b8 60 c1 01 c0       	mov    eax,0xc001c160
c00103a6:	e9 39 01 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ab:	90                   	nop
c00103ac:	83 ec 08             	sub    esp,0x8
c00103af:	68 43 e7 01 c0       	push   0xc001e743
c00103b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b8:	e8 23 03 ff ff       	call   c00006e0 <strcmp>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	85 c0                	test   eax,eax
c00103c2:	0f 94 c0             	sete   al
c00103c5:	84 c0                	test   al,al
c00103c7:	74 0b                	je     c00103d4 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00103c9:	b8 94 be 01 c0       	mov    eax,0xc001be94
c00103ce:	e9 11 01 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d3:	90                   	nop
c00103d4:	83 ec 08             	sub    esp,0x8
c00103d7:	68 4c e7 01 c0       	push   0xc001e74c
c00103dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e0:	e8 fb 02 ff ff       	call   c00006e0 <strcmp>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	85 c0                	test   eax,eax
c00103ea:	0f 94 c0             	sete   al
c00103ed:	84 c0                	test   al,al
c00103ef:	74 0b                	je     c00103fc <KeResolveCompatibilitySymbol(char*)+0xa4>
c00103f1:	b8 07 02 01 c0       	mov    eax,0xc0010207
c00103f6:	e9 e9 00 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103fb:	90                   	nop
c00103fc:	83 ec 08             	sub    esp,0x8
c00103ff:	68 5f e7 01 c0       	push   0xc001e75f
c0010404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010408:	e8 d3 02 ff ff       	call   c00006e0 <strcmp>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	85 c0                	test   eax,eax
c0010412:	0f 94 c0             	sete   al
c0010415:	84 c0                	test   al,al
c0010417:	74 0b                	je     c0010424 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010419:	b8 8f fb 00 c0       	mov    eax,0xc000fb8f
c001041e:	e9 c1 00 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010423:	90                   	nop
c0010424:	83 ec 08             	sub    esp,0x8
c0010427:	68 7c e7 01 c0       	push   0xc001e77c
c001042c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010430:	e8 ab 02 ff ff       	call   c00006e0 <strcmp>
c0010435:	83 c4 10             	add    esp,0x10
c0010438:	85 c0                	test   eax,eax
c001043a:	0f 94 c0             	sete   al
c001043d:	84 c0                	test   al,al
c001043f:	74 0b                	je     c001044c <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010441:	b8 60 c2 01 c0       	mov    eax,0xc001c260
c0010446:	e9 99 00 00 00       	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001044b:	90                   	nop
c001044c:	83 ec 08             	sub    esp,0x8
c001044f:	68 86 e7 01 c0       	push   0xc001e786
c0010454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010458:	e8 83 02 ff ff       	call   c00006e0 <strcmp>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	85 c0                	test   eax,eax
c0010462:	0f 94 c0             	sete   al
c0010465:	84 c0                	test   al,al
c0010467:	74 07                	je     c0010470 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010469:	b8 e0 bf 01 c0       	mov    eax,0xc001bfe0
c001046e:	eb 74                	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010470:	83 ec 08             	sub    esp,0x8
c0010473:	68 8f e7 01 c0       	push   0xc001e78f
c0010478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001047c:	e8 5f 02 ff ff       	call   c00006e0 <strcmp>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	85 c0                	test   eax,eax
c0010486:	0f 94 c0             	sete   al
c0010489:	84 c0                	test   al,al
c001048b:	74 07                	je     c0010494 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001048d:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010492:	eb 50                	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010494:	83 ec 08             	sub    esp,0x8
c0010497:	68 a7 e7 01 c0       	push   0xc001e7a7
c001049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a0:	e8 3b 02 ff ff       	call   c00006e0 <strcmp>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	85 c0                	test   eax,eax
c00104aa:	0f 94 c0             	sete   al
c00104ad:	84 c0                	test   al,al
c00104af:	74 07                	je     c00104b8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00104b1:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c00104b6:	eb 2c                	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104b8:	83 ec 08             	sub    esp,0x8
c00104bb:	68 b4 e7 01 c0       	push   0xc001e7b4
c00104c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c4:	e8 17 02 ff ff       	call   c00006e0 <strcmp>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	85 c0                	test   eax,eax
c00104ce:	0f 94 c0             	sete   al
c00104d1:	84 c0                	test   al,al
c00104d3:	74 07                	je     c00104dc <KeResolveCompatibilitySymbol(char*)+0x184>
c00104d5:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c00104da:	eb 08                	jmp    c00104e4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104dc:	b8 00 00 00 00       	mov    eax,0x0
c00104e1:	8d 76 00             	lea    esi,[esi+0x0]
c00104e4:	83 c4 0c             	add    esp,0xc
c00104e7:	c3                   	ret    

c00104e8 <KiSigKill(int)>:
c00104e8:	57                   	push   edi
c00104e9:	b9 0a 00 00 00       	mov    ecx,0xa
c00104ee:	56                   	push   esi
c00104ef:	be fd e7 01 c0       	mov    esi,0xc001e7fd
c00104f4:	83 ec 14             	sub    esp,0x14
c00104f7:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104fb:	fc                   	cld    
c00104fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104fe:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010502:	50                   	push   eax
c0010503:	6a 00                	push   0x0
c0010505:	6a 00                	push   0x0
c0010507:	6a 27                	push   0x27
c0010509:	e8 44 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001050e:	83 c4 24             	add    esp,0x24
c0010511:	5e                   	pop    esi
c0010512:	5f                   	pop    edi
c0010513:	c3                   	ret    

c0010514 <KiDefaultSignalHandlerIgnore(int)>:
c0010514:	c3                   	ret    

c0010515 <KiDefaultSignalHandlerPause(int)>:
c0010515:	57                   	push   edi
c0010516:	b9 07 00 00 00       	mov    ecx,0x7
c001051b:	56                   	push   esi
c001051c:	be 07 e8 01 c0       	mov    esi,0xc001e807
c0010521:	83 ec 24             	sub    esp,0x24
c0010524:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010528:	fc                   	cld    
c0010529:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001052b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001052f:	50                   	push   eax
c0010530:	6a 00                	push   0x0
c0010532:	6a 00                	push   0x0
c0010534:	6a 27                	push   0x27
c0010536:	e8 17 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001053b:	83 c4 34             	add    esp,0x34
c001053e:	5e                   	pop    esi
c001053f:	5f                   	pop    edi
c0010540:	c3                   	ret    

c0010541 <KiDefaultSignalHandlerResume(int)>:
c0010541:	57                   	push   edi
c0010542:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010547:	56                   	push   esi
c0010548:	be 23 e8 01 c0       	mov    esi,0xc001e823
c001054d:	83 ec 24             	sub    esp,0x24
c0010550:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010554:	fc                   	cld    
c0010555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010557:	8d 44 24 03          	lea    eax,[esp+0x3]
c001055b:	50                   	push   eax
c001055c:	6a 00                	push   0x0
c001055e:	6a 00                	push   0x0
c0010560:	6a 27                	push   0x27
c0010562:	e8 eb fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010567:	83 c4 34             	add    esp,0x34
c001056a:	5e                   	pop    esi
c001056b:	5f                   	pop    edi
c001056c:	c3                   	ret    

c001056d <KeDeinitSignals(SigHandlerBlock*)>:
c001056d:	e9 57 72 ff ff       	jmp    c00077c9 <free>

c0010572 <KeInitSignals()>:
c0010572:	53                   	push   ebx
c0010573:	83 ec 14             	sub    esp,0x14
c0010576:	68 c8 00 00 00       	push   0xc8
c001057b:	e8 39 72 ff ff       	call   c00077b9 <malloc>
c0010580:	83 c4 0c             	add    esp,0xc
c0010583:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001058d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010597:	89 c3                	mov    ebx,eax
c0010599:	6a 20                	push   0x20
c001059b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00105a1:	6a 00                	push   0x0
c00105a3:	50                   	push   eax
c00105a4:	e8 27 ff fe ff       	call   c00004d0 <memset>
c00105a9:	83 c4 0c             	add    esp,0xc
c00105ac:	6a 44                	push   0x44
c00105ae:	6a 00                	push   0x0
c00105b0:	53                   	push   ebx
c00105b1:	e8 1a ff fe ff       	call   c00004d0 <memset>
c00105b6:	89 d8                	mov    eax,ebx
c00105b8:	83 c4 18             	add    esp,0x18
c00105bb:	5b                   	pop    ebx
c00105bc:	c3                   	ret    

c00105bd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00105bd:	53                   	push   ebx
c00105be:	b8 01 00 00 00       	mov    eax,0x1
c00105c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00105c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105cb:	83 f9 10             	cmp    ecx,0x10
c00105ce:	7f 21                	jg     c00105f1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00105d0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00105d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d7:	89 03                	mov    DWORD PTR [ebx],eax
c00105d9:	b8 01 00 00 00       	mov    eax,0x1
c00105de:	d3 e0                	shl    eax,cl
c00105e0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105e4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00105e7:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00105ef:	31 c0                	xor    eax,eax
c00105f1:	5b                   	pop    ebx
c00105f2:	c3                   	ret    

c00105f3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00105f3:	55                   	push   ebp
c00105f4:	57                   	push   edi
c00105f5:	bf 08 00 00 00       	mov    edi,0x8
c00105fa:	56                   	push   esi
c00105fb:	53                   	push   ebx
c00105fc:	83 ec 18             	sub    esp,0x18
c00105ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010603:	68 40 e8 01 c0       	push   0xc001e840
c0010608:	e8 7a 9f ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001060d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010614:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	31 c9                	xor    ecx,ecx
c001061f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010623:	99                   	cdq    
c0010624:	f7 ff                	idiv   edi
c0010626:	8d 42 24             	lea    eax,[edx+0x24]
c0010629:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001062d:	85 f6                	test   esi,esi
c001062f:	75 1a                	jne    c001064b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010631:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010635:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010639:	50                   	push   eax
c001063a:	50                   	push   eax
c001063b:	52                   	push   edx
c001063c:	68 51 e8 01 c0       	push   0xc001e851
c0010641:	e8 41 9f ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	eb 1b                	jmp    c0010666 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001064b:	41                   	inc    ecx
c001064c:	83 f9 08             	cmp    ecx,0x8
c001064f:	75 ce                	jne    c001061f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010651:	83 ec 0c             	sub    esp,0xc
c0010654:	be 01 00 00 00       	mov    esi,0x1
c0010659:	68 72 e8 01 c0       	push   0xc001e872
c001065e:	e8 24 9f ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010663:	83 c4 10             	add    esp,0x10
c0010666:	83 c4 0c             	add    esp,0xc
c0010669:	89 f0                	mov    eax,esi
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	5f                   	pop    edi
c001066e:	5d                   	pop    ebp
c001066f:	c3                   	ret    

c0010670 <KeCheckSignal(SigHandlerBlock*)>:
c0010670:	55                   	push   ebp
c0010671:	57                   	push   edi
c0010672:	56                   	push   esi
c0010673:	53                   	push   ebx
c0010674:	51                   	push   ecx
c0010675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010679:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010680:	75 07                	jne    c0010689 <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010682:	31 c0                	xor    eax,eax
c0010684:	e9 cc 00 00 00       	jmp    c0010755 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010689:	31 c9                	xor    ecx,ecx
c001068b:	bf 08 00 00 00       	mov    edi,0x8
c0010690:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010696:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010699:	99                   	cdq    
c001069a:	f7 ff                	idiv   edi
c001069c:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c00106a3:	85 d2                	test   edx,edx
c00106a5:	0f 84 94 00 00 00    	je     c001073f <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00106ab:	88 d1                	mov    cl,dl
c00106ad:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00106b3:	bf 01 00 00 00       	mov    edi,0x1
c00106b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00106bb:	d3 e7                	shl    edi,cl
c00106bd:	bd 01 00 00 00       	mov    ebp,0x1
c00106c2:	31 c9                	xor    ecx,ecx
c00106c4:	89 e8                	mov    eax,ebp
c00106c6:	d3 e0                	shl    eax,cl
c00106c8:	85 04 24             	test   DWORD PTR [esp],eax
c00106cb:	74 06                	je     c00106d3 <KeCheckSignal(SigHandlerBlock*)+0x63>
c00106cd:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00106d1:	75 af                	jne    c0010682 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106d3:	41                   	inc    ecx
c00106d4:	83 f9 11             	cmp    ecx,0x11
c00106d7:	75 eb                	jne    c00106c4 <KeCheckSignal(SigHandlerBlock*)+0x54>
c00106d9:	8d 4e 01             	lea    ecx,[esi+0x1]
c00106dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106df:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00106e5:	09 f8                	or     eax,edi
c00106e7:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00106f2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106f8:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106ff:	31 c0                	xor    eax,eax
c0010701:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010709:	74 09                	je     c0010714 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001070b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010712:	eb 06                	jmp    c001071a <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010714:	40                   	inc    eax
c0010715:	83 f8 08             	cmp    eax,0x8
c0010718:	75 e7                	jne    c0010701 <KeCheckSignal(SigHandlerBlock*)+0x91>
c001071a:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c001071d:	83 fa 09             	cmp    edx,0x9
c0010720:	75 07                	jne    c0010729 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c0010722:	b8 e8 04 01 c0       	mov    eax,0xc00104e8
c0010727:	eb 2c                	jmp    c0010755 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010729:	83 f8 01             	cmp    eax,0x1
c001072c:	0f 84 50 ff ff ff    	je     c0010682 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010732:	85 c0                	test   eax,eax
c0010734:	75 1f                	jne    c0010755 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010736:	8b 04 95 60 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05a0]
c001073d:	eb 16                	jmp    c0010755 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001073f:	46                   	inc    esi
c0010740:	41                   	inc    ecx
c0010741:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010747:	83 f9 08             	cmp    ecx,0x8
c001074a:	0f 85 40 ff ff ff    	jne    c0010690 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010750:	e9 2d ff ff ff       	jmp    c0010682 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010755:	5a                   	pop    edx
c0010756:	5b                   	pop    ebx
c0010757:	5e                   	pop    esi
c0010758:	5f                   	pop    edi
c0010759:	5d                   	pop    ebp
c001075a:	c3                   	ret    

c001075b <KiCheckSignalZ>:
c001075b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010760:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010763:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010769:	e8 02 ff ff ff       	call   c0010670 <KeCheckSignal(SigHandlerBlock*)>
c001076e:	5a                   	pop    edx
c001076f:	c3                   	ret    

c0010770 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010770:	56                   	push   esi
c0010771:	53                   	push   ebx
c0010772:	bb 01 00 00 00       	mov    ebx,0x1
c0010777:	52                   	push   edx
c0010778:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001077c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010780:	d3 e3                	shl    ebx,cl
c0010782:	83 f9 10             	cmp    ecx,0x10
c0010785:	7f 08                	jg     c001078f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010787:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001078d:	75 10                	jne    c001079f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001078f:	83 ec 0c             	sub    esp,0xc
c0010792:	68 83 e8 01 c0       	push   0xc001e883
c0010797:	e8 6b fa ff ff       	call   c0010207 <KePanic(char const*)>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	f7 d3                	not    ebx
c00107a1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00107a7:	58                   	pop    eax
c00107a8:	5b                   	pop    ebx
c00107a9:	5e                   	pop    esi
c00107aa:	c3                   	ret    

c00107ab <SysSeekDir(regs*)>:
c00107ab:	31 c0                	xor    eax,eax
c00107ad:	31 d2                	xor    edx,edx
c00107af:	c3                   	ret    

c00107b0 <SysTellDir(regs*)>:
c00107b0:	31 c0                	xor    eax,eax
c00107b2:	31 d2                	xor    edx,edx
c00107b4:	c3                   	ret    

c00107b5 <SysVerify(regs*)>:
c00107b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b9:	31 d2                	xor    edx,edx
c00107bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107be:	c3                   	ret    

c00107bf <SysGetArgc(regs*)>:
c00107bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107c7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00107cd:	99                   	cdq    
c00107ce:	c3                   	ret    

c00107cf <SysTTYName(regs*)>:
c00107cf:	b8 01 00 00 00       	mov    eax,0x1
c00107d4:	31 d2                	xor    edx,edx
c00107d6:	c3                   	ret    

c00107d7 <SysFormatDisk(regs*)>:
c00107d7:	56                   	push   esi
c00107d8:	53                   	push   ebx
c00107d9:	50                   	push   eax
c00107da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107de:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c00107e4:	eb 28                	jmp    c001080e <SysFormatDisk(regs*)+0x37>
c00107e6:	83 ec 0c             	sub    esp,0xc
c00107e9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107ec:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107f1:	51                   	push   ecx
c00107f2:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107f5:	51                   	push   ecx
c00107f6:	50                   	push   eax
c00107f7:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107fe:	50                   	push   eax
c00107ff:	53                   	push   ebx
c0010800:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010803:	83 c4 20             	add    esp,0x20
c0010806:	83 f8 08             	cmp    eax,0x8
c0010809:	75 12                	jne    c001081d <SysFormatDisk(regs*)+0x46>
c001080b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001080e:	85 db                	test   ebx,ebx
c0010810:	75 d4                	jne    c00107e6 <SysFormatDisk(regs*)+0xf>
c0010812:	59                   	pop    ecx
c0010813:	b8 03 00 00 00       	mov    eax,0x3
c0010818:	31 d2                	xor    edx,edx
c001081a:	5b                   	pop    ebx
c001081b:	5e                   	pop    esi
c001081c:	c3                   	ret    
c001081d:	85 c0                	test   eax,eax
c001081f:	74 1b                	je     c001083c <SysFormatDisk(regs*)+0x65>
c0010821:	83 f8 09             	cmp    eax,0x9
c0010824:	74 0b                	je     c0010831 <SysFormatDisk(regs*)+0x5a>
c0010826:	59                   	pop    ecx
c0010827:	b8 02 00 00 00       	mov    eax,0x2
c001082c:	31 d2                	xor    edx,edx
c001082e:	5b                   	pop    ebx
c001082f:	5e                   	pop    esi
c0010830:	c3                   	ret    
c0010831:	59                   	pop    ecx
c0010832:	b8 01 00 00 00       	mov    eax,0x1
c0010837:	31 d2                	xor    edx,edx
c0010839:	5b                   	pop    ebx
c001083a:	5e                   	pop    esi
c001083b:	c3                   	ret    
c001083c:	59                   	pop    ecx
c001083d:	31 c0                	xor    eax,eax
c001083f:	31 d2                	xor    edx,edx
c0010841:	5b                   	pop    ebx
c0010842:	5e                   	pop    esi
c0010843:	c3                   	ret    

c0010844 <SysSetDiskVolumeLabel(regs*)>:
c0010844:	56                   	push   esi
c0010845:	53                   	push   ebx
c0010846:	53                   	push   ebx
c0010847:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001084b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001084e:	83 f8 19             	cmp    eax,0x19
c0010851:	77 2d                	ja     c0010880 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010853:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c001085a:	85 c9                	test   ecx,ecx
c001085c:	74 22                	je     c0010880 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001085e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010861:	85 db                	test   ebx,ebx
c0010863:	74 1b                	je     c0010880 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010865:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001086b:	85 d2                	test   edx,edx
c001086d:	74 11                	je     c0010880 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001086f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010871:	53                   	push   ebx
c0010872:	50                   	push   eax
c0010873:	51                   	push   ecx
c0010874:	52                   	push   edx
c0010875:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	99                   	cdq    
c001087c:	59                   	pop    ecx
c001087d:	5b                   	pop    ebx
c001087e:	5e                   	pop    esi
c001087f:	c3                   	ret    
c0010880:	59                   	pop    ecx
c0010881:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010886:	ba ff ff ff ff       	mov    edx,0xffffffff
c001088b:	5b                   	pop    ebx
c001088c:	5e                   	pop    esi
c001088d:	c3                   	ret    

c001088e <SysGetDiskVolumeLabel(regs*)>:
c001088e:	57                   	push   edi
c001088f:	56                   	push   esi
c0010890:	53                   	push   ebx
c0010891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010895:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010898:	83 fa 19             	cmp    edx,0x19
c001089b:	77 38                	ja     c00108d5 <SysGetDiskVolumeLabel(regs*)+0x47>
c001089d:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c00108a4:	85 c9                	test   ecx,ecx
c00108a6:	74 2d                	je     c00108d5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108a8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00108ab:	85 db                	test   ebx,ebx
c00108ad:	74 26                	je     c00108d5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108af:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00108b2:	85 f6                	test   esi,esi
c00108b4:	74 1f                	je     c00108d5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108b6:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00108bc:	85 c0                	test   eax,eax
c00108be:	74 15                	je     c00108d5 <SysGetDiskVolumeLabel(regs*)+0x47>
c00108c0:	83 ec 0c             	sub    esp,0xc
c00108c3:	8b 38                	mov    edi,DWORD PTR [eax]
c00108c5:	56                   	push   esi
c00108c6:	53                   	push   ebx
c00108c7:	52                   	push   edx
c00108c8:	51                   	push   ecx
c00108c9:	50                   	push   eax
c00108ca:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00108cd:	83 c4 20             	add    esp,0x20
c00108d0:	99                   	cdq    
c00108d1:	5b                   	pop    ebx
c00108d2:	5e                   	pop    esi
c00108d3:	5f                   	pop    edi
c00108d4:	c3                   	ret    
c00108d5:	5b                   	pop    ebx
c00108d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108e0:	5e                   	pop    esi
c00108e1:	5f                   	pop    edi
c00108e2:	c3                   	ret    

c00108e3 <SysShutdown(regs*)>:
c00108e3:	83 ec 0c             	sub    esp,0xc
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108ed:	85 c0                	test   eax,eax
c00108ef:	74 18                	je     c0010909 <SysShutdown(regs*)+0x26>
c00108f1:	83 f8 01             	cmp    eax,0x1
c00108f4:	74 38                	je     c001092e <SysShutdown(regs*)+0x4b>
c00108f6:	83 f8 02             	cmp    eax,0x2
c00108f9:	74 24                	je     c001091f <SysShutdown(regs*)+0x3c>
c00108fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010900:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010905:	83 c4 0c             	add    esp,0xc
c0010908:	c3                   	ret    
c0010909:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001090e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010910:	6a 00                	push   0x0
c0010912:	6a 00                	push   0x0
c0010914:	6a 00                	push   0x0
c0010916:	50                   	push   eax
c0010917:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	eb dc                	jmp    c00108fb <SysShutdown(regs*)+0x18>
c001091f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010924:	8b 10                	mov    edx,DWORD PTR [eax]
c0010926:	6a 00                	push   0x0
c0010928:	6a 00                	push   0x0
c001092a:	6a 01                	push   0x1
c001092c:	eb e8                	jmp    c0010916 <SysShutdown(regs*)+0x33>
c001092e:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c0010933:	85 c0                	test   eax,eax
c0010935:	74 02                	je     c0010939 <SysShutdown(regs*)+0x56>
c0010937:	ff d0                	call   eax
c0010939:	31 c0                	xor    eax,eax
c001093b:	31 d2                	xor    edx,edx
c001093d:	83 c4 0c             	add    esp,0xc
c0010940:	c3                   	ret    

c0010941 <SysRealpath(regs*)>:
c0010941:	83 ec 0c             	sub    esp,0xc
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001094b:	85 d2                	test   edx,edx
c001094d:	74 07                	je     c0010956 <SysRealpath(regs*)+0x15>
c001094f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010952:	85 c0                	test   eax,eax
c0010954:	75 0b                	jne    c0010961 <SysRealpath(regs*)+0x20>
c0010956:	b8 01 00 00 00       	mov    eax,0x1
c001095b:	31 d2                	xor    edx,edx
c001095d:	83 c4 0c             	add    esp,0xc
c0010960:	c3                   	ret    
c0010961:	51                   	push   ecx
c0010962:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010968:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001096b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010971:	51                   	push   ecx
c0010972:	52                   	push   edx
c0010973:	50                   	push   eax
c0010974:	e8 d9 9f ff ff       	call   c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	31 c0                	xor    eax,eax
c001097e:	31 d2                	xor    edx,edx
c0010980:	83 c4 0c             	add    esp,0xc
c0010983:	c3                   	ret    

c0010984 <SysReadDir(regs*)>:
c0010984:	53                   	push   ebx
c0010985:	83 ec 18             	sub    esp,0x18
c0010988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001098c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001098f:	83 f8 02             	cmp    eax,0x2
c0010992:	76 61                	jbe    c00109f5 <SysReadDir(regs*)+0x71>
c0010994:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001099b:	77 49                	ja     c00109e6 <SysReadDir(regs*)+0x62>
c001099d:	83 ec 0c             	sub    esp,0xc
c00109a0:	50                   	push   eax
c00109a1:	e8 89 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c00109a6:	83 c4 10             	add    esp,0x10
c00109a9:	85 c0                	test   eax,eax
c00109ab:	74 39                	je     c00109e6 <SysReadDir(regs*)+0x62>
c00109ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00109b5:	83 ec 0c             	sub    esp,0xc
c00109b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00109ba:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00109be:	51                   	push   ecx
c00109bf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00109c2:	51                   	push   ecx
c00109c3:	6a 00                	push   0x0
c00109c5:	68 10 01 00 00       	push   0x110
c00109ca:	50                   	push   eax
c00109cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109ce:	83 c4 20             	add    esp,0x20
c00109d1:	85 c0                	test   eax,eax
c00109d3:	74 29                	je     c00109fe <SysReadDir(regs*)+0x7a>
c00109d5:	83 f8 07             	cmp    eax,0x7
c00109d8:	74 1b                	je     c00109f5 <SysReadDir(regs*)+0x71>
c00109da:	b8 02 00 00 00       	mov    eax,0x2
c00109df:	31 d2                	xor    edx,edx
c00109e1:	83 c4 18             	add    esp,0x18
c00109e4:	5b                   	pop    ebx
c00109e5:	c3                   	ret    
c00109e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109f0:	83 c4 18             	add    esp,0x18
c00109f3:	5b                   	pop    ebx
c00109f4:	c3                   	ret    
c00109f5:	b8 01 00 00 00       	mov    eax,0x1
c00109fa:	31 d2                	xor    edx,edx
c00109fc:	eb e3                	jmp    c00109e1 <SysReadDir(regs*)+0x5d>
c00109fe:	31 c0                	xor    eax,eax
c0010a00:	31 d2                	xor    edx,edx
c0010a02:	eb dd                	jmp    c00109e1 <SysReadDir(regs*)+0x5d>

c0010a04 <SysIsATTY(regs*)>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a0e:	83 f8 02             	cmp    eax,0x2
c0010a11:	76 07                	jbe    c0010a1a <SysIsATTY(regs*)+0x16>
c0010a13:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a18:	75 28                	jne    c0010a42 <SysIsATTY(regs*)+0x3e>
c0010a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a28:	85 c0                	test   eax,eax
c0010a2a:	74 26                	je     c0010a52 <SysIsATTY(regs*)+0x4e>
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a31:	50                   	push   eax
c0010a32:	ff 12                	call   DWORD PTR [edx]
c0010a34:	31 d2                	xor    edx,edx
c0010a36:	25 ff 00 00 00       	and    eax,0xff
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	83 c4 0c             	add    esp,0xc
c0010a41:	c3                   	ret    
c0010a42:	83 ec 0c             	sub    esp,0xc
c0010a45:	50                   	push   eax
c0010a46:	e8 e4 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	85 c0                	test   eax,eax
c0010a50:	75 da                	jne    c0010a2c <SysIsATTY(regs*)+0x28>
c0010a52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a5c:	83 c4 0c             	add    esp,0xc
c0010a5f:	c3                   	ret    

c0010a60 <SysSeek(regs*)>:
c0010a60:	53                   	push   ebx
c0010a61:	83 ec 08             	sub    esp,0x8
c0010a64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a6b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a6e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a74:	77 34                	ja     c0010aaa <SysSeek(regs*)+0x4a>
c0010a76:	83 ec 0c             	sub    esp,0xc
c0010a79:	50                   	push   eax
c0010a7a:	e8 b0 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a7f:	83 c4 0c             	add    esp,0xc
c0010a82:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a85:	31 db                	xor    ebx,ebx
c0010a87:	53                   	push   ebx
c0010a88:	51                   	push   ecx
c0010a89:	50                   	push   eax
c0010a8a:	e8 eb a1 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0010a8f:	83 c4 10             	add    esp,0x10
c0010a92:	85 c0                	test   eax,eax
c0010a94:	0f 95 c0             	setne  al
c0010a97:	31 d2                	xor    edx,edx
c0010a99:	25 ff 00 00 00       	and    eax,0xff
c0010a9e:	f7 d8                	neg    eax
c0010aa0:	83 d2 00             	adc    edx,0x0
c0010aa3:	83 c4 08             	add    esp,0x8
c0010aa6:	f7 da                	neg    edx
c0010aa8:	5b                   	pop    ebx
c0010aa9:	c3                   	ret    
c0010aaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ab4:	83 c4 08             	add    esp,0x8
c0010ab7:	5b                   	pop    ebx
c0010ab8:	c3                   	ret    

c0010ab9 <SysTell(regs*)>:
c0010ab9:	53                   	push   ebx
c0010aba:	83 ec 08             	sub    esp,0x8
c0010abd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ac1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ac4:	83 f8 02             	cmp    eax,0x2
c0010ac7:	76 50                	jbe    c0010b19 <SysTell(regs*)+0x60>
c0010ac9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ace:	76 19                	jbe    c0010ae9 <SysTell(regs*)+0x30>
c0010ad0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ad3:	31 d2                	xor    edx,edx
c0010ad5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010adb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ae2:	31 c0                	xor    eax,eax
c0010ae4:	83 c4 08             	add    esp,0x8
c0010ae7:	5b                   	pop    ebx
c0010ae8:	c3                   	ret    
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	50                   	push   eax
c0010aed:	e8 3d 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010af2:	5a                   	pop    edx
c0010af3:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010af6:	59                   	pop    ecx
c0010af7:	53                   	push   ebx
c0010af8:	50                   	push   eax
c0010af9:	e8 d2 a1 ff ff       	call   c000acd0 <File::tell(unsigned long long*)>
c0010afe:	83 c4 10             	add    esp,0x10
c0010b01:	85 c0                	test   eax,eax
c0010b03:	0f 95 c0             	setne  al
c0010b06:	31 d2                	xor    edx,edx
c0010b08:	25 ff 00 00 00       	and    eax,0xff
c0010b0d:	f7 d8                	neg    eax
c0010b0f:	83 d2 00             	adc    edx,0x0
c0010b12:	83 c4 08             	add    esp,0x8
c0010b15:	f7 da                	neg    edx
c0010b17:	5b                   	pop    ebx
c0010b18:	c3                   	ret    
c0010b19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b23:	83 c4 08             	add    esp,0x8
c0010b26:	5b                   	pop    ebx
c0010b27:	c3                   	ret    

c0010b28 <SysSize(regs*)>:
c0010b28:	53                   	push   ebx
c0010b29:	83 ec 18             	sub    esp,0x18
c0010b2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b33:	83 f8 02             	cmp    eax,0x2
c0010b36:	76 56                	jbe    c0010b8e <SysSize(regs*)+0x66>
c0010b38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b3d:	76 19                	jbe    c0010b58 <SysSize(regs*)+0x30>
c0010b3f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b42:	31 d2                	xor    edx,edx
c0010b44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b51:	31 c0                	xor    eax,eax
c0010b53:	83 c4 18             	add    esp,0x18
c0010b56:	5b                   	pop    ebx
c0010b57:	c3                   	ret    
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	50                   	push   eax
c0010b5c:	e8 ce 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b68:	52                   	push   edx
c0010b69:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b6c:	52                   	push   edx
c0010b6d:	50                   	push   eax
c0010b6e:	e8 f5 a2 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	85 c0                	test   eax,eax
c0010b78:	0f 95 c0             	setne  al
c0010b7b:	31 d2                	xor    edx,edx
c0010b7d:	25 ff 00 00 00       	and    eax,0xff
c0010b82:	f7 d8                	neg    eax
c0010b84:	83 d2 00             	adc    edx,0x0
c0010b87:	83 c4 18             	add    esp,0x18
c0010b8a:	f7 da                	neg    edx
c0010b8c:	5b                   	pop    ebx
c0010b8d:	c3                   	ret    
c0010b8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b98:	83 c4 18             	add    esp,0x18
c0010b9b:	5b                   	pop    ebx
c0010b9c:	c3                   	ret    

c0010b9d <SysSizeFromFilename(regs*)>:
c0010b9d:	57                   	push   edi
c0010b9e:	56                   	push   esi
c0010b9f:	53                   	push   ebx
c0010ba0:	83 ec 20             	sub    esp,0x20
c0010ba3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ba7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010baa:	83 fb 02             	cmp    ebx,0x2
c0010bad:	0f 86 8c 00 00 00    	jbe    c0010c3f <SysSizeFromFilename(regs*)+0xa2>
c0010bb3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010bb9:	76 1b                	jbe    c0010bd6 <SysSizeFromFilename(regs*)+0x39>
c0010bbb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010bbe:	31 d2                	xor    edx,edx
c0010bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bcd:	83 c4 20             	add    esp,0x20
c0010bd0:	31 c0                	xor    eax,eax
c0010bd2:	5b                   	pop    ebx
c0010bd3:	5e                   	pop    esi
c0010bd4:	5f                   	pop    edi
c0010bd5:	c3                   	ret    
c0010bd6:	83 ec 0c             	sub    esp,0xc
c0010bd9:	68 14 01 00 00       	push   0x114
c0010bde:	e8 d6 6b ff ff       	call   c00077b9 <malloc>
c0010be3:	83 c4 0c             	add    esp,0xc
c0010be6:	89 c7                	mov    edi,eax
c0010be8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf0:	50                   	push   eax
c0010bf1:	53                   	push   ebx
c0010bf2:	57                   	push   edi
c0010bf3:	e8 04 9f ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0010bf8:	83 c4 0c             	add    esp,0xc
c0010bfb:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bff:	50                   	push   eax
c0010c00:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c03:	52                   	push   edx
c0010c04:	57                   	push   edi
c0010c05:	e8 5e a2 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c0010c0a:	83 c4 10             	add    esp,0x10
c0010c0d:	85 ff                	test   edi,edi
c0010c0f:	74 14                	je     c0010c25 <SysSizeFromFilename(regs*)+0x88>
c0010c11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c15:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	57                   	push   edi
c0010c1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c25:	85 c0                	test   eax,eax
c0010c27:	0f 95 c0             	setne  al
c0010c2a:	31 d2                	xor    edx,edx
c0010c2c:	25 ff 00 00 00       	and    eax,0xff
c0010c31:	f7 d8                	neg    eax
c0010c33:	83 d2 00             	adc    edx,0x0
c0010c36:	83 c4 20             	add    esp,0x20
c0010c39:	f7 da                	neg    edx
c0010c3b:	5b                   	pop    ebx
c0010c3c:	5e                   	pop    esi
c0010c3d:	5f                   	pop    edi
c0010c3e:	c3                   	ret    
c0010c3f:	83 c4 20             	add    esp,0x20
c0010c42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c47:	5b                   	pop    ebx
c0010c48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c4d:	5e                   	pop    esi
c0010c4e:	5f                   	pop    edi
c0010c4f:	c3                   	ret    

c0010c50 <SysClose(regs*)>:
c0010c50:	53                   	push   ebx
c0010c51:	83 ec 08             	sub    esp,0x8
c0010c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c5b:	83 f8 02             	cmp    eax,0x2
c0010c5e:	76 41                	jbe    c0010ca1 <SysClose(regs*)+0x51>
c0010c60:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c66:	83 fa 01             	cmp    edx,0x1
c0010c69:	76 2d                	jbe    c0010c98 <SysClose(regs*)+0x48>
c0010c6b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c70:	77 2f                	ja     c0010ca1 <SysClose(regs*)+0x51>
c0010c72:	83 ec 0c             	sub    esp,0xc
c0010c75:	50                   	push   eax
c0010c76:	e8 b4 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010c7b:	89 c3                	mov    ebx,eax
c0010c7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c80:	e8 95 9f ff ff       	call   c000ac1a <File::close()>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	85 db                	test   ebx,ebx
c0010c8a:	74 0c                	je     c0010c98 <SysClose(regs*)+0x48>
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c91:	53                   	push   ebx
c0010c92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c95:	83 c4 10             	add    esp,0x10
c0010c98:	31 c0                	xor    eax,eax
c0010c9a:	31 d2                	xor    edx,edx
c0010c9c:	83 c4 08             	add    esp,0x8
c0010c9f:	5b                   	pop    ebx
c0010ca0:	c3                   	ret    
c0010ca1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ca6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cab:	83 c4 08             	add    esp,0x8
c0010cae:	5b                   	pop    ebx
c0010caf:	c3                   	ret    

c0010cb0 <SysOpenDir(regs*)>:
c0010cb0:	57                   	push   edi
c0010cb1:	56                   	push   esi
c0010cb2:	53                   	push   ebx
c0010cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cba:	85 c0                	test   eax,eax
c0010cbc:	0f 84 e7 00 00 00    	je     c0010da9 <SysOpenDir(regs*)+0xf9>
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010cc8:	56                   	push   esi
c0010cc9:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010ccc:	57                   	push   edi
c0010ccd:	50                   	push   eax
c0010cce:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010cd1:	50                   	push   eax
c0010cd2:	68 94 e8 01 c0       	push   0xc001e894
c0010cd7:	e8 ab 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010cdc:	83 c4 18             	add    esp,0x18
c0010cdf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ce2:	50                   	push   eax
c0010ce3:	68 ba e8 01 c0       	push   0xc001e8ba
c0010ce8:	e8 9a 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010ced:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cf4:	e8 c0 6a ff ff       	call   c00077b9 <malloc>
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	89 c6                	mov    esi,eax
c0010cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d03:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d06:	50                   	push   eax
c0010d07:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d0a:	50                   	push   eax
c0010d0b:	56                   	push   esi
c0010d0c:	e8 15 a3 ff ff       	call   c000b026 <Directory::Directory(char const*, Process*)>
c0010d11:	c7 04 24 ae f6 01 c0 	mov    DWORD PTR [esp],0xc001f6ae
c0010d18:	e8 6a 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	85 f6                	test   esi,esi
c0010d22:	0f 84 8f 00 00 00    	je     c0010db7 <SysOpenDir(regs*)+0x107>
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	68 cf e8 01 c0       	push   0xc001e8cf
c0010d30:	e8 52 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d35:	58                   	pop    eax
c0010d36:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d39:	5a                   	pop    edx
c0010d3a:	51                   	push   ecx
c0010d3b:	68 d3 e8 01 c0       	push   0xc001e8d3
c0010d40:	e8 42 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d45:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d48:	e8 99 a3 ff ff       	call   c000b0e6 <Directory::open()>
c0010d4d:	c7 04 24 cb d6 01 c0 	mov    DWORD PTR [esp],0xc001d6cb
c0010d54:	89 c7                	mov    edi,eax
c0010d56:	e8 2c 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	85 ff                	test   edi,edi
c0010d60:	75 37                	jne    c0010d99 <SysOpenDir(regs*)+0xe9>
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	68 e4 e8 01 c0       	push   0xc001e8e4
c0010d6a:	e8 18 98 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d72:	e8 c3 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010d77:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d7a:	89 02                	mov    DWORD PTR [edx],eax
c0010d7c:	c1 f8 1f             	sar    eax,0x1f
c0010d7f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d82:	c7 04 24 e8 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8e8
c0010d89:	e8 f9 97 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010d8e:	83 c4 10             	add    esp,0x10
c0010d91:	31 c0                	xor    eax,eax
c0010d93:	5b                   	pop    ebx
c0010d94:	31 d2                	xor    edx,edx
c0010d96:	5e                   	pop    esi
c0010d97:	5f                   	pop    edi
c0010d98:	c3                   	ret    
c0010d99:	83 ec 0c             	sub    esp,0xc
c0010d9c:	68 e0 e8 01 c0       	push   0xc001e8e0
c0010da1:	e8 e1 97 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	5b                   	pop    ebx
c0010daa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010daf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010db4:	5e                   	pop    esi
c0010db5:	5f                   	pop    edi
c0010db6:	c3                   	ret    
c0010db7:	83 ec 0c             	sub    esp,0xc
c0010dba:	68 cb e8 01 c0       	push   0xc001e8cb
c0010dbf:	eb e0                	jmp    c0010da1 <SysOpenDir(regs*)+0xf1>

c0010dc1 <SysCloseDir(regs*)>:
c0010dc1:	53                   	push   ebx
c0010dc2:	83 ec 08             	sub    esp,0x8
c0010dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dcc:	8d 50 fd             	lea    edx,[eax-0x3]
c0010dcf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010dd5:	77 2f                	ja     c0010e06 <SysCloseDir(regs*)+0x45>
c0010dd7:	83 ec 0c             	sub    esp,0xc
c0010dda:	50                   	push   eax
c0010ddb:	e8 4f 83 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010de0:	89 c3                	mov    ebx,eax
c0010de2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010de5:	e8 58 a3 ff ff       	call   c000b142 <Directory::close()>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	85 db                	test   ebx,ebx
c0010def:	74 0c                	je     c0010dfd <SysCloseDir(regs*)+0x3c>
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df6:	53                   	push   ebx
c0010df7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	31 c0                	xor    eax,eax
c0010dff:	31 d2                	xor    edx,edx
c0010e01:	83 c4 08             	add    esp,0x8
c0010e04:	5b                   	pop    ebx
c0010e05:	c3                   	ret    
c0010e06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e10:	83 c4 08             	add    esp,0x8
c0010e13:	5b                   	pop    ebx
c0010e14:	c3                   	ret    

c0010e15 <SysMakeDir(regs*)>:
c0010e15:	56                   	push   esi
c0010e16:	53                   	push   ebx
c0010e17:	83 ec 10             	sub    esp,0x10
c0010e1a:	68 14 01 00 00       	push   0x114
c0010e1f:	e8 95 69 ff ff       	call   c00077b9 <malloc>
c0010e24:	83 c4 0c             	add    esp,0xc
c0010e27:	89 c3                	mov    ebx,eax
c0010e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e2e:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e31:	56                   	push   esi
c0010e32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e36:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e39:	50                   	push   eax
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 e6 a1 ff ff       	call   c000b026 <Directory::Directory(char const*, Process*)>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	85 db                	test   ebx,ebx
c0010e45:	74 32                	je     c0010e79 <SysMakeDir(regs*)+0x64>
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	53                   	push   ebx
c0010e4b:	e8 76 a4 ff ff       	call   c000b2c6 <Directory::create()>
c0010e50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e53:	89 c6                	mov    esi,eax
c0010e55:	e8 e8 a2 ff ff       	call   c000b142 <Directory::close()>
c0010e5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	31 c0                	xor    eax,eax
c0010e67:	59                   	pop    ecx
c0010e68:	85 f6                	test   esi,esi
c0010e6a:	5b                   	pop    ebx
c0010e6b:	0f 95 c0             	setne  al
c0010e6e:	5e                   	pop    esi
c0010e6f:	31 d2                	xor    edx,edx
c0010e71:	f7 d8                	neg    eax
c0010e73:	83 d2 00             	adc    edx,0x0
c0010e76:	f7 da                	neg    edx
c0010e78:	c3                   	ret    
c0010e79:	59                   	pop    ecx
c0010e7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e84:	5b                   	pop    ebx
c0010e85:	5e                   	pop    esi
c0010e86:	c3                   	ret    

c0010e87 <SysWait(regs*)>:
c0010e87:	83 ec 10             	sub    esp,0x10
c0010e8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e8e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e91:	52                   	push   edx
c0010e92:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e95:	51                   	push   ecx
c0010e96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e99:	50                   	push   eax
c0010e9a:	e8 89 2b 00 00       	call   c0013a28 <waitTask(int, int*, int)>
c0010e9f:	83 c4 1c             	add    esp,0x1c
c0010ea2:	99                   	cdq    
c0010ea3:	c3                   	ret    

c0010ea4 <SysNotImpl(regs*)>:
c0010ea4:	83 ec 18             	sub    esp,0x18
c0010ea7:	68 ec e8 01 c0       	push   0xc001e8ec
c0010eac:	e8 56 f3 ff ff       	call   c0010207 <KePanic(char const*)>
c0010eb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ebb:	83 c4 1c             	add    esp,0x1c
c0010ebe:	c3                   	ret    

c0010ebf <SysPanic(regs*)>:
c0010ebf:	83 ec 18             	sub    esp,0x18
c0010ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ec9:	50                   	push   eax
c0010eca:	e8 38 f3 ff ff       	call   c0010207 <KePanic(char const*)>
c0010ecf:	b8 01 00 00 00       	mov    eax,0x1
c0010ed4:	31 d2                	xor    edx,edx
c0010ed6:	83 c4 1c             	add    esp,0x1c
c0010ed9:	c3                   	ret    

c0010eda <SysRmdir(regs*)>:
c0010eda:	56                   	push   esi
c0010edb:	53                   	push   ebx
c0010edc:	83 ec 20             	sub    esp,0x20
c0010edf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ee3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ee6:	68 14 01 00 00       	push   0x114
c0010eeb:	e8 c9 68 ff ff       	call   c00077b9 <malloc>
c0010ef0:	83 c4 0c             	add    esp,0xc
c0010ef3:	89 c3                	mov    ebx,eax
c0010ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010efa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efd:	50                   	push   eax
c0010efe:	56                   	push   esi
c0010eff:	53                   	push   ebx
c0010f00:	e8 f7 9b ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0010f05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f08:	e8 27 9e ff ff       	call   c000ad34 <File::unlink()>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	85 db                	test   ebx,ebx
c0010f12:	74 14                	je     c0010f28 <SysRmdir(regs*)+0x4e>
c0010f14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f18:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f1a:	83 ec 0c             	sub    esp,0xc
c0010f1d:	53                   	push   ebx
c0010f1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	0f 95 c0             	setne  al
c0010f2d:	31 d2                	xor    edx,edx
c0010f2f:	25 ff 00 00 00       	and    eax,0xff
c0010f34:	f7 d8                	neg    eax
c0010f36:	83 d2 00             	adc    edx,0x0
c0010f39:	83 c4 14             	add    esp,0x14
c0010f3c:	f7 da                	neg    edx
c0010f3e:	5b                   	pop    ebx
c0010f3f:	5e                   	pop    esi
c0010f40:	c3                   	ret    

c0010f41 <SysUnlink(regs*)>:
c0010f41:	56                   	push   esi
c0010f42:	53                   	push   ebx
c0010f43:	83 ec 20             	sub    esp,0x20
c0010f46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f4a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f4d:	68 14 01 00 00       	push   0x114
c0010f52:	e8 62 68 ff ff       	call   c00077b9 <malloc>
c0010f57:	83 c4 0c             	add    esp,0xc
c0010f5a:	89 c3                	mov    ebx,eax
c0010f5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f64:	50                   	push   eax
c0010f65:	56                   	push   esi
c0010f66:	53                   	push   ebx
c0010f67:	e8 90 9b ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0010f6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6f:	e8 c0 9d ff ff       	call   c000ad34 <File::unlink()>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	85 db                	test   ebx,ebx
c0010f79:	74 14                	je     c0010f8f <SysUnlink(regs*)+0x4e>
c0010f7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f81:	83 ec 0c             	sub    esp,0xc
c0010f84:	53                   	push   ebx
c0010f85:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f8f:	85 c0                	test   eax,eax
c0010f91:	0f 95 c0             	setne  al
c0010f94:	31 d2                	xor    edx,edx
c0010f96:	25 ff 00 00 00       	and    eax,0xff
c0010f9b:	f7 d8                	neg    eax
c0010f9d:	83 d2 00             	adc    edx,0x0
c0010fa0:	83 c4 14             	add    esp,0x14
c0010fa3:	f7 da                	neg    edx
c0010fa5:	5b                   	pop    ebx
c0010fa6:	5e                   	pop    esi
c0010fa7:	c3                   	ret    

c0010fa8 <SysGetArgv(regs*)>:
c0010fa8:	83 ec 0c             	sub    esp,0xc
c0010fab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010faf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fb2:	85 c0                	test   eax,eax
c0010fb4:	78 2c                	js     c0010fe2 <SysGetArgv(regs*)+0x3a>
c0010fb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fbc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fbf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fc5:	7d 1b                	jge    c0010fe2 <SysGetArgv(regs*)+0x3a>
c0010fc7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fce:	85 c0                	test   eax,eax
c0010fd0:	74 18                	je     c0010fea <SysGetArgv(regs*)+0x42>
c0010fd2:	83 ec 08             	sub    esp,0x8
c0010fd5:	50                   	push   eax
c0010fd6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fd9:	50                   	push   eax
c0010fda:	e8 21 f6 fe ff       	call   c0000600 <strcpy>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	31 c0                	xor    eax,eax
c0010fe4:	31 d2                	xor    edx,edx
c0010fe6:	83 c4 0c             	add    esp,0xc
c0010fe9:	c3                   	ret    
c0010fea:	b8 01 00 00 00       	mov    eax,0x1
c0010fef:	31 d2                	xor    edx,edx
c0010ff1:	83 c4 0c             	add    esp,0xc
c0010ff4:	c3                   	ret    

c0010ff5 <SysUSleep(regs*)>:
c0010ff5:	83 ec 1c             	sub    esp,0x1c
c0010ff8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ffc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fff:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011002:	6a 00                	push   0x0
c0011004:	6a 64                	push   0x64
c0011006:	52                   	push   edx
c0011007:	50                   	push   eax
c0011008:	e8 53 b1 00 00       	call   c001c160 <__udivdi3>
c001100d:	83 c4 14             	add    esp,0x14
c0011010:	50                   	push   eax
c0011011:	e8 e6 2a 00 00       	call   c0013afc <milliTenthSleep(unsigned int)>
c0011016:	31 c0                	xor    eax,eax
c0011018:	31 d2                	xor    edx,edx
c001101a:	83 c4 1c             	add    esp,0x1c
c001101d:	c3                   	ret    

c001101e <SysSpawn(regs*)>:
c001101e:	56                   	push   esi
c001101f:	53                   	push   ebx
c0011020:	50                   	push   eax
c0011021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011025:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011028:	85 c0                	test   eax,eax
c001102a:	75 08                	jne    c0011034 <SysSpawn(regs*)+0x16>
c001102c:	59                   	pop    ecx
c001102d:	31 c0                	xor    eax,eax
c001102f:	31 d2                	xor    edx,edx
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	c3                   	ret    
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	68 24 07 00 00       	push   0x724
c001103c:	e8 78 67 ff ff       	call   c00077b9 <malloc>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	89 c6                	mov    esi,eax
c0011046:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011049:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001104c:	85 c0                	test   eax,eax
c001104e:	75 33                	jne    c0011083 <SysSpawn(regs*)+0x65>
c0011050:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011055:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011058:	52                   	push   edx
c0011059:	50                   	push   eax
c001105a:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001105d:	53                   	push   ebx
c001105e:	56                   	push   esi
c001105f:	e8 44 21 00 00       	call   c00131a8 <Process::Process(char const*, Process*, char**)>
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001106e:	75 bc                	jne    c001102c <SysSpawn(regs*)+0xe>
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	56                   	push   esi
c0011074:	e8 5b 26 00 00       	call   c00136d4 <Process::createUserThread()>
c0011079:	8b 06                	mov    eax,DWORD PTR [esi]
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	99                   	cdq    
c001107f:	59                   	pop    ecx
c0011080:	5b                   	pop    ebx
c0011081:	5e                   	pop    esi
c0011082:	c3                   	ret    
c0011083:	31 c0                	xor    eax,eax
c0011085:	eb d1                	jmp    c0011058 <SysSpawn(regs*)+0x3a>

c0011087 <SysGetEnv(regs*)>:
c0011087:	57                   	push   edi
c0011088:	56                   	push   esi
c0011089:	53                   	push   ebx
c001108a:	83 ec 1c             	sub    esp,0x1c
c001108d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011096:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011099:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001109c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001109f:	50                   	push   eax
c00110a0:	e8 1a f0 ff ff       	call   c00100bf <Krnl::getProcessTotalEnvCount(Process*)>
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	39 c7                	cmp    edi,eax
c00110aa:	7c 14                	jl     c00110c0 <SysGetEnv(regs*)+0x39>
c00110ac:	85 f6                	test   esi,esi
c00110ae:	75 0b                	jne    c00110bb <SysGetEnv(regs*)+0x34>
c00110b0:	83 c4 10             	add    esp,0x10
c00110b3:	31 c0                	xor    eax,eax
c00110b5:	5b                   	pop    ebx
c00110b6:	31 d2                	xor    edx,edx
c00110b8:	5e                   	pop    esi
c00110b9:	5f                   	pop    edi
c00110ba:	c3                   	ret    
c00110bb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110be:	eb f0                	jmp    c00110b0 <SysGetEnv(regs*)+0x29>
c00110c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110c4:	52                   	push   edx
c00110c5:	57                   	push   edi
c00110c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110cc:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110cf:	51                   	push   ecx
c00110d0:	50                   	push   eax
c00110d1:	e8 09 f0 ff ff       	call   c00100df <Krnl::getProcessEnvPair(Process*, int)>
c00110d6:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110e1:	83 c4 0c             	add    esp,0xc
c00110e4:	85 db                	test   ebx,ebx
c00110e6:	75 23                	jne    c001110b <SysGetEnv(regs*)+0x84>
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	50                   	push   eax
c00110ec:	e8 4f f4 fe ff       	call   c0000540 <strlen>
c00110f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f4:	89 c3                	mov    ebx,eax
c00110f6:	e8 45 f4 fe ff       	call   c0000540 <strlen>
c00110fb:	31 d2                	xor    edx,edx
c00110fd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	5b                   	pop    ebx
c0011108:	5e                   	pop    esi
c0011109:	5f                   	pop    edi
c001110a:	c3                   	ret    
c001110b:	83 ec 08             	sub    esp,0x8
c001110e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011111:	50                   	push   eax
c0011112:	56                   	push   esi
c0011113:	e8 e8 f4 fe ff       	call   c0000600 <strcpy>
c0011118:	58                   	pop    eax
c0011119:	5a                   	pop    edx
c001111a:	68 06 e9 01 c0       	push   0xc001e906
c001111f:	56                   	push   esi
c0011120:	e8 9b f6 fe ff       	call   c00007c0 <strcat>
c0011125:	59                   	pop    ecx
c0011126:	5b                   	pop    ebx
c0011127:	57                   	push   edi
c0011128:	56                   	push   esi
c0011129:	e8 92 f6 fe ff       	call   c00007c0 <strcat>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	e9 7a ff ff ff       	jmp    c00110b0 <SysGetEnv(regs*)+0x29>

c0011136 <SysSetFatAttrib(regs*)>:
c0011136:	57                   	push   edi
c0011137:	56                   	push   esi
c0011138:	53                   	push   ebx
c0011139:	83 ec 1c             	sub    esp,0x1c
c001113c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011140:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011143:	68 14 01 00 00       	push   0x114
c0011148:	e8 6c 66 ff ff       	call   c00077b9 <malloc>
c001114d:	83 c4 0c             	add    esp,0xc
c0011150:	89 c3                	mov    ebx,eax
c0011152:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011157:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001115a:	50                   	push   eax
c001115b:	57                   	push   edi
c001115c:	53                   	push   ebx
c001115d:	e8 9a 99 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0011162:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011165:	83 c4 0c             	add    esp,0xc
c0011168:	0f b6 d4             	movzx  edx,ah
c001116b:	25 ff 00 00 00       	and    eax,0xff
c0011170:	52                   	push   edx
c0011171:	50                   	push   eax
c0011172:	53                   	push   ebx
c0011173:	e8 56 9c ff ff       	call   c000adce <File::chfatattr(unsigned char, unsigned char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	85 db                	test   ebx,ebx
c001117d:	74 14                	je     c0011193 <SysSetFatAttrib(regs*)+0x5d>
c001117f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011183:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011185:	83 ec 0c             	sub    esp,0xc
c0011188:	53                   	push   ebx
c0011189:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011193:	85 c0                	test   eax,eax
c0011195:	0f 95 c0             	setne  al
c0011198:	31 d2                	xor    edx,edx
c001119a:	25 ff 00 00 00       	and    eax,0xff
c001119f:	f7 d8                	neg    eax
c00111a1:	83 d2 00             	adc    edx,0x0
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	f7 da                	neg    edx
c00111a9:	5b                   	pop    ebx
c00111aa:	5e                   	pop    esi
c00111ab:	5f                   	pop    edi
c00111ac:	c3                   	ret    

c00111ad <SysPipe(regs*)>:
c00111ad:	57                   	push   edi
c00111ae:	56                   	push   esi
c00111af:	53                   	push   ebx
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111ba:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111bd:	6a 20                	push   0x20
c00111bf:	e8 f5 65 ff ff       	call   c00077b9 <malloc>
c00111c4:	89 c3                	mov    ebx,eax
c00111c6:	58                   	pop    eax
c00111c7:	5a                   	pop    edx
c00111c8:	68 00 50 00 00       	push   0x5000
c00111cd:	53                   	push   ebx
c00111ce:	e8 eb 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c00111d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d6:	e8 5f 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111db:	89 07                	mov    DWORD PTR [edi],eax
c00111dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111e0:	e8 55 7c ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	89 06                	mov    DWORD PTR [esi],eax
c00111ea:	31 d2                	xor    edx,edx
c00111ec:	5b                   	pop    ebx
c00111ed:	31 c0                	xor    eax,eax
c00111ef:	5e                   	pop    esi
c00111f0:	5f                   	pop    edi
c00111f1:	c3                   	ret    

c00111f2 <SysGetUnixTime(regs*)>:
c00111f2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00111f7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011201:	e9 04 a3 ff ff       	jmp    c000b50a <Clock::timeInSecondsLocal()>

c0011206 <string_ends_with(char const*, char const*)>:
c0011206:	57                   	push   edi
c0011207:	56                   	push   esi
c0011208:	53                   	push   ebx
c0011209:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001120d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011211:	83 ec 0c             	sub    esp,0xc
c0011214:	53                   	push   ebx
c0011215:	e8 26 f3 fe ff       	call   c0000540 <strlen>
c001121a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001121d:	89 c6                	mov    esi,eax
c001121f:	e8 1c f3 fe ff       	call   c0000540 <strlen>
c0011224:	83 c4 10             	add    esp,0x10
c0011227:	39 c6                	cmp    esi,eax
c0011229:	7d 06                	jge    c0011231 <string_ends_with(char const*, char const*)+0x2b>
c001122b:	5b                   	pop    ebx
c001122c:	31 c0                	xor    eax,eax
c001122e:	5e                   	pop    esi
c001122f:	5f                   	pop    edi
c0011230:	c3                   	ret    
c0011231:	83 ec 08             	sub    esp,0x8
c0011234:	29 c6                	sub    esi,eax
c0011236:	57                   	push   edi
c0011237:	01 f3                	add    ebx,esi
c0011239:	53                   	push   ebx
c001123a:	e8 a1 f4 fe ff       	call   c00006e0 <strcmp>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	85 c0                	test   eax,eax
c0011244:	5b                   	pop    ebx
c0011245:	0f 94 c0             	sete   al
c0011248:	5e                   	pop    esi
c0011249:	25 ff 00 00 00       	and    eax,0xff
c001124e:	5f                   	pop    edi
c001124f:	c3                   	ret    

c0011250 <SysOpen(regs*)>:
c0011250:	56                   	push   esi
c0011251:	53                   	push   ebx
c0011252:	81 ec 04 01 00 00    	sub    esp,0x104
c0011258:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001125f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011262:	85 d2                	test   edx,edx
c0011264:	0f 84 cc 01 00 00    	je     c0011436 <SysOpen(regs*)+0x1e6>
c001126a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001126d:	85 c0                	test   eax,eax
c001126f:	0f 84 c1 01 00 00    	je     c0011436 <SysOpen(regs*)+0x1e6>
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	50                   	push   eax
c0011279:	68 08 e9 01 c0       	push   0xc001e908
c001127e:	e8 04 93 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0011283:	83 c4 0c             	add    esp,0xc
c0011286:	68 15 e9 01 c0       	push   0xc001e915
c001128b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001128e:	50                   	push   eax
c001128f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011293:	56                   	push   esi
c0011294:	e8 b9 96 ff ff       	call   c000a952 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011299:	89 34 24             	mov    DWORD PTR [esp],esi
c001129c:	e8 9f f2 fe ff       	call   c0000540 <strlen>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	48                   	dec    eax
c00112a5:	74 1d                	je     c00112c4 <SysOpen(regs*)+0x74>
c00112a7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00112aa:	eb 0f                	jmp    c00112bb <SysOpen(regs*)+0x6b>
c00112ac:	80 fa 3a             	cmp    dl,0x3a
c00112af:	74 0f                	je     c00112c0 <SysOpen(regs*)+0x70>
c00112b1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00112b5:	48                   	dec    eax
c00112b6:	74 0c                	je     c00112c4 <SysOpen(regs*)+0x74>
c00112b8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00112bb:	80 fa 2e             	cmp    dl,0x2e
c00112be:	75 ec                	jne    c00112ac <SysOpen(regs*)+0x5c>
c00112c0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112c4:	83 ec 08             	sub    esp,0x8
c00112c7:	68 19 e9 01 c0       	push   0xc001e919
c00112cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112cf:	50                   	push   eax
c00112d0:	e8 31 ff ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	85 c0                	test   eax,eax
c00112da:	74 1d                	je     c00112f9 <SysOpen(regs*)+0xa9>
c00112dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112df:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ec:	81 c4 04 01 00 00    	add    esp,0x104
c00112f2:	31 c0                	xor    eax,eax
c00112f4:	31 d2                	xor    edx,edx
c00112f6:	5b                   	pop    ebx
c00112f7:	5e                   	pop    esi
c00112f8:	c3                   	ret    
c00112f9:	83 ec 08             	sub    esp,0x8
c00112fc:	68 1e e9 01 c0       	push   0xc001e91e
c0011301:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011304:	50                   	push   eax
c0011305:	e8 fc fe ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	85 c0                	test   eax,eax
c001130f:	75 cb                	jne    c00112dc <SysOpen(regs*)+0x8c>
c0011311:	83 ec 08             	sub    esp,0x8
c0011314:	68 1a e9 01 c0       	push   0xc001e91a
c0011319:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001131c:	50                   	push   eax
c001131d:	e8 be f3 fe ff       	call   c00006e0 <strcmp>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	85 c0                	test   eax,eax
c0011327:	74 b3                	je     c00112dc <SysOpen(regs*)+0x8c>
c0011329:	83 ec 08             	sub    esp,0x8
c001132c:	68 19 e9 01 c0       	push   0xc001e919
c0011331:	56                   	push   esi
c0011332:	e8 cf fe ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	85 c0                	test   eax,eax
c001133c:	75 9e                	jne    c00112dc <SysOpen(regs*)+0x8c>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	68 23 e9 01 c0       	push   0xc001e923
c0011346:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011349:	50                   	push   eax
c001134a:	e8 b7 fe ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	85 c0                	test   eax,eax
c0011354:	0f 85 ef 00 00 00    	jne    c0011449 <SysOpen(regs*)+0x1f9>
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 28 e9 01 c0       	push   0xc001e928
c0011362:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011365:	50                   	push   eax
c0011366:	e8 9b fe ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	85 c0                	test   eax,eax
c0011370:	0f 85 d3 00 00 00    	jne    c0011449 <SysOpen(regs*)+0x1f9>
c0011376:	83 ec 08             	sub    esp,0x8
c0011379:	68 24 e9 01 c0       	push   0xc001e924
c001137e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011381:	51                   	push   ecx
c0011382:	e8 59 f3 fe ff       	call   c00006e0 <strcmp>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	85 c0                	test   eax,eax
c001138c:	0f 84 b7 00 00 00    	je     c0011449 <SysOpen(regs*)+0x1f9>
c0011392:	83 ec 08             	sub    esp,0x8
c0011395:	68 23 e9 01 c0       	push   0xc001e923
c001139a:	56                   	push   esi
c001139b:	e8 66 fe ff ff       	call   c0011206 <string_ends_with(char const*, char const*)>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	85 c0                	test   eax,eax
c00113a5:	0f 85 9e 00 00 00    	jne    c0011449 <SysOpen(regs*)+0x1f9>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 14 01 00 00       	push   0x114
c00113b3:	e8 01 64 ff ff       	call   c00077b9 <malloc>
c00113b8:	83 c4 0c             	add    esp,0xc
c00113bb:	89 c6                	mov    esi,eax
c00113bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113c5:	50                   	push   eax
c00113c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113c9:	52                   	push   edx
c00113ca:	56                   	push   esi
c00113cb:	e8 2c 97 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	85 f6                	test   esi,esi
c00113d5:	74 5f                	je     c0011436 <SysOpen(regs*)+0x1e6>
c00113d7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113da:	89 d0                	mov    eax,edx
c00113dc:	25 ff 00 00 00       	and    eax,0xff
c00113e1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113e4:	89 d0                	mov    eax,edx
c00113e6:	83 e0 01             	and    eax,0x1
c00113e9:	f6 c2 02             	test   dl,0x2
c00113ec:	74 03                	je     c00113f1 <SysOpen(regs*)+0x1a1>
c00113ee:	83 c8 02             	or     eax,0x2
c00113f1:	f6 c2 04             	test   dl,0x4
c00113f4:	74 03                	je     c00113f9 <SysOpen(regs*)+0x1a9>
c00113f6:	83 c8 04             	or     eax,0x4
c00113f9:	f6 c2 08             	test   dl,0x8
c00113fc:	74 03                	je     c0011401 <SysOpen(regs*)+0x1b1>
c00113fe:	83 c8 0a             	or     eax,0xa
c0011401:	83 e2 10             	and    edx,0x10
c0011404:	74 03                	je     c0011409 <SysOpen(regs*)+0x1b9>
c0011406:	83 c8 12             	or     eax,0x12
c0011409:	83 ec 08             	sub    esp,0x8
c001140c:	50                   	push   eax
c001140d:	56                   	push   esi
c001140e:	e8 a9 97 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	85 c0                	test   eax,eax
c0011418:	75 1c                	jne    c0011436 <SysOpen(regs*)+0x1e6>
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	56                   	push   esi
c001141e:	e8 17 7a ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011423:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011426:	83 c4 10             	add    esp,0x10
c0011429:	89 02                	mov    DWORD PTR [edx],eax
c001142b:	c1 f8 1f             	sar    eax,0x1f
c001142e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011431:	e9 b6 fe ff ff       	jmp    c00112ec <SysOpen(regs*)+0x9c>
c0011436:	81 c4 04 01 00 00    	add    esp,0x104
c001143c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011441:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011446:	5b                   	pop    ebx
c0011447:	5e                   	pop    esi
c0011448:	c3                   	ret    
c0011449:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001144c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011452:	e9 8e fe ff ff       	jmp    c00112e5 <SysOpen(regs*)+0x95>

c0011457 <KeSystemCall(regs*, void*)>:
c0011457:	53                   	push   ebx
c0011458:	83 ec 10             	sub    esp,0x10
c001145b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001145f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011462:	68 2d e9 01 c0       	push   0xc001e92d
c0011467:	e8 1b 91 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001146c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001146f:	83 c4 10             	add    esp,0x10
c0011472:	83 f8 32             	cmp    eax,0x32
c0011475:	77 16                	ja     c001148d <KeSystemCall(regs*, void*)+0x36>
c0011477:	8b 14 85 c0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0540]
c001147e:	85 d2                	test   edx,edx
c0011480:	74 0b                	je     c001148d <KeSystemCall(regs*, void*)+0x36>
c0011482:	83 ec 0c             	sub    esp,0xc
c0011485:	53                   	push   ebx
c0011486:	ff d2                	call   edx
c0011488:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001148b:	eb 0d                	jmp    c001149a <KeSystemCall(regs*, void*)+0x43>
c001148d:	52                   	push   edx
c001148e:	52                   	push   edx
c001148f:	50                   	push   eax
c0011490:	68 3d e9 01 c0       	push   0xc001e93d
c0011495:	e8 ed 90 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001149a:	83 c4 10             	add    esp,0x10
c001149d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00114a2:	31 d2                	xor    edx,edx
c00114a4:	83 c4 08             	add    esp,0x8
c00114a7:	5b                   	pop    ebx
c00114a8:	c3                   	ret    

c00114a9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00114a9:	55                   	push   ebp
c00114aa:	57                   	push   edi
c00114ab:	56                   	push   esi
c00114ac:	53                   	push   ebx
c00114ad:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00114b3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00114ba:	8a 1e                	mov    bl,BYTE PTR [esi]
c00114bc:	8d 6e 01             	lea    ebp,[esi+0x1]
c00114bf:	80 fb 40             	cmp    bl,0x40
c00114c2:	75 1b                	jne    c00114df <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00114c4:	8a 16                	mov    dl,BYTE PTR [esi]
c00114c6:	84 d2                	test   dl,dl
c00114c8:	0f 84 f1 00 00 00    	je     c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ce:	8d 46 01             	lea    eax,[esi+0x1]
c00114d1:	80 fa 3a             	cmp    dl,0x3a
c00114d4:	74 04                	je     c00114da <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114d6:	89 c6                	mov    esi,eax
c00114d8:	eb ea                	jmp    c00114c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114dd:	89 c6                	mov    esi,eax
c00114df:	50                   	push   eax
c00114e0:	6a 40                	push   0x40
c00114e2:	6a 00                	push   0x0
c00114e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114e8:	50                   	push   eax
c00114e9:	e8 e2 ef fe ff       	call   c00004d0 <memset>
c00114ee:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114f5:	31 c0                	xor    eax,eax
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114fc:	84 c9                	test   cl,cl
c00114fe:	0f 84 bb 00 00 00    	je     c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011504:	3d c7 00 00 00       	cmp    eax,0xc7
c0011509:	0f 8f b0 00 00 00    	jg     c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001150f:	80 f9 0a             	cmp    cl,0xa
c0011512:	0f 85 98 00 00 00    	jne    c00115b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011518:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001151d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011521:	a8 df                	test   al,0xdf
c0011523:	0f 94 c1             	sete   cl
c0011526:	3c 23                	cmp    al,0x23
c0011528:	0f 94 c2             	sete   dl
c001152b:	08 d1                	or     cl,dl
c001152d:	75 4a                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001152f:	8d 50 f7             	lea    edx,[eax-0x9]
c0011532:	80 fa 01             	cmp    dl,0x1
c0011535:	76 42                	jbe    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011537:	3c 5b                	cmp    al,0x5b
c0011539:	75 42                	jne    c001157d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001153b:	80 fb 40             	cmp    bl,0x40
c001153e:	75 39                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011540:	83 ec 0c             	sub    esp,0xc
c0011543:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011547:	52                   	push   edx
c0011548:	e8 f3 ef fe ff       	call   c0000540 <strlen>
c001154d:	83 c4 10             	add    esp,0x10
c0011550:	83 f8 3f             	cmp    eax,0x3f
c0011553:	77 6a                	ja     c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011555:	50                   	push   eax
c0011556:	50                   	push   eax
c0011557:	8d 54 24 61          	lea    edx,[esp+0x61]
c001155b:	52                   	push   edx
c001155c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011560:	52                   	push   edx
c0011561:	e8 9a f0 fe ff       	call   c0000600 <strcpy>
c0011566:	58                   	pop    eax
c0011567:	8d 54 24 24          	lea    edx,[esp+0x24]
c001156b:	52                   	push   edx
c001156c:	e8 cf ef fe ff       	call   c0000540 <strlen>
c0011571:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011576:	83 c4 10             	add    esp,0x10
c0011579:	31 d2                	xor    edx,edx
c001157b:	eb 3a                	jmp    c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001157d:	80 fb 40             	cmp    bl,0x40
c0011580:	74 06                	je     c0011588 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011582:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011586:	eb 20                	jmp    c00115a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011588:	50                   	push   eax
c0011589:	50                   	push   eax
c001158a:	55                   	push   ebp
c001158b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001158f:	50                   	push   eax
c0011590:	e8 4b f1 fe ff       	call   c00006e0 <strcmp>
c0011595:	83 c4 10             	add    esp,0x10
c0011598:	85 c0                	test   eax,eax
c001159a:	75 dd                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001159c:	eb e4                	jmp    c0011582 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001159e:	8d 50 01             	lea    edx,[eax+0x1]
c00115a1:	80 f9 3d             	cmp    cl,0x3d
c00115a4:	74 1d                	je     c00115c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00115a6:	89 d0                	mov    eax,edx
c00115a8:	8a 08                	mov    cl,BYTE PTR [eax]
c00115aa:	84 c9                	test   cl,cl
c00115ac:	75 f0                	jne    c001159e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00115ae:	eb 0f                	jmp    c00115bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115b0:	8d 50 01             	lea    edx,[eax+0x1]
c00115b3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00115b7:	47                   	inc    edi
c00115b8:	89 d0                	mov    eax,edx
c00115ba:	e9 3b ff ff ff       	jmp    c00114fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00115bf:	31 c0                	xor    eax,eax
c00115c1:	eb 33                	jmp    c00115f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00115c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115ca:	50                   	push   eax
c00115cb:	50                   	push   eax
c00115cc:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115d0:	50                   	push   eax
c00115d1:	56                   	push   esi
c00115d2:	e8 09 f1 fe ff       	call   c00006e0 <strcmp>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	85 c0                	test   eax,eax
c00115dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115e0:	75 97                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115e2:	51                   	push   ecx
c00115e3:	51                   	push   ecx
c00115e4:	52                   	push   edx
c00115e5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115ec:	e8 0f f0 fe ff       	call   c0000600 <strcpy>
c00115f1:	83 c4 10             	add    esp,0x10
c00115f4:	b0 01                	mov    al,0x1
c00115f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115fc:	5b                   	pop    ebx
c00115fd:	5e                   	pop    esi
c00115fe:	5f                   	pop    edi
c00115ff:	5d                   	pop    ebp
c0011600:	c3                   	ret    

c0011601 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011601:	57                   	push   edi
c0011602:	56                   	push   esi
c0011603:	53                   	push   ebx
c0011604:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001160a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011611:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011618:	53                   	push   ebx
c0011619:	e8 22 ef fe ff       	call   c0000540 <strlen>
c001161e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011621:	89 c7                	mov    edi,eax
c0011623:	e8 18 ef fe ff       	call   c0000540 <strlen>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001162f:	3d ff 00 00 00       	cmp    eax,0xff
c0011634:	0f 87 d3 00 00 00    	ja     c001170d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001163a:	57                   	push   edi
c001163b:	57                   	push   edi
c001163c:	56                   	push   esi
c001163d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011641:	56                   	push   esi
c0011642:	e8 b9 ef fe ff       	call   c0000600 <strcpy>
c0011647:	58                   	pop    eax
c0011648:	5a                   	pop    edx
c0011649:	68 fa eb 01 c0       	push   0xc001ebfa
c001164e:	56                   	push   esi
c001164f:	e8 6c f1 fe ff       	call   c00007c0 <strcat>
c0011654:	59                   	pop    ecx
c0011655:	5f                   	pop    edi
c0011656:	53                   	push   ebx
c0011657:	56                   	push   esi
c0011658:	e8 63 f1 fe ff       	call   c00007c0 <strcat>
c001165d:	58                   	pop    eax
c001165e:	5a                   	pop    edx
c001165f:	68 51 e9 01 c0       	push   0xc001e951
c0011664:	56                   	push   esi
c0011665:	e8 56 f1 fe ff       	call   c00007c0 <strcat>
c001166a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011671:	e8 43 61 ff ff       	call   c00077b9 <malloc>
c0011676:	83 c4 0c             	add    esp,0xc
c0011679:	89 c3                	mov    ebx,eax
c001167b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011681:	56                   	push   esi
c0011682:	50                   	push   eax
c0011683:	e8 74 94 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	85 db                	test   ebx,ebx
c001168d:	74 7e                	je     c001170d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001168f:	51                   	push   ecx
c0011690:	51                   	push   ecx
c0011691:	6a 01                	push   0x1
c0011693:	53                   	push   ebx
c0011694:	e8 23 95 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	85 c0                	test   eax,eax
c001169e:	74 08                	je     c00116a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00116a0:	83 ec 0c             	sub    esp,0xc
c00116a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a5:	53                   	push   ebx
c00116a6:	eb 5f                	jmp    c0011707 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00116a8:	52                   	push   edx
c00116a9:	8d 44 24 17          	lea    eax,[esp+0x17]
c00116ad:	50                   	push   eax
c00116ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00116b2:	50                   	push   eax
c00116b3:	53                   	push   ebx
c00116b4:	e8 af 97 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c00116b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	89 c1                	mov    ecx,eax
c00116c2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00116c6:	74 31                	je     c00116f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116c8:	83 ec 0c             	sub    esp,0xc
c00116cb:	50                   	push   eax
c00116cc:	e8 e8 60 ff ff       	call   c00077b9 <malloc>
c00116d1:	89 c6                	mov    esi,eax
c00116d3:	58                   	pop    eax
c00116d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116da:	52                   	push   edx
c00116db:	56                   	push   esi
c00116dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116e4:	53                   	push   ebx
c00116e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116e8:	83 c4 20             	add    esp,0x20
c00116eb:	85 c0                	test   eax,eax
c00116ed:	75 0a                	jne    c00116f9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116f3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116f7:	74 18                	je     c0011711 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116f9:	83 ec 0c             	sub    esp,0xc
c00116fc:	53                   	push   ebx
c00116fd:	e8 18 95 ff ff       	call   c000ac1a <File::close()>
c0011702:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011704:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011707:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	31 c0                	xor    eax,eax
c001170f:	eb 3b                	jmp    c001174c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011711:	83 ec 0c             	sub    esp,0xc
c0011714:	53                   	push   ebx
c0011715:	e8 00 95 ff ff       	call   c000ac1a <File::close()>
c001171a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001171c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001171f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011722:	83 c4 0c             	add    esp,0xc
c0011725:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001172c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011733:	56                   	push   esi
c0011734:	e8 70 fd ff ff       	call   c00114a9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011739:	89 34 24             	mov    DWORD PTR [esp],esi
c001173c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011740:	e8 84 60 ff ff       	call   c00077c9 <free>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001174c:	81 c4 20 01 00 00    	add    esp,0x120
c0011752:	5b                   	pop    ebx
c0011753:	5e                   	pop    esi
c0011754:	5f                   	pop    edi
c0011755:	c3                   	ret    

c0011756 <Reg::getLine(char*, char*, char*)>:
c0011756:	57                   	push   edi
c0011757:	56                   	push   esi
c0011758:	53                   	push   ebx
c0011759:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001175d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011761:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011765:	57                   	push   edi
c0011766:	56                   	push   esi
c0011767:	53                   	push   ebx
c0011768:	68 56 e9 01 c0       	push   0xc001e956
c001176d:	e8 8f fe ff ff       	call   c0011601 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011772:	83 c4 10             	add    esp,0x10
c0011775:	84 c0                	test   al,al
c0011777:	75 10                	jne    c0011789 <Reg::getLine(char*, char*, char*)+0x33>
c0011779:	57                   	push   edi
c001177a:	56                   	push   esi
c001177b:	53                   	push   ebx
c001177c:	68 7b e9 01 c0       	push   0xc001e97b
c0011781:	e8 7b fe ff ff       	call   c0011601 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	5b                   	pop    ebx
c001178a:	5e                   	pop    esi
c001178b:	5f                   	pop    edi
c001178c:	c3                   	ret    

c001178d <Reg::readInt(char*, char*, int*)>:
c001178d:	55                   	push   ebp
c001178e:	57                   	push   edi
c001178f:	56                   	push   esi
c0011790:	53                   	push   ebx
c0011791:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011797:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001179b:	57                   	push   edi
c001179c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117a3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00117aa:	e8 a7 ff ff ff       	call   c0011756 <Reg::getLine(char*, char*, char*)>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	84 c0                	test   al,al
c00117b4:	0f 84 b3 00 00 00    	je     c001186d <Reg::readInt(char*, char*, int*)+0xe0>
c00117ba:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00117be:	80 fa 2b             	cmp    dl,0x2b
c00117c1:	74 0c                	je     c00117cf <Reg::readInt(char*, char*, int*)+0x42>
c00117c3:	80 fa 2d             	cmp    dl,0x2d
c00117c6:	75 0e                	jne    c00117d6 <Reg::readInt(char*, char*, int*)+0x49>
c00117c8:	ba 01 00 00 00       	mov    edx,0x1
c00117cd:	eb 0b                	jmp    c00117da <Reg::readInt(char*, char*, int*)+0x4d>
c00117cf:	ba 01 00 00 00       	mov    edx,0x1
c00117d4:	eb 02                	jmp    c00117d8 <Reg::readInt(char*, char*, int*)+0x4b>
c00117d6:	31 d2                	xor    edx,edx
c00117d8:	31 c0                	xor    eax,eax
c00117da:	be 0a 00 00 00       	mov    esi,0xa
c00117df:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117e4:	75 20                	jne    c0011806 <Reg::readInt(char*, char*, int*)+0x79>
c00117e6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117ea:	80 f9 78             	cmp    cl,0x78
c00117ed:	75 0a                	jne    c00117f9 <Reg::readInt(char*, char*, int*)+0x6c>
c00117ef:	83 c2 02             	add    edx,0x2
c00117f2:	be 10 00 00 00       	mov    esi,0x10
c00117f7:	eb 0d                	jmp    c0011806 <Reg::readInt(char*, char*, int*)+0x79>
c00117f9:	80 f9 62             	cmp    cl,0x62
c00117fc:	75 08                	jne    c0011806 <Reg::readInt(char*, char*, int*)+0x79>
c00117fe:	83 c2 02             	add    edx,0x2
c0011801:	be 02 00 00 00       	mov    esi,0x2
c0011806:	01 d7                	add    edi,edx
c0011808:	31 d2                	xor    edx,edx
c001180a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001180c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011810:	80 fb 0d             	cmp    bl,0xd
c0011813:	0f 94 c3             	sete   bl
c0011816:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001181b:	0f 94 c1             	sete   cl
c001181e:	08 cb                	or     bl,cl
c0011820:	75 3a                	jne    c001185c <Reg::readInt(char*, char*, int*)+0xcf>
c0011822:	0f af d6             	imul   edx,esi
c0011825:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001182a:	83 fe 10             	cmp    esi,0x10
c001182d:	75 26                	jne    c0011855 <Reg::readInt(char*, char*, int*)+0xc8>
c001182f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011833:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011836:	89 e9                	mov    ecx,ebp
c0011838:	80 f9 05             	cmp    cl,0x5
c001183b:	77 06                	ja     c0011843 <Reg::readInt(char*, char*, int*)+0xb6>
c001183d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011841:	eb 16                	jmp    c0011859 <Reg::readInt(char*, char*, int*)+0xcc>
c0011843:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011847:	83 e9 61             	sub    ecx,0x61
c001184a:	80 f9 05             	cmp    cl,0x5
c001184d:	77 06                	ja     c0011855 <Reg::readInt(char*, char*, int*)+0xc8>
c001184f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011853:	eb 04                	jmp    c0011859 <Reg::readInt(char*, char*, int*)+0xcc>
c0011855:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011859:	47                   	inc    edi
c001185a:	eb ae                	jmp    c001180a <Reg::readInt(char*, char*, int*)+0x7d>
c001185c:	84 c0                	test   al,al
c001185e:	74 02                	je     c0011862 <Reg::readInt(char*, char*, int*)+0xd5>
c0011860:	f7 da                	neg    edx
c0011862:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011869:	89 10                	mov    DWORD PTR [eax],edx
c001186b:	88 d8                	mov    al,bl
c001186d:	81 c4 ec 00 00 00    	add    esp,0xec
c0011873:	5b                   	pop    ebx
c0011874:	5e                   	pop    esi
c0011875:	5f                   	pop    edi
c0011876:	5d                   	pop    ebp
c0011877:	c3                   	ret    

c0011878 <Reg::readString(char*, char*, char*, int)>:
c0011878:	57                   	push   edi
c0011879:	56                   	push   esi
c001187a:	53                   	push   ebx
c001187b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011881:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011888:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001188c:	57                   	push   edi
c001188d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011894:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001189b:	e8 b6 fe ff ff       	call   c0011756 <Reg::getLine(char*, char*, char*)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	89 c6                	mov    esi,eax
c00118a5:	84 c0                	test   al,al
c00118a7:	74 44                	je     c00118ed <Reg::readString(char*, char*, char*, int)+0x75>
c00118a9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00118b0:	31 c0                	xor    eax,eax
c00118b2:	4a                   	dec    edx
c00118b3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00118b6:	84 c9                	test   cl,cl
c00118b8:	74 0f                	je     c00118c9 <Reg::readString(char*, char*, char*, int)+0x51>
c00118ba:	39 c2                	cmp    edx,eax
c00118bc:	7e 0b                	jle    c00118c9 <Reg::readString(char*, char*, char*, int)+0x51>
c00118be:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00118c1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00118c6:	40                   	inc    eax
c00118c7:	eb ea                	jmp    c00118b3 <Reg::readString(char*, char*, char*, int)+0x3b>
c00118c9:	83 ec 0c             	sub    esp,0xc
c00118cc:	53                   	push   ebx
c00118cd:	e8 6e ec fe ff       	call   c0000540 <strlen>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118da:	75 11                	jne    c00118ed <Reg::readString(char*, char*, char*, int)+0x75>
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	53                   	push   ebx
c00118e0:	e8 5b ec fe ff       	call   c0000540 <strlen>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118ed:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118f3:	89 f0                	mov    eax,esi
c00118f5:	5b                   	pop    ebx
c00118f6:	5e                   	pop    esi
c00118f7:	5f                   	pop    edi
c00118f8:	c3                   	ret    

c00118f9 <Reg::readBool(char*, char*, bool*)>:
c00118f9:	83 ec 20             	sub    esp,0x20
c00118fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011900:	50                   	push   eax
c0011901:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011909:	e8 7f fe ff ff       	call   c001178d <Reg::readInt(char*, char*, int*)>
c001190e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011913:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011917:	0f 95 02             	setne  BYTE PTR [edx]
c001191a:	83 c4 2c             	add    esp,0x2c
c001191d:	c3                   	ret    

c001191e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001191e:	53                   	push   ebx
c001191f:	83 ec 1c             	sub    esp,0x1c
c0011922:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011926:	8d 44 24 13          	lea    eax,[esp+0x13]
c001192a:	50                   	push   eax
c001192b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001192f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011933:	e8 c1 ff ff ff       	call   c00118f9 <Reg::readBool(char*, char*, bool*)>
c0011938:	83 c4 10             	add    esp,0x10
c001193b:	84 c0                	test   al,al
c001193d:	74 04                	je     c0011943 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001193f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011943:	88 d8                	mov    al,bl
c0011945:	83 c4 18             	add    esp,0x18
c0011948:	5b                   	pop    ebx
c0011949:	c3                   	ret    

c001194a <Reg::readIntWithDefault(char*, char*, int)>:
c001194a:	53                   	push   ebx
c001194b:	83 ec 1c             	sub    esp,0x1c
c001194e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011952:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011956:	50                   	push   eax
c0011957:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001195b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001195f:	e8 29 fe ff ff       	call   c001178d <Reg::readInt(char*, char*, int*)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	84 c0                	test   al,al
c0011969:	74 04                	je     c001196f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001196b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001196f:	89 d8                	mov    eax,ebx
c0011971:	83 c4 18             	add    esp,0x18
c0011974:	5b                   	pop    ebx
c0011975:	c3                   	ret    

c0011976 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011976:	57                   	push   edi
c0011977:	56                   	push   esi
c0011978:	56                   	push   esi
c0011979:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001197d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011981:	56                   	push   esi
c0011982:	57                   	push   edi
c0011983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198b:	e8 e8 fe ff ff       	call   c0011878 <Reg::readString(char*, char*, char*, int)>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	84 c0                	test   al,al
c0011995:	75 1a                	jne    c00119b1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011997:	51                   	push   ecx
c0011998:	56                   	push   esi
c0011999:	6a 00                	push   0x0
c001199b:	57                   	push   edi
c001199c:	e8 2f eb fe ff       	call   c00004d0 <memset>
c00119a1:	8d 4e ff             	lea    ecx,[esi-0x1]
c00119a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00119a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119aa:	83 c4 10             	add    esp,0x10
c00119ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00119b1:	89 f8                	mov    eax,edi
c00119b3:	5a                   	pop    edx
c00119b4:	5e                   	pop    esi
c00119b5:	5f                   	pop    edi
c00119b6:	c3                   	ret    

c00119b7 <SysEject(regs*)>:
c00119b7:	83 ec 0c             	sub    esp,0xc
c00119ba:	83 ca ff             	or     edx,0xffffffff
c00119bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00119c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119c9:	83 e9 41             	sub    ecx,0x41
c00119cc:	83 f9 19             	cmp    ecx,0x19
c00119cf:	77 18                	ja     c00119e9 <SysEject(regs*)+0x32>
c00119d1:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c00119d8:	85 c9                	test   ecx,ecx
c00119da:	74 0d                	je     c00119e9 <SysEject(regs*)+0x32>
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	51                   	push   ecx
c00119e0:	e8 5d b2 ff ff       	call   c000cc42 <LogicalDisk::eject()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	99                   	cdq    
c00119e9:	83 c4 0c             	add    esp,0xc
c00119ec:	c3                   	ret    

c00119ed <SysExit(regs*)>:
c00119ed:	83 ec 18             	sub    esp,0x18
c00119f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119f7:	e8 24 27 00 00       	call   c0014120 <terminateTask(int)>
c00119fc:	83 c8 ff             	or     eax,0xffffffff
c00119ff:	83 c4 1c             	add    esp,0x1c
c0011a02:	89 c2                	mov    edx,eax
c0011a04:	c3                   	ret    

c0011a05 <SysGetCwd(regs*)>:
c0011a05:	83 ec 10             	sub    esp,0x10
c0011a08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a0c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a0f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a17:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a1a:	e8 df 8e ff ff       	call   c000a8fe <Fs::getcwd(Process*, char*, int)>
c0011a1f:	83 c4 1c             	add    esp,0x1c
c0011a22:	99                   	cdq    
c0011a23:	c3                   	ret    

c0011a24 <SysGetPID(regs*)>:
c0011a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a2e:	99                   	cdq    
c0011a2f:	c3                   	ret    

c0011a30 <SysGetRAMData(regs*)>:
c0011a30:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011a36:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011a40:	99                   	cdq    
c0011a41:	f7 f9                	idiv   ecx
c0011a43:	c1 e0 18             	shl    eax,0x18
c0011a46:	09 c8                	or     eax,ecx
c0011a48:	99                   	cdq    
c0011a49:	c3                   	ret    

c0011a4a <SysGetVGAPtr(regs*)>:
c0011a4a:	55                   	push   ebp
c0011a4b:	57                   	push   edi
c0011a4c:	56                   	push   esi
c0011a4d:	53                   	push   ebx
c0011a4e:	83 ec 18             	sub    esp,0x18
c0011a51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a55:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a58:	e8 c3 21 00 00       	call   c0013c20 <Thr::processFromPID(int)>
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	89 c1                	mov    ecx,eax
c0011a62:	b8 01 00 00 00       	mov    eax,0x1
c0011a67:	85 c9                	test   ecx,ecx
c0011a69:	74 57                	je     c0011ac2 <SysGetVGAPtr(regs*)+0x78>
c0011a6b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a71:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a75:	74 0c                	je     c0011a83 <SysGetVGAPtr(regs*)+0x39>
c0011a77:	83 ec 0c             	sub    esp,0xc
c0011a7a:	55                   	push   ebp
c0011a7b:	e8 77 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a86:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a89:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a90:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a96:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a9f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011aa2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011aa8:	50                   	push   eax
c0011aa9:	50                   	push   eax
c0011aaa:	68 96 e9 01 c0       	push   0xc001e996
c0011aaf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ab2:	05 a8 0f 00 00       	add    eax,0xfa8
c0011ab7:	50                   	push   eax
c0011ab8:	e8 43 eb fe ff       	call   c0000600 <strcpy>
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	31 c0                	xor    eax,eax
c0011ac2:	83 c4 0c             	add    esp,0xc
c0011ac5:	31 d2                	xor    edx,edx
c0011ac7:	5b                   	pop    ebx
c0011ac8:	5e                   	pop    esi
c0011ac9:	5f                   	pop    edi
c0011aca:	5d                   	pop    ebp
c0011acb:	c3                   	ret    

c0011acc <SysLoadDLL(regs*)>:
c0011acc:	56                   	push   esi
c0011acd:	53                   	push   ebx
c0011ace:	31 d2                	xor    edx,edx
c0011ad0:	51                   	push   ecx
c0011ad1:	b8 01 00 00 00       	mov    eax,0x1
c0011ad6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ada:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ade:	0f 84 8c 00 00 00    	je     c0011b70 <SysLoadDLL(regs*)+0xa4>
c0011ae4:	83 ec 0c             	sub    esp,0xc
c0011ae7:	68 14 01 00 00       	push   0x114
c0011aec:	e8 c8 5c ff ff       	call   c00077b9 <malloc>
c0011af1:	83 c4 0c             	add    esp,0xc
c0011af4:	89 c3                	mov    ebx,eax
c0011af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011afb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011afe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b01:	53                   	push   ebx
c0011b02:	e8 f5 8f ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	31 d2                	xor    edx,edx
c0011b0c:	b8 02 00 00 00       	mov    eax,0x2
c0011b11:	85 db                	test   ebx,ebx
c0011b13:	74 5b                	je     c0011b70 <SysLoadDLL(regs*)+0xa4>
c0011b15:	83 ec 0c             	sub    esp,0xc
c0011b18:	53                   	push   ebx
c0011b19:	e8 0c 93 ff ff       	call   c000ae2a <File::exists()>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	84 c0                	test   al,al
c0011b23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b25:	75 11                	jne    c0011b38 <SysLoadDLL(regs*)+0x6c>
c0011b27:	83 ec 0c             	sub    esp,0xc
c0011b2a:	53                   	push   ebx
c0011b2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	b8 03 00 00 00       	mov    eax,0x3
c0011b36:	eb 36                	jmp    c0011b6e <SysLoadDLL(regs*)+0xa2>
c0011b38:	83 ec 0c             	sub    esp,0xc
c0011b3b:	53                   	push   ebx
c0011b3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b3f:	58                   	pop    eax
c0011b40:	5a                   	pop    edx
c0011b41:	6a 00                	push   0x0
c0011b43:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b46:	e8 86 12 00 00       	call   c0012dd1 <Thr::loadDLL(char const*, bool)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	89 c1                	mov    ecx,eax
c0011b50:	31 d2                	xor    edx,edx
c0011b52:	b8 04 00 00 00       	mov    eax,0x4
c0011b57:	85 c9                	test   ecx,ecx
c0011b59:	74 15                	je     c0011b70 <SysLoadDLL(regs*)+0xa4>
c0011b5b:	53                   	push   ebx
c0011b5c:	53                   	push   ebx
c0011b5d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b63:	51                   	push   ecx
c0011b64:	e8 99 14 00 00       	call   c0013002 <Thr::executeDLL(unsigned long, void*)>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	31 c0                	xor    eax,eax
c0011b6e:	31 d2                	xor    edx,edx
c0011b70:	59                   	pop    ecx
c0011b71:	5b                   	pop    ebx
c0011b72:	5e                   	pop    esi
c0011b73:	c3                   	ret    

c0011b74 <SysRead(regs*)>:
c0011b74:	57                   	push   edi
c0011b75:	56                   	push   esi
c0011b76:	53                   	push   ebx
c0011b77:	83 ec 10             	sub    esp,0x10
c0011b7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b81:	83 f8 02             	cmp    eax,0x2
c0011b84:	77 10                	ja     c0011b96 <SysRead(regs*)+0x22>
c0011b86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b8e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b94:	eb 0e                	jmp    c0011ba4 <SysRead(regs*)+0x30>
c0011b96:	83 ec 0c             	sub    esp,0xc
c0011b99:	50                   	push   eax
c0011b9a:	e8 90 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	89 c1                	mov    ecx,eax
c0011ba4:	83 c8 ff             	or     eax,0xffffffff
c0011ba7:	85 c9                	test   ecx,ecx
c0011ba9:	89 c2                	mov    edx,eax
c0011bab:	74 28                	je     c0011bd5 <SysRead(regs*)+0x61>
c0011bad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bb5:	31 ff                	xor    edi,edi
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011bbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011bc0:	52                   	push   edx
c0011bc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011bc4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011bc7:	57                   	push   edi
c0011bc8:	56                   	push   esi
c0011bc9:	51                   	push   ecx
c0011bca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011bcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd1:	83 c4 20             	add    esp,0x20
c0011bd4:	99                   	cdq    
c0011bd5:	83 c4 10             	add    esp,0x10
c0011bd8:	5b                   	pop    ebx
c0011bd9:	5e                   	pop    esi
c0011bda:	5f                   	pop    edi
c0011bdb:	c3                   	ret    

c0011bdc <SysRegisterSignal(regs*)>:
c0011bdc:	83 ec 18             	sub    esp,0x18
c0011bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011be3:	6a 00                	push   0x0
c0011be5:	6a 00                	push   0x0
c0011be7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011bea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bf5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bfb:	e8 bd e9 ff ff       	call   c00105bd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c00:	83 c4 2c             	add    esp,0x2c
c0011c03:	99                   	cdq    
c0011c04:	c3                   	ret    

c0011c05 <SysSbrk(regs*)>:
c0011c05:	56                   	push   esi
c0011c06:	53                   	push   ebx
c0011c07:	83 ec 0c             	sub    esp,0xc
c0011c0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c0e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011c11:	68 a0 e9 01 c0       	push   0xc001e9a0
c0011c16:	e8 6c 89 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0011c1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c20:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011c23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c2f:	85 db                	test   ebx,ebx
c0011c31:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c34:	74 02                	je     c0011c38 <SysSbrk(regs*)+0x33>
c0011c36:	79 06                	jns    c0011c3e <SysSbrk(regs*)+0x39>
c0011c38:	89 f0                	mov    eax,esi
c0011c3a:	31 d2                	xor    edx,edx
c0011c3c:	eb 2a                	jmp    c0011c68 <SysSbrk(regs*)+0x63>
c0011c3e:	83 c8 ff             	or     eax,0xffffffff
c0011c41:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c47:	89 c2                	mov    edx,eax
c0011c49:	77 1d                	ja     c0011c68 <SysSbrk(regs*)+0x63>
c0011c4b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c51:	50                   	push   eax
c0011c52:	c1 ea 0c             	shr    edx,0xc
c0011c55:	68 07 0c 00 00       	push   0xc07
c0011c5a:	52                   	push   edx
c0011c5b:	51                   	push   ecx
c0011c5c:	e8 9b 7d ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011c61:	89 f0                	mov    eax,esi
c0011c63:	31 d2                	xor    edx,edx
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	59                   	pop    ecx
c0011c69:	5b                   	pop    ebx
c0011c6a:	5e                   	pop    esi
c0011c6b:	c3                   	ret    

c0011c6c <SysSetCwd(regs*)>:
c0011c6c:	83 ec 14             	sub    esp,0x14
c0011c6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c73:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c7b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c7e:	e8 46 92 ff ff       	call   c000aec9 <Fs::setcwd(Process*, char*)>
c0011c83:	83 c4 1c             	add    esp,0x1c
c0011c86:	99                   	cdq    
c0011c87:	c3                   	ret    

c0011c88 <SysSetTime(regs*)>:
c0011c88:	55                   	push   ebp
c0011c89:	31 c9                	xor    ecx,ecx
c0011c8b:	57                   	push   edi
c0011c8c:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c91:	56                   	push   esi
c0011c92:	53                   	push   ebx
c0011c93:	31 db                	xor    ebx,ebx
c0011c95:	83 ec 10             	sub    esp,0x10
c0011c98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c9c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c9f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011ca2:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011ca5:	89 c2                	mov    edx,eax
c0011ca7:	66 81 ef 6c 07       	sub    di,0x76c
c0011cac:	83 e2 1f             	and    edx,0x1f
c0011caf:	c1 e7 10             	shl    edi,0x10
c0011cb2:	42                   	inc    edx
c0011cb3:	c1 e8 05             	shr    eax,0x5
c0011cb6:	88 d1                	mov    cl,dl
c0011cb8:	31 d2                	xor    edx,edx
c0011cba:	f7 f5                	div    ebp
c0011cbc:	89 dd                	mov    ebp,ebx
c0011cbe:	88 d5                	mov    ch,dl
c0011cc0:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011cc6:	0f b7 c1             	movzx  eax,cx
c0011cc9:	31 d2                	xor    edx,edx
c0011ccb:	09 f8                	or     eax,edi
c0011ccd:	bf 3c 00 00 00       	mov    edi,0x3c
c0011cd2:	89 c1                	mov    ecx,eax
c0011cd4:	89 f0                	mov    eax,esi
c0011cd6:	f7 f7                	div    edi
c0011cd8:	c1 e2 10             	shl    edx,0x10
c0011cdb:	09 d5                	or     ebp,edx
c0011cdd:	31 d2                	xor    edx,edx
c0011cdf:	89 eb                	mov    ebx,ebp
c0011ce1:	f7 f7                	div    edi
c0011ce3:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ce8:	88 d7                	mov    bh,dl
c0011cea:	89 f0                	mov    eax,esi
c0011cec:	31 d2                	xor    edx,edx
c0011cee:	f7 f7                	div    edi
c0011cf0:	bf 18 00 00 00       	mov    edi,0x18
c0011cf5:	31 d2                	xor    edx,edx
c0011cf7:	f7 f7                	div    edi
c0011cf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011cfe:	88 d3                	mov    bl,dl
c0011d00:	53                   	push   ebx
c0011d01:	51                   	push   ecx
c0011d02:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d08:	e8 cb 99 ff ff       	call   c000b6d8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d0d:	83 c4 1c             	add    esp,0x1c
c0011d10:	83 f0 01             	xor    eax,0x1
c0011d13:	5b                   	pop    ebx
c0011d14:	0f b6 c0             	movzx  eax,al
c0011d17:	5e                   	pop    esi
c0011d18:	31 d2                	xor    edx,edx
c0011d1a:	5f                   	pop    edi
c0011d1b:	5d                   	pop    ebp
c0011d1c:	c3                   	ret    

c0011d1d <SysTimezone(regs*)>:
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 08             	sub    esp,0x8
c0011d21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d25:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d29:	75 17                	jne    c0011d42 <SysTimezone(regs*)+0x25>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 ac e9 01 c0       	push   0xc001e9ac
c0011d33:	e8 4f 88 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0011d38:	83 c8 ff             	or     eax,0xffffffff
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	89 c2                	mov    edx,eax
c0011d40:	eb 20                	jmp    c0011d62 <SysTimezone(regs*)+0x45>
c0011d42:	83 ec 0c             	sub    esp,0xc
c0011d45:	68 c1 e9 01 c0       	push   0xc001e9c1
c0011d4a:	e8 38 88 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0011d4f:	58                   	pop    eax
c0011d50:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d53:	e8 dc 96 ff ff       	call   c000b434 <User::loadClockSettings(int)>
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	b8 01 00 00 00       	mov    eax,0x1
c0011d60:	31 d2                	xor    edx,edx
c0011d62:	83 c4 08             	add    esp,0x8
c0011d65:	5b                   	pop    ebx
c0011d66:	c3                   	ret    

c0011d67 <SysWrite(regs*)>:
c0011d67:	57                   	push   edi
c0011d68:	56                   	push   esi
c0011d69:	53                   	push   ebx
c0011d6a:	83 ec 10             	sub    esp,0x10
c0011d6d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d74:	83 f8 02             	cmp    eax,0x2
c0011d77:	77 10                	ja     c0011d89 <SysWrite(regs*)+0x22>
c0011d79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d81:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d87:	eb 0e                	jmp    c0011d97 <SysWrite(regs*)+0x30>
c0011d89:	83 ec 0c             	sub    esp,0xc
c0011d8c:	50                   	push   eax
c0011d8d:	e8 9d 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011d92:	83 c4 10             	add    esp,0x10
c0011d95:	89 c1                	mov    ecx,eax
c0011d97:	83 c8 ff             	or     eax,0xffffffff
c0011d9a:	85 c9                	test   ecx,ecx
c0011d9c:	89 c2                	mov    edx,eax
c0011d9e:	74 28                	je     c0011dc8 <SysWrite(regs*)+0x61>
c0011da0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011da8:	31 ff                	xor    edi,edi
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011daf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011db3:	52                   	push   edx
c0011db4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011db7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011dba:	57                   	push   edi
c0011dbb:	56                   	push   esi
c0011dbc:	51                   	push   ecx
c0011dbd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011dc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc4:	83 c4 20             	add    esp,0x20
c0011dc7:	99                   	cdq    
c0011dc8:	83 c4 10             	add    esp,0x10
c0011dcb:	5b                   	pop    ebx
c0011dcc:	5e                   	pop    esi
c0011dcd:	5f                   	pop    edi
c0011dce:	c3                   	ret    

c0011dcf <SysWsbe(regs*)>:
c0011dcf:	57                   	push   edi
c0011dd0:	b9 0b 00 00 00       	mov    ecx,0xb
c0011dd5:	56                   	push   esi
c0011dd6:	be 00 ea 01 c0       	mov    esi,0xc001ea00
c0011ddb:	53                   	push   ebx
c0011ddc:	83 ec 30             	sub    esp,0x30
c0011ddf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011de3:	fc                   	cld    
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011de9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011ded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df5:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011dfb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dfd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e00:	57                   	push   edi
c0011e01:	e8 3a e7 fe ff       	call   c0000540 <strlen>
c0011e06:	5a                   	pop    edx
c0011e07:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e0b:	52                   	push   edx
c0011e0c:	31 d2                	xor    edx,edx
c0011e0e:	57                   	push   edi
c0011e0f:	52                   	push   edx
c0011e10:	50                   	push   eax
c0011e11:	56                   	push   esi
c0011e12:	ff d3                	call   ebx
c0011e14:	83 c4 14             	add    esp,0x14
c0011e17:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e1b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e1e:	e8 fd 22 00 00       	call   c0014120 <terminateTask(int)>
c0011e23:	83 c4 40             	add    esp,0x40
c0011e26:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e2b:	5b                   	pop    ebx
c0011e2c:	31 d2                	xor    edx,edx
c0011e2e:	5e                   	pop    esi
c0011e2f:	5f                   	pop    edi
c0011e30:	c3                   	ret    

c0011e31 <SysYield(regs*)>:
c0011e31:	83 ec 0c             	sub    esp,0xc
c0011e34:	fa                   	cli    
c0011e35:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011e3b:	e8 bc 19 00 00       	call   c00137fc <schedule()>
c0011e40:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011e45:	48                   	dec    eax
c0011e46:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011e4b:	75 01                	jne    c0011e4e <SysYield(regs*)+0x1d>
c0011e4d:	fb                   	sti    
c0011e4e:	31 c0                	xor    eax,eax
c0011e50:	31 d2                	xor    edx,edx
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	c3                   	ret    

c0011e56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e56:	55                   	push   ebp
c0011e57:	57                   	push   edi
c0011e58:	56                   	push   esi
c0011e59:	53                   	push   ebx
c0011e5a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e60:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e68:	0f 95 c2             	setne  dl
c0011e6b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e73:	0f 94 c0             	sete   al
c0011e76:	84 c2                	test   dl,al
c0011e78:	74 34                	je     c0011eae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e7a:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e85:	74 27                	je     c0011eae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e87:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e8e:	05 00 10 00 00       	add    eax,0x1000
c0011e93:	89 c1                	mov    ecx,eax
c0011e95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e9a:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011ea0:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011ea7:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011eae:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011eb5:	83 ec 0c             	sub    esp,0xc
c0011eb8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011ebe:	6a 01                	push   0x1
c0011ec0:	e8 c0 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	89 c3                	mov    ebx,eax
c0011eca:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011ed0:	0f 86 25 01 00 00    	jbe    c0011ffb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011ed6:	c1 ee 0c             	shr    esi,0xc
c0011ed9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ee0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ee4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011eec:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ef3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ef7:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011efe:	29 ef                	sub    edi,ebp
c0011f00:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f04:	0f 83 f8 00 00 00    	jae    c0012002 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f0a:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f10:	76 05                	jbe    c0011f17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f12:	bf 00 10 00 00       	mov    edi,0x1000
c0011f17:	83 ec 0c             	sub    esp,0xc
c0011f1a:	31 d2                	xor    edx,edx
c0011f1c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f25:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f29:	50                   	push   eax
c0011f2a:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f2e:	56                   	push   esi
c0011f2f:	52                   	push   edx
c0011f30:	57                   	push   edi
c0011f31:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f3b:	83 c4 20             	add    esp,0x20
c0011f3e:	85 c0                	test   eax,eax
c0011f40:	75 06                	jne    c0011f48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f42:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f46:	74 13                	je     c0011f5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f48:	83 ec 0c             	sub    esp,0xc
c0011f4b:	53                   	push   ebx
c0011f4c:	e8 28 76 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	31 c0                	xor    eax,eax
c0011f56:	e9 7c 01 00 00       	jmp    c00120d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f5b:	fa                   	cli    
c0011f5c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f62:	e8 2e 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f67:	6a 07                	push   0x7
c0011f69:	89 c7                	mov    edi,eax
c0011f6b:	53                   	push   ebx
c0011f6c:	50                   	push   eax
c0011f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f75:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f7b:	e8 78 79 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f80:	83 c4 0c             	add    esp,0xc
c0011f83:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f8a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f90:	6a 00                	push   0x0
c0011f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f9a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fa0:	e8 c5 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0011fa5:	58                   	pop    eax
c0011fa6:	5a                   	pop    edx
c0011fa7:	68 07 0c 00 00       	push   0xc07
c0011fac:	55                   	push   ebp
c0011fad:	57                   	push   edi
c0011fae:	89 df                	mov    edi,ebx
c0011fb0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011fb7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fbd:	6a 00                	push   0x0
c0011fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fcd:	e8 5e 7d ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011fd2:	b9 00 10 00 00       	mov    ecx,0x1000
c0011fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fd9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011fde:	83 c4 20             	add    esp,0x20
c0011fe1:	48                   	dec    eax
c0011fe2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011fe7:	85 c0                	test   eax,eax
c0011fe9:	75 01                	jne    c0011fec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011feb:	fb                   	sti    
c0011fec:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011ff2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011ff6:	e9 f1 fe ff ff       	jmp    c0011eec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011ffb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012002:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012009:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001200f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012015:	0f 86 ae 00 00 00    	jbe    c00120c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001201b:	fa                   	cli    
c001201c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0012022:	c1 ee 0c             	shr    esi,0xc
c0012025:	51                   	push   ecx
c0012026:	31 ff                	xor    edi,edi
c0012028:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001202f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012035:	6a 00                	push   0x0
c0012037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001203c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001203f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012045:	e8 20 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	e8 43 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0012052:	47                   	inc    edi
c0012053:	6a 07                	push   0x7
c0012055:	53                   	push   ebx
c0012056:	50                   	push   eax
c0012057:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001205b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012061:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012064:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001206a:	e8 89 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001206f:	58                   	pop    eax
c0012070:	5a                   	pop    edx
c0012071:	68 07 0c 00 00       	push   0xc07
c0012076:	55                   	push   ebp
c0012077:	81 c5 00 10 00 00    	add    ebp,0x1000
c001207d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012081:	50                   	push   eax
c0012082:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012089:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001208f:	6a 00                	push   0x0
c0012091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012096:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012099:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001209f:	e8 8c 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00120a4:	83 c4 1c             	add    esp,0x1c
c00120a7:	68 00 10 00 00       	push   0x1000
c00120ac:	6a 00                	push   0x0
c00120ae:	53                   	push   ebx
c00120af:	e8 1c e4 fe ff       	call   c00004d0 <memset>
c00120b4:	83 c4 10             	add    esp,0x10
c00120b7:	39 fe                	cmp    esi,edi
c00120b9:	77 92                	ja     c001204d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00120bb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00120c0:	48                   	dec    eax
c00120c1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00120c6:	75 01                	jne    c00120c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120c8:	fb                   	sti    
c00120c9:	83 ec 0c             	sub    esp,0xc
c00120cc:	53                   	push   ebx
c00120cd:	e8 a7 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	b0 01                	mov    al,0x1
c00120d7:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120dd:	5b                   	pop    ebx
c00120de:	5e                   	pop    esi
c00120df:	5f                   	pop    edi
c00120e0:	5d                   	pop    ebp
c00120e1:	c3                   	ret    

c00120e2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120e2:	55                   	push   ebp
c00120e3:	57                   	push   edi
c00120e4:	56                   	push   esi
c00120e5:	53                   	push   ebx
c00120e6:	83 ec 48             	sub    esp,0x48
c00120e9:	68 14 01 00 00       	push   0x114
c00120ee:	e8 c6 56 ff ff       	call   c00077b9 <malloc>
c00120f3:	83 c4 0c             	add    esp,0xc
c00120f6:	89 c6                	mov    esi,eax
c00120f8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012100:	50                   	push   eax
c0012101:	e8 f6 89 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0012106:	58                   	pop    eax
c0012107:	5a                   	pop    edx
c0012108:	6a 01                	push   0x1
c001210a:	56                   	push   esi
c001210b:	e8 ac 8a ff ff       	call   c000abbc <File::open(FileOpenMode)>
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	85 c0                	test   eax,eax
c0012115:	0f 85 47 01 00 00    	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001211b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012123:	83 ec 0c             	sub    esp,0xc
c0012126:	6a 34                	push   0x34
c0012128:	e8 8c 56 ff ff       	call   c00077b9 <malloc>
c001212d:	89 c3                	mov    ebx,eax
c001212f:	58                   	pop    eax
c0012130:	8b 06                	mov    eax,DWORD PTR [esi]
c0012132:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012136:	57                   	push   edi
c0012137:	53                   	push   ebx
c0012138:	6a 00                	push   0x0
c001213a:	6a 34                	push   0x34
c001213c:	56                   	push   esi
c001213d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012140:	83 c4 20             	add    esp,0x20
c0012143:	85 c0                	test   eax,eax
c0012145:	0f 85 17 01 00 00    	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001214b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012151:	0f 85 0b 01 00 00    	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012157:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001215a:	85 c0                	test   eax,eax
c001215c:	0f 84 00 01 00 00    	je     c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012162:	31 d2                	xor    edx,edx
c0012164:	55                   	push   ebp
c0012165:	52                   	push   edx
c0012166:	50                   	push   eax
c0012167:	56                   	push   esi
c0012168:	e8 0d 8b ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	85 c0                	test   eax,eax
c0012172:	0f 85 ea 00 00 00    	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001217e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012182:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012186:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001218a:	0f af c2             	imul   eax,edx
c001218d:	50                   	push   eax
c001218e:	e8 26 56 ff ff       	call   c00077b9 <malloc>
c0012193:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012195:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012199:	89 3c 24             	mov    DWORD PTR [esp],edi
c001219c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00121a0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121a4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121a8:	0f af c2             	imul   eax,edx
c00121ab:	99                   	cdq    
c00121ac:	52                   	push   edx
c00121ad:	50                   	push   eax
c00121ae:	56                   	push   esi
c00121af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121b2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00121b5:	83 c4 20             	add    esp,0x20
c00121b8:	85 c0                	test   eax,eax
c00121ba:	0f 84 a2 00 00 00    	je     c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121c0:	31 d2                	xor    edx,edx
c00121c2:	51                   	push   ecx
c00121c3:	52                   	push   edx
c00121c4:	50                   	push   eax
c00121c5:	56                   	push   esi
c00121c6:	e8 af 8a ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	85 c0                	test   eax,eax
c00121d0:	0f 85 8c 00 00 00    	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121dd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121e1:	31 ed                	xor    ebp,ebp
c00121e3:	0f af c2             	imul   eax,edx
c00121e6:	50                   	push   eax
c00121e7:	e8 cd 55 ff ff       	call   c00077b9 <malloc>
c00121ec:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121f9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121fd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012201:	0f af c2             	imul   eax,edx
c0012204:	99                   	cdq    
c0012205:	52                   	push   edx
c0012206:	50                   	push   eax
c0012207:	56                   	push   esi
c0012208:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001220b:	83 c4 20             	add    esp,0x20
c001220e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012216:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001221a:	0f 86 80 00 00 00    	jbe    c00122a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012220:	0f b7 fd             	movzx  edi,bp
c0012223:	c1 e7 05             	shl    edi,0x5
c0012226:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001222a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001222d:	75 6b                	jne    c001229a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001222f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012232:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012236:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012239:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001223d:	52                   	push   edx
c001223e:	31 d2                	xor    edx,edx
c0012240:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012243:	52                   	push   edx
c0012244:	50                   	push   eax
c0012245:	56                   	push   esi
c0012246:	e8 2f 8a ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	85 c0                	test   eax,eax
c0012250:	74 17                	je     c0012269 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012252:	83 ec 0c             	sub    esp,0xc
c0012255:	68 2c ea 01 c0       	push   0xc001ea2c
c001225a:	e8 28 83 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001225f:	83 c4 10             	add    esp,0x10
c0012262:	31 c0                	xor    eax,eax
c0012264:	e9 87 00 00 00       	jmp    c00122f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012269:	83 ec 0c             	sub    esp,0xc
c001226c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001226f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012272:	50                   	push   eax
c0012273:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012277:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001227b:	56                   	push   esi
c001227c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012280:	e8 d1 fb ff ff       	call   c0011e56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012285:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012289:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001228d:	83 c4 20             	add    esp,0x20
c0012290:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012294:	73 04                	jae    c001229a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001229a:	45                   	inc    ebp
c001229b:	e9 76 ff ff ff       	jmp    c0012216 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00122a0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00122a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122ac:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00122b2:	83 ec 0c             	sub    esp,0xc
c00122b5:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00122bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122c0:	05 00 10 00 00       	add    eax,0x1000
c00122c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122cc:	e8 f8 54 ff ff       	call   c00077c9 <free>
c00122d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122d4:	e8 f0 54 ff ff       	call   c00077c9 <free>
c00122d9:	58                   	pop    eax
c00122da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122de:	e8 e6 54 ff ff       	call   c00077c9 <free>
c00122e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00122e6:	e8 2f 89 ff ff       	call   c000ac1a <File::close()>
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	b0 01                	mov    al,0x1
c00122f0:	83 c4 3c             	add    esp,0x3c
c00122f3:	5b                   	pop    ebx
c00122f4:	5e                   	pop    esi
c00122f5:	5f                   	pop    edi
c00122f6:	5d                   	pop    ebp
c00122f7:	c3                   	ret    

c00122f8 <Thr::runtimeReferenceHelper()>:
c00122f8:	83 ec 18             	sub    esp,0x18
c00122fb:	68 34 ea 01 c0       	push   0xc001ea34
c0012300:	e8 82 82 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0012305:	fa                   	cli    
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	eb fe                	jmp    c0012309 <Thr::runtimeReferenceHelper()+0x11>

c001230b <Thr::getAddressOfKernelSymbol(char const*)>:
c001230b:	57                   	push   edi
c001230c:	56                   	push   esi
c001230d:	53                   	push   ebx
c001230e:	31 db                	xor    ebx,ebx
c0012310:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c0012316:	7e 3c                	jle    c0012354 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012318:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c001231f:	31 ff                	xor    edi,edi
c0012321:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c0012328:	7e 27                	jle    c0012351 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001232a:	50                   	push   eax
c001232b:	50                   	push   eax
c001232c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012330:	8b 06                	mov    eax,DWORD PTR [esi]
c0012332:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c0012339:	50                   	push   eax
c001233a:	e8 a1 e3 fe ff       	call   c00006e0 <strcmp>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	85 c0                	test   eax,eax
c0012344:	75 05                	jne    c001234b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012346:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012349:	eb 0b                	jmp    c0012356 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001234b:	83 c6 10             	add    esi,0x10
c001234e:	47                   	inc    edi
c001234f:	eb d0                	jmp    c0012321 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012351:	43                   	inc    ebx
c0012352:	eb bc                	jmp    c0012310 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012354:	31 c0                	xor    eax,eax
c0012356:	5b                   	pop    ebx
c0012357:	5e                   	pop    esi
c0012358:	5f                   	pop    edi
c0012359:	c3                   	ret    

c001235a <Thr::loadKernelSymbolTable(char const*)>:
c001235a:	55                   	push   ebp
c001235b:	57                   	push   edi
c001235c:	56                   	push   esi
c001235d:	53                   	push   ebx
c001235e:	83 ec 68             	sub    esp,0x68
c0012361:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c0012367:	68 14 01 00 00       	push   0x114
c001236c:	e8 48 54 ff ff       	call   c00077b9 <malloc>
c0012371:	83 c4 0c             	add    esp,0xc
c0012374:	89 c3                	mov    ebx,eax
c0012376:	56                   	push   esi
c0012377:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001237b:	50                   	push   eax
c001237c:	e8 7b 87 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0012381:	5e                   	pop    esi
c0012382:	5f                   	pop    edi
c0012383:	6a 01                	push   0x1
c0012385:	53                   	push   ebx
c0012386:	e8 31 88 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c001238b:	83 c4 10             	add    esp,0x10
c001238e:	85 c0                	test   eax,eax
c0012390:	74 0a                	je     c001239c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012392:	83 ec 0c             	sub    esp,0xc
c0012395:	68 56 ea 01 c0       	push   0xc001ea56
c001239a:	eb 34                	jmp    c00123d0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001239c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00123a4:	83 ec 0c             	sub    esp,0xc
c00123a7:	6a 34                	push   0x34
c00123a9:	e8 0b 54 ff ff       	call   c00077b9 <malloc>
c00123ae:	59                   	pop    ecx
c00123af:	89 c7                	mov    edi,eax
c00123b1:	8d 74 24 34          	lea    esi,[esp+0x34]
c00123b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123b7:	56                   	push   esi
c00123b8:	57                   	push   edi
c00123b9:	6a 00                	push   0x0
c00123bb:	6a 34                	push   0x34
c00123bd:	53                   	push   ebx
c00123be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123c1:	83 c4 20             	add    esp,0x20
c00123c4:	85 c0                	test   eax,eax
c00123c6:	74 17                	je     c00123df <Thr::loadKernelSymbolTable(char const*)+0x85>
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 6d ea 01 c0       	push   0xc001ea6d
c00123d0:	e8 32 de ff ff       	call   c0010207 <KePanic(char const*)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	31 c0                	xor    eax,eax
c00123da:	e9 31 02 00 00       	jmp    c0012610 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123df:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123e5:	75 e1                	jne    c00123c8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123e7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123ea:	85 c0                	test   eax,eax
c00123ec:	74 da                	je     c00123c8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123ee:	52                   	push   edx
c00123ef:	31 d2                	xor    edx,edx
c00123f1:	52                   	push   edx
c00123f2:	50                   	push   eax
c00123f3:	53                   	push   ebx
c00123f4:	e8 81 88 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	85 c0                	test   eax,eax
c00123fe:	75 c8                	jne    c00123c8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012407:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001240b:	31 ed                	xor    ebp,ebp
c001240d:	0f af c2             	imul   eax,edx
c0012410:	50                   	push   eax
c0012411:	e8 a3 53 ff ff       	call   c00077b9 <malloc>
c0012416:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001241c:	89 34 24             	mov    DWORD PTR [esp],esi
c001241f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012423:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012427:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001242b:	0f af c2             	imul   eax,edx
c001242e:	99                   	cdq    
c001242f:	52                   	push   edx
c0012430:	50                   	push   eax
c0012431:	53                   	push   ebx
c0012432:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012435:	83 c4 20             	add    esp,0x20
c0012438:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012440:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012448:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012450:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012458:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001245c:	0f 86 aa 00 00 00    	jbe    c001250c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012462:	0f b7 f5             	movzx  esi,bp
c0012465:	6b f6 28             	imul   esi,esi,0x28
c0012468:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001246c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001246f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012473:	50                   	push   eax
c0012474:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012478:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001247c:	8b 16                	mov    edx,DWORD PTR [esi]
c001247e:	6b c0 28             	imul   eax,eax,0x28
c0012481:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012485:	89 d0                	mov    eax,edx
c0012487:	31 d2                	xor    edx,edx
c0012489:	52                   	push   edx
c001248a:	50                   	push   eax
c001248b:	53                   	push   ebx
c001248c:	e8 e9 87 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0012491:	83 c4 0c             	add    esp,0xc
c0012494:	6a 20                	push   0x20
c0012496:	6a 00                	push   0x0
c0012498:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001249c:	52                   	push   edx
c001249d:	e8 2e e0 fe ff       	call   c00004d0 <memset>
c00124a2:	58                   	pop    eax
c00124a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124a5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00124a9:	51                   	push   ecx
c00124aa:	8d 54 24 40          	lea    edx,[esp+0x40]
c00124ae:	52                   	push   edx
c00124af:	6a 00                	push   0x0
c00124b1:	6a 1f                	push   0x1f
c00124b3:	53                   	push   ebx
c00124b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124b7:	83 c4 18             	add    esp,0x18
c00124ba:	68 84 ea 01 c0       	push   0xc001ea84
c00124bf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00124c3:	52                   	push   edx
c00124c4:	e8 17 e2 fe ff       	call   c00006e0 <strcmp>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	85 c0                	test   eax,eax
c00124ce:	75 0f                	jne    c00124df <Thr::loadKernelSymbolTable(char const*)+0x185>
c00124d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124df:	50                   	push   eax
c00124e0:	50                   	push   eax
c00124e1:	68 8c ea 01 c0       	push   0xc001ea8c
c00124e6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124ea:	50                   	push   eax
c00124eb:	e8 f0 e1 fe ff       	call   c00006e0 <strcmp>
c00124f0:	83 c4 10             	add    esp,0x10
c00124f3:	85 c0                	test   eax,eax
c00124f5:	75 0f                	jne    c0012506 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012502:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012506:	45                   	inc    ebp
c0012507:	e9 4c ff ff ff       	jmp    c0012458 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001250c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012511:	75 10                	jne    c0012523 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012513:	83 ec 0c             	sub    esp,0xc
c0012516:	68 94 ea 01 c0       	push   0xc001ea94
c001251b:	e8 e7 dc ff ff       	call   c0010207 <KePanic(char const*)>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012528:	75 10                	jne    c001253a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001252a:	83 ec 0c             	sub    esp,0xc
c001252d:	68 94 ea 01 c0       	push   0xc001ea94
c0012532:	e8 d0 dc ff ff       	call   c0010207 <KePanic(char const*)>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	31 d2                	xor    edx,edx
c001253c:	50                   	push   eax
c001253d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012541:	52                   	push   edx
c0012542:	50                   	push   eax
c0012543:	53                   	push   ebx
c0012544:	e8 31 87 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0012549:	5a                   	pop    edx
c001254a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001254e:	e8 66 52 ff ff       	call   c00077b9 <malloc>
c0012553:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255b:	31 c9                	xor    ecx,ecx
c001255d:	5e                   	pop    esi
c001255e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012560:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012564:	55                   	push   ebp
c0012565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012569:	51                   	push   ecx
c001256a:	52                   	push   edx
c001256b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001256f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012573:	53                   	push   ebx
c0012574:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012577:	83 c4 14             	add    esp,0x14
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	e8 36 52 ff ff       	call   c00077b9 <malloc>
c0012583:	89 c6                	mov    esi,eax
c0012585:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012587:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001258a:	56                   	push   esi
c001258b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001258f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012593:	51                   	push   ecx
c0012594:	52                   	push   edx
c0012595:	53                   	push   ebx
c0012596:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012599:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001259d:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c00125a3:	83 c4 1c             	add    esp,0x1c
c00125a6:	c1 e8 04             	shr    eax,0x4
c00125a9:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c00125b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b4:	31 d2                	xor    edx,edx
c00125b6:	52                   	push   edx
c00125b7:	50                   	push   eax
c00125b8:	53                   	push   ebx
c00125b9:	e8 bc 86 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c00125be:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00125c0:	31 d2                	xor    edx,edx
c00125c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125c5:	56                   	push   esi
c00125c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125ca:	52                   	push   edx
c00125cb:	50                   	push   eax
c00125cc:	53                   	push   ebx
c00125cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125d0:	83 c4 14             	add    esp,0x14
c00125d3:	53                   	push   ebx
c00125d4:	e8 41 86 ff ff       	call   c000ac1a <File::close()>
c00125d9:	5d                   	pop    ebp
c00125da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125de:	e8 e6 51 ff ff       	call   c00077c9 <free>
c00125e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125e6:	e8 de 51 ff ff       	call   c00077c9 <free>
c00125eb:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c00125f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125f4:	8d 50 01             	lea    edx,[eax+0x1]
c00125f7:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125fe:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c0012605:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	b0 01                	mov    al,0x1
c0012610:	83 c4 5c             	add    esp,0x5c
c0012613:	5b                   	pop    ebx
c0012614:	5e                   	pop    esi
c0012615:	5f                   	pop    edi
c0012616:	5d                   	pop    ebp
c0012617:	c3                   	ret    

c0012618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012618:	55                   	push   ebp
c0012619:	57                   	push   edi
c001261a:	56                   	push   esi
c001261b:	53                   	push   ebx
c001261c:	81 ec 68 03 00 00    	sub    esp,0x368
c0012622:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012629:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c001262f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012633:	68 14 01 00 00       	push   0x114
c0012638:	e8 7c 51 ff ff       	call   c00077b9 <malloc>
c001263d:	83 c4 0c             	add    esp,0xc
c0012640:	89 c5                	mov    ebp,eax
c0012642:	53                   	push   ebx
c0012643:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001264a:	50                   	push   eax
c001264b:	e8 ac 84 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0012650:	5e                   	pop    esi
c0012651:	5f                   	pop    edi
c0012652:	6a 01                	push   0x1
c0012654:	55                   	push   ebp
c0012655:	e8 62 85 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	85 c0                	test   eax,eax
c001265f:	0f 85 a7 06 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012665:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001266d:	83 ec 0c             	sub    esp,0xc
c0012670:	6a 34                	push   0x34
c0012672:	e8 42 51 ff ff       	call   c00077b9 <malloc>
c0012677:	5b                   	pop    ebx
c0012678:	89 c7                	mov    edi,eax
c001267a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001267e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012681:	53                   	push   ebx
c0012682:	57                   	push   edi
c0012683:	6a 00                	push   0x0
c0012685:	6a 34                	push   0x34
c0012687:	55                   	push   ebp
c0012688:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001268b:	83 c4 20             	add    esp,0x20
c001268e:	85 c0                	test   eax,eax
c0012690:	0f 85 76 06 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012696:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001269c:	0f 85 6a 06 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126a2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126a5:	85 c0                	test   eax,eax
c00126a7:	0f 84 5f 06 00 00    	je     c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ad:	31 d2                	xor    edx,edx
c00126af:	51                   	push   ecx
c00126b0:	52                   	push   edx
c00126b1:	50                   	push   eax
c00126b2:	55                   	push   ebp
c00126b3:	e8 c2 85 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c00126b8:	83 c4 10             	add    esp,0x10
c00126bb:	85 c0                	test   eax,eax
c00126bd:	0f 85 49 06 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126c3:	83 ec 0c             	sub    esp,0xc
c00126c6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126c9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00126d1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126d5:	0f af c2             	imul   eax,edx
c00126d8:	50                   	push   eax
c00126d9:	e8 db 50 ff ff       	call   c00077b9 <malloc>
c00126de:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126ec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126f4:	0f af c2             	imul   eax,edx
c00126f7:	99                   	cdq    
c00126f8:	52                   	push   edx
c00126f9:	50                   	push   eax
c00126fa:	55                   	push   ebp
c00126fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126fe:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012701:	83 c4 20             	add    esp,0x20
c0012704:	85 c0                	test   eax,eax
c0012706:	0f 84 00 06 00 00    	je     c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001270c:	52                   	push   edx
c001270d:	31 d2                	xor    edx,edx
c001270f:	52                   	push   edx
c0012710:	50                   	push   eax
c0012711:	55                   	push   ebp
c0012712:	e8 63 85 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0012717:	83 c4 10             	add    esp,0x10
c001271a:	85 c0                	test   eax,eax
c001271c:	0f 85 ea 05 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012722:	83 ec 0c             	sub    esp,0xc
c0012725:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012729:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001272d:	31 f6                	xor    esi,esi
c001272f:	0f af c2             	imul   eax,edx
c0012732:	50                   	push   eax
c0012733:	e8 81 50 ff ff       	call   c00077b9 <malloc>
c0012738:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001273b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001273f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012742:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012746:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001274a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001274e:	0f af c2             	imul   eax,edx
c0012751:	99                   	cdq    
c0012752:	52                   	push   edx
c0012753:	50                   	push   eax
c0012754:	55                   	push   ebp
c0012755:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012758:	83 c4 20             	add    esp,0x20
c001275b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001275f:	0f 86 8a 00 00 00    	jbe    c00127ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012765:	0f b7 de             	movzx  ebx,si
c0012768:	c1 e3 05             	shl    ebx,0x5
c001276b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001276f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012772:	75 75                	jne    c00127e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012774:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012777:	31 d2                	xor    edx,edx
c0012779:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001277d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012780:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012784:	50                   	push   eax
c0012785:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012788:	52                   	push   edx
c0012789:	50                   	push   eax
c001278a:	55                   	push   ebp
c001278b:	e8 ea 84 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	85 c0                	test   eax,eax
c0012795:	0f 85 71 05 00 00    	jne    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001279b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00127a2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127a5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00127a9:	31 d2                	xor    edx,edx
c00127ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00127af:	83 ec 0c             	sub    esp,0xc
c00127b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127b6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00127bd:	50                   	push   eax
c00127be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127c6:	52                   	push   edx
c00127c7:	50                   	push   eax
c00127c8:	55                   	push   ebp
c00127c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127cc:	83 c4 1c             	add    esp,0x1c
c00127cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00127d2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00127d5:	50                   	push   eax
c00127d6:	6a 00                	push   0x0
c00127d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127e0:	50                   	push   eax
c00127e1:	e8 ea dc fe ff       	call   c00004d0 <memset>
c00127e6:	83 c4 10             	add    esp,0x10
c00127e9:	46                   	inc    esi
c00127ea:	e9 6c ff ff ff       	jmp    c001275b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127ef:	53                   	push   ebx
c00127f0:	31 db                	xor    ebx,ebx
c00127f2:	68 00 01 00 00       	push   0x100
c00127f7:	6a 00                	push   0x0
c00127f9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127fd:	50                   	push   eax
c00127fe:	e8 cd dc fe ff       	call   c00004d0 <memset>
c0012803:	83 c4 0c             	add    esp,0xc
c0012806:	68 00 01 00 00       	push   0x100
c001280b:	6a 00                	push   0x0
c001280d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012814:	50                   	push   eax
c0012815:	e8 b6 dc fe ff       	call   c00004d0 <memset>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012825:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001282d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012835:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001283d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012845:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012849:	0f 86 30 01 00 00    	jbe    c001297f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001284f:	0f b7 f3             	movzx  esi,bx
c0012852:	6b f6 28             	imul   esi,esi,0x28
c0012855:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012859:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001285c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012860:	52                   	push   edx
c0012861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012865:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012869:	8b 06                	mov    eax,DWORD PTR [esi]
c001286b:	6b d2 28             	imul   edx,edx,0x28
c001286e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012872:	31 d2                	xor    edx,edx
c0012874:	52                   	push   edx
c0012875:	50                   	push   eax
c0012876:	55                   	push   ebp
c0012877:	e8 fe 83 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c001287c:	83 c4 0c             	add    esp,0xc
c001287f:	6a 20                	push   0x20
c0012881:	6a 00                	push   0x0
c0012883:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001288a:	51                   	push   ecx
c001288b:	e8 40 dc fe ff       	call   c00004d0 <memset>
c0012890:	59                   	pop    ecx
c0012891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012894:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012898:	52                   	push   edx
c0012899:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00128a0:	51                   	push   ecx
c00128a1:	6a 00                	push   0x0
c00128a3:	6a 1f                	push   0x1f
c00128a5:	55                   	push   ebp
c00128a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00128a9:	83 c4 1c             	add    esp,0x1c
c00128ac:	6a 09                	push   0x9
c00128ae:	68 ae ea 01 c0       	push   0xc001eaae
c00128b3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128ba:	51                   	push   ecx
c00128bb:	e8 d0 da fe ff       	call   c0000390 <memcmp>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	85 c0                	test   eax,eax
c00128c5:	75 21                	jne    c00128e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00128c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128cf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128da:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128e1:	89 d0                	mov    eax,edx
c00128e3:	40                   	inc    eax
c00128e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e8:	50                   	push   eax
c00128e9:	6a 09                	push   0x9
c00128eb:	68 b8 ea 01 c0       	push   0xc001eab8
c00128f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f7:	50                   	push   eax
c00128f8:	e8 93 da fe ff       	call   c0000390 <memcmp>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	85 c0                	test   eax,eax
c0012902:	75 21                	jne    c0012925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001290c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012910:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012914:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012917:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001291e:	89 d0                	mov    eax,edx
c0012920:	40                   	inc    eax
c0012921:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012925:	50                   	push   eax
c0012926:	50                   	push   eax
c0012927:	68 84 ea 01 c0       	push   0xc001ea84
c001292c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012933:	50                   	push   eax
c0012934:	e8 a7 dd fe ff       	call   c00006e0 <strcmp>
c0012939:	83 c4 10             	add    esp,0x10
c001293c:	85 c0                	test   eax,eax
c001293e:	75 0f                	jne    c001294f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012940:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012943:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001294b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001294f:	50                   	push   eax
c0012950:	50                   	push   eax
c0012951:	68 8c ea 01 c0       	push   0xc001ea8c
c0012956:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001295d:	50                   	push   eax
c001295e:	e8 7d dd fe ff       	call   c00006e0 <strcmp>
c0012963:	83 c4 10             	add    esp,0x10
c0012966:	85 c0                	test   eax,eax
c0012968:	75 0f                	jne    c0012979 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001296a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001296d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012975:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012979:	43                   	inc    ebx
c001297a:	e9 c6 fe ff ff       	jmp    c0012845 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001297f:	31 d2                	xor    edx,edx
c0012981:	50                   	push   eax
c0012982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012986:	52                   	push   edx
c0012987:	50                   	push   eax
c0012988:	55                   	push   ebp
c0012989:	e8 ec 82 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c001298e:	58                   	pop    eax
c001298f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012993:	e8 21 4e ff ff       	call   c00077b9 <malloc>
c0012998:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001299b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001299f:	31 d2                	xor    edx,edx
c00129a1:	58                   	pop    eax
c00129a2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00129a6:	53                   	push   ebx
c00129a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129af:	52                   	push   edx
c00129b0:	50                   	push   eax
c00129b1:	55                   	push   ebp
c00129b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129b5:	83 c4 14             	add    esp,0x14
c00129b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129bc:	e8 f8 4d ff ff       	call   c00077b9 <malloc>
c00129c1:	31 d2                	xor    edx,edx
c00129c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00129c7:	83 c4 0c             	add    esp,0xc
c00129ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129ce:	52                   	push   edx
c00129cf:	50                   	push   eax
c00129d0:	55                   	push   ebp
c00129d1:	e8 a4 82 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c00129d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129d9:	31 d2                	xor    edx,edx
c00129db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129e6:	52                   	push   edx
c00129e7:	50                   	push   eax
c00129e8:	55                   	push   ebp
c00129e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129ec:	83 c4 20             	add    esp,0x20
c00129ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129fb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129ff:	0f 84 0b 03 00 00    	je     c0012d10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a05:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a0c:	31 d2                	xor    edx,edx
c0012a0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a12:	c1 e8 03             	shr    eax,0x3
c0012a15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a19:	51                   	push   ecx
c0012a1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a1e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a22:	52                   	push   edx
c0012a23:	50                   	push   eax
c0012a24:	55                   	push   ebp
c0012a25:	e8 50 82 ff ff       	call   c000ac7a <File::seek(unsigned long long)>
c0012a2a:	5b                   	pop    ebx
c0012a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a2f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a36:	e8 7e 4d ff ff       	call   c00077b9 <malloc>
c0012a3b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a42:	31 d2                	xor    edx,edx
c0012a44:	5e                   	pop    esi
c0012a45:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a49:	50                   	push   eax
c0012a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a52:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a59:	52                   	push   edx
c0012a5a:	50                   	push   eax
c0012a5b:	55                   	push   ebp
c0012a5c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a5f:	83 c4 20             	add    esp,0x20
c0012a62:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a6a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a6e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a72:	0f 8d 7c 02 00 00    	jge    c0012cf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a80:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a85:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a90:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a94:	89 d8                	mov    eax,ebx
c0012a96:	c1 e8 08             	shr    eax,0x8
c0012a99:	89 c6                	mov    esi,eax
c0012a9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a9f:	c1 e6 04             	shl    esi,0x4
c0012aa2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012aa6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012aa9:	85 d2                	test   edx,edx
c0012aab:	0f 85 bf 00 00 00    	jne    c0012b70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ab1:	83 ec 0c             	sub    esp,0xc
c0012ab4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ab8:	03 06                	add    eax,DWORD PTR [esi]
c0012aba:	50                   	push   eax
c0012abb:	e8 4b f8 ff ff       	call   c001230b <Thr::getAddressOfKernelSymbol(char const*)>
c0012ac0:	83 c4 10             	add    esp,0x10
c0012ac3:	89 c2                	mov    edx,eax
c0012ac5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012aca:	85 c0                	test   eax,eax
c0012acc:	0f 85 9e 00 00 00    	jne    c0012b70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ad2:	83 ec 0c             	sub    esp,0xc
c0012ad5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ad9:	03 06                	add    eax,DWORD PTR [esi]
c0012adb:	50                   	push   eax
c0012adc:	e8 77 d8 ff ff       	call   c0010358 <KeResolveCompatibilitySymbol(char*)>
c0012ae1:	83 c4 10             	add    esp,0x10
c0012ae4:	89 c2                	mov    edx,eax
c0012ae6:	85 c0                	test   eax,eax
c0012ae8:	0f 85 82 00 00 00    	jne    c0012b70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012af2:	50                   	push   eax
c0012af3:	50                   	push   eax
c0012af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012af8:	03 06                	add    eax,DWORD PTR [esi]
c0012afa:	50                   	push   eax
c0012afb:	68 c2 ea 01 c0       	push   0xc001eac2
c0012b00:	e8 82 7a ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0012b05:	58                   	pop    eax
c0012b06:	5a                   	pop    edx
c0012b07:	68 dc ea 01 c0       	push   0xc001eadc
c0012b0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b13:	50                   	push   eax
c0012b14:	e8 e7 da fe ff       	call   c0000600 <strcpy>
c0012b19:	59                   	pop    ecx
c0012b1a:	58                   	pop    eax
c0012b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b1f:	03 06                	add    eax,DWORD PTR [esi]
c0012b21:	50                   	push   eax
c0012b22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b29:	50                   	push   eax
c0012b2a:	e8 91 dc fe ff       	call   c00007c0 <strcat>
c0012b2f:	58                   	pop    eax
c0012b30:	5a                   	pop    edx
c0012b31:	68 72 eb 01 c0       	push   0xc001eb72
c0012b36:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b3d:	50                   	push   eax
c0012b3e:	e8 7d dc fe ff       	call   c00007c0 <strcat>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b4b:	0f 84 5d 01 00 00    	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b51:	83 ec 0c             	sub    esp,0xc
c0012b54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b5b:	50                   	push   eax
c0012b5c:	e8 a6 d6 ff ff       	call   c0010207 <KePanic(char const*)>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b68:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b6c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b70:	80 fb 01             	cmp    bl,0x1
c0012b73:	0f 85 88 00 00 00    	jne    c0012c01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b79:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b80:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b84:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b88:	01 ce                	add    esi,ecx
c0012b8a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b90:	0f 94 c0             	sete   al
c0012b93:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b99:	0f 94 c3             	sete   bl
c0012b9c:	09 c3                	or     ebx,eax
c0012b9e:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ba0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012ba5:	74 41                	je     c0012be8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012ba7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012baa:	84 db                	test   bl,bl
c0012bac:	75 15                	jne    c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012bae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bb2:	66 83 f8 0c          	cmp    ax,0xc
c0012bb6:	76 05                	jbe    c0012bbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012bb8:	b8 0c 00 00 00       	mov    eax,0xc
c0012bbd:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bc1:	76 37                	jbe    c0012bfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bc3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012bc7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bcc:	0f 84 dc 00 00 00    	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bd2:	83 ec 0c             	sub    esp,0xc
c0012bd5:	68 f3 ea 01 c0       	push   0xc001eaf3
c0012bda:	e8 28 d6 ff ff       	call   c0010207 <KePanic(char const*)>
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012be6:	eb 12                	jmp    c0012bfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012be8:	01 c1                	add    ecx,eax
c0012bea:	84 db                	test   bl,bl
c0012bec:	75 0c                	jne    c0012bfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bf2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bf6:	77 02                	ja     c0012bfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bf8:	01 d1                	add    ecx,edx
c0012bfa:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bfc:	e9 ea 00 00 00       	jmp    c0012ceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c01:	80 fb 02             	cmp    bl,0x2
c0012c04:	75 7c                	jne    c0012c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c06:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c0d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c11:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c15:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c1b:	74 20                	je     c0012c3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c1d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c23:	74 18                	je     c0012c3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c25:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c29:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c2e:	66 83 f8 0e          	cmp    ax,0xe
c0012c32:	77 03                	ja     c0012c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c34:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c37:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c3b:	76 1f                	jbe    c0012c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c41:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c46:	74 66                	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	68 0f eb 01 c0       	push   0xc001eb0f
c0012c50:	e8 b2 d5 ff ff       	call   c0010207 <KePanic(char const*)>
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c5e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c63:	74 13                	je     c0012c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c65:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c69:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c70:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c74:	01 c8                	add    eax,ecx
c0012c76:	eb 04                	jmp    c0012c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c78:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c7c:	01 c2                	add    edx,eax
c0012c7e:	89 16                	mov    DWORD PTR [esi],edx
c0012c80:	eb 69                	jmp    c0012ceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c82:	0f b6 db             	movzx  ebx,bl
c0012c85:	50                   	push   eax
c0012c86:	50                   	push   eax
c0012c87:	53                   	push   ebx
c0012c88:	68 2b eb 01 c0       	push   0xc001eb2b
c0012c8d:	e8 f5 78 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c9a:	74 12                	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c9c:	83 ec 0c             	sub    esp,0xc
c0012c9f:	68 36 eb 01 c0       	push   0xc001eb36
c0012ca4:	e8 5e d5 ff ff       	call   c0010207 <KePanic(char const*)>
c0012ca9:	83 c4 10             	add    esp,0x10
c0012cac:	eb 3d                	jmp    c0012ceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cae:	83 ec 0c             	sub    esp,0xc
c0012cb1:	55                   	push   ebp
c0012cb2:	e8 63 7f ff ff       	call   c000ac1a <File::close()>
c0012cb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc0:	59                   	pop    ecx
c0012cc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc5:	e8 ff 4a ff ff       	call   c00077c9 <free>
c0012cca:	5b                   	pop    ebx
c0012ccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ccf:	e8 f5 4a ff ff       	call   c00077c9 <free>
c0012cd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cd7:	e8 ed 4a ff ff       	call   c00077c9 <free>
c0012cdc:	5e                   	pop    esi
c0012cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce1:	e8 e3 4a ff ff       	call   c00077c9 <free>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	eb 21                	jmp    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012ceb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cef:	e9 76 fd ff ff       	jmp    c0012a6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cfb:	e8 c9 4a ff ff       	call   c00077c9 <free>
c0012d00:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	e9 eb fc ff ff       	jmp    c00129f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d0c:	31 c0                	xor    eax,eax
c0012d0e:	eb 33                	jmp    c0012d43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d10:	83 ec 0c             	sub    esp,0xc
c0012d13:	55                   	push   ebp
c0012d14:	e8 01 7f ff ff       	call   c000ac1a <File::close()>
c0012d19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d1c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d22:	58                   	pop    eax
c0012d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d27:	e8 9d 4a ff ff       	call   c00077c9 <free>
c0012d2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d2f:	e8 95 4a ff ff       	call   c00077c9 <free>
c0012d34:	5a                   	pop    edx
c0012d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d39:	e8 8b 4a ff ff       	call   c00077c9 <free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	b0 01                	mov    al,0x1
c0012d43:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d49:	5b                   	pop    ebx
c0012d4a:	5e                   	pop    esi
c0012d4b:	5f                   	pop    edi
c0012d4c:	5d                   	pop    ebp
c0012d4d:	c3                   	ret    

c0012d4e <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d4e:	56                   	push   esi
c0012d4f:	31 d2                	xor    edx,edx
c0012d51:	53                   	push   ebx
c0012d52:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d5c:	39 d3                	cmp    ebx,edx
c0012d5e:	7e 1b                	jle    c0012d7b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d60:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d67:	39 c8                	cmp    eax,ecx
c0012d69:	77 0d                	ja     c0012d78 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d6b:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d72:	01 c6                	add    esi,eax
c0012d74:	39 ce                	cmp    esi,ecx
c0012d76:	77 05                	ja     c0012d7d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d78:	42                   	inc    edx
c0012d79:	eb e1                	jmp    c0012d5c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d7b:	31 c0                	xor    eax,eax
c0012d7d:	5b                   	pop    ebx
c0012d7e:	5e                   	pop    esi
c0012d7f:	c3                   	ret    

c0012d80 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d80:	53                   	push   ebx
c0012d81:	31 c0                	xor    eax,eax
c0012d83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d87:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d8d:	39 c3                	cmp    ebx,eax
c0012d8f:	7e 22                	jle    c0012db3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d91:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d98:	39 ca                	cmp    edx,ecx
c0012d9a:	77 14                	ja     c0012db0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d9c:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012da3:	39 ca                	cmp    edx,ecx
c0012da5:	76 09                	jbe    c0012db0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012da7:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012dae:	eb 05                	jmp    c0012db5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012db0:	40                   	inc    eax
c0012db1:	eb da                	jmp    c0012d8d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012db3:	31 c0                	xor    eax,eax
c0012db5:	5b                   	pop    ebx
c0012db6:	c3                   	ret    

c0012db7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012db7:	53                   	push   ebx
c0012db8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012dbc:	53                   	push   ebx
c0012dbd:	e8 8c ff ff ff       	call   c0012d4e <Thr::getDriverBaseFromAddress(unsigned long)>
c0012dc2:	5a                   	pop    edx
c0012dc3:	31 d2                	xor    edx,edx
c0012dc5:	85 c0                	test   eax,eax
c0012dc7:	74 04                	je     c0012dcd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012dc9:	89 da                	mov    edx,ebx
c0012dcb:	29 c2                	sub    edx,eax
c0012dcd:	89 d0                	mov    eax,edx
c0012dcf:	5b                   	pop    ebx
c0012dd0:	c3                   	ret    

c0012dd1 <Thr::loadDLL(char const*, bool)>:
c0012dd1:	55                   	push   ebp
c0012dd2:	57                   	push   edi
c0012dd3:	56                   	push   esi
c0012dd4:	53                   	push   ebx
c0012dd5:	81 ec 34 01 00 00    	sub    esp,0x134
c0012ddb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012de2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012de9:	56                   	push   esi
c0012dea:	68 4e eb 01 c0       	push   0xc001eb4e
c0012def:	e8 93 77 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0012df4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012dfb:	e8 b9 49 ff ff       	call   c00077b9 <malloc>
c0012e00:	83 c4 0c             	add    esp,0xc
c0012e03:	89 c3                	mov    ebx,eax
c0012e05:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e0b:	56                   	push   esi
c0012e0c:	50                   	push   eax
c0012e0d:	e8 ea 7c ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	85 db                	test   ebx,ebx
c0012e17:	75 3c                	jne    c0012e55 <Thr::loadDLL(char const*, bool)+0x84>
c0012e19:	89 f8                	mov    eax,edi
c0012e1b:	84 c0                	test   al,al
c0012e1d:	0f 84 d2 01 00 00    	je     c0012ff5 <Thr::loadDLL(char const*, bool)+0x224>
c0012e23:	55                   	push   ebp
c0012e24:	55                   	push   ebp
c0012e25:	68 5f eb 01 c0       	push   0xc001eb5f
c0012e2a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e2e:	55                   	push   ebp
c0012e2f:	e8 cc d7 fe ff       	call   c0000600 <strcpy>
c0012e34:	58                   	pop    eax
c0012e35:	5a                   	pop    edx
c0012e36:	56                   	push   esi
c0012e37:	55                   	push   ebp
c0012e38:	e8 83 d9 fe ff       	call   c00007c0 <strcat>
c0012e3d:	59                   	pop    ecx
c0012e3e:	58                   	pop    eax
c0012e3f:	68 72 eb 01 c0       	push   0xc001eb72
c0012e44:	55                   	push   ebp
c0012e45:	e8 76 d9 fe ff       	call   c00007c0 <strcat>
c0012e4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e4d:	e8 b5 d3 ff ff       	call   c0010207 <KePanic(char const*)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	51                   	push   ecx
c0012e56:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e5a:	50                   	push   eax
c0012e5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e5f:	50                   	push   eax
c0012e60:	53                   	push   ebx
c0012e61:	e8 02 80 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c0012e66:	83 c4 10             	add    esp,0x10
c0012e69:	85 db                	test   ebx,ebx
c0012e6b:	74 0c                	je     c0012e79 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e6d:	83 ec 0c             	sub    esp,0xc
c0012e70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e72:	53                   	push   ebx
c0012e73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e7e:	75 0a                	jne    c0012e8a <Thr::loadDLL(char const*, bool)+0xb9>
c0012e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e84:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e88:	75 3c                	jne    c0012ec6 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e8a:	89 f8                	mov    eax,edi
c0012e8c:	84 c0                	test   al,al
c0012e8e:	0f 84 49 01 00 00    	je     c0012fdd <Thr::loadDLL(char const*, bool)+0x20c>
c0012e94:	51                   	push   ecx
c0012e95:	51                   	push   ecx
c0012e96:	68 5f eb 01 c0       	push   0xc001eb5f
c0012e9b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e9f:	53                   	push   ebx
c0012ea0:	e8 5b d7 fe ff       	call   c0000600 <strcpy>
c0012ea5:	5d                   	pop    ebp
c0012ea6:	58                   	pop    eax
c0012ea7:	56                   	push   esi
c0012ea8:	53                   	push   ebx
c0012ea9:	e8 12 d9 fe ff       	call   c00007c0 <strcat>
c0012eae:	58                   	pop    eax
c0012eaf:	5a                   	pop    edx
c0012eb0:	68 72 eb 01 c0       	push   0xc001eb72
c0012eb5:	53                   	push   ebx
c0012eb6:	e8 05 d9 fe ff       	call   c00007c0 <strcat>
c0012ebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ebe:	e8 44 d3 ff ff       	call   c0010207 <KePanic(char const*)>
c0012ec3:	83 c4 10             	add    esp,0x10
c0012ec6:	52                   	push   edx
c0012ec7:	6a 03                	push   0x3
c0012ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ecd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ed1:	05 ff 0f 00 00       	add    eax,0xfff
c0012ed6:	83 d2 00             	adc    edx,0x0
c0012ed9:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012edd:	50                   	push   eax
c0012ede:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012ee4:	e8 13 6b ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012ee9:	59                   	pop    ecx
c0012eea:	89 c3                	mov    ebx,eax
c0012eec:	5d                   	pop    ebp
c0012eed:	50                   	push   eax
c0012eee:	68 96 d7 01 c0       	push   0xc001d796
c0012ef3:	e8 8f 76 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0012ef8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012efb:	e8 40 d6 fe ff       	call   c0000540 <strlen>
c0012f00:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012f06:	40                   	inc    eax
c0012f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f0a:	e8 aa 48 ff ff       	call   c00077b9 <malloc>
c0012f0f:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012f16:	58                   	pop    eax
c0012f17:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f1c:	5a                   	pop    edx
c0012f1d:	56                   	push   esi
c0012f1e:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012f25:	e8 d6 d6 fe ff       	call   c0000600 <strcpy>
c0012f2a:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f2f:	8d 50 01             	lea    edx,[eax+0x1]
c0012f32:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012f39:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012f3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f43:	83 c4 0c             	add    esp,0xc
c0012f46:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012f4d:	6a 01                	push   0x1
c0012f4f:	53                   	push   ebx
c0012f50:	56                   	push   esi
c0012f51:	e8 c2 f6 ff ff       	call   c0012618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f5a:	83 c4 10             	add    esp,0x10
c0012f5d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f62:	0f 85 89 00 00 00    	jne    c0012ff1 <Thr::loadDLL(char const*, bool)+0x220>
c0012f68:	89 f8                	mov    eax,edi
c0012f6a:	84 c0                	test   al,al
c0012f6c:	74 73                	je     c0012fe1 <Thr::loadDLL(char const*, bool)+0x210>
c0012f6e:	83 ec 0c             	sub    esp,0xc
c0012f71:	68 74 eb 01 c0       	push   0xc001eb74
c0012f76:	e8 8c d2 ff ff       	call   c0010207 <KePanic(char const*)>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	eb 61                	jmp    c0012fe1 <Thr::loadDLL(char const*, bool)+0x210>
c0012f80:	50                   	push   eax
c0012f81:	50                   	push   eax
c0012f82:	89 e8                	mov    eax,ebp
c0012f84:	c1 e0 0c             	shl    eax,0xc
c0012f87:	01 d8                	add    eax,ebx
c0012f89:	50                   	push   eax
c0012f8a:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f90:	e8 c5 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f9a:	a8 60                	test   al,0x60
c0012f9c:	75 11                	jne    c0012faf <Thr::loadDLL(char const*, bool)+0x1de>
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012fa6:	50                   	push   eax
c0012fa7:	e8 87 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012fac:	83 c4 10             	add    esp,0x10
c0012faf:	45                   	inc    ebp
c0012fb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fb8:	05 ff 0f 00 00       	add    eax,0xfff
c0012fbd:	bf 00 00 00 00       	mov    edi,0x0
c0012fc2:	83 d2 00             	adc    edx,0x0
c0012fc5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fc9:	c1 ea 0c             	shr    edx,0xc
c0012fcc:	39 c5                	cmp    ebp,eax
c0012fce:	89 d1                	mov    ecx,edx
c0012fd0:	89 f8                	mov    eax,edi
c0012fd2:	19 c8                	sbb    eax,ecx
c0012fd4:	72 aa                	jb     c0012f80 <Thr::loadDLL(char const*, bool)+0x1af>
c0012fd6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fdb:	75 18                	jne    c0012ff5 <Thr::loadDLL(char const*, bool)+0x224>
c0012fdd:	31 db                	xor    ebx,ebx
c0012fdf:	eb 14                	jmp    c0012ff5 <Thr::loadDLL(char const*, bool)+0x224>
c0012fe1:	83 ec 0c             	sub    esp,0xc
c0012fe4:	68 93 eb 01 c0       	push   0xc001eb93
c0012fe9:	e8 19 d2 ff ff       	call   c0010207 <KePanic(char const*)>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	31 ed                	xor    ebp,ebp
c0012ff3:	eb bb                	jmp    c0012fb0 <Thr::loadDLL(char const*, bool)+0x1df>
c0012ff5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012ffb:	89 d8                	mov    eax,ebx
c0012ffd:	5b                   	pop    ebx
c0012ffe:	5e                   	pop    esi
c0012fff:	5f                   	pop    edi
c0013000:	5d                   	pop    ebp
c0013001:	c3                   	ret    

c0013002 <Thr::executeDLL(unsigned long, void*)>:
c0013002:	56                   	push   esi
c0013003:	53                   	push   ebx
c0013004:	52                   	push   edx
c0013005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013009:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001300d:	85 db                	test   ebx,ebx
c001300f:	75 10                	jne    c0013021 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013011:	83 ec 0c             	sub    esp,0xc
c0013014:	68 af eb 01 c0       	push   0xc001ebaf
c0013019:	e8 e9 d1 ff ff       	call   c0010207 <KePanic(char const*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	50                   	push   eax
c0013022:	50                   	push   eax
c0013023:	53                   	push   ebx
c0013024:	68 d9 eb 01 c0       	push   0xc001ebd9
c0013029:	e8 59 75 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001302e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013032:	89 d8                	mov    eax,ebx
c0013034:	83 c4 14             	add    esp,0x14
c0013037:	5b                   	pop    ebx
c0013038:	5e                   	pop    esi
c0013039:	ff e0                	jmp    eax
c001303b:	90                   	nop

c001303c <userModeEntryPoint(void*)>:
c001303c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013041:	48                   	dec    eax
c0013042:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013047:	75 03                	jne    c001304c <userModeEntryPoint(void*)+0x10>
c0013049:	fb                   	sti    
c001304a:	66 90                	xchg   ax,ax
c001304c:	fb                   	sti    
c001304d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013052:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013055:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001305b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001305f:	e9 db d1 fe ff       	jmp    c000023f <goToUsermode>

c0013064 <changeTSS>:
c0013064:	83 ec 14             	sub    esp,0x14
c0013067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001306c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001306f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013074:	c1 e2 15             	shl    edx,0x15
c0013077:	29 d0                	sub    eax,edx
c0013079:	50                   	push   eax
c001307a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001307f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013085:	05 7c 11 00 00       	add    eax,0x117c
c001308a:	50                   	push   eax
c001308b:	e8 48 5b ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013090:	83 c4 1c             	add    esp,0x1c
c0013093:	c3                   	ret    

c0013094 <switchToThread(ThreadControlBlock*)>:
c0013094:	57                   	push   edi
c0013095:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001309a:	56                   	push   esi
c001309b:	85 c0                	test   eax,eax
c001309d:	53                   	push   ebx
c001309e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130a2:	0f 85 90 00 00 00    	jne    c0013138 <switchToThread(ThreadControlBlock*)+0xa4>
c00130a8:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00130ab:	80 fa ff             	cmp    dl,0xff
c00130ae:	0f 84 80 00 00 00    	je     c0013134 <switchToThread(ThreadControlBlock*)+0xa0>
c00130b4:	81 e2 ff 00 00 00    	and    edx,0xff
c00130ba:	b8 00 04 00 00       	mov    eax,0x400
c00130bf:	29 d0                	sub    eax,edx
c00130c1:	d1 f8                	sar    eax,1
c00130c3:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00130c6:	66 90                	xchg   ax,ax
c00130c8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00130cb:	e8 1d 26 00 00       	call   c00156ed <HalQueryPerformanceCounter()>
c00130d0:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c00130d5:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c00130db:	89 c6                	mov    esi,eax
c00130dd:	89 d7                	mov    edi,edx
c00130df:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c00130e5:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c00130ea:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c00130f0:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c00130f6:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013102:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013108:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001310b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001310e:	01 c6                	add    esi,eax
c0013110:	11 d7                	adc    edi,edx
c0013112:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013115:	83 ec 0c             	sub    esp,0xc
c0013118:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001311b:	53                   	push   ebx
c001311c:	e8 56 d1 fe ff       	call   c0000277 <switchToThreadASM>
c0013121:	0f 20 c0             	mov    eax,cr0
c0013124:	83 c8 08             	or     eax,0x8
c0013127:	0f 22 c0             	mov    cr0,eax
c001312a:	83 c4 10             	add    esp,0x10
c001312d:	5b                   	pop    ebx
c001312e:	5e                   	pop    esi
c001312f:	5f                   	pop    edi
c0013130:	c3                   	ret    
c0013131:	8d 76 00             	lea    esi,[esi+0x0]
c0013134:	31 c0                	xor    eax,eax
c0013136:	eb 90                	jmp    c00130c8 <switchToThread(ThreadControlBlock*)+0x34>
c0013138:	5b                   	pop    ebx
c0013139:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c0013143:	5e                   	pop    esi
c0013144:	5f                   	pop    edi
c0013145:	c3                   	ret    
c0013146:	66 90                	xchg   ax,ax

c0013148 <Process::addArgs(char**)>:
c0013148:	57                   	push   edi
c0013149:	56                   	push   esi
c001314a:	53                   	push   ebx
c001314b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001314f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013153:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001315d:	85 ff                	test   edi,edi
c001315f:	74 43                	je     c00131a4 <Process::addArgs(char**)+0x5c>
c0013161:	8b 07                	mov    eax,DWORD PTR [edi]
c0013163:	85 c0                	test   eax,eax
c0013165:	74 3d                	je     c00131a4 <Process::addArgs(char**)+0x5c>
c0013167:	31 db                	xor    ebx,ebx
c0013169:	8d 76 00             	lea    esi,[esi+0x0]
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	50                   	push   eax
c0013170:	e8 cb d3 fe ff       	call   c0000540 <strlen>
c0013175:	40                   	inc    eax
c0013176:	89 04 24             	mov    DWORD PTR [esp],eax
c0013179:	e8 3b 46 ff ff       	call   c00077b9 <malloc>
c001317e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013185:	5a                   	pop    edx
c0013186:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013189:	59                   	pop    ecx
c001318a:	43                   	inc    ebx
c001318b:	52                   	push   edx
c001318c:	50                   	push   eax
c001318d:	e8 6e d4 fe ff       	call   c0000600 <strcpy>
c0013192:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001319e:	85 c0                	test   eax,eax
c00131a0:	75 ca                	jne    c001316c <Process::addArgs(char**)+0x24>
c00131a2:	66 90                	xchg   ax,ax
c00131a4:	5b                   	pop    ebx
c00131a5:	5e                   	pop    esi
c00131a6:	5f                   	pop    edi
c00131a7:	c3                   	ret    

c00131a8 <Process::Process(char const*, Process*, char**)>:
c00131a8:	56                   	push   esi
c00131a9:	53                   	push   ebx
c00131aa:	83 ec 14             	sub    esp,0x14
c00131ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131b1:	05 0c 02 00 00       	add    eax,0x20c
c00131b6:	bb 07 00 00 00       	mov    ebx,0x7
c00131bb:	89 c6                	mov    esi,eax
c00131bd:	8d 76 00             	lea    esi,[esi+0x0]
c00131c0:	85 db                	test   ebx,ebx
c00131c2:	78 14                	js     c00131d8 <Process::Process(char const*, Process*, char**)+0x30>
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	56                   	push   esi
c00131c8:	e8 9f 98 00 00       	call   c001ca6c <ThreadControlBlock::ThreadControlBlock()>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	83 c6 5f             	add    esi,0x5f
c00131d3:	4b                   	dec    ebx
c00131d4:	eb ea                	jmp    c00131c0 <Process::Process(char const*, Process*, char**)+0x18>
c00131d6:	66 90                	xchg   ax,ax
c00131d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131dc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131e7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131f5:	e8 02 ce ff ff       	call   c000fffc <Krnl::newProcessEnv(Process*)>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	89 c2                	mov    edx,eax
c00131ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013203:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001320d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013216:	a1 8c fb 01 c0       	mov    eax,ds:0xc001fb8c
c001321b:	8d 50 01             	lea    edx,[eax+0x1]
c001321e:	89 15 8c fb 01 c0    	mov    DWORD PTR ds:0xc001fb8c,edx
c0013224:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013228:	89 02                	mov    DWORD PTR [edx],eax
c001322a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013239:	e8 7b 45 ff ff       	call   c00077b9 <malloc>
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	89 c3                	mov    ebx,eax
c0013243:	83 ec 08             	sub    esp,0x8
c0013246:	6a 00                	push   0x0
c0013248:	53                   	push   ebx
c0013249:	e8 d0 6b ff ff       	call   c0009e1e <VAS::VAS(bool)>
c001324e:	83 c4 10             	add    esp,0x10
c0013251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013255:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001325b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001326d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013271:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013277:	e8 f6 d2 ff ff       	call   c0010572 <KeInitSignals()>
c001327c:	89 c2                	mov    edx,eax
c001327e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013282:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013292:	85 c0                	test   eax,eax
c0013294:	74 42                	je     c00132d8 <Process::Process(char const*, Process*, char**)+0x130>
c0013296:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001329a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c4:	05 0c 01 00 00       	add    eax,0x10c
c00132c9:	83 ec 08             	sub    esp,0x8
c00132cc:	52                   	push   edx
c00132cd:	50                   	push   eax
c00132ce:	e8 2d d3 fe ff       	call   c0000600 <strcpy>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	eb 64                	jmp    c001333c <Process::Process(char const*, Process*, char**)+0x194>
c00132d8:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00132e0:	83 ec 0c             	sub    esp,0xc
c00132e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132e7:	e8 cd 44 ff ff       	call   c00077b9 <malloc>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	89 c3                	mov    ebx,eax
c00132f1:	83 ec 08             	sub    esp,0x8
c00132f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f8:	53                   	push   ebx
c00132f9:	e8 fc 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013305:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001330b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001330f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013315:	83 ec 0c             	sub    esp,0xc
c0013318:	50                   	push   eax
c0013319:	e8 7c 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013325:	05 0c 01 00 00       	add    eax,0x10c
c001332a:	83 ec 08             	sub    esp,0x8
c001332d:	68 f8 eb 01 c0       	push   0xc001ebf8
c0013332:	50                   	push   eax
c0013333:	e8 c8 d2 fe ff       	call   c0000600 <strcpy>
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	90                   	nop
c001333c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013340:	83 c0 0c             	add    eax,0xc
c0013343:	83 ec 08             	sub    esp,0x8
c0013346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001334a:	50                   	push   eax
c001334b:	e8 b0 d2 fe ff       	call   c0000600 <strcpy>
c0013350:	83 c4 10             	add    esp,0x10
c0013353:	83 ec 08             	sub    esp,0x8
c0013356:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001335a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001335e:	e8 e5 fd ff ff       	call   c0013148 <Process::addArgs(char**)>
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	83 ec 08             	sub    esp,0x8
c0013369:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001336d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013371:	e8 6c ed ff ff       	call   c00120e2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001337d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013381:	83 f0 01             	xor    eax,0x1
c0013384:	88 c2                	mov    dl,al
c0013386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001338a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013390:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013394:	25 ff 00 00 00       	and    eax,0xff
c0013399:	83 ec 08             	sub    esp,0x8
c001339c:	50                   	push   eax
c001339d:	68 50 ec 01 c0       	push   0xc001ec50
c00133a2:	e8 e0 71 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	90                   	nop
c00133ab:	83 c4 14             	add    esp,0x14
c00133ae:	5b                   	pop    ebx
c00133af:	5e                   	pop    esi
c00133b0:	c3                   	ret    
c00133b1:	90                   	nop
c00133b2:	66 90                	xchg   ax,ax

c00133b4 <Process::Process(bool, char const*, Process*, char**)>:
c00133b4:	56                   	push   esi
c00133b5:	53                   	push   ebx
c00133b6:	83 ec 24             	sub    esp,0x24
c00133b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00133c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c5:	05 0c 02 00 00       	add    eax,0x20c
c00133ca:	bb 07 00 00 00       	mov    ebx,0x7
c00133cf:	89 c6                	mov    esi,eax
c00133d1:	8d 76 00             	lea    esi,[esi+0x0]
c00133d4:	85 db                	test   ebx,ebx
c00133d6:	78 14                	js     c00133ec <Process::Process(bool, char const*, Process*, char**)+0x38>
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	56                   	push   esi
c00133dc:	e8 8b 96 00 00       	call   c001ca6c <ThreadControlBlock::ThreadControlBlock()>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	83 c6 5f             	add    esi,0x5f
c00133e7:	4b                   	dec    ebx
c00133e8:	eb ea                	jmp    c00133d4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133ea:	66 90                	xchg   ax,ax
c00133ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133fb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013409:	e8 ee cb ff ff       	call   c000fffc <Krnl::newProcessEnv(Process*)>
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	89 c2                	mov    edx,eax
c0013413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013417:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001341d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013421:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001342a:	a1 8c fb 01 c0       	mov    eax,ds:0xc001fb8c
c001342f:	8d 50 01             	lea    edx,[eax+0x1]
c0013432:	89 15 8c fb 01 c0    	mov    DWORD PTR ds:0xc001fb8c,edx
c0013438:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001343c:	89 02                	mov    DWORD PTR [edx],eax
c001343e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001344d:	e8 67 43 ff ff       	call   c00077b9 <malloc>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	89 c3                	mov    ebx,eax
c0013457:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001345b:	25 ff 00 00 00       	and    eax,0xff
c0013460:	83 ec 08             	sub    esp,0x8
c0013463:	50                   	push   eax
c0013464:	53                   	push   ebx
c0013465:	e8 b4 69 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c001346a:	83 c4 10             	add    esp,0x10
c001346d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013471:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001347b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013489:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001348d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013493:	e8 da d0 ff ff       	call   c0010572 <KeInitSignals()>
c0013498:	89 c2                	mov    edx,eax
c001349a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001349e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00134a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134ae:	85 c0                	test   eax,eax
c00134b0:	74 42                	je     c00134f4 <Process::Process(bool, char const*, Process*, char**)+0x140>
c00134b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134b6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134bc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00134c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00134cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00134d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e0:	05 0c 01 00 00       	add    eax,0x10c
c00134e5:	83 ec 08             	sub    esp,0x8
c00134e8:	52                   	push   edx
c00134e9:	50                   	push   eax
c00134ea:	e8 11 d1 fe ff       	call   c0000600 <strcpy>
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	eb 64                	jmp    c0013558 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134f4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013503:	e8 b1 42 ff ff       	call   c00077b9 <malloc>
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	89 c3                	mov    ebx,eax
c001350d:	83 ec 08             	sub    esp,0x8
c0013510:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013514:	53                   	push   ebx
c0013515:	e8 e0 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001351a:	83 c4 10             	add    esp,0x10
c001351d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013521:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001352b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013531:	83 ec 0c             	sub    esp,0xc
c0013534:	50                   	push   eax
c0013535:	e8 60 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001353a:	83 c4 10             	add    esp,0x10
c001353d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013541:	05 0c 01 00 00       	add    eax,0x10c
c0013546:	83 ec 08             	sub    esp,0x8
c0013549:	68 f8 eb 01 c0       	push   0xc001ebf8
c001354e:	50                   	push   eax
c001354f:	e8 ac d0 fe ff       	call   c0000600 <strcpy>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	90                   	nop
c0013558:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001355c:	83 c0 0c             	add    eax,0xc
c001355f:	83 ec 08             	sub    esp,0x8
c0013562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013566:	50                   	push   eax
c0013567:	e8 94 d0 fe ff       	call   c0000600 <strcpy>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	83 ec 08             	sub    esp,0x8
c0013572:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013576:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001357a:	e8 c9 fb ff ff       	call   c0013148 <Process::addArgs(char**)>
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	90                   	nop
c0013583:	83 c4 24             	add    esp,0x24
c0013586:	5b                   	pop    ebx
c0013587:	5e                   	pop    esi
c0013588:	c3                   	ret    
c0013589:	8d 76 00             	lea    esi,[esi+0x0]

c001358c <taskStartupFunction>:
c001358c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013591:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013594:	c3                   	ret    
c0013595:	90                   	nop
c0013596:	66 90                	xchg   ax,ax

c0013598 <Semaphore::Semaphore(int)>:
c0013598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001359c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135a0:	89 10                	mov    DWORD PTR [eax],edx
c00135a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135a6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00135ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135c3:	90                   	nop
c00135c4:	c3                   	ret    
c00135c5:	90                   	nop
c00135c6:	66 90                	xchg   ax,ax

c00135c8 <Mutex::Mutex()>:
c00135c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135cc:	6a 01                	push   0x1
c00135ce:	50                   	push   eax
c00135cf:	e8 c4 ff ff ff       	call   c0013598 <Semaphore::Semaphore(int)>
c00135d4:	83 c4 08             	add    esp,0x8
c00135d7:	90                   	nop
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop
c00135da:	66 90                	xchg   ax,ax

c00135dc <Process::createThread(void (*)(void*), void*, int)>:
c00135dc:	57                   	push   edi
c00135dd:	31 c9                	xor    ecx,ecx
c00135df:	56                   	push   esi
c00135e0:	53                   	push   ebx
c00135e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135e5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135ec:	89 f2                	mov    edx,esi
c00135ee:	66 90                	xchg   ax,ax
c00135f0:	31 c0                	xor    eax,eax
c00135f2:	66 89 d0             	mov    ax,dx
c00135f5:	83 e2 01             	and    edx,0x1
c00135f8:	74 12                	je     c001360c <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135fa:	d1 f8                	sar    eax,1
c00135fc:	41                   	inc    ecx
c00135fd:	89 c2                	mov    edx,eax
c00135ff:	83 f9 10             	cmp    ecx,0x10
c0013602:	75 ec                	jne    c00135f0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013604:	31 db                	xor    ebx,ebx
c0013606:	89 d8                	mov    eax,ebx
c0013608:	5b                   	pop    ebx
c0013609:	5e                   	pop    esi
c001360a:	5f                   	pop    edi
c001360b:	c3                   	ret    
c001360c:	b8 01 00 00 00       	mov    eax,0x1
c0013611:	d3 e0                	shl    eax,cl
c0013613:	09 c6                	or     esi,eax
c0013615:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013618:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001361f:	01 c0                	add    eax,eax
c0013621:	01 c8                	add    eax,ecx
c0013623:	8d 04 80             	lea    eax,[eax+eax*4]
c0013626:	01 d8                	add    eax,ebx
c0013628:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001362f:	75 0b                	jne    c001363c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013631:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001363b:	90                   	nop
c001363c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013642:	83 ec 08             	sub    esp,0x8
c0013645:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013648:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001364b:	01 c0                	add    eax,eax
c001364d:	01 c8                	add    eax,ecx
c001364f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013652:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013655:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001365b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013661:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013665:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001366b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013671:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013678:	89 ca                	mov    edx,ecx
c001367a:	f7 da                	neg    edx
c001367c:	c1 e2 15             	shl    edx,0x15
c001367f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013685:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001368b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001368f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013699:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001369f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00136a3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00136a9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00136b3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00136bd:	53                   	push   ebx
c00136be:	68 84 51 02 c0       	push   0xc0025184
c00136c3:	e8 44 91 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	89 d8                	mov    eax,ebx
c00136cd:	5b                   	pop    ebx
c00136ce:	5e                   	pop    esi
c00136cf:	5f                   	pop    edi
c00136d0:	c3                   	ret    
c00136d1:	90                   	nop
c00136d2:	66 90                	xchg   ax,ax

c00136d4 <Process::createUserThread()>:
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	68 80 00 00 00       	push   0x80
c00136dc:	6a 00                	push   0x0
c00136de:	68 3c 30 01 c0       	push   0xc001303c
c00136e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e7:	50                   	push   eax
c00136e8:	e8 ef fe ff ff       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c00136ed:	83 c4 1c             	add    esp,0x1c
c00136f0:	c3                   	ret    
c00136f1:	8d 76 00             	lea    esi,[esi+0x0]

c00136f4 <setupMultitasking(void (*)())>:
c00136f4:	56                   	push   esi
c00136f5:	53                   	push   ebx
c00136f6:	53                   	push   ebx
c00136f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136fb:	eb 13                	jmp    c0013710 <setupMultitasking(void (*)())+0x1c>
c00136fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013700:	83 ec 0c             	sub    esp,0xc
c0013703:	68 84 51 02 c0       	push   0xc0025184
c0013708:	e8 47 90 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001370d:	83 c4 10             	add    esp,0x10
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	68 84 51 02 c0       	push   0xc0025184
c0013718:	e8 13 90 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	84 c0                	test   al,al
c0013722:	74 dc                	je     c0013700 <setupMultitasking(void (*)())+0xc>
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	68 24 07 00 00       	push   0x724
c001372c:	e8 88 40 ff ff       	call   c00077b9 <malloc>
c0013731:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013738:	89 c3                	mov    ebx,eax
c001373a:	6a 00                	push   0x0
c001373c:	68 fc eb 01 c0       	push   0xc001ebfc
c0013741:	6a 01                	push   0x1
c0013743:	50                   	push   eax
c0013744:	e8 6b fc ff ff       	call   c00133b4 <Process::Process(bool, char const*, Process*, char**)>
c0013749:	83 c4 14             	add    esp,0x14
c001374c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013752:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c0013758:	50                   	push   eax
c0013759:	e8 99 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001375e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013766:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013770:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013779:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013783:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013789:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001378f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013799:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00137a3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00137ad:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00137b3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00137b9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00137c3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00137c9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00137d3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00137d9:	5a                   	pop    edx
c00137da:	59                   	pop    ecx
c00137db:	68 f8 eb 01 c0       	push   0xc001ebf8
c00137e0:	50                   	push   eax
c00137e1:	e8 1a ce fe ff       	call   c0000600 <strcpy>
c00137e6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137ed:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137f1:	83 c4 14             	add    esp,0x14
c00137f4:	5b                   	pop    ebx
c00137f5:	5e                   	pop    esi
c00137f6:	e9 6e ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137fb:	90                   	nop

c00137fc <schedule()>:
c00137fc:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013802:	85 d2                	test   edx,edx
c0013804:	74 0e                	je     c0013814 <schedule()+0x18>
c0013806:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c0013810:	c3                   	ret    
c0013811:	8d 76 00             	lea    esi,[esi+0x0]
c0013814:	53                   	push   ebx
c0013815:	83 ec 14             	sub    esp,0x14
c0013818:	68 84 51 02 c0       	push   0xc0025184
c001381d:	e8 0e 8f 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	84 c0                	test   al,al
c0013827:	75 3b                	jne    c0013864 <schedule()+0x68>
c0013829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001382e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013831:	4a                   	dec    edx
c0013832:	74 38                	je     c001386c <schedule()+0x70>
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	68 84 51 02 c0       	push   0xc0025184
c001383c:	e8 0b 8f 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013841:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013848:	89 c3                	mov    ebx,eax
c001384a:	e8 05 8f 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001384f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013856:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013859:	e8 36 f8 ff ff       	call   c0013094 <switchToThread(ThreadControlBlock*)>
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	8d 76 00             	lea    esi,[esi+0x0]
c0013864:	83 c4 08             	add    esp,0x8
c0013867:	5b                   	pop    ebx
c0013868:	c3                   	ret    
c0013869:	8d 76 00             	lea    esi,[esi+0x0]
c001386c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013873:	83 ec 08             	sub    esp,0x8
c0013876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001387b:	50                   	push   eax
c001387c:	68 84 51 02 c0       	push   0xc0025184
c0013881:	e8 86 8f 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	eb a9                	jmp    c0013834 <schedule()+0x38>
c001388b:	90                   	nop

c001388c <Semaphore::tryAcquire()>:
c001388c:	53                   	push   ebx
c001388d:	83 ec 08             	sub    esp,0x8
c0013890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013894:	fa                   	cli    
c0013895:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001389a:	8d 50 01             	lea    edx,[eax+0x1]
c001389d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00138a3:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00138a9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00138ac:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c00138b2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00138b5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00138b7:	7c 33                	jl     c00138ec <Semaphore::tryAcquire()+0x60>
c00138b9:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138bf:	85 d2                	test   edx,edx
c00138c1:	75 0d                	jne    c00138d0 <Semaphore::tryAcquire()+0x44>
c00138c3:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c00138c9:	85 d2                	test   edx,edx
c00138cb:	75 6b                	jne    c0013938 <Semaphore::tryAcquire()+0xac>
c00138cd:	8d 76 00             	lea    esi,[esi+0x0]
c00138d0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138d5:	85 c0                	test   eax,eax
c00138d7:	74 0b                	je     c00138e4 <Semaphore::tryAcquire()+0x58>
c00138d9:	8d 76 00             	lea    esi,[esi+0x0]
c00138dc:	31 c0                	xor    eax,eax
c00138de:	83 c4 08             	add    esp,0x8
c00138e1:	5b                   	pop    ebx
c00138e2:	c3                   	ret    
c00138e3:	90                   	nop
c00138e4:	fb                   	sti    
c00138e5:	83 c4 08             	add    esp,0x8
c00138e8:	5b                   	pop    ebx
c00138e9:	c3                   	ret    
c00138ea:	66 90                	xchg   ax,ax
c00138ec:	43                   	inc    ebx
c00138ed:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c00138f3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138f6:	85 d2                	test   edx,edx
c00138f8:	75 22                	jne    c001391c <Semaphore::tryAcquire()+0x90>
c00138fa:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c0013900:	85 c9                	test   ecx,ecx
c0013902:	74 18                	je     c001391c <Semaphore::tryAcquire()+0x90>
c0013904:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001390e:	e8 e9 fe ff ff       	call   c00137fc <schedule()>
c0013913:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013918:	48                   	dec    eax
c0013919:	8d 76 00             	lea    esi,[esi+0x0]
c001391c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013921:	85 c0                	test   eax,eax
c0013923:	75 0b                	jne    c0013930 <Semaphore::tryAcquire()+0xa4>
c0013925:	fb                   	sti    
c0013926:	b0 01                	mov    al,0x1
c0013928:	83 c4 08             	add    esp,0x8
c001392b:	5b                   	pop    ebx
c001392c:	c3                   	ret    
c001392d:	8d 76 00             	lea    esi,[esi+0x0]
c0013930:	b0 01                	mov    al,0x1
c0013932:	83 c4 08             	add    esp,0x8
c0013935:	5b                   	pop    ebx
c0013936:	c3                   	ret    
c0013937:	90                   	nop
c0013938:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013942:	e8 b5 fe ff ff       	call   c00137fc <schedule()>
c0013947:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001394c:	48                   	dec    eax
c001394d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013952:	85 c0                	test   eax,eax
c0013954:	75 86                	jne    c00138dc <Semaphore::tryAcquire()+0x50>
c0013956:	eb 8c                	jmp    c00138e4 <Semaphore::tryAcquire()+0x58>

c0013958 <Semaphore::assertLocked(char const*)>:
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001395f:	fa                   	cli    
c0013960:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013966:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001396b:	8d 48 01             	lea    ecx,[eax+0x1]
c001396e:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013974:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013976:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013979:	7c 29                	jl     c00139a4 <Semaphore::assertLocked(char const*)+0x4c>
c001397b:	90                   	nop
c001397c:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013981:	85 c0                	test   eax,eax
c0013983:	75 0b                	jne    c0013990 <Semaphore::assertLocked(char const*)+0x38>
c0013985:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001398a:	85 c0                	test   eax,eax
c001398c:	75 2e                	jne    c00139bc <Semaphore::assertLocked(char const*)+0x64>
c001398e:	66 90                	xchg   ax,ax
c0013990:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013995:	48                   	dec    eax
c0013996:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001399b:	75 03                	jne    c00139a0 <Semaphore::assertLocked(char const*)+0x48>
c001399d:	fb                   	sti    
c001399e:	66 90                	xchg   ax,ax
c00139a0:	83 c4 0c             	add    esp,0xc
c00139a3:	c3                   	ret    
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139ab:	52                   	push   edx
c00139ac:	e8 56 c8 ff ff       	call   c0010207 <KePanic(char const*)>
c00139b1:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	48                   	dec    eax
c00139ba:	eb c0                	jmp    c001397c <Semaphore::assertLocked(char const*)+0x24>
c00139bc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139c6:	e8 31 fe ff ff       	call   c00137fc <schedule()>
c00139cb:	eb c3                	jmp    c0013990 <Semaphore::assertLocked(char const*)+0x38>
c00139cd:	8d 76 00             	lea    esi,[esi+0x0]

c00139d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139df:	e8 18 fe ff ff       	call   c00137fc <schedule()>
c00139e4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139e9:	48                   	dec    eax
c00139ea:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139ef:	75 03                	jne    c00139f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139f1:	fb                   	sti    
c00139f2:	66 90                	xchg   ax,ax
c00139f4:	83 c4 0c             	add    esp,0xc
c00139f7:	c3                   	ret    

c00139f8 <blockTask(TaskState)>:
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	fa                   	cli    
c00139fc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a0b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a0e:	e8 e9 fd ff ff       	call   c00137fc <schedule()>
c0013a13:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a18:	48                   	dec    eax
c0013a19:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a1e:	75 04                	jne    c0013a24 <blockTask(TaskState)+0x2c>
c0013a20:	fb                   	sti    
c0013a21:	8d 76 00             	lea    esi,[esi+0x0]
c0013a24:	83 c4 0c             	add    esp,0xc
c0013a27:	c3                   	ret    

c0013a28 <waitTask(int, int*, int)>:
c0013a28:	83 ec 18             	sub    esp,0x18
c0013a2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a34:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013a37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a40:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a43:	6a 07                	push   0x7
c0013a45:	e8 ae ff ff ff       	call   c00139f8 <blockTask(TaskState)>
c0013a4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a4f:	83 c4 10             	add    esp,0x10
c0013a52:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a55:	85 d2                	test   edx,edx
c0013a57:	74 0b                	je     c0013a64 <waitTask(int, int*, int)+0x3c>
c0013a59:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a5c:	89 02                	mov    DWORD PTR [edx],eax
c0013a5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a63:	90                   	nop
c0013a64:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a67:	83 c4 0c             	add    esp,0xc
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <milliTenthSleepUntil(unsigned int)>:
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a73:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a79:	76 05                	jbe    c0013a80 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a7b:	90                   	nop
c0013a7c:	83 c4 0c             	add    esp,0xc
c0013a7f:	c3                   	ret    
c0013a80:	fa                   	cli    
c0013a81:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a87:	83 ec 08             	sub    esp,0x8
c0013a8a:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a96:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a9f:	52                   	push   edx
c0013aa0:	68 78 51 02 c0       	push   0xc0025178
c0013aa5:	e8 62 8d 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013aaa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ab1:	e8 42 ff ff ff       	call   c00139f8 <blockTask(TaskState)>
c0013ab6:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	48                   	dec    eax
c0013abf:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013ac4:	85 c0                	test   eax,eax
c0013ac6:	75 0c                	jne    c0013ad4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013ac8:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013acd:	85 c0                	test   eax,eax
c0013acf:	75 17                	jne    c0013ae8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ad9:	48                   	dec    eax
c0013ada:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013adf:	75 9b                	jne    c0013a7c <milliTenthSleepUntil(unsigned int)+0x10>
c0013ae1:	fb                   	sti    
c0013ae2:	83 c4 0c             	add    esp,0xc
c0013ae5:	c3                   	ret    
c0013ae6:	66 90                	xchg   ax,ax
c0013ae8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013af2:	e8 05 fd ff ff       	call   c00137fc <schedule()>
c0013af7:	eb db                	jmp    c0013ad4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013af9:	8d 76 00             	lea    esi,[esi+0x0]

c0013afc <milliTenthSleep(unsigned int)>:
c0013afc:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013b01:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b05:	e9 62 ff ff ff       	jmp    c0013a6c <milliTenthSleepUntil(unsigned int)>
c0013b0a:	66 90                	xchg   ax,ax

c0013b0c <sleep(unsigned int)>:
c0013b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b10:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b13:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b16:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b19:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b1c:	c1 e0 04             	shl    eax,0x4
c0013b1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b23:	eb d7                	jmp    c0013afc <milliTenthSleep(unsigned int)>
c0013b25:	90                   	nop
c0013b26:	66 90                	xchg   ax,ax

c0013b28 <Semaphore::acquire()>:
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b2f:	fa                   	cli    
c0013b30:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b35:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013b3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b3e:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013b44:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b47:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b49:	7d 2d                	jge    c0013b78 <Semaphore::acquire()+0x50>
c0013b4b:	41                   	inc    ecx
c0013b4c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b4f:	90                   	nop
c0013b50:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b55:	85 c0                	test   eax,eax
c0013b57:	75 0b                	jne    c0013b64 <Semaphore::acquire()+0x3c>
c0013b59:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b5e:	85 c0                	test   eax,eax
c0013b60:	75 62                	jne    c0013bc4 <Semaphore::acquire()+0x9c>
c0013b62:	66 90                	xchg   ax,ax
c0013b64:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b69:	48                   	dec    eax
c0013b6a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b6f:	75 03                	jne    c0013b74 <Semaphore::acquire()+0x4c>
c0013b71:	fb                   	sti    
c0013b72:	66 90                	xchg   ax,ax
c0013b74:	83 c4 0c             	add    esp,0xc
c0013b77:	c3                   	ret    
c0013b78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b84:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b87:	85 c9                	test   ecx,ecx
c0013b89:	74 4d                	je     c0013bd8 <Semaphore::acquire()+0xb0>
c0013b8b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b94:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b97:	90                   	nop
c0013b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013ba3:	68 78 ec 01 c0       	push   0xc001ec78
c0013ba8:	e8 da 69 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0013bad:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013bb4:	e8 3f fe ff ff       	call   c00139f8 <blockTask(TaskState)>
c0013bb9:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	48                   	dec    eax
c0013bc2:	eb 8c                	jmp    c0013b50 <Semaphore::acquire()+0x28>
c0013bc4:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013bce:	e8 29 fc ff ff       	call   c00137fc <schedule()>
c0013bd3:	eb 8f                	jmp    c0013b64 <Semaphore::acquire()+0x3c>
c0013bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bdd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013be0:	eb b6                	jmp    c0013b98 <Semaphore::acquire()+0x70>
c0013be2:	66 90                	xchg   ax,ax

c0013be4 <taskReturned>:
c0013be4:	83 ec 18             	sub    esp,0x18
c0013be7:	68 98 ec 01 c0       	push   0xc001ec98
c0013bec:	e8 16 c6 ff ff       	call   c0010207 <KePanic(char const*)>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	6a 02                	push   0x2
c0013bf9:	e8 fa fd ff ff       	call   c00139f8 <blockTask(TaskState)>
c0013bfe:	fa                   	cli    
c0013bff:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c05:	e8 f2 fb ff ff       	call   c00137fc <schedule()>
c0013c0a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	48                   	dec    eax
c0013c13:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	75 d8                	jne    c0013bf4 <taskReturned+0x10>
c0013c1c:	fb                   	sti    
c0013c1d:	eb d5                	jmp    c0013bf4 <taskReturned+0x10>
c0013c1f:	90                   	nop

c0013c20 <Thr::processFromPID(int)>:
c0013c20:	57                   	push   edi
c0013c21:	56                   	push   esi
c0013c22:	53                   	push   ebx
c0013c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c27:	fa                   	cli    
c0013c28:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c2e:	83 ec 0c             	sub    esp,0xc
c0013c31:	68 84 51 02 c0       	push   0xc0025184
c0013c36:	e8 11 8b 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	89 c7                	mov    edi,eax
c0013c40:	eb 16                	jmp    c0013c58 <Thr::processFromPID(int)+0x38>
c0013c42:	66 90                	xchg   ax,ax
c0013c44:	83 ec 0c             	sub    esp,0xc
c0013c47:	68 84 51 02 c0       	push   0xc0025184
c0013c4c:	e8 fb 8a 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	39 f8                	cmp    eax,edi
c0013c56:	74 4c                	je     c0013ca4 <Thr::processFromPID(int)+0x84>
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	68 84 51 02 c0       	push   0xc0025184
c0013c60:	e8 e7 8a 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c65:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c6c:	89 c3                	mov    ebx,eax
c0013c6e:	e8 e1 8a 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c73:	58                   	pop    eax
c0013c74:	5a                   	pop    edx
c0013c75:	53                   	push   ebx
c0013c76:	68 84 51 02 c0       	push   0xc0025184
c0013c7b:	e8 8c 8b 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	39 30                	cmp    DWORD PTR [eax],esi
c0013c88:	75 ba                	jne    c0013c44 <Thr::processFromPID(int)+0x24>
c0013c8a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c8f:	48                   	dec    eax
c0013c90:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c95:	74 09                	je     c0013ca0 <Thr::processFromPID(int)+0x80>
c0013c97:	90                   	nop
c0013c98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c9b:	5b                   	pop    ebx
c0013c9c:	5e                   	pop    esi
c0013c9d:	5f                   	pop    edi
c0013c9e:	c3                   	ret    
c0013c9f:	90                   	nop
c0013ca0:	fb                   	sti    
c0013ca1:	eb f5                	jmp    c0013c98 <Thr::processFromPID(int)+0x78>
c0013ca3:	90                   	nop
c0013ca4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ca9:	48                   	dec    eax
c0013caa:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013caf:	75 07                	jne    c0013cb8 <Thr::processFromPID(int)+0x98>
c0013cb1:	fb                   	sti    
c0013cb2:	5b                   	pop    ebx
c0013cb3:	5e                   	pop    esi
c0013cb4:	5f                   	pop    edi
c0013cb5:	c3                   	ret    
c0013cb6:	66 90                	xchg   ax,ax
c0013cb8:	5b                   	pop    ebx
c0013cb9:	31 c0                	xor    eax,eax
c0013cbb:	5e                   	pop    esi
c0013cbc:	5f                   	pop    edi
c0013cbd:	c3                   	ret    
c0013cbe:	66 90                	xchg   ax,ax

c0013cc0 <unblockTask(ThreadControlBlock*)>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 08             	sub    esp,0x8
c0013cc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc8:	fa                   	cli    
c0013cc9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ccf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cd2:	85 c0                	test   eax,eax
c0013cd4:	74 66                	je     c0013d3c <unblockTask(ThreadControlBlock*)+0x7c>
c0013cd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cd9:	48                   	dec    eax
c0013cda:	74 38                	je     c0013d14 <unblockTask(ThreadControlBlock*)+0x54>
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	68 84 51 02 c0       	push   0xc0025184
c0013ce4:	e8 63 8a 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	85 c0                	test   eax,eax
c0013cee:	75 1c                	jne    c0013d0c <unblockTask(ThreadControlBlock*)+0x4c>
c0013cf0:	eb 5e                	jmp    c0013d50 <unblockTask(ThreadControlBlock*)+0x90>
c0013cf2:	66 90                	xchg   ax,ax
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	50                   	push   eax
c0013cf8:	68 84 51 02 c0       	push   0xc0025184
c0013cfd:	e8 fa 8d 00 00       	call   c001cafc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d02:	83 c4 10             	add    esp,0x10
c0013d05:	85 c0                	test   eax,eax
c0013d07:	74 47                	je     c0013d50 <unblockTask(ThreadControlBlock*)+0x90>
c0013d09:	8d 76 00             	lea    esi,[esi+0x0]
c0013d0c:	39 c3                	cmp    ebx,eax
c0013d0e:	75 e4                	jne    c0013cf4 <unblockTask(ThreadControlBlock*)+0x34>
c0013d10:	eb 12                	jmp    c0013d24 <unblockTask(ThreadControlBlock*)+0x64>
c0013d12:	66 90                	xchg   ax,ax
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	68 1a ec 01 c0       	push   0xc001ec1a
c0013d1c:	e8 66 68 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0013d21:	83 c4 10             	add    esp,0x10
c0013d24:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d29:	48                   	dec    eax
c0013d2a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d2f:	75 03                	jne    c0013d34 <unblockTask(ThreadControlBlock*)+0x74>
c0013d31:	fb                   	sti    
c0013d32:	66 90                	xchg   ax,ax
c0013d34:	83 c4 08             	add    esp,0x8
c0013d37:	5b                   	pop    ebx
c0013d38:	c3                   	ret    
c0013d39:	8d 76 00             	lea    esi,[esi+0x0]
c0013d3c:	83 ec 0c             	sub    esp,0xc
c0013d3f:	68 03 ec 01 c0       	push   0xc001ec03
c0013d44:	e8 3e 68 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	eb d6                	jmp    c0013d24 <unblockTask(ThreadControlBlock*)+0x64>
c0013d4e:	66 90                	xchg   ax,ax
c0013d50:	83 ec 08             	sub    esp,0x8
c0013d53:	53                   	push   ebx
c0013d54:	68 84 51 02 c0       	push   0xc0025184
c0013d59:	e8 ae 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	eb c1                	jmp    c0013d24 <unblockTask(ThreadControlBlock*)+0x64>
c0013d63:	90                   	nop

c0013d64 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d64:	55                   	push   ebp
c0013d65:	57                   	push   edi
c0013d66:	56                   	push   esi
c0013d67:	53                   	push   ebx
c0013d68:	83 ec 1c             	sub    esp,0x1c
c0013d6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d6f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d72:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d78:	85 ed                	test   ebp,ebp
c0013d7a:	7e 24                	jle    c0013da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d7c:	31 f6                	xor    esi,esi
c0013d7e:	66 90                	xchg   ax,ax
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d8a:	46                   	inc    esi
c0013d8b:	57                   	push   edi
c0013d8c:	e8 38 3a ff ff       	call   c00077c9 <free>
c0013d91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d94:	83 c4 10             	add    esp,0x10
c0013d97:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d9d:	7f e1                	jg     c0013d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d9f:	90                   	nop
c0013da0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013daa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013daf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013db2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013db5:	d3 c0                	rol    eax,cl
c0013db7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013dbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013dc1:	89 f7                	mov    edi,esi
c0013dc3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013dcb:	0f 85 77 01 00 00    	jne    c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013dd1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013dd7:	85 ed                	test   ebp,ebp
c0013dd9:	74 1d                	je     c0013df8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013ddb:	83 ec 0c             	sub    esp,0xc
c0013dde:	55                   	push   ebp
c0013ddf:	e8 34 c1 ff ff       	call   c000ff18 <EnvVarContainer::~EnvVarContainer()>
c0013de4:	59                   	pop    ecx
c0013de5:	5e                   	pop    esi
c0013de6:	6a 0c                	push   0xc
c0013de8:	55                   	push   ebp
c0013de9:	e8 a3 66 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c0013dee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013df1:	83 c4 10             	add    esp,0x10
c0013df4:	89 f7                	mov    edi,esi
c0013df6:	66 90                	xchg   ax,ax
c0013df8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dfe:	85 c0                	test   eax,eax
c0013e00:	0f 84 b6 00 00 00    	je     c0013ebc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e06:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e0d:	31 c9                	xor    ecx,ecx
c0013e0f:	eb 17                	jmp    c0013e28 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e11:	8d 76 00             	lea    esi,[esi+0x0]
c0013e14:	41                   	inc    ecx
c0013e15:	83 f9 10             	cmp    ecx,0x10
c0013e18:	0f 84 9e 00 00 00    	je     c0013ebc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e1e:	66 90                	xchg   ax,ax
c0013e20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e26:	66 90                	xchg   ax,ax
c0013e28:	31 d2                	xor    edx,edx
c0013e2a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013e31:	d3 fa                	sar    edx,cl
c0013e33:	83 e2 01             	and    edx,0x1
c0013e36:	74 dc                	je     c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e38:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e3b:	01 d2                	add    edx,edx
c0013e3d:	01 ca                	add    edx,ecx
c0013e3f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e42:	01 d0                	add    eax,edx
c0013e44:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e4a:	83 fd 07             	cmp    ebp,0x7
c0013e4d:	75 c5                	jne    c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e4f:	05 40 02 00 00       	add    eax,0x240
c0013e54:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e57:	83 fd ff             	cmp    ebp,0xffffffff
c0013e5a:	0f 8c f0 00 00 00    	jl     c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e60:	0f 84 ae 01 00 00    	je     c0014014 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e66:	85 ed                	test   ebp,ebp
c0013e68:	0f 84 92 01 00 00    	je     c0014000 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e6e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e70:	75 a2                	jne    c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e72:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e7c:	01 d0                	add    eax,edx
c0013e7e:	66 90                	xchg   ax,ax
c0013e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e96:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e9d:	50                   	push   eax
c0013e9e:	e8 1d fe ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ea9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ead:	89 f7                	mov    edi,esi
c0013eaf:	41                   	inc    ecx
c0013eb0:	83 f9 10             	cmp    ecx,0x10
c0013eb3:	0f 85 67 ff ff ff    	jne    c0013e20 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ebc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013ec2:	85 c0                	test   eax,eax
c0013ec4:	74 62                	je     c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ec6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ecc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013ed2:	74 54                	je     c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	68 84 51 02 c0       	push   0xc0025184
c0013edc:	e8 6b 88 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ee1:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013ee8:	89 c7                	mov    edi,eax
c0013eea:	e8 41 88 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	84 c0                	test   al,al
c0013ef4:	0f 84 ce 00 00 00    	je     c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f05:	85 d2                	test   edx,edx
c0013f07:	74 0f                	je     c0013f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f09:	83 ec 0c             	sub    esp,0xc
c0013f0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f0e:	52                   	push   edx
c0013f0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f12:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f15:	83 c4 10             	add    esp,0x10
c0013f18:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f22:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f25:	8d 76 00             	lea    esi,[esi+0x0]
c0013f28:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f2e:	85 db                	test   ebx,ebx
c0013f30:	74 16                	je     c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	53                   	push   ebx
c0013f36:	e8 59 58 ff ff       	call   c0009794 <VAS::~VAS()>
c0013f3b:	58                   	pop    eax
c0013f3c:	5a                   	pop    edx
c0013f3d:	6a 14                	push   0x14
c0013f3f:	53                   	push   ebx
c0013f40:	e8 4c 65 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	83 c4 1c             	add    esp,0x1c
c0013f4b:	5b                   	pop    ebx
c0013f4c:	5e                   	pop    esi
c0013f4d:	5f                   	pop    edi
c0013f4e:	5d                   	pop    ebp
c0013f4f:	c3                   	ret    
c0013f50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	68 cc ec 01 c0       	push   0xc001eccc
c0013f5c:	e8 a6 c2 ff ff       	call   c0010207 <KePanic(char const*)>
c0013f61:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f64:	83 c4 10             	add    esp,0x10
c0013f67:	89 f7                	mov    edi,esi
c0013f69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f6d:	e9 a2 fe ff ff       	jmp    c0013e14 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f72:	66 90                	xchg   ax,ax
c0013f74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f7a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f80:	75 1e                	jne    c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f82:	83 ec 0c             	sub    esp,0xc
c0013f85:	68 34 ed 01 c0       	push   0xc001ed34
c0013f8a:	e8 f8 65 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0013f8f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f96:	e8 5d fa ff ff       	call   c00139f8 <blockTask(TaskState)>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	83 ec 08             	sub    esp,0x8
c0013fa3:	56                   	push   esi
c0013fa4:	68 84 51 02 c0       	push   0xc0025184
c0013fa9:	e8 5e 88 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fae:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fb5:	e8 92 87 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fba:	83 c4 10             	add    esp,0x10
c0013fbd:	39 f8                	cmp    eax,edi
c0013fbf:	0f 84 37 ff ff ff    	je     c0013efc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc8:	83 ec 0c             	sub    esp,0xc
c0013fcb:	68 84 51 02 c0       	push   0xc0025184
c0013fd0:	e8 77 87 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fd5:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013fdc:	89 c6                	mov    esi,eax
c0013fde:	e8 71 87 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fe3:	83 c4 10             	add    esp,0x10
c0013fe6:	39 f3                	cmp    ebx,esi
c0013fe8:	74 b6                	je     c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fea:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ff0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013ff6:	75 a8                	jne    c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ff8:	e9 77 ff ff ff       	jmp    c0013f74 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0014000:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	68 00 ed 01 c0       	push   0xc001ed00
c001400c:	e9 4b ff ff ff       	jmp    c0013f5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	8b 36                	mov    esi,DWORD PTR [esi]
c0014016:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001401a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001401d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014020:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014026:	01 d7                	add    edi,edx
c0014028:	89 f8                	mov    eax,edi
c001402a:	e9 51 fe ff ff       	jmp    c0013e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001402f:	90                   	nop

c0014030 <cleanerTaskFunction(void*)>:
c0014030:	53                   	push   ebx
c0014031:	83 ec 08             	sub    esp,0x8
c0014034:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014039:	48                   	dec    eax
c001403a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001403f:	75 03                	jne    c0014044 <cleanerTaskFunction(void*)+0x14>
c0014041:	fb                   	sti    
c0014042:	66 90                	xchg   ax,ax
c0014044:	fa                   	cli    
c0014045:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001404a:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0014051:	8d 50 01             	lea    edx,[eax+0x1]
c0014054:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001405a:	0f 84 ac 00 00 00    	je     c001410c <cleanerTaskFunction(void*)+0xdc>
c0014060:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014065:	85 c0                	test   eax,eax
c0014067:	75 03                	jne    c001406c <cleanerTaskFunction(void*)+0x3c>
c0014069:	fb                   	sti    
c001406a:	66 90                	xchg   ax,ax
c001406c:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c0014073:	fa                   	cli    
c0014074:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001407a:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014080:	fa                   	cli    
c0014081:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014087:	eb 2b                	jmp    c00140b4 <cleanerTaskFunction(void*)+0x84>
c0014089:	8d 76 00             	lea    esi,[esi+0x0]
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	68 6c 51 02 c0       	push   0xc002516c
c0014094:	e8 b3 86 00 00       	call   c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014099:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c00140a0:	89 c3                	mov    ebx,eax
c00140a2:	e8 ad 86 00 00       	call   c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140aa:	e8 b5 fc ff ff       	call   c0013d64 <cleanupTerminatedTask(ThreadControlBlock*)>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	66 90                	xchg   ax,ax
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	68 6c 51 02 c0       	push   0xc002516c
c00140bc:	e8 6f 86 00 00       	call   c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	84 c0                	test   al,al
c00140c6:	74 c4                	je     c001408c <cleanerTaskFunction(void*)+0x5c>
c00140c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140cd:	48                   	dec    eax
c00140ce:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140d3:	75 03                	jne    c00140d8 <cleanerTaskFunction(void*)+0xa8>
c00140d5:	fb                   	sti    
c00140d6:	66 90                	xchg   ax,ax
c00140d8:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00140dd:	48                   	dec    eax
c00140de:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00140e3:	0f 85 4b ff ff ff    	jne    c0014034 <cleanerTaskFunction(void*)+0x4>
c00140e9:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00140ee:	85 c0                	test   eax,eax
c00140f0:	0f 84 3e ff ff ff    	je     c0014034 <cleanerTaskFunction(void*)+0x4>
c00140f6:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014100:	e8 f7 f6 ff ff       	call   c00137fc <schedule()>
c0014105:	e9 2a ff ff ff       	jmp    c0014034 <cleanerTaskFunction(void*)+0x4>
c001410a:	66 90                	xchg   ax,ax
c001410c:	83 ec 0c             	sub    esp,0xc
c001410f:	6a 02                	push   0x2
c0014111:	e8 ba f8 ff ff       	call   c00139d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	e9 4e ff ff ff       	jmp    c001406c <cleanerTaskFunction(void*)+0x3c>
c001411e:	66 90                	xchg   ax,ax

c0014120 <terminateTask(int)>:
c0014120:	83 ec 14             	sub    esp,0x14
c0014123:	fa                   	cli    
c0014124:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001412a:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014130:	fa                   	cli    
c0014131:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014137:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001413b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014140:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014148:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001414b:	50                   	push   eax
c001414c:	68 6c 51 02 c0       	push   0xc002516c
c0014151:	e8 b6 86 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001415b:	83 c4 10             	add    esp,0x10
c001415e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014165:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c001416a:	85 c0                	test   eax,eax
c001416c:	74 5e                	je     c00141cc <terminateTask(int)+0xac>
c001416e:	83 ec 0c             	sub    esp,0xc
c0014171:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c0014178:	50                   	push   eax
c0014179:	e8 42 fb ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	8d 76 00             	lea    esi,[esi+0x0]
c0014184:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014189:	48                   	dec    eax
c001418a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001418f:	75 03                	jne    c0014194 <terminateTask(int)+0x74>
c0014191:	fb                   	sti    
c0014192:	66 90                	xchg   ax,ax
c0014194:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014199:	48                   	dec    eax
c001419a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001419f:	75 0b                	jne    c00141ac <terminateTask(int)+0x8c>
c00141a1:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c00141a8:	75 36                	jne    c00141e0 <terminateTask(int)+0xc0>
c00141aa:	66 90                	xchg   ax,ax
c00141ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141b1:	48                   	dec    eax
c00141b2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141b7:	75 03                	jne    c00141bc <terminateTask(int)+0x9c>
c00141b9:	fb                   	sti    
c00141ba:	66 90                	xchg   ax,ax
c00141bc:	fa                   	cli    
c00141bd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141c3:	90                   	nop
c00141c4:	e8 33 f6 ff ff       	call   c00137fc <schedule()>
c00141c9:	eb e1                	jmp    c00141ac <terminateTask(int)+0x8c>
c00141cb:	90                   	nop
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	68 31 ec 01 c0       	push   0xc001ec31
c00141d4:	e8 ae 63 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	eb a6                	jmp    c0014184 <terminateTask(int)+0x64>
c00141de:	66 90                	xchg   ax,ax
c00141e0:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00141ea:	eb d8                	jmp    c00141c4 <terminateTask(int)+0xa4>

c00141ec <Thr::terminateFromIRQ(int)>:
c00141ec:	83 ec 18             	sub    esp,0x18
c00141ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141f3:	50                   	push   eax
c00141f4:	e8 27 ff ff ff       	call   c0014120 <terminateTask(int)>
c00141f9:	90                   	nop
c00141fa:	66 90                	xchg   ax,ax

c00141fc <Semaphore::release()>:
c00141fc:	83 ec 0c             	sub    esp,0xc
c00141ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014203:	fa                   	cli    
c0014204:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014209:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001420f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014212:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014218:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001421b:	85 c9                	test   ecx,ecx
c001421d:	74 41                	je     c0014260 <Semaphore::release()+0x64>
c001421f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014228:	51                   	push   ecx
c0014229:	e8 92 fa ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c001422e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	48                   	dec    eax
c0014237:	90                   	nop
c0014238:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001423d:	85 c0                	test   eax,eax
c001423f:	75 0b                	jne    c001424c <Semaphore::release()+0x50>
c0014241:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014246:	85 c0                	test   eax,eax
c0014248:	75 1e                	jne    c0014268 <Semaphore::release()+0x6c>
c001424a:	66 90                	xchg   ax,ax
c001424c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014251:	48                   	dec    eax
c0014252:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014257:	75 03                	jne    c001425c <Semaphore::release()+0x60>
c0014259:	fb                   	sti    
c001425a:	66 90                	xchg   ax,ax
c001425c:	83 c4 0c             	add    esp,0xc
c001425f:	c3                   	ret    
c0014260:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014263:	eb d3                	jmp    c0014238 <Semaphore::release()+0x3c>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014272:	e8 85 f5 ff ff       	call   c00137fc <schedule()>
c0014277:	eb d3                	jmp    c001424c <Semaphore::release()+0x50>
c0014279:	8d 76 00             	lea    esi,[esi+0x0]

c001427c <__static_initialization_and_destruction_0(int, int)>:
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014284:	0f 85 8e 00 00 00    	jne    c0014318 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001428a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014292:	0f 85 80 00 00 00    	jne    c0014318 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	68 84 51 02 c0       	push   0xc0025184
c00142a0:	e8 13 88 00 00       	call   c001cab8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142a5:	83 c4 10             	add    esp,0x10
c00142a8:	83 ec 04             	sub    esp,0x4
c00142ab:	68 e4 f7 01 c0       	push   0xc001f7e4
c00142b0:	68 84 51 02 c0       	push   0xc0025184
c00142b5:	68 68 ca 01 c0       	push   0xc001ca68
c00142ba:	e8 82 61 ff ff       	call   c000a441 <__cxa_atexit>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	68 78 51 02 c0       	push   0xc0025178
c00142ca:	e8 e9 87 00 00       	call   c001cab8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142cf:	83 c4 10             	add    esp,0x10
c00142d2:	83 ec 04             	sub    esp,0x4
c00142d5:	68 e4 f7 01 c0       	push   0xc001f7e4
c00142da:	68 78 51 02 c0       	push   0xc0025178
c00142df:	68 68 ca 01 c0       	push   0xc001ca68
c00142e4:	e8 58 61 ff ff       	call   c000a441 <__cxa_atexit>
c00142e9:	83 c4 10             	add    esp,0x10
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	68 6c 51 02 c0       	push   0xc002516c
c00142f4:	e8 bf 87 00 00       	call   c001cab8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	83 ec 04             	sub    esp,0x4
c00142ff:	68 e4 f7 01 c0       	push   0xc001f7e4
c0014304:	68 6c 51 02 c0       	push   0xc002516c
c0014309:	68 68 ca 01 c0       	push   0xc001ca68
c001430e:	e8 2e 61 ff ff       	call   c000a441 <__cxa_atexit>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	66 90                	xchg   ax,ax
c0014318:	90                   	nop
c0014319:	83 c4 0c             	add    esp,0xc
c001431c:	c3                   	ret    
c001431d:	8d 76 00             	lea    esi,[esi+0x0]

c0014320 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014320:	83 ec 0c             	sub    esp,0xc
c0014323:	83 ec 08             	sub    esp,0x8
c0014326:	68 ff ff 00 00       	push   0xffff
c001432b:	6a 01                	push   0x1
c001432d:	e8 4a ff ff ff       	call   c001427c <__static_initialization_and_destruction_0(int, int)>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	83 c4 0c             	add    esp,0xc
c0014338:	c3                   	ret    

c0014339 <Vm::inbv(unsigned short)>:
c0014339:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001433d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014342:	75 06                	jne    c001434a <Vm::inbv(unsigned short)+0x11>
c0014344:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c0014349:	c3                   	ret    
c001434a:	ec                   	in     al,dx
c001434b:	c3                   	ret    

c001434c <Vm::outbv(unsigned short, unsigned char)>:
c001434c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014354:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014359:	75 25                	jne    c0014380 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001435b:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014361:	8d 51 01             	lea    edx,[ecx+0x1]
c0014364:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c001436a:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014370:	83 fa 20             	cmp    edx,0x20
c0014373:	75 0c                	jne    c0014381 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014375:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c001437f:	c3                   	ret    
c0014380:	ee                   	out    dx,al
c0014381:	c3                   	ret    

c0014382 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014382:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014387:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001438c:	c1 e0 04             	shl    eax,0x4
c001438f:	01 d0                	add    eax,edx
c0014391:	c3                   	ret    

c0014392 <Vm::getSegment(unsigned int)>:
c0014392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014396:	c1 e8 10             	shr    eax,0x10
c0014399:	c3                   	ret    

c001439a <Vm::getOffset(unsigned int)>:
c001439a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439e:	c3                   	ret    

c001439f <Vm::mainloop2()>:
c001439f:	83 ec 18             	sub    esp,0x18
c00143a2:	fa                   	cli    
c00143a3:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143a9:	6a 02                	push   0x2
c00143ab:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c00143b2:	e8 19 f6 ff ff       	call   c00139d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143bc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00143c0:	52                   	push   edx
c00143c1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00143c5:	52                   	push   edx
c00143c6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00143ca:	52                   	push   edx
c00143cb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00143cf:	50                   	push   eax
c00143d0:	e8 3a be fe ff       	call   c000020f <goToVM86>
c00143d5:	83 c4 2c             	add    esp,0x2c
c00143d8:	c3                   	ret    

c00143d9 <Vm::mainVm8086Loop(void*)>:
c00143d9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00143de:	48                   	dec    eax
c00143df:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00143e4:	75 01                	jne    c00143e7 <Vm::mainVm8086Loop(void*)+0xe>
c00143e6:	fb                   	sti    
c00143e7:	eb b6                	jmp    c001439f <Vm::mainloop2()>

c00143e9 <Vm::mainloop3(unsigned long)>:
c00143e9:	83 ec 18             	sub    esp,0x18
c00143ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143f0:	fa                   	cli    
c00143f1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00143f7:	6a 02                	push   0x2
c00143f9:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c0014400:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014405:	e8 c6 f5 ff ff       	call   c00139d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001440a:	83 c4 1c             	add    esp,0x1c
c001440d:	eb 90                	jmp    c001439f <Vm::mainloop2()>

c001440f <Vm::initialise8086()>:
c001440f:	83 ec 0c             	sub    esp,0xc
c0014412:	68 80 00 00 00       	push   0x80
c0014417:	6a 00                	push   0x0
c0014419:	68 d9 43 01 c0       	push   0xc00143d9
c001441e:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0014424:	e8 b3 f1 ff ff       	call   c00135dc <Process::createThread(void (*)(void*), void*, int)>
c0014429:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014430:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c0014435:	68 00 01 00 00       	push   0x100
c001443a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001443f:	6a 00                	push   0x0
c0014441:	6a 00                	push   0x0
c0014443:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014449:	e8 a4 57 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001444e:	83 c4 2c             	add    esp,0x2c
c0014451:	c3                   	ret    

c0014452 <Vm::finish8086()>:
c0014452:	53                   	push   ebx
c0014453:	83 ec 08             	sub    esp,0x8
c0014456:	fa                   	cli    
c0014457:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001445d:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c0014464:	75 15                	jne    c001447b <Vm::finish8086()+0x29>
c0014466:	e8 91 f3 ff ff       	call   c00137fc <schedule()>
c001446b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014470:	48                   	dec    eax
c0014471:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014476:	75 de                	jne    c0014456 <Vm::finish8086()+0x4>
c0014478:	fb                   	sti    
c0014479:	eb db                	jmp    c0014456 <Vm::finish8086()+0x4>
c001447b:	83 ec 0c             	sub    esp,0xc
c001447e:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014484:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001448a:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014491:	e8 2a f8 ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c0014496:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001449b:	83 c4 10             	add    esp,0x10
c001449e:	8d 50 ff             	lea    edx,[eax-0x1]
c00144a1:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00144a7:	85 d2                	test   edx,edx
c00144a9:	75 01                	jne    c00144ac <Vm::finish8086()+0x5a>
c00144ab:	fb                   	sti    
c00144ac:	89 d8                	mov    eax,ebx
c00144ae:	83 c4 08             	add    esp,0x8
c00144b1:	5b                   	pop    ebx
c00144b2:	c3                   	ret    

c00144b3 <Vm::getOutput8086(unsigned char*)>:
c00144b3:	57                   	push   edi
c00144b4:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00144ba:	56                   	push   esi
c00144bb:	be e0 51 02 c0       	mov    esi,0xc00251e0
c00144c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144c6:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00144cb:	5e                   	pop    esi
c00144cc:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144d6:	5f                   	pop    edi
c00144d7:	c3                   	ret    

c00144d8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00144d8:	55                   	push   ebp
c00144d9:	57                   	push   edi
c00144da:	56                   	push   esi
c00144db:	53                   	push   ebx
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144ef:	fa                   	cli    
c00144f0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144f6:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144fd:	75 15                	jne    c0014514 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144ff:	e8 f8 f2 ff ff       	call   c00137fc <schedule()>
c0014504:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014509:	48                   	dec    eax
c001450a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001450f:	75 de                	jne    c00144ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014511:	fb                   	sti    
c0014512:	eb db                	jmp    c00144ef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014514:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014519:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014523:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014527:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001452b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001452f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014533:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014537:	0f b7 ff             	movzx  edi,di
c001453a:	0f b7 f6             	movzx  esi,si
c001453d:	50                   	push   eax
c001453e:	6a 20                	push   0x20
c0014540:	6a 00                	push   0x0
c0014542:	68 e0 51 02 c0       	push   0xc00251e0
c0014547:	e8 84 bf fe ff       	call   c00004d0 <memset>
c001454c:	5a                   	pop    edx
c001454d:	59                   	pop    ecx
c001454e:	57                   	push   edi
c001454f:	56                   	push   esi
c0014550:	e8 2d fe ff ff       	call   c0014382 <Vm::realToLinear(unsigned short, unsigned short)>
c0014555:	83 c4 10             	add    esp,0x10
c0014558:	89 c7                	mov    edi,eax
c001455a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001455e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014562:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014564:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014569:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014570:	48                   	dec    eax
c0014571:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014576:	75 01                	jne    c0014579 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014578:	fb                   	sti    
c0014579:	83 ec 0c             	sub    esp,0xc
c001457c:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014582:	e8 39 f7 ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c0014587:	83 c4 1c             	add    esp,0x1c
c001458a:	b0 01                	mov    al,0x1
c001458c:	5b                   	pop    ebx
c001458d:	5e                   	pop    esi
c001458e:	5f                   	pop    edi
c001458f:	5d                   	pop    ebp
c0014590:	c3                   	ret    

c0014591 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014591:	55                   	push   ebp
c0014592:	57                   	push   edi
c0014593:	56                   	push   esi
c0014594:	53                   	push   ebx
c0014595:	83 ec 2c             	sub    esp,0x2c
c0014598:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001459c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00145a0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00145a4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00145a8:	fa                   	cli    
c00145a9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00145af:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c00145b6:	89 f0                	mov    eax,esi
c00145b8:	84 c0                	test   al,al
c00145ba:	75 1d                	jne    c00145d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00145bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00145c0:	e8 37 f2 ff ff       	call   c00137fc <schedule()>
c00145c5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145ce:	48                   	dec    eax
c00145cf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145d4:	75 d2                	jne    c00145a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145d6:	fb                   	sti    
c00145d7:	eb cf                	jmp    c00145a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145d9:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00145de:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00145e8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145ec:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145f0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145f4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145f8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145fc:	50                   	push   eax
c00145fd:	6a 20                	push   0x20
c00145ff:	6a 00                	push   0x0
c0014601:	68 e0 51 02 c0       	push   0xc00251e0
c0014606:	e8 c5 be fe ff       	call   c00004d0 <memset>
c001460b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014612:	e8 a2 31 ff ff       	call   c00077b9 <malloc>
c0014617:	83 c4 0c             	add    esp,0xc
c001461a:	89 c3                	mov    ebx,eax
c001461c:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0014622:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014626:	50                   	push   eax
c0014627:	e8 d0 64 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	85 db                	test   ebx,ebx
c0014631:	75 0a                	jne    c001463d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014633:	83 ec 0c             	sub    esp,0xc
c0014636:	68 5c ed 01 c0       	push   0xc001ed5c
c001463b:	eb 3e                	jmp    c001467b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001463d:	50                   	push   eax
c001463e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014642:	50                   	push   eax
c0014643:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014647:	50                   	push   eax
c0014648:	53                   	push   ebx
c0014649:	e8 1a 68 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c001464e:	83 c4 10             	add    esp,0x10
c0014651:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014656:	74 0a                	je     c0014662 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014658:	83 ec 0c             	sub    esp,0xc
c001465b:	68 70 ed 01 c0       	push   0xc001ed70
c0014660:	eb 19                	jmp    c001467b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014662:	51                   	push   ecx
c0014663:	51                   	push   ecx
c0014664:	6a 01                	push   0x1
c0014666:	53                   	push   ebx
c0014667:	e8 50 65 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	85 c0                	test   eax,eax
c0014671:	74 24                	je     c0014697 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014673:	83 ec 0c             	sub    esp,0xc
c0014676:	68 89 ed 01 c0       	push   0xc001ed89
c001467b:	e8 87 bb ff ff       	call   c0010207 <KePanic(char const*)>
c0014680:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	48                   	dec    eax
c0014689:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001468e:	85 c0                	test   eax,eax
c0014690:	75 01                	jne    c0014693 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014692:	fb                   	sti    
c0014693:	31 f6                	xor    esi,esi
c0014695:	eb 58                	jmp    c00146ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014697:	0f b7 ed             	movzx  ebp,bp
c001469a:	50                   	push   eax
c001469b:	0f b7 ff             	movzx  edi,di
c001469e:	50                   	push   eax
c001469f:	55                   	push   ebp
c00146a0:	57                   	push   edi
c00146a1:	e8 dc fc ff ff       	call   c0014382 <Vm::realToLinear(unsigned short, unsigned short)>
c00146a6:	5a                   	pop    edx
c00146a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00146a9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00146ad:	51                   	push   ecx
c00146ae:	50                   	push   eax
c00146af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00146b7:	53                   	push   ebx
c00146b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00146bb:	83 c4 14             	add    esp,0x14
c00146be:	53                   	push   ebx
c00146bf:	e8 56 65 ff ff       	call   c000ac1a <File::close()>
c00146c4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	48                   	dec    eax
c00146cd:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00146d4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00146d9:	85 c0                	test   eax,eax
c00146db:	75 01                	jne    c00146de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00146dd:	fb                   	sti    
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00146e7:	e8 d4 f5 ff ff       	call   c0013cc0 <unblockTask(ThreadControlBlock*)>
c00146ec:	83 c4 10             	add    esp,0x10
c00146ef:	83 c4 2c             	add    esp,0x2c
c00146f2:	89 f0                	mov    eax,esi
c00146f4:	5b                   	pop    ebx
c00146f5:	5e                   	pop    esi
c00146f6:	5f                   	pop    edi
c00146f7:	5d                   	pop    ebp
c00146f8:	c3                   	ret    

c00146f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146f9:	57                   	push   edi
c00146fa:	56                   	push   esi
c00146fb:	53                   	push   ebx
c00146fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014704:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014708:	83 e8 06             	sub    eax,0x6
c001470b:	0f b7 c0             	movzx  eax,ax
c001470e:	50                   	push   eax
c001470f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014714:	50                   	push   eax
c0014715:	e8 68 fc ff ff       	call   c0014382 <Vm::realToLinear(unsigned short, unsigned short)>
c001471a:	5a                   	pop    edx
c001471b:	5e                   	pop    esi
c001471c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001471f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014722:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014728:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001472b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001472e:	83 c2 02             	add    edx,0x2
c0014731:	66 89 10             	mov    WORD PTR [eax],dx
c0014734:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014737:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001473b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001473e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014742:	89 d6                	mov    esi,edx
c0014744:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001474a:	66 81 e6 ff fd       	and    si,0xfdff
c001474f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014753:	74 07                	je     c001475c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014755:	89 d6                	mov    esi,edx
c0014757:	66 81 ce 00 02       	or     si,0x200
c001475c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014765:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014769:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014771:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014774:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001477c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001477f:	5b                   	pop    ebx
c0014780:	5e                   	pop    esi
c0014781:	5f                   	pop    edi
c0014782:	c3                   	ret    

c0014783 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014783:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014788:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001478d:	c1 e0 04             	shl    eax,0x4
c0014790:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014793:	c3                   	ret    

c0014794 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014799:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001479e:	c1 e0 04             	shl    eax,0x4
c00147a1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00147a5:	c3                   	ret    

c00147a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00147a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147b0:	c1 e0 04             	shl    eax,0x4
c00147b3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00147b6:	c3                   	ret    

c00147b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00147b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147c1:	c1 e0 04             	shl    eax,0x4
c00147c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147c8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00147cb:	c3                   	ret    

c00147cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00147cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147d6:	c1 e0 04             	shl    eax,0x4
c00147d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147dd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147e1:	c3                   	ret    

c00147e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147ec:	c1 e0 04             	shl    eax,0x4
c00147ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147f3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147f6:	c3                   	ret    

c00147f7 <Vm::faultHandler(regs*)>:
c00147f7:	55                   	push   ebp
c00147f8:	57                   	push   edi
c00147f9:	56                   	push   esi
c00147fa:	53                   	push   ebx
c00147fb:	83 ec 1c             	sub    esp,0x1c
c00147fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014802:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014805:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014809:	0f b7 f8             	movzx  edi,ax
c001480c:	52                   	push   edx
c001480d:	0f b7 c0             	movzx  eax,ax
c0014810:	50                   	push   eax
c0014811:	e8 6c fb ff ff       	call   c0014382 <Vm::realToLinear(unsigned short, unsigned short)>
c0014816:	5a                   	pop    edx
c0014817:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001481a:	59                   	pop    ecx
c001481b:	89 c1                	mov    ecx,eax
c001481d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014820:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014824:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014829:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001482d:	0f b7 c5             	movzx  eax,bp
c0014830:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014834:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014838:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001483c:	e8 41 fb ff ff       	call   c0014382 <Vm::realToLinear(unsigned short, unsigned short)>
c0014841:	5e                   	pop    esi
c0014842:	be 06 00 00 00       	mov    esi,0x6
c0014847:	5a                   	pop    edx
c0014848:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001484d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014852:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014855:	80 fa 9d             	cmp    dl,0x9d
c0014858:	0f 84 2c 02 00 00    	je     c0014a8a <Vm::faultHandler(regs*)+0x293>
c001485e:	0f 87 91 00 00 00    	ja     c00148f5 <Vm::faultHandler(regs*)+0xfe>
c0014864:	80 fa 66             	cmp    dl,0x66
c0014867:	0f 84 98 01 00 00    	je     c0014a05 <Vm::faultHandler(regs*)+0x20e>
c001486d:	77 47                	ja     c00148b6 <Vm::faultHandler(regs*)+0xbf>
c001486f:	80 fa 36             	cmp    dl,0x36
c0014872:	0f 84 80 01 00 00    	je     c00149f8 <Vm::faultHandler(regs*)+0x201>
c0014878:	77 1a                	ja     c0014894 <Vm::faultHandler(regs*)+0x9d>
c001487a:	80 fa 26             	cmp    dl,0x26
c001487d:	0f 84 4e 01 00 00    	je     c00149d1 <Vm::faultHandler(regs*)+0x1da>
c0014883:	80 fa 2e             	cmp    dl,0x2e
c0014886:	0f 85 e2 05 00 00    	jne    c0014e6e <Vm::faultHandler(regs*)+0x677>
c001488c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001488f:	31 f6                	xor    esi,esi
c0014891:	41                   	inc    ecx
c0014892:	eb be                	jmp    c0014852 <Vm::faultHandler(regs*)+0x5b>
c0014894:	80 fa 64             	cmp    dl,0x64
c0014897:	0f 84 41 01 00 00    	je     c00149de <Vm::faultHandler(regs*)+0x1e7>
c001489d:	0f 87 48 01 00 00    	ja     c00149eb <Vm::faultHandler(regs*)+0x1f4>
c00148a3:	80 fa 3e             	cmp    dl,0x3e
c00148a6:	0f 85 c2 05 00 00    	jne    c0014e6e <Vm::faultHandler(regs*)+0x677>
c00148ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148af:	be 01 00 00 00       	mov    esi,0x1
c00148b4:	eb db                	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c00148b6:	80 fa 6d             	cmp    dl,0x6d
c00148b9:	0f 84 ec 02 00 00    	je     c0014bab <Vm::faultHandler(regs*)+0x3b4>
c00148bf:	77 17                	ja     c00148d8 <Vm::faultHandler(regs*)+0xe1>
c00148c1:	80 fa 67             	cmp    dl,0x67
c00148c4:	0f 84 48 01 00 00    	je     c0014a12 <Vm::faultHandler(regs*)+0x21b>
c00148ca:	80 fa 6c             	cmp    dl,0x6c
c00148cd:	0f 84 69 02 00 00    	je     c0014b3c <Vm::faultHandler(regs*)+0x345>
c00148d3:	e9 96 05 00 00       	jmp    c0014e6e <Vm::faultHandler(regs*)+0x677>
c00148d8:	80 fa 6f             	cmp    dl,0x6f
c00148db:	0f 84 f4 03 00 00    	je     c0014cd5 <Vm::faultHandler(regs*)+0x4de>
c00148e1:	0f 82 59 03 00 00    	jb     c0014c40 <Vm::faultHandler(regs*)+0x449>
c00148e7:	80 fa 9c             	cmp    dl,0x9c
c00148ea:	0f 84 2f 01 00 00    	je     c0014a1f <Vm::faultHandler(regs*)+0x228>
c00148f0:	e9 79 05 00 00       	jmp    c0014e6e <Vm::faultHandler(regs*)+0x677>
c00148f5:	80 fa ec             	cmp    dl,0xec
c00148f8:	0f 84 14 05 00 00    	je     c0014e12 <Vm::faultHandler(regs*)+0x61b>
c00148fe:	77 7b                	ja     c001497b <Vm::faultHandler(regs*)+0x184>
c0014900:	80 fa e4             	cmp    dl,0xe4
c0014903:	0f 84 93 04 00 00    	je     c0014d9c <Vm::faultHandler(regs*)+0x5a5>
c0014909:	77 53                	ja     c001495e <Vm::faultHandler(regs*)+0x167>
c001490b:	80 fa cd             	cmp    dl,0xcd
c001490e:	0f 84 d9 01 00 00    	je     c0014aed <Vm::faultHandler(regs*)+0x2f6>
c0014914:	80 fa cf             	cmp    dl,0xcf
c0014917:	0f 85 51 05 00 00    	jne    c0014e6e <Vm::faultHandler(regs*)+0x677>
c001491d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014920:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014923:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014927:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001492a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001492e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014934:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014937:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001493b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014941:	66 c1 e8 09          	shr    ax,0x9
c0014945:	83 e0 01             	and    eax,0x1
c0014948:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001494b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001494e:	83 c0 06             	add    eax,0x6
c0014951:	25 ff ff 00 00       	and    eax,0xffff
c0014956:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014959:	e9 0c 05 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x673>
c001495e:	80 fa e6             	cmp    dl,0xe6
c0014961:	0f 84 7f 04 00 00    	je     c0014de6 <Vm::faultHandler(regs*)+0x5ef>
c0014967:	0f 82 4b 04 00 00    	jb     c0014db8 <Vm::faultHandler(regs*)+0x5c1>
c001496d:	80 fa e7             	cmp    dl,0xe7
c0014970:	0f 84 87 04 00 00    	je     c0014dfd <Vm::faultHandler(regs*)+0x606>
c0014976:	e9 f3 04 00 00       	jmp    c0014e6e <Vm::faultHandler(regs*)+0x677>
c001497b:	80 fa ef             	cmp    dl,0xef
c001497e:	0f 84 d1 04 00 00    	je     c0014e55 <Vm::faultHandler(regs*)+0x65e>
c0014984:	77 28                	ja     c00149ae <Vm::faultHandler(regs*)+0x1b7>
c0014986:	80 fa ed             	cmp    dl,0xed
c0014989:	0f 84 9f 04 00 00    	je     c0014e2e <Vm::faultHandler(regs*)+0x637>
c001498f:	80 fa ee             	cmp    dl,0xee
c0014992:	0f 85 d6 04 00 00    	jne    c0014e6e <Vm::faultHandler(regs*)+0x677>
c0014998:	50                   	push   eax
c0014999:	50                   	push   eax
c001499a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001499e:	50                   	push   eax
c001499f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149a3:	50                   	push   eax
c00149a4:	e8 a3 f9 ff ff       	call   c001434c <Vm::outbv(unsigned short, unsigned char)>
c00149a9:	e9 9f 04 00 00       	jmp    c0014e4d <Vm::faultHandler(regs*)+0x656>
c00149ae:	80 fa fa             	cmp    dl,0xfa
c00149b1:	0f 84 69 01 00 00    	je     c0014b20 <Vm::faultHandler(regs*)+0x329>
c00149b7:	80 fa fb             	cmp    dl,0xfb
c00149ba:	0f 84 6e 01 00 00    	je     c0014b2e <Vm::faultHandler(regs*)+0x337>
c00149c0:	80 fa f3             	cmp    dl,0xf3
c00149c3:	0f 85 a5 04 00 00    	jne    c0014e6e <Vm::faultHandler(regs*)+0x677>
c00149c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149cc:	e9 c0 fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c00149d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d4:	be 02 00 00 00       	mov    esi,0x2
c00149d9:	e9 b3 fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c00149de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149e1:	be 03 00 00 00       	mov    esi,0x3
c00149e6:	e9 a6 fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c00149eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ee:	be 04 00 00 00       	mov    esi,0x4
c00149f3:	e9 99 fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c00149f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149fb:	be 05 00 00 00       	mov    esi,0x5
c0014a00:	e9 8c fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c0014a05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a08:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a0d:	e9 7f fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c0014a12:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a15:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a1a:	e9 72 fe ff ff       	jmp    c0014891 <Vm::faultHandler(regs*)+0x9a>
c0014a1f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a2b:	74 30                	je     c0014a5d <Vm::faultHandler(regs*)+0x266>
c0014a2d:	83 e9 04             	sub    ecx,0x4
c0014a30:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a36:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a3c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a3f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a42:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a48:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a4c:	0f 84 15 04 00 00    	je     c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014a52:	80 ce 02             	or     dh,0x2
c0014a55:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a58:	e9 0a 04 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014a5d:	83 e9 02             	sub    ecx,0x2
c0014a60:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a66:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a69:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a73:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a77:	74 05                	je     c0014a7e <Vm::faultHandler(regs*)+0x287>
c0014a79:	80 ce 02             	or     dh,0x2
c0014a7c:	eb 03                	jmp    c0014a81 <Vm::faultHandler(regs*)+0x28a>
c0014a7e:	80 e6 fd             	and    dh,0xfd
c0014a81:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a85:	e9 dd 03 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014a8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a8f:	74 2a                	je     c0014abb <Vm::faultHandler(regs*)+0x2c4>
c0014a91:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a93:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a99:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a9f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014aa4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014aaa:	c1 e8 09             	shr    eax,0x9
c0014aad:	83 e0 01             	and    eax,0x1
c0014ab0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014ab3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014ab6:	83 c0 04             	add    eax,0x4
c0014ab9:	eb 25                	jmp    c0014ae0 <Vm::faultHandler(regs*)+0x2e9>
c0014abb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014abe:	81 ca 00 02 02 00    	or     edx,0x20200
c0014ac4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014ac7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014aca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014ad0:	66 c1 e8 09          	shr    ax,0x9
c0014ad4:	83 e0 01             	and    eax,0x1
c0014ad7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014ada:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014add:	83 c0 02             	add    eax,0x2
c0014ae0:	25 ff ff 00 00       	and    eax,0xffff
c0014ae5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014ae8:	e9 7a 03 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014aed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014af1:	3c ee                	cmp    al,0xee
c0014af3:	75 10                	jne    c0014b05 <Vm::faultHandler(regs*)+0x30e>
c0014af5:	83 ec 0c             	sub    esp,0xc
c0014af8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014afb:	e8 e9 f8 ff ff       	call   c00143e9 <Vm::mainloop3(unsigned long)>
c0014b00:	e9 4b 03 00 00       	jmp    c0014e50 <Vm::faultHandler(regs*)+0x659>
c0014b05:	83 ec 0c             	sub    esp,0xc
c0014b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b10:	51                   	push   ecx
c0014b11:	50                   	push   eax
c0014b12:	53                   	push   ebx
c0014b13:	e8 e1 fb ff ff       	call   c00146f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b18:	83 c4 20             	add    esp,0x20
c0014b1b:	e9 4a 03 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x673>
c0014b20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b25:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b29:	e9 39 03 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014b2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b33:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014b37:	e9 2b 03 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014b3c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b3f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b44:	74 2b                	je     c0014b71 <Vm::faultHandler(regs*)+0x37a>
c0014b46:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b4d:	76 22                	jbe    c0014b71 <Vm::faultHandler(regs*)+0x37a>
c0014b4f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b53:	50                   	push   eax
c0014b54:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b58:	50                   	push   eax
c0014b59:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b5d:	50                   	push   eax
c0014b5e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b62:	50                   	push   eax
c0014b63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b67:	50                   	push   eax
c0014b68:	6a 6c                	push   0x6c
c0014b6a:	6a 6c                	push   0x6c
c0014b6c:	e9 b9 01 00 00       	jmp    c0014d2a <Vm::faultHandler(regs*)+0x533>
c0014b71:	83 ec 0c             	sub    esp,0xc
c0014b74:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b78:	0f b7 f6             	movzx  esi,si
c0014b7b:	50                   	push   eax
c0014b7c:	e8 b8 f7 ff ff       	call   c0014339 <Vm::inbv(unsigned short)>
c0014b81:	83 c4 0c             	add    esp,0xc
c0014b84:	0f b6 c0             	movzx  eax,al
c0014b87:	50                   	push   eax
c0014b88:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b8c:	50                   	push   eax
c0014b8d:	56                   	push   esi
c0014b8e:	e8 24 fc ff ff       	call   c00147b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b93:	83 c4 10             	add    esp,0x10
c0014b96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b9d:	74 03                	je     c0014ba2 <Vm::faultHandler(regs*)+0x3ab>
c0014b9f:	48                   	dec    eax
c0014ba0:	eb 01                	jmp    c0014ba3 <Vm::faultHandler(regs*)+0x3ac>
c0014ba2:	40                   	inc    eax
c0014ba3:	0f b7 c0             	movzx  eax,ax
c0014ba6:	e9 8d 00 00 00       	jmp    c0014c38 <Vm::faultHandler(regs*)+0x441>
c0014bab:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014bae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bb1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bb6:	74 29                	je     c0014be1 <Vm::faultHandler(regs*)+0x3ea>
c0014bb8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014bbd:	76 22                	jbe    c0014be1 <Vm::faultHandler(regs*)+0x3ea>
c0014bbf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bc3:	50                   	push   eax
c0014bc4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bc8:	50                   	push   eax
c0014bc9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bcd:	50                   	push   eax
c0014bce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bd2:	50                   	push   eax
c0014bd3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bd7:	50                   	push   eax
c0014bd8:	6a 6d                	push   0x6d
c0014bda:	6a 6d                	push   0x6d
c0014bdc:	e9 49 01 00 00       	jmp    c0014d2a <Vm::faultHandler(regs*)+0x533>
c0014be1:	0f b7 c8             	movzx  ecx,ax
c0014be4:	0f b7 f6             	movzx  esi,si
c0014be7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014bea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bef:	74 20                	je     c0014c11 <Vm::faultHandler(regs*)+0x41a>
c0014bf1:	ed                   	in     eax,dx
c0014bf2:	55                   	push   ebp
c0014bf3:	50                   	push   eax
c0014bf4:	51                   	push   ecx
c0014bf5:	56                   	push   esi
c0014bf6:	e8 e7 fb ff ff       	call   c00147e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bfb:	83 c4 10             	add    esp,0x10
c0014bfe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c01:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c05:	74 05                	je     c0014c0c <Vm::faultHandler(regs*)+0x415>
c0014c07:	83 e8 04             	sub    eax,0x4
c0014c0a:	eb 27                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x43c>
c0014c0c:	83 c0 04             	add    eax,0x4
c0014c0f:	eb 22                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x43c>
c0014c11:	66 ed                	in     ax,dx
c0014c13:	0f b7 c0             	movzx  eax,ax
c0014c16:	57                   	push   edi
c0014c17:	50                   	push   eax
c0014c18:	51                   	push   ecx
c0014c19:	56                   	push   esi
c0014c1a:	e8 ad fb ff ff       	call   c00147cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c1f:	83 c4 10             	add    esp,0x10
c0014c22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c29:	74 05                	je     c0014c30 <Vm::faultHandler(regs*)+0x439>
c0014c2b:	83 e8 02             	sub    eax,0x2
c0014c2e:	eb 03                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x43c>
c0014c30:	83 c0 02             	add    eax,0x2
c0014c33:	25 ff ff 00 00       	and    eax,0xffff
c0014c38:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c3b:	e9 27 02 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014c40:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c43:	3c 05                	cmp    al,0x5
c0014c45:	77 24                	ja     c0014c6b <Vm::faultHandler(regs*)+0x474>
c0014c47:	0f b6 c0             	movzx  eax,al
c0014c4a:	ff 24 85 fc ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1204]
c0014c51:	0f b7 fd             	movzx  edi,bp
c0014c54:	eb 15                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x474>
c0014c56:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c5a:	eb 0f                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x474>
c0014c5c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c60:	eb 09                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x474>
c0014c62:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c66:	eb 03                	jmp    c0014c6b <Vm::faultHandler(regs*)+0x474>
c0014c68:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c73:	74 29                	je     c0014c9e <Vm::faultHandler(regs*)+0x4a7>
c0014c75:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c7a:	76 22                	jbe    c0014c9e <Vm::faultHandler(regs*)+0x4a7>
c0014c7c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c80:	50                   	push   eax
c0014c81:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c85:	50                   	push   eax
c0014c86:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c8a:	50                   	push   eax
c0014c8b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c8f:	50                   	push   eax
c0014c90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c94:	50                   	push   eax
c0014c95:	6a 6e                	push   0x6e
c0014c97:	6a 6e                	push   0x6e
c0014c99:	e9 8c 00 00 00       	jmp    c0014d2a <Vm::faultHandler(regs*)+0x533>
c0014c9e:	0f b7 c0             	movzx  eax,ax
c0014ca1:	52                   	push   edx
c0014ca2:	52                   	push   edx
c0014ca3:	50                   	push   eax
c0014ca4:	57                   	push   edi
c0014ca5:	e8 d9 fa ff ff       	call   c0014783 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014caa:	59                   	pop    ecx
c0014cab:	0f b6 c0             	movzx  eax,al
c0014cae:	5e                   	pop    esi
c0014caf:	50                   	push   eax
c0014cb0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014cb4:	50                   	push   eax
c0014cb5:	e8 92 f6 ff ff       	call   c001434c <Vm::outbv(unsigned short, unsigned char)>
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cc0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cc4:	74 03                	je     c0014cc9 <Vm::faultHandler(regs*)+0x4d2>
c0014cc6:	48                   	dec    eax
c0014cc7:	eb 01                	jmp    c0014cca <Vm::faultHandler(regs*)+0x4d3>
c0014cc9:	40                   	inc    eax
c0014cca:	0f b7 c0             	movzx  eax,ax
c0014ccd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014cd0:	e9 92 01 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014cd5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cd8:	3c 05                	cmp    al,0x5
c0014cda:	77 1f                	ja     c0014cfb <Vm::faultHandler(regs*)+0x504>
c0014cdc:	0f b6 c0             	movzx  eax,al
c0014cdf:	ff 24 85 14 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe11ec]
c0014ce6:	89 ef                	mov    edi,ebp
c0014ce8:	eb 11                	jmp    c0014cfb <Vm::faultHandler(regs*)+0x504>
c0014cea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014ced:	eb 0c                	jmp    c0014cfb <Vm::faultHandler(regs*)+0x504>
c0014cef:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cf2:	eb 07                	jmp    c0014cfb <Vm::faultHandler(regs*)+0x504>
c0014cf4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cf7:	eb 02                	jmp    c0014cfb <Vm::faultHandler(regs*)+0x504>
c0014cf9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cfb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014cfe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d03:	74 37                	je     c0014d3c <Vm::faultHandler(regs*)+0x545>
c0014d05:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d0b:	76 2f                	jbe    c0014d3c <Vm::faultHandler(regs*)+0x545>
c0014d0d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d11:	50                   	push   eax
c0014d12:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d16:	50                   	push   eax
c0014d17:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d1b:	50                   	push   eax
c0014d1c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d20:	50                   	push   eax
c0014d21:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d25:	50                   	push   eax
c0014d26:	6a 6f                	push   0x6f
c0014d28:	6a 6f                	push   0x6f
c0014d2a:	68 a2 ed 01 c0       	push   0xc001eda2
c0014d2f:	e8 53 58 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014d34:	83 c4 20             	add    esp,0x20
c0014d37:	e9 86 01 00 00       	jmp    c0014ec2 <Vm::faultHandler(regs*)+0x6cb>
c0014d3c:	0f b7 d7             	movzx  edx,di
c0014d3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d42:	0f b7 c6             	movzx  eax,si
c0014d45:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d4b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d4e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d53:	74 1d                	je     c0014d72 <Vm::faultHandler(regs*)+0x57b>
c0014d55:	55                   	push   ebp
c0014d56:	55                   	push   ebp
c0014d57:	50                   	push   eax
c0014d58:	52                   	push   edx
c0014d59:	e8 48 fa ff ff       	call   c00147a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d5e:	83 c4 10             	add    esp,0x10
c0014d61:	89 fa                	mov    edx,edi
c0014d63:	ef                   	out    dx,eax
c0014d64:	85 c9                	test   ecx,ecx
c0014d66:	74 05                	je     c0014d6d <Vm::faultHandler(regs*)+0x576>
c0014d68:	83 ee 04             	sub    esi,0x4
c0014d6b:	eb 21                	jmp    c0014d8e <Vm::faultHandler(regs*)+0x597>
c0014d6d:	83 c6 04             	add    esi,0x4
c0014d70:	eb 1c                	jmp    c0014d8e <Vm::faultHandler(regs*)+0x597>
c0014d72:	55                   	push   ebp
c0014d73:	55                   	push   ebp
c0014d74:	50                   	push   eax
c0014d75:	52                   	push   edx
c0014d76:	e8 19 fa ff ff       	call   c0014794 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	89 fa                	mov    edx,edi
c0014d80:	66 ef                	out    dx,ax
c0014d82:	85 c9                	test   ecx,ecx
c0014d84:	74 05                	je     c0014d8b <Vm::faultHandler(regs*)+0x594>
c0014d86:	83 ee 02             	sub    esi,0x2
c0014d89:	eb 03                	jmp    c0014d8e <Vm::faultHandler(regs*)+0x597>
c0014d8b:	83 c6 02             	add    esi,0x2
c0014d8e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d94:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d97:	e9 cb 00 00 00       	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014d9c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014da3:	83 ec 0c             	sub    esp,0xc
c0014da6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014daa:	50                   	push   eax
c0014dab:	e8 89 f5 ff ff       	call   c0014339 <Vm::inbv(unsigned short)>
c0014db0:	0f b6 c0             	movzx  eax,al
c0014db3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014db6:	eb 3f                	jmp    c0014df7 <Vm::faultHandler(regs*)+0x600>
c0014db8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dbd:	74 07                	je     c0014dc6 <Vm::faultHandler(regs*)+0x5cf>
c0014dbf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dc3:	ed                   	in     eax,dx
c0014dc4:	eb 14                	jmp    c0014dda <Vm::faultHandler(regs*)+0x5e3>
c0014dc6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014dc9:	66 31 f6             	xor    si,si
c0014dcc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014dcf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dd3:	66 ed                	in     ax,dx
c0014dd5:	0f b7 c0             	movzx  eax,ax
c0014dd8:	09 f0                	or     eax,esi
c0014dda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014ddd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014de1:	e9 84 00 00 00       	jmp    c0014e6a <Vm::faultHandler(regs*)+0x673>
c0014de6:	52                   	push   edx
c0014de7:	52                   	push   edx
c0014de8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014dec:	50                   	push   eax
c0014ded:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014df1:	50                   	push   eax
c0014df2:	e8 55 f5 ff ff       	call   c001434c <Vm::outbv(unsigned short, unsigned char)>
c0014df7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014dfb:	eb 53                	jmp    c0014e50 <Vm::faultHandler(regs*)+0x659>
c0014dfd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e00:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e04:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e09:	74 03                	je     c0014e0e <Vm::faultHandler(regs*)+0x617>
c0014e0b:	ef                   	out    dx,eax
c0014e0c:	eb cf                	jmp    c0014ddd <Vm::faultHandler(regs*)+0x5e6>
c0014e0e:	66 ef                	out    dx,ax
c0014e10:	eb cb                	jmp    c0014ddd <Vm::faultHandler(regs*)+0x5e6>
c0014e12:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e19:	83 ec 0c             	sub    esp,0xc
c0014e1c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e20:	50                   	push   eax
c0014e21:	e8 13 f5 ff ff       	call   c0014339 <Vm::inbv(unsigned short)>
c0014e26:	0f b6 c0             	movzx  eax,al
c0014e29:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e2c:	eb 1f                	jmp    c0014e4d <Vm::faultHandler(regs*)+0x656>
c0014e2e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e31:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e36:	74 03                	je     c0014e3b <Vm::faultHandler(regs*)+0x644>
c0014e38:	ed                   	in     eax,dx
c0014e39:	eb 0d                	jmp    c0014e48 <Vm::faultHandler(regs*)+0x651>
c0014e3b:	66 ed                	in     ax,dx
c0014e3d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e40:	0f b7 c0             	movzx  eax,ax
c0014e43:	66 31 d2             	xor    dx,dx
c0014e46:	09 d0                	or     eax,edx
c0014e48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e4b:	eb 1a                	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014e4d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	eb 15                	jmp    c0014e6a <Vm::faultHandler(regs*)+0x673>
c0014e55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e60:	74 03                	je     c0014e65 <Vm::faultHandler(regs*)+0x66e>
c0014e62:	ef                   	out    dx,eax
c0014e63:	eb 02                	jmp    c0014e67 <Vm::faultHandler(regs*)+0x670>
c0014e65:	66 ef                	out    dx,ax
c0014e67:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e6a:	b0 01                	mov    al,0x1
c0014e6c:	eb 56                	jmp    c0014ec4 <Vm::faultHandler(regs*)+0x6cd>
c0014e6e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e72:	50                   	push   eax
c0014e73:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e77:	50                   	push   eax
c0014e78:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e7c:	50                   	push   eax
c0014e7d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e81:	50                   	push   eax
c0014e82:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e86:	50                   	push   eax
c0014e87:	52                   	push   edx
c0014e88:	52                   	push   edx
c0014e89:	68 cf ed 01 c0       	push   0xc001edcf
c0014e8e:	e8 f4 56 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014e93:	83 c4 20             	add    esp,0x20
c0014e96:	83 ec 0c             	sub    esp,0xc
c0014e99:	6a 60                	push   0x60
c0014e9b:	e8 99 f4 ff ff       	call   c0014339 <Vm::inbv(unsigned short)>
c0014ea0:	83 c4 10             	add    esp,0x10
c0014ea3:	3c 1c                	cmp    al,0x1c
c0014ea5:	74 04                	je     c0014eab <Vm::faultHandler(regs*)+0x6b4>
c0014ea7:	3c 5a                	cmp    al,0x5a
c0014ea9:	75 eb                	jne    c0014e96 <Vm::faultHandler(regs*)+0x69f>
c0014eab:	3c 5a                	cmp    al,0x5a
c0014ead:	74 04                	je     c0014eb3 <Vm::faultHandler(regs*)+0x6bc>
c0014eaf:	3c 1c                	cmp    al,0x1c
c0014eb1:	75 0f                	jne    c0014ec2 <Vm::faultHandler(regs*)+0x6cb>
c0014eb3:	83 ec 0c             	sub    esp,0xc
c0014eb6:	6a 60                	push   0x60
c0014eb8:	e8 7c f4 ff ff       	call   c0014339 <Vm::inbv(unsigned short)>
c0014ebd:	83 c4 10             	add    esp,0x10
c0014ec0:	eb e9                	jmp    c0014eab <Vm::faultHandler(regs*)+0x6b4>
c0014ec2:	31 c0                	xor    eax,eax
c0014ec4:	83 c4 1c             	add    esp,0x1c
c0014ec7:	5b                   	pop    ebx
c0014ec8:	5e                   	pop    esi
c0014ec9:	5f                   	pop    edi
c0014eca:	5d                   	pop    ebp
c0014ecb:	c3                   	ret    

c0014ecc <noCopro(unsigned long)>:
c0014ecc:	c3                   	ret    

c0014ecd <nmiHandler(regs*, void*)>:
c0014ecd:	83 ec 0c             	sub    esp,0xc
c0014ed0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014ed5:	83 ec 0c             	sub    esp,0xc
c0014ed8:	50                   	push   eax
c0014ed9:	e8 fc 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014ede:	83 c4 10             	add    esp,0x10
c0014ee1:	90                   	nop
c0014ee2:	83 c4 0c             	add    esp,0xc
c0014ee5:	c3                   	ret    

c0014ee6 <doubleFault(regs*, void*)>:
c0014ee6:	55                   	push   ebp
c0014ee7:	89 e5                	mov    ebp,esp
c0014ee9:	83 ec 08             	sub    esp,0x8
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	68 2c ee 01 c0       	push   0xc001ee2c
c0014ef4:	e8 0e b3 ff ff       	call   c0010207 <KePanic(char const*)>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	90                   	nop
c0014efd:	c9                   	leave  
c0014efe:	c3                   	ret    

c0014eff <displayDebugInfo(regs*)>:
c0014eff:	83 ec 1c             	sub    esp,0x1c
c0014f02:	0f 20 c0             	mov    eax,cr0
c0014f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f09:	0f 20 d0             	mov    eax,cr2
c0014f0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f10:	0f 20 d8             	mov    eax,cr3
c0014f13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f17:	0f 20 e0             	mov    eax,cr4
c0014f1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f21:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f24:	83 ec 08             	sub    esp,0x8
c0014f27:	50                   	push   eax
c0014f28:	68 48 ee 01 c0       	push   0xc001ee48
c0014f2d:	e8 55 56 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014f32:	83 c4 10             	add    esp,0x10
c0014f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f3c:	83 ec 08             	sub    esp,0x8
c0014f3f:	50                   	push   eax
c0014f40:	68 39 ee 01 c0       	push   0xc001ee39
c0014f45:	e8 3d 56 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f51:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f54:	83 ec 08             	sub    esp,0x8
c0014f57:	50                   	push   eax
c0014f58:	68 44 ee 01 c0       	push   0xc001ee44
c0014f5d:	e8 25 56 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6c:	83 ec 08             	sub    esp,0x8
c0014f6f:	50                   	push   eax
c0014f70:	68 53 ee 01 c0       	push   0xc001ee53
c0014f75:	e8 0d 56 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f81:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f84:	83 ec 08             	sub    esp,0x8
c0014f87:	50                   	push   eax
c0014f88:	68 5e ee 01 c0       	push   0xc001ee5e
c0014f8d:	e8 f5 55 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014f92:	83 c4 10             	add    esp,0x10
c0014f95:	83 ec 08             	sub    esp,0x8
c0014f98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f9c:	68 69 ee 01 c0       	push   0xc001ee69
c0014fa1:	e8 e1 55 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	83 ec 08             	sub    esp,0x8
c0014fac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fb0:	68 74 ee 01 c0       	push   0xc001ee74
c0014fb5:	e8 cd 55 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	50                   	push   eax
c0014fcc:	e8 26 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fd9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fdf:	83 ec 08             	sub    esp,0x8
c0014fe2:	68 7f ee 01 c0       	push   0xc001ee7f
c0014fe7:	50                   	push   eax
c0014fe8:	e8 49 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ff5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ffb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015000:	8b 12                	mov    edx,DWORD PTR [edx]
c0015002:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015005:	83 c2 0c             	add    edx,0xc
c0015008:	83 ec 08             	sub    esp,0x8
c001500b:	52                   	push   edx
c001500c:	50                   	push   eax
c001500d:	e8 24 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015012:	83 c4 10             	add    esp,0x10
c0015015:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001501a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015020:	83 ec 08             	sub    esp,0x8
c0015023:	68 88 ee 01 c0       	push   0xc001ee88
c0015028:	50                   	push   eax
c0015029:	e8 08 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001502e:	83 c4 10             	add    esp,0x10
c0015031:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015036:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015040:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015043:	83 ec 08             	sub    esp,0x8
c0015046:	52                   	push   edx
c0015047:	50                   	push   eax
c0015048:	e8 a3 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015055:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505b:	83 ec 08             	sub    esp,0x8
c001505e:	68 90 ee 01 c0       	push   0xc001ee90
c0015063:	50                   	push   eax
c0015064:	e8 cd 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015071:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015077:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001507b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001507e:	83 ec 08             	sub    esp,0x8
c0015081:	52                   	push   edx
c0015082:	50                   	push   eax
c0015083:	e8 68 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015088:	83 c4 10             	add    esp,0x10
c001508b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015090:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015096:	83 ec 08             	sub    esp,0x8
c0015099:	68 98 ee 01 c0       	push   0xc001ee98
c001509e:	50                   	push   eax
c001509f:	e8 92 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00150b9:	83 ec 08             	sub    esp,0x8
c00150bc:	52                   	push   edx
c00150bd:	50                   	push   eax
c00150be:	e8 2d 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150c3:	83 c4 10             	add    esp,0x10
c00150c6:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d1:	83 ec 08             	sub    esp,0x8
c00150d4:	68 a0 ee 01 c0       	push   0xc001eea0
c00150d9:	50                   	push   eax
c00150da:	e8 57 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150df:	83 c4 10             	add    esp,0x10
c00150e2:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150f1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150f4:	83 ec 08             	sub    esp,0x8
c00150f7:	52                   	push   edx
c00150f8:	50                   	push   eax
c00150f9:	e8 f2 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015106:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	68 a8 ee 01 c0       	push   0xc001eea8
c0015114:	50                   	push   eax
c0015115:	e8 1c 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015122:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015128:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001512c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001512f:	83 ec 08             	sub    esp,0x8
c0015132:	52                   	push   edx
c0015133:	50                   	push   eax
c0015134:	e8 b7 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015141:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015147:	83 ec 08             	sub    esp,0x8
c001514a:	68 b0 ee 01 c0       	push   0xc001eeb0
c001514f:	50                   	push   eax
c0015150:	e8 e1 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001515d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015163:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015167:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001516a:	83 ec 08             	sub    esp,0x8
c001516d:	52                   	push   edx
c001516e:	50                   	push   eax
c001516f:	e8 7c 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001517c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015182:	83 ec 08             	sub    esp,0x8
c0015185:	68 b8 ee 01 c0       	push   0xc001eeb8
c001518a:	50                   	push   eax
c001518b:	e8 a6 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015190:	83 c4 10             	add    esp,0x10
c0015193:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015198:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519e:	83 ec 08             	sub    esp,0x8
c00151a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00151a5:	50                   	push   eax
c00151a6:	e8 45 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	68 c1 ee 01 c0       	push   0xc001eec1
c00151c1:	50                   	push   eax
c00151c2:	e8 6f 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d5:	83 ec 08             	sub    esp,0x8
c00151d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151dc:	50                   	push   eax
c00151dd:	e8 0e 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f0:	83 ec 08             	sub    esp,0x8
c00151f3:	68 c9 ee 01 c0       	push   0xc001eec9
c00151f8:	50                   	push   eax
c00151f9:	e8 38 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015206:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520c:	83 ec 08             	sub    esp,0x8
c001520f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015213:	50                   	push   eax
c0015214:	e8 d7 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	fa                   	cli    
c001521d:	f4                   	hlt    
c001521e:	eb fe                	jmp    c001521e <displayDebugInfo(regs*)+0x31f>

c0015220 <HalSystemIdle()>:
c0015220:	56                   	push   esi
c0015221:	53                   	push   ebx
c0015222:	83 ec 14             	sub    esp,0x14
c0015225:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001522a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015230:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015236:	83 e0 04             	and    eax,0x4
c0015239:	84 c0                	test   al,al
c001523b:	0f 95 c0             	setne  al
c001523e:	84 c0                	test   al,al
c0015240:	74 4c                	je     c001528e <HalSystemIdle()+0x6e>
c0015242:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015247:	83 ec 08             	sub    esp,0x8
c001524a:	68 e1 00 00 00       	push   0xe1
c001524f:	50                   	push   eax
c0015250:	e8 9d 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001525c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015260:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015265:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015269:	83 e2 02             	and    edx,0x2
c001526c:	89 d3                	mov    ebx,edx
c001526e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015272:	83 e2 00             	and    edx,0x0
c0015275:	89 d6                	mov    esi,edx
c0015277:	56                   	push   esi
c0015278:	53                   	push   ebx
c0015279:	68 e1 00 00 00       	push   0xe1
c001527e:	50                   	push   eax
c001527f:	e8 9a 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	e8 08 af fe ff       	call   c0000194 <doTPAUSE>
c001528c:	eb 01                	jmp    c001528f <HalSystemIdle()+0x6f>
c001528e:	f4                   	hlt    
c001528f:	90                   	nop
c0015290:	83 c4 14             	add    esp,0x14
c0015293:	5b                   	pop    ebx
c0015294:	5e                   	pop    esi
c0015295:	c3                   	ret    

c0015296 <displayProgramFault(char const*)>:
c0015296:	83 ec 0c             	sub    esp,0xc
c0015299:	83 ec 0c             	sub    esp,0xc
c001529c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152a0:	e8 e2 52 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b8:	85 c0                	test   eax,eax
c00152ba:	74 21                	je     c00152dd <displayProgramFault(char const*)+0x47>
c00152bc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00152c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152cc:	6a 04                	push   0x4
c00152ce:	6a 0f                	push   0xf
c00152d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152d4:	50                   	push   eax
c00152d5:	e8 ce 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	90                   	nop
c00152de:	83 c4 0c             	add    esp,0xc
c00152e1:	c3                   	ret    

c00152e2 <gpFault(regs*, void*)>:
c00152e2:	83 ec 1c             	sub    esp,0x1c
c00152e5:	c7 05 10 52 02 c0 f7 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00147f7
c00152ef:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152f4:	85 c0                	test   eax,eax
c00152f6:	74 1c                	je     c0015314 <gpFault(regs*, void*)+0x32>
c00152f8:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015304:	ff d0                	call   eax
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001530d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015312:	75 2e                	jne    c0015342 <gpFault(regs*, void*)+0x60>
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001531b:	e8 df fb ff ff       	call   c0014eff <displayDebugInfo(regs*)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	83 ec 0c             	sub    esp,0xc
c0015326:	68 d1 ee 01 c0       	push   0xc001eed1
c001532b:	e8 66 ff ff ff       	call   c0015296 <displayProgramFault(char const*)>
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	83 ec 0c             	sub    esp,0xc
c0015336:	6a 00                	push   0x0
c0015338:	e8 af ee ff ff       	call   c00141ec <Thr::terminateFromIRQ(int)>
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	eb 01                	jmp    c0015343 <gpFault(regs*, void*)+0x61>
c0015342:	90                   	nop
c0015343:	83 c4 1c             	add    esp,0x1c
c0015346:	c3                   	ret    

c0015347 <pgFault(regs*, void*)>:
c0015347:	83 ec 1c             	sub    esp,0x1c
c001534a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015351:	0f 20 d0             	mov    eax,cr2
c0015354:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001535c:	83 ec 04             	sub    esp,0x4
c001535f:	52                   	push   edx
c0015360:	50                   	push   eax
c0015361:	68 b0 ef 01 c0       	push   0xc001efb0
c0015366:	e8 1c 52 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015378:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001537e:	0f 20 d2             	mov    edx,cr2
c0015381:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015385:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015389:	83 ec 08             	sub    esp,0x8
c001538c:	52                   	push   edx
c001538d:	50                   	push   eax
c001538e:	e8 cd 4d ff ff       	call   c000a160 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015393:	83 c4 10             	add    esp,0x10
c0015396:	84 c0                	test   al,al
c0015398:	75 2e                	jne    c00153c8 <pgFault(regs*, void*)+0x81>
c001539a:	83 ec 0c             	sub    esp,0xc
c001539d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153a1:	e8 59 fb ff ff       	call   c0014eff <displayDebugInfo(regs*)>
c00153a6:	83 c4 10             	add    esp,0x10
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	68 ea ee 01 c0       	push   0xc001eeea
c00153b1:	e8 e0 fe ff ff       	call   c0015296 <displayProgramFault(char const*)>
c00153b6:	83 c4 10             	add    esp,0x10
c00153b9:	83 ec 0c             	sub    esp,0xc
c00153bc:	6a 00                	push   0x0
c00153be:	e8 29 ee ff ff       	call   c00141ec <Thr::terminateFromIRQ(int)>
c00153c3:	83 c4 10             	add    esp,0x10
c00153c6:	eb 01                	jmp    c00153c9 <pgFault(regs*, void*)+0x82>
c00153c8:	90                   	nop
c00153c9:	83 c4 1c             	add    esp,0x1c
c00153cc:	c3                   	ret    

c00153cd <otherISRHandler(regs*, void*)>:
c00153cd:	83 ec 0c             	sub    esp,0xc
c00153d0:	83 ec 0c             	sub    esp,0xc
c00153d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d7:	e8 23 fb ff ff       	call   c0014eff <displayDebugInfo(regs*)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	68 d8 ef 01 c0       	push   0xc001efd8
c00153e7:	e8 aa fe ff ff       	call   c0015296 <displayProgramFault(char const*)>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	83 ec 0c             	sub    esp,0xc
c00153f2:	6a 00                	push   0x0
c00153f4:	e8 f3 ed ff ff       	call   c00141ec <Thr::terminateFromIRQ(int)>
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	90                   	nop
c00153fd:	83 c4 0c             	add    esp,0xc
c0015400:	c3                   	ret    

c0015401 <opcodeFault(regs*, void*)>:
c0015401:	55                   	push   ebp
c0015402:	89 e5                	mov    ebp,esp
c0015404:	83 ec 08             	sub    esp,0x8
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540d:	83 ec 08             	sub    esp,0x8
c0015410:	50                   	push   eax
c0015411:	68 f5 ee 01 c0       	push   0xc001eef5
c0015416:	e8 6c 51 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001541b:	83 c4 10             	add    esp,0x10
c001541e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015429:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001542f:	84 c0                	test   al,al
c0015431:	74 21                	je     c0015454 <opcodeFault(regs*, void*)+0x53>
c0015433:	83 ec 0c             	sub    esp,0xc
c0015436:	68 00 f0 01 c0       	push   0xc001f000
c001543b:	e8 47 51 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015446:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015449:	8d 50 19             	lea    edx,[eax+0x19]
c001544c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015452:	eb 2b                	jmp    c001547f <opcodeFault(regs*, void*)+0x7e>
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001545a:	e8 a0 fa ff ff       	call   c0014eff <displayDebugInfo(regs*)>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	68 03 ef 01 c0       	push   0xc001ef03
c001546a:	e8 27 fe ff ff       	call   c0015296 <displayProgramFault(char const*)>
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	6a 00                	push   0x0
c0015477:	e8 70 ed ff ff       	call   c00141ec <Thr::terminateFromIRQ(int)>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	c9                   	leave  
c0015480:	c3                   	ret    

c0015481 <i386SaveCoprocessor(void*)>:
c0015481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015485:	83 c0 3f             	add    eax,0x3f
c0015488:	83 e0 c0             	and    eax,0xffffffc0
c001548b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001548f:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015495 <i386LoadCoprocessor(void*)>:
c0015495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015499:	83 c0 3f             	add    eax,0x3f
c001549c:	83 e0 c0             	and    eax,0xffffffc0
c001549f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154a3:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c00154a9 <x87EmulHandler(regs*, void*)>:
c00154a9:	53                   	push   ebx
c00154aa:	83 ec 08             	sub    esp,0x8
c00154ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00154b6:	74 10                	je     c00154c8 <x87EmulHandler(regs*, void*)+0x1f>
c00154b8:	83 ec 0c             	sub    esp,0xc
c00154bb:	68 10 ef 01 c0       	push   0xc001ef10
c00154c0:	e8 42 ad ff ff       	call   c0010207 <KePanic(char const*)>
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	0f 20 c0             	mov    eax,cr0
c00154cb:	a8 08                	test   al,0x8
c00154cd:	74 59                	je     c0015528 <x87EmulHandler(regs*, void*)+0x7f>
c00154cf:	0f 06                	clts   
c00154d1:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154d6:	85 c0                	test   eax,eax
c00154d8:	74 0e                	je     c00154e8 <x87EmulHandler(regs*, void*)+0x3f>
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154e0:	e8 9c ff ff ff       	call   c0015481 <i386SaveCoprocessor(void*)>
c00154e5:	83 c4 10             	add    esp,0x10
c00154e8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154ee:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154f2:	75 12                	jne    c0015506 <x87EmulHandler(regs*, void*)+0x5d>
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	68 40 02 00 00       	push   0x240
c00154fc:	e8 b8 22 ff ff       	call   c00077b9 <malloc>
c0015501:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015504:	eb 10                	jmp    c0015516 <x87EmulHandler(regs*, void*)+0x6d>
c0015506:	83 ec 0c             	sub    esp,0xc
c0015509:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001550e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015511:	e8 7f ff ff ff       	call   c0015495 <i386LoadCoprocessor(void*)>
c0015516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c0015523:	83 c4 08             	add    esp,0x8
c0015526:	5b                   	pop    ebx
c0015527:	c3                   	ret    
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	68 24 ef 01 c0       	push   0xc001ef24
c0015530:	e8 52 50 ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0015535:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001553d:	83 c4 18             	add    esp,0x18
c0015540:	5b                   	pop    ebx
c0015541:	e9 a6 ec ff ff       	jmp    c00141ec <Thr::terminateFromIRQ(int)>

c0015546 <HalInitialiseCoprocessor()>:
c0015546:	83 ec 10             	sub    esp,0x10
c0015549:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c0015553:	6a 00                	push   0x0
c0015555:	68 a9 54 01 c0       	push   0xc00154a9
c001555a:	6a 07                	push   0x7
c001555c:	e8 97 69 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015561:	e8 9a 65 00 00       	call   c001bb00 <avxDetect>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	85 c0                	test   eax,eax
c001556b:	74 1c                	je     c0015589 <HalInitialiseCoprocessor()+0x43>
c001556d:	c7 05 0c 52 02 c0 2a bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bb2a
c0015577:	c7 05 08 52 02 c0 3b bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bb3b
c0015581:	83 c4 0c             	add    esp,0xc
c0015584:	e9 c3 65 00 00       	jmp    c001bb4c <avxInit>
c0015589:	e8 52 68 00 00       	call   c001bde0 <absolutelyNoChanceInHell>
c001558e:	85 c0                	test   eax,eax
c0015590:	74 1c                	je     c00155ae <HalInitialiseCoprocessor()+0x68>
c0015592:	c7 05 0c 52 02 c0 f8 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bdf8
c001559c:	c7 05 08 52 02 c0 00 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be00
c00155a6:	83 c4 0c             	add    esp,0xc
c00155a9:	e9 5a 68 00 00       	jmp    c001be08 <sseInit>
c00155ae:	e8 73 68 00 00       	call   c001be26 <x87Detect>
c00155b3:	85 c0                	test   eax,eax
c00155b5:	74 1c                	je     c00155d3 <HalInitialiseCoprocessor()+0x8d>
c00155b7:	c7 05 0c 52 02 c0 41 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be41
c00155c1:	c7 05 08 52 02 c0 48 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be48
c00155cb:	83 c4 0c             	add    esp,0xc
c00155ce:	e9 7c 68 00 00       	jmp    c001be4f <x87Init>
c00155d3:	c7 05 0c 52 02 c0 cc 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014ecc
c00155dd:	c7 05 08 52 02 c0 cc 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014ecc
c00155e7:	0f 20 c0             	mov    eax,cr0
c00155ea:	83 c8 04             	or     eax,0x4
c00155ed:	0f 22 c0             	mov    cr0,eax
c00155f0:	83 c4 0c             	add    esp,0xc
c00155f3:	c3                   	ret    

c00155f4 <HalPanic(char const*)>:
c00155f4:	53                   	push   ebx
c00155f5:	83 ec 10             	sub    esp,0x10
c00155f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155fc:	fa                   	cli    
c00155fd:	53                   	push   ebx
c00155fe:	68 3a ef 01 c0       	push   0xc001ef3a
c0015603:	e8 7f 4f ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0015608:	83 c4 0c             	add    esp,0xc
c001560b:	6a 01                	push   0x1
c001560d:	6a 0f                	push   0xf
c001560f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015615:	e8 30 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001561a:	58                   	pop    eax
c001561b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015621:	e8 1c 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015626:	5a                   	pop    edx
c0015627:	59                   	pop    ecx
c0015628:	68 48 d8 01 c0       	push   0xc001d848
c001562d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015633:	e8 4a 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015638:	83 c4 0c             	add    esp,0xc
c001563b:	6a 01                	push   0x1
c001563d:	6a 0f                	push   0xf
c001563f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015645:	e8 00 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001564a:	58                   	pop    eax
c001564b:	5a                   	pop    edx
c001564c:	68 53 ef 01 c0       	push   0xc001ef53
c0015651:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015657:	e8 da 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001565c:	83 c4 0c             	add    esp,0xc
c001565f:	6a 0f                	push   0xf
c0015661:	6a 01                	push   0x1
c0015663:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015669:	e8 dc 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001566e:	59                   	pop    ecx
c001566f:	58                   	pop    eax
c0015670:	68 5c ef 01 c0       	push   0xc001ef5c
c0015675:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001567b:	e8 b6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015680:	83 c4 0c             	add    esp,0xc
c0015683:	6a 01                	push   0x1
c0015685:	6a 0f                	push   0xf
c0015687:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001568d:	e8 b8 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015692:	58                   	pop    eax
c0015693:	5a                   	pop    edx
c0015694:	68 a0 ef 01 c0       	push   0xc001efa0
c0015699:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001569f:	e8 92 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156a4:	59                   	pop    ecx
c00156a5:	58                   	pop    eax
c00156a6:	68 69 ef 01 c0       	push   0xc001ef69
c00156ab:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156b1:	e8 80 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156b6:	58                   	pop    eax
c00156b7:	5a                   	pop    edx
c00156b8:	68 a3 ef 01 c0       	push   0xc001efa3
c00156bd:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156c3:	e8 6e 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156c8:	59                   	pop    ecx
c00156c9:	58                   	pop    eax
c00156ca:	53                   	push   ebx
c00156cb:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156d1:	e8 60 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156d6:	58                   	pop    eax
c00156d7:	5a                   	pop    edx
c00156d8:	68 a0 ef 01 c0       	push   0xc001efa0
c00156dd:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156e3:	e8 4e 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156e8:	83 c4 10             	add    esp,0x10
c00156eb:	eb fe                	jmp    c00156eb <HalPanic(char const*)+0xf7>

c00156ed <HalQueryPerformanceCounter()>:
c00156ed:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156f2:	31 d2                	xor    edx,edx
c00156f4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156fa:	31 c0                	xor    eax,eax
c00156fc:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015703:	74 02                	je     c0015707 <HalQueryPerformanceCounter()+0x1a>
c0015705:	0f 31                	rdtsc  
c0015707:	c3                   	ret    

c0015708 <HalInitialise()>:
c0015708:	53                   	push   ebx
c0015709:	83 ec 08             	sub    esp,0x8
c001570c:	e8 1a 6a ff ff       	call   c000c12b <setupINTS()>
c0015711:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015718:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001571d:	75 07                	jne    c0015726 <HalInitialise()+0x1e>
c001571f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015726:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001572c:	83 e0 01             	and    eax,0x1
c001572f:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c0015734:	e8 a7 02 00 00       	call   c00159e0 <picOpen()>
c0015739:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015740:	74 0a                	je     c001574c <HalInitialise()+0x44>
c0015742:	e8 e1 01 00 00       	call   c0015928 <picDisable()>
c0015747:	e8 26 5d 00 00       	call   c001b472 <apicOpen()>
c001574c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015751:	50                   	push   eax
c0015752:	6a 00                	push   0x0
c0015754:	68 cd 53 01 c0       	push   0xc00153cd
c0015759:	6a 00                	push   0x0
c001575b:	e8 98 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015760:	83 c4 0c             	add    esp,0xc
c0015763:	6a 00                	push   0x0
c0015765:	68 cd 53 01 c0       	push   0xc00153cd
c001576a:	6a 01                	push   0x1
c001576c:	e8 87 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015771:	83 c4 0c             	add    esp,0xc
c0015774:	6a 00                	push   0x0
c0015776:	68 cd 4e 01 c0       	push   0xc0014ecd
c001577b:	6a 02                	push   0x2
c001577d:	e8 76 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015782:	83 c4 0c             	add    esp,0xc
c0015785:	6a 00                	push   0x0
c0015787:	68 cd 53 01 c0       	push   0xc00153cd
c001578c:	6a 03                	push   0x3
c001578e:	e8 65 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015793:	83 c4 0c             	add    esp,0xc
c0015796:	6a 00                	push   0x0
c0015798:	68 cd 53 01 c0       	push   0xc00153cd
c001579d:	6a 04                	push   0x4
c001579f:	e8 54 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a4:	83 c4 0c             	add    esp,0xc
c00157a7:	6a 00                	push   0x0
c00157a9:	68 cd 53 01 c0       	push   0xc00153cd
c00157ae:	6a 05                	push   0x5
c00157b0:	e8 43 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b5:	83 c4 0c             	add    esp,0xc
c00157b8:	6a 00                	push   0x0
c00157ba:	68 01 54 01 c0       	push   0xc0015401
c00157bf:	6a 06                	push   0x6
c00157c1:	e8 32 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c6:	83 c4 0c             	add    esp,0xc
c00157c9:	6a 00                	push   0x0
c00157cb:	68 e6 4e 01 c0       	push   0xc0014ee6
c00157d0:	6a 08                	push   0x8
c00157d2:	e8 21 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d7:	83 c4 0c             	add    esp,0xc
c00157da:	6a 00                	push   0x0
c00157dc:	68 cd 53 01 c0       	push   0xc00153cd
c00157e1:	6a 09                	push   0x9
c00157e3:	e8 10 67 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e8:	83 c4 0c             	add    esp,0xc
c00157eb:	6a 00                	push   0x0
c00157ed:	68 cd 53 01 c0       	push   0xc00153cd
c00157f2:	6a 0a                	push   0xa
c00157f4:	e8 ff 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f9:	83 c4 0c             	add    esp,0xc
c00157fc:	6a 00                	push   0x0
c00157fe:	68 cd 53 01 c0       	push   0xc00153cd
c0015803:	6a 0b                	push   0xb
c0015805:	e8 ee 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001580a:	83 c4 0c             	add    esp,0xc
c001580d:	6a 00                	push   0x0
c001580f:	68 e2 52 01 c0       	push   0xc00152e2
c0015814:	6a 0d                	push   0xd
c0015816:	e8 dd 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001581b:	83 c4 0c             	add    esp,0xc
c001581e:	6a 00                	push   0x0
c0015820:	68 47 53 01 c0       	push   0xc0015347
c0015825:	6a 0e                	push   0xe
c0015827:	e8 cc 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001582c:	83 c4 10             	add    esp,0x10
c001582f:	50                   	push   eax
c0015830:	6a 00                	push   0x0
c0015832:	68 cd 53 01 c0       	push   0xc00153cd
c0015837:	53                   	push   ebx
c0015838:	43                   	inc    ebx
c0015839:	e8 ba 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	83 fb 1e             	cmp    ebx,0x1e
c0015844:	75 e9                	jne    c001582f <HalInitialise()+0x127>
c0015846:	50                   	push   eax
c0015847:	6a 00                	push   0x0
c0015849:	68 57 14 01 c0       	push   0xc0011457
c001584e:	6a 60                	push   0x60
c0015850:	e8 a3 66 ff ff       	call   c000bef8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015855:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001585a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015864:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001586b:	e8 49 1f ff ff       	call   c00077b9 <malloc>
c0015870:	89 04 24             	mov    DWORD PTR [esp],eax
c0015873:	89 c3                	mov    ebx,eax
c0015875:	e8 2e 09 00 00       	call   c00161a8 <RTC::RTC()>
c001587a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015884:	5a                   	pop    edx
c0015885:	59                   	pop    ecx
c0015886:	53                   	push   ebx
c0015887:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001588d:	e8 32 61 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c0015892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015894:	6a 00                	push   0x0
c0015896:	6a 00                	push   0x0
c0015898:	6a 00                	push   0x0
c001589a:	53                   	push   ebx
c001589b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001589e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00158a3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00158a9:	83 c4 28             	add    esp,0x28
c00158ac:	5b                   	pop    ebx
c00158ad:	c3                   	ret    

c00158ae <HalMakeBeep(int)>:
c00158ae:	53                   	push   ebx
c00158af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00158b3:	85 db                	test   ebx,ebx
c00158b5:	75 07                	jne    c00158be <HalMakeBeep(int)+0x10>
c00158b7:	e4 61                	in     al,0x61
c00158b9:	83 e0 fc             	and    eax,0xfffffffc
c00158bc:	eb 26                	jmp    c00158e4 <HalMakeBeep(int)+0x36>
c00158be:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00158c3:	99                   	cdq    
c00158c4:	f7 fb                	idiv   ebx
c00158c6:	89 c1                	mov    ecx,eax
c00158c8:	b0 b6                	mov    al,0xb6
c00158ca:	e6 43                	out    0x43,al
c00158cc:	88 c8                	mov    al,cl
c00158ce:	e6 42                	out    0x42,al
c00158d0:	89 c8                	mov    eax,ecx
c00158d2:	c1 e8 08             	shr    eax,0x8
c00158d5:	e6 42                	out    0x42,al
c00158d7:	e4 61                	in     al,0x61
c00158d9:	88 c2                	mov    dl,al
c00158db:	83 ca 03             	or     edx,0x3
c00158de:	38 c2                	cmp    dl,al
c00158e0:	74 04                	je     c00158e6 <HalMakeBeep(int)+0x38>
c00158e2:	88 d0                	mov    al,dl
c00158e4:	e6 61                	out    0x61,al
c00158e6:	5b                   	pop    ebx
c00158e7:	c3                   	ret    

c00158e8 <HalGetRand()>:
c00158e8:	31 c0                	xor    eax,eax
c00158ea:	c3                   	ret    

c00158eb <HalEndOfInterrupt(int)>:
c00158eb:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00158f2:	74 23                	je     c0015917 <HalEndOfInterrupt(int)+0x2c>
c00158f4:	83 ec 14             	sub    esp,0x14
c00158f7:	6a 1b                	push   0x1b
c00158f9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158ff:	e8 ee 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015904:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015909:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015913:	83 c4 1c             	add    esp,0x1c
c0015916:	c3                   	ret    
c0015917:	e9 54 02 00 00       	jmp    c0015b70 <picEOI(int)>

c001591c <HalRestart()>:
c001591c:	c3                   	ret    

c001591d <HalShutdown()>:
c001591d:	c3                   	ret    

c001591e <HalSleep()>:
c001591e:	c3                   	ret    
c001591f:	90                   	nop

c0015920 <picIoWait()>:
c0015920:	eb 00                	jmp    c0015922 <picIoWait()+0x2>
c0015922:	eb 00                	jmp    c0015924 <picIoWait()+0x4>
c0015924:	90                   	nop
c0015925:	c3                   	ret    
c0015926:	66 90                	xchg   ax,ax

c0015928 <picDisable()>:
c0015928:	83 ec 10             	sub    esp,0x10
c001592b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015932:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015937:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001593b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015940:	ee                   	out    dx,al
c0015941:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015948:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001594d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015951:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015956:	ee                   	out    dx,al
c0015957:	90                   	nop
c0015958:	83 c4 10             	add    esp,0x10
c001595b:	c3                   	ret    

c001595c <picGetIRQReg(int)>:
c001595c:	83 ec 10             	sub    esp,0x10
c001595f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015963:	25 ff 00 00 00       	and    eax,0xff
c0015968:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001596f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015973:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015977:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001597c:	ee                   	out    dx,al
c001597d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015981:	25 ff 00 00 00       	and    eax,0xff
c0015986:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001598d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015991:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015995:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001599a:	ee                   	out    dx,al
c001599b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00159a2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00159a7:	89 c2                	mov    edx,eax
c00159a9:	ec                   	in     al,dx
c00159aa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00159ae:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159b2:	25 ff 00 00 00       	and    eax,0xff
c00159b7:	c1 e0 08             	shl    eax,0x8
c00159ba:	89 c1                	mov    ecx,eax
c00159bc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00159c3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00159c8:	89 c2                	mov    edx,eax
c00159ca:	ec                   	in     al,dx
c00159cb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00159cf:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159d3:	25 ff 00 00 00       	and    eax,0xff
c00159d8:	09 c8                	or     eax,ecx
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	c3                   	ret    
c00159de:	66 90                	xchg   ax,ax

c00159e0 <picOpen()>:
c00159e0:	83 ec 50             	sub    esp,0x50
c00159e3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159f7:	ee                   	out    dx,al
c00159f8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159ff:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a04:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a0c:	ee                   	out    dx,al
c0015a0d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a15:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a1d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a28:	89 c2                	mov    edx,eax
c0015a2a:	ec                   	in     al,dx
c0015a2b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a2f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015a33:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015a37:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a42:	89 c2                	mov    edx,eax
c0015a44:	ec                   	in     al,dx
c0015a45:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a49:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a4d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a51:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a58:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a5d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a65:	ee                   	out    dx,al
c0015a66:	e8 b5 fe ff ff       	call   c0015920 <picIoWait()>
c0015a6b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a72:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a77:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a7f:	ee                   	out    dx,al
c0015a80:	e8 9b fe ff ff       	call   c0015920 <picIoWait()>
c0015a85:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a89:	25 ff 00 00 00       	and    eax,0xff
c0015a8e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a95:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a99:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015aa1:	ee                   	out    dx,al
c0015aa2:	e8 79 fe ff ff       	call   c0015920 <picIoWait()>
c0015aa7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015aab:	25 ff 00 00 00       	and    eax,0xff
c0015ab0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015ab7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015abb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015abf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015ac3:	ee                   	out    dx,al
c0015ac4:	e8 57 fe ff ff       	call   c0015920 <picIoWait()>
c0015ac9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015ad0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015ad5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015ad9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015add:	ee                   	out    dx,al
c0015ade:	e8 3d fe ff ff       	call   c0015920 <picIoWait()>
c0015ae3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015aea:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015aef:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015af3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015af7:	ee                   	out    dx,al
c0015af8:	e8 23 fe ff ff       	call   c0015920 <picIoWait()>
c0015afd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b04:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b09:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b0d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b11:	ee                   	out    dx,al
c0015b12:	e8 09 fe ff ff       	call   c0015920 <picIoWait()>
c0015b17:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b1e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b23:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b2b:	ee                   	out    dx,al
c0015b2c:	e8 ef fd ff ff       	call   c0015920 <picIoWait()>
c0015b31:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015b35:	25 ff 00 00 00       	and    eax,0xff
c0015b3a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b41:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b45:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b49:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b4d:	ee                   	out    dx,al
c0015b4e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b52:	25 ff 00 00 00       	and    eax,0xff
c0015b57:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b5e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b62:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b66:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b6a:	ee                   	out    dx,al
c0015b6b:	90                   	nop
c0015b6c:	83 c4 50             	add    esp,0x50
c0015b6f:	c3                   	ret    

c0015b70 <picEOI(int)>:
c0015b70:	83 ec 10             	sub    esp,0x10
c0015b73:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b78:	75 22                	jne    c0015b9c <picEOI(int)+0x2c>
c0015b7a:	6a 0b                	push   0xb
c0015b7c:	e8 db fd ff ff       	call   c001595c <picGetIRQReg(int)>
c0015b81:	83 c4 04             	add    esp,0x4
c0015b84:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b89:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b8e:	25 ff ff 00 00       	and    eax,0xffff
c0015b93:	25 80 00 00 00       	and    eax,0x80
c0015b98:	74 72                	je     c0015c0c <picEOI(int)+0x9c>
c0015b9a:	66 90                	xchg   ax,ax
c0015b9c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015ba1:	75 31                	jne    c0015bd4 <picEOI(int)+0x64>
c0015ba3:	6a 0b                	push   0xb
c0015ba5:	e8 b2 fd ff ff       	call   c001595c <picGetIRQReg(int)>
c0015baa:	83 c4 04             	add    esp,0x4
c0015bad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015bb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bb6:	66 85 c0             	test   ax,ax
c0015bb9:	78 19                	js     c0015bd4 <picEOI(int)+0x64>
c0015bbb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015bc2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015bc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015bcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015bd0:	ee                   	out    dx,al
c0015bd1:	eb 3d                	jmp    c0015c10 <picEOI(int)+0xa0>
c0015bd3:	90                   	nop
c0015bd4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015bd9:	7e 19                	jle    c0015bf4 <picEOI(int)+0x84>
c0015bdb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015be2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015be7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015beb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015bf0:	ee                   	out    dx,al
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bfb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c00:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c04:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c09:	ee                   	out    dx,al
c0015c0a:	eb 04                	jmp    c0015c10 <picEOI(int)+0xa0>
c0015c0c:	90                   	nop
c0015c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	c3                   	ret    

c0015c14 <RTC::open(int, int, void*)>:
c0015c14:	31 c0                	xor    eax,eax
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <RTC::close(int, int, void*)>:
c0015c18:	31 c0                	xor    eax,eax
c0015c1a:	c3                   	ret    
c0015c1b:	90                   	nop

c0015c1c <RTC::timeInSecondsUTC()>:
c0015c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c2c:	c3                   	ret    
c0015c2d:	90                   	nop

c0015c2e <RTC::timeInDatetimeUTC()>:
c0015c2e:	53                   	push   ebx
c0015c2f:	83 ec 14             	sub    esp,0x14
c0015c32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c3c:	50                   	push   eax
c0015c3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c40:	83 c4 0c             	add    esp,0xc
c0015c43:	52                   	push   edx
c0015c44:	50                   	push   eax
c0015c45:	53                   	push   ebx
c0015c46:	e8 ed 5a ff ff       	call   c000b738 <secondsToDatetime(unsigned long long)>
c0015c4b:	89 d8                	mov    eax,ebx
c0015c4d:	83 c4 14             	add    esp,0x14
c0015c50:	5b                   	pop    ebx
c0015c51:	c2 04 00             	ret    0x4

c0015c54 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c54:	56                   	push   esi
c0015c55:	53                   	push   ebx
c0015c56:	83 ec 14             	sub    esp,0x14
c0015c59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c5f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c62:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c66:	52                   	push   edx
c0015c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c6f:	50                   	push   eax
c0015c70:	e8 c3 5a ff ff       	call   c000b738 <secondsToDatetime(unsigned long long)>
c0015c75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c81:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c89:	89 f0                	mov    eax,esi
c0015c8b:	83 c4 20             	add    esp,0x20
c0015c8e:	5b                   	pop    ebx
c0015c8f:	5e                   	pop    esi
c0015c90:	ff e0                	jmp    eax

c0015c92 <RTC::~RTC()>:
c0015c92:	83 ec 0c             	sub    esp,0xc
c0015c95:	ba 40 f0 01 c0       	mov    edx,0xc001f040
c0015c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c9e:	89 10                	mov    DWORD PTR [eax],edx
c0015ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	50                   	push   eax
c0015ca8:	e8 0f 58 ff ff       	call   c000b4bc <Clock::~Clock()>
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	90                   	nop
c0015cb1:	83 c4 0c             	add    esp,0xc
c0015cb4:	c3                   	ret    
c0015cb5:	90                   	nop

c0015cb6 <RTC::~RTC()>:
c0015cb6:	83 ec 0c             	sub    esp,0xc
c0015cb9:	83 ec 0c             	sub    esp,0xc
c0015cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cc0:	e8 cd ff ff ff       	call   c0015c92 <RTC::~RTC()>
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	83 ec 08             	sub    esp,0x8
c0015ccb:	68 60 01 00 00       	push   0x160
c0015cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cd4:	e8 b8 47 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	83 c4 0c             	add    esp,0xc
c0015cdf:	c3                   	ret    

c0015ce0 <RTC::get_update_in_progress_flag()>:
c0015ce0:	83 ec 14             	sub    esp,0x14
c0015ce3:	6a 0a                	push   0xa
c0015ce5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ceb:	e8 b6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cf0:	83 c4 1c             	add    esp,0x1c
c0015cf3:	c0 e8 07             	shr    al,0x7
c0015cf6:	c3                   	ret    
c0015cf7:	90                   	nop

c0015cf8 <RTC::completeRTCRefresh()>:
c0015cf8:	55                   	push   ebp
c0015cf9:	57                   	push   edi
c0015cfa:	56                   	push   esi
c0015cfb:	53                   	push   ebx
c0015cfc:	83 ec 2c             	sub    esp,0x2c
c0015cff:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d05:	83 ec 0c             	sub    esp,0xc
c0015d08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d0c:	e8 cf ff ff ff       	call   c0015ce0 <RTC::get_update_in_progress_flag()>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	84 c0                	test   al,al
c0015d16:	74 0e                	je     c0015d26 <RTC::completeRTCRefresh()+0x2e>
c0015d18:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d1e:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d24:	73 df                	jae    c0015d05 <RTC::completeRTCRefresh()+0xd>
c0015d26:	55                   	push   ebp
c0015d27:	55                   	push   ebp
c0015d28:	6a 00                	push   0x0
c0015d2a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d30:	e8 71 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d35:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d39:	58                   	pop    eax
c0015d3a:	5a                   	pop    edx
c0015d3b:	6a 02                	push   0x2
c0015d3d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d43:	e8 5e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d48:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d4c:	59                   	pop    ecx
c0015d4d:	5b                   	pop    ebx
c0015d4e:	6a 04                	push   0x4
c0015d50:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d56:	e8 4b 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d5b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d5f:	5e                   	pop    esi
c0015d60:	5f                   	pop    edi
c0015d61:	6a 07                	push   0x7
c0015d63:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d69:	e8 38 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d6e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d72:	5d                   	pop    ebp
c0015d73:	58                   	pop    eax
c0015d74:	6a 08                	push   0x8
c0015d76:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d7c:	e8 25 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d81:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d85:	58                   	pop    eax
c0015d86:	5a                   	pop    edx
c0015d87:	6a 09                	push   0x9
c0015d89:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d8f:	e8 12 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	0f b6 e8             	movzx  ebp,al
c0015d9a:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015da7:	e8 34 ff ff ff       	call   c0015ce0 <RTC::get_update_in_progress_flag()>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	84 c0                	test   al,al
c0015db1:	74 0e                	je     c0015dc1 <RTC::completeRTCRefresh()+0xc9>
c0015db3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015db9:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015dbf:	73 df                	jae    c0015da0 <RTC::completeRTCRefresh()+0xa8>
c0015dc1:	50                   	push   eax
c0015dc2:	50                   	push   eax
c0015dc3:	6a 00                	push   0x0
c0015dc5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dcb:	e8 d6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dd0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015dd4:	58                   	pop    eax
c0015dd5:	5a                   	pop    edx
c0015dd6:	6a 02                	push   0x2
c0015dd8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dde:	e8 c3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015de3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015de7:	59                   	pop    ecx
c0015de8:	5b                   	pop    ebx
c0015de9:	6a 04                	push   0x4
c0015deb:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015df1:	e8 b0 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df6:	5e                   	pop    esi
c0015df7:	88 c3                	mov    bl,al
c0015df9:	5f                   	pop    edi
c0015dfa:	6a 07                	push   0x7
c0015dfc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e02:	e8 9f 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e07:	89 c6                	mov    esi,eax
c0015e09:	58                   	pop    eax
c0015e0a:	5a                   	pop    edx
c0015e0b:	6a 08                	push   0x8
c0015e0d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e13:	e8 8e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e18:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e1c:	59                   	pop    ecx
c0015e1d:	5f                   	pop    edi
c0015e1e:	6a 09                	push   0x9
c0015e20:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e26:	e8 7b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e2b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e2f:	0f b6 f8             	movzx  edi,al
c0015e32:	83 c4 10             	add    esp,0x10
c0015e35:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e39:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e3d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e41:	89 f1                	mov    ecx,esi
c0015e43:	0f 94 c0             	sete   al
c0015e46:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e4a:	0f 94 c2             	sete   dl
c0015e4d:	21 d0                	and    eax,edx
c0015e4f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e53:	0f 94 c2             	sete   dl
c0015e56:	21 c2                	and    edx,eax
c0015e58:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e5c:	0f 94 c0             	sete   al
c0015e5f:	21 d0                	and    eax,edx
c0015e61:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e65:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e69:	0f 94 c1             	sete   cl
c0015e6c:	84 c8                	test   al,cl
c0015e6e:	75 29                	jne    c0015e99 <RTC::completeRTCRefresh()+0x1a1>
c0015e70:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e74:	89 fd                	mov    ebp,edi
c0015e76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e7a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e7e:	89 f0                	mov    eax,esi
c0015e80:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e88:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e8c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e90:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e94:	e9 01 ff ff ff       	jmp    c0015d9a <RTC::completeRTCRefresh()+0xa2>
c0015e99:	39 fd                	cmp    ebp,edi
c0015e9b:	75 d3                	jne    c0015e70 <RTC::completeRTCRefresh()+0x178>
c0015e9d:	55                   	push   ebp
c0015e9e:	55                   	push   ebp
c0015e9f:	6a 0b                	push   0xb
c0015ea1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ea7:	e8 fa 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015eac:	83 c4 10             	add    esp,0x10
c0015eaf:	89 c5                	mov    ebp,eax
c0015eb1:	a8 04                	test   al,0x4
c0015eb3:	75 78                	jne    c0015f2d <RTC::completeRTCRefresh()+0x235>
c0015eb5:	b1 0a                	mov    cl,0xa
c0015eb7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015ebb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015ebf:	83 e2 0f             	and    edx,0xf
c0015ec2:	c0 e8 04             	shr    al,0x4
c0015ec5:	c1 ef 04             	shr    edi,0x4
c0015ec8:	f6 e1                	mul    cl
c0015eca:	6b ff 0a             	imul   edi,edi,0xa
c0015ecd:	01 d0                	add    eax,edx
c0015ecf:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ed3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ed7:	83 e2 0f             	and    edx,0xf
c0015eda:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ede:	c0 e8 04             	shr    al,0x4
c0015ee1:	f6 e1                	mul    cl
c0015ee3:	01 d0                	add    eax,edx
c0015ee5:	88 da                	mov    dl,bl
c0015ee7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015eeb:	83 e2 0f             	and    edx,0xf
c0015eee:	88 d8                	mov    al,bl
c0015ef0:	83 e3 80             	and    ebx,0xffffff80
c0015ef3:	c0 e8 04             	shr    al,0x4
c0015ef6:	83 e0 07             	and    eax,0x7
c0015ef9:	f6 e1                	mul    cl
c0015efb:	01 d0                	add    eax,edx
c0015efd:	89 f2                	mov    edx,esi
c0015eff:	09 c3                	or     ebx,eax
c0015f01:	83 e2 0f             	and    edx,0xf
c0015f04:	89 f0                	mov    eax,esi
c0015f06:	c0 e8 04             	shr    al,0x4
c0015f09:	f6 e1                	mul    cl
c0015f0b:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f0e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f12:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f16:	83 e2 0f             	and    edx,0xf
c0015f19:	c0 e8 04             	shr    al,0x4
c0015f1c:	f6 e1                	mul    cl
c0015f1e:	01 d0                	add    eax,edx
c0015f20:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f28:	83 e0 0f             	and    eax,0xf
c0015f2b:	01 c7                	add    edi,eax
c0015f2d:	83 e5 02             	and    ebp,0x2
c0015f30:	75 14                	jne    c0015f46 <RTC::completeRTCRefresh()+0x24e>
c0015f32:	84 db                	test   bl,bl
c0015f34:	79 10                	jns    c0015f46 <RTC::completeRTCRefresh()+0x24e>
c0015f36:	83 e3 7f             	and    ebx,0x7f
c0015f39:	b9 18 00 00 00       	mov    ecx,0x18
c0015f3e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f41:	99                   	cdq    
c0015f42:	f7 f9                	idiv   ecx
c0015f44:	88 d3                	mov    bl,dl
c0015f46:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f4c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f52:	77 06                	ja     c0015f5a <RTC::completeRTCRefresh()+0x262>
c0015f54:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f5a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f5f:	31 d2                	xor    edx,edx
c0015f61:	c1 e1 10             	shl    ecx,0x10
c0015f64:	89 d7                	mov    edi,edx
c0015f66:	c1 e5 10             	shl    ebp,0x10
c0015f69:	31 c0                	xor    eax,eax
c0015f6b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f71:	09 cf                	or     edi,ecx
c0015f73:	89 fa                	mov    edx,edi
c0015f75:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f79:	88 da                	mov    dl,bl
c0015f7b:	89 f3                	mov    ebx,esi
c0015f7d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f81:	88 d8                	mov    al,bl
c0015f83:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f87:	0f b7 c8             	movzx  ecx,ax
c0015f8a:	09 e9                	or     ecx,ebp
c0015f8c:	89 c8                	mov    eax,ecx
c0015f8e:	51                   	push   ecx
c0015f8f:	51                   	push   ecx
c0015f90:	52                   	push   edx
c0015f91:	50                   	push   eax
c0015f92:	e8 14 56 ff ff       	call   c000b5ab <datetimeToSeconds(datetime_t)>
c0015f97:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f9b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015fa1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015fa7:	83 c4 3c             	add    esp,0x3c
c0015faa:	5b                   	pop    ebx
c0015fab:	5e                   	pop    esi
c0015fac:	5f                   	pop    edi
c0015fad:	5d                   	pop    ebp
c0015fae:	c3                   	ret    
c0015faf:	90                   	nop

c0015fb0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015fb0:	55                   	push   ebp
c0015fb1:	57                   	push   edi
c0015fb2:	56                   	push   esi
c0015fb3:	53                   	push   ebx
c0015fb4:	83 ec 30             	sub    esp,0x30
c0015fb7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fbb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015fbf:	6a 00                	push   0x0
c0015fc1:	6a 00                	push   0x0
c0015fc3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fc9:	e8 ee 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fce:	83 c4 0c             	add    esp,0xc
c0015fd1:	6a 00                	push   0x0
c0015fd3:	6a 02                	push   0x2
c0015fd5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fdb:	e8 dc 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fe0:	31 d2                	xor    edx,edx
c0015fe2:	89 f9                	mov    ecx,edi
c0015fe4:	89 f8                	mov    eax,edi
c0015fe6:	c1 e9 10             	shr    ecx,0x10
c0015fe9:	0f b6 c4             	movzx  eax,ah
c0015fec:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015ff0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ff8:	b9 64 00 00 00       	mov    ecx,0x64
c0015ffd:	89 f0                	mov    eax,esi
c0015fff:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016003:	89 f0                	mov    eax,esi
c0016005:	0f b6 c4             	movzx  eax,ah
c0016008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001600c:	89 f0                	mov    eax,esi
c001600e:	c1 e8 10             	shr    eax,0x10
c0016011:	66 f7 f1             	div    cx
c0016014:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016019:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001601e:	59                   	pop    ecx
c001601f:	5b                   	pop    ebx
c0016020:	89 fb                	mov    ebx,edi
c0016022:	6a 0b                	push   0xb
c0016024:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001602a:	e8 77 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001602f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016033:	83 c4 10             	add    esp,0x10
c0016036:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001603b:	75 74                	jne    c00160b1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001603d:	b2 0a                	mov    dl,0xa
c001603f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016043:	0f b6 c1             	movzx  eax,cl
c0016046:	f6 f2                	div    dl
c0016048:	88 c3                	mov    bl,al
c001604a:	88 e0                	mov    al,ah
c001604c:	c1 e3 04             	shl    ebx,0x4
c001604f:	09 c3                	or     ebx,eax
c0016051:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016056:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001605a:	f6 f2                	div    dl
c001605c:	88 c1                	mov    cl,al
c001605e:	88 e0                	mov    al,ah
c0016060:	c1 e1 04             	shl    ecx,0x4
c0016063:	09 c1                	or     ecx,eax
c0016065:	89 f8                	mov    eax,edi
c0016067:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001606b:	0f b6 c0             	movzx  eax,al
c001606e:	f6 f2                	div    dl
c0016070:	88 c3                	mov    bl,al
c0016072:	88 e0                	mov    al,ah
c0016074:	c1 e3 04             	shl    ebx,0x4
c0016077:	09 c3                	or     ebx,eax
c0016079:	89 f0                	mov    eax,esi
c001607b:	0f b6 c0             	movzx  eax,al
c001607e:	f6 f2                	div    dl
c0016080:	88 c1                	mov    cl,al
c0016082:	88 e0                	mov    al,ah
c0016084:	c1 e1 04             	shl    ecx,0x4
c0016087:	09 c1                	or     ecx,eax
c0016089:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001608e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016092:	f6 f2                	div    dl
c0016094:	88 c1                	mov    cl,al
c0016096:	88 e0                	mov    al,ah
c0016098:	c1 e1 04             	shl    ecx,0x4
c001609b:	09 c1                	or     ecx,eax
c001609d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00160a2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00160a6:	f6 f2                	div    dl
c00160a8:	89 c5                	mov    ebp,eax
c00160aa:	88 e0                	mov    al,ah
c00160ac:	c1 e5 04             	shl    ebp,0x4
c00160af:	09 c5                	or     ebp,eax
c00160b1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00160b6:	75 17                	jne    c00160cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160b8:	80 fb 0b             	cmp    bl,0xb
c00160bb:	76 0c                	jbe    c00160c9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00160bd:	80 eb 0c             	sub    bl,0xc
c00160c0:	75 02                	jne    c00160c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00160c2:	b3 0c                	mov    bl,0xc
c00160c4:	83 cb 80             	or     ebx,0xffffff80
c00160c7:	eb 06                	jmp    c00160cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160c9:	84 db                	test   bl,bl
c00160cb:	75 02                	jne    c00160cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00160cd:	b3 0c                	mov    bl,0xc
c00160cf:	0f b6 db             	movzx  ebx,bl
c00160d2:	50                   	push   eax
c00160d3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00160d8:	50                   	push   eax
c00160d9:	6a 00                	push   0x0
c00160db:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160e1:	e8 d6 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e6:	83 c4 0c             	add    esp,0xc
c00160e9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160ee:	50                   	push   eax
c00160ef:	6a 02                	push   0x2
c00160f1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160f7:	e8 c0 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160fc:	83 c4 0c             	add    esp,0xc
c00160ff:	53                   	push   ebx
c0016100:	6a 04                	push   0x4
c0016102:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016108:	e8 af 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001610d:	83 c4 0c             	add    esp,0xc
c0016110:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016115:	50                   	push   eax
c0016116:	6a 07                	push   0x7
c0016118:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001611e:	e8 99 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016123:	83 c4 0c             	add    esp,0xc
c0016126:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001612b:	50                   	push   eax
c001612c:	6a 08                	push   0x8
c001612e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016134:	e8 83 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016139:	83 c4 0c             	add    esp,0xc
c001613c:	89 e8                	mov    eax,ebp
c001613e:	0f b6 e8             	movzx  ebp,al
c0016141:	55                   	push   ebp
c0016142:	6a 09                	push   0x9
c0016144:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001614a:	e8 6d 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001614f:	5a                   	pop    edx
c0016150:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016154:	e8 9f fb ff ff       	call   c0015cf8 <RTC::completeRTCRefresh()>
c0016159:	83 c4 3c             	add    esp,0x3c
c001615c:	b0 01                	mov    al,0x1
c001615e:	5b                   	pop    ebx
c001615f:	5e                   	pop    esi
c0016160:	5f                   	pop    edi
c0016161:	5d                   	pop    ebp
c0016162:	c3                   	ret    

c0016163 <rtcIRQHandler(regs*, void*)>:
c0016163:	53                   	push   ebx
c0016164:	83 ec 10             	sub    esp,0x10
c0016167:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001616b:	6a 0c                	push   0xc
c001616d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016173:	e8 2e 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016178:	83 c4 10             	add    esp,0x10
c001617b:	84 c0                	test   al,al
c001617d:	79 24                	jns    c00161a3 <rtcIRQHandler(regs*, void*)+0x40>
c001617f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016186:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001618d:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016194:	75 0d                	jne    c00161a3 <rtcIRQHandler(regs*, void*)+0x40>
c0016196:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001619a:	83 c4 08             	add    esp,0x8
c001619d:	5b                   	pop    ebx
c001619e:	e9 55 fb ff ff       	jmp    c0015cf8 <RTC::completeRTCRefresh()>
c00161a3:	83 c4 08             	add    esp,0x8
c00161a6:	5b                   	pop    ebx
c00161a7:	c3                   	ret    

c00161a8 <RTC::RTC()>:
c00161a8:	83 ec 1c             	sub    esp,0x1c
c00161ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161af:	83 ec 08             	sub    esp,0x8
c00161b2:	68 23 f0 01 c0       	push   0xc001f023
c00161b7:	50                   	push   eax
c00161b8:	e8 c9 52 ff ff       	call   c000b486 <Clock::Clock(char const*)>
c00161bd:	83 c4 10             	add    esp,0x10
c00161c0:	ba 40 f0 01 c0       	mov    edx,0xc001f040
c00161c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161c9:	89 10                	mov    DWORD PTR [eax],edx
c00161cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161cf:	83 ec 0c             	sub    esp,0xc
c00161d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161d6:	6a 01                	push   0x1
c00161d8:	68 63 61 01 c0       	push   0xc0016163
c00161dd:	6a 08                	push   0x8
c00161df:	50                   	push   eax
c00161e0:	e8 8b 57 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161e5:	83 c4 20             	add    esp,0x20
c00161e8:	89 c2                	mov    edx,eax
c00161ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161f4:	fa                   	cli    
c00161f5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161fa:	40                   	inc    eax
c00161fb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0016200:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016205:	83 ec 08             	sub    esp,0x8
c0016208:	6a 0b                	push   0xb
c001620a:	50                   	push   eax
c001620b:	e8 96 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016210:	83 c4 10             	add    esp,0x10
c0016213:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016217:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001621c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016220:	83 ca 10             	or     edx,0x10
c0016223:	81 e2 ff 00 00 00    	and    edx,0xff
c0016229:	83 ec 04             	sub    esp,0x4
c001622c:	52                   	push   edx
c001622d:	6a 0b                	push   0xb
c001622f:	50                   	push   eax
c0016230:	e8 87 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	83 ec 0c             	sub    esp,0xc
c001623b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623f:	e8 b4 fa ff ff       	call   c0015cf8 <RTC::completeRTCRefresh()>
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001624c:	48                   	dec    eax
c001624d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0016252:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0016257:	85 c0                	test   eax,eax
c0016259:	75 01                	jne    c001625c <RTC::RTC()+0xb4>
c001625b:	fb                   	sti    
c001625c:	90                   	nop
c001625d:	83 c4 1c             	add    esp,0x1c
c0016260:	c3                   	ret    
c0016261:	66 90                	xchg   ax,ax
c0016263:	90                   	nop

c0016264 <HalConsoleScroll(int, int)>:
c0016264:	83 ec 10             	sub    esp,0x10
c0016267:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001626f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016277:	90                   	nop
c0016278:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001627d:	0f 8f e1 00 00 00    	jg     c0016364 <HalConsoleScroll(int, int)+0x100>
c0016283:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001628b:	90                   	nop
c001628c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016294:	0f 8f be 00 00 00    	jg     c0016358 <HalConsoleScroll(int, int)+0xf4>
c001629a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001629e:	89 d0                	mov    eax,edx
c00162a0:	c1 e0 02             	shl    eax,0x2
c00162a3:	01 d0                	add    eax,edx
c00162a5:	c1 e0 05             	shl    eax,0x5
c00162a8:	89 c2                	mov    edx,eax
c00162aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ae:	01 d0                	add    eax,edx
c00162b0:	89 c2                	mov    edx,eax
c00162b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00162b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162bd:	89 d0                	mov    eax,edx
c00162bf:	c1 e0 02             	shl    eax,0x2
c00162c2:	01 d0                	add    eax,edx
c00162c4:	c1 e0 05             	shl    eax,0x5
c00162c7:	89 c2                	mov    edx,eax
c00162c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162cd:	01 d0                	add    eax,edx
c00162cf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00162d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d9:	01 c2                	add    edx,eax
c00162db:	8a 01                	mov    al,BYTE PTR [ecx]
c00162dd:	88 02                	mov    BYTE PTR [edx],al
c00162df:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162e4:	75 66                	jne    c001634c <HalConsoleScroll(int, int)+0xe8>
c00162e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ea:	83 e0 01             	and    eax,0x1
c00162ed:	74 39                	je     c0016328 <HalConsoleScroll(int, int)+0xc4>
c00162ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162f3:	83 e0 0f             	and    eax,0xf
c00162f6:	88 c2                	mov    dl,al
c00162f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162fc:	c1 e0 04             	shl    eax,0x4
c00162ff:	88 d1                	mov    cl,dl
c0016301:	09 c1                	or     ecx,eax
c0016303:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016307:	89 d0                	mov    eax,edx
c0016309:	c1 e0 02             	shl    eax,0x2
c001630c:	01 d0                	add    eax,edx
c001630e:	c1 e0 05             	shl    eax,0x5
c0016311:	89 c2                	mov    edx,eax
c0016313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016317:	01 d0                	add    eax,edx
c0016319:	89 c2                	mov    edx,eax
c001631b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001631f:	01 d0                	add    eax,edx
c0016321:	88 ca                	mov    dl,cl
c0016323:	88 10                	mov    BYTE PTR [eax],dl
c0016325:	eb 25                	jmp    c001634c <HalConsoleScroll(int, int)+0xe8>
c0016327:	90                   	nop
c0016328:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001632c:	89 d0                	mov    eax,edx
c001632e:	c1 e0 02             	shl    eax,0x2
c0016331:	01 d0                	add    eax,edx
c0016333:	c1 e0 05             	shl    eax,0x5
c0016336:	89 c2                	mov    edx,eax
c0016338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001633c:	01 d0                	add    eax,edx
c001633e:	89 c2                	mov    edx,eax
c0016340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016344:	01 d0                	add    eax,edx
c0016346:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016349:	8d 76 00             	lea    esi,[esi+0x0]
c001634c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016350:	e9 37 ff ff ff       	jmp    c001628c <HalConsoleScroll(int, int)+0x28>
c0016355:	8d 76 00             	lea    esi,[esi+0x0]
c0016358:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001635c:	e9 17 ff ff ff       	jmp    c0016278 <HalConsoleScroll(int, int)+0x14>
c0016361:	8d 76 00             	lea    esi,[esi+0x0]
c0016364:	90                   	nop
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	c3                   	ret    
c0016369:	8d 76 00             	lea    esi,[esi+0x0]

c001636c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001636c:	83 ec 14             	sub    esp,0x14
c001636f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016373:	88 04 24             	mov    BYTE PTR [esp],al
c0016376:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016379:	25 ff 00 00 00       	and    eax,0xff
c001637e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016382:	89 d1                	mov    ecx,edx
c0016384:	83 e1 0f             	and    ecx,0xf
c0016387:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001638b:	c1 e2 04             	shl    edx,0x4
c001638e:	81 e2 ff 00 00 00    	and    edx,0xff
c0016394:	09 ca                	or     edx,ecx
c0016396:	c1 e2 08             	shl    edx,0x8
c0016399:	09 d0                	or     eax,edx
c001639b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00163a0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00163a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163ac:	89 d0                	mov    eax,edx
c00163ae:	c1 e0 02             	shl    eax,0x2
c00163b1:	01 d0                	add    eax,edx
c00163b3:	c1 e0 04             	shl    eax,0x4
c00163b6:	89 c2                	mov    edx,eax
c00163b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163bc:	01 d0                	add    eax,edx
c00163be:	01 c0                	add    eax,eax
c00163c0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00163c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163c8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00163cd:	66 89 02             	mov    WORD PTR [edx],ax
c00163d0:	90                   	nop
c00163d1:	83 c4 14             	add    esp,0x14
c00163d4:	c3                   	ret    
c00163d5:	8d 76 00             	lea    esi,[esi+0x0]

c00163d8 <HalConsoleCursorUpdate(int, int)>:
c00163d8:	83 ec 20             	sub    esp,0x20
c00163db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163df:	89 c2                	mov    edx,eax
c00163e1:	89 d0                	mov    eax,edx
c00163e3:	c1 e0 02             	shl    eax,0x2
c00163e6:	01 d0                	add    eax,edx
c00163e8:	c1 e0 04             	shl    eax,0x4
c00163eb:	89 c2                	mov    edx,eax
c00163ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163f1:	01 d0                	add    eax,edx
c00163f3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163f8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163ff:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016404:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001640c:	ee                   	out    dx,al
c001640d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016412:	25 ff 00 00 00       	and    eax,0xff
c0016417:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001641e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016422:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016426:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001642a:	ee                   	out    dx,al
c001642b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016432:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016437:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001643b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001643f:	ee                   	out    dx,al
c0016440:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016445:	66 c1 e8 08          	shr    ax,0x8
c0016449:	25 ff 00 00 00       	and    eax,0xff
c001644e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016455:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016459:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001645d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016461:	ee                   	out    dx,al
c0016462:	90                   	nop
c0016463:	83 c4 20             	add    esp,0x20
c0016466:	c3                   	ret    
c0016467:	90                   	nop

c0016468 <FAT::getName()>:
c0016468:	b8 74 f0 01 c0       	mov    eax,0xc001f074
c001646d:	c3                   	ret    
c001646e:	66 90                	xchg   ax,ax

c0016470 <FAT::tell(void*, unsigned long long*)>:
c0016470:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016475:	75 09                	jne    c0016480 <FAT::tell(void*, unsigned long long*)+0x10>
c0016477:	b8 04 00 00 00       	mov    eax,0x4
c001647c:	c3                   	ret    
c001647d:	8d 76 00             	lea    esi,[esi+0x0]
c0016480:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016485:	75 09                	jne    c0016490 <FAT::tell(void*, unsigned long long*)+0x20>
c0016487:	b8 04 00 00 00       	mov    eax,0x4
c001648c:	c3                   	ret    
c001648d:	8d 76 00             	lea    esi,[esi+0x0]
c0016490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016494:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016497:	ba 00 00 00 00       	mov    edx,0x0
c001649c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164a0:	89 01                	mov    DWORD PTR [ecx],eax
c00164a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164a5:	b8 00 00 00 00       	mov    eax,0x0
c00164aa:	c3                   	ret    
c00164ab:	90                   	nop

c00164ac <FAT::stat(void*, unsigned long long*)>:
c00164ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164b1:	75 09                	jne    c00164bc <FAT::stat(void*, unsigned long long*)+0x10>
c00164b3:	b8 04 00 00 00       	mov    eax,0x4
c00164b8:	c3                   	ret    
c00164b9:	8d 76 00             	lea    esi,[esi+0x0]
c00164bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164c1:	75 09                	jne    c00164cc <FAT::stat(void*, unsigned long long*)+0x20>
c00164c3:	b8 04 00 00 00       	mov    eax,0x4
c00164c8:	c3                   	ret    
c00164c9:	8d 76 00             	lea    esi,[esi+0x0]
c00164cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00164d3:	ba 00 00 00 00       	mov    edx,0x0
c00164d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164dc:	89 01                	mov    DWORD PTR [ecx],eax
c00164de:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164e1:	b8 00 00 00 00       	mov    eax,0x0
c00164e6:	c3                   	ret    
c00164e7:	90                   	nop

c00164e8 <FAT::~FAT()>:
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	ba c0 f0 01 c0       	mov    edx,0xc001f0c0
c00164f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f4:	89 10                	mov    DWORD PTR [eax],edx
c00164f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fa:	83 ec 0c             	sub    esp,0xc
c00164fd:	50                   	push   eax
c00164fe:	e8 c9 43 ff ff       	call   c000a8cc <Filesystem::~Filesystem()>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	90                   	nop
c0016507:	83 c4 0c             	add    esp,0xc
c001650a:	c3                   	ret    
c001650b:	90                   	nop

c001650c <FAT::~FAT()>:
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 cd ff ff ff       	call   c00164e8 <FAT::~FAT()>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 ec 08             	sub    esp,0x8
c0016521:	6a 08                	push   0x8
c0016523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016527:	e8 65 3f ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001652c:	83 c4 10             	add    esp,0x10
c001652f:	83 c4 0c             	add    esp,0xc
c0016532:	c3                   	ret    
c0016533:	90                   	nop

c0016534 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016534:	83 ec 1c             	sub    esp,0x1c
c0016537:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001653e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016543:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016547:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001654e:	83 f8 ff             	cmp    eax,0xffffffff
c0016551:	75 35                	jne    c0016588 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016553:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016557:	88 c2                	mov    dl,al
c0016559:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001655e:	01 d0                	add    eax,edx
c0016560:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016564:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001656a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001656e:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016575:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001657a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001657e:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016585:	eb 19                	jmp    c00165a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016587:	90                   	nop
c0016588:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001658c:	88 c2                	mov    dl,al
c001658e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016592:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016599:	01 d0                	add    eax,edx
c001659b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001659f:	90                   	nop
c00165a0:	83 ec 04             	sub    esp,0x4
c00165a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00165ab:	8d 44 24 15          	lea    eax,[esp+0x15]
c00165af:	50                   	push   eax
c00165b0:	e8 9f e8 fe ff       	call   c0004e54 <f_getlabel>
c00165b5:	83 c4 10             	add    esp,0x10
c00165b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165c1:	75 09                	jne    c00165cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00165c3:	b8 00 00 00 00       	mov    eax,0x0
c00165c8:	eb 0a                	jmp    c00165d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00165ca:	66 90                	xchg   ax,ax
c00165cc:	b8 01 00 00 00       	mov    eax,0x1
c00165d1:	8d 76 00             	lea    esi,[esi+0x0]
c00165d4:	83 c4 1c             	add    esp,0x1c
c00165d7:	c3                   	ret    

c00165d8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00165d8:	57                   	push   edi
c00165d9:	83 ec 58             	sub    esp,0x58
c00165dc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165e4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165e8:	b8 00 00 00 00       	mov    eax,0x0
c00165ed:	b9 0f 00 00 00       	mov    ecx,0xf
c00165f2:	fc                   	cld    
c00165f3:	89 d7                	mov    edi,edx
c00165f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165fb:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016602:	83 f8 ff             	cmp    eax,0xffffffff
c0016605:	75 35                	jne    c001663c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016607:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001660b:	88 c2                	mov    dl,al
c001660d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016612:	01 d0                	add    eax,edx
c0016614:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016618:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001661e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016622:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016629:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001662e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016632:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016639:	eb 19                	jmp    c0016654 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001663b:	90                   	nop
c001663c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016640:	88 c2                	mov    dl,al
c0016642:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016646:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001664d:	01 d0                	add    eax,edx
c001664f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016653:	90                   	nop
c0016654:	83 ec 08             	sub    esp,0x8
c0016657:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001665b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001665f:	50                   	push   eax
c0016660:	e8 5b a1 fe ff       	call   c00007c0 <strcat>
c0016665:	83 c4 10             	add    esp,0x10
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001666f:	50                   	push   eax
c0016670:	e8 30 e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001667c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016681:	75 09                	jne    c001668c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016683:	b8 00 00 00 00       	mov    eax,0x0
c0016688:	eb 0a                	jmp    c0016694 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001668a:	66 90                	xchg   ax,ax
c001668c:	b8 01 00 00 00       	mov    eax,0x1
c0016691:	8d 76 00             	lea    esi,[esi+0x0]
c0016694:	83 c4 58             	add    esp,0x58
c0016697:	5f                   	pop    edi
c0016698:	c3                   	ret    
c0016699:	90                   	nop
c001669a:	66 90                	xchg   ax,ax

c001669c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001669c:	83 ec 2c             	sub    esp,0x2c
c001669f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00166a7:	83 ec 08             	sub    esp,0x8
c00166aa:	68 98 f0 01 c0       	push   0xc001f098
c00166af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166b3:	e8 28 a0 fe ff       	call   c00006e0 <strcmp>
c00166b8:	83 c4 10             	add    esp,0x10
c00166bb:	85 c0                	test   eax,eax
c00166bd:	0f 94 c0             	sete   al
c00166c0:	84 c0                	test   al,al
c00166c2:	74 10                	je     c00166d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00166c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166cc:	e9 b3 00 00 00       	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166d1:	8d 76 00             	lea    esi,[esi+0x0]
c00166d4:	83 ec 08             	sub    esp,0x8
c00166d7:	68 8a f0 01 c0       	push   0xc001f08a
c00166dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166e0:	e8 fb 9f fe ff       	call   c00006e0 <strcmp>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	85 c0                	test   eax,eax
c00166ea:	0f 94 c0             	sete   al
c00166ed:	84 c0                	test   al,al
c00166ef:	74 0f                	je     c0016700 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166f1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166f9:	e9 86 00 00 00       	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166fe:	66 90                	xchg   ax,ax
c0016700:	83 ec 08             	sub    esp,0x8
c0016703:	68 90 f0 01 c0       	push   0xc001f090
c0016708:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001670c:	e8 cf 9f fe ff       	call   c00006e0 <strcmp>
c0016711:	83 c4 10             	add    esp,0x10
c0016714:	85 c0                	test   eax,eax
c0016716:	0f 94 c0             	sete   al
c0016719:	84 c0                	test   al,al
c001671b:	74 0b                	je     c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001671d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016725:	eb 5d                	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016727:	90                   	nop
c0016728:	83 ec 08             	sub    esp,0x8
c001672b:	68 5c cf 01 c0       	push   0xc001cf5c
c0016730:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016734:	e8 a7 9f fe ff       	call   c00006e0 <strcmp>
c0016739:	83 c4 10             	add    esp,0x10
c001673c:	85 c0                	test   eax,eax
c001673e:	0f 94 c0             	sete   al
c0016741:	84 c0                	test   al,al
c0016743:	74 0b                	je     c0016750 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016745:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001674d:	eb 35                	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001674f:	90                   	nop
c0016750:	83 ec 08             	sub    esp,0x8
c0016753:	68 96 f0 01 c0       	push   0xc001f096
c0016758:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001675c:	e8 7f 9f fe ff       	call   c00006e0 <strcmp>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	85 c0                	test   eax,eax
c0016766:	0f 94 c0             	sete   al
c0016769:	84 c0                	test   al,al
c001676b:	74 0b                	je     c0016778 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001676d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016775:	eb 0d                	jmp    c0016784 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016777:	90                   	nop
c0016778:	b8 08 00 00 00       	mov    eax,0x8
c001677d:	e9 ea 00 00 00       	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016782:	66 90                	xchg   ax,ax
c0016784:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001678b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016790:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016794:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001679b:	83 f8 ff             	cmp    eax,0xffffffff
c001679e:	75 34                	jne    c00167d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00167a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167a4:	88 c2                	mov    dl,al
c00167a6:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167ab:	01 d0                	add    eax,edx
c00167ad:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167b1:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00167b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167bb:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00167c2:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00167c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00167cb:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00167d2:	eb 18                	jmp    c00167ec <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00167d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167d8:	88 c2                	mov    dl,al
c00167da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167de:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00167e5:	01 d0                	add    eax,edx
c00167e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167eb:	90                   	nop
c00167ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167f0:	88 04 24             	mov    BYTE PTR [esp],al
c00167f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016803:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016808:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	68 00 20 00 00       	push   0x2000
c0016818:	e8 9c 0f ff ff       	call   c00077b9 <malloc>
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016824:	68 00 20 00 00       	push   0x2000
c0016829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016831:	50                   	push   eax
c0016832:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016836:	50                   	push   eax
c0016837:	e8 59 ea fe ff       	call   c0005295 <f_mkfs>
c001683c:	83 c4 10             	add    esp,0x10
c001683f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016843:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016848:	75 0a                	jne    c0016854 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001684a:	b8 00 00 00 00       	mov    eax,0x0
c001684f:	eb 1b                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016851:	8d 76 00             	lea    esi,[esi+0x0]
c0016854:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016859:	75 09                	jne    c0016864 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001685b:	b8 09 00 00 00       	mov    eax,0x9
c0016860:	eb 0a                	jmp    c001686c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016862:	66 90                	xchg   ax,ax
c0016864:	b8 01 00 00 00       	mov    eax,0x1
c0016869:	8d 76 00             	lea    esi,[esi+0x0]
c001686c:	83 c4 2c             	add    esp,0x2c
c001686f:	c3                   	ret    

c0016870 <FAT::tryMount(LogicalDisk*, int)>:
c0016870:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016876:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001687b:	83 f8 14             	cmp    eax,0x14
c001687e:	75 18                	jne    c0016898 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	68 9c f0 01 c0       	push   0xc001f09c
c0016888:	e8 7a 99 ff ff       	call   c0010207 <KePanic(char const*)>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	b0 00                	mov    al,0x0
c0016892:	e9 e9 01 00 00       	jmp    c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016897:	90                   	nop
c0016898:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001689f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00168a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168ab:	3d 00 02 00 00       	cmp    eax,0x200
c00168b0:	74 0a                	je     c00168bc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00168b2:	b0 00                	mov    al,0x0
c00168b4:	e9 c7 01 00 00       	jmp    c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168b9:	8d 76 00             	lea    esi,[esi+0x0]
c00168bc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00168c4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168cb:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00168d2:	83 f8 ff             	cmp    eax,0xffffffff
c00168d5:	74 09                	je     c00168e0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00168d7:	b0 01                	mov    al,0x1
c00168d9:	e9 a2 01 00 00       	jmp    c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168de:	66 90                	xchg   ax,ax
c00168e0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168ea:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168f2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168f9:	88 c2                	mov    dl,al
c00168fb:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016900:	01 d0                	add    eax,edx
c0016902:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016909:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001690f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016916:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001691d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016922:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016929:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	68 34 02 00 00       	push   0x234
c0016938:	e8 7c 0e ff ff       	call   c00077b9 <malloc>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016947:	83 ec 04             	sub    esp,0x4
c001694a:	6a 00                	push   0x0
c001694c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016953:	50                   	push   eax
c0016954:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001695b:	e8 5b d1 fe ff       	call   c0003abb <f_mount>
c0016960:	83 c4 10             	add    esp,0x10
c0016963:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001696a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016972:	74 1c                	je     c0016990 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001697e:	e8 56 0e ff ff       	call   c00077d9 <rfree>
c0016983:	83 c4 10             	add    esp,0x10
c0016986:	b0 00                	mov    al,0x0
c0016988:	e9 f3 00 00 00       	jmp    c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	83 ec 04             	sub    esp,0x4
c0016993:	68 00 01 00 00       	push   0x100
c0016998:	6a 00                	push   0x0
c001699a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169a1:	50                   	push   eax
c00169a2:	e8 29 9b fe ff       	call   c00004d0 <memset>
c00169a7:	83 c4 10             	add    esp,0x10
c00169aa:	83 ec 08             	sub    esp,0x8
c00169ad:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169b4:	50                   	push   eax
c00169b5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169bc:	50                   	push   eax
c00169bd:	e8 fe 9d fe ff       	call   c00007c0 <strcat>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	83 ec 08             	sub    esp,0x8
c00169c8:	68 aa f0 01 c0       	push   0xc001f0aa
c00169cd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00169d4:	50                   	push   eax
c00169d5:	e8 e6 9d fe ff       	call   c00007c0 <strcat>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	83 ec 04             	sub    esp,0x4
c00169e0:	6a 01                	push   0x1
c00169e2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169e9:	50                   	push   eax
c00169ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169ee:	50                   	push   eax
c00169ef:	e8 29 d1 fe ff       	call   c0003b1d <f_open>
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169fe:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a05:	85 c0                	test   eax,eax
c0016a07:	74 0b                	je     c0016a14 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a09:	78 31                	js     c0016a3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a0b:	83 e8 04             	sub    eax,0x4
c0016a0e:	83 f8 01             	cmp    eax,0x1
c0016a11:	77 29                	ja     c0016a3c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a13:	90                   	nop
c0016a14:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a23:	50                   	push   eax
c0016a24:	e8 a7 d8 fe ff       	call   c00042d0 <f_close>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	90                   	nop
c0016a2d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016a35:	74 41                	je     c0016a78 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016a37:	eb 33                	jmp    c0016a6c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a39:	8d 76 00             	lea    esi,[esi+0x0]
c0016a3c:	83 ec 0c             	sub    esp,0xc
c0016a3f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a46:	e8 8e 0d ff ff       	call   c00077d9 <rfree>
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	83 ec 04             	sub    esp,0x4
c0016a51:	6a 00                	push   0x0
c0016a53:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a5a:	50                   	push   eax
c0016a5b:	6a 00                	push   0x0
c0016a5d:	e8 59 d0 fe ff       	call   c0003abb <f_mount>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	b0 00                	mov    al,0x0
c0016a67:	eb 17                	jmp    c0016a80 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a69:	8d 76 00             	lea    esi,[esi+0x0]
c0016a6c:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a71:	40                   	inc    eax
c0016a72:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a77:	90                   	nop
c0016a78:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a7f:	90                   	nop
c0016a80:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a86:	c3                   	ret    
c0016a87:	90                   	nop

c0016a88 <FAT::allocateSwapfile(char const*, int)>:
c0016a88:	55                   	push   ebp
c0016a89:	57                   	push   edi
c0016a8a:	56                   	push   esi
c0016a8b:	53                   	push   ebx
c0016a8c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a92:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a9d:	83 ec 0c             	sub    esp,0xc
c0016aa0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016aa7:	e8 0d 0d ff ff       	call   c00077b9 <malloc>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	89 c7                	mov    edi,eax
c0016ab1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016ab6:	83 ec 04             	sub    esp,0x4
c0016ab9:	50                   	push   eax
c0016aba:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016ac1:	57                   	push   edi
c0016ac2:	e8 35 40 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016ad1:	83 ec 04             	sub    esp,0x4
c0016ad4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016ad8:	50                   	push   eax
c0016ad9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016add:	50                   	push   eax
c0016ade:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ae5:	e8 7e 43 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016af4:	c1 e0 14             	shl    eax,0x14
c0016af7:	89 c7                	mov    edi,eax
c0016af9:	89 c5                	mov    ebp,eax
c0016afb:	c1 fd 1f             	sar    ebp,0x1f
c0016afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b06:	89 f9                	mov    ecx,edi
c0016b08:	31 c1                	xor    ecx,eax
c0016b0a:	89 cb                	mov    ebx,ecx
c0016b0c:	89 e9                	mov    ecx,ebp
c0016b0e:	31 d1                	xor    ecx,edx
c0016b10:	89 ce                	mov    esi,ecx
c0016b12:	89 f0                	mov    eax,esi
c0016b14:	09 d8                	or     eax,ebx
c0016b16:	0f 84 9c 00 00 00    	je     c0016bb8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b26:	e8 09 42 ff ff       	call   c000ad34 <File::unlink()>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	83 ec 08             	sub    esp,0x8
c0016b31:	6a 12                	push   0x12
c0016b33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b3a:	e8 7d 40 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b49:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b4f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b56:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b5d:	c1 e0 14             	shl    eax,0x14
c0016b60:	83 ec 04             	sub    esp,0x4
c0016b63:	6a 01                	push   0x1
c0016b65:	50                   	push   eax
c0016b66:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b6d:	e8 c3 e5 fe ff       	call   c0005135 <f_expand>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7e:	83 c0 10             	add    eax,0x10
c0016b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b83:	83 ec 0c             	sub    esp,0xc
c0016b86:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b8a:	52                   	push   edx
c0016b8b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b8f:	52                   	push   edx
c0016b90:	6a 00                	push   0x0
c0016b92:	68 00 04 00 00       	push   0x400
c0016b97:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b9e:	ff d0                	call   eax
c0016ba0:	83 c4 20             	add    esp,0x20
c0016ba3:	83 ec 0c             	sub    esp,0xc
c0016ba6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bad:	e8 68 40 ff ff       	call   c000ac1a <File::close()>
c0016bb2:	83 c4 10             	add    esp,0x10
c0016bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb8:	83 ec 08             	sub    esp,0x8
c0016bbb:	6a 01                	push   0x1
c0016bbd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bc4:	e8 f3 3f ff ff       	call   c000abbc <File::open(FileOpenMode)>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bd5:	83 c0 0c             	add    eax,0xc
c0016bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016be1:	52                   	push   edx
c0016be2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016be6:	52                   	push   edx
c0016be7:	6a 00                	push   0x0
c0016be9:	6a 04                	push   0x4
c0016beb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bf2:	ff d0                	call   eax
c0016bf4:	83 c4 20             	add    esp,0x20
c0016bf7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bfe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c04:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c0b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c12:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c15:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c26:	e8 ef 3f ff ff       	call   c000ac1a <File::close()>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016c35:	ba 00 00 00 00       	mov    edx,0x0
c0016c3a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c40:	5b                   	pop    ebx
c0016c41:	5e                   	pop    esi
c0016c42:	5f                   	pop    edi
c0016c43:	5d                   	pop    ebp
c0016c44:	c3                   	ret    
c0016c45:	90                   	nop
c0016c46:	66 90                	xchg   ax,ax

c0016c48 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c48:	57                   	push   edi
c0016c49:	56                   	push   esi
c0016c4a:	53                   	push   ebx
c0016c4b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c51:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c59:	74 0d                	je     c0016c68 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c5b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c63:	75 0f                	jne    c0016c74 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c65:	8d 76 00             	lea    esi,[esi+0x0]
c0016c68:	b8 04 00 00 00       	mov    eax,0x4
c0016c6d:	e9 36 01 00 00       	jmp    c0016da8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c72:	66 90                	xchg   ax,ax
c0016c74:	83 ec 08             	sub    esp,0x8
c0016c77:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c7e:	50                   	push   eax
c0016c7f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c86:	e8 08 d9 fe ff       	call   c0004593 <f_readdir>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c95:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016ca6:	83 c0 16             	add    eax,0x16
c0016ca9:	50                   	push   eax
c0016caa:	e8 91 98 fe ff       	call   c0000540 <strlen>
c0016caf:	83 c4 10             	add    esp,0x10
c0016cb2:	ba 00 00 00 00       	mov    edx,0x0
c0016cb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cbb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cbf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016cc6:	25 ff 00 00 00       	and    eax,0xff
c0016ccb:	83 e0 10             	and    eax,0x10
c0016cce:	74 08                	je     c0016cd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016cd0:	b8 02 00 00 00       	mov    eax,0x2
c0016cd5:	eb 09                	jmp    c0016ce0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016cd7:	90                   	nop
c0016cd8:	b8 01 00 00 00       	mov    eax,0x1
c0016cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ce4:	83 ec 08             	sub    esp,0x8
c0016ce7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cee:	83 c0 16             	add    eax,0x16
c0016cf1:	50                   	push   eax
c0016cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cf6:	83 c0 10             	add    eax,0x10
c0016cf9:	50                   	push   eax
c0016cfa:	e8 01 99 fe ff       	call   c0000600 <strcpy>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d09:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d14:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d1b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d22:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d29:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016d30:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016d37:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d3e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d45:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d4c:	89 c6                	mov    esi,eax
c0016d4e:	89 d7                	mov    edi,edx
c0016d50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d52:	89 c8                	mov    eax,ecx
c0016d54:	89 fa                	mov    edx,edi
c0016d56:	89 f3                	mov    ebx,esi
c0016d58:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d5f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d66:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d6d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d7a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d81:	84 c0                	test   al,al
c0016d83:	75 07                	jne    c0016d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d85:	b8 07 00 00 00       	mov    eax,0x7
c0016d8a:	eb 1c                	jmp    c0016da8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d8c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d93:	85 c0                	test   eax,eax
c0016d95:	75 09                	jne    c0016da0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d97:	b8 00 00 00 00       	mov    eax,0x0
c0016d9c:	eb 0a                	jmp    c0016da8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d9e:	66 90                	xchg   ax,ax
c0016da0:	b8 01 00 00 00       	mov    eax,0x1
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]
c0016da8:	81 c4 50 02 00 00    	add    esp,0x250
c0016dae:	5b                   	pop    ebx
c0016daf:	5e                   	pop    esi
c0016db0:	5f                   	pop    edi
c0016db1:	c3                   	ret    
c0016db2:	66 90                	xchg   ax,ax

c0016db4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016db4:	83 ec 1c             	sub    esp,0x1c
c0016db7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dbc:	74 0a                	je     c0016dc8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016dbe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dc3:	75 0b                	jne    c0016dd0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc8:	b8 04 00 00 00       	mov    eax,0x4
c0016dcd:	eb 41                	jmp    c0016e10 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dcf:	90                   	nop
c0016dd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd4:	50                   	push   eax
c0016dd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ddd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016de1:	e8 02 d0 fe ff       	call   c0003de8 <f_read>
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ded:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016df1:	89 c2                	mov    edx,eax
c0016df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016df7:	89 10                	mov    DWORD PTR [eax],edx
c0016df9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dfd:	85 c0                	test   eax,eax
c0016dff:	75 07                	jne    c0016e08 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e01:	b8 00 00 00 00       	mov    eax,0x0
c0016e06:	eb 08                	jmp    c0016e10 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e08:	b8 01 00 00 00       	mov    eax,0x1
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e10:	83 c4 1c             	add    esp,0x1c
c0016e13:	c3                   	ret    

c0016e14 <FAT::write(void*, unsigned long, void*, int*)>:
c0016e14:	83 ec 1c             	sub    esp,0x1c
c0016e17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e1c:	74 0a                	je     c0016e28 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e1e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e23:	75 0b                	jne    c0016e30 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e25:	8d 76 00             	lea    esi,[esi+0x0]
c0016e28:	b8 04 00 00 00       	mov    eax,0x4
c0016e2d:	eb 41                	jmp    c0016e70 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e2f:	90                   	nop
c0016e30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e34:	50                   	push   eax
c0016e35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e41:	e8 a1 d1 fe ff       	call   c0003fe7 <f_write>
c0016e46:	83 c4 10             	add    esp,0x10
c0016e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e51:	89 c2                	mov    edx,eax
c0016e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e57:	89 10                	mov    DWORD PTR [eax],edx
c0016e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e5d:	85 c0                	test   eax,eax
c0016e5f:	75 07                	jne    c0016e68 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e61:	b8 00 00 00 00       	mov    eax,0x0
c0016e66:	eb 08                	jmp    c0016e70 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e68:	b8 01 00 00 00       	mov    eax,0x1
c0016e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e70:	83 c4 1c             	add    esp,0x1c
c0016e73:	c3                   	ret    

c0016e74 <FAT::close(void*)>:
c0016e74:	83 ec 1c             	sub    esp,0x1c
c0016e77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e7c:	75 0a                	jne    c0016e88 <FAT::close(void*)+0x14>
c0016e7e:	b8 04 00 00 00       	mov    eax,0x4
c0016e83:	eb 3f                	jmp    c0016ec4 <FAT::close(void*)+0x50>
c0016e85:	8d 76 00             	lea    esi,[esi+0x0]
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8f:	e8 3c d4 fe ff       	call   c00042d0 <f_close>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e9b:	83 ec 0c             	sub    esp,0xc
c0016e9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ea2:	e8 22 09 ff ff       	call   c00077c9 <free>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eae:	85 c0                	test   eax,eax
c0016eb0:	75 0a                	jne    c0016ebc <FAT::close(void*)+0x48>
c0016eb2:	b8 00 00 00 00       	mov    eax,0x0
c0016eb7:	eb 0b                	jmp    c0016ec4 <FAT::close(void*)+0x50>
c0016eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ebc:	b8 01 00 00 00       	mov    eax,0x1
c0016ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec4:	83 c4 1c             	add    esp,0x1c
c0016ec7:	c3                   	ret    

c0016ec8 <FAT::closeDir(void*)>:
c0016ec8:	83 ec 1c             	sub    esp,0x1c
c0016ecb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ed0:	75 0a                	jne    c0016edc <FAT::closeDir(void*)+0x14>
c0016ed2:	b8 04 00 00 00       	mov    eax,0x4
c0016ed7:	eb 3f                	jmp    c0016f18 <FAT::closeDir(void*)+0x50>
c0016ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0016edc:	83 ec 0c             	sub    esp,0xc
c0016edf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ee3:	e8 89 d6 fe ff       	call   c0004571 <f_closedir>
c0016ee8:	83 c4 10             	add    esp,0x10
c0016eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eef:	83 ec 0c             	sub    esp,0xc
c0016ef2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ef6:	e8 ce 08 ff ff       	call   c00077c9 <free>
c0016efb:	83 c4 10             	add    esp,0x10
c0016efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f02:	85 c0                	test   eax,eax
c0016f04:	75 0a                	jne    c0016f10 <FAT::closeDir(void*)+0x48>
c0016f06:	b8 00 00 00 00       	mov    eax,0x0
c0016f0b:	eb 0b                	jmp    c0016f18 <FAT::closeDir(void*)+0x50>
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	b8 01 00 00 00       	mov    eax,0x1
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]
c0016f18:	83 c4 1c             	add    esp,0x1c
c0016f1b:	c3                   	ret    

c0016f1c <FAT::seek(void*, unsigned long long)>:
c0016f1c:	83 ec 2c             	sub    esp,0x2c
c0016f1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f2f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016f34:	75 0a                	jne    c0016f40 <FAT::seek(void*, unsigned long long)+0x24>
c0016f36:	b8 04 00 00 00       	mov    eax,0x4
c0016f3b:	eb 33                	jmp    c0016f70 <FAT::seek(void*, unsigned long long)+0x54>
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f44:	83 ec 08             	sub    esp,0x8
c0016f47:	50                   	push   eax
c0016f48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f4c:	e8 ae d3 fe ff       	call   c00042ff <f_lseek>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f5c:	85 c0                	test   eax,eax
c0016f5e:	75 08                	jne    c0016f68 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f60:	b8 00 00 00 00       	mov    eax,0x0
c0016f65:	eb 09                	jmp    c0016f70 <FAT::seek(void*, unsigned long long)+0x54>
c0016f67:	90                   	nop
c0016f68:	b8 01 00 00 00       	mov    eax,0x1
c0016f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f70:	83 c4 2c             	add    esp,0x2c
c0016f73:	c3                   	ret    

c0016f74 <fatWrapperReadDisk>:
c0016f74:	53                   	push   ebx
c0016f75:	83 ec 18             	sub    esp,0x18
c0016f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f84:	25 ff 00 00 00       	and    eax,0xff
c0016f89:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f98:	ba 00 00 00 00       	mov    edx,0x0
c0016f9d:	83 ec 0c             	sub    esp,0xc
c0016fa0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa4:	53                   	push   ebx
c0016fa5:	52                   	push   edx
c0016fa6:	50                   	push   eax
c0016fa7:	51                   	push   ecx
c0016fa8:	e8 ff 5c ff ff       	call   c000ccac <LogicalDisk::read(unsigned long long, int, void*)>
c0016fad:	83 c4 20             	add    esp,0x20
c0016fb0:	83 c4 18             	add    esp,0x18
c0016fb3:	5b                   	pop    ebx
c0016fb4:	c3                   	ret    
c0016fb5:	8d 76 00             	lea    esi,[esi+0x0]

c0016fb8 <fatWrapperWriteDisk>:
c0016fb8:	53                   	push   ebx
c0016fb9:	83 ec 18             	sub    esp,0x18
c0016fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016fc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc8:	25 ff 00 00 00       	and    eax,0xff
c0016fcd:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fdc:	ba 00 00 00 00       	mov    edx,0x0
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fe8:	53                   	push   ebx
c0016fe9:	52                   	push   edx
c0016fea:	50                   	push   eax
c0016feb:	51                   	push   ecx
c0016fec:	e8 27 5d ff ff       	call   c000cd18 <LogicalDisk::write(unsigned long long, int, void*)>
c0016ff1:	83 c4 20             	add    esp,0x20
c0016ff4:	83 c4 18             	add    esp,0x18
c0016ff7:	5b                   	pop    ebx
c0016ff8:	c3                   	ret    
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0016ffc <fatWrapperIoctl>:
c0016ffc:	53                   	push   ebx
c0016ffd:	83 ec 28             	sub    esp,0x28
c0017000:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017004:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017008:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001700c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017010:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017015:	75 35                	jne    c001704c <fatWrapperIoctl+0x50>
c0017017:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001701b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001701f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017023:	25 ff 00 00 00       	and    eax,0xff
c0017028:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001702f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017035:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001703b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001703f:	66 89 02             	mov    WORD PTR [edx],ax
c0017042:	b8 00 00 00 00       	mov    eax,0x0
c0017047:	e9 c4 00 00 00       	jmp    c0017110 <fatWrapperIoctl+0x114>
c001704c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017051:	75 75                	jne    c00170c8 <fatWrapperIoctl+0xcc>
c0017053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001705b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001705f:	25 ff 00 00 00       	and    eax,0xff
c0017064:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001706b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017071:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017077:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001707d:	89 c8                	mov    eax,ecx
c001707f:	89 da                	mov    edx,ebx
c0017081:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017085:	c1 e0 0a             	shl    eax,0xa
c0017088:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001708c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017092:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017099:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001709f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00170a5:	89 cb                	mov    ebx,ecx
c00170a7:	c1 fb 1f             	sar    ebx,0x1f
c00170aa:	53                   	push   ebx
c00170ab:	51                   	push   ecx
c00170ac:	52                   	push   edx
c00170ad:	50                   	push   eax
c00170ae:	e8 ad 50 00 00       	call   c001c160 <__udivdi3>
c00170b3:	83 c4 10             	add    esp,0x10
c00170b6:	89 c2                	mov    edx,eax
c00170b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170bc:	89 10                	mov    DWORD PTR [eax],edx
c00170be:	b8 00 00 00 00       	mov    eax,0x0
c00170c3:	eb 4b                	jmp    c0017110 <fatWrapperIoctl+0x114>
c00170c5:	8d 76 00             	lea    esi,[esi+0x0]
c00170c8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00170cd:	75 09                	jne    c00170d8 <fatWrapperIoctl+0xdc>
c00170cf:	b8 00 00 00 00       	mov    eax,0x0
c00170d4:	eb 3a                	jmp    c0017110 <fatWrapperIoctl+0x114>
c00170d6:	66 90                	xchg   ax,ax
c00170d8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00170dd:	75 19                	jne    c00170f8 <fatWrapperIoctl+0xfc>
c00170df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170eb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170f1:	b8 00 00 00 00       	mov    eax,0x0
c00170f6:	eb 18                	jmp    c0017110 <fatWrapperIoctl+0x114>
c00170f8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170fd:	75 09                	jne    c0017108 <fatWrapperIoctl+0x10c>
c00170ff:	b8 00 00 00 00       	mov    eax,0x0
c0017104:	eb 0a                	jmp    c0017110 <fatWrapperIoctl+0x114>
c0017106:	66 90                	xchg   ax,ax
c0017108:	b8 04 00 00 00       	mov    eax,0x4
c001710d:	8d 76 00             	lea    esi,[esi+0x0]
c0017110:	83 c4 28             	add    esp,0x28
c0017113:	5b                   	pop    ebx
c0017114:	c3                   	ret    
c0017115:	90                   	nop
c0017116:	66 90                	xchg   ax,ax

c0017118 <FAT::FAT()>:
c0017118:	83 ec 1c             	sub    esp,0x1c
c001711b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711f:	83 ec 0c             	sub    esp,0xc
c0017122:	50                   	push   eax
c0017123:	e8 80 37 ff ff       	call   c000a8a8 <Filesystem::Filesystem()>
c0017128:	83 c4 10             	add    esp,0x10
c001712b:	ba c0 f0 01 c0       	mov    edx,0xc001f0c0
c0017130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017134:	89 10                	mov    DWORD PTR [eax],edx
c0017136:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c0017140:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017148:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001714d:	7f 15                	jg     c0017164 <FAT::FAT()+0x4c>
c001714f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017153:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c001715e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017162:	eb e4                	jmp    c0017148 <FAT::FAT()+0x30>
c0017164:	90                   	nop
c0017165:	83 c4 1c             	add    esp,0x1c
c0017168:	c3                   	ret    
c0017169:	90                   	nop
c001716a:	66 90                	xchg   ax,ax

c001716c <FAT::fixFilepath(char*)>:
c001716c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017170:	8a 00                	mov    al,BYTE PTR [eax]
c0017172:	3c 40                	cmp    al,0x40
c0017174:	7e 2e                	jle    c00171a4 <FAT::fixFilepath(char*)+0x38>
c0017176:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001717a:	8a 00                	mov    al,BYTE PTR [eax]
c001717c:	83 e8 41             	sub    eax,0x41
c001717f:	88 c2                	mov    dl,al
c0017181:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017185:	88 10                	mov    BYTE PTR [eax],dl
c0017187:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001718b:	8a 00                	mov    al,BYTE PTR [eax]
c001718d:	0f be c0             	movsx  eax,al
c0017190:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017197:	83 c0 30             	add    eax,0x30
c001719a:	88 c2                	mov    dl,al
c001719c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171a0:	88 10                	mov    BYTE PTR [eax],dl
c00171a2:	66 90                	xchg   ax,ax
c00171a4:	90                   	nop
c00171a5:	c3                   	ret    
c00171a6:	66 90                	xchg   ax,ax

c00171a8 <FAT::open(char const*, void**, FileOpenMode)>:
c00171a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00171ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00171b6:	74 0c                	je     c00171c4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00171b8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00171c0:	75 0e                	jne    c00171d0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00171c2:	66 90                	xchg   ax,ax
c00171c4:	b8 04 00 00 00       	mov    eax,0x4
c00171c9:	e9 0a 01 00 00       	jmp    c00172d8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00171ce:	66 90                	xchg   ax,ax
c00171d0:	83 ec 08             	sub    esp,0x8
c00171d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171de:	50                   	push   eax
c00171df:	e8 1c 94 fe ff       	call   c0000600 <strcpy>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	83 ec 08             	sub    esp,0x8
c00171ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171ee:	50                   	push   eax
c00171ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171f6:	e8 71 ff ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017206:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001720d:	83 e0 01             	and    eax,0x1
c0017210:	74 0a                	je     c001721c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017212:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001721a:	66 90                	xchg   ax,ax
c001721c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017223:	83 e0 04             	and    eax,0x4
c0017226:	74 10                	je     c0017238 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017228:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017230:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017238:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001723f:	83 e0 02             	and    eax,0x2
c0017242:	74 08                	je     c001724c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017244:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001724c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017253:	83 e0 08             	and    eax,0x8
c0017256:	74 08                	je     c0017260 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017258:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017260:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017267:	83 e0 10             	and    eax,0x10
c001726a:	74 08                	je     c0017274 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001726c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017274:	83 ec 0c             	sub    esp,0xc
c0017277:	68 28 02 00 00       	push   0x228
c001727c:	e8 38 05 ff ff       	call   c00077b9 <malloc>
c0017281:	83 c4 10             	add    esp,0x10
c0017284:	89 c2                	mov    edx,eax
c0017286:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001728d:	89 10                	mov    DWORD PTR [eax],edx
c001728f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017296:	31 d2                	xor    edx,edx
c0017298:	88 c2                	mov    dl,al
c001729a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00172a3:	83 ec 04             	sub    esp,0x4
c00172a6:	52                   	push   edx
c00172a7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00172ab:	52                   	push   edx
c00172ac:	50                   	push   eax
c00172ad:	e8 6b c8 fe ff       	call   c0003b1d <f_open>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00172bc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00172c4:	74 0a                	je     c00172d0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00172c6:	b8 01 00 00 00       	mov    eax,0x1
c00172cb:	eb 0b                	jmp    c00172d8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172cd:	8d 76 00             	lea    esi,[esi+0x0]
c00172d0:	b8 00 00 00 00       	mov    eax,0x0
c00172d5:	8d 76 00             	lea    esi,[esi+0x0]
c00172d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172de:	c3                   	ret    
c00172df:	90                   	nop

c00172e0 <FAT::openDir(char const*, void**)>:
c00172e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172ee:	74 0c                	je     c00172fc <FAT::openDir(char const*, void**)+0x1c>
c00172f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172f8:	75 0e                	jne    c0017308 <FAT::openDir(char const*, void**)+0x28>
c00172fa:	66 90                	xchg   ax,ax
c00172fc:	b8 04 00 00 00       	mov    eax,0x4
c0017301:	e9 82 00 00 00       	jmp    c0017388 <FAT::openDir(char const*, void**)+0xa8>
c0017306:	66 90                	xchg   ax,ax
c0017308:	83 ec 08             	sub    esp,0x8
c001730b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017312:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017316:	50                   	push   eax
c0017317:	e8 e4 92 fe ff       	call   c0000600 <strcpy>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	83 ec 08             	sub    esp,0x8
c0017322:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017326:	50                   	push   eax
c0017327:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001732e:	e8 39 fe ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c0017333:	83 c4 10             	add    esp,0x10
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	6a 30                	push   0x30
c001733b:	e8 79 04 ff ff       	call   c00077b9 <malloc>
c0017340:	83 c4 10             	add    esp,0x10
c0017343:	89 c2                	mov    edx,eax
c0017345:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001734c:	89 10                	mov    DWORD PTR [eax],edx
c001734e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017355:	8b 00                	mov    eax,DWORD PTR [eax]
c0017357:	83 ec 08             	sub    esp,0x8
c001735a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001735e:	52                   	push   edx
c001735f:	50                   	push   eax
c0017360:	e8 41 d1 fe ff       	call   c00044a6 <f_opendir>
c0017365:	83 c4 10             	add    esp,0x10
c0017368:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001736f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017377:	74 07                	je     c0017380 <FAT::openDir(char const*, void**)+0xa0>
c0017379:	b8 01 00 00 00       	mov    eax,0x1
c001737e:	eb 08                	jmp    c0017388 <FAT::openDir(char const*, void**)+0xa8>
c0017380:	b8 00 00 00 00       	mov    eax,0x0
c0017385:	8d 76 00             	lea    esi,[esi+0x0]
c0017388:	81 c4 1c 01 00 00    	add    esp,0x11c
c001738e:	c3                   	ret    
c001738f:	90                   	nop

c0017390 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017390:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017396:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001739e:	75 0c                	jne    c00173ac <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00173a0:	b8 04 00 00 00       	mov    eax,0x4
c00173a5:	e9 d6 00 00 00       	jmp    c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173aa:	66 90                	xchg   ax,ax
c00173ac:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00173b4:	75 0a                	jne    c00173c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00173b6:	b8 04 00 00 00       	mov    eax,0x4
c00173bb:	e9 c0 00 00 00       	jmp    c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173c0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00173c8:	75 0a                	jne    c00173d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00173ca:	b8 04 00 00 00       	mov    eax,0x4
c00173cf:	e9 ac 00 00 00       	jmp    c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00173d4:	83 ec 08             	sub    esp,0x8
c00173d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173e5:	50                   	push   eax
c00173e6:	e8 15 92 fe ff       	call   c0000600 <strcpy>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	83 ec 08             	sub    esp,0x8
c00173f1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173f8:	50                   	push   eax
c00173f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017400:	e8 67 fd ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c0017405:	83 c4 10             	add    esp,0x10
c0017408:	83 ec 08             	sub    esp,0x8
c001740b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001740f:	50                   	push   eax
c0017410:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017417:	50                   	push   eax
c0017418:	e8 08 d2 fe ff       	call   c0004625 <f_stat>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017427:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001742e:	85 c0                	test   eax,eax
c0017430:	74 0a                	je     c001743c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017432:	83 f8 04             	cmp    eax,0x4
c0017435:	74 39                	je     c0017470 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017437:	eb 3f                	jmp    c0017478 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017439:	8d 76 00             	lea    esi,[esi+0x0]
c001743c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017440:	25 ff 00 00 00       	and    eax,0xff
c0017445:	83 e0 10             	and    eax,0x10
c0017448:	0f 95 c2             	setne  dl
c001744b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017452:	88 10                	mov    BYTE PTR [eax],dl
c0017454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017458:	ba 00 00 00 00       	mov    edx,0x0
c001745d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017464:	89 01                	mov    DWORD PTR [ecx],eax
c0017466:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017469:	b8 00 00 00 00       	mov    eax,0x0
c001746e:	eb 10                	jmp    c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017470:	b8 02 00 00 00       	mov    eax,0x2
c0017475:	eb 09                	jmp    c0017480 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017477:	90                   	nop
c0017478:	b8 01 00 00 00       	mov    eax,0x1
c001747d:	8d 76 00             	lea    esi,[esi+0x0]
c0017480:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017486:	c3                   	ret    
c0017487:	90                   	nop

c0017488 <FAT::unlink(char const*)>:
c0017488:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001748e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017496:	75 08                	jne    c00174a0 <FAT::unlink(char const*)+0x18>
c0017498:	b8 04 00 00 00       	mov    eax,0x4
c001749d:	eb 61                	jmp    c0017500 <FAT::unlink(char const*)+0x78>
c001749f:	90                   	nop
c00174a0:	83 ec 08             	sub    esp,0x8
c00174a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174ae:	50                   	push   eax
c00174af:	e8 4c 91 fe ff       	call   c0000600 <strcpy>
c00174b4:	83 c4 10             	add    esp,0x10
c00174b7:	83 ec 08             	sub    esp,0x8
c00174ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00174be:	50                   	push   eax
c00174bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00174c6:	e8 a1 fc ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c00174cb:	83 c4 10             	add    esp,0x10
c00174ce:	83 ec 0c             	sub    esp,0xc
c00174d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174d5:	50                   	push   eax
c00174d6:	e8 af d3 fe ff       	call   c000488a <f_unlink>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174e5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174ec:	85 c0                	test   eax,eax
c00174ee:	75 08                	jne    c00174f8 <FAT::unlink(char const*)+0x70>
c00174f0:	b8 00 00 00 00       	mov    eax,0x0
c00174f5:	eb 09                	jmp    c0017500 <FAT::unlink(char const*)+0x78>
c00174f7:	90                   	nop
c00174f8:	b8 01 00 00 00       	mov    eax,0x1
c00174fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017500:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017506:	c3                   	ret    
c0017507:	90                   	nop

c0017508 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017508:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001750e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017515:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001751c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017520:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017524:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001752c:	75 0a                	jne    c0017538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001752e:	b8 04 00 00 00       	mov    eax,0x4
c0017533:	e9 54 01 00 00       	jmp    c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017538:	83 ec 08             	sub    esp,0x8
c001753b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017542:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017546:	50                   	push   eax
c0017547:	e8 b4 90 fe ff       	call   c0000600 <strcpy>
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	83 ec 08             	sub    esp,0x8
c0017552:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017556:	50                   	push   eax
c0017557:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001755e:	e8 09 fc ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001756e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017576:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001757a:	25 ff 00 00 00       	and    eax,0xff
c001757f:	83 e0 01             	and    eax,0x1
c0017582:	74 08                	je     c001758c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017584:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001758c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017590:	25 ff 00 00 00       	and    eax,0xff
c0017595:	83 e0 02             	and    eax,0x2
c0017598:	74 0a                	je     c00175a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001759a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00175a2:	66 90                	xchg   ax,ax
c00175a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175a8:	25 ff 00 00 00       	and    eax,0xff
c00175ad:	83 e0 04             	and    eax,0x4
c00175b0:	74 0a                	je     c00175bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00175b2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00175ba:	66 90                	xchg   ax,ax
c00175bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175c0:	25 ff 00 00 00       	and    eax,0xff
c00175c5:	83 e0 08             	and    eax,0x8
c00175c8:	74 0a                	je     c00175d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00175ca:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00175d2:	66 90                	xchg   ax,ax
c00175d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175d8:	25 ff 00 00 00       	and    eax,0xff
c00175dd:	83 e0 01             	and    eax,0x1
c00175e0:	74 0a                	je     c00175ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175e2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175ea:	66 90                	xchg   ax,ax
c00175ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175f0:	25 ff 00 00 00       	and    eax,0xff
c00175f5:	83 e0 02             	and    eax,0x2
c00175f8:	74 0a                	je     c0017604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175fa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017602:	66 90                	xchg   ax,ax
c0017604:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017608:	25 ff 00 00 00       	and    eax,0xff
c001760d:	83 e0 04             	and    eax,0x4
c0017610:	74 0a                	je     c001761c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017612:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001761a:	66 90                	xchg   ax,ax
c001761c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017620:	25 ff 00 00 00       	and    eax,0xff
c0017625:	83 e0 08             	and    eax,0x8
c0017628:	74 0a                	je     c0017634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001762a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017632:	66 90                	xchg   ax,ax
c0017634:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001763b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017642:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017649:	31 d2                	xor    edx,edx
c001764b:	88 c2                	mov    dl,al
c001764d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017654:	25 ff 00 00 00       	and    eax,0xff
c0017659:	83 ec 04             	sub    esp,0x4
c001765c:	52                   	push   edx
c001765d:	50                   	push   eax
c001765e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017662:	50                   	push   eax
c0017663:	e8 95 d6 fe ff       	call   c0004cfd <f_chmod>
c0017668:	83 c4 10             	add    esp,0x10
c001766b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017672:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017679:	85 c0                	test   eax,eax
c001767b:	75 07                	jne    c0017684 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001767d:	b8 00 00 00 00       	mov    eax,0x0
c0017682:	eb 08                	jmp    c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017684:	b8 01 00 00 00       	mov    eax,0x1
c0017689:	8d 76 00             	lea    esi,[esi+0x0]
c001768c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017692:	c3                   	ret    
c0017693:	90                   	nop

c0017694 <FAT::rename(char const*, char const*)>:
c0017694:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001769a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00176a2:	74 0c                	je     c00176b0 <FAT::rename(char const*, char const*)+0x1c>
c00176a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00176ac:	75 0e                	jne    c00176bc <FAT::rename(char const*, char const*)+0x28>
c00176ae:	66 90                	xchg   ax,ax
c00176b0:	b8 04 00 00 00       	mov    eax,0x4
c00176b5:	e9 9e 00 00 00       	jmp    c0017758 <FAT::rename(char const*, char const*)+0xc4>
c00176ba:	66 90                	xchg   ax,ax
c00176bc:	83 ec 08             	sub    esp,0x8
c00176bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176cd:	50                   	push   eax
c00176ce:	e8 2d 8f fe ff       	call   c0000600 <strcpy>
c00176d3:	83 c4 10             	add    esp,0x10
c00176d6:	83 ec 08             	sub    esp,0x8
c00176d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176e0:	50                   	push   eax
c00176e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176e8:	e8 7f fa ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	83 ec 08             	sub    esp,0x8
c00176f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176fe:	50                   	push   eax
c00176ff:	e8 fc 8e fe ff       	call   c0000600 <strcpy>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	83 ec 08             	sub    esp,0x8
c001770a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001770e:	50                   	push   eax
c001770f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017716:	e8 51 fa ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	83 ec 08             	sub    esp,0x8
c0017721:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017725:	50                   	push   eax
c0017726:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001772d:	50                   	push   eax
c001772e:	e8 14 d4 fe ff       	call   c0004b47 <f_rename>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001773d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017744:	85 c0                	test   eax,eax
c0017746:	75 08                	jne    c0017750 <FAT::rename(char const*, char const*)+0xbc>
c0017748:	b8 00 00 00 00       	mov    eax,0x0
c001774d:	eb 09                	jmp    c0017758 <FAT::rename(char const*, char const*)+0xc4>
c001774f:	90                   	nop
c0017750:	b8 01 00 00 00       	mov    eax,0x1
c0017755:	8d 76 00             	lea    esi,[esi+0x0]
c0017758:	81 c4 1c 02 00 00    	add    esp,0x21c
c001775e:	c3                   	ret    
c001775f:	90                   	nop

c0017760 <FAT::mkdir(char const*)>:
c0017760:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017766:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001776e:	75 08                	jne    c0017778 <FAT::mkdir(char const*)+0x18>
c0017770:	b8 04 00 00 00       	mov    eax,0x4
c0017775:	eb 61                	jmp    c00177d8 <FAT::mkdir(char const*)+0x78>
c0017777:	90                   	nop
c0017778:	83 ec 08             	sub    esp,0x8
c001777b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017782:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017786:	50                   	push   eax
c0017787:	e8 74 8e fe ff       	call   c0000600 <strcpy>
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	83 ec 08             	sub    esp,0x8
c0017792:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017796:	50                   	push   eax
c0017797:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001779e:	e8 c9 f9 ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	83 ec 0c             	sub    esp,0xc
c00177a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ad:	50                   	push   eax
c00177ae:	e8 f9 d1 fe ff       	call   c00049ac <f_mkdir>
c00177b3:	83 c4 10             	add    esp,0x10
c00177b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00177bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00177c4:	85 c0                	test   eax,eax
c00177c6:	75 08                	jne    c00177d0 <FAT::mkdir(char const*)+0x70>
c00177c8:	b8 00 00 00 00       	mov    eax,0x0
c00177cd:	eb 09                	jmp    c00177d8 <FAT::mkdir(char const*)+0x78>
c00177cf:	90                   	nop
c00177d0:	b8 01 00 00 00       	mov    eax,0x1
c00177d5:	8d 76 00             	lea    esi,[esi+0x0]
c00177d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177de:	c3                   	ret    
c00177df:	90                   	nop

c00177e0 <FAT::exists(char const*)>:
c00177e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177e6:	83 ec 08             	sub    esp,0x8
c00177e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177f4:	50                   	push   eax
c00177f5:	e8 06 8e fe ff       	call   c0000600 <strcpy>
c00177fa:	83 c4 10             	add    esp,0x10
c00177fd:	83 ec 08             	sub    esp,0x8
c0017800:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017804:	50                   	push   eax
c0017805:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001780c:	e8 5b f9 ff ff       	call   c001716c <FAT::fixFilepath(char*)>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	83 ec 08             	sub    esp,0x8
c0017817:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001781e:	50                   	push   eax
c001781f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017823:	50                   	push   eax
c0017824:	e8 fc cd fe ff       	call   c0004625 <f_stat>
c0017829:	83 c4 10             	add    esp,0x10
c001782c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017833:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001783a:	85 c0                	test   eax,eax
c001783c:	75 06                	jne    c0017844 <FAT::exists(char const*)+0x64>
c001783e:	b0 01                	mov    al,0x1
c0017840:	eb 06                	jmp    c0017848 <FAT::exists(char const*)+0x68>
c0017842:	66 90                	xchg   ax,ax
c0017844:	b0 00                	mov    al,0x0
c0017846:	66 90                	xchg   ax,ax
c0017848:	81 c4 2c 02 00 00    	add    esp,0x22c
c001784e:	c3                   	ret    
c001784f:	90                   	nop

c0017850 <isoReadDiscSectorHelper>:
c0017850:	83 ec 2c             	sub    esp,0x2c
c0017853:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017857:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001785b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017860:	83 e8 41             	sub    eax,0x41
c0017863:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c001786a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001786e:	ba 00 00 00 00       	mov    edx,0x0
c0017873:	83 ec 0c             	sub    esp,0xc
c0017876:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001787a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001787e:	52                   	push   edx
c001787f:	50                   	push   eax
c0017880:	51                   	push   ecx
c0017881:	e8 26 54 ff ff       	call   c000ccac <LogicalDisk::read(unsigned long long, int, void*)>
c0017886:	83 c4 20             	add    esp,0x20
c0017889:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001788d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017892:	74 0c                	je     c00178a0 <isoReadDiscSectorHelper+0x50>
c0017894:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017898:	c1 e0 0b             	shl    eax,0xb
c001789b:	eb 0b                	jmp    c00178a8 <isoReadDiscSectorHelper+0x58>
c001789d:	8d 76 00             	lea    esi,[esi+0x0]
c00178a0:	b8 00 00 00 00       	mov    eax,0x0
c00178a5:	8d 76 00             	lea    esi,[esi+0x0]
c00178a8:	83 c4 2c             	add    esp,0x2c
c00178ab:	c3                   	ret    

c00178ac <iso_kprintf>:
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178b4:	83 ec 08             	sub    esp,0x8
c00178b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178bb:	50                   	push   eax
c00178bc:	e8 75 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	90                   	nop
c00178c5:	83 c4 0c             	add    esp,0xc
c00178c8:	c3                   	ret    
c00178c9:	8d 76 00             	lea    esi,[esi+0x0]

c00178cc <iso_kprintfd>:
c00178cc:	83 ec 0c             	sub    esp,0xc
c00178cf:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178d4:	83 ec 08             	sub    esp,0x8
c00178d7:	68 20 f1 01 c0       	push   0xc001f120
c00178dc:	50                   	push   eax
c00178dd:	e8 54 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178ee:	83 ec 08             	sub    esp,0x8
c00178f1:	52                   	push   edx
c00178f2:	50                   	push   eax
c00178f3:	e8 f8 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178f8:	83 c4 10             	add    esp,0x10
c00178fb:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017900:	83 ec 08             	sub    esp,0x8
c0017903:	68 a1 ef 01 c0       	push   0xc001efa1
c0017908:	50                   	push   eax
c0017909:	e8 28 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001790e:	83 c4 10             	add    esp,0x10
c0017911:	90                   	nop
c0017912:	83 c4 0c             	add    esp,0xc
c0017915:	c3                   	ret    

c0017916 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017916:	b8 08 00 00 00       	mov    eax,0x8
c001791b:	c3                   	ret    

c001791c <ISO9660::getName()>:
c001791c:	b8 23 f1 01 c0       	mov    eax,0xc001f123
c0017921:	c3                   	ret    

c0017922 <ISO9660::closeDir(void*)>:
c0017922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017926:	8b 00                	mov    eax,DWORD PTR [eax]
c0017928:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001792b:	90                   	nop

c001792c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001792c:	b8 01 00 00 00       	mov    eax,0x1
c0017931:	c3                   	ret    

c0017932 <ISO9660::unlink(char const*)>:
c0017932:	b8 01 00 00 00       	mov    eax,0x1
c0017937:	c3                   	ret    

c0017938 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017938:	b8 03 00 00 00       	mov    eax,0x3
c001793d:	c3                   	ret    

c001793e <ISO9660::rename(char const*, char const*)>:
c001793e:	b8 01 00 00 00       	mov    eax,0x1
c0017943:	c3                   	ret    

c0017944 <ISO9660::mkdir(char const*)>:
c0017944:	b8 01 00 00 00       	mov    eax,0x1
c0017949:	c3                   	ret    

c001794a <ISO9660::~ISO9660()>:
c001794a:	83 ec 0c             	sub    esp,0xc
c001794d:	ba 74 f1 01 c0       	mov    edx,0xc001f174
c0017952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017956:	89 10                	mov    DWORD PTR [eax],edx
c0017958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	50                   	push   eax
c0017960:	e8 67 2f ff ff       	call   c000a8cc <Filesystem::~Filesystem()>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	90                   	nop
c0017969:	83 c4 0c             	add    esp,0xc
c001796c:	c3                   	ret    
c001796d:	90                   	nop

c001796e <ISO9660::~ISO9660()>:
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017978:	e8 cd ff ff ff       	call   c001794a <ISO9660::~ISO9660()>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	6a 08                	push   0x8
c0017985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017989:	e8 03 2b ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	83 c4 0c             	add    esp,0xc
c0017994:	c3                   	ret    
c0017995:	90                   	nop

c0017996 <ISO9660::exists(char const*)>:
c0017996:	83 ec 18             	sub    esp,0x18
c0017999:	68 3e f1 01 c0       	push   0xc001f13e
c001799e:	e8 64 88 ff ff       	call   c0010207 <KePanic(char const*)>
c00179a3:	31 c0                	xor    eax,eax
c00179a5:	83 c4 1c             	add    esp,0x1c
c00179a8:	c3                   	ret    
c00179a9:	90                   	nop

c00179aa <ISO9660::open(char const*, void**, FileOpenMode)>:
c00179aa:	56                   	push   esi
c00179ab:	53                   	push   ebx
c00179ac:	50                   	push   eax
c00179ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179b5:	85 db                	test   ebx,ebx
c00179b7:	0f 84 82 00 00 00    	je     c0017a3f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179bd:	85 f6                	test   esi,esi
c00179bf:	74 7e                	je     c0017a3f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00179c1:	ba 03 00 00 00       	mov    edx,0x3
c00179c6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00179cb:	75 77                	jne    c0017a44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00179d0:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c00179d6:	74 34                	je     c0017a0c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	50                   	push   eax
c00179dc:	e8 de ed fe ff       	call   c00067bf <init_percd>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	ba 0b 00 00 00       	mov    edx,0xb
c00179e9:	40                   	inc    eax
c00179ea:	74 58                	je     c0017a44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179ec:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c00179f3:	74 10                	je     c0017a05 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00179f5:	83 ec 0c             	sub    esp,0xc
c00179f8:	68 5c f1 01 c0       	push   0xc001f15c
c00179fd:	e8 05 88 ff ff       	call   c0010207 <KePanic(char const*)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a07:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a16:	83 c3 03             	add    ebx,0x3
c0017a19:	50                   	push   eax
c0017a1a:	e8 a0 ed fe ff       	call   c00067bf <init_percd>
c0017a1f:	59                   	pop    ecx
c0017a20:	58                   	pop    eax
c0017a21:	6a 00                	push   0x0
c0017a23:	53                   	push   ebx
c0017a24:	e8 d4 e8 fe ff       	call   c00062fd <iso_open>
c0017a29:	83 c4 10             	add    esp,0x10
c0017a2c:	ba 01 00 00 00       	mov    edx,0x1
c0017a31:	83 f8 ff             	cmp    eax,0xffffffff
c0017a34:	74 0e                	je     c0017a44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a36:	83 c0 64             	add    eax,0x64
c0017a39:	31 d2                	xor    edx,edx
c0017a3b:	89 06                	mov    DWORD PTR [esi],eax
c0017a3d:	eb 05                	jmp    c0017a44 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a3f:	ba 04 00 00 00       	mov    edx,0x4
c0017a44:	89 d0                	mov    eax,edx
c0017a46:	5a                   	pop    edx
c0017a47:	5b                   	pop    ebx
c0017a48:	5e                   	pop    esi
c0017a49:	c3                   	ret    

c0017a4a <ISO9660::openDir(char const*, void**)>:
c0017a4a:	56                   	push   esi
c0017a4b:	53                   	push   ebx
c0017a4c:	50                   	push   eax
c0017a4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a55:	85 db                	test   ebx,ebx
c0017a57:	74 76                	je     c0017acf <ISO9660::openDir(char const*, void**)+0x85>
c0017a59:	85 f6                	test   esi,esi
c0017a5b:	74 72                	je     c0017acf <ISO9660::openDir(char const*, void**)+0x85>
c0017a5d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a60:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a66:	74 34                	je     c0017a9c <ISO9660::openDir(char const*, void**)+0x52>
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	50                   	push   eax
c0017a6c:	e8 4e ed fe ff       	call   c00067bf <init_percd>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	ba 0b 00 00 00       	mov    edx,0xb
c0017a79:	40                   	inc    eax
c0017a7a:	74 58                	je     c0017ad4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a7c:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a83:	74 10                	je     c0017a95 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a85:	83 ec 0c             	sub    esp,0xc
c0017a88:	68 5c f1 01 c0       	push   0xc001f15c
c0017a8d:	e8 75 87 ff ff       	call   c0010207 <KePanic(char const*)>
c0017a92:	83 c4 10             	add    esp,0x10
c0017a95:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a97:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a9c:	83 ec 0c             	sub    esp,0xc
c0017a9f:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017aa6:	83 c3 03             	add    ebx,0x3
c0017aa9:	50                   	push   eax
c0017aaa:	e8 10 ed fe ff       	call   c00067bf <init_percd>
c0017aaf:	59                   	pop    ecx
c0017ab0:	58                   	pop    eax
c0017ab1:	6a 01                	push   0x1
c0017ab3:	53                   	push   ebx
c0017ab4:	e8 44 e8 fe ff       	call   c00062fd <iso_open>
c0017ab9:	83 c4 10             	add    esp,0x10
c0017abc:	ba 01 00 00 00       	mov    edx,0x1
c0017ac1:	83 f8 ff             	cmp    eax,0xffffffff
c0017ac4:	74 0e                	je     c0017ad4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017ac6:	83 c0 64             	add    eax,0x64
c0017ac9:	31 d2                	xor    edx,edx
c0017acb:	89 06                	mov    DWORD PTR [esi],eax
c0017acd:	eb 05                	jmp    c0017ad4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017acf:	ba 04 00 00 00       	mov    edx,0x4
c0017ad4:	89 d0                	mov    eax,edx
c0017ad6:	5a                   	pop    edx
c0017ad7:	5b                   	pop    ebx
c0017ad8:	5e                   	pop    esi
c0017ad9:	c3                   	ret    

c0017ada <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017ada:	53                   	push   ebx
c0017adb:	83 ec 08             	sub    esp,0x8
c0017ade:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ae2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ae6:	85 c0                	test   eax,eax
c0017ae8:	74 25                	je     c0017b0f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017aea:	85 db                	test   ebx,ebx
c0017aec:	74 21                	je     c0017b0f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017aee:	83 e8 64             	sub    eax,0x64
c0017af1:	52                   	push   edx
c0017af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017af6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017afa:	50                   	push   eax
c0017afb:	e8 a5 e8 fe ff       	call   c00063a5 <iso_read>
c0017b00:	83 c4 10             	add    esp,0x10
c0017b03:	89 03                	mov    DWORD PTR [ebx],eax
c0017b05:	09 d0                	or     eax,edx
c0017b07:	0f 94 c0             	sete   al
c0017b0a:	0f b6 c0             	movzx  eax,al
c0017b0d:	eb 05                	jmp    c0017b14 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b0f:	b8 04 00 00 00       	mov    eax,0x4
c0017b14:	83 c4 08             	add    esp,0x8
c0017b17:	5b                   	pop    ebx
c0017b18:	c3                   	ret    
c0017b19:	90                   	nop

c0017b1a <ISO9660::seek(void*, unsigned long long)>:
c0017b1a:	57                   	push   edi
c0017b1b:	56                   	push   esi
c0017b1c:	b8 04 00 00 00       	mov    eax,0x4
c0017b21:	51                   	push   ecx
c0017b22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b26:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b2a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b2e:	85 d2                	test   edx,edx
c0017b30:	74 1c                	je     c0017b4e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017b32:	6a 00                	push   0x0
c0017b34:	83 ea 64             	sub    edx,0x64
c0017b37:	57                   	push   edi
c0017b38:	56                   	push   esi
c0017b39:	52                   	push   edx
c0017b3a:	e8 7c e9 fe ff       	call   c00064bb <iso_seek>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	31 f0                	xor    eax,esi
c0017b44:	31 fa                	xor    edx,edi
c0017b46:	09 d0                	or     eax,edx
c0017b48:	0f 95 c0             	setne  al
c0017b4b:	0f b6 c0             	movzx  eax,al
c0017b4e:	5a                   	pop    edx
c0017b4f:	5e                   	pop    esi
c0017b50:	5f                   	pop    edi
c0017b51:	c3                   	ret    

c0017b52 <ISO9660::tell(void*, unsigned long long*)>:
c0017b52:	53                   	push   ebx
c0017b53:	83 ec 08             	sub    esp,0x8
c0017b56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b5e:	85 c0                	test   eax,eax
c0017b60:	74 1c                	je     c0017b7e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b62:	85 db                	test   ebx,ebx
c0017b64:	74 18                	je     c0017b7e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b66:	83 ec 0c             	sub    esp,0xc
c0017b69:	83 e8 64             	sub    eax,0x64
c0017b6c:	50                   	push   eax
c0017b6d:	e8 cd e9 fe ff       	call   c000653f <iso_tell>
c0017b72:	83 c4 10             	add    esp,0x10
c0017b75:	89 03                	mov    DWORD PTR [ebx],eax
c0017b77:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b7a:	31 c0                	xor    eax,eax
c0017b7c:	eb 05                	jmp    c0017b83 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b7e:	b8 04 00 00 00       	mov    eax,0x4
c0017b83:	83 c4 08             	add    esp,0x8
c0017b86:	5b                   	pop    ebx
c0017b87:	c3                   	ret    

c0017b88 <ISO9660::stat(void*, unsigned long long*)>:
c0017b88:	53                   	push   ebx
c0017b89:	83 ec 08             	sub    esp,0x8
c0017b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b90:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b94:	85 c0                	test   eax,eax
c0017b96:	74 20                	je     c0017bb8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b98:	85 db                	test   ebx,ebx
c0017b9a:	74 1c                	je     c0017bb8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	83 e8 64             	sub    eax,0x64
c0017ba2:	50                   	push   eax
c0017ba3:	e8 c8 e9 fe ff       	call   c0006570 <iso_total>
c0017ba8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017baf:	89 03                	mov    DWORD PTR [ebx],eax
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	31 c0                	xor    eax,eax
c0017bb6:	eb 05                	jmp    c0017bbd <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017bb8:	b8 04 00 00 00       	mov    eax,0x4
c0017bbd:	83 c4 08             	add    esp,0x8
c0017bc0:	5b                   	pop    ebx
c0017bc1:	c3                   	ret    

c0017bc2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017bc2:	55                   	push   ebp
c0017bc3:	57                   	push   edi
c0017bc4:	56                   	push   esi
c0017bc5:	53                   	push   ebx
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017bcd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017bd1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bd5:	85 ff                	test   edi,edi
c0017bd7:	0f 94 c2             	sete   dl
c0017bda:	85 f6                	test   esi,esi
c0017bdc:	0f 94 c0             	sete   al
c0017bdf:	08 c2                	or     dl,al
c0017be1:	0f 85 9e 00 00 00    	jne    c0017c85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017be7:	85 db                	test   ebx,ebx
c0017be9:	0f 84 96 00 00 00    	je     c0017c85 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017bef:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017bf2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017bf8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c02:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c08:	74 34                	je     c0017c3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c0a:	83 ec 0c             	sub    esp,0xc
c0017c0d:	50                   	push   eax
c0017c0e:	e8 ac eb fe ff       	call   c00067bf <init_percd>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	ba 0b 00 00 00       	mov    edx,0xb
c0017c1b:	40                   	inc    eax
c0017c1c:	74 6c                	je     c0017c8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c1e:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017c25:	74 10                	je     c0017c37 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	68 5c f1 01 c0       	push   0xc001f15c
c0017c2f:	e8 d3 85 ff ff       	call   c0010207 <KePanic(char const*)>
c0017c34:	83 c4 10             	add    esp,0x10
c0017c37:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c39:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017c3e:	83 c3 03             	add    ebx,0x3
c0017c41:	52                   	push   edx
c0017c42:	52                   	push   edx
c0017c43:	6a 00                	push   0x0
c0017c45:	53                   	push   ebx
c0017c46:	e8 b2 e6 fe ff       	call   c00062fd <iso_open>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	89 c5                	mov    ebp,eax
c0017c50:	83 f8 ff             	cmp    eax,0xffffffff
c0017c53:	75 0f                	jne    c0017c64 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c55:	50                   	push   eax
c0017c56:	50                   	push   eax
c0017c57:	6a 01                	push   0x1
c0017c59:	53                   	push   ebx
c0017c5a:	e8 9e e6 fe ff       	call   c00062fd <iso_open>
c0017c5f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c62:	eb 1a                	jmp    c0017c7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	50                   	push   eax
c0017c68:	e8 03 e9 fe ff       	call   c0006570 <iso_total>
c0017c6d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c74:	89 06                	mov    DWORD PTR [esi],eax
c0017c76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c79:	e8 09 e7 fe ff       	call   c0006387 <iso_close>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	31 d2                	xor    edx,edx
c0017c83:	eb 05                	jmp    c0017c8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c85:	ba 04 00 00 00       	mov    edx,0x4
c0017c8a:	83 c4 0c             	add    esp,0xc
c0017c8d:	89 d0                	mov    eax,edx
c0017c8f:	5b                   	pop    ebx
c0017c90:	5e                   	pop    esi
c0017c91:	5f                   	pop    edi
c0017c92:	5d                   	pop    ebp
c0017c93:	c3                   	ret    

c0017c94 <ISO9660::close(void*)>:
c0017c94:	83 ec 0c             	sub    esp,0xc
c0017c97:	b8 04 00 00 00       	mov    eax,0x4
c0017c9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ca0:	85 d2                	test   edx,edx
c0017ca2:	74 11                	je     c0017cb5 <ISO9660::close(void*)+0x21>
c0017ca4:	83 ec 0c             	sub    esp,0xc
c0017ca7:	83 ea 64             	sub    edx,0x64
c0017caa:	52                   	push   edx
c0017cab:	e8 d7 e6 fe ff       	call   c0006387 <iso_close>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	31 c0                	xor    eax,eax
c0017cb5:	83 c4 0c             	add    esp,0xc
c0017cb8:	c3                   	ret    
c0017cb9:	90                   	nop

c0017cba <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017cba:	55                   	push   ebp
c0017cbb:	57                   	push   edi
c0017cbc:	56                   	push   esi
c0017cbd:	53                   	push   ebx
c0017cbe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017cc4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017ccb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017cd2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017cd9:	85 c0                	test   eax,eax
c0017cdb:	0f 84 96 00 00 00    	je     c0017d77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ce1:	85 db                	test   ebx,ebx
c0017ce3:	0f 84 8e 00 00 00    	je     c0017d77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	83 e8 64             	sub    eax,0x64
c0017cef:	50                   	push   eax
c0017cf0:	e8 cc e8 fe ff       	call   c00065c1 <iso_readdir>
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	89 c6                	mov    esi,eax
c0017cfa:	85 c0                	test   eax,eax
c0017cfc:	75 18                	jne    c0017d16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017cfe:	52                   	push   edx
c0017cff:	68 10 01 00 00       	push   0x110
c0017d04:	6a 00                	push   0x0
c0017d06:	57                   	push   edi
c0017d07:	e8 c4 87 fe ff       	call   c00004d0 <memset>
c0017d0c:	83 c4 10             	add    esp,0x10
c0017d0f:	b8 01 00 00 00       	mov    eax,0x1
c0017d14:	eb 66                	jmp    c0017d7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d16:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d1c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	55                   	push   ebp
c0017d23:	e8 18 88 fe ff       	call   c0000540 <strlen>
c0017d28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017d3b:	75 0a                	jne    c0017d47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017d3d:	b8 02 00 00 00       	mov    eax,0x2
c0017d42:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d45:	74 05                	je     c0017d4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d47:	b8 01 00 00 00       	mov    eax,0x1
c0017d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d50:	50                   	push   eax
c0017d51:	50                   	push   eax
c0017d52:	55                   	push   ebp
c0017d53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d57:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d5b:	50                   	push   eax
c0017d5c:	e8 9f 88 fe ff       	call   c0000600 <strcpy>
c0017d61:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d6a:	31 c0                	xor    eax,eax
c0017d6c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	eb 05                	jmp    c0017d7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d77:	b8 04 00 00 00       	mov    eax,0x4
c0017d7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d82:	5b                   	pop    ebx
c0017d83:	5e                   	pop    esi
c0017d84:	5f                   	pop    edi
c0017d85:	5d                   	pop    ebp
c0017d86:	c3                   	ret    

c0017d87 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d87:	57                   	push   edi
c0017d88:	56                   	push   esi
c0017d89:	53                   	push   ebx
c0017d8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d8e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d96:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d9c:	75 08                	jne    c0017da6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d9e:	38 1d 90 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb90,bl
c0017da4:	74 4a                	je     c0017df0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017da6:	83 ec 0c             	sub    esp,0xc
c0017da9:	31 d2                	xor    edx,edx
c0017dab:	68 40 53 02 c0       	push   0xc0025340
c0017db0:	0f be c3             	movsx  eax,bl
c0017db3:	6a 01                	push   0x1
c0017db5:	52                   	push   edx
c0017db6:	56                   	push   esi
c0017db7:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017dbe:	e8 e9 4e ff ff       	call   c000ccac <LogicalDisk::read(unsigned long long, int, void*)>
c0017dc3:	83 c4 20             	add    esp,0x20
c0017dc6:	85 c0                	test   eax,eax
c0017dc8:	75 0e                	jne    c0017dd8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017dca:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017dd0:	88 1d 90 fb 01 c0    	mov    BYTE PTR ds:0xc001fb90,bl
c0017dd6:	eb 18                	jmp    c0017df0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017dd8:	50                   	push   eax
c0017dd9:	68 00 08 00 00       	push   0x800
c0017dde:	6a 00                	push   0x0
c0017de0:	57                   	push   edi
c0017de1:	e8 ea 86 fe ff       	call   c00004d0 <memset>
c0017de6:	83 c4 10             	add    esp,0x10
c0017de9:	b8 01 00 00 00       	mov    eax,0x1
c0017dee:	eb 0e                	jmp    c0017dfe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017df0:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017df5:	b9 00 08 00 00       	mov    ecx,0x800
c0017dfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dfc:	31 c0                	xor    eax,eax
c0017dfe:	5b                   	pop    ebx
c0017dff:	5e                   	pop    esi
c0017e00:	5f                   	pop    edi
c0017e01:	c3                   	ret    

c0017e02 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e02:	53                   	push   ebx
c0017e03:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e09:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017e13:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e1a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e1d:	0f be db             	movsx  ebx,bl
c0017e20:	53                   	push   ebx
c0017e21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e25:	50                   	push   eax
c0017e26:	6a 10                	push   0x10
c0017e28:	e8 5a ff ff ff       	call   c0017d87 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	31 d2                	xor    edx,edx
c0017e32:	85 c0                	test   eax,eax
c0017e34:	75 33                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e36:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017e3b:	75 2c                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e3d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e42:	75 25                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e44:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e49:	75 1e                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e4b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e50:	75 17                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e52:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e57:	75 10                	jne    c0017e69 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e59:	83 ec 0c             	sub    esp,0xc
c0017e5c:	53                   	push   ebx
c0017e5d:	e8 5d e9 fe ff       	call   c00067bf <init_percd>
c0017e62:	83 c4 10             	add    esp,0x10
c0017e65:	40                   	inc    eax
c0017e66:	0f 95 c2             	setne  dl
c0017e69:	88 d0                	mov    al,dl
c0017e6b:	81 c4 08 08 00 00    	add    esp,0x808
c0017e71:	5b                   	pop    ebx
c0017e72:	c3                   	ret    
c0017e73:	90                   	nop

c0017e74 <ISO9660::ISO9660()>:
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	50                   	push   eax
c0017e7f:	e8 24 2a ff ff       	call   c000a8a8 <Filesystem::Filesystem()>
c0017e84:	83 c4 10             	add    esp,0x10
c0017e87:	ba 74 f1 01 c0       	mov    edx,0xc001f174
c0017e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e90:	89 10                	mov    DWORD PTR [eax],edx
c0017e92:	e8 2a ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e97:	90                   	nop
c0017e98:	83 c4 0c             	add    esp,0xc
c0017e9b:	c3                   	ret    

c0017e9c <SoundCard::beginPlayback()>:
c0017e9c:	c7 44 24 04 d4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1d4
c0017ea4:	e9 5e 83 ff ff       	jmp    c0010207 <KePanic(char const*)>
c0017ea9:	90                   	nop

c0017eaa <SoundCard::stopPlayback()>:
c0017eaa:	c7 44 24 04 d4 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f1d4
c0017eb2:	e9 50 83 ff ff       	jmp    c0010207 <KePanic(char const*)>
c0017eb7:	90                   	nop

c0017eb8 <SoundCard::SoundCard(char const*)>:
c0017eb8:	83 ec 1c             	sub    esp,0x1c
c0017ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebf:	83 ec 08             	sub    esp,0x8
c0017ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ec6:	50                   	push   eax
c0017ec7:	e8 90 3c ff ff       	call   c000bb5c <Device::Device(char const*)>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	ba 20 f2 01 c0       	mov    edx,0xc001f220
c0017ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed8:	89 10                	mov    DWORD PTR [eax],edx
c0017eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ede:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f05:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f13:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f25:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f2a:	7f 19                	jg     c0017f45 <SoundCard::SoundCard(char const*)+0x8d>
c0017f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f34:	83 c2 54             	add    edx,0x54
c0017f37:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017f3f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f43:	eb e0                	jmp    c0017f25 <SoundCard::SoundCard(char const*)+0x6d>
c0017f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f49:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f50:	90                   	nop
c0017f51:	83 c4 1c             	add    esp,0x1c
c0017f54:	c3                   	ret    
c0017f55:	90                   	nop

c0017f56 <SoundCard::~SoundCard()>:
c0017f56:	83 ec 0c             	sub    esp,0xc
c0017f59:	ba 20 f2 01 c0       	mov    edx,0xc001f220
c0017f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f62:	89 10                	mov    DWORD PTR [eax],edx
c0017f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f68:	83 ec 0c             	sub    esp,0xc
c0017f6b:	50                   	push   eax
c0017f6c:	e8 55 39 ff ff       	call   c000b8c6 <Device::~Device()>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	90                   	nop
c0017f75:	83 c4 0c             	add    esp,0xc
c0017f78:	c3                   	ret    
c0017f79:	90                   	nop

c0017f7a <SoundCard::~SoundCard()>:
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	83 ec 0c             	sub    esp,0xc
c0017f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f84:	e8 cd ff ff ff       	call   c0017f56 <SoundCard::~SoundCard()>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	83 ec 08             	sub    esp,0x8
c0017f8f:	68 e8 01 00 00       	push   0x1e8
c0017f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f98:	e8 f4 24 ff ff       	call   c000a491 <operator delete(void*, unsigned long)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	83 c4 0c             	add    esp,0xc
c0017fa3:	c3                   	ret    

c0017fa4 <SoundCard::configureRates(int, int, int)>:
c0017fa4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fa8:	31 c0                	xor    eax,eax
c0017faa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017fb1:	75 20                	jne    c0017fd3 <SoundCard::configureRates(int, int, int)+0x2f>
c0017fb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fc1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fcb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017fd1:	b0 01                	mov    al,0x1
c0017fd3:	c3                   	ret    

c0017fd4 <SoundCard::getSamples16(int, short*)>:
c0017fd4:	55                   	push   ebp
c0017fd5:	57                   	push   edi
c0017fd6:	31 ff                	xor    edi,edi
c0017fd8:	56                   	push   esi
c0017fd9:	53                   	push   ebx
c0017fda:	31 db                	xor    ebx,ebx
c0017fdc:	83 ec 10             	sub    esp,0x10
c0017fdf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017fe3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fe7:	8d 04 36             	lea    eax,[esi+esi*1]
c0017fea:	50                   	push   eax
c0017feb:	6a 00                	push   0x0
c0017fed:	55                   	push   ebp
c0017fee:	e8 dd 84 fe ff       	call   c00004d0 <memset>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffa:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018001:	85 c0                	test   eax,eax
c0018003:	74 1b                	je     c0018020 <SoundCard::getSamples16(int, short*)+0x4c>
c0018005:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018009:	75 15                	jne    c0018020 <SoundCard::getSamples16(int, short*)+0x4c>
c001800b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001800f:	55                   	push   ebp
c0018010:	56                   	push   esi
c0018011:	50                   	push   eax
c0018012:	e8 ed 02 00 00       	call   c0018304 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018017:	83 c4 10             	add    esp,0x10
c001801a:	39 c7                	cmp    edi,eax
c001801c:	7d 02                	jge    c0018020 <SoundCard::getSamples16(int, short*)+0x4c>
c001801e:	89 c7                	mov    edi,eax
c0018020:	43                   	inc    ebx
c0018021:	83 fb 20             	cmp    ebx,0x20
c0018024:	75 d0                	jne    c0017ff6 <SoundCard::getSamples16(int, short*)+0x22>
c0018026:	83 c4 0c             	add    esp,0xc
c0018029:	89 f8                	mov    eax,edi
c001802b:	5b                   	pop    ebx
c001802c:	5e                   	pop    esi
c001802d:	5f                   	pop    edi
c001802e:	5d                   	pop    ebp
c001802f:	c3                   	ret    

c0018030 <SoundCard::getSamples32(int, int*)>:
c0018030:	55                   	push   ebp
c0018031:	57                   	push   edi
c0018032:	31 ff                	xor    edi,edi
c0018034:	56                   	push   esi
c0018035:	31 f6                	xor    esi,esi
c0018037:	53                   	push   ebx
c0018038:	83 ec 10             	sub    esp,0x10
c001803b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018043:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018047:	c1 e0 02             	shl    eax,0x2
c001804a:	50                   	push   eax
c001804b:	6a 00                	push   0x0
c001804d:	55                   	push   ebp
c001804e:	e8 7d 84 fe ff       	call   c00004d0 <memset>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001805d:	85 c0                	test   eax,eax
c001805f:	74 1b                	je     c001807c <SoundCard::getSamples32(int, int*)+0x4c>
c0018061:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018065:	75 15                	jne    c001807c <SoundCard::getSamples32(int, int*)+0x4c>
c0018067:	53                   	push   ebx
c0018068:	55                   	push   ebp
c0018069:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001806d:	50                   	push   eax
c001806e:	e8 55 03 00 00       	call   c00183c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	39 c6                	cmp    esi,eax
c0018078:	7d 02                	jge    c001807c <SoundCard::getSamples32(int, int*)+0x4c>
c001807a:	89 c6                	mov    esi,eax
c001807c:	47                   	inc    edi
c001807d:	83 ff 20             	cmp    edi,0x20
c0018080:	75 d4                	jne    c0018056 <SoundCard::getSamples32(int, int*)+0x26>
c0018082:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018088:	85 f6                	test   esi,esi
c001808a:	75 0f                	jne    c001809b <SoundCard::getSamples32(int, int*)+0x6b>
c001808c:	84 c0                	test   al,al
c001808e:	74 1b                	je     c00180ab <SoundCard::getSamples32(int, int*)+0x7b>
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018095:	53                   	push   ebx
c0018096:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018099:	eb 0d                	jmp    c00180a8 <SoundCard::getSamples32(int, int*)+0x78>
c001809b:	84 c0                	test   al,al
c001809d:	75 0c                	jne    c00180ab <SoundCard::getSamples32(int, int*)+0x7b>
c001809f:	83 ec 0c             	sub    esp,0xc
c00180a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180a4:	53                   	push   ebx
c00180a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	83 c4 0c             	add    esp,0xc
c00180ae:	89 f0                	mov    eax,esi
c00180b0:	5b                   	pop    ebx
c00180b1:	5e                   	pop    esi
c00180b2:	5f                   	pop    edi
c00180b3:	5d                   	pop    ebp
c00180b4:	c3                   	ret    
c00180b5:	90                   	nop

c00180b6 <SoundCard::addChannel(SoundPort*)>:
c00180b6:	83 ec 0c             	sub    esp,0xc
c00180b9:	31 c0                	xor    eax,eax
c00180bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180bf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00180c7:	74 1b                	je     c00180e4 <SoundCard::addChannel(SoundPort*)+0x2e>
c00180c9:	40                   	inc    eax
c00180ca:	83 f8 20             	cmp    eax,0x20
c00180cd:	75 f0                	jne    c00180bf <SoundCard::addChannel(SoundPort*)+0x9>
c00180cf:	83 ec 0c             	sub    esp,0xc
c00180d2:	68 f9 f1 01 c0       	push   0xc001f1f9
c00180d7:	e8 2b 81 ff ff       	call   c0010207 <KePanic(char const*)>
c00180dc:	83 c4 10             	add    esp,0x10
c00180df:	83 c8 ff             	or     eax,0xffffffff
c00180e2:	eb 0b                	jmp    c00180ef <SoundCard::addChannel(SoundPort*)+0x39>
c00180e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180e8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00180ef:	83 c4 0c             	add    esp,0xc
c00180f2:	c3                   	ret    
c00180f3:	90                   	nop

c00180f4 <SoundCard::removeChannel(int)>:
c00180f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180fc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018107:	c3                   	ret    

c0018108 <SoundPort::SoundPort(int, int, int, int)>:
c0018108:	83 ec 0c             	sub    esp,0xc
c001810b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001811e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018126:	89 10                	mov    DWORD PTR [eax],edx
c0018128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018130:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018137:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001813b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001813e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018143:	75 13                	jne    c0018158 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018149:	8b 00                	mov    eax,DWORD PTR [eax]
c001814b:	05 a0 0f 00 00       	add    eax,0xfa0
c0018150:	01 c0                	add    eax,eax
c0018152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018156:	66 90                	xchg   ax,ax
c0018158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018160:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018167:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001816e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018172:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018175:	c1 e0 02             	shl    eax,0x2
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	50                   	push   eax
c001817c:	e8 38 f6 fe ff       	call   c00077b9 <malloc>
c0018181:	83 c4 10             	add    esp,0x10
c0018184:	89 c2                	mov    edx,eax
c0018186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001818d:	90                   	nop
c001818e:	83 c4 0c             	add    esp,0xc
c0018191:	c3                   	ret    
c0018192:	66 90                	xchg   ax,ax

c0018194 <SoundPort::~SoundPort()>:
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001819e:	85 c0                	test   eax,eax
c00181a0:	74 1e                	je     c00181c0 <SoundPort::~SoundPort()+0x2c>
c00181a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181a9:	83 ec 0c             	sub    esp,0xc
c00181ac:	50                   	push   eax
c00181ad:	e8 17 f6 fe ff       	call   c00077c9 <free>
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181c0:	90                   	nop
c00181c1:	83 c4 0c             	add    esp,0xc
c00181c4:	c3                   	ret    
c00181c5:	90                   	nop
c00181c6:	66 90                	xchg   ax,ax

c00181c8 <SoundPort::unpause()>:
c00181c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181cc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00181d0:	c3                   	ret    
c00181d1:	90                   	nop
c00181d2:	66 90                	xchg   ax,ax

c00181d4 <SoundPort::pause()>:
c00181d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181d8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181dc:	c3                   	ret    
c00181dd:	90                   	nop
c00181de:	66 90                	xchg   ax,ax

c00181e0 <SoundPort::getBufferUsed()>:
c00181e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181e7:	c3                   	ret    

c00181e8 <SoundPort::getBufferSize()>:
c00181e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181ef:	c3                   	ret    

c00181f0 <SoundPort::buffer16(short*, int)>:
c00181f0:	55                   	push   ebp
c00181f1:	57                   	push   edi
c00181f2:	56                   	push   esi
c00181f3:	53                   	push   ebx
c00181f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181ff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018202:	74 68                	je     c001826c <SoundPort::buffer16(short*, int)+0x7c>
c0018204:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018208:	85 c9                	test   ecx,ecx
c001820a:	7e 60                	jle    c001826c <SoundPort::buffer16(short*, int)+0x7c>
c001820c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018210:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018213:	c1 e1 0f             	shl    ecx,0xf
c0018216:	8d 70 01             	lea    esi,[eax+0x1]
c0018219:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001821c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001821f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018222:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018225:	74 4d                	je     c0018274 <SoundPort::buffer16(short*, int)+0x84>
c0018227:	31 f6                	xor    esi,esi
c0018229:	eb 21                	jmp    c001824c <SoundPort::buffer16(short*, int)+0x5c>
c001822b:	90                   	nop
c001822c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018231:	8d 79 01             	lea    edi,[ecx+0x1]
c0018234:	c1 e3 0f             	shl    ebx,0xf
c0018237:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001823a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001823d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018240:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018243:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018246:	74 1c                	je     c0018264 <SoundPort::buffer16(short*, int)+0x74>
c0018248:	89 c6                	mov    esi,eax
c001824a:	66 90                	xchg   ax,ax
c001824c:	8d 46 01             	lea    eax,[esi+0x1]
c001824f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018253:	75 d7                	jne    c001822c <SoundPort::buffer16(short*, int)+0x3c>
c0018255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018259:	8d 76 00             	lea    esi,[esi+0x0]
c001825c:	5b                   	pop    ebx
c001825d:	5e                   	pop    esi
c001825e:	5f                   	pop    edi
c001825f:	5d                   	pop    ebp
c0018260:	c3                   	ret    
c0018261:	8d 76 00             	lea    esi,[esi+0x0]
c0018264:	5b                   	pop    ebx
c0018265:	8d 46 02             	lea    eax,[esi+0x2]
c0018268:	5e                   	pop    esi
c0018269:	5f                   	pop    edi
c001826a:	5d                   	pop    ebp
c001826b:	c3                   	ret    
c001826c:	5b                   	pop    ebx
c001826d:	31 c0                	xor    eax,eax
c001826f:	5e                   	pop    esi
c0018270:	5f                   	pop    edi
c0018271:	5d                   	pop    ebp
c0018272:	c3                   	ret    
c0018273:	90                   	nop
c0018274:	b8 01 00 00 00       	mov    eax,0x1
c0018279:	eb e1                	jmp    c001825c <SoundPort::buffer16(short*, int)+0x6c>
c001827b:	90                   	nop

c001827c <SoundPort::buffer32(int*, int)>:
c001827c:	55                   	push   ebp
c001827d:	57                   	push   edi
c001827e:	56                   	push   esi
c001827f:	53                   	push   ebx
c0018280:	51                   	push   ecx
c0018281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018289:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001828c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018290:	89 04 24             	mov    DWORD PTR [esp],eax
c0018293:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018296:	74 5c                	je     c00182f4 <SoundPort::buffer32(int*, int)+0x78>
c0018298:	85 c0                	test   eax,eax
c001829a:	7e 58                	jle    c00182f4 <SoundPort::buffer32(int*, int)+0x78>
c001829c:	8d 71 01             	lea    esi,[ecx+0x1]
c001829f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182a2:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182a5:	8b 37                	mov    esi,DWORD PTR [edi]
c00182a7:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00182aa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182ad:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182b0:	74 4a                	je     c00182fc <SoundPort::buffer32(int*, int)+0x80>
c00182b2:	31 f6                	xor    esi,esi
c00182b4:	eb 1e                	jmp    c00182d4 <SoundPort::buffer32(int*, int)+0x58>
c00182b6:	66 90                	xchg   ax,ax
c00182b8:	8d 69 01             	lea    ebp,[ecx+0x1]
c00182bb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00182be:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00182c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00182c4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00182c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ce:	74 18                	je     c00182e8 <SoundPort::buffer32(int*, int)+0x6c>
c00182d0:	89 de                	mov    esi,ebx
c00182d2:	66 90                	xchg   ax,ax
c00182d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00182d7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00182da:	75 dc                	jne    c00182b8 <SoundPort::buffer32(int*, int)+0x3c>
c00182dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00182df:	90                   	nop
c00182e0:	5a                   	pop    edx
c00182e1:	5b                   	pop    ebx
c00182e2:	5e                   	pop    esi
c00182e3:	5f                   	pop    edi
c00182e4:	5d                   	pop    ebp
c00182e5:	c3                   	ret    
c00182e6:	66 90                	xchg   ax,ax
c00182e8:	5a                   	pop    edx
c00182e9:	8d 46 02             	lea    eax,[esi+0x2]
c00182ec:	5b                   	pop    ebx
c00182ed:	5e                   	pop    esi
c00182ee:	5f                   	pop    edi
c00182ef:	5d                   	pop    ebp
c00182f0:	c3                   	ret    
c00182f1:	8d 76 00             	lea    esi,[esi+0x0]
c00182f4:	5a                   	pop    edx
c00182f5:	31 c0                	xor    eax,eax
c00182f7:	5b                   	pop    ebx
c00182f8:	5e                   	pop    esi
c00182f9:	5f                   	pop    edi
c00182fa:	5d                   	pop    ebp
c00182fb:	c3                   	ret    
c00182fc:	b8 01 00 00 00       	mov    eax,0x1
c0018301:	eb dd                	jmp    c00182e0 <SoundPort::buffer32(int*, int)+0x64>
c0018303:	90                   	nop

c0018304 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018304:	57                   	push   edi
c0018305:	56                   	push   esi
c0018306:	53                   	push   ebx
c0018307:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001830b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001830f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018315:	39 03                	cmp    DWORD PTR [ebx],eax
c0018317:	74 13                	je     c001832c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018319:	83 ec 0c             	sub    esp,0xc
c001831c:	68 4c f2 01 c0       	push   0xc001f24c
c0018321:	e8 e1 7e ff ff       	call   c0010207 <KePanic(char const*)>
c0018326:	83 c4 10             	add    esp,0x10
c0018329:	8d 76 00             	lea    esi,[esi+0x0]
c001832c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018332:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018335:	74 11                	je     c0018348 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018337:	83 ec 0c             	sub    esp,0xc
c001833a:	68 8b f2 01 c0       	push   0xc001f28b
c001833f:	e8 c3 7e ff ff       	call   c0010207 <KePanic(char const*)>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	90                   	nop
c0018348:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001834e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018351:	74 11                	je     c0018364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018353:	83 ec 0c             	sub    esp,0xc
c0018356:	68 8b f2 01 c0       	push   0xc001f28b
c001835b:	e8 a7 7e ff ff       	call   c0010207 <KePanic(char const*)>
c0018360:	83 c4 10             	add    esp,0x10
c0018363:	90                   	nop
c0018364:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018367:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001836b:	7e 07                	jle    c0018374 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001836d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018371:	8d 76 00             	lea    esi,[esi+0x0]
c0018374:	85 f6                	test   esi,esi
c0018376:	7e 2c                	jle    c00183a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018378:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001837c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001837f:	31 c9                	xor    ecx,ecx
c0018381:	01 d7                	add    edi,edx
c0018383:	90                   	nop
c0018384:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018387:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001838a:	85 c0                	test   eax,eax
c001838c:	79 06                	jns    c0018394 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001838e:	05 ff 7f 00 00       	add    eax,0x7fff
c0018393:	90                   	nop
c0018394:	c1 f8 0f             	sar    eax,0xf
c0018397:	83 c1 04             	add    ecx,0x4
c001839a:	66 01 02             	add    WORD PTR [edx],ax
c001839d:	83 c2 02             	add    edx,0x2
c00183a0:	39 d7                	cmp    edi,edx
c00183a2:	75 e0                	jne    c0018384 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00183a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00183a7:	50                   	push   eax
c00183a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183ab:	29 f0                	sub    eax,esi
c00183ad:	c1 e0 02             	shl    eax,0x2
c00183b0:	50                   	push   eax
c00183b1:	8d 04 b2             	lea    eax,[edx+esi*4]
c00183b4:	50                   	push   eax
c00183b5:	52                   	push   edx
c00183b6:	e8 25 80 fe ff       	call   c00003e0 <memmove>
c00183bb:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00183be:	83 c4 10             	add    esp,0x10
c00183c1:	89 f0                	mov    eax,esi
c00183c3:	5b                   	pop    ebx
c00183c4:	5e                   	pop    esi
c00183c5:	5f                   	pop    edi
c00183c6:	c3                   	ret    
c00183c7:	90                   	nop

c00183c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00183c8:	57                   	push   edi
c00183c9:	56                   	push   esi
c00183ca:	53                   	push   ebx
c00183cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183d7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00183dd:	39 06                	cmp    DWORD PTR [esi],eax
c00183df:	74 13                	je     c00183f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00183e1:	83 ec 0c             	sub    esp,0xc
c00183e4:	68 6c f2 01 c0       	push   0xc001f26c
c00183e9:	e8 19 7e ff ff       	call   c0010207 <KePanic(char const*)>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183fa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183fd:	74 11                	je     c0018410 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183ff:	83 ec 0c             	sub    esp,0xc
c0018402:	68 a7 f2 01 c0       	push   0xc001f2a7
c0018407:	e8 fb 7d ff ff       	call   c0010207 <KePanic(char const*)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	90                   	nop
c0018410:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018416:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018419:	74 11                	je     c001842c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001841b:	83 ec 0c             	sub    esp,0xc
c001841e:	68 a7 f2 01 c0       	push   0xc001f2a7
c0018423:	e8 df 7d ff ff       	call   c0010207 <KePanic(char const*)>
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	90                   	nop
c001842c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001842f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018433:	7e 07                	jle    c001843c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018435:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018439:	8d 76 00             	lea    esi,[esi+0x0]
c001843c:	85 ff                	test   edi,edi
c001843e:	7e 1c                	jle    c001845c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018440:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018447:	31 c0                	xor    eax,eax
c0018449:	8d 76 00             	lea    esi,[esi+0x0]
c001844c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001844f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018452:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018455:	83 c0 04             	add    eax,0x4
c0018458:	39 c1                	cmp    ecx,eax
c001845a:	75 f0                	jne    c001844c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001845c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001845f:	50                   	push   eax
c0018460:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018463:	29 f8                	sub    eax,edi
c0018465:	c1 e0 02             	shl    eax,0x2
c0018468:	50                   	push   eax
c0018469:	8d 04 ba             	lea    eax,[edx+edi*4]
c001846c:	50                   	push   eax
c001846d:	52                   	push   edx
c001846e:	e8 6d 7f fe ff       	call   c00003e0 <memmove>
c0018473:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	89 f8                	mov    eax,edi
c001847b:	5b                   	pop    ebx
c001847c:	5e                   	pop    esi
c001847d:	5f                   	pop    edi
c001847e:	c3                   	ret    
c001847f:	90                   	nop

c0018480 <PCI::open(int, int, void*)>:
c0018480:	83 ec 18             	sub    esp,0x18
c0018483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001848b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018491:	8b 10                	mov    edx,DWORD PTR [eax]
c0018493:	50                   	push   eax
c0018494:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018497:	31 c0                	xor    eax,eax
c0018499:	83 c4 1c             	add    esp,0x1c
c001849c:	c3                   	ret    
c001849d:	90                   	nop

c001849e <PCI::close(int, int, void*)>:
c001849e:	31 c0                	xor    eax,eax
c00184a0:	c3                   	ret    
c00184a1:	90                   	nop

c00184a2 <PCI::PCI()>:
c00184a2:	83 ec 0c             	sub    esp,0xc
c00184a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a9:	83 ec 08             	sub    esp,0x8
c00184ac:	68 c3 f2 01 c0       	push   0xc001f2c3
c00184b1:	50                   	push   eax
c00184b2:	e8 61 2e ff ff       	call   c000b318 <Bus::Bus(char const*)>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	ba 6c f3 01 c0       	mov    edx,0xc001f36c
c00184bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c3:	89 10                	mov    DWORD PTR [eax],edx
c00184c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00184d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d7:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c00184dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184e6:	31 d2                	xor    edx,edx
c00184e8:	88 c2                	mov    dl,al
c00184ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ee:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00184f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184ff:	31 d2                	xor    edx,edx
c0018501:	88 c2                	mov    dl,al
c0018503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018507:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001850c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018510:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018516:	8d 50 01             	lea    edx,[eax+0x1]
c0018519:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001851d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018523:	31 d2                	xor    edx,edx
c0018525:	88 c2                	mov    dl,al
c0018527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001852f:	83 c9 c0             	or     ecx,0xffffffc0
c0018532:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018536:	90                   	nop
c0018537:	83 c4 0c             	add    esp,0xc
c001853a:	c3                   	ret    
c001853b:	90                   	nop

c001853c <PCI::readBAR8(unsigned int, int)>:
c001853c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018544:	f6 c2 01             	test   dl,0x1
c0018547:	74 07                	je     c0018550 <PCI::readBAR8(unsigned int, int)+0x14>
c0018549:	83 e2 fc             	and    edx,0xfffffffc
c001854c:	01 c2                	add    edx,eax
c001854e:	ec                   	in     al,dx
c001854f:	c3                   	ret    
c0018550:	83 e2 f0             	and    edx,0xfffffff0
c0018553:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018556:	c3                   	ret    
c0018557:	90                   	nop

c0018558 <PCI::readBAR16(unsigned int, int)>:
c0018558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018560:	f6 c2 01             	test   dl,0x1
c0018563:	74 08                	je     c001856d <PCI::readBAR16(unsigned int, int)+0x15>
c0018565:	83 e2 fc             	and    edx,0xfffffffc
c0018568:	01 c2                	add    edx,eax
c001856a:	66 ed                	in     ax,dx
c001856c:	c3                   	ret    
c001856d:	83 e2 f0             	and    edx,0xfffffff0
c0018570:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018574:	c3                   	ret    
c0018575:	90                   	nop

c0018576 <PCI::readBAR32(unsigned int, int)>:
c0018576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001857a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001857e:	f6 c2 01             	test   dl,0x1
c0018581:	74 07                	je     c001858a <PCI::readBAR32(unsigned int, int)+0x14>
c0018583:	83 e2 fc             	and    edx,0xfffffffc
c0018586:	01 c2                	add    edx,eax
c0018588:	ed                   	in     eax,dx
c0018589:	c3                   	ret    
c001858a:	83 e2 f0             	and    edx,0xfffffff0
c001858d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018590:	c3                   	ret    
c0018591:	90                   	nop

c0018592 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001859a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001859e:	f6 c2 01             	test   dl,0x1
c00185a1:	74 07                	je     c00185aa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00185a3:	83 e2 fc             	and    edx,0xfffffffc
c00185a6:	01 ca                	add    edx,ecx
c00185a8:	ee                   	out    dx,al
c00185a9:	c3                   	ret    
c00185aa:	83 e2 f0             	and    edx,0xfffffff0
c00185ad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00185b0:	c3                   	ret    
c00185b1:	90                   	nop

c00185b2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00185b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185be:	f6 c2 01             	test   dl,0x1
c00185c1:	74 08                	je     c00185cb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00185c3:	83 e2 fc             	and    edx,0xfffffffc
c00185c6:	01 ca                	add    edx,ecx
c00185c8:	66 ef                	out    dx,ax
c00185ca:	c3                   	ret    
c00185cb:	83 e2 f0             	and    edx,0xfffffff0
c00185ce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00185d2:	c3                   	ret    
c00185d3:	90                   	nop

c00185d4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00185d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185e0:	f6 c2 01             	test   dl,0x1
c00185e3:	74 07                	je     c00185ec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00185e5:	83 e2 fc             	and    edx,0xfffffffc
c00185e8:	01 ca                	add    edx,ecx
c00185ea:	ef                   	out    dx,eax
c00185eb:	c3                   	ret    
c00185ec:	83 e2 f0             	and    edx,0xfffffff0
c00185ef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00185f2:	c3                   	ret    
c00185f3:	90                   	nop

c00185f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185f4:	55                   	push   ebp
c00185f5:	57                   	push   edi
c00185f6:	56                   	push   esi
c00185f7:	53                   	push   ebx
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185ff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018603:	89 f0                	mov    eax,esi
c0018605:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018609:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001860d:	3c 07                	cmp    al,0x7
c001860f:	76 10                	jbe    c0018621 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018611:	83 ec 0c             	sub    esp,0xc
c0018614:	68 cb f2 01 c0       	push   0xc001f2cb
c0018619:	e8 e9 7b ff ff       	call   c0010207 <KePanic(char const*)>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	80 fb 0f             	cmp    bl,0xf
c0018624:	76 10                	jbe    c0018636 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018626:	83 ec 0c             	sub    esp,0xc
c0018629:	68 fb f2 01 c0       	push   0xc001f2fb
c001862e:	e8 d4 7b ff ff       	call   c0010207 <KePanic(char const*)>
c0018633:	83 c4 10             	add    esp,0x10
c0018636:	8d 04 36             	lea    eax,[esi+esi*1]
c0018639:	ba f8 0c 00 00       	mov    edx,0xcf8
c001863e:	83 c8 f0             	or     eax,0xfffffff0
c0018641:	ee                   	out    dx,al
c0018642:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018647:	89 e8                	mov    eax,ebp
c0018649:	ee                   	out    dx,al
c001864a:	83 c4 0c             	add    esp,0xc
c001864d:	89 d8                	mov    eax,ebx
c001864f:	66 81 e7 fc 00       	and    di,0xfc
c0018654:	5b                   	pop    ebx
c0018655:	c1 e0 08             	shl    eax,0x8
c0018658:	5e                   	pop    esi
c0018659:	09 f8                	or     eax,edi
c001865b:	5f                   	pop    edi
c001865c:	66 0d 00 c0          	or     ax,0xc000
c0018660:	5d                   	pop    ebp
c0018661:	c3                   	ret    

c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018662:	57                   	push   edi
c0018663:	56                   	push   esi
c0018664:	53                   	push   ebx
c0018665:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018669:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001866d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018673:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018677:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001867b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001867f:	83 ff 01             	cmp    edi,0x1
c0018682:	75 3e                	jne    c00186c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018684:	89 de                	mov    esi,ebx
c0018686:	0f b6 c0             	movzx  eax,al
c0018689:	81 e6 fc 00 00 00    	and    esi,0xfc
c001868f:	c1 e0 10             	shl    eax,0x10
c0018692:	0f b6 c9             	movzx  ecx,cl
c0018695:	09 f0                	or     eax,esi
c0018697:	c1 e1 08             	shl    ecx,0x8
c001869a:	0f b6 d2             	movzx  edx,dl
c001869d:	09 c8                	or     eax,ecx
c001869f:	c1 e2 0b             	shl    edx,0xb
c00186a2:	09 d0                	or     eax,edx
c00186a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186a9:	0d 00 00 00 80       	or     eax,0x80000000
c00186ae:	ef                   	out    dx,eax
c00186af:	ba fc 0c 00 00       	mov    edx,0xcfc
c00186b4:	ed                   	in     eax,dx
c00186b5:	83 e3 02             	and    ebx,0x2
c00186b8:	0f b6 cb             	movzx  ecx,bl
c00186bb:	c1 e1 03             	shl    ecx,0x3
c00186be:	d3 e8                	shr    eax,cl
c00186c0:	eb 43                	jmp    c0018705 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186c2:	83 ff 02             	cmp    edi,0x2
c00186c5:	75 2c                	jne    c00186f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	0f b6 c9             	movzx  ecx,cl
c00186cd:	0f b6 d2             	movzx  edx,dl
c00186d0:	0f b6 fb             	movzx  edi,bl
c00186d3:	0f b6 c0             	movzx  eax,al
c00186d6:	57                   	push   edi
c00186d7:	51                   	push   ecx
c00186d8:	52                   	push   edx
c00186d9:	50                   	push   eax
c00186da:	56                   	push   esi
c00186db:	e8 14 ff ff ff       	call   c00185f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186e0:	89 c2                	mov    edx,eax
c00186e2:	ed                   	in     eax,dx
c00186e3:	83 e3 02             	and    ebx,0x2
c00186e6:	83 c4 20             	add    esp,0x20
c00186e9:	0f b6 cb             	movzx  ecx,bl
c00186ec:	c1 e1 03             	shl    ecx,0x3
c00186ef:	d3 e8                	shr    eax,cl
c00186f1:	eb 12                	jmp    c0018705 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186f3:	83 ec 0c             	sub    esp,0xc
c00186f6:	68 2b f3 01 c0       	push   0xc001f32b
c00186fb:	e8 07 7b ff ff       	call   c0010207 <KePanic(char const*)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	31 c0                	xor    eax,eax
c0018705:	5b                   	pop    ebx
c0018706:	5e                   	pop    esi
c0018707:	5f                   	pop    edi
c0018708:	c3                   	ret    
c0018709:	90                   	nop

c001870a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001870a:	83 ec 18             	sub    esp,0x18
c001870d:	6a 00                	push   0x0
c001870f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018714:	50                   	push   eax
c0018715:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001871a:	50                   	push   eax
c001871b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018720:	50                   	push   eax
c0018721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018725:	e8 38 ff ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001872a:	83 c4 2c             	add    esp,0x2c
c001872d:	c3                   	ret    

c001872e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001872e:	83 ec 18             	sub    esp,0x18
c0018731:	6a 0e                	push   0xe
c0018733:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018738:	50                   	push   eax
c0018739:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001873e:	50                   	push   eax
c001873f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018744:	50                   	push   eax
c0018745:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018749:	e8 14 ff ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001874e:	83 c4 2c             	add    esp,0x2c
c0018751:	0f b6 c0             	movzx  eax,al
c0018754:	c3                   	ret    
c0018755:	90                   	nop

c0018756 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018756:	55                   	push   ebp
c0018757:	57                   	push   edi
c0018758:	56                   	push   esi
c0018759:	53                   	push   ebx
c001875a:	83 ec 18             	sub    esp,0x18
c001875d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018762:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018767:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001876c:	6a 0a                	push   0xa
c001876e:	56                   	push   esi
c001876f:	55                   	push   ebp
c0018770:	57                   	push   edi
c0018771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018775:	e8 e8 fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001877a:	83 c4 14             	add    esp,0x14
c001877d:	89 c3                	mov    ebx,eax
c001877f:	6a 0a                	push   0xa
c0018781:	0f b6 db             	movzx  ebx,bl
c0018784:	56                   	push   esi
c0018785:	55                   	push   ebp
c0018786:	57                   	push   edi
c0018787:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001878b:	e8 d2 fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018790:	83 c4 2c             	add    esp,0x2c
c0018793:	25 00 ff 00 00       	and    eax,0xff00
c0018798:	09 d8                	or     eax,ebx
c001879a:	5b                   	pop    ebx
c001879b:	5e                   	pop    esi
c001879c:	5f                   	pop    edi
c001879d:	5d                   	pop    ebp
c001879e:	c3                   	ret    
c001879f:	90                   	nop

c00187a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00187a0:	83 ec 18             	sub    esp,0x18
c00187a3:	6a 08                	push   0x8
c00187a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187aa:	50                   	push   eax
c00187ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b0:	50                   	push   eax
c00187b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b6:	50                   	push   eax
c00187b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187bb:	e8 a2 fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187c0:	83 c4 2c             	add    esp,0x2c
c00187c3:	0f b6 c4             	movzx  eax,ah
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00187c8:	83 ec 18             	sub    esp,0x18
c00187cb:	6a 08                	push   0x8
c00187cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d2:	50                   	push   eax
c00187d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187d8:	50                   	push   eax
c00187d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187de:	50                   	push   eax
c00187df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e3:	e8 7a fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e8:	83 c4 2c             	add    esp,0x2c
c00187eb:	c3                   	ret    

c00187ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00187ec:	83 ec 18             	sub    esp,0x18
c00187ef:	6a 3c                	push   0x3c
c00187f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187f6:	50                   	push   eax
c00187f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187fc:	50                   	push   eax
c00187fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018802:	50                   	push   eax
c0018803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018807:	e8 56 fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001880c:	83 c4 2c             	add    esp,0x2c
c001880f:	c3                   	ret    

c0018810 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018810:	83 ec 18             	sub    esp,0x18
c0018813:	6a 18                	push   0x18
c0018815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881a:	50                   	push   eax
c001881b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018820:	50                   	push   eax
c0018821:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018826:	50                   	push   eax
c0018827:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882b:	e8 32 fe ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018830:	83 c4 2c             	add    esp,0x2c
c0018833:	0f b6 c4             	movzx  eax,ah
c0018836:	c3                   	ret    
c0018837:	90                   	nop

c0018838 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018838:	55                   	push   ebp
c0018839:	57                   	push   edi
c001883a:	56                   	push   esi
c001883b:	53                   	push   ebx
c001883c:	83 ec 28             	sub    esp,0x28
c001883f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018843:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018848:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001884d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018852:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018859:	8d 43 12             	lea    eax,[ebx+0x12]
c001885c:	83 c3 10             	add    ebx,0x10
c001885f:	0f b6 c0             	movzx  eax,al
c0018862:	0f b6 db             	movzx  ebx,bl
c0018865:	50                   	push   eax
c0018866:	51                   	push   ecx
c0018867:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001886b:	57                   	push   edi
c001886c:	55                   	push   ebp
c001886d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018871:	e8 ec fd ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018876:	83 c4 14             	add    esp,0x14
c0018879:	89 c6                	mov    esi,eax
c001887b:	53                   	push   ebx
c001887c:	c1 e6 10             	shl    esi,0x10
c001887f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018883:	51                   	push   ecx
c0018884:	57                   	push   edi
c0018885:	55                   	push   ebp
c0018886:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001888a:	e8 d3 fd ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001888f:	83 c4 3c             	add    esp,0x3c
c0018892:	0f b7 c0             	movzx  eax,ax
c0018895:	5b                   	pop    ebx
c0018896:	09 f0                	or     eax,esi
c0018898:	5e                   	pop    esi
c0018899:	5f                   	pop    edi
c001889a:	5d                   	pop    ebp
c001889b:	c3                   	ret    

c001889c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001889c:	55                   	push   ebp
c001889d:	57                   	push   edi
c001889e:	56                   	push   esi
c001889f:	53                   	push   ebx
c00188a0:	83 ec 0c             	sub    esp,0xc
c00188a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00188a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188ab:	89 f5                	mov    ebp,esi
c00188ad:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00188b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00188bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00188c3:	83 f9 01             	cmp    ecx,0x1
c00188c6:	75 5d                	jne    c0018925 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00188c8:	0f b6 c8             	movzx  ecx,al
c00188cb:	0f b6 d2             	movzx  edx,dl
c00188ce:	c1 e1 10             	shl    ecx,0x10
c00188d1:	c1 e2 0b             	shl    edx,0xb
c00188d4:	89 f0                	mov    eax,esi
c00188d6:	25 fc 00 00 00       	and    eax,0xfc
c00188db:	09 c1                	or     ecx,eax
c00188dd:	89 e8                	mov    eax,ebp
c00188df:	0f b6 c0             	movzx  eax,al
c00188e2:	c1 e0 08             	shl    eax,0x8
c00188e5:	09 c1                	or     ecx,eax
c00188e7:	09 d1                	or     ecx,edx
c00188e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188ee:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00188f4:	89 c8                	mov    eax,ecx
c00188f6:	ef                   	out    dx,eax
c00188f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188fc:	ed                   	in     eax,dx
c00188fd:	0f b7 db             	movzx  ebx,bx
c0018900:	83 e6 02             	and    esi,0x2
c0018903:	74 0a                	je     c001890f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018905:	0f b7 d0             	movzx  edx,ax
c0018908:	c1 e3 10             	shl    ebx,0x10
c001890b:	09 d3                	or     ebx,edx
c001890d:	eb 05                	jmp    c0018914 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001890f:	66 31 c0             	xor    ax,ax
c0018912:	09 c3                	or     ebx,eax
c0018914:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018919:	89 c8                	mov    eax,ecx
c001891b:	ef                   	out    dx,eax
c001891c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018921:	89 d8                	mov    eax,ebx
c0018923:	eb 41                	jmp    c0018966 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018925:	83 f9 02             	cmp    ecx,0x2
c0018928:	75 45                	jne    c001896f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001892a:	83 ec 0c             	sub    esp,0xc
c001892d:	0f b6 d2             	movzx  edx,dl
c0018930:	89 f1                	mov    ecx,esi
c0018932:	0f b6 c0             	movzx  eax,al
c0018935:	0f b6 f1             	movzx  esi,cl
c0018938:	89 e9                	mov    ecx,ebp
c001893a:	56                   	push   esi
c001893b:	0f b6 c9             	movzx  ecx,cl
c001893e:	51                   	push   ecx
c001893f:	52                   	push   edx
c0018940:	50                   	push   eax
c0018941:	57                   	push   edi
c0018942:	e8 ad fc ff ff       	call   c00185f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018947:	89 c2                	mov    edx,eax
c0018949:	ed                   	in     eax,dx
c001894a:	83 c4 20             	add    esp,0x20
c001894d:	0f b7 db             	movzx  ebx,bx
c0018950:	f6 c2 02             	test   dl,0x2
c0018953:	74 0c                	je     c0018961 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018955:	0f b7 c8             	movzx  ecx,ax
c0018958:	89 d8                	mov    eax,ebx
c001895a:	c1 e0 10             	shl    eax,0x10
c001895d:	09 c8                	or     eax,ecx
c001895f:	eb 05                	jmp    c0018966 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018961:	66 31 c0             	xor    ax,ax
c0018964:	09 d8                	or     eax,ebx
c0018966:	ef                   	out    dx,eax
c0018967:	83 c4 0c             	add    esp,0xc
c001896a:	5b                   	pop    ebx
c001896b:	5e                   	pop    esi
c001896c:	5f                   	pop    edi
c001896d:	5d                   	pop    ebp
c001896e:	c3                   	ret    
c001896f:	c7 44 24 20 2b f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f32b
c0018977:	83 c4 0c             	add    esp,0xc
c001897a:	5b                   	pop    ebx
c001897b:	5e                   	pop    esi
c001897c:	5f                   	pop    edi
c001897d:	5d                   	pop    ebp
c001897e:	e9 84 78 ff ff       	jmp    c0010207 <KePanic(char const*)>
c0018983:	90                   	nop

c0018984 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018984:	55                   	push   ebp
c0018985:	57                   	push   edi
c0018986:	56                   	push   esi
c0018987:	53                   	push   ebx
c0018988:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001898e:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018995:	0f 85 84 00 00 00    	jne    c0018a1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001899b:	83 ec 0c             	sub    esp,0xc
c001899e:	68 14 01 00 00       	push   0x114
c00189a3:	e8 11 ee fe ff       	call   c00077b9 <malloc>
c00189a8:	83 c4 0c             	add    esp,0xc
c00189ab:	89 c3                	mov    ebx,eax
c00189ad:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00189b3:	68 31 f3 01 c0       	push   0xc001f331
c00189b8:	50                   	push   eax
c00189b9:	e8 3e 21 ff ff       	call   c000aafc <File::File(char const*, Process*)>
c00189be:	5a                   	pop    edx
c00189bf:	59                   	pop    ecx
c00189c0:	6a 01                	push   0x1
c00189c2:	53                   	push   ebx
c00189c3:	e8 f4 21 ff ff       	call   c000abbc <File::open(FileOpenMode)>
c00189c8:	83 c4 0c             	add    esp,0xc
c00189cb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00189cf:	50                   	push   eax
c00189d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189d4:	50                   	push   eax
c00189d5:	53                   	push   ebx
c00189d6:	e8 8d 24 ff ff       	call   c000ae68 <File::stat(unsigned long long*, bool*)>
c00189db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189df:	40                   	inc    eax
c00189e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00189e3:	e8 d1 ed fe ff       	call   c00077b9 <malloc>
c00189e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189ec:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c00189f1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00189f5:	5e                   	pop    esi
c00189f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189f8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189fc:	51                   	push   ecx
c00189fd:	50                   	push   eax
c00189fe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a02:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a06:	53                   	push   ebx
c0018a07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a0a:	83 c4 14             	add    esp,0x14
c0018a0d:	53                   	push   ebx
c0018a0e:	e8 07 22 ff ff       	call   c000ac1a <File::close()>
c0018a13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018a1f:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018a24:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a2d:	31 ff                	xor    edi,edi
c0018a2f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018a37:	31 f6                	xor    esi,esi
c0018a39:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018a3e:	31 db                	xor    ebx,ebx
c0018a40:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a48:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a4d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a54:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a58:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a63:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a66:	0f 8e 6b 01 00 00    	jle    c0018bd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a6c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a6f:	d4 40                	aam    0x40
c0018a71:	d5 39                	aad    0x39
c0018a73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a77:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a7b:	d4 40                	aam    0x40
c0018a7d:	d5 39                	aad    0x39
c0018a7f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a83:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a87:	d4 40                	aam    0x40
c0018a89:	d5 39                	aad    0x39
c0018a8b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a8f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a93:	d4 40                	aam    0x40
c0018a95:	d5 39                	aad    0x39
c0018a97:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a9b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a9f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018aa3:	3c 56                	cmp    al,0x56
c0018aa5:	74 45                	je     c0018aec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018aa7:	d4 40                	aam    0x40
c0018aa9:	d5 39                	aad    0x39
c0018aab:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018aae:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018ab2:	0f b6 c9             	movzx  ecx,cl
c0018ab5:	c1 e1 04             	shl    ecx,0x4
c0018ab8:	d4 40                	aam    0x40
c0018aba:	d5 39                	aad    0x39
c0018abc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018abf:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018ac3:	0f b6 db             	movzx  ebx,bl
c0018ac6:	09 cb                	or     ebx,ecx
c0018ac8:	c1 e3 04             	shl    ebx,0x4
c0018acb:	d4 40                	aam    0x40
c0018acd:	d5 39                	aad    0x39
c0018acf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018ad2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018ad6:	0f b6 c9             	movzx  ecx,cl
c0018ad9:	09 cb                	or     ebx,ecx
c0018adb:	c1 e3 04             	shl    ebx,0x4
c0018ade:	89 d9                	mov    ecx,ebx
c0018ae0:	d4 40                	aam    0x40
c0018ae2:	d5 39                	aad    0x39
c0018ae4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018ae7:	0f b6 db             	movzx  ebx,bl
c0018aea:	09 cb                	or     ebx,ecx
c0018aec:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018af0:	80 f9 44             	cmp    cl,0x44
c0018af3:	74 47                	je     c0018b3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018af5:	88 c8                	mov    al,cl
c0018af7:	d4 40                	aam    0x40
c0018af9:	d5 39                	aad    0x39
c0018afb:	83 e8 30             	sub    eax,0x30
c0018afe:	0f b6 e8             	movzx  ebp,al
c0018b01:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b05:	c1 e5 04             	shl    ebp,0x4
c0018b08:	d4 40                	aam    0x40
c0018b0a:	d5 39                	aad    0x39
c0018b0c:	83 e8 30             	sub    eax,0x30
c0018b0f:	0f b6 f0             	movzx  esi,al
c0018b12:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b16:	09 ee                	or     esi,ebp
c0018b18:	c1 e6 04             	shl    esi,0x4
c0018b1b:	d4 40                	aam    0x40
c0018b1d:	d5 39                	aad    0x39
c0018b1f:	83 e8 30             	sub    eax,0x30
c0018b22:	0f b6 e8             	movzx  ebp,al
c0018b25:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b29:	09 ee                	or     esi,ebp
c0018b2b:	c1 e6 04             	shl    esi,0x4
c0018b2e:	89 f5                	mov    ebp,esi
c0018b30:	d4 40                	aam    0x40
c0018b32:	d5 39                	aad    0x39
c0018b34:	83 e8 30             	sub    eax,0x30
c0018b37:	0f b6 f0             	movzx  esi,al
c0018b3a:	09 ee                	or     esi,ebp
c0018b3c:	83 c7 10             	add    edi,0x10
c0018b3f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b43:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b46:	3c 0a                	cmp    al,0xa
c0018b48:	74 09                	je     c0018b53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b4a:	45                   	inc    ebp
c0018b4b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b4e:	75 16                	jne    c0018b66 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b50:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b53:	3c 0a                	cmp    al,0xa
c0018b55:	0f 94 c0             	sete   al
c0018b58:	0f b6 c0             	movzx  eax,al
c0018b5b:	01 c7                	add    edi,eax
c0018b5d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b62:	75 0c                	jne    c0018b70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b64:	eb 15                	jmp    c0018b7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b66:	47                   	inc    edi
c0018b67:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b6a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b6e:	eb d3                	jmp    c0018b43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b70:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b75:	0f 85 e8 fe ff ff    	jne    c0018a63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b7b:	80 f9 44             	cmp    cl,0x44
c0018b7e:	74 0b                	je     c0018b8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b80:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b85:	0f 85 d8 fe ff ff    	jne    c0018a63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b8b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b8f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b93:	c1 e1 04             	shl    ecx,0x4
c0018b96:	83 e8 30             	sub    eax,0x30
c0018b99:	09 c8                	or     eax,ecx
c0018b9b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b9f:	0f 85 be fe ff ff    	jne    c0018a63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ba5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018ba9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bad:	c1 e1 04             	shl    ecx,0x4
c0018bb0:	83 e8 30             	sub    eax,0x30
c0018bb3:	09 c8                	or     eax,ecx
c0018bb5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018bb9:	0f 85 a4 fe ff ff    	jne    c0018a63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bbf:	50                   	push   eax
c0018bc0:	50                   	push   eax
c0018bc1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bc5:	50                   	push   eax
c0018bc6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018bcd:	e8 2e 7a fe ff       	call   c0000600 <strcpy>
c0018bd2:	83 c4 10             	add    esp,0x10
c0018bd5:	eb 15                	jmp    c0018bec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018bd7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bde:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018be9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018bec:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bf3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bf9:	5b                   	pop    ebx
c0018bfa:	5e                   	pop    esi
c0018bfb:	5f                   	pop    edi
c0018bfc:	5d                   	pop    ebp
c0018bfd:	c3                   	ret    

c0018bfe <PCI::checkBus(unsigned char)>:
c0018bfe:	56                   	push   esi
c0018bff:	53                   	push   ebx
c0018c00:	31 f6                	xor    esi,esi
c0018c02:	51                   	push   ecx
c0018c03:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c07:	0f b6 c3             	movzx  eax,bl
c0018c0a:	52                   	push   edx
c0018c0b:	56                   	push   esi
c0018c0c:	46                   	inc    esi
c0018c0d:	50                   	push   eax
c0018c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c12:	e8 f3 02 00 00       	call   c0018f0a <PCI::checkDevice(unsigned char, unsigned char)>
c0018c17:	83 c4 10             	add    esp,0x10
c0018c1a:	83 fe 20             	cmp    esi,0x20
c0018c1d:	75 e8                	jne    c0018c07 <PCI::checkBus(unsigned char)+0x9>
c0018c1f:	58                   	pop    eax
c0018c20:	5b                   	pop    ebx
c0018c21:	5e                   	pop    esi
c0018c22:	c3                   	ret    
c0018c23:	90                   	nop

c0018c24 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c24:	55                   	push   ebp
c0018c25:	57                   	push   edi
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	83 ec 1c             	sub    esp,0x1c
c0018c2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c2f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018c35:	0f 84 52 01 00 00    	je     c0018d8d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c3b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018c3f:	66 81 f9 06 04       	cmp    cx,0x406
c0018c44:	75 2c                	jne    c0018c72 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c46:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c4b:	50                   	push   eax
c0018c4c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c51:	50                   	push   eax
c0018c52:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c57:	50                   	push   eax
c0018c58:	56                   	push   esi
c0018c59:	e8 b2 fb ff ff       	call   c0018810 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c62:	0f b6 c0             	movzx  eax,al
c0018c65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c69:	83 c4 2c             	add    esp,0x2c
c0018c6c:	5b                   	pop    ebx
c0018c6d:	5e                   	pop    esi
c0018c6e:	5f                   	pop    edi
c0018c6f:	5d                   	pop    ebp
c0018c70:	eb 8c                	jmp    c0018bfe <PCI::checkBus(unsigned char)>
c0018c72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c76:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c84:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c88:	88 d3                	mov    bl,dl
c0018c8a:	85 c0                	test   eax,eax
c0018c8c:	74 33                	je     c0018cc1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c8e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c91:	85 d2                	test   edx,edx
c0018c93:	74 28                	je     c0018cbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c95:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c9b:	31 ef                	xor    edi,ebp
c0018c9d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018ca3:	75 18                	jne    c0018cbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018ca5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018ca9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018caf:	75 0c                	jne    c0018cbd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018cb1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018cb7:	0f 84 d0 00 00 00    	je     c0018d8d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbf:	eb c9                	jmp    c0018c8a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018cc1:	66 81 f9 01 06       	cmp    cx,0x601
c0018cc6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018cca:	75 19                	jne    c0018ce5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018ccc:	83 ec 0c             	sub    esp,0xc
c0018ccf:	68 64 01 00 00       	push   0x164
c0018cd4:	e8 e0 ea fe ff       	call   c00077b9 <malloc>
c0018cd9:	89 c5                	mov    ebp,eax
c0018cdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cde:	e8 47 0e 00 00       	call   c0019b2a <SATABus::SATABus()>
c0018ce3:	eb 1e                	jmp    c0018d03 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018ce5:	66 81 f9 01 01       	cmp    cx,0x101
c0018cea:	75 60                	jne    c0018d4c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018cec:	83 ec 0c             	sub    esp,0xc
c0018cef:	68 70 02 00 00       	push   0x270
c0018cf4:	e8 c0 ea fe ff       	call   c00077b9 <malloc>
c0018cf9:	89 c5                	mov    ebp,eax
c0018cfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cfe:	e8 cb 02 00 00       	call   c0018fce <IDE::IDE()>
c0018d03:	58                   	pop    eax
c0018d04:	5a                   	pop    edx
c0018d05:	55                   	push   ebp
c0018d06:	56                   	push   esi
c0018d07:	e8 b8 2c ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c0018d0c:	83 ec 1c             	sub    esp,0x1c
c0018d0f:	b9 09 00 00 00       	mov    ecx,0x9
c0018d14:	fc                   	cld    
c0018d15:	89 e7                	mov    edi,esp
c0018d17:	89 de                	mov    esi,ebx
c0018d19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d1b:	55                   	push   ebp
c0018d1c:	e8 e9 2b ff ff       	call   c000b90a <Device::preOpenPCI(PCIDeviceInfo)>
c0018d21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d24:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d28:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d30:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018d38:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d43:	83 c4 4c             	add    esp,0x4c
c0018d46:	5b                   	pop    ebx
c0018d47:	5e                   	pop    esi
c0018d48:	5f                   	pop    edi
c0018d49:	5d                   	pop    ebp
c0018d4a:	ff e0                	jmp    eax
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	68 58 01 00 00       	push   0x158
c0018d54:	e8 60 ea fe ff       	call   c00077b9 <malloc>
c0018d59:	89 c5                	mov    ebp,eax
c0018d5b:	58                   	pop    eax
c0018d5c:	5a                   	pop    edx
c0018d5d:	68 4a f3 01 c0       	push   0xc001f34a
c0018d62:	55                   	push   ebp
c0018d63:	e8 fa 2e ff ff       	call   c000bc62 <DriverlessDevice::DriverlessDevice(char const*)>
c0018d68:	59                   	pop    ecx
c0018d69:	5f                   	pop    edi
c0018d6a:	55                   	push   ebp
c0018d6b:	56                   	push   esi
c0018d6c:	e8 53 2c ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c0018d71:	b9 09 00 00 00       	mov    ecx,0x9
c0018d76:	fc                   	cld    
c0018d77:	89 df                	mov    edi,ebx
c0018d79:	89 de                	mov    esi,ebx
c0018d7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d7d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d81:	83 c4 2c             	add    esp,0x2c
c0018d84:	5b                   	pop    ebx
c0018d85:	5e                   	pop    esi
c0018d86:	5f                   	pop    edi
c0018d87:	5d                   	pop    ebp
c0018d88:	e9 7d 2b ff ff       	jmp    c000b90a <Device::preOpenPCI(PCIDeviceInfo)>
c0018d8d:	83 c4 1c             	add    esp,0x1c
c0018d90:	5b                   	pop    ebx
c0018d91:	5e                   	pop    esi
c0018d92:	5f                   	pop    edi
c0018d93:	5d                   	pop    ebp
c0018d94:	c3                   	ret    
c0018d95:	90                   	nop

c0018d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d96:	55                   	push   ebp
c0018d97:	57                   	push   edi
c0018d98:	56                   	push   esi
c0018d99:	53                   	push   ebx
c0018d9a:	83 ec 68             	sub    esp,0x68
c0018d9d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018da1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018da8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018dac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018db3:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018db8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018dbc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018dc3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018dc8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018dcc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018dd1:	6a 0c                	push   0xc
c0018dd3:	57                   	push   edi
c0018dd4:	53                   	push   ebx
c0018dd5:	56                   	push   esi
c0018dd6:	55                   	push   ebp
c0018dd7:	e8 86 f8 ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ddc:	83 c4 20             	add    esp,0x20
c0018ddf:	57                   	push   edi
c0018de0:	53                   	push   ebx
c0018de1:	56                   	push   esi
c0018de2:	55                   	push   ebp
c0018de3:	e8 6e f9 ff ff       	call   c0018756 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018de8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ded:	57                   	push   edi
c0018dee:	53                   	push   ebx
c0018def:	56                   	push   esi
c0018df0:	55                   	push   ebp
c0018df1:	e8 f6 f9 ff ff       	call   c00187ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018df6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018dfa:	83 c4 14             	add    esp,0x14
c0018dfd:	6a 3c                	push   0x3c
c0018dff:	57                   	push   edi
c0018e00:	53                   	push   ebx
c0018e01:	56                   	push   esi
c0018e02:	55                   	push   ebp
c0018e03:	e8 5a f8 ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e08:	0f b6 c4             	movzx  eax,ah
c0018e0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e0f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e17:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018e1c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e22:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e2c:	83 c4 20             	add    esp,0x20
c0018e2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e34:	74 30                	je     c0018e66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e36:	31 c0                	xor    eax,eax
c0018e38:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018e3c:	7e 28                	jle    c0018e66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018e3e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e46:	39 cb                	cmp    ebx,ecx
c0018e48:	75 19                	jne    c0018e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e4a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e52:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e56:	75 0b                	jne    c0018e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e58:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e5f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e63:	40                   	inc    eax
c0018e64:	eb d2                	jmp    c0018e38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e66:	31 d2                	xor    edx,edx
c0018e68:	83 ec 0c             	sub    esp,0xc
c0018e6b:	57                   	push   edi
c0018e6c:	53                   	push   ebx
c0018e6d:	56                   	push   esi
c0018e6e:	52                   	push   edx
c0018e6f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e73:	55                   	push   ebp
c0018e74:	e8 bf f9 ff ff       	call   c0018838 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e81:	42                   	inc    edx
c0018e82:	83 c4 20             	add    esp,0x20
c0018e85:	83 fa 06             	cmp    edx,0x6
c0018e88:	75 de                	jne    c0018e68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e8a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e8f:	83 ec 0c             	sub    esp,0xc
c0018e92:	86 e0                	xchg   al,ah
c0018e94:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e99:	6a 02                	push   0x2
c0018e9b:	57                   	push   edi
c0018e9c:	53                   	push   ebx
c0018e9d:	56                   	push   esi
c0018e9e:	55                   	push   ebp
c0018e9f:	e8 be f7 ff ff       	call   c0018662 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ea4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ea9:	83 c4 20             	add    esp,0x20
c0018eac:	57                   	push   edi
c0018ead:	53                   	push   ebx
c0018eae:	56                   	push   esi
c0018eaf:	55                   	push   ebp
c0018eb0:	e8 eb f8 ff ff       	call   c00187a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018eb5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018eb9:	57                   	push   edi
c0018eba:	53                   	push   ebx
c0018ebb:	56                   	push   esi
c0018ebc:	55                   	push   ebp
c0018ebd:	e8 48 f8 ff ff       	call   c001870a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ec2:	b9 09 00 00 00       	mov    ecx,0x9
c0018ec7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018ecc:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018ed0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018ed4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018ed8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018edc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018ee0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018ee4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ee8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	fc                   	cld    
c0018ef0:	89 e7                	mov    edi,esp
c0018ef2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018ef6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ef8:	55                   	push   ebp
c0018ef9:	e8 26 fd ff ff       	call   c0018c24 <PCI::foundDevice(PCIDeviceInfo)>
c0018efe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f04:	5b                   	pop    ebx
c0018f05:	5e                   	pop    esi
c0018f06:	5f                   	pop    edi
c0018f07:	5d                   	pop    ebp
c0018f08:	c3                   	ret    
c0018f09:	90                   	nop

c0018f0a <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f0a:	55                   	push   ebp
c0018f0b:	57                   	push   edi
c0018f0c:	56                   	push   esi
c0018f0d:	53                   	push   ebx
c0018f0e:	83 ec 0c             	sub    esp,0xc
c0018f11:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f15:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f1a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f1f:	6a 00                	push   0x0
c0018f21:	56                   	push   esi
c0018f22:	57                   	push   edi
c0018f23:	55                   	push   ebp
c0018f24:	e8 e1 f7 ff ff       	call   c001870a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f29:	6a 00                	push   0x0
c0018f2b:	56                   	push   esi
c0018f2c:	57                   	push   edi
c0018f2d:	55                   	push   ebp
c0018f2e:	e8 63 fe ff ff       	call   c0018d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f33:	83 c4 20             	add    esp,0x20
c0018f36:	6a 00                	push   0x0
c0018f38:	56                   	push   esi
c0018f39:	57                   	push   edi
c0018f3a:	55                   	push   ebp
c0018f3b:	e8 ee f7 ff ff       	call   c001872e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f40:	83 c4 10             	add    esp,0x10
c0018f43:	84 c0                	test   al,al
c0018f45:	79 27                	jns    c0018f6e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f47:	bb 01 00 00 00       	mov    ebx,0x1
c0018f4c:	53                   	push   ebx
c0018f4d:	56                   	push   esi
c0018f4e:	57                   	push   edi
c0018f4f:	55                   	push   ebp
c0018f50:	e8 b5 f7 ff ff       	call   c001870a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f55:	83 c4 10             	add    esp,0x10
c0018f58:	66 40                	inc    ax
c0018f5a:	74 0c                	je     c0018f68 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f5c:	53                   	push   ebx
c0018f5d:	56                   	push   esi
c0018f5e:	57                   	push   edi
c0018f5f:	55                   	push   ebp
c0018f60:	e8 31 fe ff ff       	call   c0018d96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	43                   	inc    ebx
c0018f69:	83 fb 08             	cmp    ebx,0x8
c0018f6c:	75 de                	jne    c0018f4c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f6e:	83 c4 0c             	add    esp,0xc
c0018f71:	5b                   	pop    ebx
c0018f72:	5e                   	pop    esi
c0018f73:	5f                   	pop    edi
c0018f74:	5d                   	pop    ebp
c0018f75:	c3                   	ret    

c0018f76 <PCI::detect()>:
c0018f76:	56                   	push   esi
c0018f77:	53                   	push   ebx
c0018f78:	53                   	push   ebx
c0018f79:	31 db                	xor    ebx,ebx
c0018f7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f7f:	6a 00                	push   0x0
c0018f81:	6a 00                	push   0x0
c0018f83:	6a 00                	push   0x0
c0018f85:	56                   	push   esi
c0018f86:	e8 a3 f7 ff ff       	call   c001872e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f8b:	83 c4 10             	add    esp,0x10
c0018f8e:	a8 80                	test   al,0x80
c0018f90:	75 21                	jne    c0018fb3 <PCI::detect()+0x3d>
c0018f92:	51                   	push   ecx
c0018f93:	51                   	push   ecx
c0018f94:	6a 00                	push   0x0
c0018f96:	56                   	push   esi
c0018f97:	e8 62 fc ff ff       	call   c0018bfe <PCI::checkBus(unsigned char)>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	eb 24                	jmp    c0018fc5 <PCI::detect()+0x4f>
c0018fa1:	52                   	push   edx
c0018fa2:	52                   	push   edx
c0018fa3:	53                   	push   ebx
c0018fa4:	43                   	inc    ebx
c0018fa5:	56                   	push   esi
c0018fa6:	e8 53 fc ff ff       	call   c0018bfe <PCI::checkBus(unsigned char)>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	83 fb 08             	cmp    ebx,0x8
c0018fb1:	74 12                	je     c0018fc5 <PCI::detect()+0x4f>
c0018fb3:	53                   	push   ebx
c0018fb4:	6a 00                	push   0x0
c0018fb6:	6a 00                	push   0x0
c0018fb8:	56                   	push   esi
c0018fb9:	e8 4c f7 ff ff       	call   c001870a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fbe:	83 c4 10             	add    esp,0x10
c0018fc1:	66 40                	inc    ax
c0018fc3:	74 dc                	je     c0018fa1 <PCI::detect()+0x2b>
c0018fc5:	58                   	pop    eax
c0018fc6:	5b                   	pop    ebx
c0018fc7:	5e                   	pop    esi
c0018fc8:	c3                   	ret    
c0018fc9:	90                   	nop

c0018fca <IDE::close(int, int, void*)>:
c0018fca:	83 c8 ff             	or     eax,0xffffffff
c0018fcd:	c3                   	ret    

c0018fce <IDE::IDE()>:
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd5:	83 ec 08             	sub    esp,0x8
c0018fd8:	68 90 f3 01 c0       	push   0xc001f390
c0018fdd:	50                   	push   eax
c0018fde:	e8 25 2d ff ff       	call   c000bd08 <HardDiskController::HardDiskController(char const*)>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	ba 20 f4 01 c0       	mov    edx,0xc001f420
c0018feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fef:	89 10                	mov    DWORD PTR [eax],edx
c0018ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018ffc:	90                   	nop
c0018ffd:	83 c4 0c             	add    esp,0xc
c0019000:	c3                   	ret    
c0019001:	90                   	nop

c0019002 <IDE::prepareInterrupt(unsigned char)>:
c0019002:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019007:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001900b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019013:	c3                   	ret    

c0019014 <selectDrive(unsigned char, unsigned char)>:
c0019014:	c3                   	ret    
c0019015:	90                   	nop

c0019016 <IDE::getBase(unsigned char)>:
c0019016:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001901b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001901f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019027:	c3                   	ret    

c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019028:	55                   	push   ebp
c0019029:	57                   	push   edi
c001902a:	56                   	push   esi
c001902b:	53                   	push   ebx
c001902c:	83 ec 1c             	sub    esp,0x1c
c001902f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019033:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019037:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001903a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001903e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019042:	80 f9 03             	cmp    cl,0x3
c0019045:	77 51                	ja     c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019047:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001904b:	0f b6 f2             	movzx  esi,dl
c001904e:	0f b6 db             	movzx  ebx,bl
c0019051:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019054:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019058:	83 ca 80             	or     edx,0xffffff80
c001905b:	0f b6 d2             	movzx  edx,dl
c001905e:	52                   	push   edx
c001905f:	6a 0c                	push   0xc
c0019061:	56                   	push   esi
c0019062:	57                   	push   edi
c0019063:	e8 c0 ff ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019068:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001906d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019071:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019075:	ee                   	out    dx,al
c0019076:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001907b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001907f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019083:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019087:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001908f:	83 c4 2c             	add    esp,0x2c
c0019092:	5b                   	pop    ebx
c0019093:	5e                   	pop    esi
c0019094:	5f                   	pop    edi
c0019095:	5d                   	pop    ebp
c0019096:	eb 90                	jmp    c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019098:	80 fb 07             	cmp    bl,0x7
c001909b:	77 12                	ja     c00190af <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001909d:	0f b6 d2             	movzx  edx,dl
c00190a0:	0f b6 db             	movzx  ebx,bl
c00190a3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00190ab:	89 da                	mov    edx,ebx
c00190ad:	eb 2f                	jmp    c00190de <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190af:	80 fb 0d             	cmp    bl,0xd
c00190b2:	77 13                	ja     c00190c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00190b4:	0f b6 d2             	movzx  edx,dl
c00190b7:	0f b6 db             	movzx  ebx,bl
c00190ba:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00190c1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00190c5:	eb 17                	jmp    c00190de <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00190c7:	80 fb 15             	cmp    bl,0x15
c00190ca:	77 13                	ja     c00190df <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00190cc:	0f b6 d2             	movzx  edx,dl
c00190cf:	0f b6 db             	movzx  ebx,bl
c00190d2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00190da:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00190de:	ee                   	out    dx,al
c00190df:	83 c4 1c             	add    esp,0x1c
c00190e2:	5b                   	pop    ebx
c00190e3:	5e                   	pop    esi
c00190e4:	5f                   	pop    edi
c00190e5:	5d                   	pop    ebp
c00190e6:	c3                   	ret    
c00190e7:	90                   	nop

c00190e8 <IDE::read(unsigned char, unsigned char)>:
c00190e8:	55                   	push   ebp
c00190e9:	57                   	push   edi
c00190ea:	56                   	push   esi
c00190eb:	53                   	push   ebx
c00190ec:	83 ec 1c             	sub    esp,0x1c
c00190ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190f7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190fa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190fe:	3c 03                	cmp    al,0x3
c0019100:	77 43                	ja     c0019145 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019102:	0f b6 f2             	movzx  esi,dl
c0019105:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019108:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001910c:	83 c8 80             	or     eax,0xffffff80
c001910f:	0f b6 c0             	movzx  eax,al
c0019112:	50                   	push   eax
c0019113:	6a 0c                	push   0xc
c0019115:	56                   	push   esi
c0019116:	57                   	push   edi
c0019117:	e8 0c ff ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001911c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019121:	0f b6 c3             	movzx  eax,bl
c0019124:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019128:	ec                   	in     al,dx
c0019129:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001912d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019132:	52                   	push   edx
c0019133:	6a 0c                	push   0xc
c0019135:	56                   	push   esi
c0019136:	57                   	push   edi
c0019137:	e8 ec fe ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001913c:	83 c4 20             	add    esp,0x20
c001913f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019143:	eb 49                	jmp    c001918e <IDE::read(unsigned char, unsigned char)+0xa6>
c0019145:	80 fb 07             	cmp    bl,0x7
c0019148:	77 12                	ja     c001915c <IDE::read(unsigned char, unsigned char)+0x74>
c001914a:	0f b6 d2             	movzx  edx,dl
c001914d:	0f b6 c3             	movzx  eax,bl
c0019150:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019158:	89 c2                	mov    edx,eax
c001915a:	eb 31                	jmp    c001918d <IDE::read(unsigned char, unsigned char)+0xa5>
c001915c:	80 fb 0d             	cmp    bl,0xd
c001915f:	77 13                	ja     c0019174 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019161:	0f b6 d2             	movzx  edx,dl
c0019164:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001916b:	0f b6 d3             	movzx  edx,bl
c001916e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019172:	eb 19                	jmp    c001918d <IDE::read(unsigned char, unsigned char)+0xa5>
c0019174:	31 c0                	xor    eax,eax
c0019176:	80 fb 15             	cmp    bl,0x15
c0019179:	77 13                	ja     c001918e <IDE::read(unsigned char, unsigned char)+0xa6>
c001917b:	0f b6 d2             	movzx  edx,dl
c001917e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019186:	0f b6 d3             	movzx  edx,bl
c0019189:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001918d:	ec                   	in     al,dx
c001918e:	83 c4 1c             	add    esp,0x1c
c0019191:	5b                   	pop    ebx
c0019192:	5e                   	pop    esi
c0019193:	5f                   	pop    edi
c0019194:	5d                   	pop    ebp
c0019195:	c3                   	ret    

c0019196 <IDE::waitInterrupt(unsigned char)>:
c0019196:	57                   	push   edi
c0019197:	56                   	push   esi
c0019198:	31 f6                	xor    esi,esi
c001919a:	53                   	push   ebx
c001919b:	83 ec 10             	sub    esp,0x10
c001919e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00191a2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00191a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00191aa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00191af:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00191b6:	84 db                	test   bl,bl
c00191b8:	75 33                	jne    c00191ed <IDE::waitInterrupt(unsigned char)+0x57>
c00191ba:	52                   	push   edx
c00191bb:	6a 0c                	push   0xc
c00191bd:	50                   	push   eax
c00191be:	57                   	push   edi
c00191bf:	e8 24 ff ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00191c4:	83 c4 10             	add    esp,0x10
c00191c7:	a8 01                	test   al,0x1
c00191c9:	75 2a                	jne    c00191f5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00191cb:	f7 c6 04 00 00 00    	test   esi,0x4
c00191d1:	75 12                	jne    c00191e5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00191d3:	83 fe 32             	cmp    esi,0x32
c00191d6:	7e 0d                	jle    c00191e5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00191d8:	83 ec 0c             	sub    esp,0xc
c00191db:	6a 64                	push   0x64
c00191dd:	e8 1a a9 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	83 fe 3c             	cmp    esi,0x3c
c00191e8:	74 0b                	je     c00191f5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00191ea:	46                   	inc    esi
c00191eb:	eb bd                	jmp    c00191aa <IDE::waitInterrupt(unsigned char)+0x14>
c00191ed:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	88 d8                	mov    al,bl
c00191fa:	5b                   	pop    ebx
c00191fb:	5e                   	pop    esi
c00191fc:	5f                   	pop    edi
c00191fd:	c3                   	ret    

c00191fe <ideChannel0IRQHandler(regs*, void*)>:
c00191fe:	83 ec 10             	sub    esp,0x10
c0019201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019205:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001920c:	6a 07                	push   0x7
c001920e:	6a 00                	push   0x0
c0019210:	50                   	push   eax
c0019211:	e8 d2 fe ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019216:	83 c4 1c             	add    esp,0x1c
c0019219:	c3                   	ret    

c001921a <ideChannel1IRQHandler(regs*, void*)>:
c001921a:	83 ec 10             	sub    esp,0x10
c001921d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019221:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019228:	6a 07                	push   0x7
c001922a:	6a 01                	push   0x1
c001922c:	50                   	push   eax
c001922d:	e8 b6 fe ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019232:	83 c4 1c             	add    esp,0x1c
c0019235:	c3                   	ret    

c0019236 <IDE::enableIRQs(unsigned char, bool)>:
c0019236:	57                   	push   edi
c0019237:	56                   	push   esi
c0019238:	be 04 00 00 00       	mov    esi,0x4
c001923d:	53                   	push   ebx
c001923e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019243:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019247:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001924c:	0f 94 c0             	sete   al
c001924f:	01 c0                	add    eax,eax
c0019251:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019258:	0f b6 c0             	movzx  eax,al
c001925b:	50                   	push   eax
c001925c:	6a 0c                	push   0xc
c001925e:	57                   	push   edi
c001925f:	53                   	push   ebx
c0019260:	e8 c3 fd ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	50                   	push   eax
c0019269:	6a 0c                	push   0xc
c001926b:	57                   	push   edi
c001926c:	53                   	push   ebx
c001926d:	e8 76 fe ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	4e                   	dec    esi
c0019276:	75 f0                	jne    c0019268 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019278:	5b                   	pop    ebx
c0019279:	5e                   	pop    esi
c001927a:	5f                   	pop    edi
c001927b:	c3                   	ret    

c001927c <IDE::open(int, int, void*)>:
c001927c:	55                   	push   ebp
c001927d:	57                   	push   edi
c001927e:	56                   	push   esi
c001927f:	53                   	push   ebx
c0019280:	83 ec 1c             	sub    esp,0x1c
c0019283:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019287:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019290:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019299:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00192a0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00192a7:	0f 85 b0 02 00 00    	jne    c001955d <IDE::open(int, int, void*)+0x2e1>
c00192ad:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00192b3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00192b7:	83 e0 7f             	and    eax,0x7f
c00192ba:	3c 05                	cmp    al,0x5
c00192bc:	74 04                	je     c00192c2 <IDE::open(int, int, void*)+0x46>
c00192be:	3c 0f                	cmp    al,0xf
c00192c0:	75 32                	jne    c00192f4 <IDE::open(int, int, void*)+0x78>
c00192c2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00192c8:	83 e0 fc             	and    eax,0xfffffffc
c00192cb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00192d2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00192d8:	83 e0 fc             	and    eax,0xfffffffc
c00192db:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00192e2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00192e8:	83 e0 fc             	and    eax,0xfffffffc
c00192eb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192f2:	eb 14                	jmp    c0019308 <IDE::open(int, int, void*)+0x8c>
c00192f4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192fe:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019308:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001930f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001931a:	89 c6                	mov    esi,eax
c001931c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019321:	c1 e6 10             	shl    esi,0x10
c0019324:	89 e8                	mov    eax,ebp
c0019326:	89 fa                	mov    edx,edi
c0019328:	c1 e0 0b             	shl    eax,0xb
c001932b:	09 f0                	or     eax,esi
c001932d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019334:	c1 e6 08             	shl    esi,0x8
c0019337:	09 c6                	or     esi,eax
c0019339:	89 f0                	mov    eax,esi
c001933b:	0d 08 00 00 80       	or     eax,0x80000008
c0019340:	ef                   	out    dx,eax
c0019341:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019346:	89 ca                	mov    edx,ecx
c0019348:	ed                   	in     eax,dx
c0019349:	c1 e8 10             	shr    eax,0x10
c001934c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019351:	0f 84 f5 00 00 00    	je     c001944c <IDE::open(int, int, void*)+0x1d0>
c0019357:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001935d:	89 fa                	mov    edx,edi
c001935f:	89 f0                	mov    eax,esi
c0019361:	ef                   	out    dx,eax
c0019362:	b0 fe                	mov    al,0xfe
c0019364:	89 ca                	mov    edx,ecx
c0019366:	ee                   	out    dx,al
c0019367:	89 f0                	mov    eax,esi
c0019369:	89 fa                	mov    edx,edi
c001936b:	ef                   	out    dx,eax
c001936c:	89 ca                	mov    edx,ecx
c001936e:	ed                   	in     eax,dx
c001936f:	3c fe                	cmp    al,0xfe
c0019371:	0f 85 a9 00 00 00    	jne    c0019420 <IDE::open(int, int, void*)+0x1a4>
c0019377:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c001937d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019384:	74 33                	je     c00193b9 <IDE::open(int, int, void*)+0x13d>
c0019386:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001938c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019390:	40                   	inc    eax
c0019391:	83 ec 0c             	sub    esp,0xc
c0019394:	0f b6 c0             	movzx  eax,al
c0019397:	50                   	push   eax
c0019398:	55                   	push   ebp
c0019399:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001939d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00193a3:	51                   	push   ecx
c00193a4:	e8 77 53 ff ff       	call   c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00193a9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00193ae:	83 c4 1c             	add    esp,0x1c
c00193b1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00193b7:	eb 0a                	jmp    c00193c3 <IDE::open(int, int, void*)+0x147>
c00193b9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00193c3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00193ca:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00193d1:	c1 e1 10             	shl    ecx,0x10
c00193d4:	c1 e0 08             	shl    eax,0x8
c00193d7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193dc:	09 c1                	or     ecx,eax
c00193de:	89 fa                	mov    edx,edi
c00193e0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00193e7:	c1 e0 0b             	shl    eax,0xb
c00193ea:	09 c1                	or     ecx,eax
c00193ec:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00193f2:	89 c8                	mov    eax,ecx
c00193f4:	ef                   	out    dx,eax
c00193f5:	be fc 0c 00 00       	mov    esi,0xcfc
c00193fa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019400:	89 f2                	mov    edx,esi
c0019402:	ee                   	out    dx,al
c0019403:	89 c8                	mov    eax,ecx
c0019405:	89 fa                	mov    edx,edi
c0019407:	ef                   	out    dx,eax
c0019408:	89 f2                	mov    edx,esi
c001940a:	ed                   	in     eax,dx
c001940b:	0f b6 c0             	movzx  eax,al
c001940e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019414:	74 46                	je     c001945c <IDE::open(int, int, void*)+0x1e0>
c0019416:	83 ec 0c             	sub    esp,0xc
c0019419:	68 a8 f3 01 c0       	push   0xc001f3a8
c001941e:	eb 34                	jmp    c0019454 <IDE::open(int, int, void*)+0x1d8>
c0019420:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019429:	75 17                	jne    c0019442 <IDE::open(int, int, void*)+0x1c6>
c001942b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019430:	74 07                	je     c0019439 <IDE::open(int, int, void*)+0x1bd>
c0019432:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019437:	75 09                	jne    c0019442 <IDE::open(int, int, void*)+0x1c6>
c0019439:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019440:	eb 1a                	jmp    c001945c <IDE::open(int, int, void*)+0x1e0>
c0019442:	83 ec 0c             	sub    esp,0xc
c0019445:	68 b0 f3 01 c0       	push   0xc001f3b0
c001944a:	eb 08                	jmp    c0019454 <IDE::open(int, int, void*)+0x1d8>
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	68 e1 f3 01 c0       	push   0xc001f3e1
c0019454:	e8 ae 6d ff ff       	call   c0010207 <KePanic(char const*)>
c0019459:	83 c4 10             	add    esp,0x10
c001945c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019463:	79 1a                	jns    c001947f <IDE::open(int, int, void*)+0x203>
c0019465:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001946b:	83 e0 fc             	and    eax,0xfffffffc
c001946e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019475:	83 c0 08             	add    eax,0x8
c0019478:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001947f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019485:	89 c2                	mov    edx,eax
c0019487:	83 e2 0f             	and    edx,0xf
c001948a:	66 83 fa 08          	cmp    dx,0x8
c001948e:	75 0a                	jne    c001949a <IDE::open(int, int, void*)+0x21e>
c0019490:	83 e8 02             	sub    eax,0x2
c0019493:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001949a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00194a0:	89 c2                	mov    edx,eax
c00194a2:	83 e2 0f             	and    edx,0xf
c00194a5:	66 83 fa 08          	cmp    dx,0x8
c00194a9:	75 0a                	jne    c00194b5 <IDE::open(int, int, void*)+0x239>
c00194ab:	83 e8 02             	sub    eax,0x2
c00194ae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00194b5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194bc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00194c3:	89 d0                	mov    eax,edx
c00194c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194c8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194cc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00194d0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00194d3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194d8:	0f b6 c9             	movzx  ecx,cl
c00194db:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00194e2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194e5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194e9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00194ed:	8d 50 02             	lea    edx,[eax+0x2]
c00194f0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194f5:	0f b6 d2             	movzx  edx,dl
c00194f8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194fe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019501:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019505:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019509:	8d 48 03             	lea    ecx,[eax+0x3]
c001950c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019511:	0f b6 c9             	movzx  ecx,cl
c0019514:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001951a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001951d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019521:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019525:	8d 50 04             	lea    edx,[eax+0x4]
c0019528:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001952e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019533:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001953a:	66 85 f6             	test   si,si
c001953d:	74 5b                	je     c001959a <IDE::open(int, int, void*)+0x31e>
c001953f:	0f b6 d2             	movzx  edx,dl
c0019542:	83 c0 05             	add    eax,0x5
c0019545:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019548:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001954c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019550:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019556:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001955b:	eb 3d                	jmp    c001959a <IDE::open(int, int, void*)+0x31e>
c001955d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019563:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001956a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019571:	66 05 06 02          	add    ax,0x206
c0019575:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001957c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019583:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001958a:	66 05 06 02          	add    ax,0x206
c001958e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019595:	e9 e5 fe ff ff       	jmp    c001947f <IDE::open(int, int, void*)+0x203>
c001959a:	50                   	push   eax
c001959b:	50                   	push   eax
c001959c:	6a 00                	push   0x0
c001959e:	53                   	push   ebx
c001959f:	e8 5e fa ff ff       	call   c0019002 <IDE::prepareInterrupt(unsigned char)>
c00195a4:	5a                   	pop    edx
c00195a5:	59                   	pop    ecx
c00195a6:	6a 01                	push   0x1
c00195a8:	53                   	push   ebx
c00195a9:	e8 54 fa ff ff       	call   c0019002 <IDE::prepareInterrupt(unsigned char)>
c00195ae:	83 c4 0c             	add    esp,0xc
c00195b1:	6a 00                	push   0x0
c00195b3:	6a 00                	push   0x0
c00195b5:	53                   	push   ebx
c00195b6:	e8 7b fc ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c00195bb:	83 c4 0c             	add    esp,0xc
c00195be:	6a 00                	push   0x0
c00195c0:	6a 01                	push   0x1
c00195c2:	53                   	push   ebx
c00195c3:	e8 6e fc ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00195d2:	74 34                	je     c0019608 <IDE::open(int, int, void*)+0x38c>
c00195d4:	83 ec 0c             	sub    esp,0xc
c00195d7:	53                   	push   ebx
c00195d8:	6a 01                	push   0x1
c00195da:	68 fe 91 01 c0       	push   0xc00191fe
c00195df:	6a 0e                	push   0xe
c00195e1:	53                   	push   ebx
c00195e2:	e8 89 23 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195e7:	83 c4 14             	add    esp,0x14
c00195ea:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00195f0:	53                   	push   ebx
c00195f1:	6a 01                	push   0x1
c00195f3:	68 1a 92 01 c0       	push   0xc001921a
c00195f8:	6a 0f                	push   0xf
c00195fa:	53                   	push   ebx
c00195fb:	e8 70 23 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019600:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019606:	eb 38                	jmp    c0019640 <IDE::open(int, int, void*)+0x3c4>
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019615:	53                   	push   ebx
c0019616:	6a 00                	push   0x0
c0019618:	68 fe 91 01 c0       	push   0xc00191fe
c001961d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019623:	53                   	push   ebx
c0019624:	e8 47 23 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019629:	83 c4 14             	add    esp,0x14
c001962c:	53                   	push   ebx
c001962d:	6a 00                	push   0x0
c001962f:	68 1a 92 01 c0       	push   0xc001921a
c0019634:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001963a:	53                   	push   ebx
c001963b:	e8 30 23 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019640:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019642:	83 c4 20             	add    esp,0x20
c0019645:	83 ec 0c             	sub    esp,0xc
c0019648:	53                   	push   ebx
c0019649:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001964c:	83 c4 0c             	add    esp,0xc
c001964f:	6a 07                	push   0x7
c0019651:	6a 00                	push   0x0
c0019653:	53                   	push   ebx
c0019654:	e8 8f fa ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019659:	83 c4 0c             	add    esp,0xc
c001965c:	6a 07                	push   0x7
c001965e:	6a 01                	push   0x1
c0019660:	53                   	push   ebx
c0019661:	e8 82 fa ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019666:	83 c4 0c             	add    esp,0xc
c0019669:	6a 01                	push   0x1
c001966b:	6a 00                	push   0x0
c001966d:	53                   	push   ebx
c001966e:	e8 c3 fb ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c0019673:	83 c4 0c             	add    esp,0xc
c0019676:	6a 01                	push   0x1
c0019678:	6a 01                	push   0x1
c001967a:	53                   	push   ebx
c001967b:	e8 b6 fb ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c0019680:	83 c4 2c             	add    esp,0x2c
c0019683:	31 c0                	xor    eax,eax
c0019685:	5b                   	pop    ebx
c0019686:	5e                   	pop    esi
c0019687:	5f                   	pop    edi
c0019688:	5d                   	pop    ebp
c0019689:	c3                   	ret    

c001968a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001968a:	55                   	push   ebp
c001968b:	57                   	push   edi
c001968c:	56                   	push   esi
c001968d:	53                   	push   ebx
c001968e:	83 ec 1c             	sub    esp,0x1c
c0019691:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019695:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019699:	8d 50 f8             	lea    edx,[eax-0x8]
c001969c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00196a0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00196a4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196a8:	80 fa 03             	cmp    dl,0x3
c00196ab:	77 5d                	ja     c001970a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00196ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196b5:	0f b6 db             	movzx  ebx,bl
c00196b8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00196bb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00196bf:	83 ca 80             	or     edx,0xffffff80
c00196c2:	0f b6 d2             	movzx  edx,dl
c00196c5:	52                   	push   edx
c00196c6:	6a 0c                	push   0xc
c00196c8:	53                   	push   ebx
c00196c9:	56                   	push   esi
c00196ca:	e8 59 f9 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196cf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00196d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196dc:	0f b6 c0             	movzx  eax,al
c00196df:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00196e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196e5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00196ea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00196ee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00196f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196f6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196fe:	83 c4 2c             	add    esp,0x2c
c0019701:	5b                   	pop    ebx
c0019702:	5e                   	pop    esi
c0019703:	5f                   	pop    edi
c0019704:	5d                   	pop    ebp
c0019705:	e9 1e f9 ff ff       	jmp    c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001970a:	3c 07                	cmp    al,0x7
c001970c:	77 10                	ja     c001971e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001970e:	0f b6 db             	movzx  ebx,bl
c0019711:	0f b6 d0             	movzx  edx,al
c0019714:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001971c:	eb 2d                	jmp    c001974b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001971e:	3c 0d                	cmp    al,0xd
c0019720:	77 13                	ja     c0019735 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019722:	0f b6 db             	movzx  ebx,bl
c0019725:	0f b6 c0             	movzx  eax,al
c0019728:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001972f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019733:	eb 16                	jmp    c001974b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019735:	3c 15                	cmp    al,0x15
c0019737:	77 14                	ja     c001974d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019739:	0f b6 db             	movzx  ebx,bl
c001973c:	0f b6 c0             	movzx  eax,al
c001973f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019747:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001974b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001974d:	83 c4 1c             	add    esp,0x1c
c0019750:	5b                   	pop    ebx
c0019751:	5e                   	pop    esi
c0019752:	5f                   	pop    edi
c0019753:	5d                   	pop    ebp
c0019754:	c3                   	ret    
c0019755:	90                   	nop

c0019756 <IDE::detect()>:
c0019756:	55                   	push   ebp
c0019757:	57                   	push   edi
c0019758:	56                   	push   esi
c0019759:	53                   	push   ebx
c001975a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019760:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019767:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001976e:	0f 85 97 02 00 00    	jne    c0019a0b <IDE::detect()+0x2b5>
c0019774:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001977b:	31 f6                	xor    esi,esi
c001977d:	31 ed                	xor    ebp,ebp
c001977f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019787:	89 e8                	mov    eax,ebp
c0019789:	c1 e0 06             	shl    eax,0x6
c001978c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019794:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019798:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001979c:	c1 e0 04             	shl    eax,0x4
c001979f:	83 c8 a0             	or     eax,0xffffffa0
c00197a2:	0f b6 c0             	movzx  eax,al
c00197a5:	50                   	push   eax
c00197a6:	6a 06                	push   0x6
c00197a8:	56                   	push   esi
c00197a9:	53                   	push   ebx
c00197aa:	e8 79 f8 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197af:	83 c4 0c             	add    esp,0xc
c00197b2:	6a 0c                	push   0xc
c00197b4:	56                   	push   esi
c00197b5:	53                   	push   ebx
c00197b6:	e8 2d f9 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00197bb:	83 c4 0c             	add    esp,0xc
c00197be:	6a 0c                	push   0xc
c00197c0:	56                   	push   esi
c00197c1:	53                   	push   ebx
c00197c2:	e8 21 f9 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00197c7:	83 c4 0c             	add    esp,0xc
c00197ca:	6a 0c                	push   0xc
c00197cc:	56                   	push   esi
c00197cd:	53                   	push   ebx
c00197ce:	e8 15 f9 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00197d3:	83 c4 0c             	add    esp,0xc
c00197d6:	6a 0c                	push   0xc
c00197d8:	56                   	push   esi
c00197d9:	53                   	push   ebx
c00197da:	e8 09 f9 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00197df:	68 ec 00 00 00       	push   0xec
c00197e4:	6a 07                	push   0x7
c00197e6:	56                   	push   esi
c00197e7:	53                   	push   ebx
c00197e8:	e8 3b f8 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197ed:	83 c4 1c             	add    esp,0x1c
c00197f0:	6a 0c                	push   0xc
c00197f2:	56                   	push   esi
c00197f3:	53                   	push   ebx
c00197f4:	e8 ef f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00197f9:	83 c4 0c             	add    esp,0xc
c00197fc:	6a 0c                	push   0xc
c00197fe:	56                   	push   esi
c00197ff:	53                   	push   ebx
c0019800:	e8 e3 f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019805:	83 c4 0c             	add    esp,0xc
c0019808:	6a 0c                	push   0xc
c001980a:	56                   	push   esi
c001980b:	53                   	push   ebx
c001980c:	e8 d7 f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019811:	83 c4 0c             	add    esp,0xc
c0019814:	6a 0c                	push   0xc
c0019816:	56                   	push   esi
c0019817:	53                   	push   ebx
c0019818:	e8 cb f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c001981d:	83 c4 0c             	add    esp,0xc
c0019820:	6a 0c                	push   0xc
c0019822:	56                   	push   esi
c0019823:	53                   	push   ebx
c0019824:	e8 bf f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	84 c0                	test   al,al
c001982e:	0f 84 5f 01 00 00    	je     c0019993 <IDE::detect()+0x23d>
c0019834:	31 ff                	xor    edi,edi
c0019836:	50                   	push   eax
c0019837:	6a 0c                	push   0xc
c0019839:	56                   	push   esi
c001983a:	53                   	push   ebx
c001983b:	e8 a8 f8 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	a8 01                	test   al,0x1
c0019845:	0f 85 69 01 00 00    	jne    c00199b4 <IDE::detect()+0x25e>
c001984b:	84 c0                	test   al,al
c001984d:	78 04                	js     c0019853 <IDE::detect()+0xfd>
c001984f:	a8 08                	test   al,0x8
c0019851:	75 23                	jne    c0019876 <IDE::detect()+0x120>
c0019853:	47                   	inc    edi
c0019854:	81 ff 17 01 00 00    	cmp    edi,0x117
c001985a:	7e da                	jle    c0019836 <IDE::detect()+0xe0>
c001985c:	83 ec 0c             	sub    esp,0xc
c001985f:	6a 32                	push   0x32
c0019861:	e8 96 a2 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c0019866:	83 c4 10             	add    esp,0x10
c0019869:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001986f:	75 c5                	jne    c0019836 <IDE::detect()+0xe0>
c0019871:	e9 3e 01 00 00       	jmp    c00199b4 <IDE::detect()+0x25e>
c0019876:	31 c9                	xor    ecx,ecx
c0019878:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001987c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	68 80 00 00 00       	push   0x80
c0019888:	57                   	push   edi
c0019889:	6a 00                	push   0x0
c001988b:	56                   	push   esi
c001988c:	53                   	push   ebx
c001988d:	e8 f8 fd ff ff       	call   c001968a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019892:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019897:	89 e8                	mov    eax,ebp
c0019899:	89 d1                	mov    ecx,edx
c001989b:	c1 e0 06             	shl    eax,0x6
c001989e:	01 d8                	add    eax,ebx
c00198a0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00198a7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00198ae:	89 f2                	mov    edx,esi
c00198b0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00198b6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00198ba:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00198c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00198c4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00198cb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00198d3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00198da:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00198e2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00198e8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00198ef:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00198f5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198f9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198fd:	83 c4 20             	add    esp,0x20
c0019900:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019903:	83 c0 02             	add    eax,0x2
c0019906:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001990c:	83 c7 02             	add    edi,0x2
c001990f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019912:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019918:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001991c:	75 e2                	jne    c0019900 <IDE::detect()+0x1aa>
c001991e:	89 e8                	mov    eax,ebp
c0019920:	c1 e0 06             	shl    eax,0x6
c0019923:	01 d8                	add    eax,ebx
c0019925:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001992b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019932:	66 c1 ea 09          	shr    dx,0x9
c0019936:	83 e2 01             	and    edx,0x1
c0019939:	84 c9                	test   cl,cl
c001993b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019941:	75 22                	jne    c0019965 <IDE::detect()+0x20f>
c0019943:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001994a:	74 46                	je     c0019992 <IDE::detect()+0x23c>
c001994c:	83 ec 0c             	sub    esp,0xc
c001994f:	68 7c 01 00 00       	push   0x17c
c0019954:	e8 60 de fe ff       	call   c00077b9 <malloc>
c0019959:	89 c7                	mov    edi,eax
c001995b:	89 04 24             	mov    DWORD PTR [esp],eax
c001995e:	e8 11 05 00 00       	call   c0019e74 <ATA::ATA()>
c0019963:	eb 17                	jmp    c001997c <IDE::detect()+0x226>
c0019965:	83 ec 0c             	sub    esp,0xc
c0019968:	68 84 01 00 00       	push   0x184
c001996d:	e8 47 de fe ff       	call   c00077b9 <malloc>
c0019972:	89 c7                	mov    edi,eax
c0019974:	89 04 24             	mov    DWORD PTR [esp],eax
c0019977:	e8 f0 0a 00 00       	call   c001a46c <ATAPI::ATAPI()>
c001997c:	5a                   	pop    edx
c001997d:	59                   	pop    ecx
c001997e:	57                   	push   edi
c001997f:	53                   	push   ebx
c0019980:	e8 3f 20 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c0019985:	8b 07                	mov    eax,DWORD PTR [edi]
c0019987:	53                   	push   ebx
c0019988:	55                   	push   ebp
c0019989:	6a 00                	push   0x0
c001998b:	57                   	push   edi
c001998c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001998f:	83 c4 20             	add    esp,0x20
c0019992:	45                   	inc    ebp
c0019993:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019998:	74 0d                	je     c00199a7 <IDE::detect()+0x251>
c001999a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00199a2:	e9 e0 fd ff ff       	jmp    c0019787 <IDE::detect()+0x31>
c00199a7:	4e                   	dec    esi
c00199a8:	74 61                	je     c0019a0b <IDE::detect()+0x2b5>
c00199aa:	be 01 00 00 00       	mov    esi,0x1
c00199af:	e9 cb fd ff ff       	jmp    c001977f <IDE::detect()+0x29>
c00199b4:	50                   	push   eax
c00199b5:	6a 04                	push   0x4
c00199b7:	56                   	push   esi
c00199b8:	53                   	push   ebx
c00199b9:	e8 2a f7 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00199be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00199c2:	83 c4 0c             	add    esp,0xc
c00199c5:	6a 05                	push   0x5
c00199c7:	56                   	push   esi
c00199c8:	53                   	push   ebx
c00199c9:	e8 1a f7 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c00199ce:	83 c4 10             	add    esp,0x10
c00199d1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00199d5:	80 fa 14             	cmp    dl,0x14
c00199d8:	75 04                	jne    c00199de <IDE::detect()+0x288>
c00199da:	3c eb                	cmp    al,0xeb
c00199dc:	eb 07                	jmp    c00199e5 <IDE::detect()+0x28f>
c00199de:	3c 96                	cmp    al,0x96
c00199e0:	75 b1                	jne    c0019993 <IDE::detect()+0x23d>
c00199e2:	80 fa 69             	cmp    dl,0x69
c00199e5:	75 ac                	jne    c0019993 <IDE::detect()+0x23d>
c00199e7:	68 a1 00 00 00       	push   0xa1
c00199ec:	6a 07                	push   0x7
c00199ee:	56                   	push   esi
c00199ef:	53                   	push   ebx
c00199f0:	e8 33 f6 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199f5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199fc:	e8 fb a0 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c0019a01:	83 c4 10             	add    esp,0x10
c0019a04:	b1 01                	mov    cl,0x1
c0019a06:	e9 6d fe ff ff       	jmp    c0019878 <IDE::detect()+0x122>
c0019a0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a11:	5b                   	pop    ebx
c0019a12:	5e                   	pop    esi
c0019a13:	5f                   	pop    edi
c0019a14:	5d                   	pop    ebp
c0019a15:	c3                   	ret    

c0019a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a16:	55                   	push   ebp
c0019a17:	57                   	push   edi
c0019a18:	56                   	push   esi
c0019a19:	53                   	push   ebx
c0019a1a:	83 ec 1c             	sub    esp,0x1c
c0019a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a25:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a29:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a2d:	88 c3                	mov    bl,al
c0019a2f:	84 c0                	test   al,al
c0019a31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a35:	0f 84 81 00 00 00    	je     c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a3b:	83 ec 0c             	sub    esp,0xc
c0019a3e:	68 0b f4 01 c0       	push   0xc001f40b
c0019a43:	e8 3f 0b ff ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a4f:	3c 01                	cmp    al,0x1
c0019a51:	74 63                	je     c0019ab6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a53:	3c 02                	cmp    al,0x2
c0019a55:	75 53                	jne    c0019aaa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a57:	01 f6                	add    esi,esi
c0019a59:	09 ee                	or     esi,ebp
c0019a5b:	50                   	push   eax
c0019a5c:	89 f0                	mov    eax,esi
c0019a5e:	6a 01                	push   0x1
c0019a60:	0f b6 f0             	movzx  esi,al
c0019a63:	c1 e6 06             	shl    esi,0x6
c0019a66:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a6e:	50                   	push   eax
c0019a6f:	57                   	push   edi
c0019a70:	e8 73 f6 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	a8 01                	test   al,0x1
c0019a7a:	74 02                	je     c0019a7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a7c:	b3 07                	mov    bl,0x7
c0019a7e:	a8 02                	test   al,0x2
c0019a80:	74 02                	je     c0019a84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a82:	b3 03                	mov    bl,0x3
c0019a84:	a8 04                	test   al,0x4
c0019a86:	74 02                	je     c0019a8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a88:	b3 14                	mov    bl,0x14
c0019a8a:	a8 08                	test   al,0x8
c0019a8c:	74 02                	je     c0019a90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a8e:	b3 03                	mov    bl,0x3
c0019a90:	a8 10                	test   al,0x10
c0019a92:	74 02                	je     c0019a96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a94:	b3 15                	mov    bl,0x15
c0019a96:	a8 20                	test   al,0x20
c0019a98:	74 02                	je     c0019a9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a9a:	b3 03                	mov    bl,0x3
c0019a9c:	a8 40                	test   al,0x40
c0019a9e:	74 02                	je     c0019aa2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019aa0:	b3 16                	mov    bl,0x16
c0019aa2:	84 c0                	test   al,al
c0019aa4:	79 16                	jns    c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aa6:	b3 0d                	mov    bl,0xd
c0019aa8:	eb 12                	jmp    c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aaa:	3c 03                	cmp    al,0x3
c0019aac:	74 0c                	je     c0019aba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019aae:	3c 04                	cmp    al,0x4
c0019ab0:	75 0a                	jne    c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab2:	b3 08                	mov    bl,0x8
c0019ab4:	eb 06                	jmp    c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ab6:	b3 13                	mov    bl,0x13
c0019ab8:	eb 02                	jmp    c0019abc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aba:	b3 17                	mov    bl,0x17
c0019abc:	83 c4 1c             	add    esp,0x1c
c0019abf:	88 d8                	mov    al,bl
c0019ac1:	5b                   	pop    ebx
c0019ac2:	5e                   	pop    esi
c0019ac3:	5f                   	pop    edi
c0019ac4:	5d                   	pop    ebp
c0019ac5:	c3                   	ret    

c0019ac6 <IDE::polling(unsigned char, unsigned int)>:
c0019ac6:	55                   	push   ebp
c0019ac7:	bd 04 00 00 00       	mov    ebp,0x4
c0019acc:	57                   	push   edi
c0019acd:	56                   	push   esi
c0019ace:	53                   	push   ebx
c0019acf:	83 ec 0c             	sub    esp,0xc
c0019ad2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ad6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019ada:	0f b6 f3             	movzx  esi,bl
c0019add:	52                   	push   edx
c0019ade:	6a 0c                	push   0xc
c0019ae0:	56                   	push   esi
c0019ae1:	57                   	push   edi
c0019ae2:	e8 01 f6 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019ae7:	83 c4 10             	add    esp,0x10
c0019aea:	4d                   	dec    ebp
c0019aeb:	75 ed                	jne    c0019ada <IDE::polling(unsigned char, unsigned int)+0x14>
c0019aed:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019af2:	50                   	push   eax
c0019af3:	6a 0c                	push   0xc
c0019af5:	56                   	push   esi
c0019af6:	57                   	push   edi
c0019af7:	e8 ec f5 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	a8 01                	test   al,0x1
c0019b01:	75 17                	jne    c0019b1a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b03:	a8 20                	test   al,0x20
c0019b05:	75 0f                	jne    c0019b16 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b07:	4b                   	dec    ebx
c0019b08:	74 10                	je     c0019b1a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b0a:	84 c0                	test   al,al
c0019b0c:	78 e4                	js     c0019af2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b0e:	a8 08                	test   al,0x8
c0019b10:	74 e0                	je     c0019af2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b12:	31 c0                	xor    eax,eax
c0019b14:	eb 06                	jmp    c0019b1c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b16:	b0 01                	mov    al,0x1
c0019b18:	eb 02                	jmp    c0019b1c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b1a:	b0 02                	mov    al,0x2
c0019b1c:	83 c4 0c             	add    esp,0xc
c0019b1f:	5b                   	pop    ebx
c0019b20:	5e                   	pop    esi
c0019b21:	5f                   	pop    edi
c0019b22:	5d                   	pop    ebp
c0019b23:	c3                   	ret    

c0019b24 <SATABus::close(int, int, void*)>:
c0019b24:	31 c0                	xor    eax,eax
c0019b26:	c3                   	ret    
c0019b27:	90                   	nop

c0019b28 <SATABus::detect()>:
c0019b28:	c3                   	ret    
c0019b29:	90                   	nop

c0019b2a <SATABus::SATABus()>:
c0019b2a:	83 ec 0c             	sub    esp,0xc
c0019b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b31:	83 ec 08             	sub    esp,0x8
c0019b34:	68 44 f4 01 c0       	push   0xc001f444
c0019b39:	50                   	push   eax
c0019b3a:	e8 c9 21 ff ff       	call   c000bd08 <HardDiskController::HardDiskController(char const*)>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	ba 70 f4 01 c0       	mov    edx,0xc001f470
c0019b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b4b:	89 10                	mov    DWORD PTR [eax],edx
c0019b4d:	83 ec 0c             	sub    esp,0xc
c0019b50:	6a 50                	push   0x50
c0019b52:	e8 fc df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	89 c2                	mov    edx,eax
c0019b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b66:	83 ec 0c             	sub    esp,0xc
c0019b69:	6a 50                	push   0x50
c0019b6b:	e8 15 f7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019b70:	83 c4 10             	add    esp,0x10
c0019b73:	89 c2                	mov    edx,eax
c0019b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b7f:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b88:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b92:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b98:	83 ec 0c             	sub    esp,0xc
c0019b9b:	6a 03                	push   0x3
c0019b9d:	6a 50                	push   0x50
c0019b9f:	51                   	push   ecx
c0019ba0:	52                   	push   edx
c0019ba1:	50                   	push   eax
c0019ba2:	e8 4b 00 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019ba7:	83 c4 20             	add    esp,0x20
c0019baa:	90                   	nop
c0019bab:	83 c4 0c             	add    esp,0xc
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019bb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bb4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019bb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019bba:	09 c2                	or     edx,eax
c0019bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019bc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019bc8:	31 c0                	xor    eax,eax
c0019bca:	c1 e9 08             	shr    ecx,0x8
c0019bcd:	83 e1 0f             	and    ecx,0xf
c0019bd0:	39 c8                	cmp    eax,ecx
c0019bd2:	74 0a                	je     c0019bde <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019bd4:	f6 c2 01             	test   dl,0x1
c0019bd7:	74 08                	je     c0019be1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019bd9:	d1 ea                	shr    edx,1
c0019bdb:	40                   	inc    eax
c0019bdc:	eb f2                	jmp    c0019bd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019bde:	83 c8 ff             	or     eax,0xffffffff
c0019be1:	c3                   	ret    

c0019be2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019be6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019be9:	89 c2                	mov    edx,eax
c0019beb:	c1 ea 08             	shr    edx,0x8
c0019bee:	83 e2 0f             	and    edx,0xf
c0019bf1:	fe ca                	dec    dl
c0019bf3:	75 31                	jne    c0019c26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bf5:	83 e0 0f             	and    eax,0xf
c0019bf8:	3c 03                	cmp    al,0x3
c0019bfa:	75 2a                	jne    c0019c26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bfc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019bff:	b8 02 00 00 00       	mov    eax,0x2
c0019c04:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c0a:	74 1c                	je     c0019c28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c0c:	b8 04 00 00 00       	mov    eax,0x4
c0019c11:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c17:	74 0f                	je     c0019c28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c19:	31 c0                	xor    eax,eax
c0019c1b:	83 fa 03             	cmp    edx,0x3
c0019c1e:	0f 94 c0             	sete   al
c0019c21:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c25:	c3                   	ret    
c0019c26:	31 c0                	xor    eax,eax
c0019c28:	c3                   	ret    
c0019c29:	90                   	nop

c0019c2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c31:	0f ba e2 0f          	bt     edx,0xf
c0019c35:	72 f7                	jb     c0019c2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019c37:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c3a:	83 ca 10             	or     edx,0x10
c0019c3d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c43:	83 ca 01             	or     edx,0x1
c0019c46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c49:	c3                   	ret    

c0019c4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c51:	83 e2 fe             	and    edx,0xfffffffe
c0019c54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c5a:	83 e2 ef             	and    edx,0xffffffef
c0019c5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c63:	0f ba e2 0e          	bt     edx,0xe
c0019c67:	72 f7                	jb     c0019c60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c6c:	0f ba e2 0f          	bt     edx,0xf
c0019c70:	72 ee                	jb     c0019c60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c72:	c3                   	ret    
c0019c73:	90                   	nop

c0019c74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c74:	55                   	push   ebp
c0019c75:	57                   	push   edi
c0019c76:	56                   	push   esi
c0019c77:	53                   	push   ebx
c0019c78:	83 ec 1c             	sub    esp,0x1c
c0019c7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c83:	53                   	push   ebx
c0019c84:	56                   	push   esi
c0019c85:	e8 c0 ff ff ff       	call   c0019c4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c8a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c94:	83 ec 0c             	sub    esp,0xc
c0019c97:	c1 e5 0a             	shl    ebp,0xa
c0019c9a:	01 e8                	add    eax,ebp
c0019c9c:	89 03                	mov    DWORD PTR [ebx],eax
c0019c9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ca0:	68 00 04 00 00       	push   0x400
c0019ca5:	6a 00                	push   0x0
c0019ca7:	50                   	push   eax
c0019ca8:	e8 23 68 fe ff       	call   c00004d0 <memset>
c0019cad:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019cb3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019cb7:	01 e8                	add    eax,ebp
c0019cb9:	83 c4 1c             	add    esp,0x1c
c0019cbc:	89 03                	mov    DWORD PTR [ebx],eax
c0019cbe:	c1 e2 08             	shl    edx,0x8
c0019cc1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019cc8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019cce:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019cd4:	01 f8                	add    eax,edi
c0019cd6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019cd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019cdc:	68 00 01 00 00       	push   0x100
c0019ce1:	6a 00                	push   0x0
c0019ce3:	50                   	push   eax
c0019ce4:	e8 e7 67 fe ff       	call   c00004d0 <memset>
c0019ce9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019cef:	01 fa                	add    edx,edi
c0019cf1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019cf5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019cf8:	c1 e7 0d             	shl    edi,0xd
c0019cfb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d02:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d08:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d12:	31 ff                	xor    edi,edi
c0019d14:	83 c4 10             	add    esp,0x10
c0019d17:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d21:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d27:	83 c5 20             	add    ebp,0x20
c0019d2a:	01 f8                	add    eax,edi
c0019d2c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d2f:	52                   	push   edx
c0019d30:	68 00 01 00 00       	push   0x100
c0019d35:	6a 00                	push   0x0
c0019d37:	50                   	push   eax
c0019d38:	e8 93 67 fe ff       	call   c00004d0 <memset>
c0019d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d4a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d51:	01 f8                	add    eax,edi
c0019d53:	81 c7 00 01 00 00    	add    edi,0x100
c0019d59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d5c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d62:	75 b3                	jne    c0019d17 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d64:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d6b:	50                   	push   eax
c0019d6c:	50                   	push   eax
c0019d6d:	53                   	push   ebx
c0019d6e:	56                   	push   esi
c0019d6f:	e8 b6 fe ff ff       	call   c0019c2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d74:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d7b:	83 c4 2c             	add    esp,0x2c
c0019d7e:	5b                   	pop    ebx
c0019d7f:	5e                   	pop    esi
c0019d80:	5f                   	pop    edi
c0019d81:	5d                   	pop    ebp
c0019d82:	c3                   	ret    
c0019d83:	90                   	nop

c0019d84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d84:	55                   	push   ebp
c0019d85:	57                   	push   edi
c0019d86:	56                   	push   esi
c0019d87:	53                   	push   ebx
c0019d88:	31 db                	xor    ebx,ebx
c0019d8a:	83 ec 0c             	sub    esp,0xc
c0019d8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d95:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d98:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d9e:	74 7a                	je     c0019e1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019da0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019da4:	89 d8                	mov    eax,ebx
c0019da6:	c1 e0 07             	shl    eax,0x7
c0019da9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019db0:	55                   	push   ebp
c0019db1:	56                   	push   esi
c0019db2:	e8 2b fe ff ff       	call   c0019be2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019db7:	5a                   	pop    edx
c0019db8:	83 f8 01             	cmp    eax,0x1
c0019dbb:	59                   	pop    ecx
c0019dbc:	75 21                	jne    c0019ddf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019dbe:	50                   	push   eax
c0019dbf:	53                   	push   ebx
c0019dc0:	55                   	push   ebp
c0019dc1:	56                   	push   esi
c0019dc2:	e8 ad fe ff ff       	call   c0019c74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019dc7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019dce:	e8 e6 d9 fe ff       	call   c00077b9 <malloc>
c0019dd3:	89 c5                	mov    ebp,eax
c0019dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd8:	e8 43 0d 00 00       	call   c001ab20 <SATA::SATA()>
c0019ddd:	eb 24                	jmp    c0019e03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019ddf:	83 f8 04             	cmp    eax,0x4
c0019de2:	75 36                	jne    c0019e1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019de4:	51                   	push   ecx
c0019de5:	53                   	push   ebx
c0019de6:	55                   	push   ebp
c0019de7:	56                   	push   esi
c0019de8:	e8 87 fe ff ff       	call   c0019c74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ded:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019df4:	e8 c0 d9 fe ff       	call   c00077b9 <malloc>
c0019df9:	89 c5                	mov    ebp,eax
c0019dfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dfe:	e8 79 10 00 00       	call   c001ae7c <SATAPI::SATAPI()>
c0019e03:	58                   	pop    eax
c0019e04:	5a                   	pop    edx
c0019e05:	55                   	push   ebp
c0019e06:	56                   	push   esi
c0019e07:	e8 b8 1b ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c0019e0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e0f:	56                   	push   esi
c0019e10:	6a 00                	push   0x0
c0019e12:	53                   	push   ebx
c0019e13:	55                   	push   ebp
c0019e14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e17:	83 c4 20             	add    esp,0x20
c0019e1a:	d1 ef                	shr    edi,1
c0019e1c:	43                   	inc    ebx
c0019e1d:	83 fb 20             	cmp    ebx,0x20
c0019e20:	0f 85 72 ff ff ff    	jne    c0019d98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e26:	83 c4 0c             	add    esp,0xc
c0019e29:	5b                   	pop    ebx
c0019e2a:	5e                   	pop    esi
c0019e2b:	5f                   	pop    edi
c0019e2c:	5d                   	pop    ebp
c0019e2d:	c3                   	ret    

c0019e2e <SATABus::open(int, int, void*)>:
c0019e2e:	83 ec 14             	sub    esp,0x14
c0019e31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e35:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019e3b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e41:	52                   	push   edx
c0019e42:	50                   	push   eax
c0019e43:	e8 3c ff ff ff       	call   c0019d84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e48:	31 c0                	xor    eax,eax
c0019e4a:	83 c4 1c             	add    esp,0x1c
c0019e4d:	c3                   	ret    

c0019e4e <ATA::close(int, int, void*)>:
c0019e4e:	83 ec 0c             	sub    esp,0xc
c0019e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e5b:	85 c0                	test   eax,eax
c0019e5d:	74 0c                	je     c0019e6b <ATA::close(int, int, void*)+0x1d>
c0019e5f:	83 ec 0c             	sub    esp,0xc
c0019e62:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e64:	50                   	push   eax
c0019e65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	31 c0                	xor    eax,eax
c0019e6d:	83 c4 0c             	add    esp,0xc
c0019e70:	c3                   	ret    
c0019e71:	90                   	nop

c0019e72 <ATA::powerSaving(PowerSavingLevel)>:
c0019e72:	c3                   	ret    
c0019e73:	90                   	nop

c0019e74 <ATA::ATA()>:
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e7b:	83 ec 04             	sub    esp,0x4
c0019e7e:	68 00 02 00 00       	push   0x200
c0019e83:	68 3d f5 01 c0       	push   0xc001f53d
c0019e88:	50                   	push   eax
c0019e89:	e8 04 1f ff ff       	call   c000bd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e8e:	83 c4 10             	add    esp,0x10
c0019e91:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c0019e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e9a:	89 10                	mov    DWORD PTR [eax],edx
c0019e9c:	90                   	nop
c0019e9d:	83 c4 0c             	add    esp,0xc
c0019ea0:	c3                   	ret    
c0019ea1:	90                   	nop

c0019ea2 <ATA::flush(bool)>:
c0019ea2:	53                   	push   ebx
c0019ea3:	83 ec 08             	sub    esp,0x8
c0019ea6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019eab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eaf:	19 c0                	sbb    eax,eax
c0019eb1:	83 e0 fd             	and    eax,0xfffffffd
c0019eb4:	05 ea 00 00 00       	add    eax,0xea
c0019eb9:	50                   	push   eax
c0019eba:	6a 07                	push   0x7
c0019ebc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ec3:	50                   	push   eax
c0019ec4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019eca:	e8 59 f1 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ecf:	83 c4 0c             	add    esp,0xc
c0019ed2:	6a 00                	push   0x0
c0019ed4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019edb:	50                   	push   eax
c0019edc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ee2:	e8 df fb ff ff       	call   c0019ac6 <IDE::polling(unsigned char, unsigned int)>
c0019ee7:	83 c4 18             	add    esp,0x18
c0019eea:	5b                   	pop    ebx
c0019eeb:	c3                   	ret    

c0019eec <ATA::readyForCommand()>:
c0019eec:	56                   	push   esi
c0019eed:	53                   	push   ebx
c0019eee:	53                   	push   ebx
c0019eef:	31 db                	xor    ebx,ebx
c0019ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ef5:	51                   	push   ecx
c0019ef6:	6a 0c                	push   0xc
c0019ef8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019eff:	50                   	push   eax
c0019f00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f06:	e8 dd f1 ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	a8 88                	test   al,0x88
c0019f10:	74 1f                	je     c0019f31 <ATA::readyForCommand()+0x45>
c0019f12:	43                   	inc    ebx
c0019f13:	83 fb 63             	cmp    ebx,0x63
c0019f16:	7e dd                	jle    c0019ef5 <ATA::readyForCommand()+0x9>
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	6a 0a                	push   0xa
c0019f1d:	e8 da 9b ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c0019f22:	83 c4 10             	add    esp,0x10
c0019f25:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f2b:	75 c8                	jne    c0019ef5 <ATA::readyForCommand()+0x9>
c0019f2d:	31 c0                	xor    eax,eax
c0019f2f:	eb 02                	jmp    c0019f33 <ATA::readyForCommand()+0x47>
c0019f31:	b0 01                	mov    al,0x1
c0019f33:	5a                   	pop    edx
c0019f34:	5b                   	pop    ebx
c0019f35:	5e                   	pop    esi
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <ATA::access(unsigned long long, int, void*, bool)>:
c0019f38:	55                   	push   ebp
c0019f39:	57                   	push   edi
c0019f3a:	56                   	push   esi
c0019f3b:	53                   	push   ebx
c0019f3c:	83 ec 2c             	sub    esp,0x2c
c0019f3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f47:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f4f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f53:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f6f:	c1 e0 06             	shl    eax,0x6
c0019f72:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f7a:	74 5d                	je     c0019fd9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f7c:	89 fa                	mov    edx,edi
c0019f7e:	89 f0                	mov    eax,esi
c0019f80:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f84:	c1 ea 1c             	shr    edx,0x1c
c0019f87:	89 d1                	mov    ecx,edx
c0019f89:	09 c1                	or     ecx,eax
c0019f8b:	74 25                	je     c0019fb2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f8d:	31 ed                	xor    ebp,ebp
c0019f8f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f96:	89 fa                	mov    edx,edi
c0019f98:	89 f0                	mov    eax,esi
c0019f9a:	0f ad d0             	shrd   eax,edx,cl
c0019f9d:	d3 ea                	shr    edx,cl
c0019f9f:	f6 c1 20             	test   cl,0x20
c0019fa2:	74 02                	je     c0019fa6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019fa4:	89 d0                	mov    eax,edx
c0019fa6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019faa:	45                   	inc    ebp
c0019fab:	83 fd 06             	cmp    ebp,0x6
c0019fae:	75 df                	jne    c0019f8f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019fb0:	eb 76                	jmp    c001a028 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019fb2:	89 f0                	mov    eax,esi
c0019fb4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019fb9:	89 fa                	mov    edx,edi
c0019fbb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fc2:	0f ac d0 10          	shrd   eax,edx,0x10
c0019fc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019fcf:	c1 ee 18             	shr    esi,0x18
c0019fd2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019fd7:	eb 56                	jmp    c001a02f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fd9:	6a 00                	push   0x0
c0019fdb:	6a 3f                	push   0x3f
c0019fdd:	57                   	push   edi
c0019fde:	56                   	push   esi
c0019fdf:	e8 7c 22 00 00       	call   c001c260 <__umoddi3>
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	40                   	inc    eax
c0019fe8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019fec:	6a 00                	push   0x0
c0019fee:	68 f0 03 00 00       	push   0x3f0
c0019ff3:	57                   	push   edi
c0019ff4:	56                   	push   esi
c0019ff5:	e8 66 21 00 00       	call   c001c160 <__udivdi3>
c0019ffa:	83 c4 10             	add    esp,0x10
c0019ffd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a002:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a009:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a00e:	6a 00                	push   0x0
c001a010:	6a 3f                	push   0x3f
c001a012:	57                   	push   edi
c001a013:	56                   	push   esi
c001a014:	e8 47 21 00 00       	call   c001c160 <__udivdi3>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	89 c6                	mov    esi,eax
c001a01e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a023:	83 e6 0f             	and    esi,0xf
c001a026:	eb 07                	jmp    c001a02f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a028:	31 f6                	xor    esi,esi
c001a02a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a02f:	bf 01 00 00 00       	mov    edi,0x1
c001a034:	50                   	push   eax
c001a035:	6a 00                	push   0x0
c001a037:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a03e:	50                   	push   eax
c001a03f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a043:	e8 ee f1 ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c001a048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a04b:	e8 9c fe ff ff       	call   c0019eec <ATA::readyForCommand()>
c001a050:	83 c4 10             	add    esp,0x10
c001a053:	84 c0                	test   al,al
c001a055:	0f 84 4e 02 00 00    	je     c001a2a9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a05b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a061:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a067:	c1 e0 04             	shl    eax,0x4
c001a06a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a071:	09 c6                	or     esi,eax
c001a073:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a078:	75 05                	jne    c001a07f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a07a:	83 ce a0             	or     esi,0xffffffa0
c001a07d:	eb 03                	jmp    c001a082 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a07f:	83 ce e0             	or     esi,0xffffffe0
c001a082:	89 f0                	mov    eax,esi
c001a084:	0f b6 f0             	movzx  esi,al
c001a087:	56                   	push   esi
c001a088:	6a 06                	push   0x6
c001a08a:	51                   	push   ecx
c001a08b:	52                   	push   edx
c001a08c:	e8 97 ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	6a 00                	push   0x0
c001a096:	6a 01                	push   0x1
c001a098:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09f:	50                   	push   eax
c001a0a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a6:	e8 7d ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a0b3:	75 6e                	jne    c001a123 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a0b5:	6a 00                	push   0x0
c001a0b7:	6a 08                	push   0x8
c001a0b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0c0:	50                   	push   eax
c001a0c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c7:	e8 5c ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0cc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a0d1:	50                   	push   eax
c001a0d2:	6a 09                	push   0x9
c001a0d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0db:	50                   	push   eax
c001a0dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0e2:	e8 41 ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e7:	83 c4 20             	add    esp,0x20
c001a0ea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a0ef:	50                   	push   eax
c001a0f0:	6a 0a                	push   0xa
c001a0f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f9:	50                   	push   eax
c001a0fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a100:	e8 23 ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a105:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a10a:	50                   	push   eax
c001a10b:	6a 0b                	push   0xb
c001a10d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a114:	50                   	push   eax
c001a115:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a11b:	e8 08 ef ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a120:	83 c4 20             	add    esp,0x20
c001a123:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a128:	50                   	push   eax
c001a129:	6a 02                	push   0x2
c001a12b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a132:	50                   	push   eax
c001a133:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a139:	e8 ea ee ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a143:	50                   	push   eax
c001a144:	6a 03                	push   0x3
c001a146:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a14d:	50                   	push   eax
c001a14e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a154:	e8 cf ee ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a159:	83 c4 20             	add    esp,0x20
c001a15c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a161:	50                   	push   eax
c001a162:	6a 04                	push   0x4
c001a164:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16b:	50                   	push   eax
c001a16c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a172:	e8 b1 ee ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a177:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a17c:	50                   	push   eax
c001a17d:	6a 05                	push   0x5
c001a17f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a186:	50                   	push   eax
c001a187:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18d:	e8 96 ee ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a192:	83 c4 20             	add    esp,0x20
c001a195:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a19a:	0f 94 c0             	sete   al
c001a19d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a1a2:	74 09                	je     c001a1ad <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a1a4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a1ab:	eb 07                	jmp    c001a1b4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a1ad:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a1b4:	0f b6 c0             	movzx  eax,al
c001a1b7:	50                   	push   eax
c001a1b8:	6a 07                	push   0x7
c001a1ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c1:	50                   	push   eax
c001a1c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c8:	e8 5b ee ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a1d1:	83 c4 10             	add    esp,0x10
c001a1d4:	85 f6                	test   esi,esi
c001a1d6:	0f 84 ae 00 00 00    	je     c001a28a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a1dc:	50                   	push   eax
c001a1dd:	6a 01                	push   0x1
c001a1df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e6:	50                   	push   eax
c001a1e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ed:	e8 d4 f8 ff ff       	call   c0019ac6 <IDE::polling(unsigned char, unsigned int)>
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1fb:	84 c0                	test   al,al
c001a1fd:	74 20                	je     c001a21f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1ff:	0f b6 f8             	movzx  edi,al
c001a202:	0f b6 d2             	movzx  edx,dl
c001a205:	57                   	push   edi
c001a206:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a20d:	50                   	push   eax
c001a20e:	52                   	push   edx
c001a20f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a215:	e8 fc f7 ff ff       	call   c0019a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a21a:	e9 87 00 00 00       	jmp    c001a2a6 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a21f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a224:	74 33                	je     c001a259 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a226:	31 ed                	xor    ebp,ebp
c001a228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a22c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a230:	50                   	push   eax
c001a231:	50                   	push   eax
c001a232:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a239:	50                   	push   eax
c001a23a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a240:	e8 d1 ed ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a245:	89 c2                	mov    edx,eax
c001a247:	89 f8                	mov    eax,edi
c001a249:	66 ef                	out    dx,ax
c001a24b:	45                   	inc    ebp
c001a24c:	83 c4 10             	add    esp,0x10
c001a24f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a255:	75 d1                	jne    c001a228 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a257:	eb 23                	jmp    c001a27c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a259:	0f b6 d2             	movzx  edx,dl
c001a25c:	51                   	push   ecx
c001a25d:	51                   	push   ecx
c001a25e:	52                   	push   edx
c001a25f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a265:	e8 ac ed ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a26a:	b9 00 01 00 00       	mov    ecx,0x100
c001a26f:	89 c2                	mov    edx,eax
c001a271:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a275:	fc                   	cld    
c001a276:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a284:	4e                   	dec    esi
c001a285:	e9 4a ff ff ff       	jmp    c001a1d4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a28a:	31 ff                	xor    edi,edi
c001a28c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a291:	74 16                	je     c001a2a9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a293:	50                   	push   eax
c001a294:	50                   	push   eax
c001a295:	31 c0                	xor    eax,eax
c001a297:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a29c:	0f 94 c0             	sete   al
c001a29f:	50                   	push   eax
c001a2a0:	53                   	push   ebx
c001a2a1:	e8 fc fb ff ff       	call   c0019ea2 <ATA::flush(bool)>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	83 c4 2c             	add    esp,0x2c
c001a2ac:	89 f8                	mov    eax,edi
c001a2ae:	5b                   	pop    ebx
c001a2af:	5e                   	pop    esi
c001a2b0:	5f                   	pop    edi
c001a2b1:	5d                   	pop    ebp
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop

c001a2b4 <ATA::read(unsigned long long, int, void*)>:
c001a2b4:	57                   	push   edi
c001a2b5:	b8 04 00 00 00       	mov    eax,0x4
c001a2ba:	56                   	push   esi
c001a2bb:	53                   	push   ebx
c001a2bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2c4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2cb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2cf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2d5:	77 25                	ja     c001a2fc <ATA::read(unsigned long long, int, void*)+0x48>
c001a2d7:	b8 06 00 00 00       	mov    eax,0x6
c001a2dc:	85 f6                	test   esi,esi
c001a2de:	74 1c                	je     c001a2fc <ATA::read(unsigned long long, int, void*)+0x48>
c001a2e0:	50                   	push   eax
c001a2e1:	50                   	push   eax
c001a2e2:	6a 00                	push   0x0
c001a2e4:	56                   	push   esi
c001a2e5:	52                   	push   edx
c001a2e6:	53                   	push   ebx
c001a2e7:	51                   	push   ecx
c001a2e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2ec:	e8 47 fc ff ff       	call   c0019f38 <ATA::access(unsigned long long, int, void*, bool)>
c001a2f1:	83 c4 20             	add    esp,0x20
c001a2f4:	85 c0                	test   eax,eax
c001a2f6:	0f 95 c0             	setne  al
c001a2f9:	0f b6 c0             	movzx  eax,al
c001a2fc:	5b                   	pop    ebx
c001a2fd:	5e                   	pop    esi
c001a2fe:	5f                   	pop    edi
c001a2ff:	c3                   	ret    

c001a300 <ATA::write(unsigned long long, int, void*)>:
c001a300:	57                   	push   edi
c001a301:	b8 04 00 00 00       	mov    eax,0x4
c001a306:	56                   	push   esi
c001a307:	53                   	push   ebx
c001a308:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a30c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a310:	8d 7a ff             	lea    edi,[edx-0x1]
c001a313:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a317:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a31b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a321:	77 25                	ja     c001a348 <ATA::write(unsigned long long, int, void*)+0x48>
c001a323:	b8 06 00 00 00       	mov    eax,0x6
c001a328:	85 f6                	test   esi,esi
c001a32a:	74 1c                	je     c001a348 <ATA::write(unsigned long long, int, void*)+0x48>
c001a32c:	50                   	push   eax
c001a32d:	50                   	push   eax
c001a32e:	6a 01                	push   0x1
c001a330:	56                   	push   esi
c001a331:	52                   	push   edx
c001a332:	53                   	push   ebx
c001a333:	51                   	push   ecx
c001a334:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a338:	e8 fb fb ff ff       	call   c0019f38 <ATA::access(unsigned long long, int, void*, bool)>
c001a33d:	83 c4 20             	add    esp,0x20
c001a340:	85 c0                	test   eax,eax
c001a342:	0f 95 c0             	setne  al
c001a345:	0f b6 c0             	movzx  eax,al
c001a348:	5b                   	pop    ebx
c001a349:	5e                   	pop    esi
c001a34a:	5f                   	pop    edi
c001a34b:	c3                   	ret    

c001a34c <ATA::detectCHS()>:
c001a34c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a350:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a356:	c1 e0 06             	shl    eax,0x6
c001a359:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a35f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a369:	c7 44 24 04 94 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f494
c001a371:	e9 91 5e ff ff       	jmp    c0010207 <KePanic(char const*)>

c001a376 <ATA::open(int, int, void*)>:
c001a376:	53                   	push   ebx
c001a377:	83 ec 08             	sub    esp,0x8
c001a37a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a37e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a382:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a386:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a38c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a392:	c1 e0 06             	shl    eax,0x6
c001a395:	01 d0                	add    eax,edx
c001a397:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a39e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a3a4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a3ab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a3b5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a3bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a3c2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a3c9:	75 0c                	jne    c001a3d7 <ATA::open(int, int, void*)+0x61>
c001a3cb:	83 ec 0c             	sub    esp,0xc
c001a3ce:	53                   	push   ebx
c001a3cf:	e8 78 ff ff ff       	call   c001a34c <ATA::detectCHS()>
c001a3d4:	83 c4 10             	add    esp,0x10
c001a3d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3dd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3e3:	c1 e0 06             	shl    eax,0x6
c001a3e6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3f7:	d1 e8                	shr    eax,1
c001a3f9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3ff:	6a 04                	push   0x4
c001a401:	6a 0c                	push   0xc
c001a403:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a40a:	50                   	push   eax
c001a40b:	52                   	push   edx
c001a40c:	e8 17 ec ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a411:	90                   	nop
c001a412:	90                   	nop
c001a413:	6a 00                	push   0x0
c001a415:	6a 0c                	push   0xc
c001a417:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a41e:	50                   	push   eax
c001a41f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a425:	e8 fe eb ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a42a:	83 c4 14             	add    esp,0x14
c001a42d:	53                   	push   ebx
c001a42e:	e8 c7 19 ff ff       	call   c000bdfa <PhysicalDisk::startCache()>
c001a433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a436:	e8 77 2a ff ff       	call   c000ceb2 <createPartitionsForDisk(PhysicalDisk*)>
c001a43b:	31 c0                	xor    eax,eax
c001a43d:	83 c4 18             	add    esp,0x18
c001a440:	5b                   	pop    ebx
c001a441:	c3                   	ret    

c001a442 <ATAPI::write(unsigned long long, int, void*)>:
c001a442:	b8 03 00 00 00       	mov    eax,0x3
c001a447:	c3                   	ret    

c001a448 <ATAPI::close(int, int, void*)>:
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a44f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a455:	85 c0                	test   eax,eax
c001a457:	74 0c                	je     c001a465 <ATAPI::close(int, int, void*)+0x1d>
c001a459:	83 ec 0c             	sub    esp,0xc
c001a45c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a45e:	50                   	push   eax
c001a45f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	31 c0                	xor    eax,eax
c001a467:	83 c4 0c             	add    esp,0xc
c001a46a:	c3                   	ret    
c001a46b:	90                   	nop

c001a46c <ATAPI::ATAPI()>:
c001a46c:	83 ec 0c             	sub    esp,0xc
c001a46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a473:	83 ec 04             	sub    esp,0x4
c001a476:	68 00 08 00 00       	push   0x800
c001a47b:	68 dd f5 01 c0       	push   0xc001f5dd
c001a480:	50                   	push   eax
c001a481:	e8 0c 19 ff ff       	call   c000bd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a486:	83 c4 10             	add    esp,0x10
c001a489:	ba f8 f4 01 c0       	mov    edx,0xc001f4f8
c001a48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a492:	89 10                	mov    DWORD PTR [eax],edx
c001a494:	90                   	nop
c001a495:	83 c4 0c             	add    esp,0xc
c001a498:	c3                   	ret    
c001a499:	90                   	nop

c001a49a <ATAPI::readyForCommand()>:
c001a49a:	56                   	push   esi
c001a49b:	53                   	push   ebx
c001a49c:	53                   	push   ebx
c001a49d:	31 db                	xor    ebx,ebx
c001a49f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4a3:	51                   	push   ecx
c001a4a4:	6a 0c                	push   0xc
c001a4a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a4ad:	50                   	push   eax
c001a4ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a4b4:	e8 2f ec ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	a8 88                	test   al,0x88
c001a4be:	74 25                	je     c001a4e5 <ATAPI::readyForCommand()+0x4b>
c001a4c0:	43                   	inc    ebx
c001a4c1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a4c7:	7e da                	jle    c001a4a3 <ATAPI::readyForCommand()+0x9>
c001a4c9:	83 ec 0c             	sub    esp,0xc
c001a4cc:	68 5e 01 00 00       	push   0x15e
c001a4d1:	e8 26 96 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a4df:	75 c2                	jne    c001a4a3 <ATAPI::readyForCommand()+0x9>
c001a4e1:	31 c0                	xor    eax,eax
c001a4e3:	eb 02                	jmp    c001a4e7 <ATAPI::readyForCommand()+0x4d>
c001a4e5:	b0 01                	mov    al,0x1
c001a4e7:	5a                   	pop    edx
c001a4e8:	5b                   	pop    ebx
c001a4e9:	5e                   	pop    esi
c001a4ea:	c3                   	ret    
c001a4eb:	90                   	nop

c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a4ec:	55                   	push   ebp
c001a4ed:	57                   	push   edi
c001a4ee:	56                   	push   esi
c001a4ef:	53                   	push   ebx
c001a4f0:	83 ec 20             	sub    esp,0x20
c001a4f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a4f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a503:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a507:	6a 01                	push   0x1
c001a509:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a510:	50                   	push   eax
c001a511:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a517:	e8 1a ed ff ff       	call   c0019236 <IDE::enableIRQs(unsigned char, bool)>
c001a51c:	5e                   	pop    esi
c001a51d:	58                   	pop    eax
c001a51e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a525:	50                   	push   eax
c001a526:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a52c:	e8 d1 ea ff ff       	call   c0019002 <IDE::prepareInterrupt(unsigned char)>
c001a531:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a534:	e8 61 ff ff ff       	call   c001a49a <ATAPI::readyForCommand()>
c001a539:	83 c4 10             	add    esp,0x10
c001a53c:	84 c0                	test   al,al
c001a53e:	75 0a                	jne    c001a54a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a540:	bb 01 00 00 00       	mov    ebx,0x1
c001a545:	e9 57 02 00 00       	jmp    c001a7a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a54a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a550:	c1 e0 04             	shl    eax,0x4
c001a553:	0f b6 c0             	movzx  eax,al
c001a556:	50                   	push   eax
c001a557:	6a 06                	push   0x6
c001a559:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a560:	50                   	push   eax
c001a561:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a567:	e8 bc ea ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a56c:	6a 00                	push   0x0
c001a56e:	6a 01                	push   0x1
c001a570:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a577:	50                   	push   eax
c001a578:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a57e:	e8 a5 ea ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a583:	83 c4 20             	add    esp,0x20
c001a586:	0f b6 c3             	movzx  eax,bl
c001a589:	0f b6 df             	movzx  ebx,bh
c001a58c:	50                   	push   eax
c001a58d:	6a 04                	push   0x4
c001a58f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a596:	50                   	push   eax
c001a597:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a59d:	e8 86 ea ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5a2:	53                   	push   ebx
c001a5a3:	6a 05                	push   0x5
c001a5a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5ac:	50                   	push   eax
c001a5ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5b3:	e8 70 ea ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5b8:	83 c4 20             	add    esp,0x20
c001a5bb:	68 a0 00 00 00       	push   0xa0
c001a5c0:	6a 07                	push   0x7
c001a5c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5c9:	50                   	push   eax
c001a5ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d0:	e8 53 ea ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5d5:	83 c4 0c             	add    esp,0xc
c001a5d8:	6a 01                	push   0x1
c001a5da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e1:	50                   	push   eax
c001a5e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e8:	e8 d9 f4 ff ff       	call   c0019ac6 <IDE::polling(unsigned char, unsigned int)>
c001a5ed:	83 c4 10             	add    esp,0x10
c001a5f0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a5f6:	84 c0                	test   al,al
c001a5f8:	74 23                	je     c001a61d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5fa:	0f b6 d8             	movzx  ebx,al
c001a5fd:	0f b6 d2             	movzx  edx,dl
c001a600:	53                   	push   ebx
c001a601:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a608:	50                   	push   eax
c001a609:	52                   	push   edx
c001a60a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a610:	e8 01 f4 ff ff       	call   c0019a16 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	e9 84 01 00 00       	jmp    c001a7a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a61d:	0f b6 d2             	movzx  edx,dl
c001a620:	53                   	push   ebx
c001a621:	53                   	push   ebx
c001a622:	52                   	push   edx
c001a623:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a629:	e8 e8 e9 ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a62e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a632:	b9 06 00 00 00       	mov    ecx,0x6
c001a637:	89 c2                	mov    edx,eax
c001a639:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a63c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a649:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a650:	85 db                	test   ebx,ebx
c001a652:	0f 84 ec 00 00 00    	je     c001a744 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a658:	51                   	push   ecx
c001a659:	51                   	push   ecx
c001a65a:	52                   	push   edx
c001a65b:	50                   	push   eax
c001a65c:	e8 35 eb ff ff       	call   c0019196 <IDE::waitInterrupt(unsigned char)>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	84 c0                	test   al,al
c001a666:	0f 84 d4 fe ff ff    	je     c001a540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a66c:	56                   	push   esi
c001a66d:	56                   	push   esi
c001a66e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a675:	50                   	push   eax
c001a676:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a67c:	e8 81 e9 ff ff       	call   c0019002 <IDE::prepareInterrupt(unsigned char)>
c001a681:	83 c4 0c             	add    esp,0xc
c001a684:	6a 04                	push   0x4
c001a686:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a68d:	50                   	push   eax
c001a68e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a694:	e8 4f ea ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c001a699:	83 c4 0c             	add    esp,0xc
c001a69c:	89 c6                	mov    esi,eax
c001a69e:	6a 05                	push   0x5
c001a6a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6a7:	50                   	push   eax
c001a6a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6ae:	e8 35 ea ff ff       	call   c00190e8 <IDE::read(unsigned char, unsigned char)>
c001a6b3:	89 f1                	mov    ecx,esi
c001a6b5:	0f b6 c0             	movzx  eax,al
c001a6b8:	0f b6 f1             	movzx  esi,cl
c001a6bb:	c1 e0 08             	shl    eax,0x8
c001a6be:	09 c6                	or     esi,eax
c001a6c0:	d1 fe                	sar    esi,1
c001a6c2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a6c6:	83 c4 10             	add    esp,0x10
c001a6c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a6ce:	74 41                	je     c001a711 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a6d0:	31 c9                	xor    ecx,ecx
c001a6d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6df:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a6e3:	75 0a                	jne    c001a6ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a6e5:	01 c9                	add    ecx,ecx
c001a6e7:	01 cd                	add    ebp,ecx
c001a6e9:	4b                   	dec    ebx
c001a6ea:	e9 54 ff ff ff       	jmp    c001a643 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a6ef:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a6f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6f8:	51                   	push   ecx
c001a6f9:	51                   	push   ecx
c001a6fa:	52                   	push   edx
c001a6fb:	50                   	push   eax
c001a6fc:	e8 15 e9 ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a701:	89 c2                	mov    edx,eax
c001a703:	89 f0                	mov    eax,esi
c001a705:	66 ef                	out    dx,ax
c001a707:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	41                   	inc    ecx
c001a70f:	eb c1                	jmp    c001a6d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a711:	31 f6                	xor    esi,esi
c001a713:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a719:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a720:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a724:	75 06                	jne    c001a72c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a726:	01 f6                	add    esi,esi
c001a728:	01 f5                	add    ebp,esi
c001a72a:	eb bd                	jmp    c001a6e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a72c:	51                   	push   ecx
c001a72d:	51                   	push   ecx
c001a72e:	52                   	push   edx
c001a72f:	50                   	push   eax
c001a730:	e8 e1 e8 ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a735:	89 c2                	mov    edx,eax
c001a737:	66 ed                	in     ax,dx
c001a739:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	46                   	inc    esi
c001a742:	eb cf                	jmp    c001a713 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a744:	51                   	push   ecx
c001a745:	51                   	push   ecx
c001a746:	52                   	push   edx
c001a747:	50                   	push   eax
c001a748:	e8 49 ea ff ff       	call   c0019196 <IDE::waitInterrupt(unsigned char)>
c001a74d:	83 c4 10             	add    esp,0x10
c001a750:	84 c0                	test   al,al
c001a752:	0f 84 e8 fd ff ff    	je     c001a540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a758:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a75d:	52                   	push   edx
c001a75e:	52                   	push   edx
c001a75f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a766:	50                   	push   eax
c001a767:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a76d:	e8 90 e8 ff ff       	call   c0019002 <IDE::prepareInterrupt(unsigned char)>
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	50                   	push   eax
c001a776:	50                   	push   eax
c001a777:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a77e:	50                   	push   eax
c001a77f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a785:	e8 8c e8 ff ff       	call   c0019016 <IDE::getBase(unsigned char)>
c001a78a:	8d 50 07             	lea    edx,[eax+0x7]
c001a78d:	ec                   	in     al,dx
c001a78e:	83 c4 10             	add    esp,0x10
c001a791:	a8 88                	test   al,0x88
c001a793:	74 0a                	je     c001a79f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a795:	4b                   	dec    ebx
c001a796:	75 dd                	jne    c001a775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a798:	bb 02 00 00 00       	mov    ebx,0x2
c001a79d:	eb 02                	jmp    c001a7a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a79f:	31 db                	xor    ebx,ebx
c001a7a1:	83 c4 1c             	add    esp,0x1c
c001a7a4:	89 d8                	mov    eax,ebx
c001a7a6:	5b                   	pop    ebx
c001a7a7:	5e                   	pop    esi
c001a7a8:	5f                   	pop    edi
c001a7a9:	5d                   	pop    ebp
c001a7aa:	c3                   	ret    
c001a7ab:	90                   	nop

c001a7ac <ATAPI::diskRemoved()>:
c001a7ac:	53                   	push   ebx
c001a7ad:	83 ec 14             	sub    esp,0x14
c001a7b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a7b4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a7bb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a7c1:	e8 6c 24 ff ff       	call   c000cc32 <LogicalDisk::unmount()>
c001a7c6:	58                   	pop    eax
c001a7c7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a7cd:	e8 a6 2d ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c001a7d2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a7d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7dc:	83 c4 18             	add    esp,0x18
c001a7df:	5b                   	pop    ebx
c001a7e0:	e9 83 2d ff ff       	jmp    c000d568 <VCache::invalidateReadBuffer()>
c001a7e5:	90                   	nop

c001a7e6 <ATAPI::eject()>:
c001a7e6:	57                   	push   edi
c001a7e7:	b9 03 00 00 00       	mov    ecx,0x3
c001a7ec:	53                   	push   ebx
c001a7ed:	83 ec 14             	sub    esp,0x14
c001a7f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7f4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7f8:	fc                   	cld    
c001a7f9:	31 c0                	xor    eax,eax
c001a7fb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7fd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a802:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a807:	50                   	push   eax
c001a808:	50                   	push   eax
c001a809:	6a 00                	push   0x0
c001a80b:	6a 00                	push   0x0
c001a80d:	6a 00                	push   0x0
c001a80f:	6a 02                	push   0x2
c001a811:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a815:	50                   	push   eax
c001a816:	53                   	push   ebx
c001a817:	e8 d0 fc ff ff       	call   c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a81c:	83 c4 14             	add    esp,0x14
c001a81f:	53                   	push   ebx
c001a820:	e8 87 ff ff ff       	call   c001a7ac <ATAPI::diskRemoved()>
c001a825:	83 c4 24             	add    esp,0x24
c001a828:	31 c0                	xor    eax,eax
c001a82a:	5b                   	pop    ebx
c001a82b:	5f                   	pop    edi
c001a82c:	c3                   	ret    
c001a82d:	90                   	nop

c001a82e <ATAPI::diskInserted()>:
c001a82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a832:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a839:	c3                   	ret    

c001a83a <ATAPI::detectMedia()>:
c001a83a:	56                   	push   esi
c001a83b:	53                   	push   ebx
c001a83c:	83 ec 28             	sub    esp,0x28
c001a83f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a843:	6a 0c                	push   0xc
c001a845:	6a 00                	push   0x0
c001a847:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a84b:	56                   	push   esi
c001a84c:	e8 7f 5c fe ff       	call   c00004d0 <memset>
c001a851:	58                   	pop    eax
c001a852:	5a                   	pop    edx
c001a853:	6a 00                	push   0x0
c001a855:	6a 00                	push   0x0
c001a857:	6a 00                	push   0x0
c001a859:	6a 00                	push   0x0
c001a85b:	56                   	push   esi
c001a85c:	53                   	push   ebx
c001a85d:	e8 8a fc ff ff       	call   c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a862:	83 c4 1c             	add    esp,0x1c
c001a865:	6a 0c                	push   0xc
c001a867:	6a 00                	push   0x0
c001a869:	56                   	push   esi
c001a86a:	e8 61 5c fe ff       	call   c00004d0 <memset>
c001a86f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a874:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a879:	59                   	pop    ecx
c001a87a:	58                   	pop    eax
c001a87b:	6a 01                	push   0x1
c001a87d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a881:	50                   	push   eax
c001a882:	6a 00                	push   0x0
c001a884:	6a 12                	push   0x12
c001a886:	56                   	push   esi
c001a887:	53                   	push   ebx
c001a888:	e8 5f fc ff ff       	call   c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a88d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a891:	83 c4 20             	add    esp,0x20
c001a894:	83 e0 7f             	and    eax,0x7f
c001a897:	3c 70                	cmp    al,0x70
c001a899:	74 15                	je     c001a8b0 <ATAPI::detectMedia()+0x76>
c001a89b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8a2:	75 0c                	jne    c001a8b0 <ATAPI::detectMedia()+0x76>
c001a8a4:	83 ec 0c             	sub    esp,0xc
c001a8a7:	53                   	push   ebx
c001a8a8:	e8 81 ff ff ff       	call   c001a82e <ATAPI::diskInserted()>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8b4:	83 e0 0f             	and    eax,0xf
c001a8b7:	3c 02                	cmp    al,0x2
c001a8b9:	75 1b                	jne    c001a8d6 <ATAPI::detectMedia()+0x9c>
c001a8bb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a8c0:	75 2d                	jne    c001a8ef <ATAPI::detectMedia()+0xb5>
c001a8c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8c9:	74 24                	je     c001a8ef <ATAPI::detectMedia()+0xb5>
c001a8cb:	83 ec 0c             	sub    esp,0xc
c001a8ce:	53                   	push   ebx
c001a8cf:	e8 d8 fe ff ff       	call   c001a7ac <ATAPI::diskRemoved()>
c001a8d4:	eb 16                	jmp    c001a8ec <ATAPI::detectMedia()+0xb2>
c001a8d6:	84 c0                	test   al,al
c001a8d8:	75 15                	jne    c001a8ef <ATAPI::detectMedia()+0xb5>
c001a8da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8e1:	75 0c                	jne    c001a8ef <ATAPI::detectMedia()+0xb5>
c001a8e3:	83 ec 0c             	sub    esp,0xc
c001a8e6:	53                   	push   ebx
c001a8e7:	e8 42 ff ff ff       	call   c001a82e <ATAPI::diskInserted()>
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	83 c4 24             	add    esp,0x24
c001a8f2:	5b                   	pop    ebx
c001a8f3:	5e                   	pop    esi
c001a8f4:	c3                   	ret    
c001a8f5:	90                   	nop

c001a8f6 <ATAPI::open(int, int, void*)>:
c001a8f6:	56                   	push   esi
c001a8f7:	53                   	push   ebx
c001a8f8:	50                   	push   eax
c001a8f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a901:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a905:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a90b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a911:	c1 e0 06             	shl    eax,0x6
c001a914:	01 d0                	add    eax,edx
c001a916:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a91d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a923:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a92a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a934:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a93a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a941:	6a 04                	push   0x4
c001a943:	6a 0c                	push   0xc
c001a945:	51                   	push   ecx
c001a946:	52                   	push   edx
c001a947:	e8 dc e6 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a94c:	90                   	nop
c001a94d:	90                   	nop
c001a94e:	6a 00                	push   0x0
c001a950:	6a 0c                	push   0xc
c001a952:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a959:	50                   	push   eax
c001a95a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a960:	e8 c3 e6 ff ff       	call   c0019028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a965:	83 c4 14             	add    esp,0x14
c001a968:	68 74 01 00 00       	push   0x174
c001a96d:	e8 47 ce fe ff       	call   c00077b9 <malloc>
c001a972:	83 c4 0c             	add    esp,0xc
c001a975:	89 c6                	mov    esi,eax
c001a977:	6a 00                	push   0x0
c001a979:	68 ff ff ff 7f       	push   0x7fffffff
c001a97e:	6a 00                	push   0x0
c001a980:	6a 00                	push   0x0
c001a982:	53                   	push   ebx
c001a983:	68 94 f6 01 c0       	push   0xc001f694
c001a988:	50                   	push   eax
c001a989:	e8 f0 20 ff ff       	call   c000ca7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a98e:	83 c4 14             	add    esp,0x14
c001a991:	56                   	push   esi
c001a992:	e8 9d 21 ff ff       	call   c000cb34 <LogicalDisk::assignDriveLetter()>
c001a997:	5a                   	pop    edx
c001a998:	0f be c0             	movsx  eax,al
c001a99b:	59                   	pop    ecx
c001a99c:	50                   	push   eax
c001a99d:	68 e0 f4 01 c0       	push   0xc001f4e0
c001a9a2:	e8 e0 fb fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001a9a7:	58                   	pop    eax
c001a9a8:	5a                   	pop    edx
c001a9a9:	56                   	push   esi
c001a9aa:	53                   	push   ebx
c001a9ab:	e8 14 10 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c001a9b0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a9b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b9:	e8 3c 14 ff ff       	call   c000bdfa <PhysicalDisk::startCache()>
c001a9be:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a9c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c8:	e8 6d fe ff ff       	call   c001a83a <ATAPI::detectMedia()>
c001a9cd:	83 c4 14             	add    esp,0x14
c001a9d0:	31 c0                	xor    eax,eax
c001a9d2:	5b                   	pop    ebx
c001a9d3:	5e                   	pop    esi
c001a9d4:	c3                   	ret    
c001a9d5:	90                   	nop

c001a9d6 <ATAPI::read(unsigned long long, int, void*)>:
c001a9d6:	55                   	push   ebp
c001a9d7:	57                   	push   edi
c001a9d8:	56                   	push   esi
c001a9d9:	53                   	push   ebx
c001a9da:	83 ec 1c             	sub    esp,0x1c
c001a9dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a9e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9e5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a9e9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9f0:	74 3c                	je     c001aa2e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a9f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a9f6:	b9 03 00 00 00       	mov    ecx,0x3
c001a9fb:	fc                   	cld    
c001a9fc:	31 c0                	xor    eax,eax
c001a9fe:	0f ce                	bswap  esi
c001aa00:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa02:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa07:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa0b:	89 e8                	mov    eax,ebp
c001aa0d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa11:	50                   	push   eax
c001aa12:	50                   	push   eax
c001aa13:	55                   	push   ebp
c001aa14:	c1 e5 0b             	shl    ebp,0xb
c001aa17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa1b:	6a 00                	push   0x0
c001aa1d:	55                   	push   ebp
c001aa1e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa22:	50                   	push   eax
c001aa23:	53                   	push   ebx
c001aa24:	e8 c3 fa ff ff       	call   c001a4ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa29:	83 c4 20             	add    esp,0x20
c001aa2c:	eb 1a                	jmp    c001aa48 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa2e:	83 ec 0c             	sub    esp,0xc
c001aa31:	53                   	push   ebx
c001aa32:	e8 03 fe ff ff       	call   c001a83a <ATAPI::detectMedia()>
c001aa37:	83 c4 10             	add    esp,0x10
c001aa3a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa41:	75 af                	jne    c001a9f2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa43:	b8 02 00 00 00       	mov    eax,0x2
c001aa48:	83 c4 1c             	add    esp,0x1c
c001aa4b:	5b                   	pop    ebx
c001aa4c:	5e                   	pop    esi
c001aa4d:	5f                   	pop    edi
c001aa4e:	5d                   	pop    ebp
c001aa4f:	c3                   	ret    

c001aa50 <SATA::close(int, int, void*)>:
c001aa50:	83 ec 0c             	sub    esp,0xc
c001aa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa5d:	85 c0                	test   eax,eax
c001aa5f:	74 0c                	je     c001aa6d <SATA::close(int, int, void*)+0x1d>
c001aa61:	83 ec 0c             	sub    esp,0xc
c001aa64:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa66:	50                   	push   eax
c001aa67:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa6a:	83 c4 10             	add    esp,0x10
c001aa6d:	31 c0                	xor    eax,eax
c001aa6f:	83 c4 0c             	add    esp,0xc
c001aa72:	c3                   	ret    
c001aa73:	90                   	nop

c001aa74 <SATA::powerSaving(PowerSavingLevel)>:
c001aa74:	c3                   	ret    
c001aa75:	90                   	nop

c001aa76 <SATA::open(int, int, void*)>:
c001aa76:	56                   	push   esi
c001aa77:	53                   	push   ebx
c001aa78:	50                   	push   eax
c001aa79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa81:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa8b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa91:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aaa9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aaaf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aab6:	e8 da cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aabb:	89 c6                	mov    esi,eax
c001aabd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aac3:	81 c6 00 10 00 00    	add    esi,0x1000
c001aac9:	e8 c7 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aace:	39 c6                	cmp    esi,eax
c001aad0:	74 10                	je     c001aae2 <SATA::open(int, int, void*)+0x6c>
c001aad2:	83 ec 0c             	sub    esp,0xc
c001aad5:	68 28 f5 01 c0       	push   0xc001f528
c001aada:	e8 28 57 ff ff       	call   c0010207 <KePanic(char const*)>
c001aadf:	83 c4 10             	add    esp,0x10
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	6a 02                	push   0x2
c001aae7:	e8 99 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001aaec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aaf2:	6a 03                	push   0x3
c001aaf4:	50                   	push   eax
c001aaf5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aafb:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001ab01:	e8 f2 ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab06:	83 c4 14             	add    esp,0x14
c001ab09:	53                   	push   ebx
c001ab0a:	e8 eb 12 ff ff       	call   c000bdfa <PhysicalDisk::startCache()>
c001ab0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab12:	e8 9b 23 ff ff       	call   c000ceb2 <createPartitionsForDisk(PhysicalDisk*)>
c001ab17:	83 c4 14             	add    esp,0x14
c001ab1a:	31 c0                	xor    eax,eax
c001ab1c:	5b                   	pop    ebx
c001ab1d:	5e                   	pop    esi
c001ab1e:	c3                   	ret    
c001ab1f:	90                   	nop

c001ab20 <SATA::SATA()>:
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab27:	83 ec 04             	sub    esp,0x4
c001ab2a:	68 00 02 00 00       	push   0x200
c001ab2f:	68 3c f5 01 c0       	push   0xc001f53c
c001ab34:	50                   	push   eax
c001ab35:	e8 58 12 ff ff       	call   c000bd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	ba ac f5 01 c0       	mov    edx,0xc001f5ac
c001ab42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab46:	89 10                	mov    DWORD PTR [eax],edx
c001ab48:	90                   	nop
c001ab49:	83 c4 0c             	add    esp,0xc
c001ab4c:	c3                   	ret    
c001ab4d:	90                   	nop

c001ab4e <SATA::access(unsigned long long, int, void*, bool)>:
c001ab4e:	55                   	push   ebp
c001ab4f:	57                   	push   edi
c001ab50:	56                   	push   esi
c001ab51:	53                   	push   ebx
c001ab52:	83 ec 2c             	sub    esp,0x2c
c001ab55:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab59:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab61:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab69:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab72:	7e 10                	jle    c001ab84 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	68 4c f5 01 c0       	push   0xc001f54c
c001ab7c:	e8 86 56 ff ff       	call   c0010207 <KePanic(char const*)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab8a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab9a:	89 d0                	mov    eax,edx
c001ab9c:	c1 e0 07             	shl    eax,0x7
c001ab9f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001aba3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001abad:	51                   	push   ecx
c001abae:	8d 42 02             	lea    eax,[edx+0x2]
c001abb1:	51                   	push   ecx
c001abb2:	c1 e0 07             	shl    eax,0x7
c001abb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abb9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001abbd:	50                   	push   eax
c001abbe:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001abc4:	e8 e7 ef ff ff       	call   c0019bb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001abc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abcd:	83 c4 10             	add    esp,0x10
c001abd0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001abd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abd9:	0f 84 4f 01 00 00    	je     c001ad2e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001abdf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abe3:	c1 e0 09             	shl    eax,0x9
c001abe6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001abeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abef:	74 0e                	je     c001abff <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001abf1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001abf7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001abfb:	89 c1                	mov    ecx,eax
c001abfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac03:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac09:	8d 42 02             	lea    eax,[edx+0x2]
c001ac0c:	c1 e0 07             	shl    eax,0x7
c001ac0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac15:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac1b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac25:	c1 e1 05             	shl    ecx,0x5
c001ac28:	01 c8                	add    eax,ecx
c001ac2a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac2e:	83 e1 01             	and    ecx,0x1
c001ac31:	89 ce                	mov    esi,ecx
c001ac33:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac35:	c1 e6 06             	shl    esi,0x6
c001ac38:	83 e1 bf             	and    ecx,0xffffffbf
c001ac3b:	09 f1                	or     ecx,esi
c001ac3d:	88 08                	mov    BYTE PTR [eax],cl
c001ac3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac41:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac47:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac4d:	89 08                	mov    DWORD PTR [eax],ecx
c001ac4f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac55:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac5b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac61:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac64:	50                   	push   eax
c001ac65:	68 90 00 00 00       	push   0x90
c001ac6a:	6a 00                	push   0x0
c001ac6c:	56                   	push   esi
c001ac6d:	e8 5e 58 fe ff       	call   c00004d0 <memset>
c001ac72:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac78:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac7c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac82:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac8a:	83 c4 10             	add    esp,0x10
c001ac8d:	48                   	dec    eax
c001ac8e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac93:	89 c1                	mov    ecx,eax
c001ac95:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac9b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001aca0:	09 c8                	or     eax,ecx
c001aca2:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001aca8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001acab:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001acb2:	66 25 00 7f          	and    ax,0x7f00
c001acb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001acba:	66 0d 27 80          	or     ax,0x8027
c001acbe:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001acc3:	66 89 06             	mov    WORD PTR [esi],ax
c001acc6:	19 c0                	sbb    eax,eax
c001acc8:	83 e0 f0             	and    eax,0xfffffff0
c001accb:	83 c0 35             	add    eax,0x35
c001acce:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001acd1:	89 e8                	mov    eax,ebp
c001acd3:	c1 e8 10             	shr    eax,0x10
c001acd6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001acd9:	89 e8                	mov    eax,ebp
c001acdb:	c1 e8 18             	shr    eax,0x18
c001acde:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ace1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ace5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ace8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acec:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001acef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acf3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001acf7:	89 d6                	mov    esi,edx
c001acf9:	31 c0                	xor    eax,eax
c001acfb:	c1 e6 07             	shl    esi,0x7
c001acfe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad02:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad08:	80 e1 88             	and    cl,0x88
c001ad0b:	74 0a                	je     c001ad17 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad0d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad12:	74 0a                	je     c001ad1e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad14:	40                   	inc    eax
c001ad15:	eb eb                	jmp    c001ad02 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad17:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad1c:	75 17                	jne    c001ad35 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	68 85 f5 01 c0       	push   0xc001f585
c001ad26:	e8 5c f8 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001ad2b:	83 c4 10             	add    esp,0x10
c001ad2e:	b8 01 00 00 00       	mov    eax,0x1
c001ad33:	eb 5d                	jmp    c001ad92 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad35:	b8 01 00 00 00       	mov    eax,0x1
c001ad3a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad3e:	c1 e2 07             	shl    edx,0x7
c001ad41:	d3 e0                	shl    eax,cl
c001ad43:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad47:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad4d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad53:	85 c8                	test   eax,ecx
c001ad55:	74 16                	je     c001ad6d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad57:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad5d:	0f ba e1 1e          	bt     ecx,0x1e
c001ad61:	73 ea                	jae    c001ad4d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad63:	83 ec 0c             	sub    esp,0xc
c001ad66:	68 93 f5 01 c0       	push   0xc001f593
c001ad6b:	eb b9                	jmp    c001ad26 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad6d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad73:	0f ba e0 1e          	bt     eax,0x1e
c001ad77:	72 b5                	jb     c001ad2e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad79:	31 c0                	xor    eax,eax
c001ad7b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad80:	75 10                	jne    c001ad92 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad82:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad88:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad92:	83 c4 2c             	add    esp,0x2c
c001ad95:	5b                   	pop    ebx
c001ad96:	5e                   	pop    esi
c001ad97:	5f                   	pop    edi
c001ad98:	5d                   	pop    ebp
c001ad99:	c3                   	ret    

c001ad9a <SATA::read(unsigned long long, int, void*)>:
c001ad9a:	57                   	push   edi
c001ad9b:	b8 04 00 00 00       	mov    eax,0x4
c001ada0:	56                   	push   esi
c001ada1:	53                   	push   ebx
c001ada2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ada6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adaa:	8d 7a ff             	lea    edi,[edx-0x1]
c001adad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001adb5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001adbb:	77 25                	ja     c001ade2 <SATA::read(unsigned long long, int, void*)+0x48>
c001adbd:	b8 06 00 00 00       	mov    eax,0x6
c001adc2:	85 f6                	test   esi,esi
c001adc4:	74 1c                	je     c001ade2 <SATA::read(unsigned long long, int, void*)+0x48>
c001adc6:	50                   	push   eax
c001adc7:	50                   	push   eax
c001adc8:	6a 00                	push   0x0
c001adca:	56                   	push   esi
c001adcb:	52                   	push   edx
c001adcc:	53                   	push   ebx
c001adcd:	51                   	push   ecx
c001adce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001add2:	e8 77 fd ff ff       	call   c001ab4e <SATA::access(unsigned long long, int, void*, bool)>
c001add7:	83 c4 20             	add    esp,0x20
c001adda:	85 c0                	test   eax,eax
c001addc:	0f 95 c0             	setne  al
c001addf:	0f b6 c0             	movzx  eax,al
c001ade2:	5b                   	pop    ebx
c001ade3:	5e                   	pop    esi
c001ade4:	5f                   	pop    edi
c001ade5:	c3                   	ret    

c001ade6 <SATA::write(unsigned long long, int, void*)>:
c001ade6:	55                   	push   ebp
c001ade7:	b8 04 00 00 00       	mov    eax,0x4
c001adec:	57                   	push   edi
c001aded:	56                   	push   esi
c001adee:	53                   	push   ebx
c001adef:	83 ec 0c             	sub    esp,0xc
c001adf2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001adf6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adfa:	8d 73 ff             	lea    esi,[ebx-0x1]
c001adfd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae01:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae05:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae0b:	77 3d                	ja     c001ae4a <SATA::write(unsigned long long, int, void*)+0x64>
c001ae0d:	b8 06 00 00 00       	mov    eax,0x6
c001ae12:	85 ed                	test   ebp,ebp
c001ae14:	74 34                	je     c001ae4a <SATA::write(unsigned long long, int, void*)+0x64>
c001ae16:	c1 e3 09             	shl    ebx,0x9
c001ae19:	01 eb                	add    ebx,ebp
c001ae1b:	89 d6                	mov    esi,edx
c001ae1d:	89 cf                	mov    edi,ecx
c001ae1f:	83 c6 01             	add    esi,0x1
c001ae22:	83 d7 00             	adc    edi,0x0
c001ae25:	50                   	push   eax
c001ae26:	50                   	push   eax
c001ae27:	6a 01                	push   0x1
c001ae29:	55                   	push   ebp
c001ae2a:	81 c5 00 02 00 00    	add    ebp,0x200
c001ae30:	6a 01                	push   0x1
c001ae32:	51                   	push   ecx
c001ae33:	52                   	push   edx
c001ae34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae38:	e8 11 fd ff ff       	call   c001ab4e <SATA::access(unsigned long long, int, void*, bool)>
c001ae3d:	83 c4 20             	add    esp,0x20
c001ae40:	89 f2                	mov    edx,esi
c001ae42:	89 f9                	mov    ecx,edi
c001ae44:	39 dd                	cmp    ebp,ebx
c001ae46:	75 d3                	jne    c001ae1b <SATA::write(unsigned long long, int, void*)+0x35>
c001ae48:	31 c0                	xor    eax,eax
c001ae4a:	83 c4 0c             	add    esp,0xc
c001ae4d:	5b                   	pop    ebx
c001ae4e:	5e                   	pop    esi
c001ae4f:	5f                   	pop    edi
c001ae50:	5d                   	pop    ebp
c001ae51:	c3                   	ret    

c001ae52 <SATAPI::write(unsigned long long, int, void*)>:
c001ae52:	b8 03 00 00 00       	mov    eax,0x3
c001ae57:	c3                   	ret    

c001ae58 <SATAPI::close(int, int, void*)>:
c001ae58:	83 ec 0c             	sub    esp,0xc
c001ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae65:	85 c0                	test   eax,eax
c001ae67:	74 0c                	je     c001ae75 <SATAPI::close(int, int, void*)+0x1d>
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae6e:	50                   	push   eax
c001ae6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	31 c0                	xor    eax,eax
c001ae77:	83 c4 0c             	add    esp,0xc
c001ae7a:	c3                   	ret    
c001ae7b:	90                   	nop

c001ae7c <SATAPI::SATAPI()>:
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae83:	83 ec 04             	sub    esp,0x4
c001ae86:	68 00 08 00 00       	push   0x800
c001ae8b:	68 dc f5 01 c0       	push   0xc001f5dc
c001ae90:	50                   	push   eax
c001ae91:	e8 fc 0e ff ff       	call   c000bd92 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae96:	83 c4 10             	add    esp,0x10
c001ae99:	ba e4 f6 01 c0       	mov    edx,0xc001f6e4
c001ae9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea2:	89 10                	mov    DWORD PTR [eax],edx
c001aea4:	90                   	nop
c001aea5:	83 c4 0c             	add    esp,0xc
c001aea8:	c3                   	ret    
c001aea9:	90                   	nop

c001aeaa <SATAPI::diskRemoved()>:
c001aeaa:	c3                   	ret    
c001aeab:	90                   	nop

c001aeac <SATAPI::diskInserted()>:
c001aeac:	83 ec 18             	sub    esp,0x18
c001aeaf:	68 e8 f5 01 c0       	push   0xc001f5e8
c001aeb4:	e8 ce f6 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001aeb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aebd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aec4:	83 c4 1c             	add    esp,0x1c
c001aec7:	c3                   	ret    

c001aec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aec8:	55                   	push   ebp
c001aec9:	57                   	push   edi
c001aeca:	56                   	push   esi
c001aecb:	53                   	push   ebx
c001aecc:	83 ec 38             	sub    esp,0x38
c001aecf:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aed3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aed7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aedb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aedf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aee3:	68 00 f6 01 c0       	push   0xc001f600
c001aee8:	e8 9a f6 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001aeed:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aef3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aef9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aefd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af07:	83 c0 02             	add    eax,0x2
c001af0a:	c1 e0 07             	shl    eax,0x7
c001af0d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af19:	c1 e0 07             	shl    eax,0x7
c001af1c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af20:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af24:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af2e:	58                   	pop    eax
c001af2f:	5a                   	pop    edx
c001af30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001af34:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001af3a:	e8 71 ec ff ff       	call   c0019bb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	b8 01 00 00 00       	mov    eax,0x1
c001af4b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af50:	0f 84 49 02 00 00    	je     c001b19f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af56:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af60:	8b 00                	mov    eax,DWORD PTR [eax]
c001af62:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af68:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af72:	c1 e1 05             	shl    ecx,0x5
c001af75:	01 c8                	add    eax,ecx
c001af77:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af79:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af7f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af85:	89 08                	mov    DWORD PTR [eax],ecx
c001af87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af8d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af93:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af99:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af9c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af9f:	50                   	push   eax
c001afa0:	68 90 00 00 00       	push   0x90
c001afa5:	6a 00                	push   0x0
c001afa7:	53                   	push   ebx
c001afa8:	e8 23 55 fe ff       	call   c00004d0 <memset>
c001afad:	b9 0c 00 00 00       	mov    ecx,0xc
c001afb2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001afb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afb8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001afbe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001afc2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001afc8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001afcc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001afd0:	48                   	dec    eax
c001afd1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001afd6:	89 c1                	mov    ecx,eax
c001afd8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001afde:	25 00 00 c0 ff       	and    eax,0xffc00000
c001afe3:	09 c8                	or     eax,ecx
c001afe5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001afeb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001afee:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aff5:	66 25 00 7f          	and    ax,0x7f00
c001aff9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001affd:	66 0d 27 80          	or     ax,0x8027
c001b001:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b005:	66 89 03             	mov    WORD PTR [ebx],ax
c001b008:	89 d0                	mov    eax,edx
c001b00a:	c1 ea 18             	shr    edx,0x18
c001b00d:	c1 e8 10             	shr    eax,0x10
c001b010:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b013:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b016:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b01a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b01d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b021:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b024:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b02f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b033:	31 c0                	xor    eax,eax
c001b035:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b03b:	80 e1 88             	and    cl,0x88
c001b03e:	74 0a                	je     c001b04a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b040:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b045:	74 0a                	je     c001b051 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b047:	40                   	inc    eax
c001b048:	eb eb                	jmp    c001b035 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b04a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b04f:	75 43                	jne    c001b094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b051:	83 ec 0c             	sub    esp,0xc
c001b054:	68 1a f6 01 c0       	push   0xc001f61a
c001b059:	e8 29 f5 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001b05e:	58                   	pop    eax
c001b05f:	5a                   	pop    edx
c001b060:	68 2f f6 01 c0       	push   0xc001f62f
c001b065:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b06b:	e8 c6 d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b070:	59                   	pop    ecx
c001b071:	5b                   	pop    ebx
c001b072:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b076:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b07c:	e8 c9 eb ff ff       	call   c0019c4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b081:	5e                   	pop    esi
c001b082:	5f                   	pop    edi
c001b083:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b087:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b08d:	e8 98 eb ff ff       	call   c0019c2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b092:	eb 48                	jmp    c001b0dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b094:	be 01 00 00 00       	mov    esi,0x1
c001b099:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b09d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b0a1:	d3 e6                	shl    esi,cl
c001b0a3:	c1 e7 07             	shl    edi,0x7
c001b0a6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b0ac:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b0b1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b0b5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b0bb:	85 c6                	test   esi,eax
c001b0bd:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b0c3:	0f 84 a3 00 00 00    	je     c001b16c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b0c9:	0f ba e0 1e          	bt     eax,0x1e
c001b0cd:	73 1a                	jae    c001b0e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b0cf:	83 ec 0c             	sub    esp,0xc
c001b0d2:	68 41 f6 01 c0       	push   0xc001f641
c001b0d7:	e8 ab f4 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	b8 01 00 00 00       	mov    eax,0x1
c001b0e4:	e9 b6 00 00 00       	jmp    c001b19f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b0e9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b0ef:	83 f8 0d             	cmp    eax,0xd
c001b0f2:	77 0a                	ja     c001b0fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	68 c8 00 00 00       	push   0xc8
c001b0fc:	eb 28                	jmp    c001b126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0fe:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b104:	83 f8 0d             	cmp    eax,0xd
c001b107:	77 0a                	ja     c001b113 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b109:	83 ec 0c             	sub    esp,0xc
c001b10c:	68 58 02 00 00       	push   0x258
c001b111:	eb 13                	jmp    c001b126 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b113:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b119:	83 f8 06             	cmp    eax,0x6
c001b11c:	77 10                	ja     c001b12e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b11e:	83 ec 0c             	sub    esp,0xc
c001b121:	68 dc 05 00 00       	push   0x5dc
c001b126:	e8 d1 89 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b132:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b135:	75 06                	jne    c001b13d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b137:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b13b:	74 15                	je     c001b152 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b13d:	83 fb 06             	cmp    ebx,0x6
c001b140:	77 10                	ja     c001b152 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b142:	83 ec 0c             	sub    esp,0xc
c001b145:	68 c4 09 00 00       	push   0x9c4
c001b14a:	e8 ad 89 ff ff       	call   c0013afc <milliTenthSleep(unsigned int)>
c001b14f:	83 c4 10             	add    esp,0x10
c001b152:	43                   	inc    ebx
c001b153:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b159:	0f 85 56 ff ff ff    	jne    c001b0b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b15f:	83 ec 0c             	sub    esp,0xc
c001b162:	68 54 f6 01 c0       	push   0xc001f654
c001b167:	e9 6b ff ff ff       	jmp    c001b0d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b16c:	0f ba e0 1e          	bt     eax,0x1e
c001b170:	73 0d                	jae    c001b17f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b172:	83 ec 0c             	sub    esp,0xc
c001b175:	68 68 f6 01 c0       	push   0xc001f668
c001b17a:	e9 58 ff ff ff       	jmp    c001b0d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b17f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b184:	74 17                	je     c001b19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b186:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b18b:	74 10                	je     c001b19d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b18d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b193:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b197:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b19b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b19d:	31 c0                	xor    eax,eax
c001b19f:	83 c4 2c             	add    esp,0x2c
c001b1a2:	5b                   	pop    ebx
c001b1a3:	5e                   	pop    esi
c001b1a4:	5f                   	pop    edi
c001b1a5:	5d                   	pop    ebp
c001b1a6:	c3                   	ret    
c001b1a7:	90                   	nop

c001b1a8 <SATAPI::eject()>:
c001b1a8:	57                   	push   edi
c001b1a9:	b9 03 00 00 00       	mov    ecx,0x3
c001b1ae:	83 ec 18             	sub    esp,0x18
c001b1b1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1b5:	fc                   	cld    
c001b1b6:	31 c0                	xor    eax,eax
c001b1b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b1ba:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b1bf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b1c4:	50                   	push   eax
c001b1c5:	6a 00                	push   0x0
c001b1c7:	6a 00                	push   0x0
c001b1c9:	6a 00                	push   0x0
c001b1cb:	6a 00                	push   0x0
c001b1cd:	6a 02                	push   0x2
c001b1cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1d3:	50                   	push   eax
c001b1d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1d8:	e8 eb fc ff ff       	call   c001aec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b1dd:	31 c0                	xor    eax,eax
c001b1df:	83 c4 38             	add    esp,0x38
c001b1e2:	5f                   	pop    edi
c001b1e3:	c3                   	ret    

c001b1e4 <SATAPI::detectMedia()>:
c001b1e4:	53                   	push   ebx
c001b1e5:	83 ec 14             	sub    esp,0x14
c001b1e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b1ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b1f2:	e8 81 23 ff ff       	call   c000d578 <VCache::writeWriteBuffer()>
c001b1f7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b201:	83 c4 18             	add    esp,0x18
c001b204:	5b                   	pop    ebx
c001b205:	e9 5e 23 ff ff       	jmp    c000d568 <VCache::invalidateReadBuffer()>

c001b20a <SATAPI::open(int, int, void*)>:
c001b20a:	56                   	push   esi
c001b20b:	53                   	push   ebx
c001b20c:	51                   	push   ecx
c001b20d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b215:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b21f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b225:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b22f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b233:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b23d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b243:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b24a:	e8 46 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b24f:	89 c6                	mov    esi,eax
c001b251:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b257:	81 c6 00 10 00 00    	add    esi,0x1000
c001b25d:	e8 33 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b262:	39 c6                	cmp    esi,eax
c001b264:	74 10                	je     c001b276 <SATAPI::open(int, int, void*)+0x6c>
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	68 7d f6 01 c0       	push   0xc001f67d
c001b26e:	e8 94 4f ff ff       	call   c0010207 <KePanic(char const*)>
c001b273:	83 c4 10             	add    esp,0x10
c001b276:	83 ec 0c             	sub    esp,0xc
c001b279:	6a 02                	push   0x2
c001b27b:	e8 05 e0 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b280:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b286:	6a 03                	push   0x3
c001b288:	50                   	push   eax
c001b289:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b28f:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b295:	e8 5e e6 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b29a:	83 c4 14             	add    esp,0x14
c001b29d:	68 74 01 00 00       	push   0x174
c001b2a2:	e8 12 c5 fe ff       	call   c00077b9 <malloc>
c001b2a7:	83 c4 0c             	add    esp,0xc
c001b2aa:	89 c6                	mov    esi,eax
c001b2ac:	6a 00                	push   0x0
c001b2ae:	68 ff ff ff 7f       	push   0x7fffffff
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 00                	push   0x0
c001b2b7:	53                   	push   ebx
c001b2b8:	68 93 f6 01 c0       	push   0xc001f693
c001b2bd:	50                   	push   eax
c001b2be:	e8 bb 17 ff ff       	call   c000ca7e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b2c3:	83 c4 14             	add    esp,0x14
c001b2c6:	56                   	push   esi
c001b2c7:	e8 68 18 ff ff       	call   c000cb34 <LogicalDisk::assignDriveLetter()>
c001b2cc:	5a                   	pop    edx
c001b2cd:	0f be c0             	movsx  eax,al
c001b2d0:	59                   	pop    ecx
c001b2d1:	50                   	push   eax
c001b2d2:	68 e0 f4 01 c0       	push   0xc001f4e0
c001b2d7:	e8 ab f2 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001b2dc:	58                   	pop    eax
c001b2dd:	5a                   	pop    edx
c001b2de:	56                   	push   esi
c001b2df:	53                   	push   ebx
c001b2e0:	e8 df 06 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c001b2e5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b2eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ee:	e8 07 0b ff ff       	call   c000bdfa <PhysicalDisk::startCache()>
c001b2f3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2fd:	e8 e2 fe ff ff       	call   c001b1e4 <SATAPI::detectMedia()>
c001b302:	83 c4 14             	add    esp,0x14
c001b305:	31 c0                	xor    eax,eax
c001b307:	5b                   	pop    ebx
c001b308:	5e                   	pop    esi
c001b309:	c3                   	ret    

c001b30a <SATAPI::read(unsigned long long, int, void*)>:
c001b30a:	57                   	push   edi
c001b30b:	56                   	push   esi
c001b30c:	53                   	push   ebx
c001b30d:	83 ec 3c             	sub    esp,0x3c
c001b310:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b314:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b318:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b31c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b320:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b324:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b328:	68 a1 f6 01 c0       	push   0xc001f6a1
c001b32d:	e8 55 f2 fe ff       	call   c000a587 <Dbg::kprintf(char const*, ...)>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	83 fe 04             	cmp    esi,0x4
c001b338:	7e 10                	jle    c001b34a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b33a:	83 ec 0c             	sub    esp,0xc
c001b33d:	68 b2 f6 01 c0       	push   0xc001f6b2
c001b342:	e8 c0 4e ff ff       	call   c0010207 <KePanic(char const*)>
c001b347:	83 c4 10             	add    esp,0x10
c001b34a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b350:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b356:	51                   	push   ecx
c001b357:	50                   	push   eax
c001b358:	83 c0 02             	add    eax,0x2
c001b35b:	c1 e0 07             	shl    eax,0x7
c001b35e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b364:	50                   	push   eax
c001b365:	52                   	push   edx
c001b366:	e8 09 e9 ff ff       	call   c0019c74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b36b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b36f:	b9 03 00 00 00       	mov    ecx,0x3
c001b374:	fc                   	cld    
c001b375:	31 c0                	xor    eax,eax
c001b377:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b379:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b37e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	6a 00                	push   0x0
c001b388:	6a 00                	push   0x0
c001b38a:	6a 00                	push   0x0
c001b38c:	6a 00                	push   0x0
c001b38e:	6a 02                	push   0x2
c001b390:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b394:	50                   	push   eax
c001b395:	53                   	push   ebx
c001b396:	e8 2d fb ff ff       	call   c001aec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b39b:	83 c4 20             	add    esp,0x20
c001b39e:	85 c0                	test   eax,eax
c001b3a0:	75 44                	jne    c001b3e6 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b3a2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b3a6:	b9 03 00 00 00       	mov    ecx,0x3
c001b3ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3b1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b3b6:	0f c8                	bswap  eax
c001b3b8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b3bc:	89 f0                	mov    eax,esi
c001b3be:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3c2:	50                   	push   eax
c001b3c3:	56                   	push   esi
c001b3c4:	c1 e6 0b             	shl    esi,0xb
c001b3c7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b3cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3d3:	56                   	push   esi
c001b3d4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b3d8:	50                   	push   eax
c001b3d9:	53                   	push   ebx
c001b3da:	e8 e9 fa ff ff       	call   c001aec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b3df:	83 c4 20             	add    esp,0x20
c001b3e2:	85 c0                	test   eax,eax
c001b3e4:	74 14                	je     c001b3fa <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b3e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3ea:	83 ec 0c             	sub    esp,0xc
c001b3ed:	53                   	push   ebx
c001b3ee:	e8 f1 fd ff ff       	call   c001b1e4 <SATAPI::detectMedia()>
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3fa:	83 c4 30             	add    esp,0x30
c001b3fd:	5b                   	pop    ebx
c001b3fe:	5e                   	pop    esi
c001b3ff:	5f                   	pop    edi
c001b400:	c3                   	ret    
c001b401:	90                   	nop

c001b402 <IOAPIC::close(int, int, void*)>:
c001b402:	b8 00 00 00 00       	mov    eax,0x0
c001b407:	c3                   	ret    

c001b408 <apicGetBase()>:
c001b408:	55                   	push   ebp
c001b409:	89 e5                	mov    ebp,esp
c001b40b:	83 ec 18             	sub    esp,0x18
c001b40e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b413:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b419:	83 e0 08             	and    eax,0x8
c001b41c:	84 c0                	test   al,al
c001b41e:	75 07                	jne    c001b427 <apicGetBase()+0x1f>
c001b420:	b8 00 00 00 00       	mov    eax,0x0
c001b425:	eb 21                	jmp    c001b448 <apicGetBase()+0x40>
c001b427:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b42c:	83 ec 08             	sub    esp,0x8
c001b42f:	6a 1b                	push   0x1b
c001b431:	50                   	push   eax
c001b432:	e8 bb b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b437:	83 c4 10             	add    esp,0x10
c001b43a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b43d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b440:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b443:	25 00 00 ff ff       	and    eax,0xffff0000
c001b448:	c9                   	leave  
c001b449:	c3                   	ret    

c001b44a <IOAPIC::IOAPIC()>:
c001b44a:	83 ec 0c             	sub    esp,0xc
c001b44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b451:	83 ec 08             	sub    esp,0x8
c001b454:	68 14 f7 01 c0       	push   0xc001f714
c001b459:	50                   	push   eax
c001b45a:	e8 fd 06 ff ff       	call   c000bb5c <Device::Device(char const*)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	ba 24 f7 01 c0       	mov    edx,0xc001f724
c001b467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46b:	89 10                	mov    DWORD PTR [eax],edx
c001b46d:	90                   	nop
c001b46e:	83 c4 0c             	add    esp,0xc
c001b471:	c3                   	ret    

c001b472 <apicOpen()>:
c001b472:	55                   	push   ebp
c001b473:	89 e5                	mov    ebp,esp
c001b475:	53                   	push   ebx
c001b476:	83 ec 34             	sub    esp,0x34
c001b479:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b47e:	83 f0 01             	xor    eax,0x1
c001b481:	84 c0                	test   al,al
c001b483:	0f 84 9d 00 00 00    	je     c001b526 <apicOpen()+0xb4>
c001b489:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b48d:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b492:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b495:	0f 83 84 00 00 00    	jae    c001b51f <apicOpen()+0xad>
c001b49b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b4a2:	83 ec 0c             	sub    esp,0xc
c001b4a5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b4a8:	e8 0c c3 fe ff       	call   c00077b9 <malloc>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	89 c3                	mov    ebx,eax
c001b4b2:	83 ec 0c             	sub    esp,0xc
c001b4b5:	53                   	push   ebx
c001b4b6:	e8 8f ff ff ff       	call   c001b44a <IOAPIC::IOAPIC()>
c001b4bb:	83 c4 10             	add    esp,0x10
c001b4be:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b4c1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4c4:	25 ff 00 00 00       	and    eax,0xff
c001b4c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b4cc:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b4d3:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b4d8:	40                   	inc    eax
c001b4d9:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b4de:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b4e3:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b4e9:	83 ec 08             	sub    esp,0x8
c001b4ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4ef:	50                   	push   eax
c001b4f0:	e8 cf 04 ff ff       	call   c000b9c4 <Device::addChild(Device*)>
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4fd:	83 c0 08             	add    eax,0x8
c001b500:	8b 10                	mov    edx,DWORD PTR [eax]
c001b502:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b505:	25 ff 00 00 00       	and    eax,0xff
c001b50a:	6a 00                	push   0x0
c001b50c:	6a 00                	push   0x0
c001b50e:	50                   	push   eax
c001b50f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b512:	ff d2                	call   edx
c001b514:	83 c4 10             	add    esp,0x10
c001b517:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b51a:	e9 6e ff ff ff       	jmp    c001b48d <apicOpen()+0x1b>
c001b51f:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b526:	e8 dd fe ff ff       	call   c001b408 <apicGetBase()>
c001b52b:	05 f0 00 00 00       	add    eax,0xf0
c001b530:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b533:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b536:	8b 00                	mov    eax,DWORD PTR [eax]
c001b538:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b53b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b542:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b549:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b54c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b54f:	89 10                	mov    DWORD PTR [eax],edx
c001b551:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b558:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b55d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b560:	7d 70                	jge    c001b5d2 <apicOpen()+0x160>
c001b562:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b565:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b56c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b56f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b572:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b579:	c1 e8 08             	shr    eax,0x8
c001b57c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b580:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b583:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b58a:	c1 e8 18             	shr    eax,0x18
c001b58d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b590:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b594:	75 37                	jne    c001b5cd <apicOpen()+0x15b>
c001b596:	e8 6d fe ff ff       	call   c001b408 <apicGetBase()>
c001b59b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b59f:	75 07                	jne    c001b5a8 <apicOpen()+0x136>
c001b5a1:	ba 60 03 00 00       	mov    edx,0x360
c001b5a6:	eb 05                	jmp    c001b5ad <apicOpen()+0x13b>
c001b5a8:	ba 50 03 00 00       	mov    edx,0x350
c001b5ad:	01 d0                	add    eax,edx
c001b5af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b5b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5b7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b5ba:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b5c1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b5c5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b5c8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b5cb:	89 10                	mov    DWORD PTR [eax],edx
c001b5cd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b5d0:	eb 86                	jmp    c001b558 <apicOpen()+0xe6>
c001b5d2:	90                   	nop
c001b5d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b5d6:	c9                   	leave  
c001b5d7:	c3                   	ret    

c001b5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b5d8:	55                   	push   ebp
c001b5d9:	89 e5                	mov    ebp,esp
c001b5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5e4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5e7:	72 1d                	jb     c001b606 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b5f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5f5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5fb:	01 d0                	add    eax,edx
c001b5fd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b600:	73 04                	jae    c001b606 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b602:	b0 01                	mov    al,0x1
c001b604:	eb 02                	jmp    c001b608 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b606:	b0 00                	mov    al,0x0
c001b608:	5d                   	pop    ebp
c001b609:	c3                   	ret    

c001b60a <IOAPIC::read(int)>:
c001b60a:	55                   	push   ebp
c001b60b:	89 e5                	mov    ebp,esp
c001b60d:	83 ec 10             	sub    esp,0x10
c001b610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b613:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b619:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b61c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b61f:	31 d2                	xor    edx,edx
c001b621:	88 c2                	mov    dl,al
c001b623:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b626:	89 10                	mov    DWORD PTR [eax],edx
c001b628:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b62b:	83 c0 10             	add    eax,0x10
c001b62e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b630:	c9                   	leave  
c001b631:	c3                   	ret    

c001b632 <IOAPIC::open(int, int, void*)>:
c001b632:	55                   	push   ebp
c001b633:	89 e5                	mov    ebp,esp
c001b635:	57                   	push   edi
c001b636:	56                   	push   esi
c001b637:	53                   	push   ebx
c001b638:	83 ec 04             	sub    esp,0x4
c001b63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b63e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b641:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b64a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b650:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b663:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b669:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b673:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b67c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b685:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b68b:	89 c6                	mov    esi,eax
c001b68d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b693:	89 d0                	mov    eax,edx
c001b695:	ba 00 00 00 00       	mov    edx,0x0
c001b69a:	89 c7                	mov    edi,eax
c001b69c:	83 e7 ff             	and    edi,0xffffffff
c001b69f:	89 f9                	mov    ecx,edi
c001b6a1:	89 d0                	mov    eax,edx
c001b6a3:	25 ff 00 00 00       	and    eax,0xff
c001b6a8:	89 c3                	mov    ebx,eax
c001b6aa:	89 c8                	mov    eax,ecx
c001b6ac:	89 da                	mov    edx,ebx
c001b6ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6b1:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b6b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b6b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b6bc:	83 e0 00             	and    eax,0x0
c001b6bf:	09 d0                	or     eax,edx
c001b6c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6ce:	8d 50 01             	lea    edx,[eax+0x1]
c001b6d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b6d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b6da:	31 d2                	xor    edx,edx
c001b6dc:	88 c2                	mov    dl,al
c001b6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6e1:	83 c2 08             	add    edx,0x8
c001b6e4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b6e8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b6ee:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b6f4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6f8:	6a 01                	push   0x1
c001b6fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6fd:	e8 08 ff ff ff       	call   c001b60a <IOAPIC::read(int)>
c001b702:	83 c4 08             	add    esp,0x8
c001b705:	c1 f8 10             	sar    eax,0x10
c001b708:	25 ff 00 00 00       	and    eax,0xff
c001b70d:	8d 50 01             	lea    edx,[eax+0x1]
c001b710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b713:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b719:	b8 00 00 00 00       	mov    eax,0x0
c001b71e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b721:	5b                   	pop    ebx
c001b722:	5e                   	pop    esi
c001b723:	5f                   	pop    edi
c001b724:	5d                   	pop    ebp
c001b725:	c3                   	ret    

c001b726 <IOAPIC::write(int, int)>:
c001b726:	55                   	push   ebp
c001b727:	89 e5                	mov    ebp,esp
c001b729:	83 ec 10             	sub    esp,0x10
c001b72c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b72f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b735:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b73b:	31 d2                	xor    edx,edx
c001b73d:	88 c2                	mov    dl,al
c001b73f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b742:	89 10                	mov    DWORD PTR [eax],edx
c001b744:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b747:	8d 50 10             	lea    edx,[eax+0x10]
c001b74a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b74d:	89 02                	mov    DWORD PTR [edx],eax
c001b74f:	90                   	nop
c001b750:	c9                   	leave  
c001b751:	c3                   	ret    

c001b752 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b752:	55                   	push   ebp
c001b753:	89 e5                	mov    ebp,esp
c001b755:	53                   	push   ebx
c001b756:	83 ec 2c             	sub    esp,0x2c
c001b759:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b75c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b75f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b762:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b765:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b768:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b76b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b76e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b771:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b774:	88 d8                	mov    al,bl
c001b776:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b779:	88 c8                	mov    al,cl
c001b77b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b77e:	88 d0                	mov    al,dl
c001b780:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b783:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b786:	25 ff 00 00 00       	and    eax,0xff
c001b78b:	83 c0 08             	add    eax,0x8
c001b78e:	01 c0                	add    eax,eax
c001b790:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b793:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b796:	25 ff 00 00 00       	and    eax,0xff
c001b79b:	83 c0 08             	add    eax,0x8
c001b79e:	01 c0                	add    eax,eax
c001b7a0:	40                   	inc    eax
c001b7a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b7a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7a7:	50                   	push   eax
c001b7a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7ab:	e8 5a fe ff ff       	call   c001b60a <IOAPIC::read(int)>
c001b7b0:	83 c4 08             	add    esp,0x8
c001b7b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b7b6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b7bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b7c0:	c1 e0 18             	shl    eax,0x18
c001b7c3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b7c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b7c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b7cc:	52                   	push   edx
c001b7cd:	50                   	push   eax
c001b7ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7d1:	e8 50 ff ff ff       	call   c001b726 <IOAPIC::write(int, int)>
c001b7d6:	83 c4 0c             	add    esp,0xc
c001b7d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7dc:	50                   	push   eax
c001b7dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7e0:	e8 25 fe ff ff       	call   c001b60a <IOAPIC::read(int)>
c001b7e5:	83 c4 08             	add    esp,0x8
c001b7e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b7eb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b7f2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7f9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b800:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b804:	74 09                	je     c001b80f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b806:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b80d:	eb 07                	jmp    c001b816 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b80f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b816:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b81a:	74 09                	je     c001b825 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b81c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b823:	eb 07                	jmp    c001b82c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b825:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b82c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b833:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b836:	25 ff 00 00 00       	and    eax,0xff
c001b83b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b83e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b841:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b844:	52                   	push   edx
c001b845:	50                   	push   eax
c001b846:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b849:	e8 d8 fe ff ff       	call   c001b726 <IOAPIC::write(int, int)>
c001b84e:	83 c4 0c             	add    esp,0xc
c001b851:	90                   	nop
c001b852:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b855:	c9                   	leave  
c001b856:	c3                   	ret    
c001b857:	90                   	nop

c001b858 <APICTimer::close(int, int, void*)>:
c001b858:	b8 00 00 00 00       	mov    eax,0x0
c001b85d:	c3                   	ret    
c001b85e:	66 90                	xchg   ax,ax

c001b860 <apicTimerHandler(regs*, void*)>:
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b867:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b869:	b8 10 27 00 00       	mov    eax,0x2710
c001b86e:	ba 00 00 00 00       	mov    edx,0x0
c001b873:	f7 f1                	div    ecx
c001b875:	83 ec 0c             	sub    esp,0xc
c001b878:	50                   	push   eax
c001b879:	e8 1a 1a ff ff       	call   c000d298 <timerHandler(unsigned int)>
c001b87e:	83 c4 10             	add    esp,0x10
c001b881:	90                   	nop
c001b882:	83 c4 0c             	add    esp,0xc
c001b885:	c3                   	ret    
c001b886:	66 90                	xchg   ax,ax

c001b888 <APICTimer::open(int, int, void*)>:
c001b888:	83 ec 0c             	sub    esp,0xc
c001b88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b891:	83 c0 24             	add    eax,0x24
c001b894:	8b 00                	mov    eax,DWORD PTR [eax]
c001b896:	83 ec 08             	sub    esp,0x8
c001b899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8a1:	ff d0                	call   eax
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8bc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b8c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b8cc:	83 ec 0c             	sub    esp,0xc
c001b8cf:	51                   	push   ecx
c001b8d0:	6a 01                	push   0x1
c001b8d2:	68 60 b8 01 c0       	push   0xc001b860
c001b8d7:	52                   	push   edx
c001b8d8:	50                   	push   eax
c001b8d9:	e8 92 00 ff ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b8de:	83 c4 20             	add    esp,0x20
c001b8e1:	89 c2                	mov    edx,eax
c001b8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b8ed:	b8 00 00 00 00       	mov    eax,0x0
c001b8f2:	83 c4 0c             	add    esp,0xc
c001b8f5:	c3                   	ret    
c001b8f6:	66 90                	xchg   ax,ax

c001b8f8 <APICTimer::write(int)>:
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	83 ec 0c             	sub    esp,0xc
c001b8fe:	68 48 f7 01 c0       	push   0xc001f748
c001b903:	e8 ff 48 ff ff       	call   c0010207 <KePanic(char const*)>
c001b908:	83 c4 10             	add    esp,0x10
c001b90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b913:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b919:	90                   	nop
c001b91a:	83 c4 0c             	add    esp,0xc
c001b91d:	c3                   	ret    
c001b91e:	66 90                	xchg   ax,ax

c001b920 <APICTimer::APICTimer()>:
c001b920:	83 ec 0c             	sub    esp,0xc
c001b923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b927:	83 ec 08             	sub    esp,0x8
c001b92a:	68 58 f7 01 c0       	push   0xc001f758
c001b92f:	50                   	push   eax
c001b930:	e8 97 18 ff ff       	call   c000d1cc <Timer::Timer(char const*)>
c001b935:	83 c4 10             	add    esp,0x10
c001b938:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c001b93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b941:	89 10                	mov    DWORD PTR [eax],edx
c001b943:	90                   	nop
c001b944:	83 c4 0c             	add    esp,0xc
c001b947:	c3                   	ret    

c001b948 <PIT::write(int)>:
c001b948:	83 ec 10             	sub    esp,0x10
c001b94b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b94f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b953:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b95d:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b962:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b967:	99                   	cdq    
c001b968:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b96c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b970:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b977:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b97c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b980:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b985:	ee                   	out    dx,al
c001b986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b98a:	25 ff 00 00 00       	and    eax,0xff
c001b98f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b996:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b99a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b99e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b9a3:	ee                   	out    dx,al
c001b9a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9a8:	c1 f8 08             	sar    eax,0x8
c001b9ab:	25 ff 00 00 00       	and    eax,0xff
c001b9b0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b9b7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b9bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b9bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b9c4:	ee                   	out    dx,al
c001b9c5:	90                   	nop
c001b9c6:	83 c4 10             	add    esp,0x10
c001b9c9:	c3                   	ret    
c001b9ca:	66 90                	xchg   ax,ax

c001b9cc <pitHandler(regs*, void*)>:
c001b9cc:	83 ec 0c             	sub    esp,0xc
c001b9cf:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b9d5:	b8 10 27 00 00       	mov    eax,0x2710
c001b9da:	99                   	cdq    
c001b9db:	f7 f9                	idiv   ecx
c001b9dd:	83 ec 0c             	sub    esp,0xc
c001b9e0:	50                   	push   eax
c001b9e1:	e8 b2 18 ff ff       	call   c000d298 <timerHandler(unsigned int)>
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	90                   	nop
c001b9ea:	83 c4 0c             	add    esp,0xc
c001b9ed:	c3                   	ret    
c001b9ee:	66 90                	xchg   ax,ax

c001b9f0 <PIT::open(int, int, void*)>:
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f9:	83 c0 24             	add    eax,0x24
c001b9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9fe:	83 ec 08             	sub    esp,0x8
c001ba01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba09:	ff d0                	call   eax
c001ba0b:	83 c4 10             	add    esp,0x10
c001ba0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba12:	83 ec 0c             	sub    esp,0xc
c001ba15:	6a 00                	push   0x0
c001ba17:	6a 01                	push   0x1
c001ba19:	68 cc b9 01 c0       	push   0xc001b9cc
c001ba1e:	6a 00                	push   0x0
c001ba20:	50                   	push   eax
c001ba21:	e8 4a ff fe ff       	call   c000b970 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba26:	83 c4 20             	add    esp,0x20
c001ba29:	89 c2                	mov    edx,eax
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba35:	b8 00 00 00 00       	mov    eax,0x0
c001ba3a:	83 c4 0c             	add    esp,0xc
c001ba3d:	c3                   	ret    
c001ba3e:	66 90                	xchg   ax,ax

c001ba40 <PIT::close(int, int, void*)>:
c001ba40:	83 ec 0c             	sub    esp,0xc
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba55:	6a 01                	push   0x1
c001ba57:	68 cc b9 01 c0       	push   0xc001b9cc
c001ba5c:	6a 00                	push   0x0
c001ba5e:	50                   	push   eax
c001ba5f:	e8 42 ff fe ff       	call   c000b9a6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba64:	83 c4 10             	add    esp,0x10
c001ba67:	b8 00 00 00 00       	mov    eax,0x0
c001ba6c:	83 c4 0c             	add    esp,0xc
c001ba6f:	c3                   	ret    

c001ba70 <PIT::PIT()>:
c001ba70:	83 ec 0c             	sub    esp,0xc
c001ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba77:	83 ec 08             	sub    esp,0x8
c001ba7a:	68 94 f7 01 c0       	push   0xc001f794
c001ba7f:	50                   	push   eax
c001ba80:	e8 47 17 ff ff       	call   c000d1cc <Timer::Timer(char const*)>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	ba bc f7 01 c0       	mov    edx,0xc001f7bc
c001ba8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba91:	89 10                	mov    DWORD PTR [eax],edx
c001ba93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba9d:	31 d2                	xor    edx,edx
c001ba9f:	88 c2                	mov    dl,al
c001baa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001baac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bab6:	31 d2                	xor    edx,edx
c001bab8:	88 c2                	mov    dl,al
c001baba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babe:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bacd:	8d 50 01             	lea    edx,[eax+0x1]
c001bad0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bad4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bada:	31 d2                	xor    edx,edx
c001badc:	88 c2                	mov    dl,al
c001bade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bae6:	83 e1 3f             	and    ecx,0x3f
c001bae9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001baed:	90                   	nop
c001baee:	83 c4 0c             	add    esp,0xc
c001baf1:	c3                   	ret    
c001baf2:	66 90                	xchg   ax,ax
c001baf4:	66 90                	xchg   ax,ax
c001baf6:	66 90                	xchg   ax,ax
c001baf8:	66 90                	xchg   ax,ax
c001bafa:	66 90                	xchg   ax,ax
c001bafc:	66 90                	xchg   ax,ax
c001bafe:	66 90                	xchg   ax,ax

c001bb00 <avxDetect>:
c001bb00:	b8 01 00 00 00       	mov    eax,0x1
c001bb05:	0f a2                	cpuid  
c001bb07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb0d:	74 15                	je     c001bb24 <avxDetect.noAVX>
c001bb0f:	b8 01 00 00 00       	mov    eax,0x1
c001bb14:	0f a2                	cpuid  
c001bb16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb1c:	74 06                	je     c001bb24 <avxDetect.noAVX>
c001bb1e:	b8 01 00 00 00       	mov    eax,0x1
c001bb23:	c3                   	ret    

c001bb24 <avxDetect.noAVX>:
c001bb24:	b8 00 00 00 00       	mov    eax,0x0
c001bb29:	c3                   	ret    

c001bb2a <avxSave>:
c001bb2a:	53                   	push   ebx
c001bb2b:	52                   	push   edx
c001bb2c:	31 c0                	xor    eax,eax
c001bb2e:	48                   	dec    eax
c001bb2f:	89 c2                	mov    edx,eax
c001bb31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb35:	0f ae 23             	xsave  [ebx]
c001bb38:	5a                   	pop    edx
c001bb39:	5b                   	pop    ebx
c001bb3a:	c3                   	ret    

c001bb3b <avxLoad>:
c001bb3b:	53                   	push   ebx
c001bb3c:	52                   	push   edx
c001bb3d:	31 c0                	xor    eax,eax
c001bb3f:	48                   	dec    eax
c001bb40:	89 c2                	mov    edx,eax
c001bb42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb46:	0f ae 2b             	xrstor [ebx]
c001bb49:	5a                   	pop    edx
c001bb4a:	5b                   	pop    ebx
c001bb4b:	c3                   	ret    

c001bb4c <avxInit>:
c001bb4c:	e8 b7 02 00 00       	call   c001be08 <sseInit>
c001bb51:	50                   	push   eax
c001bb52:	51                   	push   ecx
c001bb53:	0f 20 e0             	mov    eax,cr4
c001bb56:	0d 00 00 04 00       	or     eax,0x40000
c001bb5b:	0f 22 e0             	mov    cr4,eax
c001bb5e:	31 c9                	xor    ecx,ecx
c001bb60:	0f 01 d0             	xgetbv 
c001bb63:	0d 07 00 00 00       	or     eax,0x7
c001bb68:	0f 01 d1             	xsetbv 
c001bb6b:	59                   	pop    ecx
c001bb6c:	58                   	pop    eax
c001bb6d:	c3                   	ret    

c001bb6e <avxClose>:
c001bb6e:	c3                   	ret    

c001bb6f <wouldSheSayYes>:
c001bb6f:	c3                   	ret    
c001bb70:	49                   	dec    ecx
c001bb71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb79:	75 20                	jne    c001bb9b <isr0+0xb>
c001bb7b:	4e                   	dec    esi
c001bb7c:	79 61                	jns    c001bbdf <isr7+0x3>
c001bb7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb83:	66 90                	xchg   ax,ax
c001bb85:	66 90                	xchg   ax,ax
c001bb87:	66 90                	xchg   ax,ax
c001bb89:	66 90                	xchg   ax,ax
c001bb8b:	66 90                	xchg   ax,ax
c001bb8d:	66 90                	xchg   ax,ax
c001bb8f:	90                   	nop

c001bb90 <isr0>:
c001bb90:	fa                   	cli    
c001bb91:	68 00 00 00 00       	push   0x0
c001bb96:	68 00 00 00 00       	push   0x0
c001bb9b:	e9 44 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bba0 <isr1>:
c001bba0:	fa                   	cli    
c001bba1:	6a 00                	push   0x0
c001bba3:	6a 01                	push   0x1
c001bba5:	e9 3a 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbaa <isr2>:
c001bbaa:	fa                   	cli    
c001bbab:	6a 00                	push   0x0
c001bbad:	6a 02                	push   0x2
c001bbaf:	e9 30 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbb4 <isr3>:
c001bbb4:	fa                   	cli    
c001bbb5:	6a 00                	push   0x0
c001bbb7:	6a 03                	push   0x3
c001bbb9:	e9 26 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbbe <isr4>:
c001bbbe:	fa                   	cli    
c001bbbf:	6a 00                	push   0x0
c001bbc1:	6a 04                	push   0x4
c001bbc3:	e9 1c 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbc8 <isr5>:
c001bbc8:	fa                   	cli    
c001bbc9:	6a 00                	push   0x0
c001bbcb:	6a 05                	push   0x5
c001bbcd:	e9 12 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbd2 <isr6>:
c001bbd2:	fa                   	cli    
c001bbd3:	6a 00                	push   0x0
c001bbd5:	6a 06                	push   0x6
c001bbd7:	e9 08 01 00 00       	jmp    c001bce4 <int_common_stub>

c001bbdc <isr7>:
c001bbdc:	fa                   	cli    
c001bbdd:	6a 00                	push   0x0
c001bbdf:	6a 07                	push   0x7
c001bbe1:	e9 fe 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bbe6 <isr8>:
c001bbe6:	fa                   	cli    
c001bbe7:	6a 08                	push   0x8
c001bbe9:	e9 f6 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bbee <isr9>:
c001bbee:	fa                   	cli    
c001bbef:	6a 00                	push   0x0
c001bbf1:	6a 09                	push   0x9
c001bbf3:	e9 ec 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bbf8 <isr10>:
c001bbf8:	fa                   	cli    
c001bbf9:	6a 0a                	push   0xa
c001bbfb:	e9 e4 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc00 <isr11>:
c001bc00:	fa                   	cli    
c001bc01:	6a 0b                	push   0xb
c001bc03:	e9 dc 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc08 <isr12>:
c001bc08:	fa                   	cli    
c001bc09:	6a 0c                	push   0xc
c001bc0b:	e9 d4 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc10 <isr13>:
c001bc10:	fa                   	cli    
c001bc11:	6a 0d                	push   0xd
c001bc13:	e9 cc 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc18 <isr14>:
c001bc18:	fa                   	cli    
c001bc19:	6a 0e                	push   0xe
c001bc1b:	e9 c4 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc20 <isr15>:
c001bc20:	fa                   	cli    
c001bc21:	6a 00                	push   0x0
c001bc23:	6a 0f                	push   0xf
c001bc25:	e9 ba 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc2a <isr16>:
c001bc2a:	fa                   	cli    
c001bc2b:	6a 00                	push   0x0
c001bc2d:	6a 10                	push   0x10
c001bc2f:	e9 b0 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc34 <isr17>:
c001bc34:	fa                   	cli    
c001bc35:	6a 00                	push   0x0
c001bc37:	6a 11                	push   0x11
c001bc39:	e9 a6 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc3e <isr18>:
c001bc3e:	fa                   	cli    
c001bc3f:	6a 00                	push   0x0
c001bc41:	6a 12                	push   0x12
c001bc43:	e9 9c 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc48 <irq3>:
c001bc48:	fa                   	cli    
c001bc49:	6a 00                	push   0x0
c001bc4b:	6a 23                	push   0x23
c001bc4d:	e9 92 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc52 <irq4>:
c001bc52:	fa                   	cli    
c001bc53:	6a 00                	push   0x0
c001bc55:	6a 24                	push   0x24
c001bc57:	e9 88 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc5c <irq5>:
c001bc5c:	fa                   	cli    
c001bc5d:	6a 00                	push   0x0
c001bc5f:	6a 25                	push   0x25
c001bc61:	e9 7e 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc66 <irq6>:
c001bc66:	fa                   	cli    
c001bc67:	6a 00                	push   0x0
c001bc69:	6a 26                	push   0x26
c001bc6b:	e9 74 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc70 <irq7>:
c001bc70:	fa                   	cli    
c001bc71:	6a 00                	push   0x0
c001bc73:	6a 27                	push   0x27
c001bc75:	e9 6a 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc7a <irq8>:
c001bc7a:	fa                   	cli    
c001bc7b:	6a 00                	push   0x0
c001bc7d:	6a 28                	push   0x28
c001bc7f:	e9 60 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc84 <irq9>:
c001bc84:	fa                   	cli    
c001bc85:	6a 00                	push   0x0
c001bc87:	6a 29                	push   0x29
c001bc89:	e9 56 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc8e <irq10>:
c001bc8e:	fa                   	cli    
c001bc8f:	6a 00                	push   0x0
c001bc91:	6a 2a                	push   0x2a
c001bc93:	e9 4c 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bc98 <irq11>:
c001bc98:	fa                   	cli    
c001bc99:	6a 00                	push   0x0
c001bc9b:	6a 2b                	push   0x2b
c001bc9d:	e9 42 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bca2 <irq12>:
c001bca2:	fa                   	cli    
c001bca3:	6a 00                	push   0x0
c001bca5:	6a 2c                	push   0x2c
c001bca7:	e9 38 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bcac <irq13>:
c001bcac:	fa                   	cli    
c001bcad:	6a 00                	push   0x0
c001bcaf:	6a 2d                	push   0x2d
c001bcb1:	e9 2e 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bcb6 <irq14>:
c001bcb6:	fa                   	cli    
c001bcb7:	6a 00                	push   0x0
c001bcb9:	6a 2e                	push   0x2e
c001bcbb:	e9 24 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bcc0 <irq15>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 00                	push   0x0
c001bcc3:	6a 2f                	push   0x2f
c001bcc5:	e9 1a 00 00 00       	jmp    c001bce4 <int_common_stub>

c001bcca <irq1>:
c001bcca:	fa                   	cli    
c001bccb:	6a 00                	push   0x0
c001bccd:	6a 21                	push   0x21
c001bccf:	eb 13                	jmp    c001bce4 <int_common_stub>

c001bcd1 <irq2>:
c001bcd1:	fa                   	cli    
c001bcd2:	6a 00                	push   0x0
c001bcd4:	6a 22                	push   0x22
c001bcd6:	eb 0c                	jmp    c001bce4 <int_common_stub>

c001bcd8 <isr96>:
c001bcd8:	6a 00                	push   0x0
c001bcda:	6a 60                	push   0x60
c001bcdc:	fb                   	sti    
c001bcdd:	eb 37                	jmp    c001bd16 <syscall_common_stub>

c001bcdf <irq0>:
c001bcdf:	fa                   	cli    
c001bce0:	6a 00                	push   0x0
c001bce2:	6a 20                	push   0x20

c001bce4 <int_common_stub>:
c001bce4:	60                   	pusha  
c001bce5:	1e                   	push   ds
c001bce6:	06                   	push   es
c001bce7:	0f a0                	push   fs
c001bce9:	0f a8                	push   gs
c001bceb:	66 b8 10 00          	mov    ax,0x10
c001bcef:	66 8e d8             	mov    ds,ax
c001bcf2:	66 8e c0             	mov    es,ax
c001bcf5:	66 8e e0             	mov    fs,ax
c001bcf8:	66 8e e8             	mov    gs,ax
c001bcfb:	54                   	push   esp
c001bcfc:	fc                   	cld    
c001bcfd:	e8 6e 01 ff ff       	call   c000be70 <int_handler>
c001bd02:	81 c4 04 00 00 00    	add    esp,0x4
c001bd08:	0f a9                	pop    gs
c001bd0a:	0f a1                	pop    fs
c001bd0c:	07                   	pop    es
c001bd0d:	1f                   	pop    ds
c001bd0e:	61                   	popa   
c001bd0f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd15:	cf                   	iret   

c001bd16 <syscall_common_stub>:
c001bd16:	60                   	pusha  
c001bd17:	1e                   	push   ds
c001bd18:	06                   	push   es
c001bd19:	0f a0                	push   fs
c001bd1b:	0f a8                	push   gs
c001bd1d:	66 b8 10 00          	mov    ax,0x10
c001bd21:	66 8e d8             	mov    ds,ax
c001bd24:	66 8e c0             	mov    es,ax
c001bd27:	66 8e e0             	mov    fs,ax
c001bd2a:	66 8e e8             	mov    gs,ax
c001bd2d:	54                   	push   esp
c001bd2e:	fc                   	cld    
c001bd2f:	e8 3c 01 ff ff       	call   c000be70 <int_handler>
c001bd34:	81 c4 04 00 00 00    	add    esp,0x4
c001bd3a:	0f a9                	pop    gs
c001bd3c:	0f a1                	pop    fs
c001bd3e:	07                   	pop    es
c001bd3f:	1f                   	pop    ds
c001bd40:	e8 16 4a ff ff       	call   c001075b <KiCheckSignalZ>
c001bd45:	3d 00 00 00 00       	cmp    eax,0x0
c001bd4a:	74 1d                	je     c001bd69 <syscall_common_stub.skipSignals>
c001bd4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bd50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bd54:	89 e3                	mov    ebx,esp
c001bd56:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bd59:	51                   	push   ecx
c001bd5a:	68 71 bd 01 c0       	push   0xc001bd71
c001bd5f:	89 dc                	mov    esp,ebx
c001bd61:	61                   	popa   
c001bd62:	81 c4 08 00 00 00    	add    esp,0x8
c001bd68:	cf                   	iret   

c001bd69 <syscall_common_stub.skipSignals>:
c001bd69:	61                   	popa   
c001bd6a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd70:	cf                   	iret   

c001bd71 <irq16>:
c001bd71:	fa                   	cli    
c001bd72:	6a 00                	push   0x0
c001bd74:	6a 30                	push   0x30
c001bd76:	e9 69 ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bd7b <irq17>:
c001bd7b:	fa                   	cli    
c001bd7c:	6a 00                	push   0x0
c001bd7e:	6a 31                	push   0x31
c001bd80:	e9 5f ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bd85 <irq18>:
c001bd85:	fa                   	cli    
c001bd86:	6a 00                	push   0x0
c001bd88:	6a 32                	push   0x32
c001bd8a:	e9 55 ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bd8f <irq19>:
c001bd8f:	fa                   	cli    
c001bd90:	6a 00                	push   0x0
c001bd92:	6a 33                	push   0x33
c001bd94:	e9 4b ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bd99 <irq20>:
c001bd99:	fa                   	cli    
c001bd9a:	6a 00                	push   0x0
c001bd9c:	6a 34                	push   0x34
c001bd9e:	e9 41 ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bda3 <irq21>:
c001bda3:	fa                   	cli    
c001bda4:	6a 00                	push   0x0
c001bda6:	6a 35                	push   0x35
c001bda8:	e9 37 ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bdad <irq22>:
c001bdad:	fa                   	cli    
c001bdae:	6a 00                	push   0x0
c001bdb0:	6a 36                	push   0x36
c001bdb2:	e9 2d ff ff ff       	jmp    c001bce4 <int_common_stub>

c001bdb7 <irq23>:
c001bdb7:	fa                   	cli    
c001bdb8:	6a 00                	push   0x0
c001bdba:	6a 37                	push   0x37
c001bdbc:	e9 23 ff ff ff       	jmp    c001bce4 <int_common_stub>
c001bdc1:	66 90                	xchg   ax,ax
c001bdc3:	66 90                	xchg   ax,ax
c001bdc5:	66 90                	xchg   ax,ax
c001bdc7:	66 90                	xchg   ax,ax
c001bdc9:	66 90                	xchg   ax,ax
c001bdcb:	66 90                	xchg   ax,ax
c001bdcd:	66 90                	xchg   ax,ax
c001bdcf:	90                   	nop

c001bdd0 <i386GetRDRAND>:
c001bdd0:	b9 64 00 00 00       	mov    ecx,0x64

c001bdd5 <retry>:
c001bdd5:	0f c7 f0             	rdrand eax
c001bdd8:	72 05                	jb     c001bddf <retry.done>
c001bdda:	e2 f9                	loop   c001bdd5 <retry>

c001bddc <retry.fail>:
c001bddc:	31 c0                	xor    eax,eax
c001bdde:	c3                   	ret    

c001bddf <retry.done>:
c001bddf:	c3                   	ret    

c001bde0 <absolutelyNoChanceInHell>:
c001bde0:	b8 01 00 00 00       	mov    eax,0x1
c001bde5:	0f a2                	cpuid  
c001bde7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bded:	74 06                	je     c001bdf5 <sseDetect.noSSE>
c001bdef:	b8 01 00 00 00       	mov    eax,0x1
c001bdf4:	c3                   	ret    

c001bdf5 <sseDetect.noSSE>:
c001bdf5:	31 c0                	xor    eax,eax
c001bdf7:	c3                   	ret    

c001bdf8 <sseSave>:
c001bdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdfc:	0f ae 00             	fxsave [eax]
c001bdff:	c3                   	ret    

c001be00 <sseLoad>:
c001be00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be04:	0f ae 08             	fxrstor [eax]
c001be07:	c3                   	ret    

c001be08 <sseInit>:
c001be08:	e8 42 00 00 00       	call   c001be4f <x87Init>
c001be0d:	0f 20 e0             	mov    eax,cr4
c001be10:	66 0d 00 06          	or     ax,0x600
c001be14:	0f 22 e0             	mov    cr4,eax
c001be17:	c3                   	ret    

c001be18 <sseClose>:
c001be18:	c3                   	ret    
c001be19:	66 90                	xchg   ax,ax
c001be1b:	66 90                	xchg   ax,ax
c001be1d:	66 90                	xchg   ax,ax
c001be1f:	90                   	nop

c001be20 <value_37F>:
c001be20:	7f 03                	jg     c001be25 <value_37A+0x1>

c001be22 <value_37E>:
c001be22:	7e 03                	jle    c001be27 <x87Detect+0x1>

c001be24 <value_37A>:
c001be24:	7a 03                	jp     c001be29 <x87Detect+0x3>

c001be26 <x87Detect>:
c001be26:	b8 01 00 00 00       	mov    eax,0x1
c001be2b:	0f a2                	cpuid  
c001be2d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be33:	74 06                	je     c001be3b <x87Detect.nox87>
c001be35:	b8 01 00 00 00       	mov    eax,0x1
c001be3a:	c3                   	ret    

c001be3b <x87Detect.nox87>:
c001be3b:	b8 00 00 00 00       	mov    eax,0x0
c001be40:	c3                   	ret    

c001be41 <x87Save>:
c001be41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be45:	dd 30                	fnsave [eax]
c001be47:	c3                   	ret    

c001be48 <x87Load>:
c001be48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4c:	dd 20                	frstor [eax]
c001be4e:	c3                   	ret    

c001be4f <x87Init>:
c001be4f:	0f 20 c0             	mov    eax,cr0
c001be52:	66 25 fb ff          	and    ax,0xfffb
c001be56:	66 0d 22 00          	or     ax,0x22
c001be5a:	0f 22 c0             	mov    cr0,eax
c001be5d:	db e3                	fninit 
c001be5f:	0f 06                	clts   
c001be61:	d9 2d 24 be 01 c0    	fldcw  WORD PTR ds:0xc001be24
c001be67:	c3                   	ret    

c001be68 <x87Close>:
c001be68:	c3                   	ret    
c001be69:	66 90                	xchg   ax,ax
c001be6b:	90                   	nop

c001be6c <__do_global_ctors_aux>:
c001be6c:	a1 1c ce 01 c0       	mov    eax,ds:0xc001ce1c
c001be71:	83 f8 ff             	cmp    eax,0xffffffff
c001be74:	74 1a                	je     c001be90 <__do_global_ctors_aux+0x24>
c001be76:	55                   	push   ebp
c001be77:	89 e5                	mov    ebp,esp
c001be79:	53                   	push   ebx
c001be7a:	52                   	push   edx
c001be7b:	bb 1c ce 01 c0       	mov    ebx,0xc001ce1c
c001be80:	ff d0                	call   eax
c001be82:	83 eb 04             	sub    ebx,0x4
c001be85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be87:	83 f8 ff             	cmp    eax,0xffffffff
c001be8a:	75 f4                	jne    c001be80 <__do_global_ctors_aux+0x14>
c001be8c:	58                   	pop    eax
c001be8d:	5b                   	pop    ebx
c001be8e:	5d                   	pop    ebp
c001be8f:	c3                   	ret    
c001be90:	c3                   	ret    
c001be91:	66 90                	xchg   ax,ax
c001be93:	90                   	nop

c001be94 <__divdi3>:
c001be94:	55                   	push   ebp
c001be95:	57                   	push   edi
c001be96:	56                   	push   esi
c001be97:	53                   	push   ebx
c001be98:	83 ec 1c             	sub    esp,0x1c
c001be9b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bea3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bea6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001beaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001beae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001beb2:	85 db                	test   ebx,ebx
c001beb4:	0f 88 8e 00 00 00    	js     c001bf48 <__divdi3+0xb4>
c001beba:	89 dd                	mov    ebp,ebx
c001bebc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bec4:	89 d3                	mov    ebx,edx
c001bec6:	85 d2                	test   edx,edx
c001bec8:	79 0d                	jns    c001bed7 <__divdi3+0x43>
c001beca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bece:	f7 d8                	neg    eax
c001bed0:	83 d2 00             	adc    edx,0x0
c001bed3:	f7 da                	neg    edx
c001bed5:	89 d3                	mov    ebx,edx
c001bed7:	89 c7                	mov    edi,eax
c001bed9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bedc:	85 db                	test   ebx,ebx
c001bede:	75 48                	jne    c001bf28 <__divdi3+0x94>
c001bee0:	39 ef                	cmp    edi,ebp
c001bee2:	76 24                	jbe    c001bf08 <__divdi3+0x74>
c001bee4:	89 ea                	mov    edx,ebp
c001bee6:	f7 f7                	div    edi
c001bee8:	89 c1                	mov    ecx,eax
c001beea:	31 f6                	xor    esi,esi
c001beec:	89 c8                	mov    eax,ecx
c001beee:	89 f2                	mov    edx,esi
c001bef0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bef4:	85 c9                	test   ecx,ecx
c001bef6:	74 07                	je     c001beff <__divdi3+0x6b>
c001bef8:	f7 d8                	neg    eax
c001befa:	83 d2 00             	adc    edx,0x0
c001befd:	f7 da                	neg    edx
c001beff:	83 c4 1c             	add    esp,0x1c
c001bf02:	5b                   	pop    ebx
c001bf03:	5e                   	pop    esi
c001bf04:	5f                   	pop    edi
c001bf05:	5d                   	pop    ebp
c001bf06:	c3                   	ret    
c001bf07:	90                   	nop
c001bf08:	85 ff                	test   edi,edi
c001bf0a:	75 0b                	jne    c001bf17 <__divdi3+0x83>
c001bf0c:	b8 01 00 00 00       	mov    eax,0x1
c001bf11:	31 d2                	xor    edx,edx
c001bf13:	f7 f3                	div    ebx
c001bf15:	89 c7                	mov    edi,eax
c001bf17:	31 d2                	xor    edx,edx
c001bf19:	89 e8                	mov    eax,ebp
c001bf1b:	f7 f7                	div    edi
c001bf1d:	89 c6                	mov    esi,eax
c001bf1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf22:	f7 f7                	div    edi
c001bf24:	89 c1                	mov    ecx,eax
c001bf26:	eb c4                	jmp    c001beec <__divdi3+0x58>
c001bf28:	39 eb                	cmp    ebx,ebp
c001bf2a:	77 3c                	ja     c001bf68 <__divdi3+0xd4>
c001bf2c:	0f bd f3             	bsr    esi,ebx
c001bf2f:	83 f6 1f             	xor    esi,0x1f
c001bf32:	75 40                	jne    c001bf74 <__divdi3+0xe0>
c001bf34:	39 eb                	cmp    ebx,ebp
c001bf36:	72 09                	jb     c001bf41 <__divdi3+0xad>
c001bf38:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf3b:	0f 87 97 00 00 00    	ja     c001bfd8 <__divdi3+0x144>
c001bf41:	b9 01 00 00 00       	mov    ecx,0x1
c001bf46:	eb a4                	jmp    c001beec <__divdi3+0x58>
c001bf48:	f7 d9                	neg    ecx
c001bf4a:	83 d3 00             	adc    ebx,0x0
c001bf4d:	f7 db                	neg    ebx
c001bf4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf52:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf56:	89 dd                	mov    ebp,ebx
c001bf58:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf60:	e9 5f ff ff ff       	jmp    c001bec4 <__divdi3+0x30>
c001bf65:	8d 76 00             	lea    esi,[esi+0x0]
c001bf68:	31 f6                	xor    esi,esi
c001bf6a:	31 c9                	xor    ecx,ecx
c001bf6c:	e9 7b ff ff ff       	jmp    c001beec <__divdi3+0x58>
c001bf71:	8d 76 00             	lea    esi,[esi+0x0]
c001bf74:	b8 20 00 00 00       	mov    eax,0x20
c001bf79:	29 f0                	sub    eax,esi
c001bf7b:	89 f1                	mov    ecx,esi
c001bf7d:	d3 e3                	shl    ebx,cl
c001bf7f:	89 fa                	mov    edx,edi
c001bf81:	88 c1                	mov    cl,al
c001bf83:	d3 ea                	shr    edx,cl
c001bf85:	09 da                	or     edx,ebx
c001bf87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf8b:	89 f1                	mov    ecx,esi
c001bf8d:	d3 e7                	shl    edi,cl
c001bf8f:	89 eb                	mov    ebx,ebp
c001bf91:	88 c1                	mov    cl,al
c001bf93:	d3 eb                	shr    ebx,cl
c001bf95:	89 f1                	mov    ecx,esi
c001bf97:	d3 e5                	shl    ebp,cl
c001bf99:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf9c:	88 c1                	mov    cl,al
c001bf9e:	d3 ea                	shr    edx,cl
c001bfa0:	09 d5                	or     ebp,edx
c001bfa2:	89 e8                	mov    eax,ebp
c001bfa4:	89 da                	mov    edx,ebx
c001bfa6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bfaa:	89 d3                	mov    ebx,edx
c001bfac:	89 c5                	mov    ebp,eax
c001bfae:	f7 e7                	mul    edi
c001bfb0:	39 d3                	cmp    ebx,edx
c001bfb2:	72 18                	jb     c001bfcc <__divdi3+0x138>
c001bfb4:	74 0a                	je     c001bfc0 <__divdi3+0x12c>
c001bfb6:	89 e9                	mov    ecx,ebp
c001bfb8:	31 f6                	xor    esi,esi
c001bfba:	e9 2d ff ff ff       	jmp    c001beec <__divdi3+0x58>
c001bfbf:	90                   	nop
c001bfc0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bfc3:	89 f1                	mov    ecx,esi
c001bfc5:	d3 e7                	shl    edi,cl
c001bfc7:	39 c7                	cmp    edi,eax
c001bfc9:	73 eb                	jae    c001bfb6 <__divdi3+0x122>
c001bfcb:	90                   	nop
c001bfcc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bfcf:	31 f6                	xor    esi,esi
c001bfd1:	e9 16 ff ff ff       	jmp    c001beec <__divdi3+0x58>
c001bfd6:	66 90                	xchg   ax,ax
c001bfd8:	31 c9                	xor    ecx,ecx
c001bfda:	e9 0d ff ff ff       	jmp    c001beec <__divdi3+0x58>
c001bfdf:	90                   	nop

c001bfe0 <__moddi3>:
c001bfe0:	55                   	push   ebp
c001bfe1:	57                   	push   edi
c001bfe2:	56                   	push   esi
c001bfe3:	53                   	push   ebx
c001bfe4:	83 ec 2c             	sub    esp,0x2c
c001bfe7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfeb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bfef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bff3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bff7:	85 db                	test   ebx,ebx
c001bff9:	0f 88 85 00 00 00    	js     c001c084 <__moddi3+0xa4>
c001bfff:	89 de                	mov    esi,ebx
c001c001:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c009:	89 d7                	mov    edi,edx
c001c00b:	85 d2                	test   edx,edx
c001c00d:	79 09                	jns    c001c018 <__moddi3+0x38>
c001c00f:	f7 d8                	neg    eax
c001c011:	83 d2 00             	adc    edx,0x0
c001c014:	f7 da                	neg    edx
c001c016:	89 d7                	mov    edi,edx
c001c018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c01c:	89 cd                	mov    ebp,ecx
c001c01e:	85 ff                	test   edi,edi
c001c020:	75 52                	jne    c001c074 <__moddi3+0x94>
c001c022:	89 c3                	mov    ebx,eax
c001c024:	39 f0                	cmp    eax,esi
c001c026:	76 24                	jbe    c001c04c <__moddi3+0x6c>
c001c028:	89 c8                	mov    eax,ecx
c001c02a:	89 f2                	mov    edx,esi
c001c02c:	f7 f3                	div    ebx
c001c02e:	89 d6                	mov    esi,edx
c001c030:	89 f0                	mov    eax,esi
c001c032:	31 d2                	xor    edx,edx
c001c034:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c038:	85 c9                	test   ecx,ecx
c001c03a:	74 07                	je     c001c043 <__moddi3+0x63>
c001c03c:	f7 d8                	neg    eax
c001c03e:	83 d2 00             	adc    edx,0x0
c001c041:	f7 da                	neg    edx
c001c043:	83 c4 2c             	add    esp,0x2c
c001c046:	5b                   	pop    ebx
c001c047:	5e                   	pop    esi
c001c048:	5f                   	pop    edi
c001c049:	5d                   	pop    ebp
c001c04a:	c3                   	ret    
c001c04b:	90                   	nop
c001c04c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c050:	85 db                	test   ebx,ebx
c001c052:	75 0d                	jne    c001c061 <__moddi3+0x81>
c001c054:	b8 01 00 00 00       	mov    eax,0x1
c001c059:	31 d2                	xor    edx,edx
c001c05b:	f7 f7                	div    edi
c001c05d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c061:	89 f0                	mov    eax,esi
c001c063:	31 d2                	xor    edx,edx
c001c065:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c069:	f7 f7                	div    edi
c001c06b:	89 e8                	mov    eax,ebp
c001c06d:	f7 f7                	div    edi
c001c06f:	89 d6                	mov    esi,edx
c001c071:	eb bd                	jmp    c001c030 <__moddi3+0x50>
c001c073:	90                   	nop
c001c074:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c078:	39 f7                	cmp    edi,esi
c001c07a:	76 20                	jbe    c001c09c <__moddi3+0xbc>
c001c07c:	89 c8                	mov    eax,ecx
c001c07e:	89 f2                	mov    edx,esi
c001c080:	eb b2                	jmp    c001c034 <__moddi3+0x54>
c001c082:	66 90                	xchg   ax,ax
c001c084:	f7 d9                	neg    ecx
c001c086:	83 d3 00             	adc    ebx,0x0
c001c089:	f7 db                	neg    ebx
c001c08b:	89 de                	mov    esi,ebx
c001c08d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c095:	e9 6f ff ff ff       	jmp    c001c009 <__moddi3+0x29>
c001c09a:	66 90                	xchg   ax,ax
c001c09c:	0f bd c7             	bsr    eax,edi
c001c09f:	83 f0 1f             	xor    eax,0x1f
c001c0a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0a6:	75 24                	jne    c001c0cc <__moddi3+0xec>
c001c0a8:	39 f7                	cmp    edi,esi
c001c0aa:	72 06                	jb     c001c0b2 <__moddi3+0xd2>
c001c0ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c0b0:	77 0c                	ja     c001c0be <__moddi3+0xde>
c001c0b2:	89 e9                	mov    ecx,ebp
c001c0b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c0b8:	19 fe                	sbb    esi,edi
c001c0ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0c2:	89 f2                	mov    edx,esi
c001c0c4:	e9 6b ff ff ff       	jmp    c001c034 <__moddi3+0x54>
c001c0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0cc:	b8 20 00 00 00       	mov    eax,0x20
c001c0d1:	89 c2                	mov    edx,eax
c001c0d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0d7:	29 da                	sub    edx,ebx
c001c0d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c0dd:	88 d9                	mov    cl,bl
c001c0df:	d3 e7                	shl    edi,cl
c001c0e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0e5:	88 d1                	mov    cl,dl
c001c0e7:	d3 e8                	shr    eax,cl
c001c0e9:	09 c7                	or     edi,eax
c001c0eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c0ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0f3:	89 d8                	mov    eax,ebx
c001c0f5:	88 d9                	mov    cl,bl
c001c0f7:	d3 e7                	shl    edi,cl
c001c0f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c0fd:	89 f3                	mov    ebx,esi
c001c0ff:	88 d1                	mov    cl,dl
c001c101:	d3 eb                	shr    ebx,cl
c001c103:	89 c7                	mov    edi,eax
c001c105:	88 c1                	mov    cl,al
c001c107:	d3 e6                	shl    esi,cl
c001c109:	89 e8                	mov    eax,ebp
c001c10b:	88 d1                	mov    cl,dl
c001c10d:	d3 e8                	shr    eax,cl
c001c10f:	09 f0                	or     eax,esi
c001c111:	89 f9                	mov    ecx,edi
c001c113:	d3 e5                	shl    ebp,cl
c001c115:	89 da                	mov    edx,ebx
c001c117:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c11b:	89 d3                	mov    ebx,edx
c001c11d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c121:	89 c6                	mov    esi,eax
c001c123:	89 d1                	mov    ecx,edx
c001c125:	39 d3                	cmp    ebx,edx
c001c127:	72 27                	jb     c001c150 <__moddi3+0x170>
c001c129:	74 21                	je     c001c14c <__moddi3+0x16c>
c001c12b:	29 f5                	sub    ebp,esi
c001c12d:	19 cb                	sbb    ebx,ecx
c001c12f:	89 de                	mov    esi,ebx
c001c131:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c135:	d3 e6                	shl    esi,cl
c001c137:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c13b:	89 f9                	mov    ecx,edi
c001c13d:	d3 ed                	shr    ebp,cl
c001c13f:	09 ee                	or     esi,ebp
c001c141:	89 f0                	mov    eax,esi
c001c143:	d3 eb                	shr    ebx,cl
c001c145:	89 da                	mov    edx,ebx
c001c147:	e9 e8 fe ff ff       	jmp    c001c034 <__moddi3+0x54>
c001c14c:	39 c5                	cmp    ebp,eax
c001c14e:	73 db                	jae    c001c12b <__moddi3+0x14b>
c001c150:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c154:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c158:	89 d1                	mov    ecx,edx
c001c15a:	89 c6                	mov    esi,eax
c001c15c:	eb cd                	jmp    c001c12b <__moddi3+0x14b>
c001c15e:	66 90                	xchg   ax,ax

c001c160 <__udivdi3>:
c001c160:	55                   	push   ebp
c001c161:	57                   	push   edi
c001c162:	56                   	push   esi
c001c163:	53                   	push   ebx
c001c164:	83 ec 1c             	sub    esp,0x1c
c001c167:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c16b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c16f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c173:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c177:	85 d2                	test   edx,edx
c001c179:	75 41                	jne    c001c1bc <__udivdi3+0x5c>
c001c17b:	39 f7                	cmp    edi,esi
c001c17d:	76 15                	jbe    c001c194 <__udivdi3+0x34>
c001c17f:	89 e8                	mov    eax,ebp
c001c181:	89 f2                	mov    edx,esi
c001c183:	f7 f7                	div    edi
c001c185:	31 db                	xor    ebx,ebx
c001c187:	89 da                	mov    edx,ebx
c001c189:	83 c4 1c             	add    esp,0x1c
c001c18c:	5b                   	pop    ebx
c001c18d:	5e                   	pop    esi
c001c18e:	5f                   	pop    edi
c001c18f:	5d                   	pop    ebp
c001c190:	c3                   	ret    
c001c191:	8d 76 00             	lea    esi,[esi+0x0]
c001c194:	89 f9                	mov    ecx,edi
c001c196:	85 ff                	test   edi,edi
c001c198:	75 0b                	jne    c001c1a5 <__udivdi3+0x45>
c001c19a:	b8 01 00 00 00       	mov    eax,0x1
c001c19f:	31 d2                	xor    edx,edx
c001c1a1:	f7 f7                	div    edi
c001c1a3:	89 c1                	mov    ecx,eax
c001c1a5:	31 d2                	xor    edx,edx
c001c1a7:	89 f0                	mov    eax,esi
c001c1a9:	f7 f1                	div    ecx
c001c1ab:	89 c3                	mov    ebx,eax
c001c1ad:	89 e8                	mov    eax,ebp
c001c1af:	f7 f1                	div    ecx
c001c1b1:	89 da                	mov    edx,ebx
c001c1b3:	83 c4 1c             	add    esp,0x1c
c001c1b6:	5b                   	pop    ebx
c001c1b7:	5e                   	pop    esi
c001c1b8:	5f                   	pop    edi
c001c1b9:	5d                   	pop    ebp
c001c1ba:	c3                   	ret    
c001c1bb:	90                   	nop
c001c1bc:	39 f2                	cmp    edx,esi
c001c1be:	77 1c                	ja     c001c1dc <__udivdi3+0x7c>
c001c1c0:	0f bd da             	bsr    ebx,edx
c001c1c3:	83 f3 1f             	xor    ebx,0x1f
c001c1c6:	75 24                	jne    c001c1ec <__udivdi3+0x8c>
c001c1c8:	39 f2                	cmp    edx,esi
c001c1ca:	72 08                	jb     c001c1d4 <__udivdi3+0x74>
c001c1cc:	39 ef                	cmp    edi,ebp
c001c1ce:	0f 87 84 00 00 00    	ja     c001c258 <__udivdi3+0xf8>
c001c1d4:	b8 01 00 00 00       	mov    eax,0x1
c001c1d9:	eb ac                	jmp    c001c187 <__udivdi3+0x27>
c001c1db:	90                   	nop
c001c1dc:	31 db                	xor    ebx,ebx
c001c1de:	31 c0                	xor    eax,eax
c001c1e0:	89 da                	mov    edx,ebx
c001c1e2:	83 c4 1c             	add    esp,0x1c
c001c1e5:	5b                   	pop    ebx
c001c1e6:	5e                   	pop    esi
c001c1e7:	5f                   	pop    edi
c001c1e8:	5d                   	pop    ebp
c001c1e9:	c3                   	ret    
c001c1ea:	66 90                	xchg   ax,ax
c001c1ec:	b8 20 00 00 00       	mov    eax,0x20
c001c1f1:	29 d8                	sub    eax,ebx
c001c1f3:	88 d9                	mov    cl,bl
c001c1f5:	d3 e2                	shl    edx,cl
c001c1f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c1fb:	89 fa                	mov    edx,edi
c001c1fd:	88 c1                	mov    cl,al
c001c1ff:	d3 ea                	shr    edx,cl
c001c201:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c205:	09 d1                	or     ecx,edx
c001c207:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c20b:	88 d9                	mov    cl,bl
c001c20d:	d3 e7                	shl    edi,cl
c001c20f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c213:	89 f7                	mov    edi,esi
c001c215:	88 c1                	mov    cl,al
c001c217:	d3 ef                	shr    edi,cl
c001c219:	88 d9                	mov    cl,bl
c001c21b:	d3 e6                	shl    esi,cl
c001c21d:	89 ea                	mov    edx,ebp
c001c21f:	88 c1                	mov    cl,al
c001c221:	d3 ea                	shr    edx,cl
c001c223:	09 d6                	or     esi,edx
c001c225:	89 f0                	mov    eax,esi
c001c227:	89 fa                	mov    edx,edi
c001c229:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c22d:	89 d7                	mov    edi,edx
c001c22f:	89 c6                	mov    esi,eax
c001c231:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c235:	39 d7                	cmp    edi,edx
c001c237:	72 13                	jb     c001c24c <__udivdi3+0xec>
c001c239:	74 09                	je     c001c244 <__udivdi3+0xe4>
c001c23b:	89 f0                	mov    eax,esi
c001c23d:	31 db                	xor    ebx,ebx
c001c23f:	e9 43 ff ff ff       	jmp    c001c187 <__udivdi3+0x27>
c001c244:	88 d9                	mov    cl,bl
c001c246:	d3 e5                	shl    ebp,cl
c001c248:	39 c5                	cmp    ebp,eax
c001c24a:	73 ef                	jae    c001c23b <__udivdi3+0xdb>
c001c24c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c24f:	31 db                	xor    ebx,ebx
c001c251:	e9 31 ff ff ff       	jmp    c001c187 <__udivdi3+0x27>
c001c256:	66 90                	xchg   ax,ax
c001c258:	31 c0                	xor    eax,eax
c001c25a:	e9 28 ff ff ff       	jmp    c001c187 <__udivdi3+0x27>
c001c25f:	90                   	nop

c001c260 <__umoddi3>:
c001c260:	55                   	push   ebp
c001c261:	57                   	push   edi
c001c262:	56                   	push   esi
c001c263:	53                   	push   ebx
c001c264:	83 ec 1c             	sub    esp,0x1c
c001c267:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c26b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c26f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c273:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c277:	89 da                	mov    edx,ebx
c001c279:	85 c0                	test   eax,eax
c001c27b:	75 37                	jne    c001c2b4 <__umoddi3+0x54>
c001c27d:	39 df                	cmp    edi,ebx
c001c27f:	76 13                	jbe    c001c294 <__umoddi3+0x34>
c001c281:	89 f0                	mov    eax,esi
c001c283:	f7 f7                	div    edi
c001c285:	89 d0                	mov    eax,edx
c001c287:	31 d2                	xor    edx,edx
c001c289:	83 c4 1c             	add    esp,0x1c
c001c28c:	5b                   	pop    ebx
c001c28d:	5e                   	pop    esi
c001c28e:	5f                   	pop    edi
c001c28f:	5d                   	pop    ebp
c001c290:	c3                   	ret    
c001c291:	8d 76 00             	lea    esi,[esi+0x0]
c001c294:	89 fd                	mov    ebp,edi
c001c296:	85 ff                	test   edi,edi
c001c298:	75 0b                	jne    c001c2a5 <__umoddi3+0x45>
c001c29a:	b8 01 00 00 00       	mov    eax,0x1
c001c29f:	31 d2                	xor    edx,edx
c001c2a1:	f7 f7                	div    edi
c001c2a3:	89 c5                	mov    ebp,eax
c001c2a5:	89 d8                	mov    eax,ebx
c001c2a7:	31 d2                	xor    edx,edx
c001c2a9:	f7 f5                	div    ebp
c001c2ab:	89 f0                	mov    eax,esi
c001c2ad:	f7 f5                	div    ebp
c001c2af:	89 d0                	mov    eax,edx
c001c2b1:	eb d4                	jmp    c001c287 <__umoddi3+0x27>
c001c2b3:	90                   	nop
c001c2b4:	89 f1                	mov    ecx,esi
c001c2b6:	39 d8                	cmp    eax,ebx
c001c2b8:	76 0a                	jbe    c001c2c4 <__umoddi3+0x64>
c001c2ba:	89 f0                	mov    eax,esi
c001c2bc:	83 c4 1c             	add    esp,0x1c
c001c2bf:	5b                   	pop    ebx
c001c2c0:	5e                   	pop    esi
c001c2c1:	5f                   	pop    edi
c001c2c2:	5d                   	pop    ebp
c001c2c3:	c3                   	ret    
c001c2c4:	0f bd e8             	bsr    ebp,eax
c001c2c7:	83 f5 1f             	xor    ebp,0x1f
c001c2ca:	75 1c                	jne    c001c2e8 <__umoddi3+0x88>
c001c2cc:	39 d8                	cmp    eax,ebx
c001c2ce:	72 04                	jb     c001c2d4 <__umoddi3+0x74>
c001c2d0:	39 f7                	cmp    edi,esi
c001c2d2:	77 08                	ja     c001c2dc <__umoddi3+0x7c>
c001c2d4:	89 da                	mov    edx,ebx
c001c2d6:	29 fe                	sub    esi,edi
c001c2d8:	19 c2                	sbb    edx,eax
c001c2da:	89 f1                	mov    ecx,esi
c001c2dc:	89 c8                	mov    eax,ecx
c001c2de:	83 c4 1c             	add    esp,0x1c
c001c2e1:	5b                   	pop    ebx
c001c2e2:	5e                   	pop    esi
c001c2e3:	5f                   	pop    edi
c001c2e4:	5d                   	pop    ebp
c001c2e5:	c3                   	ret    
c001c2e6:	66 90                	xchg   ax,ax
c001c2e8:	ba 20 00 00 00       	mov    edx,0x20
c001c2ed:	29 ea                	sub    edx,ebp
c001c2ef:	89 e9                	mov    ecx,ebp
c001c2f1:	d3 e0                	shl    eax,cl
c001c2f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2f7:	89 f8                	mov    eax,edi
c001c2f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2fd:	88 d1                	mov    cl,dl
c001c2ff:	d3 e8                	shr    eax,cl
c001c301:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c305:	09 c1                	or     ecx,eax
c001c307:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c30b:	89 e9                	mov    ecx,ebp
c001c30d:	d3 e7                	shl    edi,cl
c001c30f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c313:	89 d8                	mov    eax,ebx
c001c315:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c319:	88 d1                	mov    cl,dl
c001c31b:	d3 e8                	shr    eax,cl
c001c31d:	89 c7                	mov    edi,eax
c001c31f:	89 e9                	mov    ecx,ebp
c001c321:	d3 e3                	shl    ebx,cl
c001c323:	89 f0                	mov    eax,esi
c001c325:	88 d1                	mov    cl,dl
c001c327:	d3 e8                	shr    eax,cl
c001c329:	09 d8                	or     eax,ebx
c001c32b:	89 e9                	mov    ecx,ebp
c001c32d:	d3 e6                	shl    esi,cl
c001c32f:	89 f3                	mov    ebx,esi
c001c331:	89 fa                	mov    edx,edi
c001c333:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c337:	89 d1                	mov    ecx,edx
c001c339:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c33d:	89 c6                	mov    esi,eax
c001c33f:	89 d7                	mov    edi,edx
c001c341:	39 d1                	cmp    ecx,edx
c001c343:	72 27                	jb     c001c36c <__umoddi3+0x10c>
c001c345:	74 21                	je     c001c368 <__umoddi3+0x108>
c001c347:	89 ca                	mov    edx,ecx
c001c349:	29 f3                	sub    ebx,esi
c001c34b:	19 fa                	sbb    edx,edi
c001c34d:	89 d0                	mov    eax,edx
c001c34f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c353:	d3 e0                	shl    eax,cl
c001c355:	89 e9                	mov    ecx,ebp
c001c357:	d3 eb                	shr    ebx,cl
c001c359:	09 d8                	or     eax,ebx
c001c35b:	d3 ea                	shr    edx,cl
c001c35d:	83 c4 1c             	add    esp,0x1c
c001c360:	5b                   	pop    ebx
c001c361:	5e                   	pop    esi
c001c362:	5f                   	pop    edi
c001c363:	5d                   	pop    ebp
c001c364:	c3                   	ret    
c001c365:	8d 76 00             	lea    esi,[esi+0x0]
c001c368:	39 c3                	cmp    ebx,eax
c001c36a:	73 db                	jae    c001c347 <__umoddi3+0xe7>
c001c36c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c370:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c374:	89 d7                	mov    edi,edx
c001c376:	89 c6                	mov    esi,eax
c001c378:	eb cd                	jmp    c001c347 <__umoddi3+0xe7>

Disassembly of section .init:

c001c37a <_init>:
c001c37a:	55                   	push   ebp
c001c37b:	89 e5                	mov    ebp,esp
c001c37d:	e8 72 3d fe ff       	call   c00000f4 <frame_dummy>
c001c382:	e8 e5 fa ff ff       	call   c001be6c <__do_global_ctors_aux>
c001c387:	5d                   	pop    ebp
c001c388:	c3                   	ret    

Disassembly of section .fini:

c001c389 <_fini>:
c001c389:	55                   	push   ebp
c001c38a:	89 e5                	mov    ebp,esp
c001c38c:	e8 f3 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c391:	5d                   	pop    ebp
c001c392:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c394 <Computer::~Computer()>:
c001c394:	83 ec 0c             	sub    esp,0xc
c001c397:	ba 58 d6 01 c0       	mov    edx,0xc001d658
c001c39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a0:	89 10                	mov    DWORD PTR [eax],edx
c001c3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a6:	83 ec 0c             	sub    esp,0xc
c001c3a9:	50                   	push   eax
c001c3aa:	e8 17 f5 fe ff       	call   c000b8c6 <Device::~Device()>
c001c3af:	83 c4 10             	add    esp,0x10
c001c3b2:	90                   	nop
c001c3b3:	83 c4 0c             	add    esp,0xc
c001c3b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c3b8 <Computer::~Computer()>:
c001c3b8:	83 ec 0c             	sub    esp,0xc
c001c3bb:	83 ec 0c             	sub    esp,0xc
c001c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c2:	e8 cd ff ff ff       	call   c001c394 <Computer::~Computer()>
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	83 ec 08             	sub    esp,0x8
c001c3cd:	68 70 01 00 00       	push   0x170
c001c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d6:	e8 b6 e0 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001c3db:	83 c4 10             	add    esp,0x10
c001c3de:	83 c4 0c             	add    esp,0xc
c001c3e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c3e2 <idleCommon()>:
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	fa                   	cli    
c001c3e6:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c3ec:	e8 0b 74 ff ff       	call   c00137fc <schedule()>
c001c3f1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c3f6:	48                   	dec    eax
c001c3f7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c3fc:	75 01                	jne    c001c3ff <idleCommon()+0x1d>
c001c3fe:	fb                   	sti    
c001c3ff:	83 c4 0c             	add    esp,0xc
c001c402:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c404 <LinkedList<UnixFile>::~LinkedList()>:
c001c404:	90                   	nop
c001c405:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c406 <LinkedList<UnixFile>::LinkedList()>:
c001c406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c414:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c42a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c434:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c43b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c43f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c446:	90                   	nop
c001c447:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c448 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c448:	83 ec 0c             	sub    esp,0xc
c001c44b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c450:	75 10                	jne    c001c462 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	68 b8 d8 01 c0       	push   0xc001d8b8
c001c45a:	e8 a8 3d ff ff       	call   c0010207 <KePanic(char const*)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c466:	8b 00                	mov    eax,DWORD PTR [eax]
c001c468:	85 c0                	test   eax,eax
c001c46a:	74 34                	je     c001c4a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c470:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c473:	85 c0                	test   eax,eax
c001c475:	74 29                	je     c001c4a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c47e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c482:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c489:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c48d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c497:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c49e:	eb 65                	jmp    c001c505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a6:	85 c0                	test   eax,eax
c001c4a8:	75 4b                	jne    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4b1:	85 c0                	test   eax,eax
c001c4b3:	75 40                	jne    c001c4f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4bd:	89 10                	mov    DWORD PTR [eax],edx
c001c4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4df:	85 c0                	test   eax,eax
c001c4e1:	74 22                	je     c001c505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4e3:	83 ec 0c             	sub    esp,0xc
c001c4e6:	68 da d8 01 c0       	push   0xc001d8da
c001c4eb:	e8 17 3d ff ff       	call   c0010207 <KePanic(char const*)>
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	eb 10                	jmp    c001c505 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4f5:	83 ec 0c             	sub    esp,0xc
c001c4f8:	68 e4 d8 01 c0       	push   0xc001d8e4
c001c4fd:	e8 05 3d ff ff       	call   c0010207 <KePanic(char const*)>
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c509:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50c:	8d 50 01             	lea    edx,[eax+0x1]
c001c50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c513:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c516:	90                   	nop
c001c517:	83 c4 0c             	add    esp,0xc
c001c51a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c51c <LinkedList<UnixFile>::getFirstElement()>:
c001c51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c520:	8b 00                	mov    eax,DWORD PTR [eax]
c001c522:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c524 <LinkedList<UnixFile>::removeFirst()>:
c001c524:	83 ec 0c             	sub    esp,0xc
c001c527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c52d:	85 c0                	test   eax,eax
c001c52f:	75 12                	jne    c001c543 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c531:	83 ec 0c             	sub    esp,0xc
c001c534:	68 f0 d8 01 c0       	push   0xc001d8f0
c001c539:	e8 c9 3c ff ff       	call   c0010207 <KePanic(char const*)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	eb 7e                	jmp    c001c5c1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c547:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c54a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54d:	85 c0                	test   eax,eax
c001c54f:	74 10                	je     c001c561 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c551:	83 ec 0c             	sub    esp,0xc
c001c554:	68 3b d9 01 c0       	push   0xc001d93b
c001c559:	e8 a9 3c ff ff       	call   c0010207 <KePanic(char const*)>
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c565:	8b 00                	mov    eax,DWORD PTR [eax]
c001c567:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56a:	85 c0                	test   eax,eax
c001c56c:	75 33                	jne    c001c5a1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c572:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c587:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c58a:	83 f8 01             	cmp    eax,0x1
c001c58d:	74 21                	je     c001c5b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c58f:	83 ec 0c             	sub    esp,0xc
c001c592:	68 14 d9 01 c0       	push   0xc001d914
c001c597:	e8 6b 3c ff ff       	call   c0010207 <KePanic(char const*)>
c001c59c:	83 c4 10             	add    esp,0x10
c001c59f:	eb 0f                	jmp    c001c5b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ae:	89 10                	mov    DWORD PTR [eax],edx
c001c5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5c1:	83 c4 0c             	add    esp,0xc
c001c5c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c5c6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c5c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5cd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c5ce <DriverlessDevice::~DriverlessDevice()>:
c001c5ce:	ba bc df 01 c0       	mov    edx,0xc001dfbc
c001c5d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d7:	89 10                	mov    DWORD PTR [eax],edx
c001c5d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5dd:	50                   	push   eax
c001c5de:	e8 e3 f2 fe ff       	call   c000b8c6 <Device::~Device()>
c001c5e3:	83 c4 04             	add    esp,0x4
c001c5e6:	90                   	nop
c001c5e7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c5e8 <DriverlessDevice::~DriverlessDevice()>:
c001c5e8:	83 ec 0c             	sub    esp,0xc
c001c5eb:	83 ec 0c             	sub    esp,0xc
c001c5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f2:	e8 d7 ff ff ff       	call   c001c5ce <DriverlessDevice::~DriverlessDevice()>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	83 ec 08             	sub    esp,0x8
c001c5fd:	68 58 01 00 00       	push   0x158
c001c602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c606:	e8 86 de fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001c60b:	83 c4 10             	add    esp,0x10
c001c60e:	83 c4 0c             	add    esp,0xc
c001c611:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c612 <LinkedList<Device>::addElement(Device*)>:
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c61a:	75 10                	jne    c001c62c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c61c:	83 ec 0c             	sub    esp,0xc
c001c61f:	68 b8 d8 01 c0       	push   0xc001d8b8
c001c624:	e8 de 3b ff ff       	call   c0010207 <KePanic(char const*)>
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c630:	8b 00                	mov    eax,DWORD PTR [eax]
c001c632:	85 c0                	test   eax,eax
c001c634:	74 3a                	je     c001c670 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c63d:	85 c0                	test   eax,eax
c001c63f:	74 2f                	je     c001c670 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c645:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c648:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c64c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c65a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c65d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c661:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c664:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c66e:	eb 68                	jmp    c001c6d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c674:	8b 00                	mov    eax,DWORD PTR [eax]
c001c676:	85 c0                	test   eax,eax
c001c678:	75 4e                	jne    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c681:	85 c0                	test   eax,eax
c001c683:	75 43                	jne    c001c6c8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c689:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c68d:	89 10                	mov    DWORD PTR [eax],edx
c001c68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c693:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c697:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6a1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6b2:	85 c0                	test   eax,eax
c001c6b4:	74 22                	je     c001c6d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6b6:	83 ec 0c             	sub    esp,0xc
c001c6b9:	68 da d8 01 c0       	push   0xc001d8da
c001c6be:	e8 44 3b ff ff       	call   c0010207 <KePanic(char const*)>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	eb 10                	jmp    c001c6d8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	68 e4 d8 01 c0       	push   0xc001d8e4
c001c6d0:	e8 32 3b ff ff       	call   c0010207 <KePanic(char const*)>
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6df:	8d 50 01             	lea    edx,[eax+0x1]
c001c6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6e9:	90                   	nop
c001c6ea:	83 c4 0c             	add    esp,0xc
c001c6ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c6ee <LinkedList<Device>::LinkedList()>:
c001c6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c707:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c70e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c712:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c71c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c727:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c72e:	90                   	nop
c001c72f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c730 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c734:	8b 00                	mov    eax,DWORD PTR [eax]
c001c736:	85 c0                	test   eax,eax
c001c738:	75 0e                	jne    c001c748 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c73a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	85 c0                	test   eax,eax
c001c743:	75 03                	jne    c001c748 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c745:	b0 01                	mov    al,0x1
c001c747:	c3                   	ret    
c001c748:	b0 00                	mov    al,0x0
c001c74a:	90                   	nop
c001c74b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c74c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c750:	8b 00                	mov    eax,DWORD PTR [eax]
c001c752:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c754:	83 ec 0c             	sub    esp,0xc
c001c757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c75d:	85 c0                	test   eax,eax
c001c75f:	75 17                	jne    c001c778 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c761:	83 ec 0c             	sub    esp,0xc
c001c764:	68 f0 d8 01 c0       	push   0xc001d8f0
c001c769:	e8 99 3a ff ff       	call   c0010207 <KePanic(char const*)>
c001c76e:	83 c4 10             	add    esp,0x10
c001c771:	e9 92 00 00 00       	jmp    c001c808 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c776:	66 90                	xchg   ax,ax
c001c778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c77f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c782:	85 c0                	test   eax,eax
c001c784:	0f 95 c0             	setne  al
c001c787:	84 c0                	test   al,al
c001c789:	74 11                	je     c001c79c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	68 3b d9 01 c0       	push   0xc001d93b
c001c793:	e8 6f 3a ff ff       	call   c0010207 <KePanic(char const*)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	90                   	nop
c001c79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7a5:	85 c0                	test   eax,eax
c001c7a7:	0f 94 c0             	sete   al
c001c7aa:	84 c0                	test   al,al
c001c7ac:	74 36                	je     c001c7e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7ca:	83 f8 01             	cmp    eax,0x1
c001c7cd:	74 25                	je     c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7cf:	83 ec 0c             	sub    esp,0xc
c001c7d2:	68 14 d9 01 c0       	push   0xc001d914
c001c7d7:	e8 2b 3a ff ff       	call   c0010207 <KePanic(char const*)>
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	eb 13                	jmp    c001c7f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f1:	89 10                	mov    DWORD PTR [eax],edx
c001c7f3:	90                   	nop
c001c7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c7fb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c802:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c805:	8d 76 00             	lea    esi,[esi+0x0]
c001c808:	83 c4 0c             	add    esp,0xc
c001c80b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c80c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c814:	75 12                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	68 b8 d8 01 c0       	push   0xc001d8b8
c001c81e:	e8 e4 39 ff ff       	call   c0010207 <KePanic(char const*)>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	66 90                	xchg   ax,ax
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c82e:	85 c0                	test   eax,eax
c001c830:	74 36                	je     c001c868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c839:	85 c0                	test   eax,eax
c001c83b:	74 2b                	je     c001c868 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c844:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c848:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c853:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c85d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c864:	eb 6a                	jmp    c001c8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c866:	66 90                	xchg   ax,ax
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c86e:	85 c0                	test   eax,eax
c001c870:	75 4e                	jne    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c879:	85 c0                	test   eax,eax
c001c87b:	75 43                	jne    c001c8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c885:	89 10                	mov    DWORD PTR [eax],edx
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c88f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c899:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8a7:	85 c0                	test   eax,eax
c001c8a9:	74 25                	je     c001c8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8ab:	83 ec 0c             	sub    esp,0xc
c001c8ae:	68 da d8 01 c0       	push   0xc001d8da
c001c8b3:	e8 4f 39 ff ff       	call   c0010207 <KePanic(char const*)>
c001c8b8:	83 c4 10             	add    esp,0x10
c001c8bb:	eb 13                	jmp    c001c8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c0:	83 ec 0c             	sub    esp,0xc
c001c8c3:	68 e4 d8 01 c0       	push   0xc001d8e4
c001c8c8:	e8 3a 39 ff ff       	call   c0010207 <KePanic(char const*)>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8d7:	8d 50 01             	lea    edx,[eax+0x1]
c001c8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8e1:	90                   	nop
c001c8e2:	83 c4 0c             	add    esp,0xc
c001c8e5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c8e8 <ACPI::~ACPI()>:
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	ba 34 e5 01 c0       	mov    edx,0xc001e534
c001c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f4:	89 10                	mov    DWORD PTR [eax],edx
c001c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	50                   	push   eax
c001c8fe:	e8 c3 ef fe ff       	call   c000b8c6 <Device::~Device()>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	90                   	nop
c001c907:	83 c4 0c             	add    esp,0xc
c001c90a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c90c <ACPI::~ACPI()>:
c001c90c:	83 ec 0c             	sub    esp,0xc
c001c90f:	83 ec 0c             	sub    esp,0xc
c001c912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c916:	e8 cd ff ff ff       	call   c001c8e8 <ACPI::~ACPI()>
c001c91b:	83 c4 10             	add    esp,0x10
c001c91e:	83 ec 08             	sub    esp,0x8
c001c921:	68 64 12 00 00       	push   0x1264
c001c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c92a:	e8 62 db fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	83 c4 0c             	add    esp,0xc
c001c935:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c938 <LinkedList<Device>::~LinkedList()>:
c001c938:	90                   	nop
c001c939:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c93c <LinkedList<Device>::isEmpty()>:
c001c93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c940:	8b 00                	mov    eax,DWORD PTR [eax]
c001c942:	85 c0                	test   eax,eax
c001c944:	75 0e                	jne    c001c954 <LinkedList<Device>::isEmpty()+0x18>
c001c946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c94a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c94d:	85 c0                	test   eax,eax
c001c94f:	75 03                	jne    c001c954 <LinkedList<Device>::isEmpty()+0x18>
c001c951:	b0 01                	mov    al,0x1
c001c953:	c3                   	ret    
c001c954:	b0 00                	mov    al,0x0
c001c956:	90                   	nop
c001c957:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c958 <LinkedList<Device>::getFirstElement()>:
c001c958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c95e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c960 <LinkedList<Device>::removeFirst()>:
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c967:	8b 00                	mov    eax,DWORD PTR [eax]
c001c969:	85 c0                	test   eax,eax
c001c96b:	75 17                	jne    c001c984 <LinkedList<Device>::removeFirst()+0x24>
c001c96d:	83 ec 0c             	sub    esp,0xc
c001c970:	68 f0 d8 01 c0       	push   0xc001d8f0
c001c975:	e8 8d 38 ff ff       	call   c0010207 <KePanic(char const*)>
c001c97a:	83 c4 10             	add    esp,0x10
c001c97d:	e9 92 00 00 00       	jmp    c001ca14 <LinkedList<Device>::removeFirst()+0xb4>
c001c982:	66 90                	xchg   ax,ax
c001c984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c98b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c991:	85 c0                	test   eax,eax
c001c993:	74 13                	je     c001c9a8 <LinkedList<Device>::removeFirst()+0x48>
c001c995:	83 ec 0c             	sub    esp,0xc
c001c998:	68 3b d9 01 c0       	push   0xc001d93b
c001c99d:	e8 65 38 ff ff       	call   c0010207 <KePanic(char const*)>
c001c9a2:	83 c4 10             	add    esp,0x10
c001c9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9b4:	85 c0                	test   eax,eax
c001c9b6:	75 34                	jne    c001c9ec <LinkedList<Device>::removeFirst()+0x8c>
c001c9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9d4:	83 f8 01             	cmp    eax,0x1
c001c9d7:	74 27                	je     c001ca00 <LinkedList<Device>::removeFirst()+0xa0>
c001c9d9:	83 ec 0c             	sub    esp,0xc
c001c9dc:	68 14 d9 01 c0       	push   0xc001d914
c001c9e1:	e8 21 38 ff ff       	call   c0010207 <KePanic(char const*)>
c001c9e6:	83 c4 10             	add    esp,0x10
c001c9e9:	eb 15                	jmp    c001ca00 <LinkedList<Device>::removeFirst()+0xa0>
c001c9eb:	90                   	nop
c001c9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9f2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fc:	89 10                	mov    DWORD PTR [eax],edx
c001c9fe:	66 90                	xchg   ax,ax
c001ca00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca07:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca11:	8d 76 00             	lea    esi,[esi+0x0]
c001ca14:	83 c4 0c             	add    esp,0xc
c001ca17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca18 <CPU::~CPU()>:
c001ca18:	83 ec 0c             	sub    esp,0xc
c001ca1b:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c001ca20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca24:	89 10                	mov    DWORD PTR [eax],edx
c001ca26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	50                   	push   eax
c001ca2e:	e8 93 ee fe ff       	call   c000b8c6 <Device::~Device()>
c001ca33:	83 c4 10             	add    esp,0x10
c001ca36:	90                   	nop
c001ca37:	83 c4 0c             	add    esp,0xc
c001ca3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca3c <CPU::~CPU()>:
c001ca3c:	83 ec 0c             	sub    esp,0xc
c001ca3f:	83 ec 0c             	sub    esp,0xc
c001ca42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca46:	e8 cd ff ff ff       	call   c001ca18 <CPU::~CPU()>
c001ca4b:	83 c4 10             	add    esp,0x10
c001ca4e:	83 ec 08             	sub    esp,0x8
c001ca51:	68 94 11 00 00       	push   0x1194
c001ca56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca5a:	e8 32 da fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001ca5f:	83 c4 10             	add    esp,0x10
c001ca62:	83 c4 0c             	add    esp,0xc
c001ca65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca68:	90                   	nop
c001ca69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca6c <ThreadControlBlock::ThreadControlBlock()>:
c001ca6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001caa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001caab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caaf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cab3:	90                   	nop
c001cab4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cab8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cabc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cacd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cadc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001caf8:	90                   	nop
c001caf9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cafc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cafc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb03:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb04 <PCI::~PCI()>:
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	ba 6c f3 01 c0       	mov    edx,0xc001f36c
c001cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb10:	89 10                	mov    DWORD PTR [eax],edx
c001cb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	50                   	push   eax
c001cb1a:	e8 31 e8 fe ff       	call   c000b350 <Bus::~Bus()>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	90                   	nop
c001cb23:	83 c4 0c             	add    esp,0xc
c001cb26:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb28 <PCI::~PCI()>:
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	83 ec 0c             	sub    esp,0xc
c001cb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb32:	e8 cd ff ff ff       	call   c001cb04 <PCI::~PCI()>
c001cb37:	83 c4 10             	add    esp,0x10
c001cb3a:	83 ec 08             	sub    esp,0x8
c001cb3d:	68 5c 01 00 00       	push   0x15c
c001cb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb46:	e8 46 d9 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	83 c4 0c             	add    esp,0xc
c001cb51:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cb52 <IDE::~IDE()>:
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	ba 20 f4 01 c0       	mov    edx,0xc001f420
c001cb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5e:	89 10                	mov    DWORD PTR [eax],edx
c001cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	50                   	push   eax
c001cb68:	e8 d3 f1 fe ff       	call   c000bd40 <HardDiskController::~HardDiskController()>
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	90                   	nop
c001cb71:	83 c4 0c             	add    esp,0xc
c001cb74:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb76 <IDE::~IDE()>:
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	83 ec 0c             	sub    esp,0xc
c001cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb80:	e8 cd ff ff ff       	call   c001cb52 <IDE::~IDE()>
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	83 ec 08             	sub    esp,0x8
c001cb8b:	68 70 02 00 00       	push   0x270
c001cb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb94:	e8 f8 d8 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cb99:	83 c4 10             	add    esp,0x10
c001cb9c:	83 c4 0c             	add    esp,0xc
c001cb9f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cba0 <SATABus::~SATABus()>:
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	ba 70 f4 01 c0       	mov    edx,0xc001f470
c001cba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbac:	89 10                	mov    DWORD PTR [eax],edx
c001cbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	50                   	push   eax
c001cbb6:	e8 85 f1 fe ff       	call   c000bd40 <HardDiskController::~HardDiskController()>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	90                   	nop
c001cbbf:	83 c4 0c             	add    esp,0xc
c001cbc2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cbc4 <SATABus::~SATABus()>:
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	83 ec 0c             	sub    esp,0xc
c001cbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbce:	e8 cd ff ff ff       	call   c001cba0 <SATABus::~SATABus()>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	83 ec 08             	sub    esp,0x8
c001cbd9:	68 64 01 00 00       	push   0x164
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	e8 aa d8 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cbe7:	83 c4 10             	add    esp,0x10
c001cbea:	83 c4 0c             	add    esp,0xc
c001cbed:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cbee <ATA::~ATA()>:
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c001cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfa:	89 10                	mov    DWORD PTR [eax],edx
c001cbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	50                   	push   eax
c001cc04:	e8 19 f2 fe ff       	call   c000be22 <PhysicalDisk::~PhysicalDisk()>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	90                   	nop
c001cc0d:	83 c4 0c             	add    esp,0xc
c001cc10:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc12 <ATA::~ATA()>:
c001cc12:	83 ec 0c             	sub    esp,0xc
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1c:	e8 cd ff ff ff       	call   c001cbee <ATA::~ATA()>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	83 ec 08             	sub    esp,0x8
c001cc27:	68 7c 01 00 00       	push   0x17c
c001cc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc30:	e8 5c d8 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	83 c4 0c             	add    esp,0xc
c001cc3b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc3c <ATAPI::~ATAPI()>:
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	ba f8 f4 01 c0       	mov    edx,0xc001f4f8
c001cc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc48:	89 10                	mov    DWORD PTR [eax],edx
c001cc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	50                   	push   eax
c001cc52:	e8 cb f1 fe ff       	call   c000be22 <PhysicalDisk::~PhysicalDisk()>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	90                   	nop
c001cc5b:	83 c4 0c             	add    esp,0xc
c001cc5e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc60 <ATAPI::~ATAPI()>:
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	83 ec 0c             	sub    esp,0xc
c001cc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6a:	e8 cd ff ff ff       	call   c001cc3c <ATAPI::~ATAPI()>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	83 ec 08             	sub    esp,0x8
c001cc75:	68 84 01 00 00       	push   0x184
c001cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7e:	e8 0e d8 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	83 c4 0c             	add    esp,0xc
c001cc89:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc8a <SATA::~SATA()>:
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	ba ac f5 01 c0       	mov    edx,0xc001f5ac
c001cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc96:	89 10                	mov    DWORD PTR [eax],edx
c001cc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	50                   	push   eax
c001cca0:	e8 7d f1 fe ff       	call   c000be22 <PhysicalDisk::~PhysicalDisk()>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	90                   	nop
c001cca9:	83 c4 0c             	add    esp,0xc
c001ccac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ccae <SATA::~SATA()>:
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	83 ec 0c             	sub    esp,0xc
c001ccb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb8:	e8 cd ff ff ff       	call   c001cc8a <SATA::~SATA()>
c001ccbd:	83 c4 10             	add    esp,0x10
c001ccc0:	83 ec 08             	sub    esp,0x8
c001ccc3:	68 7c 01 00 00       	push   0x17c
c001ccc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cccc:	e8 c0 d7 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001ccd1:	83 c4 10             	add    esp,0x10
c001ccd4:	83 c4 0c             	add    esp,0xc
c001ccd7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ccd8 <SATAPI::~SATAPI()>:
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	ba e4 f6 01 c0       	mov    edx,0xc001f6e4
c001cce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce4:	89 10                	mov    DWORD PTR [eax],edx
c001cce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	50                   	push   eax
c001ccee:	e8 2f f1 fe ff       	call   c000be22 <PhysicalDisk::~PhysicalDisk()>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	90                   	nop
c001ccf7:	83 c4 0c             	add    esp,0xc
c001ccfa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ccfc <SATAPI::~SATAPI()>:
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd06:	e8 cd ff ff ff       	call   c001ccd8 <SATAPI::~SATAPI()>
c001cd0b:	83 c4 10             	add    esp,0x10
c001cd0e:	83 ec 08             	sub    esp,0x8
c001cd11:	68 84 01 00 00       	push   0x184
c001cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1a:	e8 72 d7 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 c4 0c             	add    esp,0xc
c001cd25:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd26 <IOAPIC::~IOAPIC()>:
c001cd26:	83 ec 0c             	sub    esp,0xc
c001cd29:	ba 24 f7 01 c0       	mov    edx,0xc001f724
c001cd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd32:	89 10                	mov    DWORD PTR [eax],edx
c001cd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd38:	83 ec 0c             	sub    esp,0xc
c001cd3b:	50                   	push   eax
c001cd3c:	e8 85 eb fe ff       	call   c000b8c6 <Device::~Device()>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	90                   	nop
c001cd45:	83 c4 0c             	add    esp,0xc
c001cd48:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd4a <IOAPIC::~IOAPIC()>:
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	83 ec 0c             	sub    esp,0xc
c001cd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd54:	e8 cd ff ff ff       	call   c001cd26 <IOAPIC::~IOAPIC()>
c001cd59:	83 c4 10             	add    esp,0x10
c001cd5c:	83 ec 08             	sub    esp,0x8
c001cd5f:	68 68 01 00 00       	push   0x168
c001cd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd68:	e8 24 d7 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	83 c4 0c             	add    esp,0xc
c001cd73:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd74 <APICTimer::~APICTimer()>:
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c001cd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd80:	89 10                	mov    DWORD PTR [eax],edx
c001cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	50                   	push   eax
c001cd8a:	e8 75 04 ff ff       	call   c000d204 <Timer::~Timer()>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	90                   	nop
c001cd93:	83 c4 0c             	add    esp,0xc
c001cd96:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd98 <APICTimer::~APICTimer()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	83 ec 0c             	sub    esp,0xc
c001cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda2:	e8 cd ff ff ff       	call   c001cd74 <APICTimer::~APICTimer()>
c001cda7:	83 c4 10             	add    esp,0x10
c001cdaa:	83 ec 08             	sub    esp,0x8
c001cdad:	68 60 01 00 00       	push   0x160
c001cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb6:	e8 d6 d6 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	83 c4 0c             	add    esp,0xc
c001cdc1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cdc4 <PIT::~PIT()>:
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	ba bc f7 01 c0       	mov    edx,0xc001f7bc
c001cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd0:	89 10                	mov    DWORD PTR [eax],edx
c001cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	50                   	push   eax
c001cdda:	e8 25 04 ff ff       	call   c000d204 <Timer::~Timer()>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	90                   	nop
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cde8 <PIT::~PIT()>:
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	83 ec 0c             	sub    esp,0xc
c001cdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf2:	e8 cd ff ff ff       	call   c001cdc4 <PIT::~PIT()>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	83 ec 08             	sub    esp,0x8
c001cdfd:	68 5c 01 00 00       	push   0x15c
c001ce02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce06:	e8 86 d6 fe ff       	call   c000a491 <operator delete(void*, unsigned long)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	83 c4 0c             	add    esp,0xc
c001ce11:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be c1 e7 01 c0       	mov    esi,0xc001e7c1
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be dd e7 01 c0       	mov    esi,0xc001e7dd
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
