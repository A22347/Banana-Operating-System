
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 59 fa 00 00       	call   c000fa79 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 8a 02 00       	call   c0028a88 <_init>
c0000025:	c3                   	ret    
c0000026:	bb dc 96 02 c0       	mov    ebx,0xc00296dc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e8 96 02 c0    	cmp    ebx,0xc00296e8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000049:	3d f8 db 02 c0       	cmp    eax,0xc002dbf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 db 02 c0       	push   0xc002dbf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000075:	2d f8 db 02 c0       	sub    eax,0xc002dbf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 db 02 c0       	push   0xc002dbf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e228,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f0 96 02 c0       	mov    ebx,0xc00296f0
c00000bb:	81 eb ec 96 02 c0    	sub    ebx,0xc00296ec
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ec 96 02 c0       	mov    esi,0xc00296ec
c00000ca:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e2 02 c0       	mov    ds:0xc002e22c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 db 02 c0       	push   0xc002dbf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e228,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e2 02 c0       	push   0xc002e230
c000012c:	68 f8 db 02 c0       	push   0xc002dbf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 63 d4 01 00       	call   c001d806 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 c6 23 01 00       	call   c0012781 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 41 d4 01 00       	call   c001d806 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 e9 d8 01 00       	call   c001dccd <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 0e df 01 00       	call   c001e2fb <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 e6 02 c0 	lgdtd  ds:0xc002e670
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 2f 41 01 00       	call   c0014711 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 97 02 c0 02 	test   BYTE PTR [edx-0x3ffd6900],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd6900],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 97 02 c0 08 	test   BYTE PTR [edx-0x3ffd6900],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 97 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6900],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 97 02 c0 01 	test   BYTE PTR [edx-0x3ffd6900],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e260
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d9c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d9c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e29c
c0000e38:	c7 42 0c 94 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e294
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 e2 02 c0 02 	test   BYTE PTR ds:0xc002e260,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 ab e7 00 00       	call   c000f6c4 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 ed e6 00 00       	call   c000f6c4 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 d7 e6 00 00       	call   c000f6c4 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 b3 e6 00 00       	call   c000f6c4 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d9c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d9c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d6c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a0
c00011ba:	81 fb 94 e2 02 c0    	cmp    ebx,0xc002e294
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 e2 02 c0       	cmp    eax,0xc002e294
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 e2 02 c0    	cmp    DWORD PTR ds:0xc002e290,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c e2 02 c0       	mov    ds:0xc002e29c,eax
c00011f6:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c00011fb:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001209:	c7 40 0c 94 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e294
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1da8]
c000125a:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1da0]
c0001275:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d6c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,ecx
c000132f:	89 0d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,ecx
c0001335:	c7 41 08 94 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e294
c000133c:	c7 41 0c 94 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e294
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d74]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c e2 02 c0 	lea    edx,[eax*4-0x3ffd1d74]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edi
c0001402:	89 3d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,edi
c0001408:	c7 47 08 94 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e294
c000140f:	c7 47 0c 94 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e294
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 e2 02 c0    	mov    DWORD PTR ds:0xc002e290,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 e2 02 c0       	mov    edx,0xc002e260
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc e5 02 c0    	push   DWORD PTR ds:0xc002e5bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc e5 02 c0       	mov    eax,ds:0xc002e5bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e28c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d9c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 e2 02 c0       	mov    eax,0xc002e294
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c e5 02 c0       	cmp    eax,0xc002e58c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 98 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd67fc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 e2 02 c0       	mov    ds:0xc002e260,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 00 f2 01 00       	jmp    c0020df2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 31 f2 01 00       	jmp    c0020e39 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 fd 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0300]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 59 f2 01 00       	jmp    c0020e80 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 da 4e 02 00       	call   c0026de4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 99 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd66e0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 99 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd66e0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 98 02 c0       	mov    edx,0xc0029820
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 99 02 c0       	mov    edx,0xc0029940
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba f4 ca 02 c0       	mov    edx,0xc002caf4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 99 02 c0       	mov    edx,0xc002994c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 99 02 c0       	mov    edx,0xc0029930
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 e5 02 c0    	mov    ax,ds:0xc002e5e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 e5 02 c0    	mov    ds:0xc002e5e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 d7 3c 02 00       	call   c0026de4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 99 02 c0       	mov    eax,0xc0029952
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 98 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6760]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 99 02 c0       	mov    eax,0xc002995b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 99 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd66e0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 a2 26 02 00       	call   c0026de4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 99 02 c0       	mov    edx,0xc0029930
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 98 02 c0       	mov    edx,0xc0029820
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 98 02 c0       	mov    edx,0xc0029830
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 69 10 02 00       	call   c0026de4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 4f 10 02 00       	call   c0026de4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 98 02 c0       	mov    eax,0xc0029877
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 98 02 c0       	mov    eax,0xc0029870
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 e8 fb 01 00       	call   c0026de4 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 00 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a00]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be 60 98 02 c0       	mov    esi,0xc0029860
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 5c f5 01 00       	call   c0026de4 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba 40 99 02 c0       	mov    edx,0xc0029940
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba 40 98 02 c0       	mov    edx,0xc0029840
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba 50 98 02 c0       	mov    edx,0xc0029850
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba 62 99 02 c0       	mov    edx,0xc0029962
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba 6e 99 02 c0       	mov    edx,0xc002996e
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 82 99 02 c0       	mov    edx,0xc0029982
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 14 73 00 00       	call   c000f9b3 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 0e 73 00 00       	call   c000f9c3 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c a0 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ca0
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 a0 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ca0
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 a0 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6660]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 53 70 00 00       	call   c000f9c3 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 3d 70 00 00       	call   c000f9c3 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 b0 fe 01 00       	call   c00288b7 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 73 fe 01 00       	call   c0028899 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 47 fe 01 00       	call   c00288b7 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 fa f4 01 00       	call   c0027fbc <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 7c ff 01 00       	call   c0028a50 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 c1 fd 01 00       	call   c00288b7 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 03 fd 01 00       	call   c00288b7 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 d0 fc 01 00       	call   c0028899 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 bd fb 01 00       	call   c00288b7 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 85 fb 01 00       	call   c0028899 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 1c 6c 00 00       	call   c000f9e3 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 b7 6b 00 00       	call   c000f9c3 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 91 f9 01 00       	call   c00288b7 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 56 f9 01 00       	call   c0028899 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 00 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e00]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 66 f6 01 00       	call   c002864b <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 e4 ef 01 00       	call   c0027fe8 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 a0 f8 01 00       	call   c00288bb <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 8e f9 01 00       	call   c00289df <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 78 ef 01 00       	call   c0027fe8 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 23 f8 01 00       	call   c00288b5 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 04 f8 01 00       	call   c00288b9 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 9a f9 01 00       	call   c0028a70 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 44 f5 01 00       	call   c002864b <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 c2 ee 01 00       	call   c0027fe8 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 7e f7 01 00       	call   c00288bb <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 6c f8 01 00       	call   c00289df <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 56 ee 01 00       	call   c0027fe8 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 01 f7 01 00       	call   c00288b5 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 e1 f6 01 00       	call   c00288b9 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 76 f8 01 00       	call   c0028a70 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 1c f6 01 00       	call   c00288b7 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 da f5 01 00       	call   c0028899 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 c2 f5 01 00       	call   c00288b7 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 34 f3 01 00       	call   c002864b <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 36 e6 01 00       	call   c002796b <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 99 ec 01 00       	call   c0027fe8 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 eb f2 01 00       	call   c002864b <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 f1 e5 01 00       	call   c002796b <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 c0 f2 01 00       	call   c002864b <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 10 f5 01 00       	call   c00288b5 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 ed eb 01 00       	call   c0027fbc <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 6f f6 01 00       	call   c0028a50 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 96 f4 01 00       	call   c0028899 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 91 eb 01 00       	call   c0027fbc <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 0f f2 01 00       	call   c002864b <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 92 eb 01 00       	call   c0027fe8 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 e4 f1 01 00       	call   c002864b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 4b ee 01 00       	call   c00282cc <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 ca e4 01 00       	call   c002796b <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 2a de 01 00       	call   c0027300 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 01 f5 01 00       	call   c00289df <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 ea ea 01 00       	call   c0027fe8 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 d1 f4 01 00       	call   c00289df <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 43 e4 01 00       	call   c002796b <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 7c f3 01 00       	call   c00288bb <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 64 ed 01 00       	call   c00282cc <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 ea e3 01 00       	call   c002796b <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 d8 f4 01 00       	call   c0028a70 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 aa f0 01 00       	call   c002864b <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 01 ea 01 00       	call   c0027fbc <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 e0 f2 01 00       	call   c00288b7 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 79 e3 01 00       	call   c002796b <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 a5 e9 01 00       	call   c0027fbc <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 47 f4 01 00       	call   c0028a70 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 f8 ef 01 00       	call   c002864b <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 75 e9 01 00       	call   c0027fe8 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 c8 ef 01 00       	call   c002864b <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 ce e2 01 00       	call   c002796b <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 9e ef 01 00       	call   c002864b <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 f0 f1 01 00       	call   c00288b7 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 c7 e8 01 00       	call   c0027fbc <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 49 f3 01 00       	call   c0028a50 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 70 f1 01 00       	call   c0028899 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 6a e8 01 00       	call   c0027fbc <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 e8 ee 01 00       	call   c002864b <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 6b e8 01 00       	call   c0027fe8 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 bd ee 01 00       	call   c002864b <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 24 eb 01 00       	call   c00282cc <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 a3 e1 01 00       	call   c002796b <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 f3 da 01 00       	call   c0027300 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 ca f1 01 00       	call   c00289df <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 b3 e7 01 00       	call   c0027fe8 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 9a f1 01 00       	call   c00289df <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 0c e1 01 00       	call   c002796b <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 45 f0 01 00       	call   c00288bb <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 2c ea 01 00       	call   c00282cc <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 ab e0 01 00       	call   c002796b <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 99 f1 01 00       	call   c0028a70 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 6b ed 01 00       	call   c002864b <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 c2 e6 01 00       	call   c0027fbc <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 a1 ef 01 00       	call   c00288b7 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 3a e0 01 00       	call   c002796b <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 66 e6 01 00       	call   c0027fbc <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 db ec 01 00       	call   c002864b <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 e1 df 01 00       	call   c002796b <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 60 a2 02 c0       	mov    eax,0xc002a260
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 74 a2 02 c0       	mov    eax,0xc002a274
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 50 5f 00 00       	call   c000f9c3 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 52 5f 00 00       	call   c000f9e3 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 56 eb 01 00       	call   c002864b <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 d4 e4 01 00       	call   c0027fe8 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 66 d7 01 00       	call   c0027300 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 3d ee 01 00       	call   c00289df <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 26 e4 01 00       	call   c0027fe8 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 09 ee 01 00       	call   c00289df <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 7b dd 01 00       	call   c002796b <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 db ed 01 00       	call   c00289df <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 ca e3 01 00       	call   c0027fe8 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 33 dd 01 00       	call   c002796b <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 54 d6 01 00       	call   c0027300 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 2b ed 01 00       	call   c00289df <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 14 e3 01 00       	call   c0027fe8 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 f7 ec 01 00       	call   c00289df <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 69 dc 01 00       	call   c002796b <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 c9 ec 01 00       	call   c00289df <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 b8 e2 01 00       	call   c0027fe8 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 21 dc 01 00       	call   c002796b <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 ff db 01 00       	call   c002796b <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 db d4 01 00       	call   c0027300 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 b2 eb 01 00       	call   c00289df <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 9b e1 01 00       	call   c0027fe8 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 7e eb 01 00       	call   c00289df <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 f0 da 01 00       	call   c002796b <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 50 eb 01 00       	call   c00289df <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 39 e1 01 00       	call   c0027fe8 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 a2 da 01 00       	call   c002796b <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 02 eb 01 00       	call   c00289df <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 eb e0 01 00       	call   c0027fe8 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 54 da 01 00       	call   c002796b <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 69 d3 01 00       	call   c0027300 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 40 ea 01 00       	call   c00289df <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 29 e0 01 00       	call   c0027fe8 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 10 ea 01 00       	call   c00289df <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 82 d9 01 00       	call   c002796b <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 e2 e9 01 00       	call   c00289df <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 cb df 01 00       	call   c0027fe8 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 34 d9 01 00       	call   c002796b <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 94 e9 01 00       	call   c00289df <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 7d df 01 00       	call   c0027fe8 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 e6 d8 01 00       	call   c002796b <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 ba d8 01 00       	call   c002796b <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 17 df 01 00       	call   c0027fe8 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 d3 e7 01 00       	call   c00288bb <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 62 d8 01 00       	call   c002796b <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 bf de 01 00       	call   c0027fe8 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 7b e7 01 00       	call   c00288bb <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 f5 d0 01 00       	call   c0027300 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 cc e7 01 00       	call   c00289df <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 b5 dd 01 00       	call   c0027fe8 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 98 e7 01 00       	call   c00289df <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 0a d7 01 00       	call   c002796b <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 6a e7 01 00       	call   c00289df <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 53 dd 01 00       	call   c0027fe8 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 bc d6 01 00       	call   c002796b <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 1c e7 01 00       	call   c00289df <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 05 dd 01 00       	call   c0027fe8 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 6e d6 01 00       	call   c002796b <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 ce e6 01 00       	call   c00289df <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 b7 dc 01 00       	call   c0027fe8 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 20 d6 01 00       	call   c002796b <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 80 e6 01 00       	call   c00289df <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 69 dc 01 00       	call   c0027fe8 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 d2 d5 01 00       	call   c002796b <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 d4 ce 01 00       	call   c0027300 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 ab e5 01 00       	call   c00289df <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 94 db 01 00       	call   c0027fe8 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 7b e5 01 00       	call   c00289df <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 ed d4 01 00       	call   c002796b <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 4d e5 01 00       	call   c00289df <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 36 db 01 00       	call   c0027fe8 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 9f d4 01 00       	call   c002796b <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 ff e4 01 00       	call   c00289df <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 e8 da 01 00       	call   c0027fe8 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 51 d4 01 00       	call   c002796b <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 b1 e4 01 00       	call   c00289df <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 9a da 01 00       	call   c0027fe8 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 03 d4 01 00       	call   c002796b <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 63 e4 01 00       	call   c00289df <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 4c da 01 00       	call   c0027fe8 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 b5 d3 01 00       	call   c002796b <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 89 d3 01 00       	call   c002796b <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 e6 d9 01 00       	call   c0027fe8 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 a2 e2 01 00       	call   c00288bb <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 31 d3 01 00       	call   c002796b <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 8e d9 01 00       	call   c0027fe8 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 4a e2 01 00       	call   c00288bb <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 d8 d2 01 00       	call   c002796b <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 35 d9 01 00       	call   c0027fe8 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 f1 e1 01 00       	call   c00288bb <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 7f d2 01 00       	call   c002796b <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 dc d8 01 00       	call   c0027fe8 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 98 e1 01 00       	call   c00288bb <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 f6 ca 01 00       	call   c0027300 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 cd e1 01 00       	call   c00289df <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 b6 d7 01 00       	call   c0027fe8 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 99 e1 01 00       	call   c00289df <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 0b d1 01 00       	call   c002796b <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 6b e1 01 00       	call   c00289df <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 54 d7 01 00       	call   c0027fe8 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 bd d0 01 00       	call   c002796b <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 1d e1 01 00       	call   c00289df <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 06 d7 01 00       	call   c0027fe8 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 6f d0 01 00       	call   c002796b <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 cf e0 01 00       	call   c00289df <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 b8 d6 01 00       	call   c0027fe8 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 21 d0 01 00       	call   c002796b <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 81 e0 01 00       	call   c00289df <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 6a d6 01 00       	call   c0027fe8 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 d3 cf 01 00       	call   c002796b <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 33 e0 01 00       	call   c00289df <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 1c d6 01 00       	call   c0027fe8 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 82 cf 01 00       	call   c002796b <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 e2 df 01 00       	call   c00289df <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 cb d5 01 00       	call   c0027fe8 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 34 cf 01 00       	call   c002796b <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 2e c8 01 00       	call   c0027300 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 05 df 01 00       	call   c00289df <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 ee d4 01 00       	call   c0027fe8 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 ce de 01 00       	call   c00289df <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 40 ce 01 00       	call   c002796b <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 a0 de 01 00       	call   c00289df <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 89 d4 01 00       	call   c0027fe8 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 f2 cd 01 00       	call   c002796b <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 52 de 01 00       	call   c00289df <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 3b d4 01 00       	call   c0027fe8 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 a4 cd 01 00       	call   c002796b <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 04 de 01 00       	call   c00289df <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 ed d3 01 00       	call   c0027fe8 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 56 cd 01 00       	call   c002796b <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 b6 dd 01 00       	call   c00289df <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 9f d3 01 00       	call   c0027fe8 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 08 cd 01 00       	call   c002796b <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 68 dd 01 00       	call   c00289df <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 51 d3 01 00       	call   c0027fe8 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 b7 cc 01 00       	call   c002796b <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 17 dd 01 00       	call   c00289df <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 00 d3 01 00       	call   c0027fe8 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 6f cc 01 00       	call   c002796b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 48 cc 01 00       	call   c002796b <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 a6 d2 01 00       	call   c0027fe8 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 62 db 01 00       	call   c00288bb <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 f1 cb 01 00       	call   c002796b <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 4f d2 01 00       	call   c0027fe8 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 0b db 01 00       	call   c00288bb <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 99 cb 01 00       	call   c002796b <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 f7 d1 01 00       	call   c0027fe8 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 b3 da 01 00       	call   c00288bb <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 41 cb 01 00       	call   c002796b <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 9f d1 01 00       	call   c0027fe8 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 5b da 01 00       	call   c00288bb <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 e9 ca 01 00       	call   c002796b <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 47 d1 01 00       	call   c0027fe8 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 03 da 01 00       	call   c00288bb <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 97 ca 01 00       	call   c002796b <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 f5 d0 01 00       	call   c0027fe8 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 b1 d9 01 00       	call   c00288bb <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 c5 c2 01 00       	call   c0027300 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 9c d9 01 00       	call   c00289df <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 85 cf 01 00       	call   c0027fe8 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 6c d9 01 00       	call   c00289df <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 de c8 01 00       	call   c002796b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 a4 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d5c]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 12 d9 01 00       	call   c00289df <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 fb ce 01 00       	call   c0027fe8 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 66 c8 01 00       	call   c002796b <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 b3 d8 01 00       	call   c00289df <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 9c ce 01 00       	call   c0027fe8 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 07 c8 01 00       	call   c002796b <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 54 d8 01 00       	call   c00289df <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 3d ce 01 00       	call   c0027fe8 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 a8 c7 01 00       	call   c002796b <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 f5 d7 01 00       	call   c00289df <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 de cd 01 00       	call   c0027fe8 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 49 c7 01 00       	call   c002796b <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 96 d7 01 00       	call   c00289df <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 7f cd 01 00       	call   c0027fe8 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 ea c6 01 00       	call   c002796b <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 37 d7 01 00       	call   c00289df <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 20 cd 01 00       	call   c0027fe8 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 8b c6 01 00       	call   c002796b <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 d8 d6 01 00       	call   c00289df <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 c1 cc 01 00       	call   c0027fe8 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 2c c6 01 00       	call   c002796b <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 79 d6 01 00       	call   c00289df <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 62 cc 01 00       	call   c0027fe8 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 cd c5 01 00       	call   c002796b <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 d7 be 01 00       	call   c0027300 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 ae d5 01 00       	call   c00289df <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 97 cb 01 00       	call   c0027fe8 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 7e d5 01 00       	call   c00289df <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 f0 c4 01 00       	call   c002796b <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 c0 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d40]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 23 d5 01 00       	call   c00289df <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 0c cb 01 00       	call   c0027fe8 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 77 c4 01 00       	call   c002796b <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 c3 d4 01 00       	call   c00289df <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 ac ca 01 00       	call   c0027fe8 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 17 c4 01 00       	call   c002796b <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 63 d4 01 00       	call   c00289df <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 4c ca 01 00       	call   c0027fe8 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 b7 c3 01 00       	call   c002796b <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 03 d4 01 00       	call   c00289df <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 ec c9 01 00       	call   c0027fe8 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 57 c3 01 00       	call   c002796b <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 a3 d3 01 00       	call   c00289df <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 8c c9 01 00       	call   c0027fe8 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 f7 c2 01 00       	call   c002796b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 43 d3 01 00       	call   c00289df <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 2c c9 01 00       	call   c0027fe8 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 97 c2 01 00       	call   c002796b <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 e3 d2 01 00       	call   c00289df <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 cc c8 01 00       	call   c0027fe8 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 37 c2 01 00       	call   c002796b <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 83 d2 01 00       	call   c00289df <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 6c c8 01 00       	call   c0027fe8 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 d7 c1 01 00       	call   c002796b <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 dc a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5d24]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 7c c1 01 00       	call   c002796b <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 d9 c7 01 00       	call   c0027fe8 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 95 d0 01 00       	call   c00288bb <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 1f c1 01 00       	call   c002796b <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 7c c7 01 00       	call   c0027fe8 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 38 d0 01 00       	call   c00288bb <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 c2 c0 01 00       	call   c002796b <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 1f c7 01 00       	call   c0027fe8 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 db cf 01 00       	call   c00288bb <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 65 c0 01 00       	call   c002796b <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 c2 c6 01 00       	call   c0027fe8 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 7e cf 01 00       	call   c00288bb <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 08 c0 01 00       	call   c002796b <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 65 c6 01 00       	call   c0027fe8 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 21 cf 01 00       	call   c00288bb <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 ab bf 01 00       	call   c002796b <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 08 c6 01 00       	call   c0027fe8 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 c4 ce 01 00       	call   c00288bb <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 4e bf 01 00       	call   c002796b <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 ab c5 01 00       	call   c0027fe8 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 67 ce 01 00       	call   c00288bb <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 f1 be 01 00       	call   c002796b <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 4e c5 01 00       	call   c0027fe8 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 0a ce 01 00       	call   c00288bb <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 06 c5 01 00       	call   c0027fe8 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 7e cf 01 00       	jmp    c0028a70 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 e8 cb 01 00       	call   c00288b7 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 a6 cb 01 00       	call   c0028899 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 3d c9 01 00       	call   c002864b <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 3e bc 01 00       	call   c002796b <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 0d c9 01 00       	call   c002864b <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 74 c5 01 00       	call   c00282cc <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 13 cb 01 00       	call   c0028899 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 16 cb 01 00       	call   c00288b7 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 e9 ca 01 00       	call   c00288b7 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 e2 c4 01 00       	call   c00282cc <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 6c cc 01 00       	call   c0028a70 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 47 cc 01 00       	call   c0028a70 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 19 c8 01 00       	call   c002864b <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 70 c1 01 00       	call   c0027fbc <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 4f ca 01 00       	call   c00288b7 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 e8 ba 01 00       	call   c002796b <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 0c c1 01 00       	call   c0027fbc <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 ae cb 01 00       	call   c0028a70 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 e6 c3 01 00       	call   c00282cc <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 63 ba 01 00       	call   c002796b <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 8f c6 01 00       	call   c002864b <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 8f b9 01 00       	call   c002796b <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 6f b9 01 00       	call   c002796b <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 3f c6 01 00       	call   c002864b <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 8f c8 01 00       	call   c00288b5 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 6e bf 01 00       	call   c0027fbc <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 f0 c9 01 00       	call   c0028a50 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 17 c8 01 00       	call   c0028899 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 15 bf 01 00       	call   c0027fbc <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 93 c5 01 00       	call   c002864b <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 16 bf 01 00       	call   c0027fe8 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 68 c5 01 00       	call   c002864b <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 cf c1 01 00       	call   c00282cc <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 4e b8 01 00       	call   c002796b <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 18 c5 01 00       	call   c002864b <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 64 c7 01 00       	call   c00288b7 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 59 be 01 00       	call   c0027fe8 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 2b be 01 00       	call   c0027fe8 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 64 c4 01 00       	call   c002864b <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 c8 c0 01 00       	call   c00282cc <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 90 c0 01 00       	call   c00282cc <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 0f b7 01 00       	call   c002796b <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 fc c7 01 00       	call   c0028a70 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 ce c3 01 00       	call   c002864b <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 25 bd 01 00       	call   c0027fbc <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 04 c6 01 00       	call   c00288b7 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 9c b6 01 00       	call   c002796b <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 c0 bc 01 00       	call   c0027fbc <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 62 c7 01 00       	call   c0028a70 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 23 c5 01 00       	call   c00288b7 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 e1 c4 01 00       	call   c0028899 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 78 c2 01 00       	call   c002864b <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 79 b5 01 00       	call   c002796b <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 48 c2 01 00       	call   c002864b <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 af be 01 00       	call   c00282cc <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 4e c4 01 00       	call   c0028899 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 51 c4 01 00       	call   c00288b7 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 24 c4 01 00       	call   c00288b7 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 1d be 01 00       	call   c00282cc <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 a7 c5 01 00       	call   c0028a70 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 82 c5 01 00       	call   c0028a70 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 54 c1 01 00       	call   c002864b <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 ab ba 01 00       	call   c0027fbc <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 8a c3 01 00       	call   c00288b7 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 23 b4 01 00       	call   c002796b <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 47 ba 01 00       	call   c0027fbc <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 e9 c4 01 00       	call   c0028a70 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 21 bd 01 00       	call   c00282cc <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 9e b3 01 00       	call   c002796b <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 c9 bf 01 00       	call   c002864b <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 c9 b2 01 00       	call   c002796b <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 a9 b2 01 00       	call   c002796b <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 79 bf 01 00       	call   c002864b <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 c9 c1 01 00       	call   c00288b5 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 a7 b8 01 00       	call   c0027fbc <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 29 c3 01 00       	call   c0028a50 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 50 c1 01 00       	call   c0028899 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 4d b8 01 00       	call   c0027fbc <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 cb be 01 00       	call   c002864b <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 4e b8 01 00       	call   c0027fe8 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 a0 be 01 00       	call   c002864b <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 07 bb 01 00       	call   c00282cc <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 86 b1 01 00       	call   c002796b <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 50 be 01 00       	call   c002864b <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 9c c0 01 00       	call   c00288b7 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 91 b7 01 00       	call   c0027fe8 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 63 b7 01 00       	call   c0027fe8 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 9a bd 01 00       	call   c002864b <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 fe b9 01 00       	call   c00282cc <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 cb b9 01 00       	call   c00282cc <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 4a b0 01 00       	call   c002796b <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 37 c1 01 00       	call   c0028a70 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 09 bd 01 00       	call   c002864b <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 60 b6 01 00       	call   c0027fbc <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 3f bf 01 00       	call   c00288b7 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 d7 af 01 00       	call   c002796b <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 fb b5 01 00       	call   c0027fbc <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 9d c0 01 00       	call   c0028a70 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 5e be 01 00       	call   c00288b7 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 1c be 01 00       	call   c0028899 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 b3 bb 01 00       	call   c002864b <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 b4 ae 01 00       	call   c002796b <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 83 bb 01 00       	call   c002864b <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 ea b7 01 00       	call   c00282cc <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 89 bd 01 00       	call   c0028899 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 8c bd 01 00       	call   c00288b7 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 5f bd 01 00       	call   c00288b7 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 58 b7 01 00       	call   c00282cc <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 e2 be 01 00       	call   c0028a70 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 bd be 01 00       	call   c0028a70 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 8f ba 01 00       	call   c002864b <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 e6 b3 01 00       	call   c0027fbc <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 c5 bc 01 00       	call   c00288b7 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 5e ad 01 00       	call   c002796b <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 82 b3 01 00       	call   c0027fbc <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 24 be 01 00       	call   c0028a70 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 5c b6 01 00       	call   c00282cc <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 d9 ac 01 00       	call   c002796b <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 04 b9 01 00       	call   c002864b <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 04 ac 01 00       	call   c002796b <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 e4 ab 01 00       	call   c002796b <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 b4 b8 01 00       	call   c002864b <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 04 bb 01 00       	call   c00288b5 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 e2 b1 01 00       	call   c0027fbc <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 64 bc 01 00       	call   c0028a50 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 8b ba 01 00       	call   c0028899 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 88 b1 01 00       	call   c0027fbc <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 06 b8 01 00       	call   c002864b <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 89 b1 01 00       	call   c0027fe8 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 db b7 01 00       	call   c002864b <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 42 b4 01 00       	call   c00282cc <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 c1 aa 01 00       	call   c002796b <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 8b b7 01 00       	call   c002864b <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 d7 b9 01 00       	call   c00288b7 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 cc b0 01 00       	call   c0027fe8 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 9e b0 01 00       	call   c0027fe8 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 d5 b6 01 00       	call   c002864b <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 39 b3 01 00       	call   c00282cc <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 06 b3 01 00       	call   c00282cc <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 85 a9 01 00       	call   c002796b <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 72 ba 01 00       	call   c0028a70 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 44 b6 01 00       	call   c002864b <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 9b af 01 00       	call   c0027fbc <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 7a b8 01 00       	call   c00288b7 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 12 a9 01 00       	call   c002796b <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 36 af 01 00       	call   c0027fbc <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 d8 b9 01 00       	call   c0028a70 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 99 b7 01 00       	call   c00288b7 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 57 b7 01 00       	call   c0028899 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 ee b4 01 00       	call   c002864b <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 ef a7 01 00       	call   c002796b <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 be b4 01 00       	call   c002864b <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 25 b1 01 00       	call   c00282cc <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 c4 b6 01 00       	call   c0028899 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 c7 b6 01 00       	call   c00288b7 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 9a b6 01 00       	call   c00288b7 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 93 b0 01 00       	call   c00282cc <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 1d b8 01 00       	call   c0028a70 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 f8 b7 01 00       	call   c0028a70 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 ca b3 01 00       	call   c002864b <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 21 ad 01 00       	call   c0027fbc <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 00 b6 01 00       	call   c00288b7 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 99 a6 01 00       	call   c002796b <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 bd ac 01 00       	call   c0027fbc <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 5f b7 01 00       	call   c0028a70 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 97 af 01 00       	call   c00282cc <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 14 a6 01 00       	call   c002796b <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 3f b2 01 00       	call   c002864b <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 3f a5 01 00       	call   c002796b <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 1f a5 01 00       	call   c002796b <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 ef b1 01 00       	call   c002864b <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 3f b4 01 00       	call   c00288b5 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 1d ab 01 00       	call   c0027fbc <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 9f b5 01 00       	call   c0028a50 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 c6 b3 01 00       	call   c0028899 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 c3 aa 01 00       	call   c0027fbc <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 41 b1 01 00       	call   c002864b <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 c4 aa 01 00       	call   c0027fe8 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 16 b1 01 00       	call   c002864b <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 7d ad 01 00       	call   c00282cc <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 fc a3 01 00       	call   c002796b <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 c6 b0 01 00       	call   c002864b <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 12 b3 01 00       	call   c00288b7 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 07 aa 01 00       	call   c0027fe8 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 d9 a9 01 00       	call   c0027fe8 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 10 b0 01 00       	call   c002864b <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 74 ac 01 00       	call   c00282cc <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 41 ac 01 00       	call   c00282cc <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 c0 a2 01 00       	call   c002796b <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 ad b3 01 00       	call   c0028a70 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 7f af 01 00       	call   c002864b <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 d6 a8 01 00       	call   c0027fbc <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 b5 b1 01 00       	call   c00288b7 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 4d a2 01 00       	call   c002796b <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 71 a8 01 00       	call   c0027fbc <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 13 b3 01 00       	call   c0028a70 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 d1 b0 01 00       	call   c00288b7 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 8f b0 01 00       	call   c0028899 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 26 ae 01 00       	call   c002864b <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 27 a1 01 00       	call   c002796b <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 f6 ad 01 00       	call   c002864b <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 5d aa 01 00       	call   c00282cc <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 fc af 01 00       	call   c0028899 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 ff af 01 00       	call   c00288b7 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 d2 af 01 00       	call   c00288b7 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 cb a9 01 00       	call   c00282cc <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 55 b1 01 00       	call   c0028a70 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 2c b1 01 00       	call   c0028a70 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 fe ac 01 00       	call   c002864b <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 55 a6 01 00       	call   c0027fbc <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 34 af 01 00       	call   c00288b7 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 cd 9f 01 00       	call   c002796b <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 f5 a5 01 00       	call   c0027fbc <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 97 b0 01 00       	call   c0028a70 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 d0 a8 01 00       	call   c00282cc <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 4d 9f 01 00       	call   c002796b <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 79 ab 01 00       	call   c002864b <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 79 9e 01 00       	call   c002796b <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 59 9e 01 00       	call   c002796b <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 29 ab 01 00       	call   c002864b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 5d ad 01 00       	call   c0028899 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 54 a4 01 00       	call   c0027fbc <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 d6 ae 01 00       	call   c0028a50 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 fd ac 01 00       	call   c0028899 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 f7 a3 01 00       	call   c0027fbc <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 75 aa 01 00       	call   c002864b <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 f8 a3 01 00       	call   c0027fe8 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 4a aa 01 00       	call   c002864b <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 b1 a6 01 00       	call   c00282cc <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 30 9d 01 00       	call   c002796b <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 fa a9 01 00       	call   c002864b <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 46 ac 01 00       	call   c00288b7 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 3b a3 01 00       	call   c0027fe8 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 0d a3 01 00       	call   c0027fe8 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 51 a9 01 00       	call   c002864b <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 b8 a5 01 00       	call   c00282cc <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 a1 a2 01 00       	call   c0027fe8 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 5d ab 01 00       	call   c00288bb <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 50 a5 01 00       	call   c00282cc <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 cf 9b 01 00       	call   c002796b <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 bc ac 01 00       	call   c0028a70 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 8e a8 01 00       	call   c002864b <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 e5 a1 01 00       	call   c0027fbc <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 c4 aa 01 00       	call   c00288b7 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 5c 9b 01 00       	call   c002796b <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 84 a1 01 00       	call   c0027fbc <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 26 ac 01 00       	call   c0028a70 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 04 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5cfc]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 f8 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d08]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 16 1b 00 00       	call   c000f9c3 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 d9 a8 01 00       	call   c00288b7 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 97 a8 01 00       	call   c0028899 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 83 a8 01 00       	call   c00288b7 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 f5 a5 01 00       	call   c002864b <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 73 9f 01 00       	call   c0027fe8 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 c5 a5 01 00       	call   c002864b <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 cb 98 01 00       	call   c002796b <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 9a a5 01 00       	call   c002864b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 ea a7 01 00       	call   c00288b5 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 cb 9e 01 00       	call   c0027fbc <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 4d a9 01 00       	call   c0028a50 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 74 a7 01 00       	call   c0028899 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 73 9e 01 00       	call   c0027fbc <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 f1 a4 01 00       	call   c002864b <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 74 9e 01 00       	call   c0027fe8 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 c6 a4 01 00       	call   c002864b <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 2d a1 01 00       	call   c00282cc <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 ac 97 01 00       	call   c002796b <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 d4 a0 01 00       	call   c00282cc <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 5a 97 01 00       	call   c002796b <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 48 a8 01 00       	call   c0028a70 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 1a a4 01 00       	call   c002864b <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 71 9d 01 00       	call   c0027fbc <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 50 a6 01 00       	call   c00288b7 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 e9 96 01 00       	call   c002796b <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 15 9d 01 00       	call   c0027fbc <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 b7 a7 01 00       	call   c0028a70 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 64 a3 01 00       	call   c002864b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 e1 9c 01 00       	call   c0027fe8 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 32 a3 01 00       	call   c002864b <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 38 96 01 00       	call   c002796b <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 08 a3 01 00       	call   c002864b <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 5c a5 01 00       	call   c00288b9 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 35 9c 01 00       	call   c0027fbc <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 b7 a6 01 00       	call   c0028a50 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 de a4 01 00       	call   c0028899 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 dc 9b 01 00       	call   c0027fbc <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 5a a2 01 00       	call   c002864b <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 dd 9b 01 00       	call   c0027fe8 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 2f a2 01 00       	call   c002864b <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 96 9e 01 00       	call   c00282cc <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 15 95 01 00       	call   c002796b <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 31 9e 01 00       	call   c00282cc <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 b0 94 01 00       	call   c002796b <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 9e a5 01 00       	call   c0028a70 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 70 a1 01 00       	call   c002864b <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 c7 9a 01 00       	call   c0027fbc <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 a6 a3 01 00       	call   c00288b7 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 3f 94 01 00       	call   c002796b <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 6b 9a 01 00       	call   c0027fbc <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 dc a0 01 00       	call   c002864b <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 e2 93 01 00       	call   c002796b <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 1e a4 02 c0       	mov    eax,0xc002a41e
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 2f a4 02 c0       	mov    eax,0xc002a42f
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 58 13 00 00       	call   c000f9c3 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 5a 13 00 00       	call   c000f9e3 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 d4 12 00 00       	jmp    c000f9b3 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 ef 12 00 00       	jmp    c000f9d3 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e708:	48                   	dec    eax
c000e709:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000e719:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c000e728:	48                   	dec    eax
c000e729:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c000e743:	e8 f3 f7 00 00       	call   c001df3b <schedule()>
c000e748:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000e74d:	48                   	dec    eax
c000e74e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 66 a4 02 c0       	push   0xc002a466
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 68 e6 02 c0       	mov    eax,0xc002e668
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 6f a4 02 c0       	push   0xc002a46f
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 e4 6d 02 c0       	mov    eax,0xc0026de4
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 79 a4 02 c0       	push   0xc002a479
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 18 6b 02 c0       	mov    eax,0xc0026b18
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 82 a4 02 c0       	push   0xc002a482
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 e4 6e 02 c0       	mov    eax,0xc0026ee4
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 8c a4 02 c0       	push   0xc002a48c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 64 6c 02 c0       	mov    eax,0xc0026c64
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 95 a4 02 c0       	push   0xc002a495
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 6c e6 02 c0       	mov    eax,0xc002e66c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 a2 a4 02 c0       	push   0xc002a4a2
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 6d e6 02 c0       	mov    eax,0xc002e66d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 2b 57 00 00       	call   c0013fce <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 af a4 02 c0       	push   0xc002a4af
c000e8d3:	e8 35 11 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 c6 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4c6
c000e8e0:	e8 28 11 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 c2 10 00 00       	call   c000f9b3 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c000e900:	68 df a4 02 c0       	push   0xc002a4df
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 11 f2 00 00       	call   c001db1e <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 fb f1 00 c0       	push   0xc000f1fb
c000e91c:	53                   	push   ebx
c000e91d:	e8 f4 f3 00 00       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 09 e7 01 c0       	push   0xc001e709
c000e92b:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c000e931:	e8 e0 f3 00 00       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 48 fb 02 c0       	mov    ds:0xc002fb48,eax
c000e93e:	68 58 a6 02 c0       	push   0xc002a658
c000e943:	c6 05 6d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e66d,0x1
c000e94a:	e8 be 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e94f:	e8 61 01 01 00       	call   c001eab5 <Vm::initialise8086()>
c000e954:	e8 3d 44 00 00       	call   c0012d96 <Fs::initVFS()>
c000e959:	c7 04 24 ec a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ec
c000e960:	e8 a8 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e965:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 58 a6 02 c0       	push   0xc002a658
c000e984:	e8 84 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e989:	e8 18 da 00 00       	call   c001c3a6 <Sys::loadSyscalls()>
c000e98e:	e8 0d b9 00 00       	call   c001a2a0 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 06 a5 02 c0       	push   0xc002a506
c000e99d:	68 0f a5 02 c0       	push   0xc002a50f
c000e9a2:	e8 be c7 00 00       	call   c001b165 <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 d7 4e 00 00       	call   c0013886 <User::loadClockSettings(int)>
c000e9af:	c7 04 24 7c a6 02 c0 	mov    DWORD PTR [esp],0xc002a67c
c000e9b6:	e8 52 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 c2 55 00 00       	call   c0013f8e <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 17 a5 02 c0 	mov    DWORD PTR [esp],0xc002a517
c000e9d3:	e8 35 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 2b b4 00 00       	call   c0019e08 <Krnl::startCPUs()>
c000e9dd:	c7 04 24 31 a5 02 c0 	mov    DWORD PTR [esp],0xc002a531
c000e9e4:	e8 24 10 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 42 a5 02 c0       	push   0xc002a542
c000e9f8:	e8 79 eb 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 a1 ed 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 fe f6 00 00       	call   c001e111 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 5e a5 02 c0       	push   0xc002a55e
c000ea27:	50                   	push   eax
c000ea28:	e8 1b 56 00 00       	call   c0014048 <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 81 e6 02 c0 04 	test   BYTE PTR ds:0xc002e681,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 e5 7e 01 00       	call   c0026aa6 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 0e a1 00 00       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 e7 a0 00 00       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 c5 a0 00 00       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 a3 a0 00 00       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 80 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e680,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 b1 9f 00 00       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 8c 9f 00 00       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 4f 7d 01 00       	call   c0026a60 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 0c 7d 01 00       	call   c0026a40 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 a8 9f 00 00       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 67 a5 02 c0       	push   0xc002a567
c000eda4:	e8 00 b6 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 6d a5 02 c0       	push   0xc002a56d
c000eddc:	e8 c8 b5 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 9c a6 02 c0       	push   0xc002a69c
c000ee32:	e8 d6 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 80 e6 02 c0 04 	test   BYTE PTR ds:0xc002e680,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 a0 d5 02 c0 	sete   BYTE PTR ds:0xc002d5a0
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 73 a5 02 c0       	push   0xc002a573
c000ee51:	e8 b5 3b 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 89 a5 02 c0       	push   0xc002a589
c000ee62:	e8 a4 3b 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 9d a5 02 c0       	push   0xc002a59d
c000ee70:	e8 96 3b 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000ee75:	c7 04 24 b0 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5b0
c000ee7c:	e8 8a 3b 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000ee81:	c7 04 24 c2 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5c2
c000ee88:	e8 80 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000ee8d:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee94:	e8 1a 0b 00 00       	call   c000f9b3 <malloc>
c000ee99:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee9c:	89 c6                	mov    esi,eax
c000ee9e:	e8 cb 90 00 00       	call   c0017f6e <ACPI::ACPI()>
c000eea3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eea9:	c7 04 24 dc a5 02 c0 	mov    DWORD PTR [esp],0xc002a5dc
c000eeb0:	e8 58 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000eeb5:	59                   	pop    ecx
c000eeb6:	5e                   	pop    esi
c000eeb7:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eebd:	53                   	push   ebx
c000eebe:	e8 81 4f 00 00       	call   c0013e44 <Device::addChild(Device*)>
c000eec3:	c7 04 24 c0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6c0
c000eeca:	e8 3e 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000eecf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed2:	e8 9f fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eed7:	c7 04 24 e0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e0
c000eede:	e8 2a 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000eee3:	c7 04 24 f6 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5f6
c000eeea:	e8 1e 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000eeef:	58                   	pop    eax
c000eef0:	5a                   	pop    edx
c000eef1:	6a 01                	push   0x1
c000eef3:	53                   	push   ebx
c000eef4:	e8 13 ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eef9:	c7 04 24 17 a5 02 c0 	mov    DWORD PTR [esp],0xc002a517
c000ef00:	e8 08 0b 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000ef05:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef0c:	e8 a2 0a 00 00       	call   c000f9b3 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 a7 9e 00 00       	call   c0018dc2 <CPU::CPU()>
c000ef1b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef21:	59                   	pop    ecx
c000ef22:	58                   	pop    eax
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 1a 4f 00 00       	call   c0013e44 <Device::addChild(Device*)>
c000ef2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef30:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef36:	6a 00                	push   0x0
c000ef38:	6a 00                	push   0x0
c000ef3a:	50                   	push   eax
c000ef3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef3e:	83 c4 14             	add    esp,0x14
c000ef41:	68 00 a7 02 c0       	push   0xc002a700
c000ef46:	e8 c2 0a 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000ef4b:	e8 8c 54 00 00       	call   c00143dc <setupFPU()>
c000ef50:	83 c4 10             	add    esp,0x10
c000ef53:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef59:	85 c0                	test   eax,eax
c000ef5b:	74 1f                	je     c000ef7c <Computer::open(int, int, void*)+0x158>
c000ef5d:	83 ec 08             	sub    esp,0x8
c000ef60:	50                   	push   eax
c000ef61:	53                   	push   ebx
c000ef62:	e8 dd 4e 00 00       	call   c0013e44 <Device::addChild(Device*)>
c000ef67:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef6f:	6a 00                	push   0x0
c000ef71:	6a 00                	push   0x0
c000ef73:	6a 00                	push   0x0
c000ef75:	50                   	push   eax
c000ef76:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef79:	83 c4 20             	add    esp,0x20
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	68 07 a6 02 c0       	push   0xc002a607
c000ef84:	e8 84 0a 00 00       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000ef89:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef90:	e8 a3 ee 00 00       	call   c001de38 <setupMultitasking(void (*)())>
c000ef95:	83 c4 14             	add    esp,0x14
c000ef98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef9d:	5b                   	pop    ebx
c000ef9e:	5e                   	pop    esi
c000ef9f:	c3                   	ret    

c000efa0 <Computer::disableNMI()>:
c000efa0:	6a 00                	push   0x0
c000efa2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efa6:	e8 61 fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000efab:	58                   	pop    eax
c000efac:	5a                   	pop    edx
c000efad:	c3                   	ret    

c000efae <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efb2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efb9:	19 c0                	sbb    eax,eax
c000efbb:	83 e0 80             	and    eax,0xffffff80
c000efbe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efc2:	e6 70                	out    0x70,al
c000efc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efc8:	e6 71                	out    0x71,al
c000efca:	c3                   	ret    
c000efcb:	90                   	nop

c000efcc <Computer::handleNMI()>:
c000efcc:	56                   	push   esi
c000efcd:	53                   	push   ebx
c000efce:	83 ec 10             	sub    esp,0x10
c000efd1:	e4 92                	in     al,0x92
c000efd3:	89 c6                	mov    esi,eax
c000efd5:	e4 61                	in     al,0x61
c000efd7:	68 22 a6 02 c0       	push   0xc002a622
c000efdc:	88 c3                	mov    bl,al
c000efde:	e8 28 3a 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	83 e6 10             	and    esi,0x10
c000efe9:	75 0d                	jne    c000eff8 <Computer::handleNMI()+0x2c>
c000efeb:	f6 c3 40             	test   bl,0x40
c000efee:	75 1d                	jne    c000f00d <Computer::handleNMI()+0x41>
c000eff0:	84 db                	test   bl,bl
c000eff2:	78 2d                	js     c000f021 <Computer::handleNMI()+0x55>
c000eff4:	58                   	pop    eax
c000eff5:	5b                   	pop    ebx
c000eff6:	5e                   	pop    esi
c000eff7:	c3                   	ret    
c000eff8:	83 ec 0c             	sub    esp,0xc
c000effb:	68 33 a6 02 c0       	push   0xc002a633
c000f000:	e8 a4 b3 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000f005:	83 c4 10             	add    esp,0x10
c000f008:	f6 c3 40             	test   bl,0x40
c000f00b:	74 e3                	je     c000eff0 <Computer::handleNMI()+0x24>
c000f00d:	83 ec 0c             	sub    esp,0xc
c000f010:	68 40 a6 02 c0       	push   0xc002a640
c000f015:	e8 8f b3 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	84 db                	test   bl,bl
c000f01f:	79 d3                	jns    c000eff4 <Computer::handleNMI()+0x28>
c000f021:	c7 44 24 10 4a a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a64a
c000f029:	5a                   	pop    edx
c000f02a:	5b                   	pop    ebx
c000f02b:	5e                   	pop    esi
c000f02c:	e9 78 b3 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c000f031:	90                   	nop

c000f032 <Computer::setDiskActivityLight(int, bool)>:
c000f032:	56                   	push   esi
c000f033:	53                   	push   ebx
c000f034:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f038:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f03d:	77 1b                	ja     c000f05a <Computer::setDiskActivityLight(int, bool)+0x28>
c000f03f:	e4 92                	in     al,0x92
c000f041:	bb 40 00 00 00       	mov    ebx,0x40
c000f046:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f04a:	89 da                	mov    edx,ebx
c000f04c:	d3 e2                	shl    edx,cl
c000f04e:	89 f1                	mov    ecx,esi
c000f050:	f7 d2                	not    edx
c000f052:	d3 e3                	shl    ebx,cl
c000f054:	21 d0                	and    eax,edx
c000f056:	09 d8                	or     eax,ebx
c000f058:	e6 92                	out    0x92,al
c000f05a:	5b                   	pop    ebx
c000f05b:	5e                   	pop    esi
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDTEntry::setBase(unsigned int)>:
c000f05e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f062:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f066:	89 c1                	mov    ecx,eax
c000f068:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f06c:	c1 e9 10             	shr    ecx,0x10
c000f06f:	c1 e8 18             	shr    eax,0x18
c000f072:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f075:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f078:	c3                   	ret    
c000f079:	90                   	nop

c000f07a <GDTEntry::setLimit(unsigned int)>:
c000f07a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f082:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f085:	66 89 01             	mov    WORD PTR [ecx],ax
c000f088:	83 e2 f0             	and    edx,0xfffffff0
c000f08b:	c1 e8 10             	shr    eax,0x10
c000f08e:	83 e0 0f             	and    eax,0xf
c000f091:	09 d0                	or     eax,edx
c000f093:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f096:	c3                   	ret    
c000f097:	90                   	nop

c000f098 <GDT::GDT()>:
c000f098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	90                   	nop
c000f0ad:	c3                   	ret    

c000f0ae <GDT::addEntry(GDTEntry)>:
c000f0ae:	53                   	push   ebx
c000f0af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0bd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0c1:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0c5:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0c8:	c1 e0 03             	shl    eax,0x3
c000f0cb:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0cd:	5b                   	pop    ebx
c000f0ce:	c3                   	ret    
c000f0cf:	90                   	nop

c000f0d0 <GDT::getNumberOfEntries()>:
c000f0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d6:	c3                   	ret    
c000f0d7:	90                   	nop

c000f0d8 <GDT::flush()>:
c000f0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0de:	83 c0 04             	add    eax,0x4
c000f0e1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0e8:	a3 72 e6 02 c0       	mov    ds:0xc002e672,eax
c000f0ed:	66 89 15 70 e6 02 c0 	mov    WORD PTR ds:0xc002e670,dx
c000f0f4:	e9 57 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0f9:	90                   	nop

c000f0fa <GDT::setup()>:
c000f0fa:	55                   	push   ebp
c000f0fb:	57                   	push   edi
c000f0fc:	56                   	push   esi
c000f0fd:	53                   	push   ebx
c000f0fe:	83 ec 3c             	sub    esp,0x3c
c000f101:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f105:	6a 00                	push   0x0
c000f107:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f10b:	53                   	push   ebx
c000f10c:	e8 4d ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f111:	6a 00                	push   0x0
c000f113:	53                   	push   ebx
c000f114:	e8 61 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f119:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f121:	6a 00                	push   0x0
c000f123:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f127:	53                   	push   ebx
c000f128:	e8 31 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f12d:	68 ff ff ff 00       	push   0xffffff
c000f132:	53                   	push   ebx
c000f133:	e8 42 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f138:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f13c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f141:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f146:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f14a:	83 c4 20             	add    esp,0x20
c000f14d:	6a 00                	push   0x0
c000f14f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f153:	53                   	push   ebx
c000f154:	e8 05 ff ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c000f159:	68 ff ff ff 00       	push   0xffffff
c000f15e:	53                   	push   ebx
c000f15f:	e8 16 ff ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c000f164:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f168:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f16c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f170:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f174:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f178:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f17d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f182:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f186:	89 d8                	mov    eax,ebx
c000f188:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f18c:	80 cc 60             	or     ah,0x60
c000f18f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f193:	83 c4 0c             	add    esp,0xc
c000f196:	89 f8                	mov    eax,edi
c000f198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f19c:	80 cc 60             	or     ah,0x60
c000f19f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1a3:	89 c7                	mov    edi,eax
c000f1a5:	55                   	push   ebp
c000f1a6:	e8 03 ff ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1ab:	83 c4 0c             	add    esp,0xc
c000f1ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1b6:	55                   	push   ebp
c000f1b7:	e8 f2 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1bc:	83 c4 0c             	add    esp,0xc
c000f1bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 e1 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1cd:	83 c4 0c             	add    esp,0xc
c000f1d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1d8:	53                   	push   ebx
c000f1d9:	51                   	push   ecx
c000f1da:	55                   	push   ebp
c000f1db:	e8 ce fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	57                   	push   edi
c000f1e4:	56                   	push   esi
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 c3 fe ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c000f1eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1ee:	e8 e5 fe ff ff       	call   c000f0d8 <GDT::flush()>
c000f1f3:	83 c4 4c             	add    esp,0x4c
c000f1f6:	5b                   	pop    ebx
c000f1f7:	5e                   	pop    esi
c000f1f8:	5f                   	pop    edi
c000f1f9:	5d                   	pop    ebp
c000f1fa:	c3                   	ret    

c000f1fb <idleFunction(void*)>:
c000f1fb:	53                   	push   ebx
c000f1fc:	83 ec 08             	sub    esp,0x8
c000f1ff:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000f204:	48                   	dec    eax
c000f205:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000f20a:	75 01                	jne    c000f20d <idleFunction(void*)+0x12>
c000f20c:	fb                   	sti    
c000f20d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f212:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f218:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f21f:	74 3c                	je     c000f25d <idleFunction(void*)+0x62>
c000f221:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f228:	74 33                	je     c000f25d <idleFunction(void*)+0x62>
c000f22a:	31 db                	xor    ebx,ebx
c000f22c:	52                   	push   edx
c000f22d:	52                   	push   edx
c000f22e:	68 e1 00 00 00       	push   0xe1
c000f233:	50                   	push   eax
c000f234:	e8 49 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f239:	53                   	push   ebx
c000f23a:	83 e0 02             	and    eax,0x2
c000f23d:	50                   	push   eax
c000f23e:	68 e1 00 00 00       	push   0xe1
c000f243:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c000f249:	e8 60 fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f24e:	83 c4 20             	add    esp,0x20
c000f251:	e8 29 10 ff ff       	call   c000027f <doTPAUSE>
c000f256:	e8 95 98 01 00       	call   c0028af0 <idleCommon()>
c000f25b:	eb f4                	jmp    c000f251 <idleFunction(void*)+0x56>
c000f25d:	fb                   	sti    
c000f25e:	f4                   	hlt    
c000f25f:	e8 8c 98 01 00       	call   c0028af0 <idleCommon()>
c000f264:	eb f7                	jmp    c000f25d <idleFunction(void*)+0x62>

c000f266 <IDTEntry::IDTEntry(bool)>:
c000f266:	83 ec 04             	sub    esp,0x4
c000f269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f26d:	88 04 24             	mov    BYTE PTR [esp],al
c000f270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f274:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f286:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f289:	83 e2 f0             	and    edx,0xfffffff0
c000f28c:	83 ca 0e             	or     edx,0xe
c000f28f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f296:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f299:	83 e2 ef             	and    edx,0xffffffef
c000f29c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2a3:	74 04                	je     c000f2a9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2a5:	b2 03                	mov    dl,0x3
c000f2a7:	eb 02                	jmp    c000f2ab <IDTEntry::IDTEntry(bool)+0x45>
c000f2a9:	b2 00                	mov    dl,0x0
c000f2ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2af:	83 e2 03             	and    edx,0x3
c000f2b2:	88 d1                	mov    cl,dl
c000f2b4:	c1 e1 05             	shl    ecx,0x5
c000f2b7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ba:	83 e2 9f             	and    edx,0xffffff9f
c000f2bd:	09 ca                	or     edx,ecx
c000f2bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 ca 80             	or     edx,0xffffff80
c000f2cc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2cf:	90                   	nop
c000f2d0:	83 c4 04             	add    esp,0x4
c000f2d3:	c3                   	ret    

c000f2d4 <IDTEntry::setOffset(unsigned int)>:
c000f2d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2dc:	66 89 02             	mov    WORD PTR [edx],ax
c000f2df:	c1 e8 10             	shr    eax,0x10
c000f2e2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2e6:	c3                   	ret    
c000f2e7:	90                   	nop

c000f2e8 <IDT::IDT()>:
c000f2e8:	90                   	nop
c000f2e9:	c3                   	ret    

c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ee:	83 c0 30             	add    eax,0x30
c000f2f1:	c3                   	ret    

c000f2f2 <IDT::addEntry(IDTEntry, int)>:
c000f2f2:	53                   	push   ebx
c000f2f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f303:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f306:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f30a:	5b                   	pop    ebx
c000f30b:	c3                   	ret    

c000f30c <IDT::addEntry(int, void (*)(), bool)>:
c000f30c:	53                   	push   ebx
c000f30d:	83 ec 10             	sub    esp,0x10
c000f310:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f315:	50                   	push   eax
c000f316:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f31a:	53                   	push   ebx
c000f31b:	e8 46 ff ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f320:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f324:	53                   	push   ebx
c000f325:	e8 aa ff ff ff       	call   c000f2d4 <IDTEntry::setOffset(unsigned int)>
c000f32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f32e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f332:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f33a:	e8 b3 ff ff ff       	call   c000f2f2 <IDT::addEntry(IDTEntry, int)>
c000f33f:	83 c4 30             	add    esp,0x30
c000f342:	5b                   	pop    ebx
c000f343:	c3                   	ret    

c000f344 <IDT::flush()>:
c000f344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f348:	66 c7 05 78 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e678,0x7ff
c000f351:	a3 7a e6 02 c0       	mov    ds:0xc002e67a,eax
c000f356:	0f 01 1d 78 e6 02 c0 	lidtd  ds:0xc002e678
c000f35d:	c3                   	ret    

c000f35e <IDT::setup()>:
c000f35e:	57                   	push   edi
c000f35f:	56                   	push   esi
c000f360:	53                   	push   ebx
c000f361:	83 ec 10             	sub    esp,0x10
c000f364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f368:	6a 00                	push   0x0
c000f36a:	68 70 04 00 c0       	push   0xc0000470
c000f36f:	6a 00                	push   0x0
c000f371:	53                   	push   ebx
c000f372:	e8 95 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f377:	6a 00                	push   0x0
c000f379:	68 80 04 00 c0       	push   0xc0000480
c000f37e:	6a 01                	push   0x1
c000f380:	53                   	push   ebx
c000f381:	e8 86 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	6a 00                	push   0x0
c000f38b:	68 8a 04 00 c0       	push   0xc000048a
c000f390:	6a 02                	push   0x2
c000f392:	53                   	push   ebx
c000f393:	e8 74 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f398:	6a 00                	push   0x0
c000f39a:	68 94 04 00 c0       	push   0xc0000494
c000f39f:	6a 03                	push   0x3
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 65 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	83 c4 20             	add    esp,0x20
c000f3aa:	6a 00                	push   0x0
c000f3ac:	68 9e 04 00 c0       	push   0xc000049e
c000f3b1:	6a 04                	push   0x4
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 53 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 a8 04 00 c0       	push   0xc00004a8
c000f3c0:	6a 05                	push   0x5
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 44 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	83 c4 20             	add    esp,0x20
c000f3cb:	6a 00                	push   0x0
c000f3cd:	68 b2 04 00 c0       	push   0xc00004b2
c000f3d2:	6a 06                	push   0x6
c000f3d4:	53                   	push   ebx
c000f3d5:	e8 32 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 bc 04 00 c0       	push   0xc00004bc
c000f3e1:	6a 07                	push   0x7
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 23 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	83 c4 20             	add    esp,0x20
c000f3ec:	6a 00                	push   0x0
c000f3ee:	68 c6 04 00 c0       	push   0xc00004c6
c000f3f3:	6a 08                	push   0x8
c000f3f5:	53                   	push   ebx
c000f3f6:	e8 11 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f3fb:	6a 00                	push   0x0
c000f3fd:	68 ce 04 00 c0       	push   0xc00004ce
c000f402:	6a 09                	push   0x9
c000f404:	53                   	push   ebx
c000f405:	e8 02 ff ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f40a:	83 c4 20             	add    esp,0x20
c000f40d:	6a 00                	push   0x0
c000f40f:	68 d8 04 00 c0       	push   0xc00004d8
c000f414:	6a 0a                	push   0xa
c000f416:	53                   	push   ebx
c000f417:	e8 f0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f41c:	6a 00                	push   0x0
c000f41e:	68 e0 04 00 c0       	push   0xc00004e0
c000f423:	6a 0b                	push   0xb
c000f425:	53                   	push   ebx
c000f426:	e8 e1 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f42b:	83 c4 20             	add    esp,0x20
c000f42e:	6a 00                	push   0x0
c000f430:	68 e8 04 00 c0       	push   0xc00004e8
c000f435:	6a 0c                	push   0xc
c000f437:	53                   	push   ebx
c000f438:	e8 cf fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f43d:	6a 00                	push   0x0
c000f43f:	68 f0 04 00 c0       	push   0xc00004f0
c000f444:	6a 0d                	push   0xd
c000f446:	53                   	push   ebx
c000f447:	e8 c0 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f44c:	83 c4 20             	add    esp,0x20
c000f44f:	6a 00                	push   0x0
c000f451:	68 f8 04 00 c0       	push   0xc00004f8
c000f456:	6a 0e                	push   0xe
c000f458:	53                   	push   ebx
c000f459:	e8 ae fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f45e:	6a 00                	push   0x0
c000f460:	68 00 05 00 c0       	push   0xc0000500
c000f465:	6a 0f                	push   0xf
c000f467:	53                   	push   ebx
c000f468:	e8 9f fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f46d:	83 c4 20             	add    esp,0x20
c000f470:	6a 00                	push   0x0
c000f472:	68 0a 05 00 c0       	push   0xc000050a
c000f477:	6a 10                	push   0x10
c000f479:	53                   	push   ebx
c000f47a:	e8 8d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f47f:	6a 00                	push   0x0
c000f481:	68 14 05 00 c0       	push   0xc0000514
c000f486:	6a 11                	push   0x11
c000f488:	53                   	push   ebx
c000f489:	e8 7e fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f48e:	83 c4 20             	add    esp,0x20
c000f491:	6a 00                	push   0x0
c000f493:	68 1e 05 00 c0       	push   0xc000051e
c000f498:	6a 12                	push   0x12
c000f49a:	53                   	push   ebx
c000f49b:	e8 6c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4a0:	6a 01                	push   0x1
c000f4a2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4a7:	6a 60                	push   0x60
c000f4a9:	53                   	push   ebx
c000f4aa:	e8 5d fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4af:	83 c4 20             	add    esp,0x20
c000f4b2:	6a 00                	push   0x0
c000f4b4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4b9:	6a 20                	push   0x20
c000f4bb:	53                   	push   ebx
c000f4bc:	e8 4b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4c1:	6a 00                	push   0x0
c000f4c3:	68 aa 05 00 c0       	push   0xc00005aa
c000f4c8:	6a 21                	push   0x21
c000f4ca:	53                   	push   ebx
c000f4cb:	e8 3c fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4d0:	83 c4 20             	add    esp,0x20
c000f4d3:	6a 00                	push   0x0
c000f4d5:	68 b1 05 00 c0       	push   0xc00005b1
c000f4da:	6a 22                	push   0x22
c000f4dc:	53                   	push   ebx
c000f4dd:	e8 2a fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 28 05 00 c0       	push   0xc0000528
c000f4e9:	6a 23                	push   0x23
c000f4eb:	53                   	push   ebx
c000f4ec:	e8 1b fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f4f1:	83 c4 20             	add    esp,0x20
c000f4f4:	6a 00                	push   0x0
c000f4f6:	68 32 05 00 c0       	push   0xc0000532
c000f4fb:	6a 24                	push   0x24
c000f4fd:	53                   	push   ebx
c000f4fe:	e8 09 fe ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f503:	6a 00                	push   0x0
c000f505:	68 3c 05 00 c0       	push   0xc000053c
c000f50a:	6a 25                	push   0x25
c000f50c:	53                   	push   ebx
c000f50d:	e8 fa fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f512:	83 c4 20             	add    esp,0x20
c000f515:	6a 00                	push   0x0
c000f517:	68 46 05 00 c0       	push   0xc0000546
c000f51c:	6a 26                	push   0x26
c000f51e:	53                   	push   ebx
c000f51f:	e8 e8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f524:	6a 00                	push   0x0
c000f526:	68 50 05 00 c0       	push   0xc0000550
c000f52b:	6a 27                	push   0x27
c000f52d:	53                   	push   ebx
c000f52e:	e8 d9 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f533:	83 c4 20             	add    esp,0x20
c000f536:	6a 00                	push   0x0
c000f538:	68 5a 05 00 c0       	push   0xc000055a
c000f53d:	6a 28                	push   0x28
c000f53f:	53                   	push   ebx
c000f540:	e8 c7 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f545:	6a 00                	push   0x0
c000f547:	68 64 05 00 c0       	push   0xc0000564
c000f54c:	6a 29                	push   0x29
c000f54e:	53                   	push   ebx
c000f54f:	e8 b8 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f554:	83 c4 20             	add    esp,0x20
c000f557:	6a 00                	push   0x0
c000f559:	68 6e 05 00 c0       	push   0xc000056e
c000f55e:	6a 2a                	push   0x2a
c000f560:	53                   	push   ebx
c000f561:	e8 a6 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f566:	6a 00                	push   0x0
c000f568:	68 78 05 00 c0       	push   0xc0000578
c000f56d:	6a 2b                	push   0x2b
c000f56f:	53                   	push   ebx
c000f570:	e8 97 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f575:	83 c4 20             	add    esp,0x20
c000f578:	6a 00                	push   0x0
c000f57a:	68 82 05 00 c0       	push   0xc0000582
c000f57f:	6a 2c                	push   0x2c
c000f581:	53                   	push   ebx
c000f582:	e8 85 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f587:	6a 00                	push   0x0
c000f589:	68 8c 05 00 c0       	push   0xc000058c
c000f58e:	6a 2d                	push   0x2d
c000f590:	53                   	push   ebx
c000f591:	e8 76 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f596:	83 c4 20             	add    esp,0x20
c000f599:	6a 00                	push   0x0
c000f59b:	68 96 05 00 c0       	push   0xc0000596
c000f5a0:	6a 2e                	push   0x2e
c000f5a2:	53                   	push   ebx
c000f5a3:	e8 64 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5a8:	6a 00                	push   0x0
c000f5aa:	68 a0 05 00 c0       	push   0xc00005a0
c000f5af:	6a 2f                	push   0x2f
c000f5b1:	53                   	push   ebx
c000f5b2:	e8 55 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5b7:	83 c4 20             	add    esp,0x20
c000f5ba:	6a 00                	push   0x0
c000f5bc:	68 f6 05 00 c0       	push   0xc00005f6
c000f5c1:	6a 30                	push   0x30
c000f5c3:	53                   	push   ebx
c000f5c4:	e8 43 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5c9:	6a 00                	push   0x0
c000f5cb:	68 00 06 00 c0       	push   0xc0000600
c000f5d0:	6a 31                	push   0x31
c000f5d2:	53                   	push   ebx
c000f5d3:	e8 34 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	6a 00                	push   0x0
c000f5dd:	68 0a 06 00 c0       	push   0xc000060a
c000f5e2:	6a 32                	push   0x32
c000f5e4:	53                   	push   ebx
c000f5e5:	e8 22 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5ea:	6a 00                	push   0x0
c000f5ec:	68 14 06 00 c0       	push   0xc0000614
c000f5f1:	6a 33                	push   0x33
c000f5f3:	53                   	push   ebx
c000f5f4:	e8 13 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f5f9:	83 c4 20             	add    esp,0x20
c000f5fc:	6a 00                	push   0x0
c000f5fe:	68 1e 06 00 c0       	push   0xc000061e
c000f603:	6a 34                	push   0x34
c000f605:	53                   	push   ebx
c000f606:	e8 01 fd ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f60b:	6a 00                	push   0x0
c000f60d:	68 28 06 00 c0       	push   0xc0000628
c000f612:	6a 35                	push   0x35
c000f614:	53                   	push   ebx
c000f615:	e8 f2 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f61a:	83 c4 20             	add    esp,0x20
c000f61d:	6a 00                	push   0x0
c000f61f:	68 32 06 00 c0       	push   0xc0000632
c000f624:	6a 36                	push   0x36
c000f626:	53                   	push   ebx
c000f627:	e8 e0 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f62c:	6a 00                	push   0x0
c000f62e:	68 3c 06 00 c0       	push   0xc000063c
c000f633:	6a 37                	push   0x37
c000f635:	53                   	push   ebx
c000f636:	e8 d1 fc ff ff       	call   c000f30c <IDT::addEntry(int, void (*)(), bool)>
c000f63b:	83 c4 1c             	add    esp,0x1c
c000f63e:	6a 03                	push   0x3
c000f640:	6a 02                	push   0x2
c000f642:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f648:	e8 95 27 00 00       	call   c0011de2 <VAS::allocatePages(int, int)>
c000f64d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f654:	89 c6                	mov    esi,eax
c000f656:	e8 58 03 00 00       	call   c000f9b3 <malloc>
c000f65b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f661:	89 04 24             	mov    DWORD PTR [esp],eax
c000f664:	89 c7                	mov    edi,eax
c000f666:	e8 15 19 00 00       	call   c0010f80 <TSS::TSS()>
c000f66b:	83 c4 0c             	add    esp,0xc
c000f66e:	68 c6 04 00 c0       	push   0xc00004c6
c000f673:	56                   	push   esi
c000f674:	57                   	push   edi
c000f675:	e8 46 19 00 00       	call   c0010fc0 <TSS::setup(unsigned long, unsigned long)>
c000f67a:	89 c6                	mov    esi,eax
c000f67c:	58                   	pop    eax
c000f67d:	5a                   	pop    edx
c000f67e:	6a 00                	push   0x0
c000f680:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f684:	50                   	push   eax
c000f685:	e8 dc fb ff ff       	call   c000f266 <IDTEntry::IDTEntry(bool)>
c000f68a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f693:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f69a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6a4:	80 ce 05             	or     dh,0x5
c000f6a7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6b8:	e8 87 fc ff ff       	call   c000f344 <IDT::flush()>
c000f6bd:	83 c4 20             	add    esp,0x20
c000f6c0:	5b                   	pop    ebx
c000f6c1:	5e                   	pop    esi
c000f6c2:	5f                   	pop    edi
c000f6c3:	c3                   	ret    

c000f6c4 <sbrk>:
c000f6c4:	55                   	push   ebp
c000f6c5:	57                   	push   edi
c000f6c6:	56                   	push   esi
c000f6c7:	53                   	push   ebx
c000f6c8:	83 ec 24             	sub    esp,0x24
c000f6cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f6cf:	53                   	push   ebx
c000f6d0:	68 50 a7 02 c0       	push   0xc002a750
c000f6d5:	e8 31 33 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	85 db                	test   ebx,ebx
c000f6df:	0f 84 b1 00 00 00    	je     c000f796 <sbrk+0xd2>
c000f6e5:	0f 88 b5 00 00 00    	js     c000f7a0 <sbrk+0xdc>
c000f6eb:	83 ec 0c             	sub    esp,0xc
c000f6ee:	68 6e a7 02 c0       	push   0xc002a76e
c000f6f3:	e8 13 33 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f6f8:	c7 04 24 74 a7 02 c0 	mov    DWORD PTR [esp],0xc002a774
c000f6ff:	e8 07 33 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f704:	83 c4 08             	add    esp,0x8
c000f707:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f70c:	ff b0 60 01 00 00    	push   DWORD PTR [eax+0x160]
c000f712:	68 7b a7 02 c0       	push   0xc002a77b
c000f717:	e8 ef 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f71c:	83 c4 08             	add    esp,0x8
c000f71f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f724:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f72a:	ff b0 90 11 00 00    	push   DWORD PTR [eax+0x1190]
c000f730:	68 90 a7 02 c0       	push   0xc002a790
c000f735:	e8 d1 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f73a:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f73f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f745:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000f74b:	83 e0 01             	and    eax,0x1
c000f74e:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000f752:	c7 04 24 a5 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7a5
c000f759:	e8 ad 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f75e:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c000f763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f767:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000f76d:	89 d8                	mov    eax,ebx
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	85 db                	test   ebx,ebx
c000f774:	78 45                	js     c000f7bb <sbrk+0xf7>
c000f776:	c1 f8 0c             	sar    eax,0xc
c000f779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f77d:	89 c7                	mov    edi,eax
c000f77f:	83 ec 0c             	sub    esp,0xc
c000f782:	68 ab a7 02 c0       	push   0xc002a7ab
c000f787:	e8 7f 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f78c:	83 c4 10             	add    esp,0x10
c000f78f:	be 00 00 00 00       	mov    esi,0x0
c000f794:	eb 65                	jmp    c000f7fb <sbrk+0x137>
c000f796:	a1 28 d4 02 c0       	mov    eax,ds:0xc002d428
c000f79b:	e9 ec 00 00 00       	jmp    c000f88c <sbrk+0x1c8>
c000f7a0:	83 ec 08             	sub    esp,0x8
c000f7a3:	53                   	push   ebx
c000f7a4:	68 08 a8 02 c0       	push   0xc002a808
c000f7a9:	e8 5d 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7b6:	e9 d1 00 00 00       	jmp    c000f88c <sbrk+0x1c8>
c000f7bb:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f7c1:	eb b3                	jmp    c000f776 <sbrk+0xb2>
c000f7c3:	83 ec 0c             	sub    esp,0xc
c000f7c6:	68 bd a7 02 c0       	push   0xc002a7bd
c000f7cb:	e8 3b 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f7d0:	8b 1d 28 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d428
c000f7d6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7d9:	83 c4 10             	add    esp,0x10
c000f7dc:	83 ec 0c             	sub    esp,0xc
c000f7df:	68 c3 a7 02 c0       	push   0xc002a7c3
c000f7e4:	e8 22 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f7e9:	81 05 28 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d428,0x1000
c000f7f3:	46                   	inc    esi
c000f7f4:	83 c4 10             	add    esp,0x10
c000f7f7:	39 f7                	cmp    edi,esi
c000f7f9:	74 44                	je     c000f83f <sbrk+0x17b>
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	68 b1 a7 02 c0       	push   0xc002a7b1
c000f803:	e8 03 32 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f808:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c000f80e:	8b 2d 28 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d428
c000f814:	e8 96 05 00 00       	call   c000fdaf <Phys::allocatePage()>
c000f819:	68 01 04 00 00       	push   0x401
c000f81e:	55                   	push   ebp
c000f81f:	50                   	push   eax
c000f820:	53                   	push   ebx
c000f821:	e8 ba 24 00 00       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f826:	83 c4 14             	add    esp,0x14
c000f829:	68 b7 a7 02 c0       	push   0xc002a7b7
c000f82e:	e8 d8 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f83b:	74 9f                	je     c000f7dc <sbrk+0x118>
c000f83d:	eb 84                	jmp    c000f7c3 <sbrk+0xff>
c000f83f:	83 ec 0c             	sub    esp,0xc
c000f842:	68 c9 a7 02 c0       	push   0xc002a7c9
c000f847:	e8 bf 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f84c:	83 c4 10             	add    esp,0x10
c000f84f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f854:	75 3e                	jne    c000f894 <sbrk+0x1d0>
c000f856:	83 ec 0c             	sub    esp,0xc
c000f859:	68 54 bd 02 c0       	push   0xc002bd54
c000f85e:	e8 a8 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f863:	0f 20 d8             	mov    eax,cr3
c000f866:	0f 22 d8             	mov    cr3,eax
c000f869:	c7 04 24 cf a7 02 c0 	mov    DWORD PTR [esp],0xc002a7cf
c000f870:	e8 96 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	83 ec 0c             	sub    esp,0xc
c000f87b:	68 f3 a7 02 c0       	push   0xc002a7f3
c000f880:	e8 86 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 c4 1c             	add    esp,0x1c
c000f88f:	5b                   	pop    ebx
c000f890:	5e                   	pop    esi
c000f891:	5f                   	pop    edi
c000f892:	5d                   	pop    ebp
c000f893:	c3                   	ret    
c000f894:	83 ec 0c             	sub    esp,0xc
c000f897:	68 d5 a7 02 c0       	push   0xc002a7d5
c000f89c:	e8 6a 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f8a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8a5:	89 c3                	mov    ebx,eax
c000f8a7:	c1 eb 0a             	shr    ebx,0xa
c000f8aa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f8b0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f8b6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f8ba:	c1 e6 0c             	shl    esi,0xc
c000f8bd:	01 c6                	add    esi,eax
c000f8bf:	c1 ee 0a             	shr    esi,0xa
c000f8c2:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000f8c8:	81 ee 00 00 40 00    	sub    esi,0x400000
c000f8ce:	c7 04 24 db a7 02 c0 	mov    DWORD PTR [esp],0xc002a7db
c000f8d5:	e8 31 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f8da:	83 c4 10             	add    esp,0x10
c000f8dd:	39 f3                	cmp    ebx,esi
c000f8df:	77 29                	ja     c000f90a <sbrk+0x246>
c000f8e1:	83 ec 0c             	sub    esp,0xc
c000f8e4:	68 e1 a7 02 c0       	push   0xc002a7e1
c000f8e9:	e8 1d 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f8ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f8f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f8f7:	c7 04 24 e7 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7e7
c000f8fe:	e8 08 31 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f903:	83 c4 10             	add    esp,0x10
c000f906:	39 de                	cmp    esi,ebx
c000f908:	73 d7                	jae    c000f8e1 <sbrk+0x21d>
c000f90a:	83 ec 0c             	sub    esp,0xc
c000f90d:	68 ed a7 02 c0       	push   0xc002a7ed
c000f912:	e8 f4 30 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	e9 59 ff ff ff       	jmp    c000f878 <sbrk+0x1b4>

c000f91f <mmap>:
c000f91f:	83 ec 18             	sub    esp,0x18
c000f922:	68 f9 a7 02 c0       	push   0xc002a7f9
c000f927:	e8 7d aa 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000f92c:	b8 00 00 00 00       	mov    eax,0x0
c000f931:	83 c4 1c             	add    esp,0x1c
c000f934:	c3                   	ret    

c000f935 <munmap>:
c000f935:	83 ec 18             	sub    esp,0x18
c000f938:	68 fe a7 02 c0       	push   0xc002a7fe
c000f93d:	e8 67 aa 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000f942:	b8 00 00 00 00       	mov    eax,0x0
c000f947:	83 c4 1c             	add    esp,0x1c
c000f94a:	c3                   	ret    

c000f94b <liballoc_lock()>:
c000f94b:	fa                   	cli    
c000f94c:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000f952:	b8 00 00 00 00       	mov    eax,0x0
c000f957:	c3                   	ret    

c000f958 <liballoc_unlock()>:
c000f958:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000f95d:	48                   	dec    eax
c000f95e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000f963:	75 01                	jne    c000f966 <liballoc_unlock()+0xe>
c000f965:	fb                   	sti    
c000f966:	b8 00 00 00 00       	mov    eax,0x0
c000f96b:	c3                   	ret    

c000f96c <liballoc_alloc(int)>:
c000f96c:	83 ec 10             	sub    esp,0x10
c000f96f:	6a 01                	push   0x1
c000f971:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f975:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f97b:	e8 62 24 00 00       	call   c0011de2 <VAS::allocatePages(int, int)>
c000f980:	83 c4 1c             	add    esp,0x1c
c000f983:	c3                   	ret    

c000f984 <liballoc_free(void*, int)>:
c000f984:	83 ec 14             	sub    esp,0x14
c000f987:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f98b:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c000f991:	e8 f6 20 00 00       	call   c0011a8c <VAS::freeAllocatedPages(unsigned long)>
c000f996:	b8 00 00 00 00       	mov    eax,0x0
c000f99b:	83 c4 1c             	add    esp,0x1c
c000f99e:	c3                   	ret    

c000f99f <realloc>:
c000f99f:	83 ec 14             	sub    esp,0x14
c000f9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9aa:	e8 7d 1c ff ff       	call   c000162c <dlrealloc>
c000f9af:	83 c4 1c             	add    esp,0x1c
c000f9b2:	c3                   	ret    

c000f9b3 <malloc>:
c000f9b3:	83 ec 18             	sub    esp,0x18
c000f9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9ba:	e8 30 17 ff ff       	call   c00010ef <dlmalloc>
c000f9bf:	83 c4 1c             	add    esp,0x1c
c000f9c2:	c3                   	ret    

c000f9c3 <free>:
c000f9c3:	83 ec 18             	sub    esp,0x18
c000f9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9ca:	e8 c5 13 ff ff       	call   c0000d94 <dlfree>
c000f9cf:	83 c4 1c             	add    esp,0x1c
c000f9d2:	c3                   	ret    

c000f9d3 <rfree>:
c000f9d3:	83 ec 18             	sub    esp,0x18
c000f9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9da:	e8 b5 13 ff ff       	call   c0000d94 <dlfree>
c000f9df:	83 c4 1c             	add    esp,0x1c
c000f9e2:	c3                   	ret    

c000f9e3 <calloc>:
c000f9e3:	56                   	push   esi
c000f9e4:	53                   	push   ebx
c000f9e5:	83 ec 10             	sub    esp,0x10
c000f9e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f9ec:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f9f1:	53                   	push   ebx
c000f9f2:	e8 bc ff ff ff       	call   c000f9b3 <malloc>
c000f9f7:	89 c6                	mov    esi,eax
c000f9f9:	83 c4 0c             	add    esp,0xc
c000f9fc:	53                   	push   ebx
c000f9fd:	6a 00                	push   0x0
c000f9ff:	50                   	push   eax
c000fa00:	e8 4b 0d ff ff       	call   c0000750 <memset>
c000fa05:	89 f0                	mov    eax,esi
c000fa07:	83 c4 14             	add    esp,0x14
c000fa0a:	5b                   	pop    ebx
c000fa0b:	5e                   	pop    esi
c000fa0c:	c3                   	ret    

c000fa0d <Krnl::setBootMessage(char const*)>:
c000fa0d:	57                   	push   edi
c000fa0e:	56                   	push   esi
c000fa0f:	53                   	push   ebx
c000fa10:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa16:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa1d:	68 9e 00 00 00       	push   0x9e
c000fa22:	6a 00                	push   0x0
c000fa24:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fa28:	56                   	push   esi
c000fa29:	e8 22 0d ff ff       	call   c0000750 <memset>
c000fa2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa31:	e8 36 0d ff ff       	call   c000076c <strlen>
c000fa36:	ba 50 00 00 00       	mov    edx,0x50
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	29 c2                	sub    edx,eax
c000fa40:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000fa44:	d1 ea                	shr    edx,1
c000fa46:	84 c0                	test   al,al
c000fa48:	74 19                	je     c000fa63 <Krnl::setBootMessage(char const*)+0x56>
c000fa4a:	01 d2                	add    edx,edx
c000fa4c:	43                   	inc    ebx
c000fa4d:	01 f2                	add    edx,esi
c000fa4f:	80 cc 0f             	or     ah,0xf
c000fa52:	83 c2 02             	add    edx,0x2
c000fa55:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000fa59:	43                   	inc    ebx
c000fa5a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000fa5f:	84 c0                	test   al,al
c000fa61:	75 ec                	jne    c000fa4f <Krnl::setBootMessage(char const*)+0x42>
c000fa63:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa68:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa6f:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fa75:	5b                   	pop    ebx
c000fa76:	5e                   	pop    esi
c000fa77:	5f                   	pop    edi
c000fa78:	c3                   	ret    

c000fa79 <kernel_main>:
c000fa79:	57                   	push   edi
c000fa7a:	bf f9 03 00 00       	mov    edi,0x3f9
c000fa7f:	56                   	push   esi
c000fa80:	89 fa                	mov    edx,edi
c000fa82:	53                   	push   ebx
c000fa83:	31 f6                	xor    esi,esi
c000fa85:	83 ec 2c             	sub    esp,0x2c
c000fa88:	89 f0                	mov    eax,esi
c000fa8a:	ee                   	out    dx,al
c000fa8b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa90:	b0 80                	mov    al,0x80
c000fa92:	89 da                	mov    edx,ebx
c000fa94:	ee                   	out    dx,al
c000fa95:	b1 03                	mov    cl,0x3
c000fa97:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa9c:	88 c8                	mov    al,cl
c000fa9e:	ee                   	out    dx,al
c000fa9f:	89 f0                	mov    eax,esi
c000faa1:	89 fa                	mov    edx,edi
c000faa3:	ee                   	out    dx,al
c000faa4:	88 c8                	mov    al,cl
c000faa6:	89 da                	mov    edx,ebx
c000faa8:	ee                   	out    dx,al
c000faa9:	b0 c7                	mov    al,0xc7
c000faab:	ba fa 03 00 00       	mov    edx,0x3fa
c000fab0:	ee                   	out    dx,al
c000fab1:	b0 0b                	mov    al,0xb
c000fab3:	ba fc 03 00 00       	mov    edx,0x3fc
c000fab8:	ee                   	out    dx,al
c000fab9:	68 38 a8 02 c0       	push   0xc002a838
c000fabe:	e8 48 2f 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fac3:	e8 b8 09 00 00       	call   c0010480 <installVgaTextImplementation()>
c000fac8:	0f b6 05 40 d4 02 c0 	movzx  eax,BYTE PTR ds:0xc002d440
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	84 c0                	test   al,al
c000fad4:	74 6c                	je     c000fb42 <kernel_main+0xc9>
c000fad6:	31 db                	xor    ebx,ebx
c000fad8:	bf 0a 00 00 00       	mov    edi,0xa
c000fadd:	be 05 00 00 00       	mov    esi,0x5
c000fae2:	31 c9                	xor    ecx,ecx
c000fae4:	eb 2a                	jmp    c000fb10 <kernel_main+0x97>
c000fae6:	3c 0d                	cmp    al,0xd
c000fae8:	74 1a                	je     c000fb04 <kernel_main+0x8b>
c000faea:	3c 0a                	cmp    al,0xa
c000faec:	74 40                	je     c000fb2e <kernel_main+0xb5>
c000faee:	8d 14 b6             	lea    edx,[esi+esi*4]
c000faf1:	80 cc 0e             	or     ah,0xe
c000faf4:	c1 e2 04             	shl    edx,0x4
c000faf7:	01 ca                	add    edx,ecx
c000faf9:	41                   	inc    ecx
c000fafa:	01 fa                	add    edx,edi
c000fafc:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000fb04:	43                   	inc    ebx
c000fb05:	0f b6 83 40 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2bc0]
c000fb0c:	84 c0                	test   al,al
c000fb0e:	74 32                	je     c000fb42 <kernel_main+0xc9>
c000fb10:	80 b9 76 d4 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2b8a],0xdb
c000fb17:	75 cd                	jne    c000fae6 <kernel_main+0x6d>
c000fb19:	0f b6 91 75 d4 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2b8b]
c000fb20:	83 e2 fe             	and    edx,0xfffffffe
c000fb23:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb29:	75 bb                	jne    c000fae6 <kernel_main+0x6d>
c000fb2b:	47                   	inc    edi
c000fb2c:	eb b8                	jmp    c000fae6 <kernel_main+0x6d>
c000fb2e:	43                   	inc    ebx
c000fb2f:	46                   	inc    esi
c000fb30:	31 c9                	xor    ecx,ecx
c000fb32:	0f b6 83 40 d4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2bc0]
c000fb39:	bf 0a 00 00 00       	mov    edi,0xa
c000fb3e:	84 c0                	test   al,al
c000fb40:	75 ce                	jne    c000fb10 <kernel_main+0x97>
c000fb42:	83 ec 0c             	sub    esp,0xc
c000fb45:	68 50 a8 02 c0       	push   0xc002a850
c000fb4a:	e8 be fe ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c000fb4f:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fb54:	a3 80 e6 02 c0       	mov    ds:0xc002e680,eax
c000fb59:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fb5e:	05 ff 0f 00 00       	add    eax,0xfff
c000fb63:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb68:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb6b:	e8 cb 03 00 00       	call   c000ff3b <Phys::physicalMemorySetup(unsigned int)>
c000fb70:	e8 83 1c 00 00       	call   c00117f8 <Virt::virtualMemorySetup()>
c000fb75:	58                   	pop    eax
c000fb76:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fb7a:	53                   	push   ebx
c000fb7b:	e8 34 1d 00 00       	call   c00118b4 <VAS::VAS()>
c000fb80:	89 1d d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,ebx
c000fb86:	e8 95 04 ff ff       	call   c0000020 <callGlobalConstructors>
c000fb8b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fb92:	e8 1c fe ff ff       	call   c000f9b3 <malloc>
c000fb97:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9a:	89 c6                	mov    esi,eax
c000fb9c:	e8 77 ee ff ff       	call   c000ea18 <Computer::Computer()>
c000fba1:	6a 00                	push   0x0
c000fba3:	89 35 68 e6 02 c0    	mov    DWORD PTR ds:0xc002e668,esi
c000fba9:	6a 00                	push   0x0
c000fbab:	6a 00                	push   0x0
c000fbad:	56                   	push   esi
c000fbae:	e8 71 f2 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fbb3:	83 c4 14             	add    esp,0x14
c000fbb6:	53                   	push   ebx
c000fbb7:	e8 a8 1f 00 00       	call   c0011b64 <VAS::~VAS()>
c000fbbc:	83 c4 30             	add    esp,0x30
c000fbbf:	5b                   	pop    ebx
c000fbc0:	5e                   	pop    esi
c000fbc1:	5f                   	pop    edi
c000fbc2:	c3                   	ret    

c000fbc3 <Phys::allocateDMA(unsigned long)>:
c000fbc3:	55                   	push   ebp
c000fbc4:	31 ed                	xor    ebp,ebp
c000fbc6:	57                   	push   edi
c000fbc7:	56                   	push   esi
c000fbc8:	53                   	push   ebx
c000fbc9:	31 db                	xor    ebx,ebx
c000fbcb:	83 ec 18             	sub    esp,0x18
c000fbce:	68 6f a8 02 c0       	push   0xc002a86f
c000fbd3:	e8 33 2e 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fbd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbdc:	31 d2                	xor    edx,edx
c000fbde:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	c1 ee 0c             	shr    esi,0xc
c000fbea:	31 c9                	xor    ecx,ecx
c000fbec:	eb 17                	jmp    c000fc05 <Phys::allocateDMA(unsigned long)+0x42>
c000fbee:	85 c9                	test   ecx,ecx
c000fbf0:	75 04                	jne    c000fbf6 <Phys::allocateDMA(unsigned long)+0x33>
c000fbf2:	89 d5                	mov    ebp,edx
c000fbf4:	89 d3                	mov    ebx,edx
c000fbf6:	8d 41 01             	lea    eax,[ecx+0x1]
c000fbf9:	39 c6                	cmp    esi,eax
c000fbfb:	74 23                	je     c000fc20 <Phys::allocateDMA(unsigned long)+0x5d>
c000fbfd:	42                   	inc    edx
c000fbfe:	89 c1                	mov    ecx,eax
c000fc00:	83 fa 2f             	cmp    edx,0x2f
c000fc03:	7f 11                	jg     c000fc16 <Phys::allocateDMA(unsigned long)+0x53>
c000fc05:	80 ba c0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1940],0x0
c000fc0c:	74 e0                	je     c000fbee <Phys::allocateDMA(unsigned long)+0x2b>
c000fc0e:	31 c9                	xor    ecx,ecx
c000fc10:	42                   	inc    edx
c000fc11:	83 fa 2f             	cmp    edx,0x2f
c000fc14:	7e ef                	jle    c000fc05 <Phys::allocateDMA(unsigned long)+0x42>
c000fc16:	83 c4 0c             	add    esp,0xc
c000fc19:	31 c0                	xor    eax,eax
c000fc1b:	5b                   	pop    ebx
c000fc1c:	5e                   	pop    esi
c000fc1d:	5f                   	pop    edi
c000fc1e:	5d                   	pop    ebp
c000fc1f:	c3                   	ret    
c000fc20:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc23:	89 d7                	mov    edi,edx
c000fc25:	4f                   	dec    edi
c000fc26:	79 03                	jns    c000fc2b <Phys::allocateDMA(unsigned long)+0x68>
c000fc28:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fc2b:	c1 ff 04             	sar    edi,0x4
c000fc2e:	89 da                	mov    edx,ebx
c000fc30:	c1 fa 04             	sar    edx,0x4
c000fc33:	39 fa                	cmp    edx,edi
c000fc35:	75 43                	jne    c000fc7a <Phys::allocateDMA(unsigned long)+0xb7>
c000fc37:	85 c0                	test   eax,eax
c000fc39:	74 1a                	je     c000fc55 <Phys::allocateDMA(unsigned long)+0x92>
c000fc3b:	be c0 e6 02 c0       	mov    esi,0xc002e6c0
c000fc40:	8d 93 c0 e6 02 c0    	lea    edx,[ebx-0x3ffd1940]
c000fc46:	f7 d6                	not    esi
c000fc48:	29 de                	sub    esi,ebx
c000fc4a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fc4d:	42                   	inc    edx
c000fc4e:	8d 04 16             	lea    eax,[esi+edx*1]
c000fc51:	39 c1                	cmp    ecx,eax
c000fc53:	7f f5                	jg     c000fc4a <Phys::allocateDMA(unsigned long)+0x87>
c000fc55:	83 ec 0c             	sub    esp,0xc
c000fc58:	68 88 a8 02 c0       	push   0xc002a888
c000fc5d:	e8 a9 2d 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fc62:	83 c4 10             	add    esp,0x10
c000fc65:	85 ff                	test   edi,edi
c000fc67:	74 17                	je     c000fc80 <Phys::allocateDMA(unsigned long)+0xbd>
c000fc69:	83 c4 0c             	add    esp,0xc
c000fc6c:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fc72:	5b                   	pop    ebx
c000fc73:	c1 e0 0c             	shl    eax,0xc
c000fc76:	5e                   	pop    esi
c000fc77:	5f                   	pop    edi
c000fc78:	5d                   	pop    ebp
c000fc79:	c3                   	ret    
c000fc7a:	89 ea                	mov    edx,ebp
c000fc7c:	31 c9                	xor    ecx,ecx
c000fc7e:	eb 90                	jmp    c000fc10 <Phys::allocateDMA(unsigned long)+0x4d>
c000fc80:	83 c4 0c             	add    esp,0xc
c000fc83:	c1 e3 0c             	shl    ebx,0xc
c000fc86:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fc8c:	5b                   	pop    ebx
c000fc8d:	5e                   	pop    esi
c000fc8e:	5f                   	pop    edi
c000fc8f:	5d                   	pop    ebp
c000fc90:	c3                   	ret    

c000fc91 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fc91:	83 ec 18             	sub    esp,0x18
c000fc94:	68 9f a8 02 c0       	push   0xc002a89f
c000fc99:	e8 6d 2d 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fc9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcaf:	c1 e9 0c             	shr    ecx,0xc
c000fcb2:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fcba:	76 29                	jbe    c000fce5 <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fcbc:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fcc2:	c1 ea 0c             	shr    edx,0xc
c000fcc5:	83 c2 10             	add    edx,0x10
c000fcc8:	85 c9                	test   ecx,ecx
c000fcca:	74 15                	je     c000fce1 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fccc:	8d 82 c0 e6 02 c0    	lea    eax,[edx-0x3ffd1940]
c000fcd2:	8d 94 11 c0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1940]
c000fcd9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fcdc:	40                   	inc    eax
c000fcdd:	39 d0                	cmp    eax,edx
c000fcdf:	75 f8                	jne    c000fcd9 <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fce1:	83 c4 0c             	add    esp,0xc
c000fce4:	c3                   	ret    
c000fce5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fceb:	c1 ea 0c             	shr    edx,0xc
c000fcee:	eb d8                	jmp    c000fcc8 <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fcf0 <Phys::setPageState(unsigned long, bool)>:
c000fcf0:	56                   	push   esi
c000fcf1:	ba 01 00 00 00       	mov    edx,0x1
c000fcf6:	53                   	push   ebx
c000fcf7:	8b 35 84 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d584
c000fcfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd05:	89 c8                	mov    eax,ecx
c000fd07:	83 e1 07             	and    ecx,0x7
c000fd0a:	c1 e8 03             	shr    eax,0x3
c000fd0d:	d3 e3                	shl    ebx,cl
c000fd0f:	01 c6                	add    esi,eax
c000fd11:	d3 e2                	shl    edx,cl
c000fd13:	f7 d2                	not    edx
c000fd15:	20 16                	and    BYTE PTR [esi],dl
c000fd17:	03 05 84 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d584
c000fd1d:	08 18                	or     BYTE PTR [eax],bl
c000fd1f:	5b                   	pop    ebx
c000fd20:	5e                   	pop    esi
c000fd21:	c3                   	ret    

c000fd22 <Phys::getPageState(unsigned long)>:
c000fd22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fd26:	8b 15 84 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d584
c000fd2c:	89 c8                	mov    eax,ecx
c000fd2e:	83 e1 07             	and    ecx,0x7
c000fd31:	c1 e8 03             	shr    eax,0x3
c000fd34:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fd38:	d3 f8                	sar    eax,cl
c000fd3a:	83 e0 01             	and    eax,0x1
c000fd3d:	c3                   	ret    

c000fd3e <Phys::freePage(unsigned long)>:
c000fd3e:	53                   	push   ebx
c000fd3f:	83 ec 10             	sub    esp,0x10
c000fd42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fd46:	53                   	push   ebx
c000fd47:	68 b5 a8 02 c0       	push   0xc002a8b5
c000fd4c:	e8 ba 2c 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fd5a:	76 3d                	jbe    c000fd99 <Phys::freePage(unsigned long)+0x5b>
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	c1 eb 0c             	shr    ebx,0xc
c000fd62:	53                   	push   ebx
c000fd63:	e8 ba ff ff ff       	call   c000fd22 <Phys::getPageState(unsigned long)>
c000fd68:	83 c4 10             	add    esp,0x10
c000fd6b:	84 c0                	test   al,al
c000fd6d:	74 19                	je     c000fd88 <Phys::freePage(unsigned long)+0x4a>
c000fd6f:	83 ec 08             	sub    esp,0x8
c000fd72:	ff 0d b0 e6 02 c0    	dec    DWORD PTR ds:0xc002e6b0
c000fd78:	6a 00                	push   0x0
c000fd7a:	53                   	push   ebx
c000fd7b:	e8 70 ff ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c000fd80:	83 c4 10             	add    esp,0x10
c000fd83:	83 c4 08             	add    esp,0x8
c000fd86:	5b                   	pop    ebx
c000fd87:	c3                   	ret    
c000fd88:	c7 44 24 10 c8 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a8c8
c000fd90:	83 c4 08             	add    esp,0x8
c000fd93:	5b                   	pop    ebx
c000fd94:	e9 10 a6 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c000fd99:	83 ec 08             	sub    esp,0x8
c000fd9c:	68 00 10 00 00       	push   0x1000
c000fda1:	53                   	push   ebx
c000fda2:	e8 ea fe ff ff       	call   c000fc91 <Phys::freeDMA(unsigned long, unsigned long)>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	83 c4 08             	add    esp,0x8
c000fdad:	5b                   	pop    ebx
c000fdae:	c3                   	ret    

c000fdaf <Phys::allocatePage()>:
c000fdaf:	56                   	push   esi
c000fdb0:	53                   	push   ebx
c000fdb1:	83 ec 14             	sub    esp,0x14
c000fdb4:	8b 35 a4 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6a4
c000fdba:	89 f3                	mov    ebx,esi
c000fdbc:	eb 0a                	jmp    c000fdc8 <Phys::allocatePage()+0x19>
c000fdbe:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c000fdc4:	39 de                	cmp    esi,ebx
c000fdc6:	74 24                	je     c000fdec <Phys::allocatePage()+0x3d>
c000fdc8:	53                   	push   ebx
c000fdc9:	e8 54 ff ff ff       	call   c000fd22 <Phys::getPageState(unsigned long)>
c000fdce:	5a                   	pop    edx
c000fdcf:	84 c0                	test   al,al
c000fdd1:	74 76                	je     c000fe49 <Phys::allocatePage()+0x9a>
c000fdd3:	43                   	inc    ebx
c000fdd4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdda:	75 e2                	jne    c000fdbe <Phys::allocatePage()+0xf>
c000fddc:	31 db                	xor    ebx,ebx
c000fdde:	c7 05 a4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a4,0x0
c000fde8:	39 de                	cmp    esi,ebx
c000fdea:	75 dc                	jne    c000fdc8 <Phys::allocatePage()+0x19>
c000fdec:	83 ec 0c             	sub    esp,0xc
c000fdef:	68 fc a8 02 c0       	push   0xc002a8fc
c000fdf4:	e8 12 2c 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fdf9:	58                   	pop    eax
c000fdfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fdff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fe02:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fe08:	e8 8d 28 00 00       	call   c001269a <VAS::scanForEviction()>
c000fe0d:	83 c4 10             	add    esp,0x10
c000fe10:	85 c0                	test   eax,eax
c000fe12:	75 76                	jne    c000fe8a <Phys::allocatePage()+0xdb>
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	68 00 10 00 00       	push   0x1000
c000fe1c:	e8 a2 fd ff ff       	call   c000fbc3 <Phys::allocateDMA(unsigned long)>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	85 c0                	test   eax,eax
c000fe26:	75 5c                	jne    c000fe84 <Phys::allocatePage()+0xd5>
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	68 14 a9 02 c0       	push   0xc002a914
c000fe30:	e8 74 a5 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	8b 1d a4 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a4
c000fe3e:	53                   	push   ebx
c000fe3f:	e8 de fe ff ff       	call   c000fd22 <Phys::getPageState(unsigned long)>
c000fe44:	5a                   	pop    edx
c000fe45:	84 c0                	test   al,al
c000fe47:	75 8a                	jne    c000fdd3 <Phys::allocatePage()+0x24>
c000fe49:	6a 01                	push   0x1
c000fe4b:	53                   	push   ebx
c000fe4c:	e8 9f fe ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c000fe51:	5a                   	pop    edx
c000fe52:	a1 b0 e6 02 c0       	mov    eax,ds:0xc002e6b0
c000fe57:	59                   	pop    ecx
c000fe58:	40                   	inc    eax
c000fe59:	8b 15 a4 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a4
c000fe5f:	a3 b0 e6 02 c0       	mov    ds:0xc002e6b0,eax
c000fe64:	c1 e2 0c             	shl    edx,0xc
c000fe67:	52                   	push   edx
c000fe68:	ff 35 b4 e6 02 c0    	push   DWORD PTR ds:0xc002e6b4
c000fe6e:	50                   	push   eax
c000fe6f:	68 de a8 02 c0       	push   0xc002a8de
c000fe74:	e8 92 2b 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000fe79:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c000fe7e:	83 c4 10             	add    esp,0x10
c000fe81:	c1 e0 0c             	shl    eax,0xc
c000fe84:	83 c4 14             	add    esp,0x14
c000fe87:	5b                   	pop    ebx
c000fe88:	5e                   	pop    esi
c000fe89:	c3                   	ret    
c000fe8a:	83 ec 08             	sub    esp,0x8
c000fe8d:	89 c2                	mov    edx,eax
c000fe8f:	6a 01                	push   0x1
c000fe91:	c1 ea 0c             	shr    edx,0xc
c000fe94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe98:	52                   	push   edx
c000fe99:	e8 52 fe ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fea5:	eb dd                	jmp    c000fe84 <Phys::allocatePage()+0xd5>

c000fea7 <Phys::allocateContiguousPages(int)>:
c000fea7:	57                   	push   edi
c000fea8:	56                   	push   esi
c000fea9:	53                   	push   ebx
c000feaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000feae:	fa                   	cli    
c000feaf:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c000feb5:	31 db                	xor    ebx,ebx
c000feb7:	85 db                	test   ebx,ebx
c000feb9:	75 11                	jne    c000fecc <Phys::allocateContiguousPages(int)+0x25>
c000febb:	e8 ef fe ff ff       	call   c000fdaf <Phys::allocatePage()>
c000fec0:	83 fe 01             	cmp    esi,0x1
c000fec3:	89 c7                	mov    edi,eax
c000fec5:	74 21                	je     c000fee8 <Phys::allocateContiguousPages(int)+0x41>
c000fec7:	bb 01 00 00 00       	mov    ebx,0x1
c000fecc:	e8 de fe ff ff       	call   c000fdaf <Phys::allocatePage()>
c000fed1:	89 da                	mov    edx,ebx
c000fed3:	c1 e2 0c             	shl    edx,0xc
c000fed6:	01 fa                	add    edx,edi
c000fed8:	39 c2                	cmp    edx,eax
c000feda:	74 20                	je     c000fefc <Phys::allocateContiguousPages(int)+0x55>
c000fedc:	bb 01 00 00 00       	mov    ebx,0x1
c000fee1:	89 c7                	mov    edi,eax
c000fee3:	83 fe 01             	cmp    esi,0x1
c000fee6:	75 e4                	jne    c000fecc <Phys::allocateContiguousPages(int)+0x25>
c000fee8:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c000feed:	48                   	dec    eax
c000feee:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c000fef3:	75 01                	jne    c000fef6 <Phys::allocateContiguousPages(int)+0x4f>
c000fef5:	fb                   	sti    
c000fef6:	89 f8                	mov    eax,edi
c000fef8:	5b                   	pop    ebx
c000fef9:	5e                   	pop    esi
c000fefa:	5f                   	pop    edi
c000fefb:	c3                   	ret    
c000fefc:	43                   	inc    ebx
c000fefd:	39 f3                	cmp    ebx,esi
c000feff:	75 b6                	jne    c000feb7 <Phys::allocateContiguousPages(int)+0x10>
c000ff01:	eb e5                	jmp    c000fee8 <Phys::allocateContiguousPages(int)+0x41>

c000ff03 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ff03:	56                   	push   esi
c000ff04:	53                   	push   ebx
c000ff05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff09:	39 1d a8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a8,ebx
c000ff0f:	73 06                	jae    c000ff17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ff11:	89 1d a8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a8,ebx
c000ff17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff1b:	c1 eb 0c             	shr    ebx,0xc
c000ff1e:	c1 e8 0c             	shr    eax,0xc
c000ff21:	39 d8                	cmp    eax,ebx
c000ff23:	73 13                	jae    c000ff38 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ff25:	6a 00                	push   0x0
c000ff27:	8d 70 01             	lea    esi,[eax+0x1]
c000ff2a:	50                   	push   eax
c000ff2b:	e8 c0 fd ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c000ff30:	5a                   	pop    edx
c000ff31:	89 f0                	mov    eax,esi
c000ff33:	59                   	pop    ecx
c000ff34:	39 f3                	cmp    ebx,esi
c000ff36:	75 ed                	jne    c000ff25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ff38:	5b                   	pop    ebx
c000ff39:	5e                   	pop    esi
c000ff3a:	c3                   	ret    

c000ff3b <Phys::physicalMemorySetup(unsigned int)>:
c000ff3b:	55                   	push   ebp
c000ff3c:	57                   	push   edi
c000ff3d:	56                   	push   esi
c000ff3e:	53                   	push   ebx
c000ff3f:	83 ec 40             	sub    esp,0x40
c000ff42:	6a 30                	push   0x30
c000ff44:	6a 00                	push   0x0
c000ff46:	68 c0 e6 02 c0       	push   0xc002e6c0
c000ff4b:	e8 00 08 ff ff       	call   c0000750 <memset>
c000ff50:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ff54:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff59:	05 00 10 00 00       	add    eax,0x1000
c000ff5e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ff62:	5b                   	pop    ebx
c000ff63:	31 db                	xor    ebx,ebx
c000ff65:	5e                   	pop    esi
c000ff66:	50                   	push   eax
c000ff67:	68 22 a9 02 c0       	push   0xc002a922
c000ff6c:	e8 9a 2a 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	83 ec 08             	sub    esp,0x8
c000ff77:	6a 01                	push   0x1
c000ff79:	53                   	push   ebx
c000ff7a:	43                   	inc    ebx
c000ff7b:	e8 70 fd ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff89:	75 e9                	jne    c000ff74 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000ff8b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000ff92:	66 85 c0             	test   ax,ax
c000ff95:	0f 84 8e 01 00 00    	je     c0010129 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000ff9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ff9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ffa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffab:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000ffb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffb4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ffbc:	eb 15                	jmp    c000ffd3 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000ffbe:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000ffc2:	83 c3 18             	add    ebx,0x18
c000ffc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffc9:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ffcd:	0f 84 66 01 00 00    	je     c0010139 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000ffd3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ffd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ffd9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ffdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffe0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffe4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ffe6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ffe9:	01 f0                	add    eax,esi
c000ffeb:	55                   	push   ebp
c000ffec:	11 fa                	adc    edx,edi
c000ffee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fff2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fff6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fffa:	56                   	push   esi
c000fffb:	68 64 a9 02 c0       	push   0xc002a964
c0010000:	e8 06 2a 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0010005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	09 f8                	or     eax,edi
c001000e:	0f 85 25 01 00 00    	jne    c0010139 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0010014:	4d                   	dec    ebp
c0010015:	75 a7                	jne    c000ffbe <Phys::physicalMemorySetup(unsigned int)+0x83>
c0010017:	ba 00 00 08 00       	mov    edx,0x80000
c001001c:	89 c1                	mov    ecx,eax
c001001e:	39 f2                	cmp    edx,esi
c0010020:	19 f9                	sbb    ecx,edi
c0010022:	0f 82 a7 00 00 00    	jb     c00100cf <Phys::physicalMemorySetup(unsigned int)+0x194>
c0010028:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001002c:	89 c1                	mov    ecx,eax
c001002e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010032:	0f 83 97 00 00 00    	jae    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x194>
c0010038:	ba 00 00 0a 00       	mov    edx,0xa0000
c001003d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010041:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010045:	39 fa                	cmp    edx,edi
c0010047:	19 e8                	sbb    eax,ebp
c0010049:	0f 82 14 01 00 00    	jb     c0010163 <Phys::physicalMemorySetup(unsigned int)+0x228>
c001004f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010053:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010057:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001005d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010062:	83 d5 ff             	adc    ebp,0xffffffff
c0010065:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010069:	31 c0                	xor    eax,eax
c001006b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001006f:	39 fa                	cmp    edx,edi
c0010071:	89 c1                	mov    ecx,eax
c0010073:	19 e9                	sbb    ecx,ebp
c0010075:	0f 83 43 ff ff ff    	jae    c000ffbe <Phys::physicalMemorySetup(unsigned int)+0x83>
c001007b:	be 00 00 08 00       	mov    esi,0x80000
c0010080:	50                   	push   eax
c0010081:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010085:	57                   	push   edi
c0010086:	56                   	push   esi
c0010087:	68 88 a9 02 c0       	push   0xc002a988
c001008c:	e8 7a 29 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0010091:	5a                   	pop    edx
c0010092:	59                   	pop    ecx
c0010093:	57                   	push   edi
c0010094:	56                   	push   esi
c0010095:	e8 69 fe ff ff       	call   c000ff03 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001009a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001009e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100a2:	83 c4 0c             	add    esp,0xc
c00100a5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00100a9:	03 05 b4 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6b4
c00100af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00100b6:	a3 b4 e6 02 c0       	mov    ds:0xc002e6b4,eax
c00100bb:	52                   	push   edx
c00100bc:	50                   	push   eax
c00100bd:	68 48 a9 02 c0       	push   0xc002a948
c00100c2:	e8 44 29 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	e9 ef fe ff ff       	jmp    c000ffbe <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100cf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00100d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100db:	39 ea                	cmp    edx,ebp
c00100dd:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00100e1:	0f 82 d7 fe ff ff    	jb     c000ffbe <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100e7:	ba ff 1f 00 00       	mov    edx,0x1fff
c00100ec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00100f0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00100f4:	0f 83 c4 fe ff ff    	jae    c000ffbe <Phys::physicalMemorySetup(unsigned int)+0x83>
c00100fa:	39 ee                	cmp    esi,ebp
c00100fc:	89 f8                	mov    eax,edi
c00100fe:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010102:	0f 83 78 ff ff ff    	jae    c0010080 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0010108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001010c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010110:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010114:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010118:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001011c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010120:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010124:	e9 57 ff ff ff       	jmp    c0010080 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	68 3a a9 02 c0       	push   0xc002a93a
c0010131:	e8 73 a2 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0010136:	83 c4 10             	add    esp,0x10
c0010139:	bb 40 01 00 00       	mov    ebx,0x140
c001013e:	83 ec 08             	sub    esp,0x8
c0010141:	6a 00                	push   0x0
c0010143:	53                   	push   ebx
c0010144:	43                   	inc    ebx
c0010145:	e8 a6 fb ff ff       	call   c000fcf0 <Phys::setPageState(unsigned long, bool)>
c001014a:	ff 05 b4 e6 02 c0    	inc    DWORD PTR ds:0xc002e6b4
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010159:	75 e3                	jne    c001013e <Phys::physicalMemorySetup(unsigned int)+0x203>
c001015b:	83 c4 3c             	add    esp,0x3c
c001015e:	5b                   	pop    ebx
c001015f:	5e                   	pop    esi
c0010160:	5f                   	pop    edi
c0010161:	5d                   	pop    ebp
c0010162:	c3                   	ret    
c0010163:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001016b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010173:	e9 d7 fe ff ff       	jmp    c001004f <Phys::physicalMemorySetup(unsigned int)+0x114>

c0010178 <Pipe::isAtty()>:
c0010178:	31 c0                	xor    eax,eax
c001017a:	c3                   	ret    
c001017b:	90                   	nop

c001017c <Pipe::~Pipe()>:
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	ba f4 a9 02 c0       	mov    edx,0xc002a9f4
c0010184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010188:	89 10                	mov    DWORD PTR [eax],edx
c001018a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018e:	83 ec 0c             	sub    esp,0xc
c0010191:	50                   	push   eax
c0010192:	e8 41 12 00 00       	call   c00113d8 <UnixFile::~UnixFile()>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	90                   	nop
c001019b:	83 c4 0c             	add    esp,0xc
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <Pipe::~Pipe()>:
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	83 ec 0c             	sub    esp,0xc
c00101a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101aa:	e8 cd ff ff ff       	call   c001017c <Pipe::~Pipe()>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	83 ec 08             	sub    esp,0x8
c00101b5:	6a 20                	push   0x20
c00101b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101bb:	e8 73 27 00 00       	call   c0012933 <operator delete(void*, unsigned long)>
c00101c0:	83 c4 10             	add    esp,0x10
c00101c3:	83 c4 0c             	add    esp,0xc
c00101c6:	c3                   	ret    
c00101c7:	90                   	nop

c00101c8 <Pipe::read(unsigned long long, void*, int*)>:
c00101c8:	55                   	push   ebp
c00101c9:	57                   	push   edi
c00101ca:	56                   	push   esi
c00101cb:	53                   	push   ebx
c00101cc:	83 ec 1c             	sub    esp,0x1c
c00101cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00101d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00101d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00101db:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00101de:	89 c8                	mov    eax,ecx
c00101e0:	99                   	cdq    
c00101e1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00101e5:	74 24                	je     c001020b <Pipe::read(unsigned long long, void*, int*)+0x43>
c00101e7:	39 f9                	cmp    ecx,edi
c00101e9:	89 d1                	mov    ecx,edx
c00101eb:	19 f1                	sbb    ecx,esi
c00101ed:	73 1c                	jae    c001020b <Pipe::read(unsigned long long, void*, int*)+0x43>
c00101ef:	fa                   	cli    
c00101f0:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c00101f6:	e8 40 dd 00 00       	call   c001df3b <schedule()>
c00101fb:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0010200:	48                   	dec    eax
c0010201:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0010206:	75 d3                	jne    c00101db <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010208:	fb                   	sti    
c0010209:	eb d0                	jmp    c00101db <Pipe::read(unsigned long long, void*, int*)+0x13>
c001020b:	39 f8                	cmp    eax,edi
c001020d:	89 d1                	mov    ecx,edx
c001020f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010212:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010216:	19 f1                	sbb    ecx,esi
c0010218:	73 07                	jae    c0010221 <Pipe::read(unsigned long long, void*, int*)+0x59>
c001021a:	89 04 24             	mov    DWORD PTR [esp],eax
c001021d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010221:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010224:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010227:	29 f7                	sub    edi,esi
c0010229:	89 f8                	mov    eax,edi
c001022b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001022f:	99                   	cdq    
c0010230:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010237:	19 d0                	sbb    eax,edx
c0010239:	73 07                	jae    c0010242 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001023b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001023e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010242:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010245:	89 ea                	mov    edx,ebp
c0010247:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001024b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010250:	74 0d                	je     c001025f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010252:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010255:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001025d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001025f:	85 d2                	test   edx,edx
c0010261:	74 11                	je     c0010274 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010267:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001026a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001026e:	89 d1                	mov    ecx,edx
c0010270:	89 c7                	mov    edi,eax
c0010272:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010274:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010277:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001027a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001027d:	99                   	cdq    
c001027e:	89 f7                	mov    edi,esi
c0010280:	03 04 24             	add    eax,DWORD PTR [esp]
c0010283:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010287:	c1 ff 1f             	sar    edi,0x1f
c001028a:	57                   	push   edi
c001028b:	56                   	push   esi
c001028c:	52                   	push   edx
c001028d:	50                   	push   eax
c001028e:	e8 51 6c 01 00       	call   c0026ee4 <__umoddi3>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010299:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001029e:	75 10                	jne    c00102b0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	68 b1 a9 02 c0       	push   0xc002a9b1
c00102a8:	e8 fc a0 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00102ad:	83 c4 10             	add    esp,0x10
c00102b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00102b4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00102b7:	89 10                	mov    DWORD PTR [eax],edx
c00102b9:	83 c4 1c             	add    esp,0x1c
c00102bc:	31 c0                	xor    eax,eax
c00102be:	5b                   	pop    ebx
c00102bf:	5e                   	pop    esi
c00102c0:	5f                   	pop    edi
c00102c1:	5d                   	pop    ebp
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Pipe::write(unsigned long long, void*, int*)>:
c00102c4:	55                   	push   ebp
c00102c5:	57                   	push   edi
c00102c6:	56                   	push   esi
c00102c7:	53                   	push   ebx
c00102c8:	83 ec 1c             	sub    esp,0x1c
c00102cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00102cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102d3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00102d6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00102da:	89 04 24             	mov    DWORD PTR [esp],eax
c00102dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00102e1:	89 d8                	mov    eax,ebx
c00102e3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00102e6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00102ea:	89 d6                	mov    esi,edx
c00102ec:	89 d7                	mov    edi,edx
c00102ee:	c1 ff 1f             	sar    edi,0x1f
c00102f1:	03 34 24             	add    esi,DWORD PTR [esp]
c00102f4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00102f8:	c1 f8 1f             	sar    eax,0x1f
c00102fb:	39 f3                	cmp    ebx,esi
c00102fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010305:	19 f8                	sbb    eax,edi
c0010307:	b8 01 00 00 00       	mov    eax,0x1
c001030c:	72 6e                	jb     c001037c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001030e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010311:	01 d0                	add    eax,edx
c0010313:	99                   	cdq    
c0010314:	f7 fb                	idiv   ebx
c0010316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031a:	29 d3                	sub    ebx,edx
c001031c:	89 d7                	mov    edi,edx
c001031e:	89 de                	mov    esi,ebx
c0010320:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010323:	c1 fb 1f             	sar    ebx,0x1f
c0010326:	39 f2                	cmp    edx,esi
c0010328:	19 d8                	sbb    eax,ebx
c001032a:	b8 00 00 00 00       	mov    eax,0x0
c001032f:	72 04                	jb     c0010335 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010331:	89 d0                	mov    eax,edx
c0010333:	29 f0                	sub    eax,esi
c0010335:	89 d3                	mov    ebx,edx
c0010337:	29 c3                	sub    ebx,eax
c0010339:	74 0b                	je     c0010346 <Pipe::write(unsigned long long, void*, int*)+0x82>
c001033b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001033e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010342:	89 d9                	mov    ecx,ebx
c0010344:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010346:	85 c0                	test   eax,eax
c0010348:	74 0d                	je     c0010357 <Pipe::write(unsigned long long, void*, int*)+0x93>
c001034a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001034e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010351:	89 de                	mov    esi,ebx
c0010353:	89 c1                	mov    ecx,eax
c0010355:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010357:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001035a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001035f:	75 10                	jne    c0010371 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010361:	83 ec 0c             	sub    esp,0xc
c0010364:	68 cd a9 02 c0       	push   0xc002a9cd
c0010369:	e8 3b a0 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010375:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010378:	89 08                	mov    DWORD PTR [eax],ecx
c001037a:	31 c0                	xor    eax,eax
c001037c:	83 c4 1c             	add    esp,0x1c
c001037f:	5b                   	pop    ebx
c0010380:	5e                   	pop    esi
c0010381:	5f                   	pop    edi
c0010382:	5d                   	pop    ebp
c0010383:	c3                   	ret    

c0010384 <Pipe::Pipe(int)>:
c0010384:	83 ec 0c             	sub    esp,0xc
c0010387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038b:	83 ec 08             	sub    esp,0x8
c001038e:	6a 00                	push   0x0
c0010390:	50                   	push   eax
c0010391:	e8 60 0e 00 00       	call   c00111f6 <UnixFile::UnixFile(int)>
c0010396:	83 c4 10             	add    esp,0x10
c0010399:	ba f4 a9 02 c0       	mov    edx,0xc002a9f4
c001039e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a2:	89 10                	mov    DWORD PTR [eax],edx
c00103a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00103ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00103af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00103ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103be:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00103c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c9:	83 ec 0c             	sub    esp,0xc
c00103cc:	50                   	push   eax
c00103cd:	e8 e1 f5 ff ff       	call   c000f9b3 <malloc>
c00103d2:	83 c4 10             	add    esp,0x10
c00103d5:	89 c2                	mov    edx,eax
c00103d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00103de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00103e6:	90                   	nop
c00103e7:	83 c4 0c             	add    esp,0xc
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <VgaText::isAtty()>:
c00103ec:	b0 01                	mov    al,0x1
c00103ee:	c3                   	ret    
c00103ef:	90                   	nop

c00103f0 <VgaText::~VgaText()>:
c00103f0:	83 ec 0c             	sub    esp,0xc
c00103f3:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c00103f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103fc:	89 10                	mov    DWORD PTR [eax],edx
c00103fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010402:	83 ec 0c             	sub    esp,0xc
c0010405:	50                   	push   eax
c0010406:	e8 cd 0f 00 00       	call   c00113d8 <UnixFile::~UnixFile()>
c001040b:	83 c4 10             	add    esp,0x10
c001040e:	90                   	nop
c001040f:	83 c4 0c             	add    esp,0xc
c0010412:	c3                   	ret    
c0010413:	90                   	nop

c0010414 <VgaText::~VgaText()>:
c0010414:	83 ec 0c             	sub    esp,0xc
c0010417:	83 ec 0c             	sub    esp,0xc
c001041a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041e:	e8 cd ff ff ff       	call   c00103f0 <VgaText::~VgaText()>
c0010423:	83 c4 10             	add    esp,0x10
c0010426:	83 ec 08             	sub    esp,0x8
c0010429:	68 c4 02 00 00       	push   0x2c4
c001042e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010432:	e8 fc 24 00 00       	call   c0012933 <operator delete(void*, unsigned long)>
c0010437:	83 c4 10             	add    esp,0x10
c001043a:	83 c4 0c             	add    esp,0xc
c001043d:	c3                   	ret    

c001043e <VgaText::read(unsigned long long, void*, int*)>:
c001043e:	83 ec 10             	sub    esp,0x10
c0010441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001044d:	e8 86 5a 00 00       	call   c0015ed8 <readKeyboard(VgaText*, char*, unsigned long)>
c0010452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010456:	89 02                	mov    DWORD PTR [edx],eax
c0010458:	31 c0                	xor    eax,eax
c001045a:	83 c4 1c             	add    esp,0x1c
c001045d:	c3                   	ret    

c001045e <setTerminalScrollLock(bool)>:
c001045e:	c3                   	ret    

c001045f <addToTerminalCycle(VgaText*)>:
c001045f:	8b 15 20 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e720
c0010465:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010469:	85 d2                	test   edx,edx
c001046b:	75 09                	jne    c0010476 <addToTerminalCycle(VgaText*)+0x17>
c001046d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010470:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c0010475:	c3                   	ret    
c0010476:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010479:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001047c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001047f:	c3                   	ret    

c0010480 <installVgaTextImplementation()>:
c0010480:	83 ec 10             	sub    esp,0x10
c0010483:	6a 20                	push   0x20
c0010485:	6a 00                	push   0x0
c0010487:	68 00 e7 02 c0       	push   0xc002e700
c001048c:	e8 bf 02 ff ff       	call   c0000750 <memset>
c0010491:	83 c4 1c             	add    esp,0x1c
c0010494:	c3                   	ret    

c0010495 <scrollTerminalScrollLock(int)>:
c0010495:	c3                   	ret    

c0010496 <VgaText::updateTitle()>:
c0010496:	53                   	push   ebx
c0010497:	31 c0                	xor    eax,eax
c0010499:	83 ec 58             	sub    esp,0x58
c001049c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00104a0:	89 e1                	mov    ecx,esp
c00104a2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00104a6:	40                   	inc    eax
c00104a7:	83 f8 50             	cmp    eax,0x50
c00104aa:	75 f6                	jne    c00104a2 <VgaText::updateTitle()+0xc>
c00104ac:	31 c0                	xor    eax,eax
c00104ae:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00104b5:	84 db                	test   bl,bl
c00104b7:	74 06                	je     c00104bf <VgaText::updateTitle()+0x29>
c00104b9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00104bc:	40                   	inc    eax
c00104bd:	eb ef                	jmp    c00104ae <VgaText::updateTitle()+0x18>
c00104bf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00104c2:	85 c0                	test   eax,eax
c00104c4:	74 09                	je     c00104cf <VgaText::updateTitle()+0x39>
c00104c6:	53                   	push   ebx
c00104c7:	53                   	push   ebx
c00104c8:	51                   	push   ecx
c00104c9:	52                   	push   edx
c00104ca:	ff d0                	call   eax
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	83 c4 58             	add    esp,0x58
c00104d2:	5b                   	pop    ebx
c00104d3:	c3                   	ret    

c00104d4 <VgaText::load()>:
c00104d4:	53                   	push   ebx
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 ec 58             	sub    esp,0x58
c00104da:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00104de:	89 e2                	mov    edx,esp
c00104e0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00104e4:	40                   	inc    eax
c00104e5:	83 f8 50             	cmp    eax,0x50
c00104e8:	75 f6                	jne    c00104e0 <VgaText::load()+0xc>
c00104ea:	31 c0                	xor    eax,eax
c00104ec:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00104f3:	84 c9                	test   cl,cl
c00104f5:	74 06                	je     c00104fd <VgaText::load()+0x29>
c00104f7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00104fa:	40                   	inc    eax
c00104fb:	eb ef                	jmp    c00104ec <VgaText::load()+0x18>
c00104fd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010500:	85 c0                	test   eax,eax
c0010502:	74 09                	je     c001050d <VgaText::load()+0x39>
c0010504:	51                   	push   ecx
c0010505:	51                   	push   ecx
c0010506:	52                   	push   edx
c0010507:	53                   	push   ebx
c0010508:	ff d0                	call   eax
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010510:	85 c0                	test   eax,eax
c0010512:	74 09                	je     c001051d <VgaText::load()+0x49>
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	53                   	push   ebx
c0010518:	ff d0                	call   eax
c001051a:	83 c4 10             	add    esp,0x10
c001051d:	83 c4 58             	add    esp,0x58
c0010520:	5b                   	pop    ebx
c0010521:	c3                   	ret    

c0010522 <VgaText::updateCursor()>:
c0010522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010526:	39 05 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,eax
c001052c:	75 09                	jne    c0010537 <VgaText::updateCursor()+0x15>
c001052e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010531:	85 c0                	test   eax,eax
c0010533:	74 02                	je     c0010537 <VgaText::updateCursor()+0x15>
c0010535:	ff e0                	jmp    eax
c0010537:	c3                   	ret    

c0010538 <VgaText::doANSI_SGR(int)>:
c0010538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001053c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010540:	85 d2                	test   edx,edx
c0010542:	75 0b                	jne    c001054f <VgaText::doANSI_SGR(int)+0x17>
c0010544:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010547:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001054a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001054d:	eb 59                	jmp    c00105a8 <VgaText::doANSI_SGR(int)+0x70>
c001054f:	83 fa 07             	cmp    edx,0x7
c0010552:	75 0b                	jne    c001055f <VgaText::doANSI_SGR(int)+0x27>
c0010554:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010557:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001055a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001055d:	eb 49                	jmp    c00105a8 <VgaText::doANSI_SGR(int)+0x70>
c001055f:	83 fa 1b             	cmp    edx,0x1b
c0010562:	74 e0                	je     c0010544 <VgaText::doANSI_SGR(int)+0xc>
c0010564:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010567:	83 f9 07             	cmp    ecx,0x7
c001056a:	77 09                	ja     c0010575 <VgaText::doANSI_SGR(int)+0x3d>
c001056c:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c0010573:	eb 20                	jmp    c0010595 <VgaText::doANSI_SGR(int)+0x5d>
c0010575:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010578:	83 f9 07             	cmp    ecx,0x7
c001057b:	77 09                	ja     c0010586 <VgaText::doANSI_SGR(int)+0x4e>
c001057d:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c0010584:	eb 22                	jmp    c00105a8 <VgaText::doANSI_SGR(int)+0x70>
c0010586:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010589:	83 f9 07             	cmp    ecx,0x7
c001058c:	77 0b                	ja     c0010599 <VgaText::doANSI_SGR(int)+0x61>
c001058e:	8b 14 95 78 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b88]
c0010595:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010598:	c3                   	ret    
c0010599:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001059c:	83 f9 07             	cmp    ecx,0x7
c001059f:	77 0a                	ja     c00105ab <VgaText::doANSI_SGR(int)+0x73>
c00105a1:	8b 14 95 50 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bb0]
c00105a8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00105ab:	c3                   	ret    

c00105ac <VgaText::setDefaultBgColour(VgaColour)>:
c00105ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105b4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00105b7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00105ba:	c3                   	ret    
c00105bb:	90                   	nop

c00105bc <VgaText::setDefaultFgColour(VgaColour)>:
c00105bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00105c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00105ca:	c3                   	ret    
c00105cb:	90                   	nop

c00105cc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00105cc:	53                   	push   ebx
c00105cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00105d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00105d9:	51                   	push   ecx
c00105da:	e8 cd ff ff ff       	call   c00105ac <VgaText::setDefaultBgColour(VgaColour)>
c00105df:	58                   	pop    eax
c00105e0:	5a                   	pop    edx
c00105e1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00105e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00105e9:	5b                   	pop    ebx
c00105ea:	eb d0                	jmp    c00105bc <VgaText::setDefaultFgColour(VgaColour)>

c00105ec <VgaText::setTitleTextColour(VgaColour)>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105f4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00105f7:	e9 9a fe ff ff       	jmp    c0010496 <VgaText::updateTitle()>

c00105fc <VgaText::setTitleColour(VgaColour)>:
c00105fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010604:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010607:	e9 8a fe ff ff       	jmp    c0010496 <VgaText::updateTitle()>

c001060c <VgaText::setTitle(char*)>:
c001060c:	53                   	push   ebx
c001060d:	83 ec 10             	sub    esp,0x10
c0010610:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010618:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001061e:	50                   	push   eax
c001061f:	e8 e8 01 ff ff       	call   c000080c <strcpy>
c0010624:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010628:	83 c4 18             	add    esp,0x18
c001062b:	5b                   	pop    ebx
c001062c:	e9 65 fe ff ff       	jmp    c0010496 <VgaText::updateTitle()>
c0010631:	90                   	nop

c0010632 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010632:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010636:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001063b:	83 e0 0f             	and    eax,0xf
c001063e:	c1 e2 04             	shl    edx,0x4
c0010641:	09 d0                	or     eax,edx
c0010643:	c3                   	ret    

c0010644 <VgaText::scrollScreen()>:
c0010644:	55                   	push   ebp
c0010645:	b9 01 00 00 00       	mov    ecx,0x1
c001064a:	57                   	push   edi
c001064b:	56                   	push   esi
c001064c:	53                   	push   ebx
c001064d:	83 ec 0c             	sub    esp,0xc
c0010650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010654:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001065a:	31 ff                	xor    edi,edi
c001065c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001065f:	83 f9 17             	cmp    ecx,0x17
c0010662:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010665:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001066c:	75 27                	jne    c0010695 <VgaText::scrollScreen()+0x51>
c001066e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010671:	01 f5                	add    ebp,esi
c0010673:	f7 c7 01 00 00 00    	test   edi,0x1
c0010679:	74 16                	je     c0010691 <VgaText::scrollScreen()+0x4d>
c001067b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001067f:	50                   	push   eax
c0010680:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010684:	50                   	push   eax
c0010685:	e8 a8 ff ff ff       	call   c0010632 <VgaText::combineColours(unsigned char, unsigned char)>
c001068a:	5a                   	pop    edx
c001068b:	5a                   	pop    edx
c001068c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001068f:	eb 04                	jmp    c0010695 <VgaText::scrollScreen()+0x51>
c0010691:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010695:	47                   	inc    edi
c0010696:	46                   	inc    esi
c0010697:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001069d:	75 bd                	jne    c001065c <VgaText::scrollScreen()+0x18>
c001069f:	41                   	inc    ecx
c00106a0:	83 f9 18             	cmp    ecx,0x18
c00106a3:	75 af                	jne    c0010654 <VgaText::scrollScreen()+0x10>
c00106a5:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c00106ab:	75 1b                	jne    c00106c8 <VgaText::scrollScreen()+0x84>
c00106ad:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00106b1:	74 05                	je     c00106b8 <VgaText::scrollScreen()+0x74>
c00106b3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00106b6:	eb 10                	jmp    c00106c8 <VgaText::scrollScreen()+0x84>
c00106b8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00106bb:	85 c0                	test   eax,eax
c00106bd:	74 09                	je     c00106c8 <VgaText::scrollScreen()+0x84>
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	53                   	push   ebx
c00106c3:	ff d0                	call   eax
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106cc:	83 c4 0c             	add    esp,0xc
c00106cf:	5b                   	pop    ebx
c00106d0:	5e                   	pop    esi
c00106d1:	5f                   	pop    edi
c00106d2:	5d                   	pop    ebp
c00106d3:	e9 4a fe ff ff       	jmp    c0010522 <VgaText::updateCursor()>

c00106d8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00106d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00106dd:	c1 e0 08             	shl    eax,0x8
c00106e0:	89 c2                	mov    edx,eax
c00106e2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00106e7:	09 d0                	or     eax,edx
c00106e9:	c3                   	ret    

c00106ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00106ea:	56                   	push   esi
c00106eb:	53                   	push   ebx
c00106ec:	51                   	push   ecx
c00106ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00106f1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106f6:	50                   	push   eax
c00106f7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00106fc:	50                   	push   eax
c00106fd:	e8 30 ff ff ff       	call   c0010632 <VgaText::combineColours(unsigned char, unsigned char)>
c0010702:	5b                   	pop    ebx
c0010703:	0f b6 c0             	movzx  eax,al
c0010706:	5e                   	pop    esi
c0010707:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001070c:	50                   	push   eax
c001070d:	53                   	push   ebx
c001070e:	e8 c5 ff ff ff       	call   c00106d8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010713:	5a                   	pop    edx
c0010714:	5e                   	pop    esi
c0010715:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010718:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001071e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010722:	0f b7 d2             	movzx  edx,dx
c0010725:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010729:	39 0d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ecx
c001072f:	75 10                	jne    c0010741 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010731:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010734:	85 c0                	test   eax,eax
c0010736:	74 09                	je     c0010741 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010738:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001073c:	5a                   	pop    edx
c001073d:	5b                   	pop    ebx
c001073e:	5e                   	pop    esi
c001073f:	ff e0                	jmp    eax
c0010741:	58                   	pop    eax
c0010742:	5b                   	pop    ebx
c0010743:	5e                   	pop    esi
c0010744:	c3                   	ret    
c0010745:	90                   	nop

c0010746 <VgaText::getCursorX()>:
c0010746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001074a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001074d:	c3                   	ret    

c001074e <VgaText::getCursorY()>:
c001074e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010752:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010755:	c3                   	ret    

c0010756 <VgaText::setCursor(int, int)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010761:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010765:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010768:	e9 b5 fd ff ff       	jmp    c0010522 <VgaText::updateCursor()>

c001076d <setActiveTerminal(VgaText*)>:
c001076d:	53                   	push   ebx
c001076e:	83 ec 08             	sub    esp,0x8
c0010771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010775:	85 db                	test   ebx,ebx
c0010777:	75 11                	jne    c001078a <setActiveTerminal(VgaText*)+0x1d>
c0010779:	c7 44 24 10 08 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa08
c0010781:	83 c4 08             	add    esp,0x8
c0010784:	5b                   	pop    ebx
c0010785:	e9 1f 9c 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c001078a:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c001078f:	85 c0                	test   eax,eax
c0010791:	74 0c                	je     c001079f <setActiveTerminal(VgaText*)+0x32>
c0010793:	83 ec 0c             	sub    esp,0xc
c0010796:	50                   	push   eax
c0010797:	e8 86 fd ff ff       	call   c0010522 <VgaText::updateCursor()>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c00107a5:	51                   	push   ecx
c00107a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107ac:	53                   	push   ebx
c00107ad:	e8 a4 ff ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107b9:	75 07                	jne    c00107c2 <setActiveTerminal(VgaText*)+0x55>
c00107bb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00107c2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c6:	83 c4 08             	add    esp,0x8
c00107c9:	5b                   	pop    ebx
c00107ca:	e9 05 fd ff ff       	jmp    c00104d4 <VgaText::load()>

c00107cf <doTerminalCycle()>:
c00107cf:	83 ec 18             	sub    esp,0x18
c00107d2:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c00107d7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107da:	50                   	push   eax
c00107db:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c00107e0:	e8 88 ff ff ff       	call   c001076d <setActiveTerminal(VgaText*)>
c00107e5:	83 c4 1c             	add    esp,0x1c
c00107e8:	c3                   	ret    
c00107e9:	90                   	nop

c00107ea <VgaText::setCursorX(int)>:
c00107ea:	83 ec 10             	sub    esp,0x10
c00107ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107f1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00107f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f8:	50                   	push   eax
c00107f9:	e8 58 ff ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c00107fe:	83 c4 1c             	add    esp,0x1c
c0010801:	c3                   	ret    

c0010802 <VgaText::setCursorY(int)>:
c0010802:	83 ec 10             	sub    esp,0x10
c0010805:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001080d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010810:	50                   	push   eax
c0010811:	e8 40 ff ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c0010816:	83 c4 1c             	add    esp,0x1c
c0010819:	c3                   	ret    

c001081a <VgaText::incrementCursor(bool)>:
c001081a:	56                   	push   esi
c001081b:	53                   	push   ebx
c001081c:	51                   	push   ecx
c001081d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010825:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010828:	40                   	inc    eax
c0010829:	83 f8 50             	cmp    eax,0x50
c001082c:	74 05                	je     c0010833 <VgaText::incrementCursor(bool)+0x19>
c001082e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010831:	eb 24                	jmp    c0010857 <VgaText::incrementCursor(bool)+0x3d>
c0010833:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010836:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001083d:	8d 50 01             	lea    edx,[eax+0x1]
c0010840:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010843:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010846:	75 0f                	jne    c0010857 <VgaText::incrementCursor(bool)+0x3d>
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001084e:	53                   	push   ebx
c001084f:	e8 f0 fd ff ff       	call   c0010644 <VgaText::scrollScreen()>
c0010854:	83 c4 10             	add    esp,0x10
c0010857:	89 f0                	mov    eax,esi
c0010859:	84 c0                	test   al,al
c001085b:	74 0c                	je     c0010869 <VgaText::incrementCursor(bool)+0x4f>
c001085d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010861:	5a                   	pop    edx
c0010862:	5b                   	pop    ebx
c0010863:	5e                   	pop    esi
c0010864:	e9 b9 fc ff ff       	jmp    c0010522 <VgaText::updateCursor()>
c0010869:	58                   	pop    eax
c001086a:	5b                   	pop    ebx
c001086b:	5e                   	pop    esi
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <VgaText::decrementCursor(bool)>:
c001086e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010872:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010876:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010879:	85 c0                	test   eax,eax
c001087b:	74 04                	je     c0010881 <VgaText::decrementCursor(bool)+0x13>
c001087d:	48                   	dec    eax
c001087e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010881:	84 c9                	test   cl,cl
c0010883:	74 09                	je     c001088e <VgaText::decrementCursor(bool)+0x20>
c0010885:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010889:	e9 94 fc ff ff       	jmp    c0010522 <VgaText::updateCursor()>
c001088e:	c3                   	ret    
c001088f:	90                   	nop

c0010890 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010890:	53                   	push   ebx
c0010891:	83 ec 08             	sub    esp,0x8
c0010894:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010898:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001089c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00108a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00108a4:	3c 07                	cmp    al,0x7
c00108a6:	75 2a                	jne    c00108d2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00108a8:	a1 d8 e7 02 c0       	mov    eax,ds:0xc002e7d8
c00108ad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00108b5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00108bd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00108c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108c9:	83 c4 08             	add    esp,0x8
c00108cc:	5b                   	pop    ebx
c00108cd:	e9 46 2f 00 00       	jmp    c0013818 <Buzzer::beep(int, int, bool)>
c00108d2:	3c 0d                	cmp    al,0xd
c00108d4:	75 09                	jne    c00108df <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00108d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108dd:	eb 2c                	jmp    c001090b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00108df:	3c 0a                	cmp    al,0xa
c00108e1:	75 31                	jne    c0010914 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00108e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108ed:	8d 50 01             	lea    edx,[eax+0x1]
c00108f0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108f3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108f6:	75 0f                	jne    c0010907 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00108f8:	83 ec 0c             	sub    esp,0xc
c00108fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108fe:	53                   	push   ebx
c00108ff:	e8 40 fd ff ff       	call   c0010644 <VgaText::scrollScreen()>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001090b:	83 c4 08             	add    esp,0x8
c001090e:	5b                   	pop    ebx
c001090f:	e9 0e fc ff ff       	jmp    c0010522 <VgaText::updateCursor()>
c0010914:	3c 08                	cmp    al,0x8
c0010916:	75 25                	jne    c001093d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010918:	50                   	push   eax
c0010919:	50                   	push   eax
c001091a:	6a 01                	push   0x1
c001091c:	53                   	push   ebx
c001091d:	e8 4c ff ff ff       	call   c001086e <VgaText::decrementCursor(bool)>
c0010922:	5a                   	pop    edx
c0010923:	59                   	pop    ecx
c0010924:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010927:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001092a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001092d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010930:	6a 20                	push   0x20
c0010932:	53                   	push   ebx
c0010933:	e8 b2 fd ff ff       	call   c00106ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010938:	83 c4 28             	add    esp,0x28
c001093b:	5b                   	pop    ebx
c001093c:	c3                   	ret    
c001093d:	83 ec 08             	sub    esp,0x8
c0010940:	0f be c0             	movsx  eax,al
c0010943:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010946:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010949:	51                   	push   ecx
c001094a:	52                   	push   edx
c001094b:	50                   	push   eax
c001094c:	53                   	push   ebx
c001094d:	e8 98 fd ff ff       	call   c00106ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010952:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010956:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001095e:	83 c4 28             	add    esp,0x28
c0010961:	5b                   	pop    ebx
c0010962:	e9 b3 fe ff ff       	jmp    c001081a <VgaText::incrementCursor(bool)>
c0010967:	90                   	nop

c0010968 <VgaText::doUpdate()>:
c0010968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001096c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001096f:	85 c0                	test   eax,eax
c0010971:	74 02                	je     c0010975 <VgaText::doUpdate()+0xd>
c0010973:	ff e0                	jmp    eax
c0010975:	c3                   	ret    

c0010976 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010976:	55                   	push   ebp
c0010977:	31 ed                	xor    ebp,ebp
c0010979:	57                   	push   edi
c001097a:	56                   	push   esi
c001097b:	53                   	push   ebx
c001097c:	83 ec 1c             	sub    esp,0x1c
c001097f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010983:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010988:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001098f:	50                   	push   eax
c0010990:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010995:	50                   	push   eax
c0010996:	e8 97 fc ff ff       	call   c0010632 <VgaText::combineColours(unsigned char, unsigned char)>
c001099b:	59                   	pop    ecx
c001099c:	0f b6 c0             	movzx  eax,al
c001099f:	5e                   	pop    esi
c00109a0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109a9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109b0:	0f b7 f6             	movzx  esi,si
c00109b3:	01 f6                	add    esi,esi
c00109b5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109b8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00109bb:	84 c0                	test   al,al
c00109bd:	0f 84 fd 00 00 00    	je     c0010ac0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00109c3:	3c 0d                	cmp    al,0xd
c00109c5:	75 0c                	jne    c00109d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00109c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109ce:	e9 e7 00 00 00       	jmp    c0010aba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109d3:	3c 0a                	cmp    al,0xa
c00109d5:	75 47                	jne    c0010a1e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00109d7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00109da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00109e1:	8d 48 01             	lea    ecx,[eax+0x1]
c00109e4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00109e7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00109ea:	75 0f                	jne    c00109fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00109f2:	53                   	push   ebx
c00109f3:	e8 4c fc ff ff       	call   c0010644 <VgaText::scrollScreen()>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	83 ec 0c             	sub    esp,0xc
c00109fe:	31 ed                	xor    ebp,ebp
c0010a00:	53                   	push   ebx
c0010a01:	e8 1c fb ff ff       	call   c0010522 <VgaText::updateCursor()>
c0010a06:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a11:	0f b7 f6             	movzx  esi,si
c0010a14:	01 f6                	add    esi,esi
c0010a16:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a19:	e9 9c 00 00 00       	jmp    c0010aba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a1e:	3c 08                	cmp    al,0x8
c0010a20:	75 35                	jne    c0010a57 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010a22:	56                   	push   esi
c0010a23:	56                   	push   esi
c0010a24:	6a 01                	push   0x1
c0010a26:	53                   	push   ebx
c0010a27:	e8 42 fe ff ff       	call   c001086e <VgaText::decrementCursor(bool)>
c0010a2c:	58                   	pop    eax
c0010a2d:	5a                   	pop    edx
c0010a2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a3a:	6a 20                	push   0x20
c0010a3c:	53                   	push   ebx
c0010a3d:	e8 a8 fc ff ff       	call   c00106ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a42:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a47:	83 c4 20             	add    esp,0x20
c0010a4a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a4d:	0f b7 f6             	movzx  esi,si
c0010a50:	01 f6                	add    esi,esi
c0010a52:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a55:	eb 63                	jmp    c0010aba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a57:	51                   	push   ecx
c0010a58:	51                   	push   ecx
c0010a59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010a5d:	50                   	push   eax
c0010a5e:	e8 75 fc ff ff       	call   c00106d8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	66 89 06             	mov    WORD PTR [esi],ax
c0010a69:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c0010a6f:	75 21                	jne    c0010a92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a71:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010a74:	85 c0                	test   eax,eax
c0010a76:	74 1a                	je     c0010a92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010a78:	52                   	push   edx
c0010a79:	52                   	push   edx
c0010a7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010a7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010a80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a88:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010a8b:	51                   	push   ecx
c0010a8c:	53                   	push   ebx
c0010a8d:	ff d0                	call   eax
c0010a8f:	83 c4 20             	add    esp,0x20
c0010a92:	83 c6 02             	add    esi,0x2
c0010a95:	50                   	push   eax
c0010a96:	50                   	push   eax
c0010a97:	6a 00                	push   0x0
c0010a99:	53                   	push   ebx
c0010a9a:	e8 7b fd ff ff       	call   c001081a <VgaText::incrementCursor(bool)>
c0010a9f:	83 c4 10             	add    esp,0x10
c0010aa2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010aa6:	75 0d                	jne    c0010ab5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010aa8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010aad:	0f b7 f6             	movzx  esi,si
c0010ab0:	01 f6                	add    esi,esi
c0010ab2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ab5:	bd 01 00 00 00       	mov    ebp,0x1
c0010aba:	47                   	inc    edi
c0010abb:	e9 f8 fe ff ff       	jmp    c00109b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	53                   	push   ebx
c0010ac4:	e8 59 fa ff ff       	call   c0010522 <VgaText::updateCursor()>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	89 e8                	mov    eax,ebp
c0010ace:	84 c0                	test   al,al
c0010ad0:	74 0c                	je     c0010ade <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010ad2:	83 ec 0c             	sub    esp,0xc
c0010ad5:	53                   	push   ebx
c0010ad6:	e8 8d fe ff ff       	call   c0010968 <VgaText::doUpdate()>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ae5:	83 c4 1c             	add    esp,0x1c
c0010ae8:	5b                   	pop    ebx
c0010ae9:	5e                   	pop    esi
c0010aea:	5f                   	pop    edi
c0010aeb:	5d                   	pop    ebp
c0010aec:	c3                   	ret    
c0010aed:	90                   	nop

c0010aee <VgaText::clearScreen()>:
c0010aee:	57                   	push   edi
c0010aef:	56                   	push   esi
c0010af0:	31 f6                	xor    esi,esi
c0010af2:	53                   	push   ebx
c0010af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af7:	52                   	push   edx
c0010af8:	6a 00                	push   0x0
c0010afa:	6a 00                	push   0x0
c0010afc:	53                   	push   ebx
c0010afd:	e8 54 fc ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c0010b02:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010b0f:	7e 20                	jle    c0010b31 <VgaText::clearScreen()+0x43>
c0010b11:	31 ff                	xor    edi,edi
c0010b13:	50                   	push   eax
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	57                   	push   edi
c0010b17:	47                   	inc    edi
c0010b18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b1b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b1e:	6a 20                	push   0x20
c0010b20:	53                   	push   ebx
c0010b21:	e8 c4 fb ff ff       	call   c00106ea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b26:	83 c4 20             	add    esp,0x20
c0010b29:	83 ff 50             	cmp    edi,0x50
c0010b2c:	75 e5                	jne    c0010b13 <VgaText::clearScreen()+0x25>
c0010b2e:	46                   	inc    esi
c0010b2f:	eb db                	jmp    c0010b0c <VgaText::clearScreen()+0x1e>
c0010b31:	83 ec 0c             	sub    esp,0xc
c0010b34:	53                   	push   ebx
c0010b35:	e8 2e fe ff ff       	call   c0010968 <VgaText::doUpdate()>
c0010b3a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	c3                   	ret    

c0010b48 <VgaText::putchar(char)>:
c0010b48:	56                   	push   esi
c0010b49:	53                   	push   ebx
c0010b4a:	83 ec 14             	sub    esp,0x14
c0010b4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b55:	3c 5b                	cmp    al,0x5b
c0010b57:	75 18                	jne    c0010b71 <VgaText::putchar(char)+0x29>
c0010b59:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010b5d:	74 1f                	je     c0010b7e <VgaText::putchar(char)+0x36>
c0010b5f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010b65:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010b6c:	e9 bd 00 00 00       	jmp    c0010c2e <VgaText::putchar(char)+0xe6>
c0010b71:	3c 1b                	cmp    al,0x1b
c0010b73:	75 09                	jne    c0010b7e <VgaText::putchar(char)+0x36>
c0010b75:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010b79:	e9 b0 00 00 00       	jmp    c0010c2e <VgaText::putchar(char)+0xe6>
c0010b7e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010b81:	84 c9                	test   cl,cl
c0010b83:	0f 84 92 00 00 00    	je     c0010c1b <VgaText::putchar(char)+0xd3>
c0010b89:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b8c:	80 fa 3e             	cmp    dl,0x3e
c0010b8f:	77 76                	ja     c0010c07 <VgaText::putchar(char)+0xbf>
c0010b91:	3c 6d                	cmp    al,0x6d
c0010b93:	75 47                	jne    c0010bdc <VgaText::putchar(char)+0x94>
c0010b95:	31 f6                	xor    esi,esi
c0010b97:	31 d2                	xor    edx,edx
c0010b99:	31 c0                	xor    eax,eax
c0010b9b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010b9e:	7e 2d                	jle    c0010bcd <VgaText::putchar(char)+0x85>
c0010ba0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010ba5:	80 fa 3b             	cmp    dl,0x3b
c0010ba8:	75 17                	jne    c0010bc1 <VgaText::putchar(char)+0x79>
c0010baa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bae:	50                   	push   eax
c0010baf:	53                   	push   ebx
c0010bb0:	e8 83 f9 ff ff       	call   c0010538 <VgaText::doANSI_SGR(int)>
c0010bb5:	59                   	pop    ecx
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	58                   	pop    eax
c0010bb9:	31 c0                	xor    eax,eax
c0010bbb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bbf:	eb 09                	jmp    c0010bca <VgaText::putchar(char)+0x82>
c0010bc1:	6b c0 0a             	imul   eax,eax,0xa
c0010bc4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bc8:	88 ca                	mov    dl,cl
c0010bca:	46                   	inc    esi
c0010bcb:	eb ce                	jmp    c0010b9b <VgaText::putchar(char)+0x53>
c0010bcd:	84 d2                	test   dl,dl
c0010bcf:	74 2e                	je     c0010bff <VgaText::putchar(char)+0xb7>
c0010bd1:	50                   	push   eax
c0010bd2:	53                   	push   ebx
c0010bd3:	e8 60 f9 ff ff       	call   c0010538 <VgaText::doANSI_SGR(int)>
c0010bd8:	58                   	pop    eax
c0010bd9:	5a                   	pop    edx
c0010bda:	eb 23                	jmp    c0010bff <VgaText::putchar(char)+0xb7>
c0010bdc:	3c 4a                	cmp    al,0x4a
c0010bde:	75 1f                	jne    c0010bff <VgaText::putchar(char)+0xb7>
c0010be0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010be4:	75 19                	jne    c0010bff <VgaText::putchar(char)+0xb7>
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	53                   	push   ebx
c0010bea:	e8 ff fe ff ff       	call   c0010aee <VgaText::clearScreen()>
c0010bef:	83 c4 0c             	add    esp,0xc
c0010bf2:	6a 00                	push   0x0
c0010bf4:	6a 00                	push   0x0
c0010bf6:	53                   	push   ebx
c0010bf7:	e8 5a fb ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c0010bfc:	83 c4 10             	add    esp,0x10
c0010bff:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010c05:	eb 27                	jmp    c0010c2e <VgaText::putchar(char)+0xe6>
c0010c07:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010c0a:	83 fa 0e             	cmp    edx,0xe
c0010c0d:	7f 1f                	jg     c0010c2e <VgaText::putchar(char)+0xe6>
c0010c0f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c12:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010c15:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010c19:	eb 13                	jmp    c0010c2e <VgaText::putchar(char)+0xe6>
c0010c1b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c1e:	0f be c0             	movsx  eax,al
c0010c21:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c24:	50                   	push   eax
c0010c25:	53                   	push   ebx
c0010c26:	e8 65 fc ff ff       	call   c0010890 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c2b:	83 c4 10             	add    esp,0x10
c0010c2e:	83 c4 14             	add    esp,0x14
c0010c31:	5b                   	pop    ebx
c0010c32:	5e                   	pop    esi
c0010c33:	c3                   	ret    

c0010c34 <VgaText::putx(unsigned int)>:
c0010c34:	57                   	push   edi
c0010c35:	b9 11 00 00 00       	mov    ecx,0x11
c0010c3a:	56                   	push   esi
c0010c3b:	be 16 aa 02 c0       	mov    esi,0xc002aa16
c0010c40:	53                   	push   ebx
c0010c41:	83 ec 20             	sub    esp,0x20
c0010c44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c48:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c4c:	fc                   	cld    
c0010c4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c4f:	be 08 00 00 00       	mov    esi,0x8
c0010c54:	50                   	push   eax
c0010c55:	50                   	push   eax
c0010c56:	89 d8                	mov    eax,ebx
c0010c58:	c1 e3 04             	shl    ebx,0x4
c0010c5b:	c1 e8 1c             	shr    eax,0x1c
c0010c5e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c63:	50                   	push   eax
c0010c64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c68:	e8 db fe ff ff       	call   c0010b48 <VgaText::putchar(char)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	4e                   	dec    esi
c0010c71:	75 e1                	jne    c0010c54 <VgaText::putx(unsigned int)+0x20>
c0010c73:	83 c4 20             	add    esp,0x20
c0010c76:	5b                   	pop    ebx
c0010c77:	5e                   	pop    esi
c0010c78:	5f                   	pop    edi
c0010c79:	c3                   	ret    

c0010c7a <VgaText::puts(char const*)>:
c0010c7a:	53                   	push   ebx
c0010c7b:	83 ec 08             	sub    esp,0x8
c0010c7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c82:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c85:	84 c0                	test   al,al
c0010c87:	74 12                	je     c0010c9b <VgaText::puts(char const*)+0x21>
c0010c89:	43                   	inc    ebx
c0010c8a:	51                   	push   ecx
c0010c8b:	51                   	push   ecx
c0010c8c:	50                   	push   eax
c0010c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c91:	e8 b2 fe ff ff       	call   c0010b48 <VgaText::putchar(char)>
c0010c96:	83 c4 10             	add    esp,0x10
c0010c99:	eb e7                	jmp    c0010c82 <VgaText::puts(char const*)+0x8>
c0010c9b:	83 c4 08             	add    esp,0x8
c0010c9e:	5b                   	pop    ebx
c0010c9f:	c3                   	ret    

c0010ca0 <VgaText::VgaText(char const*)>:
c0010ca0:	57                   	push   edi
c0010ca1:	56                   	push   esi
c0010ca2:	53                   	push   ebx
c0010ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca7:	83 ec 08             	sub    esp,0x8
c0010caa:	6a 00                	push   0x0
c0010cac:	50                   	push   eax
c0010cad:	e8 44 05 00 00       	call   c00111f6 <UnixFile::UnixFile(int)>
c0010cb2:	83 c4 10             	add    esp,0x10
c0010cb5:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c0010cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbe:	89 10                	mov    DWORD PTR [eax],edx
c0010cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cda:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cea:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d00:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d16:	8d 50 60             	lea    edx,[eax+0x60]
c0010d19:	bb 00 e7 02 c0       	mov    ebx,0xc002e700
c0010d1e:	b8 08 00 00 00       	mov    eax,0x8
c0010d23:	fc                   	cld    
c0010d24:	89 d7                	mov    edi,edx
c0010d26:	89 de                	mov    esi,ebx
c0010d28:	89 c1                	mov    ecx,eax
c0010d2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d30:	05 82 00 00 00       	add    eax,0x82
c0010d35:	83 ec 08             	sub    esp,0x8
c0010d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d3c:	50                   	push   eax
c0010d3d:	e8 ca fa fe ff       	call   c000080c <strcpy>
c0010d42:	83 c4 10             	add    esp,0x10
c0010d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d49:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	6a 01                	push   0x1
c0010d55:	e8 df 08 00 00       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	89 c2                	mov    edx,eax
c0010d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d66:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0010d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d73:	89 c6                	mov    esi,eax
c0010d75:	e8 35 f0 ff ff       	call   c000fdaf <Phys::allocatePage()>
c0010d7a:	68 05 0c 00 00       	push   0xc05
c0010d7f:	56                   	push   esi
c0010d80:	50                   	push   eax
c0010d81:	53                   	push   ebx
c0010d82:	e8 59 0f 00 00       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d91:	83 ec 04             	sub    esp,0x4
c0010d94:	68 00 0f 00 00       	push   0xf00
c0010d99:	6a 00                	push   0x0
c0010d9b:	50                   	push   eax
c0010d9c:	e8 af f9 fe ff       	call   c0000750 <memset>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	83 ec 04             	sub    esp,0x4
c0010da7:	6a 00                	push   0x0
c0010da9:	6a 07                	push   0x7
c0010dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010daf:	e8 18 f8 ff ff       	call   c00105cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010db4:	83 c4 10             	add    esp,0x10
c0010db7:	83 ec 04             	sub    esp,0x4
c0010dba:	6a 00                	push   0x0
c0010dbc:	6a 00                	push   0x0
c0010dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc2:	e8 8f f9 ff ff       	call   c0010756 <VgaText::setCursor(int, int)>
c0010dc7:	83 c4 10             	add    esp,0x10
c0010dca:	83 ec 0c             	sub    esp,0xc
c0010dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd1:	e8 18 fd ff ff       	call   c0010aee <VgaText::clearScreen()>
c0010dd6:	83 c4 10             	add    esp,0x10
c0010dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de5:	05 02 01 00 00       	add    eax,0x102
c0010dea:	83 ec 04             	sub    esp,0x4
c0010ded:	68 96 00 00 00       	push   0x96
c0010df2:	6a 00                	push   0x0
c0010df4:	50                   	push   eax
c0010df5:	e8 56 f9 fe ff       	call   c0000750 <memset>
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e01:	05 98 01 00 00       	add    eax,0x198
c0010e06:	83 ec 04             	sub    esp,0x4
c0010e09:	68 2c 01 00 00       	push   0x12c
c0010e0e:	6a 00                	push   0x0
c0010e10:	50                   	push   eax
c0010e11:	e8 3a f9 fe ff       	call   c0000750 <memset>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	90                   	nop
c0010e1a:	5b                   	pop    ebx
c0010e1b:	5e                   	pop    esi
c0010e1c:	5f                   	pop    edi
c0010e1d:	c3                   	ret    

c0010e1e <VgaText::receiveKey(unsigned char)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e2d:	84 db                	test   bl,bl
c0010e2f:	0f 84 c9 00 00 00    	je     c0010efe <VgaText::receiveKey(unsigned char)+0xe0>
c0010e35:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010e3b:	80 fb 08             	cmp    bl,0x8
c0010e3e:	75 2c                	jne    c0010e6c <VgaText::receiveKey(unsigned char)+0x4e>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	57                   	push   edi
c0010e44:	e8 23 f9 fe ff       	call   c000076c <strlen>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	85 c0                	test   eax,eax
c0010e4e:	74 41                	je     c0010e91 <VgaText::receiveKey(unsigned char)+0x73>
c0010e50:	50                   	push   eax
c0010e51:	50                   	push   eax
c0010e52:	6a 08                	push   0x8
c0010e54:	56                   	push   esi
c0010e55:	e8 ee fc ff ff       	call   c0010b48 <VgaText::putchar(char)>
c0010e5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e5d:	e8 0a f9 fe ff       	call   c000076c <strlen>
c0010e62:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010e6a:	eb 22                	jmp    c0010e8e <VgaText::receiveKey(unsigned char)+0x70>
c0010e6c:	0f be c3             	movsx  eax,bl
c0010e6f:	52                   	push   edx
c0010e70:	52                   	push   edx
c0010e71:	50                   	push   eax
c0010e72:	56                   	push   esi
c0010e73:	e8 d0 fc ff ff       	call   c0010b48 <VgaText::putchar(char)>
c0010e78:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e81:	59                   	pop    ecx
c0010e82:	5d                   	pop    ebp
c0010e83:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e87:	50                   	push   eax
c0010e88:	57                   	push   edi
c0010e89:	e8 be fa fe ff       	call   c000094c <strcat>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010e98:	75 05                	jne    c0010e9f <VgaText::receiveKey(unsigned char)+0x81>
c0010e9a:	80 fb 0a             	cmp    bl,0xa
c0010e9d:	75 53                	jne    c0010ef2 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010ea8:	53                   	push   ebx
c0010ea9:	e8 be f8 fe ff       	call   c000076c <strlen>
c0010eae:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eb1:	89 c5                	mov    ebp,eax
c0010eb3:	e8 b4 f8 fe ff       	call   c000076c <strlen>
c0010eb8:	83 c4 10             	add    esp,0x10
c0010ebb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ebf:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ec4:	76 10                	jbe    c0010ed6 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	68 27 aa 02 c0       	push   0xc002aa27
c0010ece:	e8 d6 94 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0010ed3:	83 c4 10             	add    esp,0x10
c0010ed6:	50                   	push   eax
c0010ed7:	50                   	push   eax
c0010ed8:	57                   	push   edi
c0010ed9:	53                   	push   ebx
c0010eda:	e8 6d fa fe ff       	call   c000094c <strcat>
c0010edf:	83 c4 0c             	add    esp,0xc
c0010ee2:	68 96 00 00 00       	push   0x96
c0010ee7:	6a 00                	push   0x0
c0010ee9:	57                   	push   edi
c0010eea:	e8 61 f8 fe ff       	call   c0000750 <memset>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	83 ec 0c             	sub    esp,0xc
c0010ef5:	56                   	push   esi
c0010ef6:	e8 6d fa ff ff       	call   c0010968 <VgaText::doUpdate()>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	83 c4 1c             	add    esp,0x1c
c0010f01:	5b                   	pop    ebx
c0010f02:	5e                   	pop    esi
c0010f03:	5f                   	pop    edi
c0010f04:	5d                   	pop    ebp
c0010f05:	c3                   	ret    

c0010f06 <VgaText::write(unsigned long long, void*, int*)>:
c0010f06:	55                   	push   ebp
c0010f07:	57                   	push   edi
c0010f08:	56                   	push   esi
c0010f09:	53                   	push   ebx
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f11:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f19:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010f20:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f23:	39 eb                	cmp    ebx,ebp
c0010f25:	74 13                	je     c0010f3a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f27:	43                   	inc    ebx
c0010f28:	50                   	push   eax
c0010f29:	50                   	push   eax
c0010f2a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f2e:	50                   	push   eax
c0010f2f:	56                   	push   esi
c0010f30:	e8 13 fc ff ff       	call   c0010b48 <VgaText::putchar(char)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	eb e9                	jmp    c0010f23 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010f44:	56                   	push   esi
c0010f45:	e8 1e fa ff ff       	call   c0010968 <VgaText::doUpdate()>
c0010f4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f4e:	89 38                	mov    DWORD PTR [eax],edi
c0010f50:	83 c4 1c             	add    esp,0x1c
c0010f53:	31 c0                	xor    eax,eax
c0010f55:	5b                   	pop    ebx
c0010f56:	5e                   	pop    esi
c0010f57:	5f                   	pop    edi
c0010f58:	5d                   	pop    ebp
c0010f59:	c3                   	ret    

c0010f5a <newTerminal(char*)>:
c0010f5a:	83 ec 28             	sub    esp,0x28
c0010f5d:	68 c4 02 00 00       	push   0x2c4
c0010f62:	e8 4c ea ff ff       	call   c000f9b3 <malloc>
c0010f67:	5a                   	pop    edx
c0010f68:	59                   	pop    ecx
c0010f69:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f6d:	50                   	push   eax
c0010f6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f72:	e8 29 fd ff ff       	call   c0010ca0 <VgaText::VgaText(char const*)>
c0010f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f7b:	83 c4 2c             	add    esp,0x2c
c0010f7e:	c3                   	ret    
c0010f7f:	90                   	nop

c0010f80 <TSS::TSS()>:
c0010f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f8b:	90                   	nop
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop

c0010f8e <TSS::setESP(unsigned long)>:
c0010f8e:	55                   	push   ebp
c0010f8f:	89 e5                	mov    ebp,esp
c0010f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f9d:	90                   	nop
c0010f9e:	5d                   	pop    ebp
c0010f9f:	c3                   	ret    

c0010fa0 <TSS::flush()>:
c0010fa0:	55                   	push   ebp
c0010fa1:	89 e5                	mov    ebp,esp
c0010fa3:	83 ec 10             	sub    esp,0x10
c0010fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fab:	83 c8 03             	or     eax,0x3
c0010fae:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fb2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010fb6:	66 89 d0             	mov    ax,dx
c0010fb9:	0f 00 d8             	ltr    ax
c0010fbc:	90                   	nop
c0010fbd:	c9                   	leave  
c0010fbe:	c3                   	ret    
c0010fbf:	90                   	nop

c0010fc0 <TSS::setup(unsigned long, unsigned long)>:
c0010fc0:	55                   	push   ebp
c0010fc1:	89 e5                	mov    ebp,esp
c0010fc3:	83 ec 18             	sub    esp,0x18
c0010fc6:	83 ec 0c             	sub    esp,0xc
c0010fc9:	6a 68                	push   0x68
c0010fcb:	e8 e3 e9 ff ff       	call   c000f9b3 <malloc>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	89 c2                	mov    edx,eax
c0010fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe1:	83 ec 04             	sub    esp,0x4
c0010fe4:	6a 68                	push   0x68
c0010fe6:	6a 00                	push   0x0
c0010fe8:	50                   	push   eax
c0010fe9:	e8 62 f7 fe ff       	call   c0000750 <memset>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011003:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011012:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001102d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011066:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011072:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011088:	0f 20 da             	mov    edx,cr3
c001108b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001108e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011091:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109a:	83 ec 08             	sub    esp,0x8
c001109d:	50                   	push   eax
c001109e:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a1:	50                   	push   eax
c00110a2:	e8 b7 df ff ff       	call   c000f05e <GDTEntry::setBase(unsigned int)>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	6a 68                	push   0x68
c00110af:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110b2:	50                   	push   eax
c00110b3:	e8 c2 df ff ff       	call   c000f07a <GDTEntry::setLimit(unsigned int)>
c00110b8:	83 c4 10             	add    esp,0x10
c00110bb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110bf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110c2:	83 e0 0f             	and    eax,0xf
c00110c5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110c8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110cb:	83 c8 40             	or     eax,0x40
c00110ce:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110d1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00110d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110dc:	05 78 01 00 00       	add    eax,0x178
c00110e1:	83 ec 04             	sub    esp,0x4
c00110e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110e7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110ea:	50                   	push   eax
c00110eb:	e8 be df ff ff       	call   c000f0ae <GDT::addEntry(GDTEntry)>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	89 c2                	mov    edx,eax
c00110f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f8:	89 10                	mov    DWORD PTR [eax],edx
c00110fa:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00110ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011105:	05 78 01 00 00       	add    eax,0x178
c001110a:	83 ec 0c             	sub    esp,0xc
c001110d:	50                   	push   eax
c001110e:	e8 c5 df ff ff       	call   c000f0d8 <GDT::flush()>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011119:	8b 00                	mov    eax,DWORD PTR [eax]
c001111b:	c9                   	leave  
c001111c:	c3                   	ret    
c001111d:	90                   	nop

c001111e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001111e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011126:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011129:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001112e:	75 08                	jne    c0011138 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011130:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011136:	eb 38                	jmp    c0011170 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011138:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001113d:	75 17                	jne    c0011156 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001113f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011144:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011147:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001114d:	8b 10                	mov    edx,DWORD PTR [eax]
c001114f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011153:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011156:	89 c1                	mov    ecx,eax
c0011158:	83 e1 fd             	and    ecx,0xfffffffd
c001115b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011161:	74 cd                	je     c0011130 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011163:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011168:	83 e0 ef             	and    eax,0xffffffef
c001116b:	83 f8 08             	cmp    eax,0x8
c001116e:	76 c0                	jbe    c0011130 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011170:	31 c0                	xor    eax,eax
c0011172:	c3                   	ret    
c0011173:	90                   	nop

c0011174 <ReservedFilename::isAtty()>:
c0011174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011178:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001117b:	31 c0                	xor    eax,eax
c001117d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011183:	74 09                	je     c001118e <ReservedFilename::isAtty()+0x1a>
c0011185:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001118b:	0f 94 c0             	sete   al
c001118e:	c3                   	ret    
c001118f:	90                   	nop

c0011190 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011194:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001119f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111a4:	75 08                	jne    c00111ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111ac:	eb 3d                	jmp    c00111eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111b3:	75 17                	jne    c00111cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00111c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111d1:	75 04                	jne    c00111d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111d3:	89 0a                	mov    DWORD PTR [edx],ecx
c00111d5:	eb 14                	jmp    c00111eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111dc:	74 c8                	je     c00111a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111e3:	83 e0 ef             	and    eax,0xffffffef
c00111e6:	83 f8 08             	cmp    eax,0x8
c00111e9:	76 bb                	jbe    c00111a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111eb:	31 c0                	xor    eax,eax
c00111ed:	c3                   	ret    

c00111ee <UnixFile::getFileDescriptor()>:
c00111ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f5:	c3                   	ret    

c00111f6 <UnixFile::UnixFile(int)>:
c00111f6:	53                   	push   ebx
c00111f7:	83 ec 28             	sub    esp,0x28
c00111fa:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c00111ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011203:	89 10                	mov    DWORD PTR [eax],edx
c0011205:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001120d:	0f 8f 8c 01 00 00    	jg     c001139f <UnixFile::UnixFile(int)+0x1a9>
c0011213:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0011218:	8d 50 01             	lea    edx,[eax+0x1]
c001121b:	89 15 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,edx
c0011221:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011225:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011228:	83 ec 08             	sub    esp,0x8
c001122b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001122f:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011234:	e8 1d 79 01 00       	call   c0028b56 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	a0 b4 e7 02 c0       	mov    al,ds:0xc002e7b4
c0011241:	83 f0 01             	xor    eax,0x1
c0011244:	84 c0                	test   al,al
c0011246:	0f 84 54 01 00 00    	je     c00113a0 <UnixFile::UnixFile(int)+0x1aa>
c001124c:	c6 05 b4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7b4,0x1
c0011253:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001125b:	83 ec 0c             	sub    esp,0xc
c001125e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011262:	e8 4c e7 ff ff       	call   c000f9b3 <malloc>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	89 c3                	mov    ebx,eax
c001126c:	83 ec 08             	sub    esp,0x8
c001126f:	68 03 ff ff 0f       	push   0xfffff03
c0011274:	53                   	push   ebx
c0011275:	e8 2c 01 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	89 1d ac e7 02 c0    	mov    DWORD PTR ds:0xc002e7ac,ebx
c0011283:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011292:	e8 1c e7 ff ff       	call   c000f9b3 <malloc>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	89 c3                	mov    ebx,eax
c001129c:	83 ec 08             	sub    esp,0x8
c001129f:	68 01 ff ff 0f       	push   0xfffff01
c00112a4:	53                   	push   ebx
c00112a5:	e8 fc 00 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	89 1d b0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7b0,ebx
c00112b3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112c2:	e8 ec e6 ff ff       	call   c000f9b3 <malloc>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	89 c3                	mov    ebx,eax
c00112cc:	83 ec 08             	sub    esp,0x8
c00112cf:	68 00 ff ff 0f       	push   0xfffff00
c00112d4:	53                   	push   ebx
c00112d5:	e8 cc 00 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c00112da:	83 c4 10             	add    esp,0x10
c00112dd:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c00112e3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00112eb:	83 ec 0c             	sub    esp,0xc
c00112ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112f2:	e8 bc e6 ff ff       	call   c000f9b3 <malloc>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	89 c3                	mov    ebx,eax
c00112fc:	83 ec 08             	sub    esp,0x8
c00112ff:	68 02 ff ff 0f       	push   0xfffff02
c0011304:	53                   	push   ebx
c0011305:	e8 9c 00 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	89 1d a8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a8,ebx
c0011313:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001131b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011320:	7f 7e                	jg     c00113a0 <UnixFile::UnixFile(int)+0x1aa>
c0011322:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011331:	e8 7d e6 ff ff       	call   c000f9b3 <malloc>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	89 c3                	mov    ebx,eax
c001133b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001133f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	50                   	push   eax
c0011348:	53                   	push   ebx
c0011349:	e8 58 00 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011355:	89 1c 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],ebx
c001135c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001136b:	e8 43 e6 ff ff       	call   c000f9b3 <malloc>
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	89 c3                	mov    ebx,eax
c0011375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011379:	05 20 ff ff 0f       	add    eax,0xfffff20
c001137e:	83 ec 08             	sub    esp,0x8
c0011381:	50                   	push   eax
c0011382:	53                   	push   ebx
c0011383:	e8 1e 00 00 00       	call   c00113a6 <ReservedFilename::ReservedFilename(int)>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001138f:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c0011396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001139a:	e9 7c ff ff ff       	jmp    c001131b <UnixFile::UnixFile(int)+0x125>
c001139f:	90                   	nop
c00113a0:	83 c4 28             	add    esp,0x28
c00113a3:	5b                   	pop    ebx
c00113a4:	c3                   	ret    
c00113a5:	90                   	nop

c00113a6 <ReservedFilename::ReservedFilename(int)>:
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ad:	83 ec 08             	sub    esp,0x8
c00113b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b4:	50                   	push   eax
c00113b5:	e8 3c fe ff ff       	call   c00111f6 <UnixFile::UnixFile(int)>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c00113c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c6:	89 10                	mov    DWORD PTR [eax],edx
c00113c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113d3:	90                   	nop
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	c3                   	ret    

c00113d8 <UnixFile::~UnixFile()>:
c00113d8:	83 ec 1c             	sub    esp,0x1c
c00113db:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c00113e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113e4:	89 10                	mov    DWORD PTR [eax],edx
c00113e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00113f2:	7f 73                	jg     c0011467 <UnixFile::~UnixFile()+0x8f>
c00113f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011404:	e8 21 78 01 00       	call   c0028c2a <LinkedList<UnixFile>::getFirstElement()>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011418:	e8 15 78 01 00       	call   c0028c32 <LinkedList<UnixFile>::removeFirst()>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011424:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011428:	74 40                	je     c001146a <UnixFile::~UnixFile()+0x92>
c001142a:	83 ec 08             	sub    esp,0x8
c001142d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011431:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011436:	e8 1b 77 01 00       	call   c0028b56 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001143b:	83 c4 10             	add    esp,0x10
c001143e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011442:	8d 50 01             	lea    edx,[eax+0x1]
c0011445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011449:	3d 88 13 00 00       	cmp    eax,0x1388
c001144e:	0f 94 c0             	sete   al
c0011451:	84 c0                	test   al,al
c0011453:	74 a7                	je     c00113fc <UnixFile::~UnixFile()+0x24>
c0011455:	83 ec 0c             	sub    esp,0xc
c0011458:	68 1c ab 02 c0       	push   0xc002ab1c
c001145d:	e8 47 8f 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	eb 95                	jmp    c00113fc <UnixFile::~UnixFile()+0x24>
c0011467:	90                   	nop
c0011468:	eb 01                	jmp    c001146b <UnixFile::~UnixFile()+0x93>
c001146a:	90                   	nop
c001146b:	90                   	nop
c001146c:	83 c4 1c             	add    esp,0x1c
c001146f:	c3                   	ret    

c0011470 <UnixFile::~UnixFile()>:
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147a:	e8 59 ff ff ff       	call   c00113d8 <UnixFile::~UnixFile()>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	83 ec 08             	sub    esp,0x8
c0011485:	6a 0c                	push   0xc
c0011487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148b:	e8 a3 14 00 00       	call   c0012933 <operator delete(void*, unsigned long)>
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	83 c4 0c             	add    esp,0xc
c0011496:	c3                   	ret    
c0011497:	90                   	nop

c0011498 <ReservedFilename::~ReservedFilename()>:
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	ba 60 ab 02 c0       	mov    edx,0xc002ab60
c00114a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a4:	89 10                	mov    DWORD PTR [eax],edx
c00114a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	50                   	push   eax
c00114ae:	e8 25 ff ff ff       	call   c00113d8 <UnixFile::~UnixFile()>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	90                   	nop
c00114b7:	83 c4 0c             	add    esp,0xc
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <ReservedFilename::~ReservedFilename()>:
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c6:	e8 cd ff ff ff       	call   c0011498 <ReservedFilename::~ReservedFilename()>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	83 ec 08             	sub    esp,0x8
c00114d1:	6a 0c                	push   0xc
c00114d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d7:	e8 57 14 00 00       	call   c0012933 <operator delete(void*, unsigned long)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	83 c4 0c             	add    esp,0xc
c00114e2:	c3                   	ret    

c00114e3 <getFromFileDescriptor(int)>:
c00114e3:	53                   	push   ebx
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00114f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00114f7:	7f 2c                	jg     c0011525 <getFromFileDescriptor(int)+0x42>
c00114f9:	83 ec 0c             	sub    esp,0xc
c00114fc:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011501:	e8 24 77 01 00       	call   c0028c2a <LinkedList<UnixFile>::getFirstElement()>
c0011506:	83 c4 10             	add    esp,0x10
c0011509:	85 c0                	test   eax,eax
c001150b:	75 04                	jne    c0011511 <getFromFileDescriptor(int)+0x2e>
c001150d:	31 c0                	xor    eax,eax
c001150f:	eb 6e                	jmp    c001157f <getFromFileDescriptor(int)+0x9c>
c0011511:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011514:	74 69                	je     c001157f <getFromFileDescriptor(int)+0x9c>
c0011516:	52                   	push   edx
c0011517:	52                   	push   edx
c0011518:	50                   	push   eax
c0011519:	68 b8 e7 02 c0       	push   0xc002e7b8
c001151e:	e8 b1 77 01 00       	call   c0028cd4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011523:	eb e1                	jmp    c0011506 <getFromFileDescriptor(int)+0x23>
c0011525:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c001152a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011530:	74 4d                	je     c001157f <getFromFileDescriptor(int)+0x9c>
c0011532:	a1 b0 e7 02 c0       	mov    eax,ds:0xc002e7b0
c0011537:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001153d:	74 40                	je     c001157f <getFromFileDescriptor(int)+0x9c>
c001153f:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0011544:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001154a:	74 33                	je     c001157f <getFromFileDescriptor(int)+0x9c>
c001154c:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c0011551:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011557:	74 26                	je     c001157f <getFromFileDescriptor(int)+0x9c>
c0011559:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001155f:	83 f8 08             	cmp    eax,0x8
c0011562:	77 09                	ja     c001156d <getFromFileDescriptor(int)+0x8a>
c0011564:	8b 04 85 80 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1880]
c001156b:	eb 12                	jmp    c001157f <getFromFileDescriptor(int)+0x9c>
c001156d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011573:	83 fb 08             	cmp    ebx,0x8
c0011576:	77 95                	ja     c001150d <getFromFileDescriptor(int)+0x2a>
c0011578:	8b 04 9d 40 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd18c0]
c001157f:	83 c4 08             	add    esp,0x8
c0011582:	5b                   	pop    ebx
c0011583:	c3                   	ret    

c0011584 <__static_initialization_and_destruction_0(int, int)>:
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001158c:	75 34                	jne    c00115c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001158e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011596:	75 2a                	jne    c00115c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011598:	83 ec 0c             	sub    esp,0xc
c001159b:	68 b8 e7 02 c0       	push   0xc002e7b8
c00115a0:	e8 6f 75 01 00       	call   c0028b14 <LinkedList<UnixFile>::LinkedList()>
c00115a5:	83 c4 10             	add    esp,0x10
c00115a8:	83 ec 04             	sub    esp,0x4
c00115ab:	68 24 d4 02 c0       	push   0xc002d424
c00115b0:	68 b8 e7 02 c0       	push   0xc002e7b8
c00115b5:	68 12 8b 02 c0       	push   0xc0028b12
c00115ba:	e8 ee 12 00 00       	call   c00128ad <__cxa_atexit>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	90                   	nop
c00115c3:	83 c4 0c             	add    esp,0xc
c00115c6:	c3                   	ret    

c00115c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	83 ec 08             	sub    esp,0x8
c00115cd:	68 ff ff 00 00       	push   0xffff
c00115d2:	6a 01                	push   0x1
c00115d4:	e8 ab ff ff ff       	call   c0011584 <__static_initialization_and_destruction_0(int, int)>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	83 c4 0c             	add    esp,0xc
c00115df:	c3                   	ret    

c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115e0:	53                   	push   ebx
c00115e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00115e9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00115ef:	89 c8                	mov    eax,ecx
c00115f1:	d1 e8                	shr    eax,1
c00115f3:	03 05 08 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d608
c00115f9:	83 e1 01             	and    ecx,0x1
c00115fc:	8a 10                	mov    dl,BYTE PTR [eax]
c00115fe:	75 09                	jne    c0011609 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011600:	83 e2 f0             	and    edx,0xfffffff0
c0011603:	09 da                	or     edx,ebx
c0011605:	88 10                	mov    BYTE PTR [eax],dl
c0011607:	5b                   	pop    ebx
c0011608:	c3                   	ret    
c0011609:	c1 e3 04             	shl    ebx,0x4
c001160c:	83 e2 0f             	and    edx,0xf
c001160f:	09 da                	or     edx,ebx
c0011611:	88 10                	mov    BYTE PTR [eax],dl
c0011613:	5b                   	pop    ebx
c0011614:	c3                   	ret    

c0011615 <Virt::getPageState(unsigned long)>:
c0011615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011619:	8b 0d 08 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d608
c001161f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011625:	89 d0                	mov    eax,edx
c0011627:	d1 e8                	shr    eax,1
c0011629:	83 e2 01             	and    edx,0x1
c001162c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001162f:	75 04                	jne    c0011635 <Virt::getPageState(unsigned long)+0x20>
c0011631:	83 e0 0f             	and    eax,0xf
c0011634:	c3                   	ret    
c0011635:	c0 e8 04             	shr    al,0x4
c0011638:	c3                   	ret    

c0011639 <Virt::allocateKernelVirtualPages(int)>:
c0011639:	55                   	push   ebp
c001163a:	31 ed                	xor    ebp,ebp
c001163c:	57                   	push   edi
c001163d:	56                   	push   esi
c001163e:	53                   	push   ebx
c001163f:	31 db                	xor    ebx,ebx
c0011641:	83 ec 1c             	sub    esp,0x1c
c0011644:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011648:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c001164e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011653:	57                   	push   edi
c0011654:	e8 bc ff ff ff       	call   c0011615 <Virt::getPageState(unsigned long)>
c0011659:	5a                   	pop    edx
c001165a:	84 c0                	test   al,al
c001165c:	75 3a                	jne    c0011698 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001165e:	85 db                	test   ebx,ebx
c0011660:	75 02                	jne    c0011664 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011662:	89 fd                	mov    ebp,edi
c0011664:	43                   	inc    ebx
c0011665:	39 f3                	cmp    ebx,esi
c0011667:	74 5a                	je     c00116c3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011669:	47                   	inc    edi
c001166a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011670:	76 31                	jbe    c00116a3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011672:	c7 05 04 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d604,0xc8000
c001167c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011681:	75 28                	jne    c00116ab <Virt::allocateKernelVirtualPages(int)+0x72>
c0011683:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011688:	bf 00 80 0c 00       	mov    edi,0xc8000
c001168d:	57                   	push   edi
c001168e:	e8 82 ff ff ff       	call   c0011615 <Virt::getPageState(unsigned long)>
c0011693:	5a                   	pop    edx
c0011694:	84 c0                	test   al,al
c0011696:	74 c6                	je     c001165e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011698:	31 db                	xor    ebx,ebx
c001169a:	47                   	inc    edi
c001169b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116a1:	77 cf                	ja     c0011672 <Virt::allocateKernelVirtualPages(int)+0x39>
c00116a3:	89 3d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edi
c00116a9:	eb a8                	jmp    c0011653 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	68 74 ab 02 c0       	push   0xc002ab74
c00116b3:	e8 f1 8c 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00116b8:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c00116be:	83 c4 10             	add    esp,0x10
c00116c1:	eb 90                	jmp    c0011653 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116c3:	89 2d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,ebp
c00116c9:	4b                   	dec    ebx
c00116ca:	74 5f                	je     c001172b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116cc:	85 f6                	test   esi,esi
c00116ce:	74 3d                	je     c001170d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116d0:	89 e8                	mov    eax,ebp
c00116d2:	31 db                	xor    ebx,ebx
c00116d4:	8d 7e ff             	lea    edi,[esi-0x1]
c00116d7:	eb 14                	jmp    c00116ed <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116d9:	6a 01                	push   0x1
c00116db:	43                   	inc    ebx
c00116dc:	50                   	push   eax
c00116dd:	e8 fe fe ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e2:	58                   	pop    eax
c00116e3:	39 f3                	cmp    ebx,esi
c00116e5:	5a                   	pop    edx
c00116e6:	74 25                	je     c001170d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116e8:	a1 04 d6 02 c0       	mov    eax,ds:0xc002d604
c00116ed:	8d 50 01             	lea    edx,[eax+0x1]
c00116f0:	85 db                	test   ebx,ebx
c00116f2:	89 15 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edx
c00116f8:	74 20                	je     c001171a <Virt::allocateKernelVirtualPages(int)+0xe1>
c00116fa:	39 df                	cmp    edi,ebx
c00116fc:	75 db                	jne    c00116d9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00116fe:	6a 03                	push   0x3
c0011700:	43                   	inc    ebx
c0011701:	50                   	push   eax
c0011702:	e8 d9 fe ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011707:	59                   	pop    ecx
c0011708:	39 f3                	cmp    ebx,esi
c001170a:	58                   	pop    eax
c001170b:	75 db                	jne    c00116e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001170d:	83 c4 1c             	add    esp,0x1c
c0011710:	89 e8                	mov    eax,ebp
c0011712:	5b                   	pop    ebx
c0011713:	c1 e0 0c             	shl    eax,0xc
c0011716:	5e                   	pop    esi
c0011717:	5f                   	pop    edi
c0011718:	5d                   	pop    ebp
c0011719:	c3                   	ret    
c001171a:	6a 02                	push   0x2
c001171c:	bb 01 00 00 00       	mov    ebx,0x1
c0011721:	50                   	push   eax
c0011722:	e8 b9 fe ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011727:	58                   	pop    eax
c0011728:	5a                   	pop    edx
c0011729:	eb bd                	jmp    c00116e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001172b:	6a 04                	push   0x4
c001172d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011730:	55                   	push   ebp
c0011731:	a3 04 d6 02 c0       	mov    ds:0xc002d604,eax
c0011736:	e8 a5 fe ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001173b:	59                   	pop    ecx
c001173c:	89 e8                	mov    eax,ebp
c001173e:	5b                   	pop    ebx
c001173f:	c1 e0 0c             	shl    eax,0xc
c0011742:	83 c4 1c             	add    esp,0x1c
c0011745:	5b                   	pop    ebx
c0011746:	5e                   	pop    esi
c0011747:	5f                   	pop    edi
c0011748:	5d                   	pop    ebp
c0011749:	c3                   	ret    

c001174a <Virt::freeSwapfilePage(unsigned long)>:
c001174a:	53                   	push   ebx
c001174b:	8b 15 cc e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7cc
c0011751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011755:	b8 01 00 00 00       	mov    eax,0x1
c001175a:	89 cb                	mov    ebx,ecx
c001175c:	d3 e0                	shl    eax,cl
c001175e:	c1 eb 05             	shr    ebx,0x5
c0011761:	f7 d0                	not    eax
c0011763:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011766:	5b                   	pop    ebx
c0011767:	c3                   	ret    

c0011768 <Virt::swapIDToSector(unsigned long)>:
c0011768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176c:	0f af 05 0c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d60c
c0011773:	03 05 14 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d614
c0011779:	c3                   	ret    

c001177a <Virt::allocateSwapfilePage()>:
c001177a:	55                   	push   ebp
c001177b:	31 d2                	xor    edx,edx
c001177d:	57                   	push   edi
c001177e:	56                   	push   esi
c001177f:	53                   	push   ebx
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	8b 0d 0c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d60c
c0011789:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c001178e:	f7 f1                	div    ecx
c0011790:	39 0d 10 d6 02 c0    	cmp    DWORD PTR ds:0xc002d610,ecx
c0011796:	72 2d                	jb     c00117c5 <Virt::allocateSwapfilePage()+0x4b>
c0011798:	8b 35 cc e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7cc
c001179e:	8b 16                	mov    edx,DWORD PTR [esi]
c00117a0:	f6 c2 01             	test   dl,0x1
c00117a3:	74 3c                	je     c00117e1 <Virt::allocateSwapfilePage()+0x67>
c00117a5:	31 c9                	xor    ecx,ecx
c00117a7:	bf 01 00 00 00       	mov    edi,0x1
c00117ac:	eb 12                	jmp    c00117c0 <Virt::allocateSwapfilePage()+0x46>
c00117ae:	89 fd                	mov    ebp,edi
c00117b0:	89 ca                	mov    edx,ecx
c00117b2:	d3 e5                	shl    ebp,cl
c00117b4:	c1 ea 05             	shr    edx,0x5
c00117b7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00117ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c00117bc:	85 ea                	test   edx,ebp
c00117be:	74 2a                	je     c00117ea <Virt::allocateSwapfilePage()+0x70>
c00117c0:	41                   	inc    ecx
c00117c1:	39 c8                	cmp    eax,ecx
c00117c3:	77 e9                	ja     c00117ae <Virt::allocateSwapfilePage()+0x34>
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	68 54 ad 02 c0       	push   0xc002ad54
c00117cd:	e8 d7 8b 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00117d2:	83 c4 10             	add    esp,0x10
c00117d5:	31 c9                	xor    ecx,ecx
c00117d7:	83 c4 0c             	add    esp,0xc
c00117da:	89 c8                	mov    eax,ecx
c00117dc:	5b                   	pop    ebx
c00117dd:	5e                   	pop    esi
c00117de:	5f                   	pop    edi
c00117df:	5d                   	pop    ebp
c00117e0:	c3                   	ret    
c00117e1:	89 f3                	mov    ebx,esi
c00117e3:	bd 01 00 00 00       	mov    ebp,0x1
c00117e8:	31 c9                	xor    ecx,ecx
c00117ea:	09 ea                	or     edx,ebp
c00117ec:	89 c8                	mov    eax,ecx
c00117ee:	89 13                	mov    DWORD PTR [ebx],edx
c00117f0:	83 c4 0c             	add    esp,0xc
c00117f3:	5b                   	pop    ebx
c00117f4:	5e                   	pop    esi
c00117f5:	5f                   	pop    edi
c00117f6:	5d                   	pop    ebp
c00117f7:	c3                   	ret    

c00117f8 <Virt::virtualMemorySetup()>:
c00117f8:	53                   	push   ebx
c00117f9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117fe:	6a 0f                	push   0xf
c0011800:	53                   	push   ebx
c0011801:	43                   	inc    ebx
c0011802:	e8 d9 fd ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011807:	58                   	pop    eax
c0011808:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001180e:	5a                   	pop    edx
c001180f:	75 ed                	jne    c00117fe <Virt::virtualMemorySetup()+0x6>
c0011811:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011816:	6a 00                	push   0x0
c0011818:	53                   	push   ebx
c0011819:	43                   	inc    ebx
c001181a:	e8 c1 fd ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001181f:	59                   	pop    ecx
c0011820:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011826:	58                   	pop    eax
c0011827:	75 ed                	jne    c0011816 <Virt::virtualMemorySetup()+0x1e>
c0011829:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001182e:	6a 0f                	push   0xf
c0011830:	53                   	push   ebx
c0011831:	43                   	inc    ebx
c0011832:	e8 a9 fd ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011837:	58                   	pop    eax
c0011838:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001183e:	5a                   	pop    edx
c001183f:	75 ed                	jne    c001182e <Virt::virtualMemorySetup()+0x36>
c0011841:	5b                   	pop    ebx
c0011842:	c3                   	ret    

c0011843 <Virt::setupPageSwapping(int)>:
c0011843:	53                   	push   ebx
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001184b:	a1 68 ec 02 c0       	mov    eax,ds:0xc002ec68
c0011850:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011856:	8b 10                	mov    edx,DWORD PTR [eax]
c0011858:	53                   	push   ebx
c0011859:	c1 e3 0b             	shl    ebx,0xb
c001185c:	68 6b ad 02 c0       	push   0xc002ad6b
c0011861:	50                   	push   eax
c0011862:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011865:	89 1d 10 d6 02 c0    	mov    DWORD PTR ds:0xc002d610,ebx
c001186b:	c6 05 18 d6 02 c0 43 	mov    BYTE PTR ds:0xc002d618,0x43
c0011872:	c1 eb 08             	shr    ebx,0x8
c0011875:	a3 14 d6 02 c0       	mov    ds:0xc002d614,eax
c001187a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001187d:	c7 05 0c d6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d60c,0x8
c0011887:	e8 27 e1 ff ff       	call   c000f9b3 <malloc>
c001188c:	83 c4 0c             	add    esp,0xc
c001188f:	89 c1                	mov    ecx,eax
c0011891:	a3 cc e7 02 c0       	mov    ds:0xc002e7cc,eax
c0011896:	31 d2                	xor    edx,edx
c0011898:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c001189d:	f7 35 0c d6 02 c0    	div    DWORD PTR ds:0xc002d60c
c00118a3:	c1 e8 05             	shr    eax,0x5
c00118a6:	50                   	push   eax
c00118a7:	6a 00                	push   0x0
c00118a9:	51                   	push   ecx
c00118aa:	e8 a1 ee fe ff       	call   c0000750 <memset>
c00118af:	83 c4 18             	add    esp,0x18
c00118b2:	5b                   	pop    ebx
c00118b3:	c3                   	ret    

c00118b4 <VAS::VAS()>:
c00118b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ce:	a3 d0 e7 02 c0       	mov    ds:0xc002e7d0,eax
c00118d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118df:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00118e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00118ed:	90                   	nop
c00118ee:	c3                   	ret    
c00118ef:	90                   	nop

c00118f0 <VAS::VAS(VAS*)>:
c00118f0:	83 ec 0c             	sub    esp,0xc
c00118f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011902:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	68 94 ab 02 c0       	push   0xc002ab94
c0011911:	e8 93 8a 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	90                   	nop
c001191a:	83 c4 0c             	add    esp,0xc
c001191d:	c3                   	ret    

c001191e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001191e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011922:	89 c2                	mov    edx,eax
c0011924:	c1 e8 0a             	shr    eax,0xa
c0011927:	c1 ea 16             	shr    edx,0x16
c001192a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001192f:	19 c9                	sbb    ecx,ecx
c0011931:	c1 e2 0c             	shl    edx,0xc
c0011934:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001193a:	25 fc 0f 00 00       	and    eax,0xffc
c001193f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011946:	01 d0                	add    eax,edx
c0011948:	c3                   	ret    
c0011949:	90                   	nop

c001194a <VAS::getPageTableEntry(unsigned long)>:
c001194a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001194e:	89 ca                	mov    edx,ecx
c0011950:	c1 e9 0a             	shr    ecx,0xa
c0011953:	c1 ea 16             	shr    edx,0x16
c0011956:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001195c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011962:	c1 e0 0c             	shl    eax,0xc
c0011965:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011968:	c3                   	ret    

c0011969 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011969:	57                   	push   edi
c001196a:	56                   	push   esi
c001196b:	be 01 00 00 00       	mov    esi,0x1
c0011970:	53                   	push   ebx
c0011971:	83 ec 10             	sub    esp,0x10
c0011974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011978:	c1 eb 0c             	shr    ebx,0xc
c001197b:	eb 3f                	jmp    c00119bc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001197d:	83 ec 08             	sub    esp,0x8
c0011980:	57                   	push   edi
c0011981:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c0011987:	e8 be ff ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c001198c:	83 c4 10             	add    esp,0x10
c001198f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011991:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011995:	f6 c4 04             	test   ah,0x4
c0011998:	75 5f                	jne    c00119f9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001199a:	80 fa 04             	cmp    dl,0x4
c001199d:	74 78                	je     c0011a17 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001199f:	80 fa 02             	cmp    dl,0x2
c00119a2:	0f 84 88 00 00 00    	je     c0011a30 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119a8:	80 fa 03             	cmp    dl,0x3
c00119ab:	0f 84 ad 00 00 00    	je     c0011a5e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119b1:	fe ca                	dec    dl
c00119b3:	0f 84 92 00 00 00    	je     c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119b9:	43                   	inc    ebx
c00119ba:	31 f6                	xor    esi,esi
c00119bc:	53                   	push   ebx
c00119bd:	89 df                	mov    edi,ebx
c00119bf:	e8 51 fc ff ff       	call   c0011615 <Virt::getPageState(unsigned long)>
c00119c4:	c1 e7 0c             	shl    edi,0xc
c00119c7:	59                   	pop    ecx
c00119c8:	84 c0                	test   al,al
c00119ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119ce:	75 ad                	jne    c001197d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 82 ad 02 c0       	push   0xc002ad82
c00119d8:	e8 cc 89 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00119dd:	58                   	pop    eax
c00119de:	5a                   	pop    edx
c00119df:	57                   	push   edi
c00119e0:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c00119e6:	e8 5f ff ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00119f0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119f4:	f6 c4 04             	test   ah,0x4
c00119f7:	74 c0                	je     c00119b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119f9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00119fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	50                   	push   eax
c0011a06:	e8 33 e3 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a12:	80 fa 04             	cmp    dl,0x4
c0011a15:	75 88                	jne    c001199f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a17:	89 f0                	mov    eax,esi
c0011a19:	84 c0                	test   al,al
c0011a1b:	75 47                	jne    c0011a64 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a1d:	c7 44 24 20 b8 ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002abb8
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	5b                   	pop    ebx
c0011a29:	5e                   	pop    esi
c0011a2a:	5f                   	pop    edi
c0011a2b:	e9 79 89 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c0011a30:	89 f0                	mov    eax,esi
c0011a32:	84 c0                	test   al,al
c0011a34:	75 15                	jne    c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a36:	83 ec 0c             	sub    esp,0xc
c0011a39:	68 9e ad 02 c0       	push   0xc002ad9e
c0011a3e:	e8 66 89 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	e9 6e ff ff ff       	jmp    c00119b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a4b:	83 ec 08             	sub    esp,0x8
c0011a4e:	6a 00                	push   0x0
c0011a50:	53                   	push   ebx
c0011a51:	e8 8a fb ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	e9 5b ff ff ff       	jmp    c00119b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a5e:	89 f0                	mov    eax,esi
c0011a60:	84 c0                	test   al,al
c0011a62:	75 15                	jne    c0011a79 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a64:	83 ec 08             	sub    esp,0x8
c0011a67:	6a 00                	push   0x0
c0011a69:	53                   	push   ebx
c0011a6a:	e8 71 fb ff ff       	call   c00115e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	5b                   	pop    ebx
c0011a76:	5e                   	pop    esi
c0011a77:	5f                   	pop    edi
c0011a78:	c3                   	ret    
c0011a79:	c7 44 24 20 ba ad 02 c0 	mov    DWORD PTR [esp+0x20],0xc002adba
c0011a81:	83 c4 10             	add    esp,0x10
c0011a84:	5b                   	pop    ebx
c0011a85:	5e                   	pop    esi
c0011a86:	5f                   	pop    edi
c0011a87:	e9 1d 89 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>

c0011a8c <VAS::freeAllocatedPages(unsigned long)>:
c0011a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a94:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011a98:	74 09                	je     c0011aa3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011a9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a9e:	e9 c6 fe ff ff       	jmp    c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aa3:	c7 44 24 04 dc ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002abdc
c0011aab:	e9 5b 0f 00 00       	jmp    c0012a0b <Dbg::kprintf(char const*, ...)>

c0011ab0 <VAS::virtualToPhysical(unsigned long)>:
c0011ab0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ab4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ab8:	e8 8d fe ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c0011abd:	5a                   	pop    edx
c0011abe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac0:	59                   	pop    ecx
c0011ac1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ac6:	c3                   	ret    
c0011ac7:	90                   	nop

c0011ac8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ac8:	55                   	push   ebp
c0011ac9:	57                   	push   edi
c0011aca:	56                   	push   esi
c0011acb:	53                   	push   ebx
c0011acc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011ad0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ad4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ad8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011adc:	85 db                	test   ebx,ebx
c0011ade:	7e 22                	jle    c0011b02 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ae0:	c1 e3 0c             	shl    ebx,0xc
c0011ae3:	01 f3                	add    ebx,esi
c0011ae5:	56                   	push   esi
c0011ae6:	81 c6 00 10 00 00    	add    esi,0x1000
c0011aec:	55                   	push   ebp
c0011aed:	e8 58 fe ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c0011af2:	5a                   	pop    edx
c0011af3:	59                   	pop    ecx
c0011af4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011af6:	21 f9                	and    ecx,edi
c0011af8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011afc:	39 f3                	cmp    ebx,esi
c0011afe:	89 08                	mov    DWORD PTR [eax],ecx
c0011b00:	75 e3                	jne    c0011ae5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b02:	5b                   	pop    ebx
c0011b03:	5e                   	pop    esi
c0011b04:	5f                   	pop    edi
c0011b05:	5d                   	pop    ebp
c0011b06:	c3                   	ret    
c0011b07:	90                   	nop

c0011b08 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b08:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011b0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b13:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b1a:	75 01                	jne    c0011b1d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b1c:	c3                   	ret    
c0011b1d:	68 80 00 00 00       	push   0x80
c0011b22:	6a ff                	push   0xffffffff
c0011b24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b30:	e8 93 ff ff ff       	call   c0011ac8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b35:	83 c4 14             	add    esp,0x14
c0011b38:	c3                   	ret    
c0011b39:	90                   	nop

c0011b3a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b3a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b43:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b4d:	19 c0                	sbb    eax,eax
c0011b4f:	83 ca 03             	or     edx,0x3
c0011b52:	83 e0 fc             	and    eax,0xfffffffc
c0011b55:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b5c:	0f 20 d8             	mov    eax,cr3
c0011b5f:	0f 22 d8             	mov    cr3,eax
c0011b62:	c3                   	ret    
c0011b63:	90                   	nop

c0011b64 <VAS::~VAS()>:
c0011b64:	83 ec 2c             	sub    esp,0x2c
c0011b67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b6f:	fa                   	cli    
c0011b70:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011b75:	40                   	inc    eax
c0011b76:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0011b7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b85:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011b8f:	6a 01                	push   0x1
c0011b91:	50                   	push   eax
c0011b92:	e8 a3 ff ff ff       	call   c0011b3a <VAS::mapOtherVASIn(bool, VAS*)>
c0011b97:	83 c4 0c             	add    esp,0xc
c0011b9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ba2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011baa:	0f 8f d4 00 00 00    	jg     c0011c84 <VAS::~VAS()+0x120>
c0011bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bbb:	c1 e2 02             	shl    edx,0x2
c0011bbe:	01 d0                	add    eax,edx
c0011bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bca:	83 e0 01             	and    eax,0x1
c0011bcd:	0f 84 a8 00 00 00    	je     c0011c7b <VAS::~VAS()+0x117>
c0011bd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bdb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011be3:	7f 72                	jg     c0011c57 <VAS::~VAS()+0xf3>
c0011be5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011be9:	c1 e0 0a             	shl    eax,0xa
c0011bec:	89 c2                	mov    edx,eax
c0011bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bf2:	01 d0                	add    eax,edx
c0011bf4:	c1 e0 0c             	shl    eax,0xc
c0011bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c05:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c0f:	6a 01                	push   0x1
c0011c11:	50                   	push   eax
c0011c12:	e8 07 fd ff ff       	call   c001191e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c17:	83 c4 0c             	add    esp,0xc
c0011c1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c2c:	25 01 04 00 00       	and    eax,0x401
c0011c31:	3d 01 04 00 00       	cmp    eax,0x401
c0011c36:	75 19                	jne    c0011c51 <VAS::~VAS()+0xed>
c0011c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c41:	83 ec 0c             	sub    esp,0xc
c0011c44:	50                   	push   eax
c0011c45:	e8 f4 e0 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c51:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c55:	eb 84                	jmp    c0011bdb <VAS::~VAS()+0x77>
c0011c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5b:	25 00 04 00 00       	and    eax,0x400
c0011c60:	74 19                	je     c0011c7b <VAS::~VAS()+0x117>
c0011c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6b:	83 ec 0c             	sub    esp,0xc
c0011c6e:	50                   	push   eax
c0011c6f:	e8 ca e0 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c7b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c7f:	e9 1e ff ff ff       	jmp    c0011ba2 <VAS::~VAS()+0x3e>
c0011c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	50                   	push   eax
c0011c8f:	e8 d5 fc ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011c9e:	83 ec 0c             	sub    esp,0xc
c0011ca1:	50                   	push   eax
c0011ca2:	e8 97 e0 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb2:	c1 e0 02             	shl    eax,0x2
c0011cb5:	83 ec 08             	sub    esp,0x8
c0011cb8:	50                   	push   eax
c0011cb9:	68 00 ac 02 c0       	push   0xc002ac00
c0011cbe:	e8 48 0d 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0011cc3:	83 c4 10             	add    esp,0x10
c0011cc6:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011ccb:	48                   	dec    eax
c0011ccc:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0011cd1:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0011cd6:	85 c0                	test   eax,eax
c0011cd8:	75 01                	jne    c0011cdb <VAS::~VAS()+0x177>
c0011cda:	fb                   	sti    
c0011cdb:	90                   	nop
c0011cdc:	83 c4 2c             	add    esp,0x2c
c0011cdf:	c3                   	ret    

c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011ce0:	55                   	push   ebp
c0011ce1:	57                   	push   edi
c0011ce2:	56                   	push   esi
c0011ce3:	53                   	push   ebx
c0011ce4:	83 ec 1c             	sub    esp,0x1c
c0011ce7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011ceb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011cf5:	77 08                	ja     c0011cff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011cf7:	0f 20 d8             	mov    eax,cr3
c0011cfa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011cfd:	75 47                	jne    c0011d46 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011cff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d03:	09 d8                	or     eax,ebx
c0011d05:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d0a:	75 57                	jne    c0011d63 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d0c:	89 de                	mov    esi,ebx
c0011d0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d11:	c1 ee 16             	shr    esi,0x16
c0011d14:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d1b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d1f:	74 54                	je     c0011d75 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d25:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d2b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d2f:	c1 e6 0c             	shl    esi,0xc
c0011d32:	c1 eb 0a             	shr    ebx,0xa
c0011d35:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d3b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d3e:	83 c4 1c             	add    esp,0x1c
c0011d41:	5b                   	pop    ebx
c0011d42:	5e                   	pop    esi
c0011d43:	5f                   	pop    edi
c0011d44:	5d                   	pop    ebp
c0011d45:	c3                   	ret    
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	68 20 ac 02 c0       	push   0xc002ac20
c0011d4e:	e8 b8 0c 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0011d53:	83 c4 10             	add    esp,0x10
c0011d56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d5a:	09 d8                	or     eax,ebx
c0011d5c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d61:	74 a9                	je     c0011d0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d63:	83 ec 0c             	sub    esp,0xc
c0011d66:	68 88 ac 02 c0       	push   0xc002ac88
c0011d6b:	e8 39 86 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	eb 97                	jmp    c0011d0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d79:	e8 31 e0 ff ff       	call   c000fdaf <Phys::allocatePage()>
c0011d7e:	83 ec 0c             	sub    esp,0xc
c0011d81:	89 c5                	mov    ebp,eax
c0011d83:	8b 0d d0 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7d0
c0011d89:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d8d:	6a 01                	push   0x1
c0011d8f:	e8 a5 f8 ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c0011d94:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d9b:	6a 01                	push   0x1
c0011d9d:	50                   	push   eax
c0011d9e:	55                   	push   ebp
c0011d9f:	81 cd 07 04 00 00    	or     ebp,0x407
c0011da5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011da9:	51                   	push   ecx
c0011daa:	e8 27 02 00 00       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011daf:	83 c4 1c             	add    esp,0x1c
c0011db2:	68 00 10 00 00       	push   0x1000
c0011db7:	6a 00                	push   0x0
c0011db9:	50                   	push   eax
c0011dba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dbe:	e8 8d e9 fe ff       	call   c0000750 <memset>
c0011dc3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dc7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dca:	e8 9a fb ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dd3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ddc:	e9 40 ff ff ff       	jmp    c0011d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011de1:	90                   	nop

c0011de2 <VAS::allocatePages(int, int)>:
c0011de2:	55                   	push   ebp
c0011de3:	57                   	push   edi
c0011de4:	56                   	push   esi
c0011de5:	53                   	push   ebx
c0011de6:	83 ec 1c             	sub    esp,0x1c
c0011de9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ded:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011df2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011df8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011dfe:	83 e0 01             	and    eax,0x1
c0011e01:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e05:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e09:	0f 85 cc 00 00 00    	jne    c0011edb <VAS::allocatePages(int, int)+0xf9>
c0011e0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e16:	85 c0                	test   eax,eax
c0011e18:	0f 84 a1 00 00 00    	je     c0011ebf <VAS::allocatePages(int, int)+0xdd>
c0011e1e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e26:	c1 e6 0c             	shl    esi,0xc
c0011e29:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e2d:	85 c0                	test   eax,eax
c0011e2f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e32:	7e 33                	jle    c0011e67 <VAS::allocatePages(int, int)+0x85>
c0011e34:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e3c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e42:	e8 68 df ff ff       	call   c000fdaf <Phys::allocatePage()>
c0011e47:	55                   	push   ebp
c0011e48:	53                   	push   ebx
c0011e49:	50                   	push   eax
c0011e4a:	57                   	push   edi
c0011e4b:	e8 90 fe ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e50:	83 c4 10             	add    esp,0x10
c0011e53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e58:	74 03                	je     c0011e5d <VAS::allocatePages(int, int)+0x7b>
c0011e5a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e63:	39 de                	cmp    esi,ebx
c0011e65:	75 db                	jne    c0011e42 <VAS::allocatePages(int, int)+0x60>
c0011e67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e6c:	75 12                	jne    c0011e80 <VAS::allocatePages(int, int)+0x9e>
c0011e6e:	0f 20 d8             	mov    eax,cr3
c0011e71:	0f 22 d8             	mov    cr3,eax
c0011e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e78:	83 c4 1c             	add    esp,0x1c
c0011e7b:	5b                   	pop    ebx
c0011e7c:	5e                   	pop    esi
c0011e7d:	5f                   	pop    edi
c0011e7e:	5d                   	pop    ebp
c0011e7f:	c3                   	ret    
c0011e80:	c1 ee 0a             	shr    esi,0xa
c0011e83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011e8d:	c1 eb 0a             	shr    ebx,0xa
c0011e90:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011e96:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e9c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ea2:	39 c3                	cmp    ebx,eax
c0011ea4:	77 ce                	ja     c0011e74 <VAS::allocatePages(int, int)+0x92>
c0011ea6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ea9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eaf:	39 d8                	cmp    eax,ebx
c0011eb1:	73 f3                	jae    c0011ea6 <VAS::allocatePages(int, int)+0xc4>
c0011eb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb7:	83 c4 1c             	add    esp,0x1c
c0011eba:	5b                   	pop    ebx
c0011ebb:	5e                   	pop    esi
c0011ebc:	5f                   	pop    edi
c0011ebd:	5d                   	pop    ebp
c0011ebe:	c3                   	ret    
c0011ebf:	83 ec 0c             	sub    esp,0xc
c0011ec2:	68 ac ac 02 c0       	push   0xc002acac
c0011ec7:	e8 dd 84 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0011ecc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ecf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	e9 43 ff ff ff       	jmp    c0011e1e <VAS::allocatePages(int, int)+0x3c>
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ee2:	e8 52 f7 ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c0011ee7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011ef3:	0f 87 9b 00 00 00    	ja     c0011f94 <VAS::allocatePages(int, int)+0x1b2>
c0011ef9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011efd:	85 d2                	test   edx,edx
c0011eff:	7e 3c                	jle    c0011f3d <VAS::allocatePages(int, int)+0x15b>
c0011f01:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f05:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f0d:	c1 e5 0c             	shl    ebp,0xc
c0011f10:	81 ce 00 04 00 00    	or     esi,0x400
c0011f16:	01 dd                	add    ebp,ebx
c0011f18:	e8 92 de ff ff       	call   c000fdaf <Phys::allocatePage()>
c0011f1d:	56                   	push   esi
c0011f1e:	53                   	push   ebx
c0011f1f:	50                   	push   eax
c0011f20:	57                   	push   edi
c0011f21:	e8 ba fd ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f26:	83 c4 10             	add    esp,0x10
c0011f29:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f2e:	74 03                	je     c0011f33 <VAS::allocatePages(int, int)+0x151>
c0011f30:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f39:	39 dd                	cmp    ebp,ebx
c0011f3b:	75 db                	jne    c0011f18 <VAS::allocatePages(int, int)+0x136>
c0011f3d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f42:	0f 84 26 ff ff ff    	je     c0011e6e <VAS::allocatePages(int, int)+0x8c>
c0011f48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f50:	89 d3                	mov    ebx,edx
c0011f52:	c1 e0 0c             	shl    eax,0xc
c0011f55:	c1 eb 0a             	shr    ebx,0xa
c0011f58:	01 d0                	add    eax,edx
c0011f5a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f60:	c1 e8 0a             	shr    eax,0xa
c0011f63:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f6e:	2d 00 00 40 00       	sub    eax,0x400000
c0011f73:	39 c3                	cmp    ebx,eax
c0011f75:	0f 87 f9 fe ff ff    	ja     c0011e74 <VAS::allocatePages(int, int)+0x92>
c0011f7b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f7e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f84:	39 d8                	cmp    eax,ebx
c0011f86:	73 f3                	jae    c0011f7b <VAS::allocatePages(int, int)+0x199>
c0011f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8c:	83 c4 1c             	add    esp,0x1c
c0011f8f:	5b                   	pop    ebx
c0011f90:	5e                   	pop    esi
c0011f91:	5f                   	pop    edi
c0011f92:	5d                   	pop    ebp
c0011f93:	c3                   	ret    
c0011f94:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011f99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fa6:	0f 84 4d ff ff ff    	je     c0011ef9 <VAS::allocatePages(int, int)+0x117>
c0011fac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fb4:	e9 40 ff ff ff       	jmp    c0011ef9 <VAS::allocatePages(int, int)+0x117>
c0011fb9:	90                   	nop

c0011fba <VAS::setCPUSpecific(unsigned long)>:
c0011fba:	83 ec 0c             	sub    esp,0xc
c0011fbd:	6a 05                	push   0x5
c0011fbf:	68 00 00 40 c2       	push   0xc2400000
c0011fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fcc:	e8 0f fd ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fd1:	83 c4 1c             	add    esp,0x1c
c0011fd4:	c3                   	ret    
c0011fd5:	90                   	nop

c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011fd6:	55                   	push   ebp
c0011fd7:	57                   	push   edi
c0011fd8:	56                   	push   esi
c0011fd9:	53                   	push   ebx
c0011fda:	83 ec 1c             	sub    esp,0x1c
c0011fdd:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011fe2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fe6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fec:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ff0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ff6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011ffa:	83 e0 01             	and    eax,0x1
c0011ffd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012001:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012005:	85 c0                	test   eax,eax
c0012007:	7e 39                	jle    c0012042 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012009:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001200d:	89 f3                	mov    ebx,esi
c001200f:	c1 e0 0c             	shl    eax,0xc
c0012012:	01 f0                	add    eax,esi
c0012014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012018:	55                   	push   ebp
c0012019:	53                   	push   ebx
c001201a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001201e:	29 f0                	sub    eax,esi
c0012020:	01 d8                	add    eax,ebx
c0012022:	50                   	push   eax
c0012023:	57                   	push   edi
c0012024:	e8 b7 fc ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012031:	74 03                	je     c0012036 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012033:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012036:	81 c3 00 10 00 00    	add    ebx,0x1000
c001203c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012040:	75 d6                	jne    c0012018 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012042:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012047:	75 10                	jne    c0012059 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012049:	0f 20 d8             	mov    eax,cr3
c001204c:	0f 22 d8             	mov    cr3,eax
c001204f:	83 c4 1c             	add    esp,0x1c
c0012052:	89 f0                	mov    eax,esi
c0012054:	5b                   	pop    ebx
c0012055:	5e                   	pop    esi
c0012056:	5f                   	pop    edi
c0012057:	5d                   	pop    ebp
c0012058:	c3                   	ret    
c0012059:	89 f3                	mov    ebx,esi
c001205b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001205f:	c1 eb 0a             	shr    ebx,0xa
c0012062:	c1 e0 0c             	shl    eax,0xc
c0012065:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001206b:	01 f0                	add    eax,esi
c001206d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012073:	c1 e8 0a             	shr    eax,0xa
c0012076:	25 00 f0 ff ff       	and    eax,0xfffff000
c001207b:	2d 00 00 40 00       	sub    eax,0x400000
c0012080:	39 c3                	cmp    ebx,eax
c0012082:	77 cb                	ja     c001204f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012084:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012087:	81 c3 00 10 00 00    	add    ebx,0x1000
c001208d:	39 d8                	cmp    eax,ebx
c001208f:	73 f3                	jae    c0012084 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012091:	83 c4 1c             	add    esp,0x1c
c0012094:	89 f0                	mov    eax,esi
c0012096:	5b                   	pop    ebx
c0012097:	5e                   	pop    esi
c0012098:	5f                   	pop    edi
c0012099:	5d                   	pop    ebp
c001209a:	c3                   	ret    
c001209b:	90                   	nop

c001209c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001209c:	55                   	push   ebp
c001209d:	57                   	push   edi
c001209e:	56                   	push   esi
c001209f:	53                   	push   ebx
c00120a0:	83 ec 1c             	sub    esp,0x1c
c00120a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120ab:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120b3:	a9 ff 0f 00 00       	test   eax,0xfff
c00120b8:	75 4a                	jne    c0012104 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120c1:	c1 eb 16             	shr    ebx,0x16
c00120c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120cb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120cf:	74 4d                	je     c001211e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120d5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120d9:	c1 e8 0a             	shr    eax,0xa
c00120dc:	80 fa 01             	cmp    dl,0x1
c00120df:	19 d2                	sbb    edx,edx
c00120e1:	c1 e3 0c             	shl    ebx,0xc
c00120e4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00120e8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00120ee:	25 fc 0f 00 00       	and    eax,0xffc
c00120f3:	01 d8                	add    eax,ebx
c00120f5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120fc:	83 c4 1c             	add    esp,0x1c
c00120ff:	5b                   	pop    ebx
c0012100:	5e                   	pop    esi
c0012101:	5f                   	pop    edi
c0012102:	5d                   	pop    ebp
c0012103:	c3                   	ret    
c0012104:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012108:	83 ec 0c             	sub    esp,0xc
c001210b:	68 d8 ac 02 c0       	push   0xc002acd8
c0012110:	e8 94 82 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001211c:	eb 9c                	jmp    c00120ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001211e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012122:	e8 88 dc ff ff       	call   c000fdaf <Phys::allocatePage()>
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	89 c5                	mov    ebp,eax
c001212c:	8b 0d d0 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7d0
c0012132:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012136:	6a 01                	push   0x1
c0012138:	e8 fc f4 ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c001213d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012144:	6a 01                	push   0x1
c0012146:	50                   	push   eax
c0012147:	55                   	push   ebp
c0012148:	81 cd 07 04 00 00    	or     ebp,0x407
c001214e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012152:	51                   	push   ecx
c0012153:	e8 7e fe ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012158:	83 c4 1c             	add    esp,0x1c
c001215b:	68 00 10 00 00       	push   0x1000
c0012160:	6a 00                	push   0x0
c0012162:	50                   	push   eax
c0012163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012167:	e8 e4 e5 fe ff       	call   c0000750 <memset>
c001216c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012170:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012173:	e8 f1 f7 ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c0012178:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012185:	e9 47 ff ff ff       	jmp    c00120d1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001218a <VAS::VAS(bool)>:
c001218a:	53                   	push   ebx
c001218b:	83 ec 28             	sub    esp,0x28
c001218e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012192:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001219a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121b4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121b7:	e8 f3 db ff ff       	call   c000fdaf <Phys::allocatePage()>
c00121bc:	89 c2                	mov    edx,eax
c00121be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121c5:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c00121cb:	83 ec 0c             	sub    esp,0xc
c00121ce:	6a 01                	push   0x1
c00121d0:	e8 64 f4 ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	89 c2                	mov    edx,eax
c00121da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121e1:	83 ec 0c             	sub    esp,0xc
c00121e4:	6a 03                	push   0x3
c00121e6:	6a 01                	push   0x1
c00121e8:	52                   	push   edx
c00121e9:	50                   	push   eax
c00121ea:	53                   	push   ebx
c00121eb:	e8 e6 fd ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121f0:	83 c4 20             	add    esp,0x20
c00121f3:	89 c2                	mov    edx,eax
c00121f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121fc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012204:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001220c:	7f 1c                	jg     c001222a <VAS::VAS(bool)+0xa0>
c001220e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012212:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012215:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012219:	c1 e2 02             	shl    edx,0x2
c001221c:	01 d0                	add    eax,edx
c001221e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012224:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012228:	eb da                	jmp    c0012204 <VAS::VAS(bool)+0x7a>
c001222a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012232:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001223a:	7f 7a                	jg     c00122b6 <VAS::VAS(bool)+0x12c>
c001223c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012240:	2d 00 02 00 00       	sub    eax,0x200
c0012245:	c1 e0 0c             	shl    eax,0xc
c0012248:	83 c8 03             	or     eax,0x3
c001224b:	89 c2                	mov    edx,eax
c001224d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012258:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001225e:	83 e0 10             	and    eax,0x10
c0012261:	84 c0                	test   al,al
c0012263:	74 07                	je     c001226c <VAS::VAS(bool)+0xe2>
c0012265:	b8 00 01 00 00       	mov    eax,0x100
c001226a:	eb 05                	jmp    c0012271 <VAS::VAS(bool)+0xe7>
c001226c:	b8 00 00 00 00       	mov    eax,0x0
c0012271:	09 d0                	or     eax,edx
c0012273:	89 c1                	mov    ecx,eax
c0012275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012279:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001227c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012280:	c1 e2 02             	shl    edx,0x2
c0012283:	01 d0                	add    eax,edx
c0012285:	89 ca                	mov    edx,ecx
c0012287:	89 10                	mov    DWORD PTR [eax],edx
c0012289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228d:	2d 40 03 00 00       	sub    eax,0x340
c0012292:	83 f8 7f             	cmp    eax,0x7f
c0012295:	77 16                	ja     c00122ad <VAS::VAS(bool)+0x123>
c0012297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001229e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a2:	c1 e2 02             	shl    edx,0x2
c00122a5:	01 d0                	add    eax,edx
c00122a7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122b1:	e9 7c ff ff ff       	jmp    c0012232 <VAS::VAS(bool)+0xa8>
c00122b6:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00122bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122c7:	83 e0 10             	and    eax,0x10
c00122ca:	84 c0                	test   al,al
c00122cc:	74 07                	je     c00122d5 <VAS::VAS(bool)+0x14b>
c00122ce:	b8 03 41 00 00       	mov    eax,0x4103
c00122d3:	eb 05                	jmp    c00122da <VAS::VAS(bool)+0x150>
c00122d5:	b8 03 40 00 00       	mov    eax,0x4003
c00122da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122de:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00122e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00122e7:	89 02                	mov    DWORD PTR [edx],eax
c00122e9:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00122ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00122fa:	83 ec 08             	sub    esp,0x8
c00122fd:	50                   	push   eax
c00122fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012302:	e8 b3 fc ff ff       	call   c0011fba <VAS::setCPUSpecific(unsigned long)>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001230e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012311:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012316:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001231c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012322:	83 e0 10             	and    eax,0x10
c0012325:	84 c0                	test   al,al
c0012327:	74 07                	je     c0012330 <VAS::VAS(bool)+0x1a6>
c0012329:	b8 00 01 00 00       	mov    eax,0x100
c001232e:	eb 05                	jmp    c0012335 <VAS::VAS(bool)+0x1ab>
c0012330:	b8 00 00 00 00       	mov    eax,0x0
c0012335:	09 c2                	or     edx,eax
c0012337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001233b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001233e:	05 fc 0f 00 00       	add    eax,0xffc
c0012343:	83 ca 03             	or     edx,0x3
c0012346:	89 10                	mov    DWORD PTR [eax],edx
c0012348:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001234d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	50                   	push   eax
c0012357:	e8 e8 1d 00 00       	call   c0014144 <Device::getName()>
c001235c:	83 c4 10             	add    esp,0x10
c001235f:	83 ec 08             	sub    esp,0x8
c0012362:	68 d4 ad 02 c0       	push   0xc002add4
c0012367:	50                   	push   eax
c0012368:	e8 2b e5 fe ff       	call   c0000898 <strcmp>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	85 c0                	test   eax,eax
c0012372:	0f 94 c0             	sete   al
c0012375:	84 c0                	test   al,al
c0012377:	0f 84 87 00 00 00    	je     c0012404 <VAS::VAS(bool)+0x27a>
c001237d:	fa                   	cli    
c001237e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0012383:	40                   	inc    eax
c0012384:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0012389:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001238e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012394:	05 7c 09 00 00       	add    eax,0x97c
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	50                   	push   eax
c001239d:	e8 48 cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123aa:	89 c3                	mov    ebx,eax
c00123ac:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00123b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b7:	05 7c 09 00 00       	add    eax,0x97c
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	50                   	push   eax
c00123c0:	e8 25 cf ff ff       	call   c000f2ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	83 ec 08             	sub    esp,0x8
c00123cb:	50                   	push   eax
c00123cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123d0:	e8 75 f5 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00123da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123df:	6a 11                	push   0x11
c00123e1:	53                   	push   ebx
c00123e2:	50                   	push   eax
c00123e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123e7:	e8 f4 f8 ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00123f4:	48                   	dec    eax
c00123f5:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00123fa:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00123ff:	85 c0                	test   eax,eax
c0012401:	75 01                	jne    c0012404 <VAS::VAS(bool)+0x27a>
c0012403:	fb                   	sti    
c0012404:	90                   	nop
c0012405:	83 c4 28             	add    esp,0x28
c0012408:	5b                   	pop    ebx
c0012409:	c3                   	ret    

c001240a <VAS::evict(unsigned long)>:
c001240a:	55                   	push   ebp
c001240b:	57                   	push   edi
c001240c:	56                   	push   esi
c001240d:	53                   	push   ebx
c001240e:	83 ec 28             	sub    esp,0x28
c0012411:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012415:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012419:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001241d:	68 e2 ad 02 c0       	push   0xc002ade2
c0012422:	e8 e4 05 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012427:	e8 4e f3 ff ff       	call   c001177a <Virt::allocateSwapfilePage()>
c001242c:	5a                   	pop    edx
c001242d:	89 c7                	mov    edi,eax
c001242f:	59                   	pop    ecx
c0012430:	50                   	push   eax
c0012431:	68 ff ad 02 c0       	push   0xc002adff
c0012436:	e8 d0 05 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001243b:	83 c4 10             	add    esp,0x10
c001243e:	8b 1d 0c d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d60c
c0012444:	85 db                	test   ebx,ebx
c0012446:	7e 3d                	jle    c0012485 <VAS::evict(unsigned long)+0x7b>
c0012448:	89 ee                	mov    esi,ebp
c001244a:	31 db                	xor    ebx,ebx
c001244c:	83 ec 0c             	sub    esp,0xc
c001244f:	57                   	push   edi
c0012450:	e8 13 f3 ff ff       	call   c0011768 <Virt::swapIDToSector(unsigned long)>
c0012455:	89 34 24             	mov    DWORD PTR [esp],esi
c0012458:	01 d8                	add    eax,ebx
c001245a:	6a 01                	push   0x1
c001245c:	31 d2                	xor    edx,edx
c001245e:	43                   	inc    ebx
c001245f:	52                   	push   edx
c0012460:	81 c6 00 02 00 00    	add    esi,0x200
c0012466:	50                   	push   eax
c0012467:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c001246e:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012475:	e8 58 3f 00 00       	call   c00163d2 <LogicalDisk::write(unsigned long long, int, void*)>
c001247a:	83 c4 20             	add    esp,0x20
c001247d:	39 1d 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,ebx
c0012483:	7f c7                	jg     c001244c <VAS::evict(unsigned long)+0x42>
c0012485:	83 ec 08             	sub    esp,0x8
c0012488:	c1 e7 0b             	shl    edi,0xb
c001248b:	55                   	push   ebp
c001248c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012490:	e8 b5 f4 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c0012495:	5a                   	pop    edx
c0012496:	89 c6                	mov    esi,eax
c0012498:	59                   	pop    ecx
c0012499:	ff 30                	push   DWORD PTR [eax]
c001249b:	68 0f ae 02 c0       	push   0xc002ae0f
c00124a0:	e8 66 05 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00124a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00124a7:	89 d3                	mov    ebx,edx
c00124a9:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124af:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124b5:	09 d7                	or     edi,edx
c00124b7:	89 3e                	mov    DWORD PTR [esi],edi
c00124b9:	5e                   	pop    esi
c00124ba:	58                   	pop    eax
c00124bb:	57                   	push   edi
c00124bc:	68 28 ae 02 c0       	push   0xc002ae28
c00124c1:	e8 45 05 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00124c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124c9:	ff 05 c8 e7 02 c0    	inc    DWORD PTR ds:0xc002e7c8
c00124cf:	e8 6a d8 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c00124d4:	0f 20 d8             	mov    eax,cr3
c00124d7:	0f 22 d8             	mov    cr3,eax
c00124da:	ff 35 c8 e7 02 c0    	push   DWORD PTR ds:0xc002e7c8
c00124e0:	55                   	push   ebp
c00124e1:	53                   	push   ebx
c00124e2:	68 fc ac 02 c0       	push   0xc002acfc
c00124e7:	e8 1f 05 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00124ec:	a1 c4 e7 02 c0       	mov    eax,ds:0xc002e7c4
c00124f1:	c7 44 24 50 41 ae 02 c0 	mov    DWORD PTR [esp+0x50],0xc002ae41
c00124f9:	8d 50 01             	lea    edx,[eax+0x1]
c00124fc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012500:	89 15 c4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c4,edx
c0012506:	83 c4 3c             	add    esp,0x3c
c0012509:	5b                   	pop    ebx
c001250a:	5e                   	pop    esi
c001250b:	5f                   	pop    edi
c001250c:	5d                   	pop    ebp
c001250d:	e9 f9 04 00 00       	jmp    c0012a0b <Dbg::kprintf(char const*, ...)>

c0012512 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012512:	55                   	push   ebp
c0012513:	57                   	push   edi
c0012514:	56                   	push   esi
c0012515:	53                   	push   ebx
c0012516:	83 ec 24             	sub    esp,0x24
c0012519:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001251d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012521:	68 52 ae 02 c0       	push   0xc002ae52
c0012526:	e8 e0 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001252b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001252f:	58                   	pop    eax
c0012530:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012536:	5a                   	pop    edx
c0012537:	57                   	push   edi
c0012538:	53                   	push   ebx
c0012539:	e8 0c f4 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c001253e:	59                   	pop    ecx
c001253f:	5e                   	pop    esi
c0012540:	89 c6                	mov    esi,eax
c0012542:	ff 30                	push   DWORD PTR [eax]
c0012544:	68 65 ae 02 c0       	push   0xc002ae65
c0012549:	e8 bd 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	85 ff                	test   edi,edi
c0012553:	74 0a                	je     c001255f <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012555:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012557:	f7 c5 01 00 00 00    	test   ebp,0x1
c001255d:	74 0a                	je     c0012569 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c001255f:	83 c4 1c             	add    esp,0x1c
c0012562:	31 c0                	xor    eax,eax
c0012564:	5b                   	pop    ebx
c0012565:	5e                   	pop    esi
c0012566:	5f                   	pop    edi
c0012567:	5d                   	pop    ebp
c0012568:	c3                   	ret    
c0012569:	83 ec 08             	sub    esp,0x8
c001256c:	c1 ed 0b             	shr    ebp,0xb
c001256f:	55                   	push   ebp
c0012570:	68 73 ae 02 c0       	push   0xc002ae73
c0012575:	e8 91 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001257a:	e8 30 d8 ff ff       	call   c000fdaf <Phys::allocatePage()>
c001257f:	59                   	pop    ecx
c0012580:	5a                   	pop    edx
c0012581:	50                   	push   eax
c0012582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012586:	68 7e ae 02 c0       	push   0xc002ae7e
c001258b:	e8 7b 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012590:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012594:	8b 16                	mov    edx,DWORD PTR [esi]
c0012596:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001259c:	09 d0                	or     eax,edx
c001259e:	0d 01 08 00 00       	or     eax,0x801
c00125a3:	89 06                	mov    DWORD PTR [esi],eax
c00125a5:	59                   	pop    ecx
c00125a6:	5e                   	pop    esi
c00125a7:	50                   	push   eax
c00125a8:	68 93 ae 02 c0       	push   0xc002ae93
c00125ad:	e8 59 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00125b2:	0f 20 d8             	mov    eax,cr3
c00125b5:	83 c4 0c             	add    esp,0xc
c00125b8:	53                   	push   ebx
c00125b9:	50                   	push   eax
c00125ba:	68 ab ae 02 c0       	push   0xc002aeab
c00125bf:	e8 47 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00125c4:	c7 04 24 c3 ae 02 c0 	mov    DWORD PTR [esp],0xc002aec3
c00125cb:	e8 3b 04 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c00125d8:	85 c0                	test   eax,eax
c00125da:	7e 3d                	jle    c0012619 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c00125dc:	89 fe                	mov    esi,edi
c00125de:	31 db                	xor    ebx,ebx
c00125e0:	83 ec 0c             	sub    esp,0xc
c00125e3:	55                   	push   ebp
c00125e4:	e8 7f f1 ff ff       	call   c0011768 <Virt::swapIDToSector(unsigned long)>
c00125e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00125ec:	01 d8                	add    eax,ebx
c00125ee:	6a 01                	push   0x1
c00125f0:	31 d2                	xor    edx,edx
c00125f2:	43                   	inc    ebx
c00125f3:	52                   	push   edx
c00125f4:	81 c6 00 02 00 00    	add    esi,0x200
c00125fa:	50                   	push   eax
c00125fb:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c0012602:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012609:	e8 58 3d 00 00       	call   c0016366 <LogicalDisk::read(unsigned long long, int, void*)>
c001260e:	83 c4 20             	add    esp,0x20
c0012611:	39 1d 0c d6 02 c0    	cmp    DWORD PTR ds:0xc002d60c,ebx
c0012617:	7f c7                	jg     c00125e0 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012619:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c001261e:	48                   	dec    eax
c001261f:	52                   	push   edx
c0012620:	a3 c8 e7 02 c0       	mov    ds:0xc002e7c8,eax
c0012625:	50                   	push   eax
c0012626:	57                   	push   edi
c0012627:	68 d3 ae 02 c0       	push   0xc002aed3
c001262c:	e8 da 03 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012631:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012634:	e8 11 f1 ff ff       	call   c001174a <Virt::freeSwapfilePage(unsigned long)>
c0012639:	c7 04 24 e8 ae 02 c0 	mov    DWORD PTR [esp],0xc002aee8
c0012640:	e8 c6 03 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012645:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	48                   	dec    eax
c001264e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0012653:	85 c0                	test   eax,eax
c0012655:	75 01                	jne    c0012658 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012657:	fb                   	sti    
c0012658:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001265c:	25 ff 0f 00 00       	and    eax,0xfff
c0012661:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012666:	77 20                	ja     c0012688 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c0012668:	0f 20 d8             	mov    eax,cr3
c001266b:	0f 22 d8             	mov    cr3,eax
c001266e:	83 ec 0c             	sub    esp,0xc
c0012671:	68 0e af 02 c0       	push   0xc002af0e
c0012676:	e8 90 03 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001267b:	83 c4 10             	add    esp,0x10
c001267e:	b0 01                	mov    al,0x1
c0012680:	83 c4 1c             	add    esp,0x1c
c0012683:	5b                   	pop    ebx
c0012684:	5e                   	pop    esi
c0012685:	5f                   	pop    edi
c0012686:	5d                   	pop    ebp
c0012687:	c3                   	ret    
c0012688:	83 ec 0c             	sub    esp,0xc
c001268b:	68 fe ae 02 c0       	push   0xc002aefe
c0012690:	e8 76 03 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	eb ce                	jmp    c0012668 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c001269a <VAS::scanForEviction()>:
c001269a:	55                   	push   ebp
c001269b:	31 ed                	xor    ebp,ebp
c001269d:	57                   	push   edi
c001269e:	56                   	push   esi
c001269f:	53                   	push   ebx
c00126a0:	83 ec 0c             	sub    esp,0xc
c00126a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126a7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126aa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126b0:	75 0e                	jne    c00126c0 <VAS::scanForEviction()+0x26>
c00126b2:	89 da                	mov    edx,ebx
c00126b4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126b7:	c1 ea 16             	shr    edx,0x16
c00126ba:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126be:	74 4e                	je     c001270e <VAS::scanForEviction()+0x74>
c00126c0:	53                   	push   ebx
c00126c1:	56                   	push   esi
c00126c2:	e8 83 f2 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c00126c7:	5f                   	pop    edi
c00126c8:	8b 38                	mov    edi,DWORD PTR [eax]
c00126ca:	5a                   	pop    edx
c00126cb:	89 fa                	mov    edx,edi
c00126cd:	81 e2 01 08 00 00    	and    edx,0x801
c00126d3:	81 fa 01 08 00 00    	cmp    edx,0x801
c00126d9:	74 3e                	je     c0012719 <VAS::scanForEviction()+0x7f>
c00126db:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126e1:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00126e7:	76 2b                	jbe    c0012714 <VAS::scanForEviction()+0x7a>
c00126e9:	45                   	inc    ebp
c00126ea:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00126f1:	83 fd 04             	cmp    ebp,0x4
c00126f4:	74 35                	je     c001272b <VAS::scanForEviction()+0x91>
c00126f6:	31 db                	xor    ebx,ebx
c00126f8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126fe:	75 c0                	jne    c00126c0 <VAS::scanForEviction()+0x26>
c0012700:	89 da                	mov    edx,ebx
c0012702:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012705:	c1 ea 16             	shr    edx,0x16
c0012708:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001270c:	75 b2                	jne    c00126c0 <VAS::scanForEviction()+0x26>
c001270e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012714:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012717:	eb 91                	jmp    c00126aa <VAS::scanForEviction()+0x10>
c0012719:	f7 c7 20 00 00 00    	test   edi,0x20
c001271f:	74 22                	je     c0012743 <VAS::scanForEviction()+0xa9>
c0012721:	83 e7 df             	and    edi,0xffffffdf
c0012724:	89 38                	mov    DWORD PTR [eax],edi
c0012726:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012729:	eb b0                	jmp    c00126db <VAS::scanForEviction()+0x41>
c001272b:	83 ec 0c             	sub    esp,0xc
c001272e:	68 2c ad 02 c0       	push   0xc002ad2c
c0012733:	e8 71 7c 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0012738:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	e9 67 ff ff ff       	jmp    c00126aa <VAS::scanForEviction()+0x10>
c0012743:	83 ec 08             	sub    esp,0x8
c0012746:	53                   	push   ebx
c0012747:	68 1c af 02 c0       	push   0xc002af1c
c001274c:	e8 ba 02 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012751:	58                   	pop    eax
c0012752:	5a                   	pop    edx
c0012753:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012756:	56                   	push   esi
c0012757:	e8 ae fc ff ff       	call   c001240a <VAS::evict(unsigned long)>
c001275c:	59                   	pop    ecx
c001275d:	5b                   	pop    ebx
c001275e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012761:	68 30 af 02 c0       	push   0xc002af30
c0012766:	e8 a0 02 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001276b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012772:	89 f8                	mov    eax,edi
c0012774:	83 c4 1c             	add    esp,0x1c
c0012777:	25 00 f0 ff ff       	and    eax,0xfffff000
c001277c:	5b                   	pop    ebx
c001277d:	5e                   	pop    esi
c001277e:	5f                   	pop    edi
c001277f:	5d                   	pop    ebp
c0012780:	c3                   	ret    

c0012781 <mapVASFirstTime>:
c0012781:	55                   	push   ebp
c0012782:	57                   	push   edi
c0012783:	56                   	push   esi
c0012784:	53                   	push   ebx
c0012785:	83 ec 0c             	sub    esp,0xc
c0012788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001278d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012790:	4a                   	dec    edx
c0012791:	0f 84 fe 00 00 00    	je     c0012895 <mapVASFirstTime+0x114>
c0012797:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001279a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001279d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00127a2:	c1 e5 15             	shl    ebp,0x15
c00127a5:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00127aa:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00127b0:	29 eb                	sub    ebx,ebp
c00127b2:	29 ef                	sub    edi,ebp
c00127b4:	83 ec 08             	sub    esp,0x8
c00127b7:	53                   	push   ebx
c00127b8:	68 5c af 02 c0       	push   0xc002af5c
c00127bd:	e8 49 02 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00127c2:	e8 e8 d5 ff ff       	call   c000fdaf <Phys::allocatePage()>
c00127c7:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00127ce:	6a 01                	push   0x1
c00127d0:	53                   	push   ebx
c00127d1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00127d7:	50                   	push   eax
c00127d8:	56                   	push   esi
c00127d9:	e8 f8 f7 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127de:	83 c4 20             	add    esp,0x20
c00127e1:	39 fb                	cmp    ebx,edi
c00127e3:	75 cf                	jne    c00127b4 <mapVASFirstTime+0x33>
c00127e5:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00127ea:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00127ef:	29 eb                	sub    ebx,ebp
c00127f1:	29 ef                	sub    edi,ebp
c00127f3:	83 ec 08             	sub    esp,0x8
c00127f6:	53                   	push   ebx
c00127f7:	68 78 af 02 c0       	push   0xc002af78
c00127fc:	e8 0a 02 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012801:	58                   	pop    eax
c0012802:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012806:	5a                   	pop    edx
c0012807:	19 c0                	sbb    eax,eax
c0012809:	83 e0 04             	and    eax,0x4
c001280c:	05 03 04 00 00       	add    eax,0x403
c0012811:	50                   	push   eax
c0012812:	68 9d ae 02 c0       	push   0xc002ae9d
c0012817:	e8 ef 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001281c:	e8 8e d5 ff ff       	call   c000fdaf <Phys::allocatePage()>
c0012821:	59                   	pop    ecx
c0012822:	89 c5                	mov    ebp,eax
c0012824:	58                   	pop    eax
c0012825:	55                   	push   ebp
c0012826:	68 8c af 02 c0       	push   0xc002af8c
c001282b:	e8 db 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012830:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012834:	19 d2                	sbb    edx,edx
c0012836:	83 e2 04             	and    edx,0x4
c0012839:	81 c2 03 04 00 00    	add    edx,0x403
c001283f:	89 14 24             	mov    DWORD PTR [esp],edx
c0012842:	6a 01                	push   0x1
c0012844:	53                   	push   ebx
c0012845:	55                   	push   ebp
c0012846:	56                   	push   esi
c0012847:	e8 8a f7 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001284c:	83 c4 18             	add    esp,0x18
c001284f:	53                   	push   ebx
c0012850:	56                   	push   esi
c0012851:	e8 f4 f0 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c0012856:	5a                   	pop    edx
c0012857:	59                   	pop    ecx
c0012858:	ff 30                	push   DWORD PTR [eax]
c001285a:	68 a8 af 02 c0       	push   0xc002afa8
c001285f:	e8 a7 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0012864:	0f 20 d8             	mov    eax,cr3
c0012867:	83 c4 0c             	add    esp,0xc
c001286a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012870:	56                   	push   esi
c0012871:	50                   	push   eax
c0012872:	68 ab ae 02 c0       	push   0xc002aeab
c0012877:	e8 8f 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001287c:	83 c4 10             	add    esp,0x10
c001287f:	39 df                	cmp    edi,ebx
c0012881:	0f 85 6c ff ff ff    	jne    c00127f3 <mapVASFirstTime+0x72>
c0012887:	0f 20 d8             	mov    eax,cr3
c001288a:	0f 22 d8             	mov    cr3,eax
c001288d:	83 c4 0c             	add    esp,0xc
c0012890:	5b                   	pop    ebx
c0012891:	5e                   	pop    esi
c0012892:	5f                   	pop    edi
c0012893:	5d                   	pop    ebp
c0012894:	c3                   	ret    
c0012895:	83 ec 0c             	sub    esp,0xc
c0012898:	68 43 af 02 c0       	push   0xc002af43
c001289d:	e8 69 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00128a2:	83 c4 10             	add    esp,0x10
c00128a5:	83 c4 0c             	add    esp,0xc
c00128a8:	5b                   	pop    ebx
c00128a9:	5e                   	pop    esi
c00128aa:	5f                   	pop    edi
c00128ab:	5d                   	pop    ebp
c00128ac:	c3                   	ret    

c00128ad <__cxa_atexit>:
c00128ad:	31 c0                	xor    eax,eax
c00128af:	c3                   	ret    

c00128b0 <__cxa_finalize>:
c00128b0:	c3                   	ret    

c00128b1 <__stack_chk_fail>:
c00128b1:	55                   	push   ebp
c00128b2:	89 e5                	mov    ebp,esp
c00128b4:	83 ec 14             	sub    esp,0x14
c00128b7:	68 b3 af 02 c0       	push   0xc002afb3
c00128bc:	e8 4a 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00128c1:	58                   	pop    eax
c00128c2:	5a                   	pop    edx
c00128c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00128c6:	68 03 b0 02 c0       	push   0xc002b003
c00128cb:	e8 3b 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00128d0:	59                   	pop    ecx
c00128d1:	58                   	pop    eax
c00128d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128d8:	68 03 b0 02 c0       	push   0xc002b003
c00128dd:	e8 29 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00128e2:	5a                   	pop    edx
c00128e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128e6:	59                   	pop    ecx
c00128e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00128e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128ec:	68 03 b0 02 c0       	push   0xc002b003
c00128f1:	e8 15 01 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00128f6:	5a                   	pop    edx
c00128f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128fa:	59                   	pop    ecx
c00128fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012902:	68 03 b0 02 c0       	push   0xc002b003
c0012907:	e8 ff 00 00 00       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001290c:	c7 04 24 0b b0 02 c0 	mov    DWORD PTR [esp],0xc002b00b
c0012913:	e8 91 7a 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0012918:	83 c4 10             	add    esp,0x10
c001291b:	c9                   	leave  
c001291c:	c3                   	ret    

c001291d <__cxa_pure_virtual>:
c001291d:	83 ec 18             	sub    esp,0x18
c0012920:	68 23 b0 02 c0       	push   0xc002b023
c0012925:	e8 7f 7a 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001292a:	83 c4 1c             	add    esp,0x1c
c001292d:	c3                   	ret    

c001292e <operator new[](unsigned long)>:
c001292e:	e9 80 d0 ff ff       	jmp    c000f9b3 <malloc>

c0012933 <operator delete(void*, unsigned long)>:
c0012933:	e9 9b d0 ff ff       	jmp    c000f9d3 <rfree>

c0012938 <operator delete[](void*)>:
c0012938:	e9 96 d0 ff ff       	jmp    c000f9d3 <rfree>

c001293d <operator delete[](void*, unsigned long)>:
c001293d:	e9 91 d0 ff ff       	jmp    c000f9d3 <rfree>

c0012942 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012942:	55                   	push   ebp
c0012943:	b9 11 00 00 00       	mov    ecx,0x11
c0012948:	57                   	push   edi
c0012949:	56                   	push   esi
c001294a:	be 16 aa 02 c0       	mov    esi,0xc002aa16
c001294f:	53                   	push   ebx
c0012950:	83 ec 20             	sub    esp,0x20
c0012953:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012957:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001295b:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001295f:	fc                   	cld    
c0012960:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012962:	89 ee                	mov    esi,ebp
c0012964:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012968:	eb 02                	jmp    c001296c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001296a:	89 c6                	mov    esi,eax
c001296c:	31 d2                	xor    edx,edx
c001296e:	41                   	inc    ecx
c001296f:	89 f0                	mov    eax,esi
c0012971:	f7 f3                	div    ebx
c0012973:	39 de                	cmp    esi,ebx
c0012975:	73 f3                	jae    c001296a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012977:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001297a:	eb 02                	jmp    c001297e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001297c:	89 c5                	mov    ebp,eax
c001297e:	31 d2                	xor    edx,edx
c0012980:	49                   	dec    ecx
c0012981:	89 e8                	mov    eax,ebp
c0012983:	f7 f3                	div    ebx
c0012985:	39 dd                	cmp    ebp,ebx
c0012987:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001298b:	88 11                	mov    BYTE PTR [ecx],dl
c001298d:	73 ed                	jae    c001297c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001298f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012993:	83 c4 20             	add    esp,0x20
c0012996:	5b                   	pop    ebx
c0012997:	5e                   	pop    esi
c0012998:	5f                   	pop    edi
c0012999:	5d                   	pop    ebp
c001299a:	c3                   	ret    

c001299b <Dbg::logc(char)>:
c001299b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001299f:	ba fd 03 00 00       	mov    edx,0x3fd
c00129a4:	ec                   	in     al,dx
c00129a5:	a8 20                	test   al,0x20
c00129a7:	74 fb                	je     c00129a4 <Dbg::logc(char)+0x9>
c00129a9:	ba f8 03 00 00       	mov    edx,0x3f8
c00129ae:	88 c8                	mov    al,cl
c00129b0:	ee                   	out    dx,al
c00129b1:	c3                   	ret    

c00129b2 <Dbg::logs(char*)>:
c00129b2:	53                   	push   ebx
c00129b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00129b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129ba:	84 c0                	test   al,al
c00129bc:	74 0f                	je     c00129cd <Dbg::logs(char*)+0x1b>
c00129be:	50                   	push   eax
c00129bf:	43                   	inc    ebx
c00129c0:	e8 d6 ff ff ff       	call   c001299b <Dbg::logc(char)>
c00129c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129c8:	5a                   	pop    edx
c00129c9:	84 c0                	test   al,al
c00129cb:	75 f1                	jne    c00129be <Dbg::logs(char*)+0xc>
c00129cd:	5b                   	pop    ebx
c00129ce:	c3                   	ret    

c00129cf <Dbg::logWriteInt(unsigned int)>:
c00129cf:	83 ec 10             	sub    esp,0x10
c00129d2:	6a 0a                	push   0xa
c00129d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129d8:	50                   	push   eax
c00129d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129dd:	e8 60 ff ff ff       	call   c0012942 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129e2:	50                   	push   eax
c00129e3:	e8 ca ff ff ff       	call   c00129b2 <Dbg::logs(char*)>
c00129e8:	83 c4 20             	add    esp,0x20
c00129eb:	c3                   	ret    

c00129ec <Dbg::logWriteIntBase(unsigned int, int)>:
c00129ec:	83 ec 10             	sub    esp,0x10
c00129ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129f7:	50                   	push   eax
c00129f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fc:	e8 41 ff ff ff       	call   c0012942 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012a01:	50                   	push   eax
c0012a02:	e8 ab ff ff ff       	call   c00129b2 <Dbg::logs(char*)>
c0012a07:	83 c4 20             	add    esp,0x20
c0012a0a:	c3                   	ret    

c0012a0b <Dbg::kprintf(char const*, ...)>:
c0012a0b:	55                   	push   ebp
c0012a0c:	57                   	push   edi
c0012a0d:	56                   	push   esi
c0012a0e:	53                   	push   ebx
c0012a0f:	83 ec 0c             	sub    esp,0xc
c0012a12:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012a1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a1e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a21:	84 c0                	test   al,al
c0012a23:	74 4a                	je     c0012a6f <Dbg::kprintf(char const*, ...)+0x64>
c0012a25:	31 db                	xor    ebx,ebx
c0012a27:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a2a:	3c 25                	cmp    al,0x25
c0012a2c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012a2f:	0f 85 e4 00 00 00    	jne    c0012b19 <Dbg::kprintf(char const*, ...)+0x10e>
c0012a35:	83 c3 02             	add    ebx,0x2
c0012a38:	8a 07                	mov    al,BYTE PTR [edi]
c0012a3a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012a3d:	83 e8 25             	sub    eax,0x25
c0012a40:	3c 53                	cmp    al,0x53
c0012a42:	0f 87 ba 00 00 00    	ja     c0012b02 <Dbg::kprintf(char const*, ...)+0xf7>
c0012a48:	0f b6 c0             	movzx  eax,al
c0012a4b:	ff 24 85 38 b0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4fc8]
c0012a52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a56:	89 c8                	mov    eax,ecx
c0012a58:	83 c1 04             	add    ecx,0x4
c0012a5b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a5f:	ff 30                	push   DWORD PTR [eax]
c0012a61:	e8 69 ff ff ff       	call   c00129cf <Dbg::logWriteInt(unsigned int)>
c0012a66:	5f                   	pop    edi
c0012a67:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a6b:	84 c0                	test   al,al
c0012a6d:	75 b8                	jne    c0012a27 <Dbg::kprintf(char const*, ...)+0x1c>
c0012a6f:	83 c4 0c             	add    esp,0xc
c0012a72:	5b                   	pop    ebx
c0012a73:	5e                   	pop    esi
c0012a74:	5f                   	pop    edi
c0012a75:	5d                   	pop    ebp
c0012a76:	c3                   	ret    
c0012a77:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a7b:	89 c8                	mov    eax,ecx
c0012a7d:	83 c1 04             	add    ecx,0x4
c0012a80:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a84:	ff 30                	push   DWORD PTR [eax]
c0012a86:	e8 27 ff ff ff       	call   c00129b2 <Dbg::logs(char*)>
c0012a8b:	58                   	pop    eax
c0012a8c:	eb d9                	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a92:	89 d0                	mov    eax,edx
c0012a94:	83 c2 04             	add    edx,0x4
c0012a97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a9b:	ff 30                	push   DWORD PTR [eax]
c0012a9d:	e8 2d ff ff ff       	call   c00129cf <Dbg::logWriteInt(unsigned int)>
c0012aa2:	58                   	pop    eax
c0012aa3:	eb c2                	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012aa5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012aa9:	89 d0                	mov    eax,edx
c0012aab:	83 c2 04             	add    edx,0x4
c0012aae:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ab1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ab5:	50                   	push   eax
c0012ab6:	e8 e0 fe ff ff       	call   c001299b <Dbg::logc(char)>
c0012abb:	58                   	pop    eax
c0012abc:	eb a9                	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012abe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ac2:	89 c8                	mov    eax,ecx
c0012ac4:	83 c1 04             	add    ecx,0x4
c0012ac7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012acb:	6a 10                	push   0x10
c0012acd:	ff 30                	push   DWORD PTR [eax]
c0012acf:	e8 18 ff ff ff       	call   c00129ec <Dbg::logWriteIntBase(unsigned int, int)>
c0012ad4:	59                   	pop    ecx
c0012ad5:	5f                   	pop    edi
c0012ad6:	eb 8f                	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ad8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012adc:	89 d0                	mov    eax,edx
c0012ade:	83 c2 08             	add    edx,0x8
c0012ae1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ae5:	6a 10                	push   0x10
c0012ae7:	ff 30                	push   DWORD PTR [eax]
c0012ae9:	e8 fe fe ff ff       	call   c00129ec <Dbg::logWriteIntBase(unsigned int, int)>
c0012aee:	58                   	pop    eax
c0012aef:	5a                   	pop    edx
c0012af0:	e9 72 ff ff ff       	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012af5:	6a 25                	push   0x25
c0012af7:	e8 9f fe ff ff       	call   c001299b <Dbg::logc(char)>
c0012afc:	58                   	pop    eax
c0012afd:	e9 65 ff ff ff       	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b02:	6a 25                	push   0x25
c0012b04:	e8 92 fe ff ff       	call   c001299b <Dbg::logc(char)>
c0012b09:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012b0c:	50                   	push   eax
c0012b0d:	e8 89 fe ff ff       	call   c001299b <Dbg::logc(char)>
c0012b12:	5a                   	pop    edx
c0012b13:	59                   	pop    ecx
c0012b14:	e9 4e ff ff ff       	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b19:	50                   	push   eax
c0012b1a:	89 eb                	mov    ebx,ebp
c0012b1c:	e8 7a fe ff ff       	call   c001299b <Dbg::logc(char)>
c0012b21:	89 fd                	mov    ebp,edi
c0012b23:	58                   	pop    eax
c0012b24:	e9 3e ff ff ff       	jmp    c0012a67 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b29:	90                   	nop

c0012b2a <File::read(unsigned long long, void*, int*)>:
c0012b2a:	53                   	push   ebx
c0012b2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b3a:	3c 19                	cmp    al,0x19
c0012b3c:	77 35                	ja     c0012b73 <File::read(unsigned long long, void*, int*)+0x49>
c0012b3e:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012b45:	85 c0                	test   eax,eax
c0012b47:	74 2a                	je     c0012b73 <File::read(unsigned long long, void*, int*)+0x49>
c0012b49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b4f:	85 c0                	test   eax,eax
c0012b51:	74 20                	je     c0012b73 <File::read(unsigned long long, void*, int*)+0x49>
c0012b53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b57:	74 21                	je     c0012b7a <File::read(unsigned long long, void*, int*)+0x50>
c0012b59:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b6d:	5b                   	pop    ebx
c0012b6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012b71:	ff e0                	jmp    eax
c0012b73:	b8 0b 00 00 00       	mov    eax,0xb
c0012b78:	eb 05                	jmp    c0012b7f <File::read(unsigned long long, void*, int*)+0x55>
c0012b7a:	b8 05 00 00 00       	mov    eax,0x5
c0012b7f:	5b                   	pop    ebx
c0012b80:	c3                   	ret    
c0012b81:	90                   	nop

c0012b82 <File::write(unsigned long long, void*, int*)>:
c0012b82:	53                   	push   ebx
c0012b83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b92:	3c 19                	cmp    al,0x19
c0012b94:	77 35                	ja     c0012bcb <File::write(unsigned long long, void*, int*)+0x49>
c0012b96:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012b9d:	85 c0                	test   eax,eax
c0012b9f:	74 2a                	je     c0012bcb <File::write(unsigned long long, void*, int*)+0x49>
c0012ba1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ba7:	85 c0                	test   eax,eax
c0012ba9:	74 20                	je     c0012bcb <File::write(unsigned long long, void*, int*)+0x49>
c0012bab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012baf:	74 21                	je     c0012bd2 <File::write(unsigned long long, void*, int*)+0x50>
c0012bb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012bb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bc5:	5b                   	pop    ebx
c0012bc6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012bc9:	ff e0                	jmp    eax
c0012bcb:	b8 0b 00 00 00       	mov    eax,0xb
c0012bd0:	eb 05                	jmp    c0012bd7 <File::write(unsigned long long, void*, int*)+0x55>
c0012bd2:	b8 05 00 00 00       	mov    eax,0x5
c0012bd7:	5b                   	pop    ebx
c0012bd8:	c3                   	ret    
c0012bd9:	90                   	nop

c0012bda <Directory::read(unsigned long long, void*, int*)>:
c0012bda:	53                   	push   ebx
c0012bdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012be3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012bea:	3c 19                	cmp    al,0x19
c0012bec:	77 35                	ja     c0012c23 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bee:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0012bf5:	85 c0                	test   eax,eax
c0012bf7:	74 2a                	je     c0012c23 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bf9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bff:	85 c0                	test   eax,eax
c0012c01:	74 20                	je     c0012c23 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012c03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c07:	74 21                	je     c0012c2a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012c09:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c1d:	5b                   	pop    ebx
c0012c1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012c21:	ff e0                	jmp    eax
c0012c23:	b8 0b 00 00 00       	mov    eax,0xb
c0012c28:	eb 05                	jmp    c0012c2f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012c2a:	b8 05 00 00 00       	mov    eax,0x5
c0012c2f:	5b                   	pop    ebx
c0012c30:	c3                   	ret    
c0012c31:	90                   	nop

c0012c32 <Directory::write(unsigned long long, void*, int*)>:
c0012c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012c3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c42:	80 fa 19             	cmp    dl,0x19
c0012c45:	77 18                	ja     c0012c5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c47:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0012c4e:	85 d2                	test   edx,edx
c0012c50:	74 0d                	je     c0012c5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c59:	19 c0                	sbb    eax,eax
c0012c5b:	83 e0 0a             	and    eax,0xa
c0012c5e:	40                   	inc    eax
c0012c5f:	c3                   	ret    

c0012c60 <File::isAtty()>:
c0012c60:	31 c0                	xor    eax,eax
c0012c62:	c3                   	ret    
c0012c63:	90                   	nop

c0012c64 <Directory::isAtty()>:
c0012c64:	31 c0                	xor    eax,eax
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c68:	b8 0a 00 00 00       	mov    eax,0xa
c0012c6d:	c3                   	ret    

c0012c6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c6e:	b8 0a 00 00 00       	mov    eax,0xa
c0012c73:	c3                   	ret    

c0012c74 <Filesystem::allocateSwapfile(char const*, int)>:
c0012c74:	31 c0                	xor    eax,eax
c0012c76:	31 d2                	xor    edx,edx
c0012c78:	c3                   	ret    
c0012c79:	90                   	nop

c0012c7a <File::~File()>:
c0012c7a:	83 ec 0c             	sub    esp,0xc
c0012c7d:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	89 10                	mov    DWORD PTR [eax],edx
c0012c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	50                   	push   eax
c0012c90:	e8 43 e7 ff ff       	call   c00113d8 <UnixFile::~UnixFile()>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	90                   	nop
c0012c99:	83 c4 0c             	add    esp,0xc
c0012c9c:	c3                   	ret    
c0012c9d:	90                   	nop

c0012c9e <File::~File()>:
c0012c9e:	83 ec 0c             	sub    esp,0xc
c0012ca1:	83 ec 0c             	sub    esp,0xc
c0012ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca8:	e8 cd ff ff ff       	call   c0012c7a <File::~File()>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	83 ec 08             	sub    esp,0x8
c0012cb3:	68 14 01 00 00       	push   0x114
c0012cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cbc:	e8 72 fc ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	83 c4 0c             	add    esp,0xc
c0012cc7:	c3                   	ret    

c0012cc8 <Directory::~Directory()>:
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	ba 14 b2 02 c0       	mov    edx,0xc002b214
c0012cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd4:	89 10                	mov    DWORD PTR [eax],edx
c0012cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cda:	83 ec 0c             	sub    esp,0xc
c0012cdd:	50                   	push   eax
c0012cde:	e8 f5 e6 ff ff       	call   c00113d8 <UnixFile::~UnixFile()>
c0012ce3:	83 c4 10             	add    esp,0x10
c0012ce6:	90                   	nop
c0012ce7:	83 c4 0c             	add    esp,0xc
c0012cea:	c3                   	ret    
c0012ceb:	90                   	nop

c0012cec <Directory::~Directory()>:
c0012cec:	83 ec 0c             	sub    esp,0xc
c0012cef:	83 ec 0c             	sub    esp,0xc
c0012cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf6:	e8 cd ff ff ff       	call   c0012cc8 <Directory::~Directory()>
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	83 ec 08             	sub    esp,0x8
c0012d01:	68 14 01 00 00       	push   0x114
c0012d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0a:	e8 24 fc ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	83 c4 0c             	add    esp,0xc
c0012d15:	c3                   	ret    

c0012d16 <Filesystem::Filesystem()>:
c0012d16:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c0012d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d1f:	89 10                	mov    DWORD PTR [eax],edx
c0012d21:	8b 15 d4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7d4
c0012d27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d2b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d32:	a3 d4 e7 02 c0       	mov    ds:0xc002e7d4,eax
c0012d37:	90                   	nop
c0012d38:	c3                   	ret    
c0012d39:	90                   	nop

c0012d3a <Filesystem::~Filesystem()>:
c0012d3a:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c0012d3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d43:	89 10                	mov    DWORD PTR [eax],edx
c0012d45:	90                   	nop
c0012d46:	c3                   	ret    
c0012d47:	90                   	nop

c0012d48 <Filesystem::~Filesystem()>:
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d4f:	e8 e6 ff ff ff       	call   c0012d3a <Filesystem::~Filesystem()>
c0012d54:	83 c4 04             	add    esp,0x4
c0012d57:	83 ec 08             	sub    esp,0x8
c0012d5a:	6a 08                	push   0x8
c0012d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d60:	e8 ce fb ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	83 c4 0c             	add    esp,0xc
c0012d6b:	c3                   	ret    

c0012d6c <Fs::getcwd(Process*, char*, int)>:
c0012d6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d70:	31 c0                	xor    eax,eax
c0012d72:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d75:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d79:	7d 15                	jge    c0012d90 <Fs::getcwd(Process*, char*, int)+0x24>
c0012d7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d7f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012d86:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012d89:	84 c9                	test   cl,cl
c0012d8b:	74 06                	je     c0012d93 <Fs::getcwd(Process*, char*, int)+0x27>
c0012d8d:	40                   	inc    eax
c0012d8e:	eb e2                	jmp    c0012d72 <Fs::getcwd(Process*, char*, int)+0x6>
c0012d90:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012d93:	31 c0                	xor    eax,eax
c0012d95:	c3                   	ret    

c0012d96 <Fs::initVFS()>:
c0012d96:	83 ec 18             	sub    esp,0x18
c0012d99:	6a 08                	push   0x8
c0012d9b:	e8 13 cc ff ff       	call   c000f9b3 <malloc>
c0012da0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012da3:	e8 dc e1 00 00       	call   c0020f84 <FAT::FAT()>
c0012da8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012daf:	e8 ff cb ff ff       	call   c000f9b3 <malloc>
c0012db4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012db7:	e8 d4 f3 00 00       	call   c0022190 <ISO9660::ISO9660()>
c0012dbc:	83 c4 1c             	add    esp,0x1c
c0012dbf:	c3                   	ret    

c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012dc0:	55                   	push   ebp
c0012dc1:	57                   	push   edi
c0012dc2:	56                   	push   esi
c0012dc3:	53                   	push   ebx
c0012dc4:	81 ec 10 04 00 00    	sub    esp,0x410
c0012dca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012dd1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012dd8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ddf:	68 00 04 00 00       	push   0x400
c0012de4:	6a 00                	push   0x0
c0012de6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012dea:	56                   	push   esi
c0012deb:	e8 60 d9 fe ff       	call   c0000750 <memset>
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012df7:	75 0b                	jne    c0012e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012df9:	50                   	push   eax
c0012dfa:	50                   	push   eax
c0012dfb:	57                   	push   edi
c0012dfc:	56                   	push   esi
c0012dfd:	e8 0a da fe ff       	call   c000080c <strcpy>
c0012e02:	eb 41                	jmp    c0012e45 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012e04:	8a 07                	mov    al,BYTE PTR [edi]
c0012e06:	3c 5c                	cmp    al,0x5c
c0012e08:	74 04                	je     c0012e0e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012e0a:	3c 2f                	cmp    al,0x2f
c0012e0c:	75 18                	jne    c0012e26 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012e0e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012e11:	3c 60                	cmp    al,0x60
c0012e13:	7e 03                	jle    c0012e18 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012e15:	83 e8 20             	sub    eax,0x20
c0012e18:	88 04 24             	mov    BYTE PTR [esp],al
c0012e1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e22:	50                   	push   eax
c0012e23:	50                   	push   eax
c0012e24:	eb 18                	jmp    c0012e3e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012e26:	50                   	push   eax
c0012e27:	50                   	push   eax
c0012e28:	55                   	push   ebp
c0012e29:	56                   	push   esi
c0012e2a:	e8 dd d9 fe ff       	call   c000080c <strcpy>
c0012e2f:	5a                   	pop    edx
c0012e30:	59                   	pop    ecx
c0012e31:	68 0a c8 02 c0       	push   0xc002c80a
c0012e36:	56                   	push   esi
c0012e37:	e8 10 db fe ff       	call   c000094c <strcat>
c0012e3c:	5d                   	pop    ebp
c0012e3d:	58                   	pop    eax
c0012e3e:	57                   	push   edi
c0012e3f:	56                   	push   esi
c0012e40:	e8 07 db fe ff       	call   c000094c <strcat>
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012e4b:	3c 60                	cmp    al,0x60
c0012e4d:	7e 03                	jle    c0012e52 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012e4f:	83 e8 20             	sub    eax,0x20
c0012e52:	88 04 24             	mov    BYTE PTR [esp],al
c0012e55:	88 03                	mov    BYTE PTR [ebx],al
c0012e57:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e5e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e64:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e68:	bf 03 00 00 00       	mov    edi,0x3
c0012e6d:	b8 03 00 00 00       	mov    eax,0x3
c0012e72:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012e75:	84 d2                	test   dl,dl
c0012e77:	0f 84 91 00 00 00    	je     c0012f0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012e7d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012e80:	80 fa 5c             	cmp    dl,0x5c
c0012e83:	74 05                	je     c0012e8a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012e85:	80 fa 2f             	cmp    dl,0x2f
c0012e88:	75 12                	jne    c0012e9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e8a:	89 c5                	mov    ebp,eax
c0012e8c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e91:	74 09                	je     c0012e9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e93:	40                   	inc    eax
c0012e94:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012e98:	89 cf                	mov    edi,ecx
c0012e9a:	eb d6                	jmp    c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012e9c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012ea1:	75 5b                	jne    c0012efe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ea3:	80 fa 2e             	cmp    dl,0x2e
c0012ea6:	75 56                	jne    c0012efe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ea8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012eac:	74 19                	je     c0012ec7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012eae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012eb3:	74 53                	je     c0012f08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012eb5:	89 f9                	mov    ecx,edi
c0012eb7:	41                   	inc    ecx
c0012eb8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ebb:	80 fa 2f             	cmp    dl,0x2f
c0012ebe:	74 f7                	je     c0012eb7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ec0:	80 fa 5c             	cmp    dl,0x5c
c0012ec3:	74 f2                	je     c0012eb7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ec5:	eb d1                	jmp    c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ec7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ecc:	74 3a                	je     c0012f08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ece:	83 f8 03             	cmp    eax,0x3
c0012ed1:	74 c5                	je     c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ed3:	41                   	inc    ecx
c0012ed4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ed7:	80 fa 2f             	cmp    dl,0x2f
c0012eda:	74 f7                	je     c0012ed3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012edc:	80 fa 5c             	cmp    dl,0x5c
c0012edf:	74 f2                	je     c0012ed3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ee1:	48                   	dec    eax
c0012ee2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ee6:	75 06                	jne    c0012eee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ee8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012eec:	eb f3                	jmp    c0012ee1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012eee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ef2:	74 07                	je     c0012efb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ef4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ef8:	48                   	dec    eax
c0012ef9:	eb f3                	jmp    c0012eee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012efb:	40                   	inc    eax
c0012efc:	eb 9a                	jmp    c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012efe:	80 fa 2f             	cmp    dl,0x2f
c0012f01:	74 95                	je     c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f03:	80 fa 5c             	cmp    dl,0x5c
c0012f06:	74 90                	je     c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f08:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012f0b:	40                   	inc    eax
c0012f0c:	eb 8a                	jmp    c0012e98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012f0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012f12:	83 ec 0c             	sub    esp,0xc
c0012f15:	53                   	push   ebx
c0012f16:	e8 51 d8 fe ff       	call   c000076c <strlen>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012f23:	75 26                	jne    c0012f4b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012f25:	83 ec 0c             	sub    esp,0xc
c0012f28:	53                   	push   ebx
c0012f29:	e8 3e d8 fe ff       	call   c000076c <strlen>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012f36:	74 26                	je     c0012f5e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	53                   	push   ebx
c0012f3c:	e8 2b d8 fe ff       	call   c000076c <strlen>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f49:	eb c7                	jmp    c0012f12 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012f4b:	83 ec 0c             	sub    esp,0xc
c0012f4e:	53                   	push   ebx
c0012f4f:	e8 18 d8 fe ff       	call   c000076c <strlen>
c0012f54:	83 c4 10             	add    esp,0x10
c0012f57:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f5c:	74 c7                	je     c0012f25 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f5e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f64:	5b                   	pop    ebx
c0012f65:	5e                   	pop    esi
c0012f66:	5f                   	pop    edi
c0012f67:	5d                   	pop    ebp
c0012f68:	c3                   	ret    
c0012f69:	90                   	nop

c0012f6a <File::File(char const*, Process*)>:
c0012f6a:	83 ec 0c             	sub    esp,0xc
c0012f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f71:	83 ec 08             	sub    esp,0x8
c0012f74:	6a 00                	push   0x0
c0012f76:	50                   	push   eax
c0012f77:	e8 7a e2 ff ff       	call   c00111f6 <UnixFile::UnixFile(int)>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	ba f8 b1 02 c0       	mov    edx,0xc002b1f8
c0012f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f88:	89 10                	mov    DWORD PTR [eax],edx
c0012f8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f98:	83 c0 0d             	add    eax,0xd
c0012f9b:	83 ec 04             	sub    esp,0x4
c0012f9e:	52                   	push   edx
c0012f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa3:	50                   	push   eax
c0012fa4:	e8 17 fe ff ff       	call   c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012fb3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012fc8:	90                   	nop
c0012fc9:	83 c4 0c             	add    esp,0xc
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <File::open(FileOpenMode)>:
c0012fce:	53                   	push   ebx
c0012fcf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd4:	83 ec 08             	sub    esp,0x8
c0012fd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fdb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012fe2:	80 fa 19             	cmp    dl,0x19
c0012fe5:	77 40                	ja     c0013027 <File::open(FileOpenMode)+0x59>
c0012fe7:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0012fee:	85 d2                	test   edx,edx
c0012ff0:	74 35                	je     c0013027 <File::open(FileOpenMode)+0x59>
c0012ff2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ff8:	85 d2                	test   edx,edx
c0012ffa:	74 2b                	je     c0013027 <File::open(FileOpenMode)+0x59>
c0012ffc:	b8 06 00 00 00       	mov    eax,0x6
c0013001:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013005:	75 20                	jne    c0013027 <File::open(FileOpenMode)+0x59>
c0013007:	8b 02                	mov    eax,DWORD PTR [edx]
c0013009:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001300f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013013:	51                   	push   ecx
c0013014:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013017:	51                   	push   ecx
c0013018:	52                   	push   edx
c0013019:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	85 c0                	test   eax,eax
c0013021:	75 04                	jne    c0013027 <File::open(FileOpenMode)+0x59>
c0013023:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013027:	83 c4 08             	add    esp,0x8
c001302a:	5b                   	pop    ebx
c001302b:	c3                   	ret    

c001302c <File::close()>:
c001302c:	53                   	push   ebx
c001302d:	b8 0b 00 00 00       	mov    eax,0xb
c0013032:	83 ec 08             	sub    esp,0x8
c0013035:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013039:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013040:	80 fa 19             	cmp    dl,0x19
c0013043:	77 41                	ja     c0013086 <File::close()+0x5a>
c0013045:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c001304c:	85 db                	test   ebx,ebx
c001304e:	74 36                	je     c0013086 <File::close()+0x5a>
c0013050:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013057:	74 2d                	je     c0013086 <File::close()+0x5a>
c0013059:	b8 05 00 00 00       	mov    eax,0x5
c001305e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013062:	74 22                	je     c0013086 <File::close()+0x5a>
c0013064:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013068:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c001306f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013075:	53                   	push   ebx
c0013076:	53                   	push   ebx
c0013077:	8b 10                	mov    edx,DWORD PTR [eax]
c0013079:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001307f:	50                   	push   eax
c0013080:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	83 c4 08             	add    esp,0x8
c0013089:	5b                   	pop    ebx
c001308a:	c3                   	ret    
c001308b:	90                   	nop

c001308c <File::seek(unsigned long long)>:
c001308c:	56                   	push   esi
c001308d:	53                   	push   ebx
c001308e:	b8 0b 00 00 00       	mov    eax,0xb
c0013093:	51                   	push   ecx
c0013094:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013098:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001309c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00130a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130a7:	80 fa 19             	cmp    dl,0x19
c00130aa:	77 31                	ja     c00130dd <File::seek(unsigned long long)+0x51>
c00130ac:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00130b3:	85 d2                	test   edx,edx
c00130b5:	74 26                	je     c00130dd <File::seek(unsigned long long)+0x51>
c00130b7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130bd:	85 d2                	test   edx,edx
c00130bf:	74 1c                	je     c00130dd <File::seek(unsigned long long)+0x51>
c00130c1:	b8 05 00 00 00       	mov    eax,0x5
c00130c6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00130ca:	74 11                	je     c00130dd <File::seek(unsigned long long)+0x51>
c00130cc:	8b 02                	mov    eax,DWORD PTR [edx]
c00130ce:	53                   	push   ebx
c00130cf:	51                   	push   ecx
c00130d0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00130d6:	52                   	push   edx
c00130d7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00130da:	83 c4 10             	add    esp,0x10
c00130dd:	5a                   	pop    edx
c00130de:	5b                   	pop    ebx
c00130df:	5e                   	pop    esi
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <File::tell(unsigned long long*)>:
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	b8 0b 00 00 00       	mov    eax,0xb
c00130ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130ee:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130f5:	80 fa 19             	cmp    dl,0x19
c00130f8:	77 34                	ja     c001312e <File::tell(unsigned long long*)+0x4c>
c00130fa:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013101:	85 d2                	test   edx,edx
c0013103:	74 29                	je     c001312e <File::tell(unsigned long long*)+0x4c>
c0013105:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001310b:	85 d2                	test   edx,edx
c001310d:	74 1f                	je     c001312e <File::tell(unsigned long long*)+0x4c>
c001310f:	b8 05 00 00 00       	mov    eax,0x5
c0013114:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013118:	74 14                	je     c001312e <File::tell(unsigned long long*)+0x4c>
c001311a:	50                   	push   eax
c001311b:	8b 02                	mov    eax,DWORD PTR [edx]
c001311d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013121:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013127:	52                   	push   edx
c0013128:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001312b:	83 c4 10             	add    esp,0x10
c001312e:	83 c4 0c             	add    esp,0xc
c0013131:	c3                   	ret    

c0013132 <File::rewind()>:
c0013132:	83 ec 10             	sub    esp,0x10
c0013135:	6a 00                	push   0x0
c0013137:	6a 00                	push   0x0
c0013139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313d:	e8 4a ff ff ff       	call   c001308c <File::seek(unsigned long long)>
c0013142:	83 c4 1c             	add    esp,0x1c
c0013145:	c3                   	ret    

c0013146 <File::unlink()>:
c0013146:	83 ec 0c             	sub    esp,0xc
c0013149:	b8 0b 00 00 00       	mov    eax,0xb
c001314e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013152:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013159:	80 f9 19             	cmp    cl,0x19
c001315c:	77 2f                	ja     c001318d <File::unlink()+0x47>
c001315e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013165:	85 c9                	test   ecx,ecx
c0013167:	74 24                	je     c001318d <File::unlink()+0x47>
c0013169:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 1a                	je     c001318d <File::unlink()+0x47>
c0013173:	b8 06 00 00 00       	mov    eax,0x6
c0013178:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001317c:	75 0f                	jne    c001318d <File::unlink()+0x47>
c001317e:	83 c2 0d             	add    edx,0xd
c0013181:	50                   	push   eax
c0013182:	50                   	push   eax
c0013183:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013185:	52                   	push   edx
c0013186:	51                   	push   ecx
c0013187:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	83 c4 0c             	add    esp,0xc
c0013190:	c3                   	ret    
c0013191:	90                   	nop

c0013192 <File::rename(char const*)>:
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	b8 0b 00 00 00       	mov    eax,0xb
c001319a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001319e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131a5:	80 f9 19             	cmp    cl,0x19
c00131a8:	77 32                	ja     c00131dc <File::rename(char const*)+0x4a>
c00131aa:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00131b1:	85 c9                	test   ecx,ecx
c00131b3:	74 27                	je     c00131dc <File::rename(char const*)+0x4a>
c00131b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131bb:	85 c9                	test   ecx,ecx
c00131bd:	74 1d                	je     c00131dc <File::rename(char const*)+0x4a>
c00131bf:	b8 06 00 00 00       	mov    eax,0x6
c00131c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131c8:	75 12                	jne    c00131dc <File::rename(char const*)+0x4a>
c00131ca:	83 c2 0d             	add    edx,0xd
c00131cd:	50                   	push   eax
c00131ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131d4:	52                   	push   edx
c00131d5:	51                   	push   ecx
c00131d6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	83 c4 0c             	add    esp,0xc
c00131df:	c3                   	ret    

c00131e0 <File::chfatattr(unsigned char, unsigned char)>:
c00131e0:	57                   	push   edi
c00131e1:	b8 0b 00 00 00       	mov    eax,0xb
c00131e6:	56                   	push   esi
c00131e7:	53                   	push   ebx
c00131e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00131fb:	80 f9 19             	cmp    cl,0x19
c00131fe:	77 37                	ja     c0013237 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013200:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013207:	85 c9                	test   ecx,ecx
c0013209:	74 2c                	je     c0013237 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001320b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013211:	85 c9                	test   ecx,ecx
c0013213:	74 22                	je     c0013237 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013215:	b8 06 00 00 00       	mov    eax,0x6
c001321a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001321e:	75 17                	jne    c0013237 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013220:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013222:	89 f0                	mov    eax,esi
c0013224:	83 c2 0d             	add    edx,0xd
c0013227:	0f b6 f0             	movzx  esi,al
c001322a:	0f b6 db             	movzx  ebx,bl
c001322d:	56                   	push   esi
c001322e:	53                   	push   ebx
c001322f:	52                   	push   edx
c0013230:	51                   	push   ecx
c0013231:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	5b                   	pop    ebx
c0013238:	5e                   	pop    esi
c0013239:	5f                   	pop    edi
c001323a:	c3                   	ret    
c001323b:	90                   	nop

c001323c <File::exists()>:
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	31 c0                	xor    eax,eax
c0013241:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013245:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001324c:	80 f9 19             	cmp    cl,0x19
c001324f:	77 24                	ja     c0013275 <File::exists()+0x39>
c0013251:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013258:	85 c9                	test   ecx,ecx
c001325a:	74 19                	je     c0013275 <File::exists()+0x39>
c001325c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013262:	85 c9                	test   ecx,ecx
c0013264:	74 0f                	je     c0013275 <File::exists()+0x39>
c0013266:	83 c2 0d             	add    edx,0xd
c0013269:	50                   	push   eax
c001326a:	50                   	push   eax
c001326b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001326d:	52                   	push   edx
c001326e:	51                   	push   ecx
c001326f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	83 c4 0c             	add    esp,0xc
c0013278:	c3                   	ret    
c0013279:	90                   	nop

c001327a <File::stat(unsigned long long*, bool*)>:
c001327a:	56                   	push   esi
c001327b:	53                   	push   ebx
c001327c:	50                   	push   eax
c001327d:	b8 0b 00 00 00       	mov    eax,0xb
c0013282:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013286:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001328a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013291:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013295:	80 f9 19             	cmp    cl,0x19
c0013298:	77 3d                	ja     c00132d7 <File::stat(unsigned long long*, bool*)+0x5d>
c001329a:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00132a1:	85 c9                	test   ecx,ecx
c00132a3:	74 32                	je     c00132d7 <File::stat(unsigned long long*, bool*)+0x5d>
c00132a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ab:	85 c9                	test   ecx,ecx
c00132ad:	74 28                	je     c00132d7 <File::stat(unsigned long long*, bool*)+0x5d>
c00132af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132b5:	74 13                	je     c00132ca <File::stat(unsigned long long*, bool*)+0x50>
c00132b7:	83 ec 04             	sub    esp,0x4
c00132ba:	56                   	push   esi
c00132bb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00132c1:	51                   	push   ecx
c00132c2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00132c5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00132c8:	eb 0a                	jmp    c00132d4 <File::stat(unsigned long long*, bool*)+0x5a>
c00132ca:	53                   	push   ebx
c00132cb:	83 c2 0d             	add    edx,0xd
c00132ce:	56                   	push   esi
c00132cf:	52                   	push   edx
c00132d0:	51                   	push   ecx
c00132d1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	5a                   	pop    edx
c00132d8:	5b                   	pop    ebx
c00132d9:	5e                   	pop    esi
c00132da:	c3                   	ret    

c00132db <Fs::setcwd(Process*, char*)>:
c00132db:	55                   	push   ebp
c00132dc:	57                   	push   edi
c00132dd:	56                   	push   esi
c00132de:	53                   	push   ebx
c00132df:	81 ec 20 02 00 00    	sub    esp,0x220
c00132e5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00132ec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00132f2:	57                   	push   edi
c00132f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00132fa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00132fe:	56                   	push   esi
c00132ff:	e8 bc fa ff ff       	call   c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013304:	89 34 24             	mov    DWORD PTR [esp],esi
c0013307:	e8 60 d4 fe ff       	call   c000076c <strlen>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	83 f8 02             	cmp    eax,0x2
c0013312:	77 17                	ja     c001332b <Fs::setcwd(Process*, char*)+0x50>
c0013314:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013319:	83 e8 41             	sub    eax,0x41
c001331c:	83 f8 19             	cmp    eax,0x19
c001331f:	76 24                	jbe    c0013345 <Fs::setcwd(Process*, char*)+0x6a>
c0013321:	b8 03 00 00 00       	mov    eax,0x3
c0013326:	e9 e0 00 00 00       	jmp    c001340b <Fs::setcwd(Process*, char*)+0x130>
c001332b:	83 ec 0c             	sub    esp,0xc
c001332e:	56                   	push   esi
c001332f:	e8 38 d4 fe ff       	call   c000076c <strlen>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	83 f8 03             	cmp    eax,0x3
c001333a:	75 34                	jne    c0013370 <Fs::setcwd(Process*, char*)+0x95>
c001333c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013341:	75 2d                	jne    c0013370 <Fs::setcwd(Process*, char*)+0x95>
c0013343:	eb cf                	jmp    c0013314 <Fs::setcwd(Process*, char*)+0x39>
c0013345:	8b 14 85 60 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13a0]
c001334c:	b8 05 00 00 00       	mov    eax,0x5
c0013351:	85 d2                	test   edx,edx
c0013353:	0f 84 b2 00 00 00    	je     c001340b <Fs::setcwd(Process*, char*)+0x130>
c0013359:	b8 06 00 00 00       	mov    eax,0x6
c001335e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013365:	0f 85 92 00 00 00    	jne    c00133fd <Fs::setcwd(Process*, char*)+0x122>
c001336b:	e9 9b 00 00 00       	jmp    c001340b <Fs::setcwd(Process*, char*)+0x130>
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	68 14 01 00 00       	push   0x114
c0013378:	e8 36 c6 ff ff       	call   c000f9b3 <malloc>
c001337d:	83 c4 0c             	add    esp,0xc
c0013380:	89 c3                	mov    ebx,eax
c0013382:	55                   	push   ebp
c0013383:	56                   	push   esi
c0013384:	50                   	push   eax
c0013385:	e8 e0 fb ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001338a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001338f:	83 c4 0c             	add    esp,0xc
c0013392:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013396:	50                   	push   eax
c0013397:	8d 44 24 10          	lea    eax,[esp+0x10]
c001339b:	50                   	push   eax
c001339c:	53                   	push   ebx
c001339d:	e8 d8 fe ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	83 f8 02             	cmp    eax,0x2
c00133a8:	74 04                	je     c00133ae <Fs::setcwd(Process*, char*)+0xd3>
c00133aa:	85 c0                	test   eax,eax
c00133ac:	74 1c                	je     c00133ca <Fs::setcwd(Process*, char*)+0xef>
c00133ae:	b8 01 00 00 00       	mov    eax,0x1
c00133b3:	85 db                	test   ebx,ebx
c00133b5:	74 54                	je     c001340b <Fs::setcwd(Process*, char*)+0x130>
c00133b7:	83 ec 0c             	sub    esp,0xc
c00133ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133bc:	53                   	push   ebx
c00133bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	b8 01 00 00 00       	mov    eax,0x1
c00133c8:	eb 41                	jmp    c001340b <Fs::setcwd(Process*, char*)+0x130>
c00133ca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00133cf:	75 1c                	jne    c00133ed <Fs::setcwd(Process*, char*)+0x112>
c00133d1:	b8 02 00 00 00       	mov    eax,0x2
c00133d6:	85 db                	test   ebx,ebx
c00133d8:	74 31                	je     c001340b <Fs::setcwd(Process*, char*)+0x130>
c00133da:	83 ec 0c             	sub    esp,0xc
c00133dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133df:	53                   	push   ebx
c00133e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	b8 02 00 00 00       	mov    eax,0x2
c00133eb:	eb 1e                	jmp    c001340b <Fs::setcwd(Process*, char*)+0x130>
c00133ed:	85 db                	test   ebx,ebx
c00133ef:	74 0c                	je     c00133fd <Fs::setcwd(Process*, char*)+0x122>
c00133f1:	83 ec 0c             	sub    esp,0xc
c00133f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133f6:	53                   	push   ebx
c00133f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	50                   	push   eax
c00133fe:	50                   	push   eax
c00133ff:	56                   	push   esi
c0013400:	57                   	push   edi
c0013401:	e8 06 d4 fe ff       	call   c000080c <strcpy>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	31 c0                	xor    eax,eax
c001340b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013411:	5b                   	pop    ebx
c0013412:	5e                   	pop    esi
c0013413:	5f                   	pop    edi
c0013414:	5d                   	pop    ebp
c0013415:	c3                   	ret    

c0013416 <Directory::Directory(char const*, Process*)>:
c0013416:	83 ec 0c             	sub    esp,0xc
c0013419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341d:	83 ec 08             	sub    esp,0x8
c0013420:	6a 00                	push   0x0
c0013422:	50                   	push   eax
c0013423:	e8 ce dd ff ff       	call   c00111f6 <UnixFile::UnixFile(int)>
c0013428:	83 c4 10             	add    esp,0x10
c001342b:	ba 14 b2 02 c0       	mov    edx,0xc002b214
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	89 10                	mov    DWORD PTR [eax],edx
c0013436:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001343a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	83 c0 0d             	add    eax,0xd
c0013447:	83 ec 04             	sub    esp,0x4
c001344a:	52                   	push   edx
c001344b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344f:	50                   	push   eax
c0013450:	e8 6b f9 ff ff       	call   c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001345f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013466:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013470:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013474:	90                   	nop
c0013475:	83 c4 0c             	add    esp,0xc
c0013478:	c3                   	ret    
c0013479:	90                   	nop

c001347a <Directory::open()>:
c001347a:	53                   	push   ebx
c001347b:	b8 0b 00 00 00       	mov    eax,0xb
c0013480:	83 ec 08             	sub    esp,0x8
c0013483:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013487:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001348e:	80 fa 19             	cmp    dl,0x19
c0013491:	77 3d                	ja     c00134d0 <Directory::open()+0x56>
c0013493:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c001349a:	85 d2                	test   edx,edx
c001349c:	74 32                	je     c00134d0 <Directory::open()+0x56>
c001349e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134a4:	85 d2                	test   edx,edx
c00134a6:	74 28                	je     c00134d0 <Directory::open()+0x56>
c00134a8:	b8 06 00 00 00       	mov    eax,0x6
c00134ad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134b1:	75 1d                	jne    c00134d0 <Directory::open()+0x56>
c00134b3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134b9:	50                   	push   eax
c00134ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00134bc:	51                   	push   ecx
c00134bd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134c0:	51                   	push   ecx
c00134c1:	52                   	push   edx
c00134c2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00134c5:	83 c4 10             	add    esp,0x10
c00134c8:	85 c0                	test   eax,eax
c00134ca:	75 04                	jne    c00134d0 <Directory::open()+0x56>
c00134cc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134d0:	83 c4 08             	add    esp,0x8
c00134d3:	5b                   	pop    ebx
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <Directory::close()>:
c00134d6:	53                   	push   ebx
c00134d7:	b8 0b 00 00 00       	mov    eax,0xb
c00134dc:	83 ec 08             	sub    esp,0x8
c00134df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134e3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134ea:	80 fa 19             	cmp    dl,0x19
c00134ed:	77 41                	ja     c0013530 <Directory::close()+0x5a>
c00134ef:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c00134f6:	85 db                	test   ebx,ebx
c00134f8:	74 36                	je     c0013530 <Directory::close()+0x5a>
c00134fa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013501:	74 2d                	je     c0013530 <Directory::close()+0x5a>
c0013503:	b8 05 00 00 00       	mov    eax,0x5
c0013508:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001350c:	74 22                	je     c0013530 <Directory::close()+0x5a>
c001350e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013512:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c0013519:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001351f:	53                   	push   ebx
c0013520:	53                   	push   ebx
c0013521:	8b 10                	mov    edx,DWORD PTR [eax]
c0013523:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013529:	50                   	push   eax
c001352a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001352d:	83 c4 10             	add    esp,0x10
c0013530:	83 c4 08             	add    esp,0x8
c0013533:	5b                   	pop    ebx
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Directory::unlink()>:
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	b8 0b 00 00 00       	mov    eax,0xb
c001353e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013542:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013549:	80 f9 19             	cmp    cl,0x19
c001354c:	77 2f                	ja     c001357d <Directory::unlink()+0x47>
c001354e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013555:	85 c9                	test   ecx,ecx
c0013557:	74 24                	je     c001357d <Directory::unlink()+0x47>
c0013559:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001355f:	85 c9                	test   ecx,ecx
c0013561:	74 1a                	je     c001357d <Directory::unlink()+0x47>
c0013563:	b8 06 00 00 00       	mov    eax,0x6
c0013568:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001356c:	75 0f                	jne    c001357d <Directory::unlink()+0x47>
c001356e:	83 c2 0d             	add    edx,0xd
c0013571:	50                   	push   eax
c0013572:	50                   	push   eax
c0013573:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013575:	52                   	push   edx
c0013576:	51                   	push   ecx
c0013577:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	83 c4 0c             	add    esp,0xc
c0013580:	c3                   	ret    
c0013581:	90                   	nop

c0013582 <Directory::rename(char const*)>:
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	b8 0b 00 00 00       	mov    eax,0xb
c001358a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013595:	80 f9 19             	cmp    cl,0x19
c0013598:	77 32                	ja     c00135cc <Directory::rename(char const*)+0x4a>
c001359a:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00135a1:	85 c9                	test   ecx,ecx
c00135a3:	74 27                	je     c00135cc <Directory::rename(char const*)+0x4a>
c00135a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ab:	85 c9                	test   ecx,ecx
c00135ad:	74 1d                	je     c00135cc <Directory::rename(char const*)+0x4a>
c00135af:	b8 06 00 00 00       	mov    eax,0x6
c00135b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b8:	75 12                	jne    c00135cc <Directory::rename(char const*)+0x4a>
c00135ba:	83 c2 0d             	add    edx,0xd
c00135bd:	50                   	push   eax
c00135be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135c4:	52                   	push   edx
c00135c5:	51                   	push   ecx
c00135c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	83 c4 0c             	add    esp,0xc
c00135cf:	c3                   	ret    

c00135d0 <Directory::exists()>:
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	31 c0                	xor    eax,eax
c00135d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135e0:	80 f9 19             	cmp    cl,0x19
c00135e3:	77 24                	ja     c0013609 <Directory::exists()+0x39>
c00135e5:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00135ec:	85 c9                	test   ecx,ecx
c00135ee:	74 19                	je     c0013609 <Directory::exists()+0x39>
c00135f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f6:	85 c9                	test   ecx,ecx
c00135f8:	74 0f                	je     c0013609 <Directory::exists()+0x39>
c00135fa:	83 c2 0d             	add    edx,0xd
c00135fd:	50                   	push   eax
c00135fe:	50                   	push   eax
c00135ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013601:	52                   	push   edx
c0013602:	51                   	push   ecx
c0013603:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	83 c4 0c             	add    esp,0xc
c001360c:	c3                   	ret    
c001360d:	90                   	nop

c001360e <Directory::read(dirent*)>:
c001360e:	83 ec 1c             	sub    esp,0x1c
c0013611:	b8 0b 00 00 00       	mov    eax,0xb
c0013616:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001361a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013621:	80 fa 19             	cmp    dl,0x19
c0013624:	77 30                	ja     c0013656 <Directory::read(dirent*)+0x48>
c0013626:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c001362d:	85 d2                	test   edx,edx
c001362f:	74 25                	je     c0013656 <Directory::read(dirent*)+0x48>
c0013631:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013638:	74 1c                	je     c0013656 <Directory::read(dirent*)+0x48>
c001363a:	83 ec 0c             	sub    esp,0xc
c001363d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001363f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013643:	52                   	push   edx
c0013644:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013648:	6a 00                	push   0x0
c001364a:	68 10 01 00 00       	push   0x110
c001364f:	51                   	push   ecx
c0013650:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013653:	83 c4 20             	add    esp,0x20
c0013656:	83 c4 1c             	add    esp,0x1c
c0013659:	c3                   	ret    

c001365a <Directory::create()>:
c001365a:	83 ec 0c             	sub    esp,0xc
c001365d:	b8 0b 00 00 00       	mov    eax,0xb
c0013662:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013666:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366d:	80 f9 19             	cmp    cl,0x19
c0013670:	77 2f                	ja     c00136a1 <Directory::create()+0x47>
c0013672:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013679:	85 c9                	test   ecx,ecx
c001367b:	74 24                	je     c00136a1 <Directory::create()+0x47>
c001367d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013683:	85 c9                	test   ecx,ecx
c0013685:	74 1a                	je     c00136a1 <Directory::create()+0x47>
c0013687:	b8 06 00 00 00       	mov    eax,0x6
c001368c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013690:	75 0f                	jne    c00136a1 <Directory::create()+0x47>
c0013692:	83 c2 0d             	add    edx,0xd
c0013695:	50                   	push   eax
c0013696:	50                   	push   eax
c0013697:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013699:	52                   	push   edx
c001369a:	51                   	push   ecx
c001369b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	83 c4 0c             	add    esp,0xc
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop

c00136a6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00136a6:	b8 0a 00 00 00       	mov    eax,0xa
c00136ab:	c3                   	ret    

c00136ac <Bus::Bus(char const*)>:
c00136ac:	83 ec 0c             	sub    esp,0xc
c00136af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b3:	83 ec 08             	sub    esp,0x8
c00136b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ba:	50                   	push   eax
c00136bb:	e8 88 09 00 00       	call   c0014048 <Device::Device(char const*)>
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	ba 30 b2 02 c0       	mov    edx,0xc002b230
c00136c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136cc:	89 10                	mov    DWORD PTR [eax],edx
c00136ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00136dc:	90                   	nop
c00136dd:	83 c4 0c             	add    esp,0xc
c00136e0:	c3                   	ret    
c00136e1:	90                   	nop

c00136e2 <Bus::~Bus()>:
c00136e2:	83 ec 0c             	sub    esp,0xc
c00136e5:	ba 30 b2 02 c0       	mov    edx,0xc002b230
c00136ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ee:	89 10                	mov    DWORD PTR [eax],edx
c00136f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f4:	83 ec 0c             	sub    esp,0xc
c00136f7:	50                   	push   eax
c00136f8:	e8 15 06 00 00       	call   c0013d12 <Device::~Device()>
c00136fd:	83 c4 10             	add    esp,0x10
c0013700:	90                   	nop
c0013701:	83 c4 0c             	add    esp,0xc
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <Bus::~Bus()>:
c0013706:	83 ec 0c             	sub    esp,0xc
c0013709:	83 ec 0c             	sub    esp,0xc
c001370c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013710:	e8 cd ff ff ff       	call   c00136e2 <Bus::~Bus()>
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	83 ec 08             	sub    esp,0x8
c001371b:	68 58 01 00 00       	push   0x158
c0013720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013724:	e8 0a f2 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	83 c4 0c             	add    esp,0xc
c001372f:	c3                   	ret    

c0013730 <Buzzer::Buzzer(char const*)>:
c0013730:	83 ec 0c             	sub    esp,0xc
c0013733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013737:	83 ec 08             	sub    esp,0x8
c001373a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001373e:	50                   	push   eax
c001373f:	e8 04 09 00 00       	call   c0014048 <Device::Device(char const*)>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c001374c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013750:	89 10                	mov    DWORD PTR [eax],edx
c0013752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013756:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013764:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001376e:	90                   	nop
c001376f:	83 c4 0c             	add    esp,0xc
c0013772:	c3                   	ret    
c0013773:	90                   	nop

c0013774 <Buzzer::~Buzzer()>:
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	89 10                	mov    DWORD PTR [eax],edx
c0013782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013786:	83 ec 0c             	sub    esp,0xc
c0013789:	50                   	push   eax
c001378a:	e8 83 05 00 00       	call   c0013d12 <Device::~Device()>
c001378f:	83 c4 10             	add    esp,0x10
c0013792:	90                   	nop
c0013793:	83 c4 0c             	add    esp,0xc
c0013796:	c3                   	ret    
c0013797:	90                   	nop

c0013798 <Buzzer::~Buzzer()>:
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a2:	e8 cd ff ff ff       	call   c0013774 <Buzzer::~Buzzer()>
c00137a7:	83 c4 10             	add    esp,0x10
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	68 5c 01 00 00       	push   0x15c
c00137b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b6:	e8 78 f1 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	83 c4 0c             	add    esp,0xc
c00137c1:	c3                   	ret    

c00137c2 <Buzzer::stop()>:
c00137c2:	83 ec 14             	sub    esp,0x14
c00137c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00137cb:	6a 00                	push   0x0
c00137cd:	50                   	push   eax
c00137ce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137d1:	83 c4 1c             	add    esp,0x1c
c00137d4:	c3                   	ret    

c00137d5 <beepThread(void*)>:
c00137d5:	53                   	push   ebx
c00137d6:	83 ec 08             	sub    esp,0x8
c00137d9:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00137de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137e2:	48                   	dec    eax
c00137e3:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00137e8:	75 01                	jne    c00137eb <beepThread(void*)+0x16>
c00137ea:	fb                   	sti    
c00137eb:	50                   	push   eax
c00137ec:	50                   	push   eax
c00137ed:	b8 40 42 0f 00       	mov    eax,0xf4240
c00137f2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00137f8:	52                   	push   edx
c00137f9:	50                   	push   eax
c00137fa:	e8 16 aa 00 00       	call   c001e215 <nanoSleep(unsigned long long)>
c00137ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013802:	e8 bb ff ff ff       	call   c00137c2 <Buzzer::stop()>
c0013807:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001380f:	83 c4 18             	add    esp,0x18
c0013812:	5b                   	pop    ebx
c0013813:	e9 f9 a8 00 00       	jmp    c001e111 <blockTask(TaskState)>

c0013818 <Buzzer::beep(int, int, bool)>:
c0013818:	57                   	push   edi
c0013819:	56                   	push   esi
c001381a:	53                   	push   ebx
c001381b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001381f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013823:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013827:	52                   	push   edx
c0013828:	52                   	push   edx
c0013829:	8b 06                	mov    eax,DWORD PTR [esi]
c001382b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001382f:	56                   	push   esi
c0013830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	89 f8                	mov    eax,edi
c0013838:	84 c0                	test   al,al
c001383a:	74 1f                	je     c001385b <Buzzer::beep(int, int, bool)+0x43>
c001383c:	50                   	push   eax
c001383d:	50                   	push   eax
c001383e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013844:	99                   	cdq    
c0013845:	52                   	push   edx
c0013846:	50                   	push   eax
c0013847:	e8 c9 a9 00 00       	call   c001e215 <nanoSleep(unsigned long long)>
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013853:	5b                   	pop    ebx
c0013854:	5e                   	pop    esi
c0013855:	5f                   	pop    edi
c0013856:	e9 67 ff ff ff       	jmp    c00137c2 <Buzzer::stop()>
c001385b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013861:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0013866:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001386e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013872:	c7 44 24 14 d5 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc00137d5
c001387a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001387e:	5b                   	pop    ebx
c001387f:	5e                   	pop    esi
c0013880:	5f                   	pop    edi
c0013881:	e9 90 a4 00 00       	jmp    c001dd16 <Process::createThread(void (*)(void*), void*, int)>

c0013886 <User::loadClockSettings(int)>:
c0013886:	53                   	push   ebx
c0013887:	83 ec 14             	sub    esp,0x14
c001388a:	68 14 01 00 00       	push   0x114
c001388f:	e8 1f c1 ff ff       	call   c000f9b3 <malloc>
c0013894:	83 c4 0c             	add    esp,0xc
c0013897:	89 c3                	mov    ebx,eax
c0013899:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001389f:	68 84 b2 02 c0       	push   0xc002b284
c00138a4:	50                   	push   eax
c00138a5:	e8 c0 f6 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c00138aa:	58                   	pop    eax
c00138ab:	5a                   	pop    edx
c00138ac:	6a 01                	push   0x1
c00138ae:	53                   	push   ebx
c00138af:	e8 1a f7 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c00138b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138b7:	e8 70 f7 ff ff       	call   c001302c <File::close()>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	85 db                	test   ebx,ebx
c00138c1:	74 0f                	je     c00138d2 <User::loadClockSettings(int)+0x4c>
c00138c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00138c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00138cc:	83 c4 08             	add    esp,0x8
c00138cf:	5b                   	pop    ebx
c00138d0:	ff e0                	jmp    eax
c00138d2:	83 c4 08             	add    esp,0x8
c00138d5:	5b                   	pop    ebx
c00138d6:	c3                   	ret    
c00138d7:	90                   	nop

c00138d8 <Clock::Clock(char const*)>:
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138df:	83 ec 08             	sub    esp,0x8
c00138e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e6:	50                   	push   eax
c00138e7:	e8 5c 07 00 00       	call   c0014048 <Device::Device(char const*)>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	ba ac b2 02 c0       	mov    edx,0xc002b2ac
c00138f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f8:	89 10                	mov    DWORD PTR [eax],edx
c00138fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013908:	90                   	nop
c0013909:	83 c4 0c             	add    esp,0xc
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <Clock::~Clock()>:
c001390e:	83 ec 0c             	sub    esp,0xc
c0013911:	ba ac b2 02 c0       	mov    edx,0xc002b2ac
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	89 10                	mov    DWORD PTR [eax],edx
c001391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	50                   	push   eax
c0013924:	e8 e9 03 00 00       	call   c0013d12 <Device::~Device()>
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	90                   	nop
c001392d:	83 c4 0c             	add    esp,0xc
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <Clock::~Clock()>:
c0013932:	83 ec 0c             	sub    esp,0xc
c0013935:	83 ec 0c             	sub    esp,0xc
c0013938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001393c:	e8 cd ff ff ff       	call   c001390e <Clock::~Clock()>
c0013941:	83 c4 10             	add    esp,0x10
c0013944:	83 ec 08             	sub    esp,0x8
c0013947:	68 58 01 00 00       	push   0x158
c001394c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013950:	e8 de ef ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0013955:	83 c4 10             	add    esp,0x10
c0013958:	83 c4 0c             	add    esp,0xc
c001395b:	c3                   	ret    

c001395c <Clock::timeInSecondsLocal()>:
c001395c:	53                   	push   ebx
c001395d:	83 ec 14             	sub    esp,0x14
c0013960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013964:	8b 10                	mov    edx,DWORD PTR [eax]
c0013966:	50                   	push   eax
c0013967:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001396a:	0f b6 0d dc e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7dc
c0013971:	03 0d e0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7e0
c0013977:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001397d:	89 cb                	mov    ebx,ecx
c001397f:	c1 fb 1f             	sar    ebx,0x1f
c0013982:	01 c8                	add    eax,ecx
c0013984:	11 da                	adc    edx,ebx
c0013986:	83 c4 10             	add    esp,0x10
c0013989:	31 c9                	xor    ecx,ecx
c001398b:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c0013992:	74 05                	je     c0013999 <Clock::timeInSecondsLocal()+0x3d>
c0013994:	b9 08 07 00 00       	mov    ecx,0x708
c0013999:	31 db                	xor    ebx,ebx
c001399b:	01 c8                	add    eax,ecx
c001399d:	11 da                	adc    edx,ebx
c001399f:	83 c4 08             	add    esp,0x8
c00139a2:	5b                   	pop    ebx
c00139a3:	c3                   	ret    

c00139a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00139a4:	57                   	push   edi
c00139a5:	56                   	push   esi
c00139a6:	53                   	push   ebx
c00139a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139b5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00139b8:	0f b6 05 dc e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e7dc
c00139bf:	03 05 e0 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7e0
c00139c5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00139cb:	99                   	cdq    
c00139cc:	29 c6                	sub    esi,eax
c00139ce:	19 d7                	sbb    edi,edx
c00139d0:	89 f0                	mov    eax,esi
c00139d2:	89 fa                	mov    edx,edi
c00139d4:	31 f6                	xor    esi,esi
c00139d6:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c00139dd:	74 05                	je     c00139e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00139df:	be 08 07 00 00       	mov    esi,0x708
c00139e4:	31 ff                	xor    edi,edi
c00139e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00139ea:	29 f0                	sub    eax,esi
c00139ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139f0:	19 fa                	sbb    edx,edi
c00139f2:	89 d8                	mov    eax,ebx
c00139f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	5f                   	pop    edi
c00139fb:	ff e0                	jmp    eax

c00139fd <datetimeToSeconds(datetime_t)>:
c00139fd:	55                   	push   ebp
c00139fe:	57                   	push   edi
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	83 ec 14             	sub    esp,0x14
c0013a04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013a08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013a0c:	89 d3                	mov    ebx,edx
c0013a0e:	0f b6 c6             	movzx  eax,dh
c0013a11:	c1 eb 10             	shr    ebx,0x10
c0013a14:	48                   	dec    eax
c0013a15:	66 81 eb 6c 07       	sub    bx,0x76c
c0013a1a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013a1e:	0f b6 f5             	movzx  esi,ch
c0013a21:	89 cf                	mov    edi,ecx
c0013a23:	6b f6 3c             	imul   esi,esi,0x3c
c0013a26:	c1 ef 10             	shr    edi,0x10
c0013a29:	0f b6 c9             	movzx  ecx,cl
c0013a2c:	89 f8                	mov    eax,edi
c0013a2e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a34:	0f b6 f8             	movzx  edi,al
c0013a37:	0f b6 d2             	movzx  edx,dl
c0013a3a:	01 fe                	add    esi,edi
c0013a3c:	01 f1                	add    ecx,esi
c0013a3e:	0f b7 f3             	movzx  esi,bx
c0013a41:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013a45:	c1 f9 1f             	sar    ecx,0x1f
c0013a48:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013a4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a51:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a56:	8b 0c 8d e0 b2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4d20]
c0013a5d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a61:	76 29                	jbe    c0013a8c <datetimeToSeconds(datetime_t)+0x8f>
c0013a63:	f6 c3 03             	test   bl,0x3
c0013a66:	75 24                	jne    c0013a8c <datetimeToSeconds(datetime_t)+0x8f>
c0013a68:	31 d2                	xor    edx,edx
c0013a6a:	bf 64 00 00 00       	mov    edi,0x64
c0013a6f:	89 d8                	mov    eax,ebx
c0013a71:	66 f7 f7             	div    di
c0013a74:	66 85 d2             	test   dx,dx
c0013a77:	75 12                	jne    c0013a8b <datetimeToSeconds(datetime_t)+0x8e>
c0013a79:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013a7f:	bf 90 01 00 00       	mov    edi,0x190
c0013a84:	99                   	cdq    
c0013a85:	f7 ff                	idiv   edi
c0013a87:	85 d2                	test   edx,edx
c0013a89:	75 01                	jne    c0013a8c <datetimeToSeconds(datetime_t)+0x8f>
c0013a8b:	41                   	inc    ecx
c0013a8c:	66 83 fb 46          	cmp    bx,0x46
c0013a90:	76 45                	jbe    c0013ad7 <datetimeToSeconds(datetime_t)+0xda>
c0013a92:	bb 46 00 00 00       	mov    ebx,0x46
c0013a97:	bf 64 00 00 00       	mov    edi,0x64
c0013a9c:	bd 90 01 00 00       	mov    ebp,0x190
c0013aa1:	b8 6d 01 00 00       	mov    eax,0x16d
c0013aa6:	f6 c3 03             	test   bl,0x3
c0013aa9:	75 23                	jne    c0013ace <datetimeToSeconds(datetime_t)+0xd1>
c0013aab:	89 d8                	mov    eax,ebx
c0013aad:	99                   	cdq    
c0013aae:	f7 ff                	idiv   edi
c0013ab0:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ab5:	85 d2                	test   edx,edx
c0013ab7:	75 15                	jne    c0013ace <datetimeToSeconds(datetime_t)+0xd1>
c0013ab9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013abf:	99                   	cdq    
c0013ac0:	f7 fd                	idiv   ebp
c0013ac2:	83 fa 01             	cmp    edx,0x1
c0013ac5:	19 c0                	sbb    eax,eax
c0013ac7:	f7 d0                	not    eax
c0013ac9:	05 6e 01 00 00       	add    eax,0x16e
c0013ace:	01 c1                	add    ecx,eax
c0013ad0:	43                   	inc    ebx
c0013ad1:	39 f3                	cmp    ebx,esi
c0013ad3:	7c cc                	jl     c0013aa1 <datetimeToSeconds(datetime_t)+0xa4>
c0013ad5:	eb 35                	jmp    c0013b0c <datetimeToSeconds(datetime_t)+0x10f>
c0013ad7:	74 33                	je     c0013b0c <datetimeToSeconds(datetime_t)+0x10f>
c0013ad9:	b8 45 00 00 00       	mov    eax,0x45
c0013ade:	89 c2                	mov    edx,eax
c0013ae0:	83 e2 03             	and    edx,0x3
c0013ae3:	39 f0                	cmp    eax,esi
c0013ae5:	7e 0f                	jle    c0013af6 <datetimeToSeconds(datetime_t)+0xf9>
c0013ae7:	83 fa 01             	cmp    edx,0x1
c0013aea:	19 d2                	sbb    edx,edx
c0013aec:	48                   	dec    eax
c0013aed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013af4:	eb e8                	jmp    c0013ade <datetimeToSeconds(datetime_t)+0xe1>
c0013af6:	b8 6d 01 00 00       	mov    eax,0x16d
c0013afb:	85 d2                	test   edx,edx
c0013afd:	75 0b                	jne    c0013b0a <datetimeToSeconds(datetime_t)+0x10d>
c0013aff:	66 83 fb 01          	cmp    bx,0x1
c0013b03:	19 c0                	sbb    eax,eax
c0013b05:	05 6e 01 00 00       	add    eax,0x16e
c0013b0a:	29 c1                	sub    ecx,eax
c0013b0c:	b8 80 51 01 00       	mov    eax,0x15180
c0013b11:	f7 e9                	imul   ecx
c0013b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013b1b:	83 c4 14             	add    esp,0x14
c0013b1e:	5b                   	pop    ebx
c0013b1f:	5e                   	pop    esi
c0013b20:	5f                   	pop    edi
c0013b21:	5d                   	pop    ebp
c0013b22:	c3                   	ret    
c0013b23:	90                   	nop

c0013b24 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013b24:	57                   	push   edi
c0013b25:	56                   	push   esi
c0013b26:	53                   	push   ebx
c0013b27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b2d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013b30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b38:	e8 c0 fe ff ff       	call   c00139fd <datetimeToSeconds(datetime_t)>
c0013b3d:	59                   	pop    ecx
c0013b3e:	0f b6 0d dc e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7dc
c0013b45:	5b                   	pop    ebx
c0013b46:	03 0d e0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7e0
c0013b4c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b52:	89 cb                	mov    ebx,ecx
c0013b54:	c1 fb 1f             	sar    ebx,0x1f
c0013b57:	29 c8                	sub    eax,ecx
c0013b59:	19 da                	sbb    edx,ebx
c0013b5b:	31 c9                	xor    ecx,ecx
c0013b5d:	80 3d dd e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7dd,0x0
c0013b64:	74 05                	je     c0013b6b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b66:	b9 08 07 00 00       	mov    ecx,0x708
c0013b6b:	31 db                	xor    ebx,ebx
c0013b6d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013b71:	29 c8                	sub    eax,ecx
c0013b73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b77:	19 da                	sbb    edx,ebx
c0013b79:	89 f8                	mov    eax,edi
c0013b7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b7f:	5b                   	pop    ebx
c0013b80:	5e                   	pop    esi
c0013b81:	5f                   	pop    edi
c0013b82:	ff e0                	jmp    eax

c0013b84 <secondsToDatetime(unsigned long long)>:
c0013b84:	55                   	push   ebp
c0013b85:	57                   	push   edi
c0013b86:	56                   	push   esi
c0013b87:	53                   	push   ebx
c0013b88:	83 ec 1c             	sub    esp,0x1c
c0013b8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b8f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013b93:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013b97:	6a 00                	push   0x0
c0013b99:	68 80 51 01 00       	push   0x15180
c0013b9e:	55                   	push   ebp
c0013b9f:	57                   	push   edi
c0013ba0:	e8 3f 32 01 00       	call   c0026de4 <__udivdi3>
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013bae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013bb2:	6a 00                	push   0x0
c0013bb4:	68 80 51 01 00       	push   0x15180
c0013bb9:	55                   	push   ebp
c0013bba:	57                   	push   edi
c0013bbb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013bc0:	e8 1f 33 01 00       	call   c0026ee4 <__umoddi3>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	99                   	cdq    
c0013bc9:	f7 ff                	idiv   edi
c0013bcb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013bd0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013bd3:	89 d0                	mov    eax,edx
c0013bd5:	99                   	cdq    
c0013bd6:	f7 ff                	idiv   edi
c0013bd8:	85 db                	test   ebx,ebx
c0013bda:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013bdd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013be0:	79 11                	jns    c0013bf3 <secondsToDatetime(unsigned long long)+0x6f>
c0013be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013be6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013bec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bf1:	eb 07                	jmp    c0013bfa <secondsToDatetime(unsigned long long)+0x76>
c0013bf3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bf8:	89 d8                	mov    eax,ebx
c0013bfa:	bf b4 05 00 00       	mov    edi,0x5b4
c0013bff:	99                   	cdq    
c0013c00:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013c05:	f7 f9                	idiv   ecx
c0013c07:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013c0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c10:	31 d2                	xor    edx,edx
c0013c12:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013c1a:	01 c3                	add    ebx,eax
c0013c1c:	89 d8                	mov    eax,ebx
c0013c1e:	f7 f1                	div    ecx
c0013c20:	31 d2                	xor    edx,edx
c0013c22:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013c25:	89 d8                	mov    eax,ebx
c0013c27:	f7 f7                	div    edi
c0013c29:	31 d2                	xor    edx,edx
c0013c2b:	29 c1                	sub    ecx,eax
c0013c2d:	89 d8                	mov    eax,ebx
c0013c2f:	f7 f5                	div    ebp
c0013c31:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013c36:	29 c1                	sub    ecx,eax
c0013c38:	31 d2                	xor    edx,edx
c0013c3a:	89 c8                	mov    eax,ecx
c0013c3c:	f7 f5                	div    ebp
c0013c3e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c47:	31 d2                	xor    edx,edx
c0013c49:	89 c8                	mov    eax,ecx
c0013c4b:	f7 f5                	div    ebp
c0013c4d:	31 d2                	xor    edx,edx
c0013c4f:	01 c3                	add    ebx,eax
c0013c51:	89 c8                	mov    eax,ecx
c0013c53:	f7 f7                	div    edi
c0013c55:	bf 99 00 00 00       	mov    edi,0x99
c0013c5a:	29 c3                	sub    ebx,eax
c0013c5c:	31 d2                	xor    edx,edx
c0013c5e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c66:	29 c3                	sub    ebx,eax
c0013c68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c6b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c6e:	bb 05 00 00 00       	mov    ebx,0x5
c0013c73:	83 c1 02             	add    ecx,0x2
c0013c76:	89 c8                	mov    eax,ecx
c0013c78:	f7 f7                	div    edi
c0013c7a:	31 d2                	xor    edx,edx
c0013c7c:	89 c7                	mov    edi,eax
c0013c7e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013c84:	83 c0 02             	add    eax,0x2
c0013c87:	f7 f3                	div    ebx
c0013c89:	89 eb                	mov    ebx,ebp
c0013c8b:	29 c3                	sub    ebx,eax
c0013c8d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013c93:	88 1e                	mov    BYTE PTR [esi],bl
c0013c95:	19 c0                	sbb    eax,eax
c0013c97:	31 d2                	xor    edx,edx
c0013c99:	83 e0 0c             	and    eax,0xc
c0013c9c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013ca0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013ca8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013cac:	83 f9 01             	cmp    ecx,0x1
c0013caf:	0f 96 c2             	setbe  dl
c0013cb2:	41                   	inc    ecx
c0013cb3:	01 d0                	add    eax,edx
c0013cb5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013cb8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013cbc:	83 c4 1c             	add    esp,0x1c
c0013cbf:	89 f0                	mov    eax,esi
c0013cc1:	5b                   	pop    ebx
c0013cc2:	5e                   	pop    esi
c0013cc3:	5f                   	pop    edi
c0013cc4:	5d                   	pop    ebp
c0013cc5:	c2 04 00             	ret    0x4

c0013cc8 <Clock::timeInDatetimeLocal()>:
c0013cc8:	53                   	push   ebx
c0013cc9:	83 ec 14             	sub    esp,0x14
c0013ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cd4:	e8 83 fc ff ff       	call   c001395c <Clock::timeInSecondsLocal()>
c0013cd9:	83 c4 0c             	add    esp,0xc
c0013cdc:	52                   	push   edx
c0013cdd:	50                   	push   eax
c0013cde:	53                   	push   ebx
c0013cdf:	e8 a0 fe ff ff       	call   c0013b84 <secondsToDatetime(unsigned long long)>
c0013ce4:	89 d8                	mov    eax,ebx
c0013ce6:	83 c4 14             	add    esp,0x14
c0013ce9:	5b                   	pop    ebx
c0013cea:	c2 04 00             	ret    0x4
c0013ced:	90                   	nop

c0013cee <Device::hibernate()>:
c0013cee:	c3                   	ret    
c0013cef:	90                   	nop

c0013cf0 <Device::wake()>:
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <Device::detect()>:
c0013cf2:	c3                   	ret    
c0013cf3:	90                   	nop

c0013cf4 <Device::disableLegacy()>:
c0013cf4:	c3                   	ret    
c0013cf5:	90                   	nop

c0013cf6 <Device::powerSaving(PowerSavingLevel)>:
c0013cf6:	c3                   	ret    
c0013cf7:	90                   	nop

c0013cf8 <DriverlessDevice::close(int, int, void*)>:
c0013cf8:	31 c0                	xor    eax,eax
c0013cfa:	c3                   	ret    
c0013cfb:	90                   	nop

c0013cfc <DriverlessDevice::detect()>:
c0013cfc:	c3                   	ret    
c0013cfd:	90                   	nop

c0013cfe <DriverlessDevice::open(int, int, void*)>:
c0013cfe:	83 ec 18             	sub    esp,0x18
c0013d01:	68 10 b3 02 c0       	push   0xc002b310
c0013d06:	e8 9e 66 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0013d0b:	83 c8 ff             	or     eax,0xffffffff
c0013d0e:	83 c4 1c             	add    esp,0x1c
c0013d11:	c3                   	ret    

c0013d12 <Device::~Device()>:
c0013d12:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c0013d17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d1b:	89 10                	mov    DWORD PTR [eax],edx
c0013d1d:	90                   	nop
c0013d1e:	c3                   	ret    
c0013d1f:	90                   	nop

c0013d20 <Device::~Device()>:
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d27:	e8 e6 ff ff ff       	call   c0013d12 <Device::~Device()>
c0013d2c:	83 c4 04             	add    esp,0x4
c0013d2f:	83 ec 08             	sub    esp,0x8
c0013d32:	68 58 01 00 00       	push   0x158
c0013d37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d3b:	e8 f3 eb ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	83 c4 0c             	add    esp,0xc
c0013d46:	c3                   	ret    
c0013d47:	90                   	nop

c0013d48 <Device::findAndLoadDriver()>:
c0013d48:	c7 44 24 04 2e b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b32e
c0013d50:	e9 b6 ec ff ff       	jmp    c0012a0b <Dbg::kprintf(char const*, ...)>
c0013d55:	90                   	nop

c0013d56 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d56:	57                   	push   edi
c0013d57:	b9 09 00 00 00       	mov    ecx,0x9
c0013d5c:	56                   	push   esi
c0013d5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d61:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d65:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d6f:	81 c7 18 01 00 00    	add    edi,0x118
c0013d75:	fc                   	cld    
c0013d76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d78:	5e                   	pop    esi
c0013d79:	5f                   	pop    edi
c0013d7a:	c3                   	ret    
c0013d7b:	90                   	nop

c0013d7c <Device::preOpenACPI(void*, char*, char*)>:
c0013d7c:	57                   	push   edi
c0013d7d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013d82:	56                   	push   esi
c0013d83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d8b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013d95:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013d9b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013da1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013da5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013da7:	b9 0e 00 00 00       	mov    ecx,0xe
c0013dac:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013db2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013db6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013db8:	5e                   	pop    esi
c0013db9:	5f                   	pop    edi
c0013dba:	c3                   	ret    
c0013dbb:	90                   	nop

c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dc0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013dc5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013dcc:	75 0b                	jne    c0013dd9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0013dd0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dd4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013dd7:	eb 1e                	jmp    c0013df7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013dd9:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0013dde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013de4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013dea:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013dec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013df0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013df4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013df7:	ff e0                	jmp    eax
c0013df9:	90                   	nop

c0013dfa <Device::getParent()>:
c0013dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dfe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013e04:	c3                   	ret    
c0013e05:	90                   	nop

c0013e06 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e0a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013e0f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013e16:	75 0b                	jne    c0013e23 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e1a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e1e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013e21:	eb 1e                	jmp    c0013e41 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013e23:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0013e28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e2e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e34:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e36:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e3e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013e41:	ff e0                	jmp    eax
c0013e43:	90                   	nop

c0013e44 <Device::addChild(Device*)>:
c0013e44:	53                   	push   ebx
c0013e45:	83 ec 08             	sub    esp,0x8
c0013e48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e50:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e56:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e5e:	85 d2                	test   edx,edx
c0013e60:	74 04                	je     c0013e66 <Device::addChild(Device*)+0x22>
c0013e62:	89 d3                	mov    ebx,edx
c0013e64:	eb f6                	jmp    c0013e5c <Device::addChild(Device*)+0x18>
c0013e66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e69:	83 ec 0c             	sub    esp,0xc
c0013e6c:	6a 08                	push   0x8
c0013e6e:	e8 40 bb ff ff       	call   c000f9b3 <malloc>
c0013e73:	89 03                	mov    DWORD PTR [ebx],eax
c0013e75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e82:	83 c4 18             	add    esp,0x18
c0013e85:	5b                   	pop    ebx
c0013e86:	c3                   	ret    
c0013e87:	90                   	nop

c0013e88 <Device::removeAllChildren()>:
c0013e88:	56                   	push   esi
c0013e89:	53                   	push   ebx
c0013e8a:	52                   	push   edx
c0013e8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e8f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013e95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e98:	74 17                	je     c0013eb1 <Device::removeAllChildren()+0x29>
c0013e9a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013e9d:	85 c0                	test   eax,eax
c0013e9f:	74 0c                	je     c0013ead <Device::removeAllChildren()+0x25>
c0013ea1:	83 ec 0c             	sub    esp,0xc
c0013ea4:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ea6:	50                   	push   eax
c0013ea7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eaf:	eb e4                	jmp    c0013e95 <Device::removeAllChildren()+0xd>
c0013eb1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013eb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ebd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ec3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013eca:	58                   	pop    eax
c0013ecb:	5b                   	pop    ebx
c0013ecc:	5e                   	pop    esi
c0013ecd:	c3                   	ret    

c0013ece <Device::hibernateAll()>:
c0013ece:	53                   	push   ebx
c0013ecf:	83 ec 14             	sub    esp,0x14
c0013ed2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ed6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed8:	53                   	push   ebx
c0013ed9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013edc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee8:	74 0f                	je     c0013ef9 <Device::hibernateAll()+0x2b>
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ef0:	e8 d9 ff ff ff       	call   c0013ece <Device::hibernateAll()>
c0013ef5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef7:	eb e9                	jmp    c0013ee2 <Device::hibernateAll()+0x14>
c0013ef9:	83 c4 08             	add    esp,0x8
c0013efc:	5b                   	pop    ebx
c0013efd:	c3                   	ret    

c0013efe <Device::wakeAll()>:
c0013efe:	53                   	push   ebx
c0013eff:	83 ec 14             	sub    esp,0x14
c0013f02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f08:	53                   	push   ebx
c0013f09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013f0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f18:	74 0f                	je     c0013f29 <Device::wakeAll()+0x2b>
c0013f1a:	83 ec 0c             	sub    esp,0xc
c0013f1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f20:	e8 d9 ff ff ff       	call   c0013efe <Device::wakeAll()>
c0013f25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f27:	eb e9                	jmp    c0013f12 <Device::wakeAll()+0x14>
c0013f29:	83 c4 08             	add    esp,0x8
c0013f2c:	5b                   	pop    ebx
c0013f2d:	c3                   	ret    

c0013f2e <Device::detectAll()>:
c0013f2e:	53                   	push   ebx
c0013f2f:	83 ec 14             	sub    esp,0x14
c0013f32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f38:	53                   	push   ebx
c0013f39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013f3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f48:	74 0f                	je     c0013f59 <Device::detectAll()+0x2b>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f50:	e8 d9 ff ff ff       	call   c0013f2e <Device::detectAll()>
c0013f55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f57:	eb e9                	jmp    c0013f42 <Device::detectAll()+0x14>
c0013f59:	83 c4 08             	add    esp,0x8
c0013f5c:	5b                   	pop    ebx
c0013f5d:	c3                   	ret    

c0013f5e <Device::disableLegacyAll()>:
c0013f5e:	53                   	push   ebx
c0013f5f:	83 ec 14             	sub    esp,0x14
c0013f62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f68:	53                   	push   ebx
c0013f69:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f78:	74 0f                	je     c0013f89 <Device::disableLegacyAll()+0x2b>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f80:	e8 d9 ff ff ff       	call   c0013f5e <Device::disableLegacyAll()>
c0013f85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f87:	eb e9                	jmp    c0013f72 <Device::disableLegacyAll()+0x14>
c0013f89:	83 c4 08             	add    esp,0x8
c0013f8c:	5b                   	pop    ebx
c0013f8d:	c3                   	ret    

c0013f8e <Device::loadDriversForAll()>:
c0013f8e:	53                   	push   ebx
c0013f8f:	83 ec 08             	sub    esp,0x8
c0013f92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f96:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013f9d:	75 0c                	jne    c0013fab <Device::loadDriversForAll()+0x1d>
c0013f9f:	83 ec 0c             	sub    esp,0xc
c0013fa2:	53                   	push   ebx
c0013fa3:	e8 a0 fd ff ff       	call   c0013d48 <Device::findAndLoadDriver()>
c0013fa8:	83 c4 10             	add    esp,0x10
c0013fab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fb4:	74 12                	je     c0013fc8 <Device::loadDriversForAll()+0x3a>
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fbc:	e8 cd ff ff ff       	call   c0013f8e <Device::loadDriversForAll()>
c0013fc1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	eb e9                	jmp    c0013fb1 <Device::loadDriversForAll()+0x23>
c0013fc8:	83 c4 08             	add    esp,0x8
c0013fcb:	5b                   	pop    ebx
c0013fcc:	c3                   	ret    
c0013fcd:	90                   	nop

c0013fce <Device::closeAll()>:
c0013fce:	53                   	push   ebx
c0013fcf:	83 ec 08             	sub    esp,0x8
c0013fd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd8:	6a 00                	push   0x0
c0013fda:	6a 00                	push   0x0
c0013fdc:	6a 00                	push   0x0
c0013fde:	53                   	push   ebx
c0013fdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fe2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fe8:	83 c4 10             	add    esp,0x10
c0013feb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fee:	74 0f                	je     c0013fff <Device::closeAll()+0x31>
c0013ff0:	83 ec 0c             	sub    esp,0xc
c0013ff3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ff6:	e8 d3 ff ff ff       	call   c0013fce <Device::closeAll()>
c0013ffb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ffd:	eb e9                	jmp    c0013fe8 <Device::closeAll()+0x1a>
c0013fff:	83 c4 08             	add    esp,0x8
c0014002:	5b                   	pop    ebx
c0014003:	c3                   	ret    

c0014004 <Device::powerSavingAll(PowerSavingLevel)>:
c0014004:	56                   	push   esi
c0014005:	53                   	push   ebx
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001400d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014013:	56                   	push   esi
c0014014:	53                   	push   ebx
c0014015:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014018:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001401e:	83 c4 10             	add    esp,0x10
c0014021:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014024:	74 0f                	je     c0014035 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014026:	52                   	push   edx
c0014027:	52                   	push   edx
c0014028:	56                   	push   esi
c0014029:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001402c:	e8 d3 ff ff ff       	call   c0014004 <Device::powerSavingAll(PowerSavingLevel)>
c0014031:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014033:	eb e9                	jmp    c001401e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014035:	58                   	pop    eax
c0014036:	5b                   	pop    ebx
c0014037:	5e                   	pop    esi
c0014038:	c3                   	ret    
c0014039:	90                   	nop

c001403a <Device::setName(char const*)>:
c001403a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014042:	e9 c5 c7 fe ff       	jmp    c000080c <strcpy>
c0014047:	90                   	nop

c0014048 <Device::Device(char const*)>:
c0014048:	83 ec 1c             	sub    esp,0x1c
c001404b:	ba 70 b3 02 c0       	mov    edx,0xc002b370
c0014050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014054:	89 10                	mov    DWORD PTR [eax],edx
c0014056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001405a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014068:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014076:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014084:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001408e:	83 ec 08             	sub    esp,0x8
c0014091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014095:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014099:	e8 9c ff ff ff       	call   c001403a <Device::setName(char const*)>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00140a9:	83 ec 0c             	sub    esp,0xc
c00140ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140b0:	e8 fe b8 ff ff       	call   c000f9b3 <malloc>
c00140b5:	83 c4 10             	add    esp,0x10
c00140b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00140cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00140fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001410a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014118:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014126:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014134:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001413e:	90                   	nop
c001413f:	83 c4 1c             	add    esp,0x1c
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <Device::getName()>:
c0014144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014148:	05 d0 00 00 00       	add    eax,0xd0
c001414d:	c3                   	ret    

c001414e <DriverlessDevice::DriverlessDevice(char const*)>:
c001414e:	83 ec 0c             	sub    esp,0xc
c0014151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014155:	83 ec 08             	sub    esp,0x8
c0014158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001415c:	50                   	push   eax
c001415d:	e8 e6 fe ff ff       	call   c0014048 <Device::Device(char const*)>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c001416a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416e:	89 10                	mov    DWORD PTR [eax],edx
c0014170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014174:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001417e:	90                   	nop
c001417f:	83 c4 0c             	add    esp,0xc
c0014182:	c3                   	ret    
c0014183:	90                   	nop

c0014184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014184:	57                   	push   edi
c0014185:	56                   	push   esi
c0014186:	53                   	push   ebx
c0014187:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001418b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001418f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014193:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014199:	75 0c                	jne    c00141a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001419b:	52                   	push   edx
c001419c:	52                   	push   edx
c001419d:	53                   	push   ebx
c001419e:	56                   	push   esi
c001419f:	e8 7c 4b 01 00       	call   c0028d20 <LinkedList<Device>::addElement(Device*)>
c00141a4:	83 c4 10             	add    esp,0x10
c00141a7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00141ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141b0:	74 12                	je     c00141c4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00141b2:	50                   	push   eax
c00141b3:	57                   	push   edi
c00141b4:	56                   	push   esi
c00141b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00141b8:	e8 c7 ff ff ff       	call   c0014184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	eb e9                	jmp    c00141ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00141c4:	5b                   	pop    ebx
c00141c5:	5e                   	pop    esi
c00141c6:	5f                   	pop    edi
c00141c7:	c3                   	ret    

c00141c8 <getDevicesOfType(DeviceType)>:
c00141c8:	53                   	push   ebx
c00141c9:	83 ec 14             	sub    esp,0x14
c00141cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141d0:	53                   	push   ebx
c00141d1:	e8 26 4c 01 00       	call   c0028dfc <LinkedList<Device>::LinkedList()>
c00141d6:	83 c4 0c             	add    esp,0xc
c00141d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141dd:	53                   	push   ebx
c00141de:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c00141e4:	e8 9b ff ff ff       	call   c0014184 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141e9:	89 d8                	mov    eax,ebx
c00141eb:	83 c4 18             	add    esp,0x18
c00141ee:	5b                   	pop    ebx
c00141ef:	c2 04 00             	ret    0x4

c00141f2 <HardDiskController::HardDiskController(char const*)>:
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f9:	83 ec 08             	sub    esp,0x8
c00141fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014200:	50                   	push   eax
c0014201:	e8 42 fe ff ff       	call   c0014048 <Device::Device(char const*)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c001420e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014212:	89 10                	mov    DWORD PTR [eax],edx
c0014214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014218:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014222:	90                   	nop
c0014223:	83 c4 0c             	add    esp,0xc
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <HardDiskController::~HardDiskController()>:
c0014228:	83 ec 0c             	sub    esp,0xc
c001422b:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c0014230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014234:	89 10                	mov    DWORD PTR [eax],edx
c0014236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423a:	83 ec 0c             	sub    esp,0xc
c001423d:	50                   	push   eax
c001423e:	e8 cf fa ff ff       	call   c0013d12 <Device::~Device()>
c0014243:	83 c4 10             	add    esp,0x10
c0014246:	90                   	nop
c0014247:	83 c4 0c             	add    esp,0xc
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <HardDiskController::~HardDiskController()>:
c001424c:	83 ec 0c             	sub    esp,0xc
c001424f:	83 ec 0c             	sub    esp,0xc
c0014252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014256:	e8 cd ff ff ff       	call   c0014228 <HardDiskController::~HardDiskController()>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	83 ec 08             	sub    esp,0x8
c0014261:	68 58 01 00 00       	push   0x158
c0014266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001426a:	e8 c4 e6 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001426f:	83 c4 10             	add    esp,0x10
c0014272:	83 c4 0c             	add    esp,0xc
c0014275:	c3                   	ret    

c0014276 <PhysicalDisk::eject()>:
c0014276:	83 c8 ff             	or     eax,0xffffffff
c0014279:	c3                   	ret    

c001427a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014281:	83 ec 08             	sub    esp,0x8
c0014284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014288:	50                   	push   eax
c0014289:	e8 ba fd ff ff       	call   c0014048 <Device::Device(char const*)>
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c0014296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001429a:	89 10                	mov    DWORD PTR [eax],edx
c001429c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00142a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00142b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00142c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00142ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142dc:	90                   	nop
c00142dd:	83 c4 0c             	add    esp,0xc
c00142e0:	c3                   	ret    
c00142e1:	90                   	nop

c00142e2 <PhysicalDisk::startCache()>:
c00142e2:	56                   	push   esi
c00142e3:	53                   	push   ebx
c00142e4:	83 ec 10             	sub    esp,0x10
c00142e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142eb:	6a 44                	push   0x44
c00142ed:	e8 c1 b6 ff ff       	call   c000f9b3 <malloc>
c00142f2:	89 c6                	mov    esi,eax
c00142f4:	58                   	pop    eax
c00142f5:	5a                   	pop    edx
c00142f6:	53                   	push   ebx
c00142f7:	56                   	push   esi
c00142f8:	e8 77 28 00 00       	call   c0016b74 <VCache::VCache(PhysicalDisk*)>
c00142fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014303:	83 c4 14             	add    esp,0x14
c0014306:	5b                   	pop    ebx
c0014307:	5e                   	pop    esi
c0014308:	c3                   	ret    
c0014309:	90                   	nop

c001430a <PhysicalDisk::~PhysicalDisk()>:
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	ba f4 b3 02 c0       	mov    edx,0xc002b3f4
c0014312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014316:	89 10                	mov    DWORD PTR [eax],edx
c0014318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	50                   	push   eax
c0014320:	e8 ed f9 ff ff       	call   c0013d12 <Device::~Device()>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	90                   	nop
c0014329:	83 c4 0c             	add    esp,0xc
c001432c:	c3                   	ret    
c001432d:	90                   	nop

c001432e <PhysicalDisk::~PhysicalDisk()>:
c001432e:	83 ec 0c             	sub    esp,0xc
c0014331:	83 ec 0c             	sub    esp,0xc
c0014334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014338:	e8 cd ff ff ff       	call   c001430a <PhysicalDisk::~PhysicalDisk()>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	83 ec 08             	sub    esp,0x8
c0014343:	68 6c 01 00 00       	push   0x16c
c0014348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001434c:	e8 e2 e5 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0014351:	83 c4 10             	add    esp,0x10
c0014354:	83 c4 0c             	add    esp,0xc
c0014357:	c3                   	ret    

c0014358 <FPU::FPU(char const*)>:
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001435f:	83 ec 08             	sub    esp,0x8
c0014362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014366:	50                   	push   eax
c0014367:	e8 dc fc ff ff       	call   c0014048 <Device::Device(char const*)>
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c0014374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014378:	89 10                	mov    DWORD PTR [eax],edx
c001437a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014388:	90                   	nop
c0014389:	83 c4 0c             	add    esp,0xc
c001438c:	c3                   	ret    
c001438d:	90                   	nop

c001438e <FPU::~FPU()>:
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c0014396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001439a:	89 10                	mov    DWORD PTR [eax],edx
c001439c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	50                   	push   eax
c00143a4:	e8 69 f9 ff ff       	call   c0013d12 <Device::~Device()>
c00143a9:	83 c4 10             	add    esp,0x10
c00143ac:	90                   	nop
c00143ad:	83 c4 0c             	add    esp,0xc
c00143b0:	c3                   	ret    
c00143b1:	90                   	nop

c00143b2 <FPU::~FPU()>:
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	83 ec 0c             	sub    esp,0xc
c00143b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143bc:	e8 cd ff ff ff       	call   c001438e <FPU::~FPU()>
c00143c1:	83 c4 10             	add    esp,0x10
c00143c4:	83 ec 08             	sub    esp,0x8
c00143c7:	68 58 01 00 00       	push   0x158
c00143cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143d0:	e8 5e e5 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00143d5:	83 c4 10             	add    esp,0x10
c00143d8:	83 c4 0c             	add    esp,0xc
c00143db:	c3                   	ret    

c00143dc <setupFPU()>:
c00143dc:	53                   	push   ebx
c00143dd:	83 ec 08             	sub    esp,0x8
c00143e0:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00143e6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00143ed:	74 19                	je     c0014408 <setupFPU()+0x2c>
c00143ef:	83 ec 0c             	sub    esp,0xc
c00143f2:	68 58 01 00 00       	push   0x158
c00143f7:	e8 b7 b5 ff ff       	call   c000f9b3 <malloc>
c00143fc:	89 c3                	mov    ebx,eax
c00143fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014401:	e8 5a 15 01 00       	call   c0025960 <AVX::AVX()>
c0014406:	eb 5b                	jmp    c0014463 <setupFPU()+0x87>
c0014408:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001440e:	84 c0                	test   al,al
c0014410:	79 19                	jns    c001442b <setupFPU()+0x4f>
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	68 58 01 00 00       	push   0x158
c001441a:	e8 94 b5 ff ff       	call   c000f9b3 <malloc>
c001441f:	89 c3                	mov    ebx,eax
c0014421:	89 04 24             	mov    DWORD PTR [esp],eax
c0014424:	e8 5d 16 01 00       	call   c0025a86 <SSE::SSE()>
c0014429:	eb 38                	jmp    c0014463 <setupFPU()+0x87>
c001442b:	a8 20                	test   al,0x20
c001442d:	74 19                	je     c0014448 <setupFPU()+0x6c>
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	68 58 01 00 00       	push   0x158
c0014437:	e8 77 b5 ff ff       	call   c000f9b3 <malloc>
c001443c:	89 c3                	mov    ebx,eax
c001443e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014441:	e8 aa 15 01 00       	call   c00259f0 <MMX::MMX()>
c0014446:	eb 1b                	jmp    c0014463 <setupFPU()+0x87>
c0014448:	a8 10                	test   al,0x10
c001444a:	74 1c                	je     c0014468 <setupFPU()+0x8c>
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	68 58 01 00 00       	push   0x158
c0014454:	e8 5a b5 ff ff       	call   c000f9b3 <malloc>
c0014459:	89 c3                	mov    ebx,eax
c001445b:	89 04 24             	mov    DWORD PTR [esp],eax
c001445e:	e8 b1 16 01 00       	call   c0025b14 <x87::x87()>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	eb 24                	jmp    c001448c <setupFPU()+0xb0>
c0014468:	83 e0 ef             	and    eax,0xffffffef
c001446b:	83 ec 0c             	sub    esp,0xc
c001446e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014474:	68 24 b4 02 c0       	push   0xc002b424
c0014479:	e8 8d e5 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001447e:	0f 20 c0             	mov    eax,cr0
c0014481:	83 c8 04             	or     eax,0x4
c0014484:	0f 22 c0             	mov    cr0,eax
c0014487:	31 db                	xor    ebx,ebx
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	89 d8                	mov    eax,ebx
c001448e:	83 c4 08             	add    esp,0x8
c0014491:	5b                   	pop    ebx
c0014492:	c3                   	ret    
c0014493:	90                   	nop

c0014494 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001449c:	c1 e0 04             	shl    eax,0x4
c001449f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00144a3:	8d 50 10             	lea    edx,[eax+0x10]
c00144a6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00144ac:	74 08                	je     c00144b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00144ae:	83 c0 04             	add    eax,0x4
c00144b1:	39 d0                	cmp    eax,edx
c00144b3:	75 f1                	jne    c00144a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00144b5:	c3                   	ret    
c00144b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144c0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144ca:	eb e2                	jmp    c00144ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00144cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00144cc:	57                   	push   edi
c00144cd:	31 c0                	xor    eax,eax
c00144cf:	56                   	push   esi
c00144d0:	53                   	push   ebx
c00144d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00144d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00144dd:	89 da                	mov    edx,ebx
c00144df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00144e3:	c1 e2 04             	shl    edx,0x4
c00144e6:	01 ca                	add    edx,ecx
c00144e8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00144f0:	74 16                	je     c0014508 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00144f2:	40                   	inc    eax
c00144f3:	83 f8 04             	cmp    eax,0x4
c00144f6:	75 f0                	jne    c00144e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00144f8:	c7 44 24 10 68 b4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b468
c0014500:	5b                   	pop    ebx
c0014501:	5e                   	pop    esi
c0014502:	5f                   	pop    edi
c0014503:	e9 a1 5e 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c0014508:	8d 04 98             	lea    eax,[eax+ebx*4]
c001450b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001450e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014514:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001451a:	5b                   	pop    ebx
c001451b:	5e                   	pop    esi
c001451c:	5f                   	pop    edi
c001451d:	c3                   	ret    

c001451e <doubleFault(regs*, void*)>:
c001451e:	55                   	push   ebp
c001451f:	89 e5                	mov    ebp,esp
c0014521:	83 ec 08             	sub    esp,0x8
c0014524:	83 ec 0c             	sub    esp,0xc
c0014527:	68 75 b4 02 c0       	push   0xc002b475
c001452c:	e8 78 5e 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0014531:	83 c4 10             	add    esp,0x10
c0014534:	90                   	nop
c0014535:	c9                   	leave  
c0014536:	c3                   	ret    
c0014537:	90                   	nop

c0014538 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014538:	56                   	push   esi
c0014539:	53                   	push   ebx
c001453a:	50                   	push   eax
c001453b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001453f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014543:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014548:	75 35                	jne    c001457f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001454a:	8d 43 20             	lea    eax,[ebx+0x20]
c001454d:	31 d2                	xor    edx,edx
c001454f:	89 c1                	mov    ecx,eax
c0014551:	c1 e1 04             	shl    ecx,0x4
c0014554:	01 f1                	add    ecx,esi
c0014556:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001455e:	74 3e                	je     c001459e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014560:	42                   	inc    edx
c0014561:	83 fa 04             	cmp    edx,0x4
c0014564:	75 f0                	jne    c0014556 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014566:	83 ec 0c             	sub    esp,0xc
c0014569:	68 8f b4 02 c0       	push   0xc002b48f
c001456e:	e8 36 5e 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001457b:	5a                   	pop    edx
c001457c:	5b                   	pop    ebx
c001457d:	5e                   	pop    esi
c001457e:	c3                   	ret    
c001457f:	83 ec 0c             	sub    esp,0xc
c0014582:	56                   	push   esi
c0014583:	e8 bc fb ff ff       	call   c0014144 <Device::getName()>
c0014588:	83 c4 10             	add    esp,0x10
c001458b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001458e:	75 ba                	jne    c001454a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014590:	83 fb 0f             	cmp    ebx,0xf
c0014593:	7f 29                	jg     c00145be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014595:	0f b6 9b c0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2740]
c001459c:	eb ac                	jmp    c001454a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001459e:	8d 04 82             	lea    eax,[edx+eax*4]
c00145a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00145a5:	8d 04 86             	lea    eax,[esi+eax*4]
c00145a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00145ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145b2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00145b8:	89 d8                	mov    eax,ebx
c00145ba:	5a                   	pop    edx
c00145bb:	5b                   	pop    ebx
c00145bc:	5e                   	pop    esi
c00145bd:	c3                   	ret    
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	68 82 b4 02 c0       	push   0xc002b482
c00145c6:	e8 de 5d 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	e9 77 ff ff ff       	jmp    c001454a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00145d3:	90                   	nop

c00145d4 <InterruptController::clearAllHandlers(int, bool)>:
c00145d4:	56                   	push   esi
c00145d5:	53                   	push   ebx
c00145d6:	52                   	push   edx
c00145d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145df:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00145e4:	75 61                	jne    c0014647 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00145e6:	8d 46 20             	lea    eax,[esi+0x20]
c00145e9:	c1 e6 04             	shl    esi,0x4
c00145ec:	c1 e0 04             	shl    eax,0x4
c00145ef:	01 de                	add    esi,ebx
c00145f1:	01 d8                	add    eax,ebx
c00145f3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00145fd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014607:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014611:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001461b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014625:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001462f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014639:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014643:	58                   	pop    eax
c0014644:	5b                   	pop    ebx
c0014645:	5e                   	pop    esi
c0014646:	c3                   	ret    
c0014647:	83 ec 0c             	sub    esp,0xc
c001464a:	53                   	push   ebx
c001464b:	e8 f4 fa ff ff       	call   c0014144 <Device::getName()>
c0014650:	83 c4 10             	add    esp,0x10
c0014653:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014656:	75 8e                	jne    c00145e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014658:	83 fe 0f             	cmp    esi,0xf
c001465b:	7f 09                	jg     c0014666 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001465d:	0f b6 b6 c0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2740]
c0014664:	eb 80                	jmp    c00145e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	68 9c b4 02 c0       	push   0xc002b49c
c001466e:	e8 36 5d 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	e9 6b ff ff ff       	jmp    c00145e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001467b:	90                   	nop

c001467c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001467c:	56                   	push   esi
c001467d:	53                   	push   ebx
c001467e:	52                   	push   edx
c001467f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014683:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014687:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001468c:	75 3a                	jne    c00146c8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001468e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014692:	8d 50 20             	lea    edx,[eax+0x20]
c0014695:	c1 e2 04             	shl    edx,0x4
c0014698:	8d 04 16             	lea    eax,[esi+edx*1]
c001469b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001469f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00146a5:	74 0b                	je     c00146b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00146a7:	83 c0 04             	add    eax,0x4
c00146aa:	39 d0                	cmp    eax,edx
c00146ac:	75 f1                	jne    c001469f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00146ae:	58                   	pop    eax
c00146af:	5b                   	pop    ebx
c00146b0:	5e                   	pop    esi
c00146b1:	c3                   	ret    
c00146b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00146c6:	eb df                	jmp    c00146a7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	56                   	push   esi
c00146cc:	e8 73 fa ff ff       	call   c0014144 <Device::getName()>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146d7:	75 b5                	jne    c001468e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146d9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00146de:	7f 11                	jg     c00146f1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00146e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146e4:	0f b6 80 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2740]
c00146eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146ef:	eb 9d                	jmp    c001468e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146f1:	83 ec 0c             	sub    esp,0xc
c00146f4:	68 a9 b4 02 c0       	push   0xc002b4a9
c00146f9:	e8 ab 5c 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00146fe:	83 c4 10             	add    esp,0x10
c0014701:	eb 8b                	jmp    c001468e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014703 <nmiHandler(regs*, void*)>:
c0014703:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014708:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001470c:	e9 bb a8 ff ff       	jmp    c000efcc <Computer::handleNMI()>

c0014711 <int_handler>:
c0014711:	55                   	push   ebp
c0014712:	57                   	push   edi
c0014713:	56                   	push   esi
c0014714:	53                   	push   ebx
c0014715:	83 ec 0c             	sub    esp,0xc
c0014718:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001471c:	80 3d 84 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f184,0x0
c0014723:	74 0b                	je     c0014730 <int_handler+0x1f>
c0014725:	fa                   	cli    
c0014726:	f4                   	hlt    
c0014727:	80 3d 84 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f184,0x0
c001472e:	75 f5                	jne    c0014725 <int_handler+0x14>
c0014730:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014735:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014738:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001473e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014744:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014747:	83 f8 17             	cmp    eax,0x17
c001474a:	77 13                	ja     c001475f <int_handler+0x4e>
c001474c:	83 ec 08             	sub    esp,0x8
c001474f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014751:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014754:	0f b6 c0             	movzx  eax,al
c0014757:	50                   	push   eax
c0014758:	57                   	push   edi
c0014759:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	83 c3 15             	add    ebx,0x15
c0014762:	c1 e3 04             	shl    ebx,0x4
c0014765:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014769:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014770:	31 db                	xor    ebx,ebx
c0014772:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014776:	85 c0                	test   eax,eax
c0014778:	74 13                	je     c001478d <int_handler+0x7c>
c001477a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001477d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014781:	74 1c                	je     c001479f <int_handler+0x8e>
c0014783:	83 ec 08             	sub    esp,0x8
c0014786:	52                   	push   edx
c0014787:	56                   	push   esi
c0014788:	ff d0                	call   eax
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	43                   	inc    ebx
c001478e:	83 fb 04             	cmp    ebx,0x4
c0014791:	75 df                	jne    c0014772 <int_handler+0x61>
c0014793:	83 c4 0c             	add    esp,0xc
c0014796:	31 c0                	xor    eax,eax
c0014798:	5b                   	pop    ebx
c0014799:	31 d2                	xor    edx,edx
c001479b:	5e                   	pop    esi
c001479c:	5f                   	pop    edi
c001479d:	5d                   	pop    ebp
c001479e:	c3                   	ret    
c001479f:	83 ec 08             	sub    esp,0x8
c00147a2:	52                   	push   edx
c00147a3:	56                   	push   esi
c00147a4:	ff d0                	call   eax
c00147a6:	83 c4 10             	add    esp,0x10
c00147a9:	83 c4 0c             	add    esp,0xc
c00147ac:	5b                   	pop    ebx
c00147ad:	5e                   	pop    esi
c00147ae:	5f                   	pop    edi
c00147af:	5d                   	pop    ebp
c00147b0:	c3                   	ret    
c00147b1:	90                   	nop

c00147b2 <InterruptController::InterruptController(char const*)>:
c00147b2:	83 ec 1c             	sub    esp,0x1c
c00147b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147b9:	83 ec 08             	sub    esp,0x8
c00147bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147c0:	50                   	push   eax
c00147c1:	e8 82 f8 ff ff       	call   c0014048 <Device::Device(char const*)>
c00147c6:	83 c4 10             	add    esp,0x10
c00147c9:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c00147ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147d2:	89 10                	mov    DWORD PTR [eax],edx
c00147d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147d8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00147e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147ea:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00147f2:	7f 5e                	jg     c0014852 <InterruptController::InterruptController(char const*)+0xa0>
c00147f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147fc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014801:	7f 49                	jg     c001484c <InterruptController::InterruptController(char const*)+0x9a>
c0014803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014807:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001480b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014812:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014816:	01 ca                	add    edx,ecx
c0014818:	83 c2 54             	add    edx,0x54
c001481b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014827:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001482b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014832:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014836:	01 ca                	add    edx,ecx
c0014838:	81 c2 54 04 00 00    	add    edx,0x454
c001483e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014846:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001484a:	eb b0                	jmp    c00147fc <InterruptController::InterruptController(char const*)+0x4a>
c001484c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014850:	eb 98                	jmp    c00147ea <InterruptController::InterruptController(char const*)+0x38>
c0014852:	90                   	nop
c0014853:	83 c4 1c             	add    esp,0x1c
c0014856:	c3                   	ret    
c0014857:	90                   	nop

c0014858 <InterruptController::~InterruptController()>:
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	89 10                	mov    DWORD PTR [eax],edx
c0014866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	50                   	push   eax
c001486e:	e8 9f f4 ff ff       	call   c0013d12 <Device::~Device()>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	90                   	nop
c0014877:	83 c4 0c             	add    esp,0xc
c001487a:	c3                   	ret    
c001487b:	90                   	nop

c001487c <InterruptController::~InterruptController()>:
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	83 ec 0c             	sub    esp,0xc
c0014882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014886:	e8 cd ff ff ff       	call   c0014858 <InterruptController::~InterruptController()>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	83 ec 08             	sub    esp,0x8
c0014891:	68 58 21 00 00       	push   0x2158
c0014896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489a:	e8 94 e0 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 c4 0c             	add    esp,0xc
c00148a5:	c3                   	ret    

c00148a6 <displayDebugInfo(regs*)>:
c00148a6:	55                   	push   ebp
c00148a7:	57                   	push   edi
c00148a8:	56                   	push   esi
c00148a9:	53                   	push   ebx
c00148aa:	83 ec 24             	sub    esp,0x24
c00148ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00148b1:	0f 20 c2             	mov    edx,cr0
c00148b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00148b8:	0f 20 d7             	mov    edi,cr2
c00148bb:	0f 20 de             	mov    esi,cr3
c00148be:	0f 20 e5             	mov    ebp,cr4
c00148c1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148c4:	68 b6 b4 02 c0       	push   0xc002b4b6
c00148c9:	e8 3d e1 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00148ce:	59                   	pop    ecx
c00148cf:	58                   	pop    eax
c00148d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148d3:	68 c1 b4 02 c0       	push   0xc002b4c1
c00148d8:	e8 2e e1 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00148dd:	58                   	pop    eax
c00148de:	5a                   	pop    edx
c00148df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00148e2:	68 cc b4 02 c0       	push   0xc002b4cc
c00148e7:	e8 1f e1 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00148ec:	59                   	pop    ecx
c00148ed:	58                   	pop    eax
c00148ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148f1:	68 d7 b4 02 c0       	push   0xc002b4d7
c00148f6:	e8 10 e1 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00148fb:	58                   	pop    eax
c00148fc:	5a                   	pop    edx
c00148fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014900:	68 e2 b4 02 c0       	push   0xc002b4e2
c0014905:	e8 01 e1 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001490a:	59                   	pop    ecx
c001490b:	58                   	pop    eax
c001490c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001490f:	68 ed b4 02 c0       	push   0xc002b4ed
c0014914:	e8 f2 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014919:	58                   	pop    eax
c001491a:	5a                   	pop    edx
c001491b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001491e:	68 f8 b4 02 c0       	push   0xc002b4f8
c0014923:	e8 e3 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014928:	59                   	pop    ecx
c0014929:	58                   	pop    eax
c001492a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001492d:	68 03 b5 02 c0       	push   0xc002b503
c0014932:	e8 d4 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014937:	58                   	pop    eax
c0014938:	5a                   	pop    edx
c0014939:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001493c:	68 0e b5 02 c0       	push   0xc002b50e
c0014941:	e8 c5 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014946:	59                   	pop    ecx
c0014947:	58                   	pop    eax
c0014948:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001494b:	68 1d b5 02 c0       	push   0xc002b51d
c0014950:	e8 b6 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014955:	58                   	pop    eax
c0014956:	5a                   	pop    edx
c0014957:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001495a:	68 28 b5 02 c0       	push   0xc002b528
c001495f:	e8 a7 e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014964:	59                   	pop    ecx
c0014965:	58                   	pop    eax
c0014966:	57                   	push   edi
c0014967:	68 33 b5 02 c0       	push   0xc002b533
c001496c:	e8 9a e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014971:	58                   	pop    eax
c0014972:	5a                   	pop    edx
c0014973:	56                   	push   esi
c0014974:	68 3e b5 02 c0       	push   0xc002b53e
c0014979:	e8 8d e0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001497e:	59                   	pop    ecx
c001497f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498a:	e8 de bd ff ff       	call   c001076d <setActiveTerminal(VgaText*)>
c001498f:	58                   	pop    eax
c0014990:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014993:	5a                   	pop    edx
c0014994:	c1 e0 05             	shl    eax,0x5
c0014997:	05 20 d6 02 c0       	add    eax,0xc002d620
c001499c:	50                   	push   eax
c001499d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a8:	e8 cd c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c00149ad:	59                   	pop    ecx
c00149ae:	58                   	pop    eax
c00149af:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149b4:	68 49 b5 02 c0       	push   0xc002b549
c00149b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bf:	e8 b6 c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c00149c4:	58                   	pop    eax
c00149c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ca:	5a                   	pop    edx
c00149cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149ce:	83 c0 0c             	add    eax,0xc
c00149d1:	50                   	push   eax
c00149d2:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149dd:	e8 98 c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c00149e2:	59                   	pop    ecx
c00149e3:	58                   	pop    eax
c00149e4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149e9:	68 52 b5 02 c0       	push   0xc002b552
c00149ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f4:	e8 81 c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c00149f9:	58                   	pop    eax
c00149fa:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00149ff:	5a                   	pop    edx
c0014a00:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a09:	e8 26 c2 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014a0e:	59                   	pop    ecx
c0014a0f:	58                   	pop    eax
c0014a10:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a15:	68 5a b5 02 c0       	push   0xc002b55a
c0014a1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a20:	e8 55 c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014a25:	58                   	pop    eax
c0014a26:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a2b:	5a                   	pop    edx
c0014a2c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a35:	e8 fa c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014a3a:	59                   	pop    ecx
c0014a3b:	58                   	pop    eax
c0014a3c:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a41:	68 62 b5 02 c0       	push   0xc002b562
c0014a46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4c:	e8 29 c2 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014a51:	58                   	pop    eax
c0014a52:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a57:	5a                   	pop    edx
c0014a58:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a61:	e8 ce c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014a66:	59                   	pop    ecx
c0014a67:	58                   	pop    eax
c0014a68:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a6d:	68 6a b5 02 c0       	push   0xc002b56a
c0014a72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a78:	e8 fd c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014a7d:	58                   	pop    eax
c0014a7e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a83:	5a                   	pop    edx
c0014a84:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8d:	e8 a2 c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014a92:	59                   	pop    ecx
c0014a93:	58                   	pop    eax
c0014a94:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014a99:	68 72 b5 02 c0       	push   0xc002b572
c0014a9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa4:	e8 d1 c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014aa9:	58                   	pop    eax
c0014aaa:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014aaf:	5a                   	pop    edx
c0014ab0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ab3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab9:	e8 76 c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014abe:	59                   	pop    ecx
c0014abf:	58                   	pop    eax
c0014ac0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014ac5:	68 7a b5 02 c0       	push   0xc002b57a
c0014aca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad0:	e8 a5 c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014ad5:	58                   	pop    eax
c0014ad6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014adb:	5a                   	pop    edx
c0014adc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014adf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae5:	e8 4a c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014aea:	59                   	pop    ecx
c0014aeb:	58                   	pop    eax
c0014aec:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014af1:	68 82 b5 02 c0       	push   0xc002b582
c0014af6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afc:	e8 79 c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014b01:	58                   	pop    eax
c0014b02:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b07:	5a                   	pop    edx
c0014b08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b0c:	52                   	push   edx
c0014b0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b13:	e8 1c c1 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014b18:	59                   	pop    ecx
c0014b19:	58                   	pop    eax
c0014b1a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b1f:	68 8b b5 02 c0       	push   0xc002b58b
c0014b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2a:	e8 4b c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014b2f:	58                   	pop    eax
c0014b30:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b35:	5a                   	pop    edx
c0014b36:	57                   	push   edi
c0014b37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3d:	e8 f2 c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014b42:	59                   	pop    ecx
c0014b43:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b48:	5f                   	pop    edi
c0014b49:	68 93 b5 02 c0       	push   0xc002b593
c0014b4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b54:	e8 21 c1 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014b59:	58                   	pop    eax
c0014b5a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b5f:	5a                   	pop    edx
c0014b60:	56                   	push   esi
c0014b61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b67:	e8 c8 c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014b6c:	59                   	pop    ecx
c0014b6d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b72:	5e                   	pop    esi
c0014b73:	68 9b b5 02 c0       	push   0xc002b59b
c0014b78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7e:	e8 f7 c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014b83:	5f                   	pop    edi
c0014b84:	58                   	pop    eax
c0014b85:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b8a:	55                   	push   ebp
c0014b8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b91:	e8 9e c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014b96:	58                   	pop    eax
c0014b97:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014b9c:	5a                   	pop    edx
c0014b9d:	68 a3 b5 02 c0       	push   0xc002b5a3
c0014ba2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba8:	e8 cd c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014bad:	0f 21 c0             	mov    eax,db0
c0014bb0:	59                   	pop    ecx
c0014bb1:	5e                   	pop    esi
c0014bb2:	50                   	push   eax
c0014bb3:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbe:	e8 71 c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014bc3:	5f                   	pop    edi
c0014bc4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bc9:	5d                   	pop    ebp
c0014bca:	68 ac b5 02 c0       	push   0xc002b5ac
c0014bcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd5:	e8 a0 c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014bda:	0f 21 c8             	mov    eax,db1
c0014bdd:	5a                   	pop    edx
c0014bde:	59                   	pop    ecx
c0014bdf:	50                   	push   eax
c0014be0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014be5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014beb:	e8 44 c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014bf0:	5e                   	pop    esi
c0014bf1:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014bf6:	5f                   	pop    edi
c0014bf7:	68 b4 b5 02 c0       	push   0xc002b5b4
c0014bfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c02:	e8 73 c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014c07:	0f 21 d0             	mov    eax,db2
c0014c0a:	5d                   	pop    ebp
c0014c0b:	5a                   	pop    edx
c0014c0c:	50                   	push   eax
c0014c0d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c18:	e8 17 c0 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014c1d:	59                   	pop    ecx
c0014c1e:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c23:	5e                   	pop    esi
c0014c24:	68 bc b5 02 c0       	push   0xc002b5bc
c0014c29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c2f:	e8 46 c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014c34:	0f 21 d8             	mov    eax,db3
c0014c37:	5f                   	pop    edi
c0014c38:	5d                   	pop    ebp
c0014c39:	50                   	push   eax
c0014c3a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c45:	e8 ea bf ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014c4a:	58                   	pop    eax
c0014c4b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c50:	5a                   	pop    edx
c0014c51:	68 c4 b5 02 c0       	push   0xc002b5c4
c0014c56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5c:	e8 19 c0 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014c61:	0f 21 f0             	mov    eax,db6
c0014c64:	59                   	pop    ecx
c0014c65:	5e                   	pop    esi
c0014c66:	50                   	push   eax
c0014c67:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c72:	e8 bd bf ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014c77:	5f                   	pop    edi
c0014c78:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c7d:	5d                   	pop    ebp
c0014c7e:	68 cc b5 02 c0       	push   0xc002b5cc
c0014c83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c89:	e8 ec bf ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014c8e:	0f 21 f8             	mov    eax,db7
c0014c91:	5a                   	pop    edx
c0014c92:	59                   	pop    ecx
c0014c93:	50                   	push   eax
c0014c94:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014c99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9f:	e8 90 bf ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014ca4:	5e                   	pop    esi
c0014ca5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ca8:	e8 78 88 00 00       	call   c001d525 <Thr::getDriverNameFromAddress(unsigned long)>
c0014cad:	83 c4 10             	add    esp,0x10
c0014cb0:	85 c0                	test   eax,eax
c0014cb2:	74 7d                	je     c0014d31 <displayDebugInfo(regs*)+0x48b>
c0014cb4:	89 c6                	mov    esi,eax
c0014cb6:	50                   	push   eax
c0014cb7:	50                   	push   eax
c0014cb8:	56                   	push   esi
c0014cb9:	68 d4 b5 02 c0       	push   0xc002b5d4
c0014cbe:	e8 48 dd ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014cc3:	5a                   	pop    edx
c0014cc4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014cc9:	59                   	pop    ecx
c0014cca:	68 e2 b5 02 c0       	push   0xc002b5e2
c0014ccf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd5:	e8 a0 bf ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014cda:	5f                   	pop    edi
c0014cdb:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014ce0:	5d                   	pop    ebp
c0014ce1:	56                   	push   esi
c0014ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce8:	e8 8d bf ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014ced:	58                   	pop    eax
c0014cee:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014cf3:	5a                   	pop    edx
c0014cf4:	68 ee b5 02 c0       	push   0xc002b5ee
c0014cf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cff:	e8 76 bf ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c0014d04:	59                   	pop    ecx
c0014d05:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0014d0a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014d10:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d13:	e8 44 88 00 00       	call   c001d55c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014d18:	5b                   	pop    ebx
c0014d19:	5d                   	pop    ebp
c0014d1a:	50                   	push   eax
c0014d1b:	57                   	push   edi
c0014d1c:	e8 13 bf ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c0014d21:	58                   	pop    eax
c0014d22:	5a                   	pop    edx
c0014d23:	56                   	push   esi
c0014d24:	68 fa b5 02 c0       	push   0xc002b5fa
c0014d29:	e8 dd dc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014d2e:	83 c4 10             	add    esp,0x10
c0014d31:	fa                   	cli    
c0014d32:	f4                   	hlt    
c0014d33:	eb fe                	jmp    c0014d33 <displayDebugInfo(regs*)+0x48d>

c0014d35 <x87EmulHandler(regs*, void*)>:
c0014d35:	83 ec 0c             	sub    esp,0xc
c0014d38:	0f 20 c2             	mov    edx,cr0
c0014d3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d40:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014d44:	75 4b                	jne    c0014d91 <x87EmulHandler(regs*, void*)+0x5c>
c0014d46:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014d4b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014d51:	85 c0                	test   eax,eax
c0014d53:	74 05                	je     c0014d5a <x87EmulHandler(regs*, void*)+0x25>
c0014d55:	83 e2 08             	and    edx,0x8
c0014d58:	75 17                	jne    c0014d71 <x87EmulHandler(regs*, void*)+0x3c>
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d61:	e8 a5 ab 00 00       	call   c001f90b <Vm::x87Handler(regs*)>
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	84 c0                	test   al,al
c0014d6b:	74 24                	je     c0014d91 <x87EmulHandler(regs*, void*)+0x5c>
c0014d6d:	83 c4 0c             	add    esp,0xc
c0014d70:	c3                   	ret    
c0014d71:	83 ec 0c             	sub    esp,0xc
c0014d74:	68 20 b6 02 c0       	push   0xc002b620
c0014d79:	e8 8d dc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014d7e:	0f 06                	clts   
c0014d80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d85:	83 c4 10             	add    esp,0x10
c0014d88:	a3 e8 e7 02 c0       	mov    ds:0xc002e7e8,eax
c0014d8d:	83 c4 0c             	add    esp,0xc
c0014d90:	c3                   	ret    
c0014d91:	83 ec 0c             	sub    esp,0xc
c0014d94:	68 0a b6 02 c0       	push   0xc002b60a
c0014d99:	e8 6d dc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014d9e:	5a                   	pop    edx
c0014d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014da3:	e8 fe fa ff ff       	call   c00148a6 <displayDebugInfo(regs*)>

c0014da8 <gpFault(regs*, void*)>:
c0014da8:	53                   	push   ebx
c0014da9:	83 ec 14             	sub    esp,0x14
c0014dac:	c7 05 e4 e7 02 c0 e4 ed 01 c0 	mov    DWORD PTR ds:0xc002e7e4,0xc001ede4
c0014db6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014dba:	53                   	push   ebx
c0014dbb:	e8 24 a0 00 00       	call   c001ede4 <Vm::faultHandler(regs*)>
c0014dc0:	83 c4 10             	add    esp,0x10
c0014dc3:	84 c0                	test   al,al
c0014dc5:	74 05                	je     c0014dcc <gpFault(regs*, void*)+0x24>
c0014dc7:	83 c4 08             	add    esp,0x8
c0014dca:	5b                   	pop    ebx
c0014dcb:	c3                   	ret    
c0014dcc:	83 ec 0c             	sub    esp,0xc
c0014dcf:	68 2d b6 02 c0       	push   0xc002b62d
c0014dd4:	e8 32 dc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014dd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ddc:	e8 c5 fa ff ff       	call   c00148a6 <displayDebugInfo(regs*)>

c0014de1 <pgFault(regs*, void*)>:
c0014de1:	53                   	push   ebx
c0014de2:	83 ec 10             	sub    esp,0x10
c0014de5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014de9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dec:	68 48 b6 02 c0       	push   0xc002b648
c0014df1:	e8 15 dc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014df6:	0f 20 d0             	mov    eax,cr2
c0014df9:	5a                   	pop    edx
c0014dfa:	59                   	pop    ecx
c0014dfb:	50                   	push   eax
c0014dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e04:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014e0a:	e8 03 d7 ff ff       	call   c0012512 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e0f:	83 c4 10             	add    esp,0x10
c0014e12:	84 c0                	test   al,al
c0014e14:	74 05                	je     c0014e1b <pgFault(regs*, void*)+0x3a>
c0014e16:	83 c4 08             	add    esp,0x8
c0014e19:	5b                   	pop    ebx
c0014e1a:	c3                   	ret    
c0014e1b:	83 ec 0c             	sub    esp,0xc
c0014e1e:	68 5d b6 02 c0       	push   0xc002b65d
c0014e23:	e8 e3 db ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e2b:	e8 76 fa ff ff       	call   c00148a6 <displayDebugInfo(regs*)>

c0014e30 <otherISRHandler(regs*, void*)>:
c0014e30:	53                   	push   ebx
c0014e31:	83 ec 0c             	sub    esp,0xc
c0014e34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e38:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e3b:	50                   	push   eax
c0014e3c:	50                   	push   eax
c0014e3d:	68 6a b6 02 c0       	push   0xc002b66a
c0014e42:	e8 c4 db ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014e47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e4a:	e8 57 fa ff ff       	call   c00148a6 <displayDebugInfo(regs*)>

c0014e4f <opcodeFault(regs*, void*)>:
c0014e4f:	55                   	push   ebp
c0014e50:	89 e5                	mov    ebp,esp
c0014e52:	56                   	push   esi
c0014e53:	53                   	push   ebx
c0014e54:	83 ec 40             	sub    esp,0x40
c0014e57:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014e5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e62:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e68:	84 c0                	test   al,al
c0014e6a:	74 24                	je     c0014e90 <opcodeFault(regs*, void*)+0x41>
c0014e6c:	83 ec 0c             	sub    esp,0xc
c0014e6f:	68 88 b6 02 c0       	push   0xc002b688
c0014e74:	e8 92 db ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014e79:	83 c4 10             	add    esp,0x10
c0014e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e82:	8d 50 19             	lea    edx,[eax+0x19]
c0014e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e8b:	e9 d5 05 00 00       	jmp    c0015465 <opcodeFault(regs*, void*)+0x616>
c0014e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014e99:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014e9d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014eaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ead:	8a 00                	mov    al,BYTE PTR [eax]
c0014eaf:	3c f0                	cmp    al,0xf0
c0014eb1:	75 17                	jne    c0014eca <opcodeFault(regs*, void*)+0x7b>
c0014eb3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ebc:	8d 50 01             	lea    edx,[eax+0x1]
c0014ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ec5:	e9 da 00 00 00       	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014eca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ecd:	8a 00                	mov    al,BYTE PTR [eax]
c0014ecf:	3c f2                	cmp    al,0xf2
c0014ed1:	74 09                	je     c0014edc <opcodeFault(regs*, void*)+0x8d>
c0014ed3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed8:	3c f3                	cmp    al,0xf3
c0014eda:	75 1b                	jne    c0014ef7 <opcodeFault(regs*, void*)+0xa8>
c0014edc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ee0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee9:	8d 50 01             	lea    edx,[eax+0x1]
c0014eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef2:	e9 ad 00 00 00       	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014ef7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014efa:	8a 00                	mov    al,BYTE PTR [eax]
c0014efc:	3c 66                	cmp    al,0x66
c0014efe:	75 1f                	jne    c0014f1f <opcodeFault(regs*, void*)+0xd0>
c0014f00:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f04:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	8d 50 01             	lea    edx,[eax+0x1]
c0014f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f1a:	e9 85 00 00 00       	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014f1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f22:	8a 00                	mov    al,BYTE PTR [eax]
c0014f24:	3c 67                	cmp    al,0x67
c0014f26:	75 18                	jne    c0014f40 <opcodeFault(regs*, void*)+0xf1>
c0014f28:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f2c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f35:	8d 50 01             	lea    edx,[eax+0x1]
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f3e:	eb 64                	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014f40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f43:	8a 00                	mov    al,BYTE PTR [eax]
c0014f45:	3c 2e                	cmp    al,0x2e
c0014f47:	74 09                	je     c0014f52 <opcodeFault(regs*, void*)+0x103>
c0014f49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f4e:	3c 3e                	cmp    al,0x3e
c0014f50:	75 18                	jne    c0014f6a <opcodeFault(regs*, void*)+0x11b>
c0014f52:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f56:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f68:	eb 3a                	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014f6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6f:	3c 36                	cmp    al,0x36
c0014f71:	74 1b                	je     c0014f8e <opcodeFault(regs*, void*)+0x13f>
c0014f73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f76:	8a 00                	mov    al,BYTE PTR [eax]
c0014f78:	3c 26                	cmp    al,0x26
c0014f7a:	74 12                	je     c0014f8e <opcodeFault(regs*, void*)+0x13f>
c0014f7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f7f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f81:	3c 64                	cmp    al,0x64
c0014f83:	74 09                	je     c0014f8e <opcodeFault(regs*, void*)+0x13f>
c0014f85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f88:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8a:	3c 65                	cmp    al,0x65
c0014f8c:	75 16                	jne    c0014fa4 <opcodeFault(regs*, void*)+0x155>
c0014f8e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa9:	3c 0f                	cmp    al,0xf
c0014fab:	0f 85 ad 00 00 00    	jne    c001505e <opcodeFault(regs*, void*)+0x20f>
c0014fb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb4:	40                   	inc    eax
c0014fb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb7:	3c c2                	cmp    al,0xc2
c0014fb9:	74 0e                	je     c0014fc9 <opcodeFault(regs*, void*)+0x17a>
c0014fbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fbe:	40                   	inc    eax
c0014fbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc1:	3c c3                	cmp    al,0xc3
c0014fc3:	0f 85 95 00 00 00    	jne    c001505e <opcodeFault(regs*, void*)+0x20f>
c0014fc9:	83 ec 0c             	sub    esp,0xc
c0014fcc:	68 ab b6 02 c0       	push   0xc002b6ab
c0014fd1:	e8 35 da ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0014fd6:	83 c4 10             	add    esp,0x10
c0014fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0014fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fe8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fee:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff0:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ff3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff6:	88 10                	mov    BYTE PTR [eax],dl
c0014ff8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ffb:	50                   	push   eax
c0014ffc:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014fff:	50                   	push   eax
c0015000:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015003:	50                   	push   eax
c0015004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015007:	e8 b6 4a 00 00       	call   c0019ac2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001500c:	83 c4 10             	add    esp,0x10
c001500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015012:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015015:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015018:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001501b:	01 d0                	add    eax,edx
c001501d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015023:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015026:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015029:	48                   	dec    eax
c001502a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001502d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015030:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015033:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015039:	83 ec 04             	sub    esp,0x4
c001503c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001503f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015042:	50                   	push   eax
c0015043:	e8 6c b1 fe ff       	call   c00001b4 <voodooXADD>
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001504e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015051:	01 c2                	add    edx,eax
c0015053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015056:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015059:	e9 07 04 00 00       	jmp    c0015465 <opcodeFault(regs*, void*)+0x616>
c001505e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015061:	8a 00                	mov    al,BYTE PTR [eax]
c0015063:	3c 0f                	cmp    al,0xf
c0015065:	0f 85 8b 01 00 00    	jne    c00151f6 <opcodeFault(regs*, void*)+0x3a7>
c001506b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506e:	40                   	inc    eax
c001506f:	8a 00                	mov    al,BYTE PTR [eax]
c0015071:	3c c7                	cmp    al,0xc7
c0015073:	0f 86 7d 01 00 00    	jbe    c00151f6 <opcodeFault(regs*, void*)+0x3a7>
c0015079:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507c:	40                   	inc    eax
c001507d:	8a 00                	mov    al,BYTE PTR [eax]
c001507f:	3c cf                	cmp    al,0xcf
c0015081:	0f 87 6f 01 00 00    	ja     c00151f6 <opcodeFault(regs*, void*)+0x3a7>
c0015087:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508a:	40                   	inc    eax
c001508b:	8a 00                	mov    al,BYTE PTR [eax]
c001508d:	83 c0 38             	add    eax,0x38
c0015090:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015093:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015097:	75 0b                	jne    c00150a4 <opcodeFault(regs*, void*)+0x255>
c0015099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001509f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150a2:	eb 75                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150a4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00150a8:	75 0b                	jne    c00150b5 <opcodeFault(regs*, void*)+0x266>
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150b3:	eb 64                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150b5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00150b9:	75 0b                	jne    c00150c6 <opcodeFault(regs*, void*)+0x277>
c00150bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150be:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150c4:	eb 53                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150c6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00150ca:	75 0b                	jne    c00150d7 <opcodeFault(regs*, void*)+0x288>
c00150cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150d5:	eb 42                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150d7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00150db:	75 0b                	jne    c00150e8 <opcodeFault(regs*, void*)+0x299>
c00150dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00150e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150e6:	eb 31                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150e8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00150ec:	75 0b                	jne    c00150f9 <opcodeFault(regs*, void*)+0x2aa>
c00150ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00150f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150f7:	eb 20                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c00150f9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150fd:	75 0b                	jne    c001510a <opcodeFault(regs*, void*)+0x2bb>
c00150ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015102:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015105:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015108:	eb 0f                	jmp    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c001510a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001510e:	75 09                	jne    c0015119 <opcodeFault(regs*, void*)+0x2ca>
c0015110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015113:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015116:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015119:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001511d:	74 10                	je     c001512f <opcodeFault(regs*, void*)+0x2e0>
c001511f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015126:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001512d:	eb 2d                	jmp    c001515c <opcodeFault(regs*, void*)+0x30d>
c001512f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015132:	c1 e0 18             	shl    eax,0x18
c0015135:	89 c2                	mov    edx,eax
c0015137:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001513a:	c1 e0 08             	shl    eax,0x8
c001513d:	25 00 00 ff 00       	and    eax,0xff0000
c0015142:	09 c2                	or     edx,eax
c0015144:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015147:	c1 e8 08             	shr    eax,0x8
c001514a:	25 00 ff 00 00       	and    eax,0xff00
c001514f:	09 c2                	or     edx,eax
c0015151:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015154:	c1 e8 18             	shr    eax,0x18
c0015157:	09 d0                	or     eax,edx
c0015159:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001515c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015160:	75 0b                	jne    c001516d <opcodeFault(regs*, void*)+0x31e>
c0015162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015165:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015168:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001516b:	eb 75                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c001516d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015171:	75 0b                	jne    c001517e <opcodeFault(regs*, void*)+0x32f>
c0015173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015176:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015179:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001517c:	eb 64                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c001517e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015182:	75 0b                	jne    c001518f <opcodeFault(regs*, void*)+0x340>
c0015184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015187:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001518a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001518d:	eb 53                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c001518f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015193:	75 0b                	jne    c00151a0 <opcodeFault(regs*, void*)+0x351>
c0015195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015198:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001519b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001519e:	eb 42                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c00151a0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151a4:	75 0b                	jne    c00151b1 <opcodeFault(regs*, void*)+0x362>
c00151a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ac:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00151af:	eb 31                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c00151b1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151b5:	75 0b                	jne    c00151c2 <opcodeFault(regs*, void*)+0x373>
c00151b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151c0:	eb 20                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c00151c2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151c6:	75 0b                	jne    c00151d3 <opcodeFault(regs*, void*)+0x384>
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ce:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00151d1:	eb 0f                	jmp    c00151e2 <opcodeFault(regs*, void*)+0x393>
c00151d3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00151d7:	75 09                	jne    c00151e2 <opcodeFault(regs*, void*)+0x393>
c00151d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151df:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00151e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151e8:	8d 50 02             	lea    edx,[eax+0x2]
c00151eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151f1:	e9 6f 02 00 00       	jmp    c0015465 <opcodeFault(regs*, void*)+0x616>
c00151f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f9:	8a 00                	mov    al,BYTE PTR [eax]
c00151fb:	3c 0f                	cmp    al,0xf
c00151fd:	0f 85 8d 01 00 00    	jne    c0015390 <opcodeFault(regs*, void*)+0x541>
c0015203:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015206:	40                   	inc    eax
c0015207:	8a 00                	mov    al,BYTE PTR [eax]
c0015209:	3c c7                	cmp    al,0xc7
c001520b:	0f 85 7f 01 00 00    	jne    c0015390 <opcodeFault(regs*, void*)+0x541>
c0015211:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015217:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001521a:	8d 50 01             	lea    edx,[eax+0x1]
c001521d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015220:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015223:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015226:	50                   	push   eax
c0015227:	8d 45 bb             	lea    eax,[ebp-0x45]
c001522a:	50                   	push   eax
c001522b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001522e:	50                   	push   eax
c001522f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015232:	e8 8b 48 00 00       	call   c0019ac2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001523d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015240:	83 f0 01             	xor    eax,0x1
c0015243:	84 c0                	test   al,al
c0015245:	0f 84 45 01 00 00    	je     c0015390 <opcodeFault(regs*, void*)+0x541>
c001524b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001524e:	3c 01                	cmp    al,0x1
c0015250:	0f 85 3a 01 00 00    	jne    c0015390 <opcodeFault(regs*, void*)+0x541>
c0015256:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015259:	83 f0 01             	xor    eax,0x1
c001525c:	84 c0                	test   al,al
c001525e:	0f 84 2c 01 00 00    	je     c0015390 <opcodeFault(regs*, void*)+0x541>
c0015264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015267:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001526a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001526d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015274:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015277:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001527a:	89 c2                	mov    edx,eax
c001527c:	b8 00 00 00 00       	mov    eax,0x0
c0015281:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015284:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001528d:	ba 00 00 00 00       	mov    edx,0x0
c0015292:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015295:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001529e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152a1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00152a8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152ab:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152ae:	89 c2                	mov    edx,eax
c00152b0:	b8 00 00 00 00       	mov    eax,0x0
c00152b5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00152b8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00152bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00152c1:	ba 00 00 00 00       	mov    edx,0x0
c00152c6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00152c9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00152cc:	fa                   	cli    
c00152cd:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00152d2:	40                   	inc    eax
c00152d3:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00152d8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00152db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152de:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e0:	89 c1                	mov    ecx,eax
c00152e2:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00152e5:	89 cb                	mov    ebx,ecx
c00152e7:	89 d0                	mov    eax,edx
c00152e9:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00152ec:	89 c6                	mov    esi,eax
c00152ee:	89 f0                	mov    eax,esi
c00152f0:	09 d8                	or     eax,ebx
c00152f2:	85 c0                	test   eax,eax
c00152f4:	75 21                	jne    c0015317 <opcodeFault(regs*, void*)+0x4c8>
c00152f6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00152f9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152ff:	89 01                	mov    DWORD PTR [ecx],eax
c0015301:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015307:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001530a:	83 c8 40             	or     eax,0x40
c001530d:	89 c2                	mov    edx,eax
c001530f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015312:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015315:	eb 3e                	jmp    c0015355 <opcodeFault(regs*, void*)+0x506>
c0015317:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001531a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015322:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015325:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001532e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015331:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015334:	89 d0                	mov    eax,edx
c0015336:	31 d2                	xor    edx,edx
c0015338:	89 c3                	mov    ebx,eax
c001533a:	89 d6                	mov    esi,edx
c001533c:	89 da                	mov    edx,ebx
c001533e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015341:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015347:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001534a:	83 e0 bf             	and    eax,0xffffffbf
c001534d:	89 c2                	mov    edx,eax
c001534f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015352:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015355:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001535a:	48                   	dec    eax
c001535b:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015360:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015365:	85 c0                	test   eax,eax
c0015367:	75 01                	jne    c001536a <opcodeFault(regs*, void*)+0x51b>
c0015369:	fb                   	sti    
c001536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015370:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015373:	01 c2                	add    edx,eax
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001537b:	83 ec 0c             	sub    esp,0xc
c001537e:	68 ba b6 02 c0       	push   0xc002b6ba
c0015383:	e8 83 d6 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	e9 d5 00 00 00       	jmp    c0015465 <opcodeFault(regs*, void*)+0x616>
c0015390:	83 ec 0c             	sub    esp,0xc
c0015393:	68 cd b6 02 c0       	push   0xc002b6cd
c0015398:	e8 6e d6 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ac:	c1 e0 04             	shl    eax,0x4
c00153af:	01 d0                	add    eax,edx
c00153b1:	83 c0 03             	add    eax,0x3
c00153b4:	8a 00                	mov    al,BYTE PTR [eax]
c00153b6:	0f b6 d8             	movzx  ebx,al
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153c5:	c1 e0 04             	shl    eax,0x4
c00153c8:	01 d0                	add    eax,edx
c00153ca:	83 c0 02             	add    eax,0x2
c00153cd:	8a 00                	mov    al,BYTE PTR [eax]
c00153cf:	0f b6 c8             	movzx  ecx,al
c00153d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153de:	c1 e0 04             	shl    eax,0x4
c00153e1:	01 d0                	add    eax,edx
c00153e3:	40                   	inc    eax
c00153e4:	8a 00                	mov    al,BYTE PTR [eax]
c00153e6:	0f b6 d0             	movzx  edx,al
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f5:	c1 e0 04             	shl    eax,0x4
c00153f8:	01 f0                	add    eax,esi
c00153fa:	8a 00                	mov    al,BYTE PTR [eax]
c00153fc:	0f b6 c0             	movzx  eax,al
c00153ff:	83 ec 0c             	sub    esp,0xc
c0015402:	53                   	push   ebx
c0015403:	51                   	push   ecx
c0015404:	52                   	push   edx
c0015405:	50                   	push   eax
c0015406:	68 e0 b6 02 c0       	push   0xc002b6e0
c001540b:	e8 fb d5 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0015410:	83 c4 20             	add    esp,0x20
c0015413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015416:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015419:	83 c0 03             	add    eax,0x3
c001541c:	8a 00                	mov    al,BYTE PTR [eax]
c001541e:	0f b6 d8             	movzx  ebx,al
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015427:	83 c0 02             	add    eax,0x2
c001542a:	8a 00                	mov    al,BYTE PTR [eax]
c001542c:	0f b6 c8             	movzx  ecx,al
c001542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015432:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015435:	40                   	inc    eax
c0015436:	8a 00                	mov    al,BYTE PTR [eax]
c0015438:	0f b6 d0             	movzx  edx,al
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	0f b6 c0             	movzx  eax,al
c0015446:	83 ec 0c             	sub    esp,0xc
c0015449:	53                   	push   ebx
c001544a:	51                   	push   ecx
c001544b:	52                   	push   edx
c001544c:	50                   	push   eax
c001544d:	68 08 b7 02 c0       	push   0xc002b708
c0015452:	e8 b4 d5 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0015457:	83 c4 20             	add    esp,0x20
c001545a:	83 ec 0c             	sub    esp,0xc
c001545d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015460:	e8 41 f4 ff ff       	call   c00148a6 <displayDebugInfo(regs*)>
c0015465:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015468:	5b                   	pop    ebx
c0015469:	5e                   	pop    esi
c001546a:	5d                   	pop    ebp
c001546b:	c3                   	ret    

c001546c <displayProgramFault(char const*)>:
c001546c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015471:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015474:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001547a:	85 c0                	test   eax,eax
c001547c:	74 15                	je     c0015493 <displayProgramFault(char const*)+0x27>
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	6a 04                	push   0x4
c0015483:	6a 0f                	push   0xf
c0015485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015489:	50                   	push   eax
c001548a:	e8 e7 b4 ff ff       	call   c0010976 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001548f:	83 c4 1c             	add    esp,0x1c
c0015492:	c3                   	ret    
c0015493:	c3                   	ret    

c0015494 <setupInterruptController()>:
c0015494:	55                   	push   ebp
c0015495:	89 e5                	mov    ebp,esp
c0015497:	53                   	push   ebx
c0015498:	83 ec 24             	sub    esp,0x24
c001549b:	b8 00 00 00 00       	mov    eax,0x0
c00154a0:	85 c0                	test   eax,eax
c00154a2:	0f 95 c0             	setne  al
c00154a5:	84 c0                	test   al,al
c00154a7:	74 5b                	je     c0015504 <setupInterruptController()+0x70>
c00154a9:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00154b6:	e8 f8 a4 ff ff       	call   c000f9b3 <malloc>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	89 c3                	mov    ebx,eax
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	53                   	push   ebx
c00154c4:	e8 89 08 01 00       	call   c0025d52 <APIC::APIC()>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00154cf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00154d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d7:	83 c0 08             	add    eax,0x8
c00154da:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dc:	6a 00                	push   0x0
c00154de:	6a 00                	push   0x0
c00154e0:	6a 00                	push   0x0
c00154e2:	52                   	push   edx
c00154e3:	ff d0                	call   eax
c00154e5:	83 c4 10             	add    esp,0x10
c00154e8:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00154ed:	83 ec 08             	sub    esp,0x8
c00154f0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154f3:	50                   	push   eax
c00154f4:	e8 4b e9 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154ff:	e9 79 03 00 00       	jmp    c001587d <setupInterruptController()+0x3e9>
c0015504:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0015509:	84 c0                	test   al,al
c001550b:	75 14                	jne    c0015521 <setupInterruptController()+0x8d>
c001550d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015512:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015518:	83 e2 fe             	and    edx,0xfffffffe
c001551b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015521:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015526:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001552c:	83 e0 01             	and    eax,0x1
c001552f:	84 c0                	test   al,al
c0015531:	0f 95 c0             	setne  al
c0015534:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015537:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015544:	e8 6a a4 ff ff       	call   c000f9b3 <malloc>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	89 c3                	mov    ebx,eax
c001554e:	83 ec 0c             	sub    esp,0xc
c0015551:	53                   	push   ebx
c0015552:	e8 53 0d 01 00       	call   c00262aa <PIC::PIC()>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001555d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015563:	8b 00                	mov    eax,DWORD PTR [eax]
c0015565:	83 c0 08             	add    eax,0x8
c0015568:	8b 00                	mov    eax,DWORD PTR [eax]
c001556a:	6a 00                	push   0x0
c001556c:	6a 00                	push   0x0
c001556e:	6a 00                	push   0x0
c0015570:	52                   	push   edx
c0015571:	ff d0                	call   eax
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001557a:	74 73                	je     c00155ef <setupInterruptController()+0x15b>
c001557c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001557f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015582:	8b 00                	mov    eax,DWORD PTR [eax]
c0015584:	83 c0 0c             	add    eax,0xc
c0015587:	8b 00                	mov    eax,DWORD PTR [eax]
c0015589:	6a 00                	push   0x0
c001558b:	6a 00                	push   0x0
c001558d:	6a 00                	push   0x0
c001558f:	52                   	push   edx
c0015590:	ff d0                	call   eax
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015599:	74 15                	je     c00155b0 <setupInterruptController()+0x11c>
c001559b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a0:	83 c0 04             	add    eax,0x4
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ab:	ff d0                	call   eax
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155b7:	83 ec 0c             	sub    esp,0xc
c00155ba:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155bd:	e8 f1 a3 ff ff       	call   c000f9b3 <malloc>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	89 c3                	mov    ebx,eax
c00155c7:	83 ec 0c             	sub    esp,0xc
c00155ca:	53                   	push   ebx
c00155cb:	e8 82 07 01 00       	call   c0025d52 <APIC::APIC()>
c00155d0:	83 c4 10             	add    esp,0x10
c00155d3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00155d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155de:	83 c0 08             	add    eax,0x8
c00155e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e3:	6a 00                	push   0x0
c00155e5:	6a 00                	push   0x0
c00155e7:	6a 00                	push   0x0
c00155e9:	52                   	push   edx
c00155ea:	ff d0                	call   eax
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00155f4:	83 ec 08             	sub    esp,0x8
c00155f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155fa:	50                   	push   eax
c00155fb:	e8 44 e8 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	c7 05 e8 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e8,0x0
c001560d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015610:	8b 00                	mov    eax,DWORD PTR [eax]
c0015612:	83 c0 24             	add    eax,0x24
c0015615:	8b 00                	mov    eax,DWORD PTR [eax]
c0015617:	6a 00                	push   0x0
c0015619:	68 30 4e 01 c0       	push   0xc0014e30
c001561e:	6a 00                	push   0x0
c0015620:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015623:	ff d0                	call   eax
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562b:	8b 00                	mov    eax,DWORD PTR [eax]
c001562d:	83 c0 24             	add    eax,0x24
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	6a 00                	push   0x0
c0015634:	68 30 4e 01 c0       	push   0xc0014e30
c0015639:	6a 01                	push   0x1
c001563b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563e:	ff d0                	call   eax
c0015640:	83 c4 10             	add    esp,0x10
c0015643:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015646:	8b 00                	mov    eax,DWORD PTR [eax]
c0015648:	83 c0 24             	add    eax,0x24
c001564b:	8b 00                	mov    eax,DWORD PTR [eax]
c001564d:	6a 00                	push   0x0
c001564f:	68 03 47 01 c0       	push   0xc0014703
c0015654:	6a 02                	push   0x2
c0015656:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015659:	ff d0                	call   eax
c001565b:	83 c4 10             	add    esp,0x10
c001565e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015661:	8b 00                	mov    eax,DWORD PTR [eax]
c0015663:	83 c0 24             	add    eax,0x24
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	6a 00                	push   0x0
c001566a:	68 30 4e 01 c0       	push   0xc0014e30
c001566f:	6a 03                	push   0x3
c0015671:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015674:	ff d0                	call   eax
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567c:	8b 00                	mov    eax,DWORD PTR [eax]
c001567e:	83 c0 24             	add    eax,0x24
c0015681:	8b 00                	mov    eax,DWORD PTR [eax]
c0015683:	6a 00                	push   0x0
c0015685:	68 30 4e 01 c0       	push   0xc0014e30
c001568a:	6a 04                	push   0x4
c001568c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568f:	ff d0                	call   eax
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015697:	8b 00                	mov    eax,DWORD PTR [eax]
c0015699:	83 c0 24             	add    eax,0x24
c001569c:	8b 00                	mov    eax,DWORD PTR [eax]
c001569e:	6a 00                	push   0x0
c00156a0:	68 30 4e 01 c0       	push   0xc0014e30
c00156a5:	6a 05                	push   0x5
c00156a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156aa:	ff d0                	call   eax
c00156ac:	83 c4 10             	add    esp,0x10
c00156af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b4:	83 c0 24             	add    eax,0x24
c00156b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b9:	6a 00                	push   0x0
c00156bb:	68 4f 4e 01 c0       	push   0xc0014e4f
c00156c0:	6a 06                	push   0x6
c00156c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c5:	ff d0                	call   eax
c00156c7:	83 c4 10             	add    esp,0x10
c00156ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cf:	83 c0 24             	add    eax,0x24
c00156d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d4:	6a 00                	push   0x0
c00156d6:	68 35 4d 01 c0       	push   0xc0014d35
c00156db:	6a 07                	push   0x7
c00156dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e0:	ff d0                	call   eax
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ea:	83 c0 24             	add    eax,0x24
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	6a 00                	push   0x0
c00156f1:	68 1e 45 01 c0       	push   0xc001451e
c00156f6:	6a 08                	push   0x8
c00156f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156fb:	ff d0                	call   eax
c00156fd:	83 c4 10             	add    esp,0x10
c0015700:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015703:	8b 00                	mov    eax,DWORD PTR [eax]
c0015705:	83 c0 24             	add    eax,0x24
c0015708:	8b 00                	mov    eax,DWORD PTR [eax]
c001570a:	6a 00                	push   0x0
c001570c:	68 30 4e 01 c0       	push   0xc0014e30
c0015711:	6a 09                	push   0x9
c0015713:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015716:	ff d0                	call   eax
c0015718:	83 c4 10             	add    esp,0x10
c001571b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015720:	83 c0 24             	add    eax,0x24
c0015723:	8b 00                	mov    eax,DWORD PTR [eax]
c0015725:	6a 00                	push   0x0
c0015727:	68 30 4e 01 c0       	push   0xc0014e30
c001572c:	6a 0a                	push   0xa
c001572e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015731:	ff d0                	call   eax
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015739:	8b 00                	mov    eax,DWORD PTR [eax]
c001573b:	83 c0 24             	add    eax,0x24
c001573e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015740:	6a 00                	push   0x0
c0015742:	68 30 4e 01 c0       	push   0xc0014e30
c0015747:	6a 0b                	push   0xb
c0015749:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001574c:	ff d0                	call   eax
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015754:	8b 00                	mov    eax,DWORD PTR [eax]
c0015756:	83 c0 24             	add    eax,0x24
c0015759:	8b 00                	mov    eax,DWORD PTR [eax]
c001575b:	6a 00                	push   0x0
c001575d:	68 30 4e 01 c0       	push   0xc0014e30
c0015762:	6a 0c                	push   0xc
c0015764:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015767:	ff d0                	call   eax
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001576f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015771:	83 c0 24             	add    eax,0x24
c0015774:	8b 00                	mov    eax,DWORD PTR [eax]
c0015776:	6a 00                	push   0x0
c0015778:	68 a8 4d 01 c0       	push   0xc0014da8
c001577d:	6a 0d                	push   0xd
c001577f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015782:	ff d0                	call   eax
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001578a:	8b 00                	mov    eax,DWORD PTR [eax]
c001578c:	83 c0 24             	add    eax,0x24
c001578f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015791:	6a 00                	push   0x0
c0015793:	68 e1 4d 01 c0       	push   0xc0014de1
c0015798:	6a 0e                	push   0xe
c001579a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001579d:	ff d0                	call   eax
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a7:	83 c0 24             	add    eax,0x24
c00157aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ac:	6a 00                	push   0x0
c00157ae:	68 30 4e 01 c0       	push   0xc0014e30
c00157b3:	6a 0f                	push   0xf
c00157b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b8:	ff d0                	call   eax
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c2:	83 c0 24             	add    eax,0x24
c00157c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c7:	6a 00                	push   0x0
c00157c9:	68 30 4e 01 c0       	push   0xc0014e30
c00157ce:	6a 10                	push   0x10
c00157d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157d3:	ff d0                	call   eax
c00157d5:	83 c4 10             	add    esp,0x10
c00157d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157db:	8b 00                	mov    eax,DWORD PTR [eax]
c00157dd:	83 c0 24             	add    eax,0x24
c00157e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e2:	6a 00                	push   0x0
c00157e4:	68 30 4e 01 c0       	push   0xc0014e30
c00157e9:	6a 11                	push   0x11
c00157eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ee:	ff d0                	call   eax
c00157f0:	83 c4 10             	add    esp,0x10
c00157f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f8:	83 c0 24             	add    eax,0x24
c00157fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157fd:	6a 00                	push   0x0
c00157ff:	68 30 4e 01 c0       	push   0xc0014e30
c0015804:	6a 12                	push   0x12
c0015806:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015809:	ff d0                	call   eax
c001580b:	83 c4 10             	add    esp,0x10
c001580e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015811:	8b 00                	mov    eax,DWORD PTR [eax]
c0015813:	83 c0 24             	add    eax,0x24
c0015816:	8b 00                	mov    eax,DWORD PTR [eax]
c0015818:	6a 00                	push   0x0
c001581a:	68 30 4e 01 c0       	push   0xc0014e30
c001581f:	6a 13                	push   0x13
c0015821:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015824:	ff d0                	call   eax
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001582c:	8b 00                	mov    eax,DWORD PTR [eax]
c001582e:	83 c0 24             	add    eax,0x24
c0015831:	8b 00                	mov    eax,DWORD PTR [eax]
c0015833:	6a 00                	push   0x0
c0015835:	68 30 4e 01 c0       	push   0xc0014e30
c001583a:	6a 14                	push   0x14
c001583c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001583f:	ff d0                	call   eax
c0015841:	83 c4 10             	add    esp,0x10
c0015844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015847:	8b 00                	mov    eax,DWORD PTR [eax]
c0015849:	83 c0 24             	add    eax,0x24
c001584c:	8b 00                	mov    eax,DWORD PTR [eax]
c001584e:	6a 00                	push   0x0
c0015850:	68 30 4e 01 c0       	push   0xc0014e30
c0015855:	6a 1e                	push   0x1e
c0015857:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001585a:	ff d0                	call   eax
c001585c:	83 c4 10             	add    esp,0x10
c001585f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015862:	8b 00                	mov    eax,DWORD PTR [eax]
c0015864:	83 c0 24             	add    eax,0x24
c0015867:	8b 00                	mov    eax,DWORD PTR [eax]
c0015869:	6a 00                	push   0x0
c001586b:	68 9b c5 01 c0       	push   0xc001c59b
c0015870:	6a 60                	push   0x60
c0015872:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015875:	ff d0                	call   eax
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001587d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015880:	c9                   	leave  
c0015881:	c3                   	ret    

c0015882 <InterruptController::convertLegacyIRQNumber(int)>:
c0015882:	55                   	push   ebp
c0015883:	89 e5                	mov    ebp,esp
c0015885:	83 ec 08             	sub    esp,0x8
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	83 ec 0c             	sub    esp,0xc
c001588e:	50                   	push   eax
c001588f:	e8 b0 e8 ff ff       	call   c0014144 <Device::getName()>
c0015894:	83 c4 10             	add    esp,0x10
c0015897:	8a 00                	mov    al,BYTE PTR [eax]
c0015899:	3c 41                	cmp    al,0x41
c001589b:	0f 94 c0             	sete   al
c001589e:	84 c0                	test   al,al
c00158a0:	74 28                	je     c00158ca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158a2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158a6:	7f 12                	jg     c00158ba <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158ab:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c00158b0:	8a 00                	mov    al,BYTE PTR [eax]
c00158b2:	0f b6 c0             	movzx  eax,al
c00158b5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158b8:	eb 10                	jmp    c00158ca <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	68 30 b7 02 c0       	push   0xc002b730
c00158c2:	e8 e2 4a 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00158c7:	83 c4 10             	add    esp,0x10
c00158ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158cd:	c9                   	leave  
c00158ce:	c3                   	ret    
c00158cf:	90                   	nop

c00158d0 <startGUI(void*)>:
c00158d0:	55                   	push   ebp
c00158d1:	89 e5                	mov    ebp,esp
c00158d3:	53                   	push   ebx
c00158d4:	83 ec 04             	sub    esp,0x4
c00158d7:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00158dc:	48                   	dec    eax
c00158dd:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00158e2:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00158e7:	85 c0                	test   eax,eax
c00158e9:	75 01                	jne    c00158ec <startGUI(void*)+0x1c>
c00158eb:	fb                   	sti    
c00158ec:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c00158f2:	83 ec 08             	sub    esp,0x8
c00158f5:	6a 01                	push   0x1
c00158f7:	68 b0 b7 02 c0       	push   0xc002b7b0
c00158fc:	e8 75 7c 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	83 ec 08             	sub    esp,0x8
c0015907:	53                   	push   ebx
c0015908:	50                   	push   eax
c0015909:	e8 99 7e 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015917:	83 ec 08             	sub    esp,0x8
c001591a:	6a 01                	push   0x1
c001591c:	68 ca b7 02 c0       	push   0xc002b7ca
c0015921:	e8 50 7c 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0015926:	83 c4 10             	add    esp,0x10
c0015929:	83 ec 08             	sub    esp,0x8
c001592c:	53                   	push   ebx
c001592d:	50                   	push   eax
c001592e:	e8 74 7e 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c0015933:	83 c4 10             	add    esp,0x10
c0015936:	90                   	nop
c0015937:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001593a:	c9                   	leave  
c001593b:	c3                   	ret    

c001593c <startGUIVESA(void*)>:
c001593c:	55                   	push   ebp
c001593d:	89 e5                	mov    ebp,esp
c001593f:	53                   	push   ebx
c0015940:	83 ec 04             	sub    esp,0x4
c0015943:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015948:	48                   	dec    eax
c0015949:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001594e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015953:	85 c0                	test   eax,eax
c0015955:	75 01                	jne    c0015958 <startGUIVESA(void*)+0x1c>
c0015957:	fb                   	sti    
c0015958:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c001595e:	83 ec 08             	sub    esp,0x8
c0015961:	6a 01                	push   0x1
c0015963:	68 e4 b7 02 c0       	push   0xc002b7e4
c0015968:	e8 09 7c 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	83 ec 08             	sub    esp,0x8
c0015973:	53                   	push   ebx
c0015974:	50                   	push   eax
c0015975:	e8 2d 7e 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015983:	83 ec 08             	sub    esp,0x8
c0015986:	6a 01                	push   0x1
c0015988:	68 ca b7 02 c0       	push   0xc002b7ca
c001598d:	e8 e4 7b 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	83 ec 08             	sub    esp,0x8
c0015998:	53                   	push   ebx
c0015999:	50                   	push   eax
c001599a:	e8 08 7e 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	90                   	nop
c00159a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159a6:	c9                   	leave  
c00159a7:	c3                   	ret    

c00159a8 <sendKeyToTerminal(unsigned char)>:
c00159a8:	55                   	push   ebp
c00159a9:	89 e5                	mov    ebp,esp
c00159ab:	83 ec 28             	sub    esp,0x28
c00159ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159b4:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c00159b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159bd:	83 ec 08             	sub    esp,0x8
c00159c0:	52                   	push   edx
c00159c1:	50                   	push   eax
c00159c2:	e8 57 b4 ff ff       	call   c0010e1e <VgaText::receiveKey(unsigned char)>
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159ce:	0f 85 8f 00 00 00    	jne    c0015a63 <sendKeyToTerminal(unsigned char)+0xbb>
c00159d4:	fa                   	cli    
c00159d5:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c00159da:	40                   	inc    eax
c00159db:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c00159e0:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c00159e5:	40                   	inc    eax
c00159e6:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c00159eb:	a1 00 e8 02 c0       	mov    eax,ds:0xc002e800
c00159f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159f3:	c7 05 00 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e800,0x0
c00159fd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a01:	74 1f                	je     c0015a22 <sendKeyToTerminal(unsigned char)+0x7a>
c0015a03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015a09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a18:	e8 b0 89 00 00       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	eb db                	jmp    c00159fd <sendKeyToTerminal(unsigned char)+0x55>
c0015a22:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0015a27:	48                   	dec    eax
c0015a28:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c0015a2d:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0015a32:	85 c0                	test   eax,eax
c0015a34:	75 18                	jne    c0015a4e <sendKeyToTerminal(unsigned char)+0xa6>
c0015a36:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c0015a3b:	85 c0                	test   eax,eax
c0015a3d:	74 0f                	je     c0015a4e <sendKeyToTerminal(unsigned char)+0xa6>
c0015a3f:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c0015a49:	e8 ed 84 00 00       	call   c001df3b <schedule()>
c0015a4e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015a53:	48                   	dec    eax
c0015a54:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015a59:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015a5e:	85 c0                	test   eax,eax
c0015a60:	75 01                	jne    c0015a63 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a62:	fb                   	sti    
c0015a63:	90                   	nop
c0015a64:	c9                   	leave  
c0015a65:	c3                   	ret    

c0015a66 <sendKeyboardToken(KeyboardToken)>:
c0015a66:	55                   	push   ebp
c0015a67:	89 e5                	mov    ebp,esp
c0015a69:	83 ec 18             	sub    esp,0x18
c0015a6c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a72:	0f b7 c0             	movzx  eax,ax
c0015a75:	83 f2 01             	xor    edx,0x1
c0015a78:	88 90 20 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17e0],dl
c0015a7e:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015a83:	85 c0                	test   eax,eax
c0015a85:	74 24                	je     c0015aab <sendKeyboardToken(KeyboardToken)+0x45>
c0015a87:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015a8d:	83 ec 04             	sub    esp,0x4
c0015a90:	68 20 e8 02 c0       	push   0xc002e820
c0015a95:	83 ec 08             	sub    esp,0x8
c0015a98:	89 e2                	mov    edx,esp
c0015a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9d:	89 02                	mov    DWORD PTR [edx],eax
c0015a9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015aa2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015aa6:	ff d1                	call   ecx
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aae:	66 3d 03 02          	cmp    ax,0x203
c0015ab2:	75 07                	jne    c0015abb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ab4:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015ab9:	84 c0                	test   al,al
c0015abb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015abf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ac2:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015ac7:	38 c2                	cmp    dl,al
c0015ac9:	74 1c                	je     c0015ae7 <sendKeyboardToken(KeyboardToken)+0x81>
c0015acb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ace:	a2 28 ec 02 c0       	mov    ds:0xc002ec28,al
c0015ad3:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015ad8:	0f b6 c0             	movzx  eax,al
c0015adb:	83 ec 0c             	sub    esp,0xc
c0015ade:	50                   	push   eax
c0015adf:	e8 7a a9 ff ff       	call   c001045e <setTerminalScrollLock(bool)>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015aea:	84 c0                	test   al,al
c0015aec:	0f 84 ae 00 00 00    	je     c0015ba0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af5:	66 3d 10 03          	cmp    ax,0x310
c0015af9:	75 06                	jne    c0015b01 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015afb:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b04:	66 3d 11 03          	cmp    ax,0x311
c0015b08:	75 06                	jne    c0015b10 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b0a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b13:	66 3d 12 03          	cmp    ax,0x312
c0015b17:	75 06                	jne    c0015b1f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b19:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b22:	66 3d 13 03          	cmp    ax,0x313
c0015b26:	75 06                	jne    c0015b2e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b28:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b31:	66 3d 14 03          	cmp    ax,0x314
c0015b35:	75 06                	jne    c0015b3d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b37:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b40:	66 3d 15 03          	cmp    ax,0x315
c0015b44:	75 06                	jne    c0015b4c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b46:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4f:	66 3d 16 03          	cmp    ax,0x316
c0015b53:	75 06                	jne    c0015b5b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b55:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5e:	66 3d 17 03          	cmp    ax,0x317
c0015b62:	75 06                	jne    c0015b6a <sendKeyboardToken(KeyboardToken)+0x104>
c0015b64:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6d:	66 3d 18 03          	cmp    ax,0x318
c0015b71:	75 06                	jne    c0015b79 <sendKeyboardToken(KeyboardToken)+0x113>
c0015b73:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7c:	66 3d 19 03          	cmp    ax,0x319
c0015b80:	75 06                	jne    c0015b88 <sendKeyboardToken(KeyboardToken)+0x122>
c0015b82:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8b:	66 3d 1a 03          	cmp    ax,0x31a
c0015b8f:	0f 85 c9 00 00 00    	jne    c0015c5e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b95:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b9b:	e9 be 00 00 00       	jmp    c0015c5e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba3:	66 3d 10 03          	cmp    ax,0x310
c0015ba7:	75 0a                	jne    c0015bb3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ba9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015baf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb6:	66 3d 11 03          	cmp    ax,0x311
c0015bba:	75 0a                	jne    c0015bc6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015bbc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015bc2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc9:	66 3d 12 03          	cmp    ax,0x312
c0015bcd:	75 0a                	jne    c0015bd9 <sendKeyboardToken(KeyboardToken)+0x173>
c0015bcf:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015bd5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdc:	66 3d 13 03          	cmp    ax,0x313
c0015be0:	75 0a                	jne    c0015bec <sendKeyboardToken(KeyboardToken)+0x186>
c0015be2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015be8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bef:	66 3d 14 03          	cmp    ax,0x314
c0015bf3:	75 0a                	jne    c0015bff <sendKeyboardToken(KeyboardToken)+0x199>
c0015bf5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015bfb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c02:	66 3d 15 03          	cmp    ax,0x315
c0015c06:	75 0a                	jne    c0015c12 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c08:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c0e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c15:	66 3d 16 03          	cmp    ax,0x316
c0015c19:	75 0a                	jne    c0015c25 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c1b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c21:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c28:	66 3d 17 03          	cmp    ax,0x317
c0015c2c:	75 0a                	jne    c0015c38 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c2e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c34:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3b:	66 3d 18 03          	cmp    ax,0x318
c0015c3f:	75 0a                	jne    c0015c4b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c41:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c47:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4e:	66 3d 19 03          	cmp    ax,0x319
c0015c52:	75 0a                	jne    c0015c5e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c54:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c5a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c61:	66 3d 00 02          	cmp    ax,0x200
c0015c65:	75 2c                	jne    c0015c93 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c67:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0015c6c:	83 f0 01             	xor    eax,0x1
c0015c6f:	84 c0                	test   al,al
c0015c71:	74 20                	je     c0015c93 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c73:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0015c78:	6a 01                	push   0x1
c0015c7a:	6a 00                	push   0x0
c0015c7c:	68 d0 58 01 c0       	push   0xc00158d0
c0015c81:	50                   	push   eax
c0015c82:	e8 8f 80 00 00       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c0015c87:	83 c4 10             	add    esp,0x10
c0015c8a:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0015c91:	eb 33                	jmp    c0015cc6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c96:	66 3d 01 02          	cmp    ax,0x201
c0015c9a:	75 2a                	jne    c0015cc6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c9c:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0015ca1:	83 f0 01             	xor    eax,0x1
c0015ca4:	84 c0                	test   al,al
c0015ca6:	74 1e                	je     c0015cc6 <sendKeyboardToken(KeyboardToken)+0x260>
c0015ca8:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0015cad:	6a 01                	push   0x1
c0015caf:	6a 00                	push   0x0
c0015cb1:	68 3c 59 01 c0       	push   0xc001593c
c0015cb6:	50                   	push   eax
c0015cb7:	e8 5a 80 00 00       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0015cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc9:	66 3d 1d 03          	cmp    ax,0x31d
c0015ccd:	75 06                	jne    c0015cd5 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015ccf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd8:	66 3d 1c 03          	cmp    ax,0x31c
c0015cdc:	75 06                	jne    c0015ce4 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015cde:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce7:	66 3d 1b 03          	cmp    ax,0x31b
c0015ceb:	75 06                	jne    c0015cf3 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ced:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf6:	66 3d 1e 03          	cmp    ax,0x31e
c0015cfa:	75 06                	jne    c0015d02 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015cfc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d05:	66 3d 1f 03          	cmp    ax,0x31f
c0015d09:	75 06                	jne    c0015d11 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d0b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d14:	66 3d 1a 03          	cmp    ax,0x31a
c0015d18:	75 06                	jne    c0015d20 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d1a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d20:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d24:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d27:	83 f0 01             	xor    eax,0x1
c0015d2a:	84 c0                	test   al,al
c0015d2c:	74 77                	je     c0015da5 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d2e:	a0 21 e9 02 c0       	mov    al,ds:0xc002e921
c0015d33:	84 c0                	test   al,al
c0015d35:	74 41                	je     c0015d78 <sendKeyboardToken(KeyboardToken)+0x312>
c0015d37:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d3b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d3f:	74 2b                	je     c0015d6c <sendKeyboardToken(KeyboardToken)+0x306>
c0015d41:	8b 15 24 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec24
c0015d47:	89 d0                	mov    eax,edx
c0015d49:	c1 e0 02             	shl    eax,0x2
c0015d4c:	01 d0                	add    eax,edx
c0015d4e:	01 c0                	add    eax,eax
c0015d50:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0015d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d58:	0f b7 c0             	movzx  eax,ax
c0015d5b:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d5e:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d63:	01 d0                	add    eax,edx
c0015d65:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0015d6a:	eb 6d                	jmp    c0015dd9 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d6c:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015d76:	eb 61                	jmp    c0015dd9 <sendKeyboardToken(KeyboardToken)+0x373>
c0015d78:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d7d:	85 c0                	test   eax,eax
c0015d7f:	74 18                	je     c0015d99 <sendKeyboardToken(KeyboardToken)+0x333>
c0015d81:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015d86:	0f b6 c0             	movzx  eax,al
c0015d89:	83 ec 0c             	sub    esp,0xc
c0015d8c:	50                   	push   eax
c0015d8d:	e8 16 fc ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d99:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015da3:	eb 34                	jmp    c0015dd9 <sendKeyboardToken(KeyboardToken)+0x373>
c0015da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da8:	66 3d 01 01          	cmp    ax,0x101
c0015dac:	75 2b                	jne    c0015dd9 <sendKeyboardToken(KeyboardToken)+0x373>
c0015dae:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015db3:	85 c0                	test   eax,eax
c0015db5:	74 18                	je     c0015dcf <sendKeyboardToken(KeyboardToken)+0x369>
c0015db7:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0015dbc:	0f b6 c0             	movzx  eax,al
c0015dbf:	83 ec 0c             	sub    esp,0xc
c0015dc2:	50                   	push   eax
c0015dc3:	e8 e0 fb ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015dcf:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0015dd9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ddc:	83 f0 01             	xor    eax,0x1
c0015ddf:	84 c0                	test   al,al
c0015de1:	74 4c                	je     c0015e2f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015de3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015de6:	83 f0 01             	xor    eax,0x1
c0015de9:	84 c0                	test   al,al
c0015deb:	74 42                	je     c0015e2f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ded:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015df2:	83 f0 01             	xor    eax,0x1
c0015df5:	84 c0                	test   al,al
c0015df7:	74 36                	je     c0015e2f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dfc:	66 83 f8 1f          	cmp    ax,0x1f
c0015e00:	76 09                	jbe    c0015e0b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e05:	66 83 f8 7e          	cmp    ax,0x7e
c0015e09:	76 12                	jbe    c0015e1d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0e:	66 83 f8 0a          	cmp    ax,0xa
c0015e12:	74 09                	je     c0015e1d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e17:	66 83 f8 08          	cmp    ax,0x8
c0015e1b:	75 12                	jne    c0015e2f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e20:	0f b6 c0             	movzx  eax,al
c0015e23:	83 ec 0c             	sub    esp,0xc
c0015e26:	50                   	push   eax
c0015e27:	e8 7c fb ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015e2c:	83 c4 10             	add    esp,0x10
c0015e2f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e32:	83 f0 01             	xor    eax,0x1
c0015e35:	84 c0                	test   al,al
c0015e37:	74 4f                	je     c0015e88 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e39:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e3c:	83 f0 01             	xor    eax,0x1
c0015e3f:	84 c0                	test   al,al
c0015e41:	74 45                	je     c0015e88 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e43:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015e48:	84 c0                	test   al,al
c0015e4a:	74 3c                	je     c0015e88 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4f:	66 83 f8 3f          	cmp    ax,0x3f
c0015e53:	76 33                	jbe    c0015e88 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e58:	66 83 f8 7f          	cmp    ax,0x7f
c0015e5c:	77 2a                	ja     c0015e88 <sendKeyboardToken(KeyboardToken)+0x422>
c0015e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e61:	88 c2                	mov    dl,al
c0015e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e66:	66 83 f8 5f          	cmp    ax,0x5f
c0015e6a:	76 04                	jbe    c0015e70 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e6c:	b0 20                	mov    al,0x20
c0015e6e:	eb 02                	jmp    c0015e72 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e70:	b0 00                	mov    al,0x0
c0015e72:	29 c2                	sub    edx,eax
c0015e74:	88 d0                	mov    al,dl
c0015e76:	83 e8 40             	sub    eax,0x40
c0015e79:	0f b6 c0             	movzx  eax,al
c0015e7c:	83 ec 0c             	sub    esp,0xc
c0015e7f:	50                   	push   eax
c0015e80:	e8 23 fb ff ff       	call   c00159a8 <sendKeyToTerminal(unsigned char)>
c0015e85:	83 c4 10             	add    esp,0x10
c0015e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8b:	66 3d 00 03          	cmp    ax,0x300
c0015e8f:	75 0f                	jne    c0015ea0 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e94:	83 f0 01             	xor    eax,0x1
c0015e97:	84 c0                	test   al,al
c0015e99:	74 05                	je     c0015ea0 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e9b:	e8 2f a9 ff ff       	call   c00107cf <doTerminalCycle()>
c0015ea0:	90                   	nop
c0015ea1:	c9                   	leave  
c0015ea2:	c3                   	ret    

c0015ea3 <clearInternalKeybuffer(VgaText*)>:
c0015ea3:	55                   	push   ebp
c0015ea4:	89 e5                	mov    ebp,esp
c0015ea6:	83 ec 08             	sub    esp,0x8
c0015ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eac:	05 98 01 00 00       	add    eax,0x198
c0015eb1:	83 ec 0c             	sub    esp,0xc
c0015eb4:	50                   	push   eax
c0015eb5:	e8 b2 a8 fe ff       	call   c000076c <strlen>
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ec0:	81 c2 98 01 00 00    	add    edx,0x198
c0015ec6:	83 ec 04             	sub    esp,0x4
c0015ec9:	50                   	push   eax
c0015eca:	6a 00                	push   0x0
c0015ecc:	52                   	push   edx
c0015ecd:	e8 7e a8 fe ff       	call   c0000750 <memset>
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	90                   	nop
c0015ed6:	c9                   	leave  
c0015ed7:	c3                   	ret    

c0015ed8 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015ed8:	55                   	push   ebp
c0015ed9:	89 e5                	mov    ebp,esp
c0015edb:	83 ec 18             	sub    esp,0x18
c0015ede:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015ee3:	85 c0                	test   eax,eax
c0015ee5:	74 2a                	je     c0015f11 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ee7:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015eed:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015ef3:	83 ec 04             	sub    esp,0x4
c0015ef6:	68 20 e8 02 c0       	push   0xc002e820
c0015efb:	83 ec 08             	sub    esp,0x8
c0015efe:	89 e2                	mov    edx,esp
c0015f00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015f03:	89 02                	mov    DWORD PTR [edx],eax
c0015f05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f08:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f0c:	ff d1                	call   ecx
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	fb                   	sti    
c0015f12:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015f19:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f1d:	0f 84 a1 00 00 00    	je     c0015fc4 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f26:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f2c:	84 c0                	test   al,al
c0015f2e:	75 28                	jne    c0015f58 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015f30:	fa                   	cli    
c0015f31:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f36:	40                   	inc    eax
c0015f37:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015f3c:	e8 fa 7f 00 00       	call   c001df3b <schedule()>
c0015f41:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f46:	48                   	dec    eax
c0015f47:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0015f4c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0015f51:	85 c0                	test   eax,eax
c0015f53:	75 ce                	jne    c0015f23 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f55:	fb                   	sti    
c0015f56:	eb cb                	jmp    c0015f23 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015f58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f5b:	8d 50 01             	lea    edx,[eax+0x1]
c0015f5e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f61:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f64:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f6a:	88 10                	mov    BYTE PTR [eax],dl
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f75:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7b:	05 98 01 00 00       	add    eax,0x198
c0015f80:	83 ec 0c             	sub    esp,0xc
c0015f83:	50                   	push   eax
c0015f84:	e8 e3 a7 fe ff       	call   c000076c <strlen>
c0015f89:	83 c4 10             	add    esp,0x10
c0015f8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f8f:	81 c2 98 01 00 00    	add    edx,0x198
c0015f95:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f9b:	81 c2 98 01 00 00    	add    edx,0x198
c0015fa1:	83 ec 04             	sub    esp,0x4
c0015fa4:	50                   	push   eax
c0015fa5:	51                   	push   ecx
c0015fa6:	52                   	push   edx
c0015fa7:	e8 dc a6 fe ff       	call   c0000688 <memmove>
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015fb2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015fb5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015fb9:	0f 85 5a ff ff ff    	jne    c0015f19 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015fbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fc2:	eb 03                	jmp    c0015fc7 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015fc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015fc7:	c9                   	leave  
c0015fc8:	c3                   	ret    
c0015fc9:	90                   	nop

c0015fca <Keyboard::Keyboard(char const*)>:
c0015fca:	83 ec 0c             	sub    esp,0xc
c0015fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd1:	83 ec 08             	sub    esp,0x8
c0015fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fd8:	50                   	push   eax
c0015fd9:	e8 6a e0 ff ff       	call   c0014048 <Device::Device(char const*)>
c0015fde:	83 c4 10             	add    esp,0x10
c0015fe1:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c0015fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fea:	89 10                	mov    DWORD PTR [eax],edx
c0015fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ffa:	c6 05 04 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e804,0x1
c0016001:	90                   	nop
c0016002:	83 c4 0c             	add    esp,0xc
c0016005:	c3                   	ret    

c0016006 <Keyboard::~Keyboard()>:
c0016006:	83 ec 0c             	sub    esp,0xc
c0016009:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c001600e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016012:	89 10                	mov    DWORD PTR [eax],edx
c0016014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016018:	83 ec 0c             	sub    esp,0xc
c001601b:	50                   	push   eax
c001601c:	e8 f1 dc ff ff       	call   c0013d12 <Device::~Device()>
c0016021:	83 c4 10             	add    esp,0x10
c0016024:	90                   	nop
c0016025:	83 c4 0c             	add    esp,0xc
c0016028:	c3                   	ret    
c0016029:	90                   	nop

c001602a <Keyboard::~Keyboard()>:
c001602a:	83 ec 0c             	sub    esp,0xc
c001602d:	83 ec 0c             	sub    esp,0xc
c0016030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016034:	e8 cd ff ff ff       	call   c0016006 <Keyboard::~Keyboard()>
c0016039:	83 c4 10             	add    esp,0x10
c001603c:	83 ec 08             	sub    esp,0x8
c001603f:	68 5c 01 00 00       	push   0x15c
c0016044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016048:	e8 e6 c8 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001604d:	83 c4 10             	add    esp,0x10
c0016050:	83 c4 0c             	add    esp,0xc
c0016053:	c3                   	ret    

c0016054 <LogicalDisk::close(int, int, void*)>:
c0016054:	83 c8 ff             	or     eax,0xffffffff
c0016057:	c3                   	ret    

c0016058 <LogicalDisk::~LogicalDisk()>:
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0016060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016064:	89 10                	mov    DWORD PTR [eax],edx
c0016066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606a:	83 ec 0c             	sub    esp,0xc
c001606d:	50                   	push   eax
c001606e:	e8 9f dc ff ff       	call   c0013d12 <Device::~Device()>
c0016073:	83 c4 10             	add    esp,0x10
c0016076:	90                   	nop
c0016077:	83 c4 0c             	add    esp,0xc
c001607a:	c3                   	ret    
c001607b:	90                   	nop

c001607c <LogicalDisk::~LogicalDisk()>:
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	83 ec 0c             	sub    esp,0xc
c0016082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016086:	e8 cd ff ff ff       	call   c0016058 <LogicalDisk::~LogicalDisk()>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	83 ec 08             	sub    esp,0x8
c0016091:	68 74 01 00 00       	push   0x174
c0016096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001609a:	e8 94 c8 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001609f:	83 c4 10             	add    esp,0x10
c00160a2:	83 c4 0c             	add    esp,0xc
c00160a5:	c3                   	ret    

c00160a6 <LogicalDisk::open(int, int, void*)>:
c00160a6:	83 ec 18             	sub    esp,0x18
c00160a9:	68 34 b8 02 c0       	push   0xc002b834
c00160ae:	e8 f6 42 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00160b3:	83 c8 ff             	or     eax,0xffffffff
c00160b6:	83 c4 1c             	add    esp,0x1c
c00160b9:	c3                   	ret    

c00160ba <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00160ba:	53                   	push   ebx
c00160bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160c7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00160cd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00160d3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160d9:	77 10                	ja     c00160eb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160db:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160e1:	89 d3                	mov    ebx,edx
c00160e3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160e9:	72 05                	jb     c00160f0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160eb:	83 c8 ff             	or     eax,0xffffffff
c00160ee:	89 c2                	mov    edx,eax
c00160f0:	5b                   	pop    ebx
c00160f1:	c3                   	ret    

c00160f2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160f2:	56                   	push   esi
c00160f3:	83 c8 ff             	or     eax,0xffffffff
c00160f6:	53                   	push   ebx
c00160f7:	89 c2                	mov    edx,eax
c00160f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016101:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016105:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001610b:	77 27                	ja     c0016134 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001610d:	89 d8                	mov    eax,ebx
c001610f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016115:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001611b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016120:	89 c2                	mov    edx,eax
c0016122:	73 10                	jae    c0016134 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016124:	89 c8                	mov    eax,ecx
c0016126:	89 da                	mov    edx,ebx
c0016128:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001612e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016134:	5b                   	pop    ebx
c0016135:	5e                   	pop    esi
c0016136:	c3                   	ret    
c0016137:	90                   	nop

c0016138 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016138:	83 ec 1c             	sub    esp,0x1c
c001613b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001613f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016143:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016147:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001614b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001614f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001615a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001615e:	83 ec 08             	sub    esp,0x8
c0016161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016165:	50                   	push   eax
c0016166:	e8 dd de ff ff       	call   c0014048 <Device::Device(char const*)>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0016173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016177:	89 10                	mov    DWORD PTR [eax],edx
c0016179:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001617d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016188:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001618f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016193:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001619d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161a9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00161af:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00161b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00161b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161c0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00161c6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00161cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161d4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161e8:	90                   	nop
c00161e9:	83 c4 1c             	add    esp,0x1c
c00161ec:	c3                   	ret    
c00161ed:	90                   	nop

c00161ee <LogicalDisk::assignDriveLetter()>:
c00161ee:	55                   	push   ebp
c00161ef:	57                   	push   edi
c00161f0:	56                   	push   esi
c00161f1:	53                   	push   ebx
c00161f2:	83 ec 14             	sub    esp,0x14
c00161f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161f9:	8b 3d 40 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec40
c00161ff:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016205:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016209:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001620f:	8b 3d 44 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec44
c0016215:	3c 01                	cmp    al,0x1
c0016217:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001621b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001621f:	19 c0                	sbb    eax,eax
c0016221:	83 e0 02             	and    eax,0x2
c0016224:	83 c0 41             	add    eax,0x41
c0016227:	0f be e8             	movsx  ebp,al
c001622a:	3c 43                	cmp    al,0x43
c001622c:	75 10                	jne    c001623e <LogicalDisk::assignDriveLetter()+0x50>
c001622e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016235:	75 5d                	jne    c0016294 <LogicalDisk::assignDriveLetter()+0xa6>
c0016237:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001623c:	75 56                	jne    c0016294 <LogicalDisk::assignDriveLetter()+0xa6>
c001623e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016241:	ba 01 00 00 00       	mov    edx,0x1
c0016246:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001624a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001624e:	d3 e2                	shl    edx,cl
c0016250:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016254:	89 d7                	mov    edi,edx
c0016256:	89 d6                	mov    esi,edx
c0016258:	c1 ff 1f             	sar    edi,0x1f
c001625b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001625f:	21 f9                	and    ecx,edi
c0016261:	09 d1                	or     ecx,edx
c0016263:	75 2f                	jne    c0016294 <LogicalDisk::assignDriveLetter()+0xa6>
c0016265:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016269:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001626d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016273:	09 f2                	or     edx,esi
c0016275:	89 15 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edx
c001627b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627f:	09 fa                	or     edx,edi
c0016281:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016285:	89 15 44 ec 02 c0    	mov    DWORD PTR ds:0xc002ec44,edx
c001628b:	89 1c bd 60 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13a0],ebx
c0016292:	eb 08                	jmp    c001629c <LogicalDisk::assignDriveLetter()+0xae>
c0016294:	45                   	inc    ebp
c0016295:	40                   	inc    eax
c0016296:	3c 5b                	cmp    al,0x5b
c0016298:	75 90                	jne    c001622a <LogicalDisk::assignDriveLetter()+0x3c>
c001629a:	31 c0                	xor    eax,eax
c001629c:	83 c4 14             	add    esp,0x14
c001629f:	5b                   	pop    ebx
c00162a0:	5e                   	pop    esi
c00162a1:	5f                   	pop    edi
c00162a2:	5d                   	pop    ebp
c00162a3:	c3                   	ret    

c00162a4 <LogicalDisk::mount()>:
c00162a4:	56                   	push   esi
c00162a5:	53                   	push   ebx
c00162a6:	53                   	push   ebx
c00162a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162ab:	8b 1d d4 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d4
c00162b1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00162bb:	85 db                	test   ebx,ebx
c00162bd:	74 27                	je     c00162e6 <LogicalDisk::mount()+0x42>
c00162bf:	51                   	push   ecx
c00162c0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162c9:	83 e8 41             	sub    eax,0x41
c00162cc:	50                   	push   eax
c00162cd:	56                   	push   esi
c00162ce:	53                   	push   ebx
c00162cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	84 c0                	test   al,al
c00162d7:	74 08                	je     c00162e1 <LogicalDisk::mount()+0x3d>
c00162d9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00162df:	eb 07                	jmp    c00162e8 <LogicalDisk::mount()+0x44>
c00162e1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00162e4:	eb d5                	jmp    c00162bb <LogicalDisk::mount()+0x17>
c00162e6:	31 c0                	xor    eax,eax
c00162e8:	5a                   	pop    edx
c00162e9:	5b                   	pop    ebx
c00162ea:	5e                   	pop    esi
c00162eb:	c3                   	ret    

c00162ec <LogicalDisk::unmount()>:
c00162ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162f0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162fa:	c3                   	ret    
c00162fb:	90                   	nop

c00162fc <LogicalDisk::eject()>:
c00162fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016300:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016306:	8b 10                	mov    edx,DWORD PTR [eax]
c0016308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001630c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001630f:	90                   	nop

c0016310 <LogicalDisk::unassignDriveLetter()>:
c0016310:	57                   	push   edi
c0016311:	56                   	push   esi
c0016312:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016316:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001631d:	84 c9                	test   cl,cl
c001631f:	75 0f                	jne    c0016330 <LogicalDisk::unassignDriveLetter()+0x20>
c0016321:	c7 44 24 0c 58 b8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b858
c0016329:	5e                   	pop    esi
c001632a:	5f                   	pop    edi
c001632b:	e9 79 40 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c0016330:	83 e9 41             	sub    ecx,0x41
c0016333:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001633a:	b8 01 00 00 00       	mov    eax,0x1
c001633f:	c7 04 8d 60 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13a0],0x0
c001634a:	d3 e0                	shl    eax,cl
c001634c:	89 c7                	mov    edi,eax
c001634e:	f7 d0                	not    eax
c0016350:	c1 ff 1f             	sar    edi,0x1f
c0016353:	21 05 40 ec 02 c0    	and    DWORD PTR ds:0xc002ec40,eax
c0016359:	89 fe                	mov    esi,edi
c001635b:	f7 d6                	not    esi
c001635d:	21 35 44 ec 02 c0    	and    DWORD PTR ds:0xc002ec44,esi
c0016363:	5e                   	pop    esi
c0016364:	5f                   	pop    edi
c0016365:	c3                   	ret    

c0016366 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016366:	57                   	push   edi
c0016367:	56                   	push   esi
c0016368:	53                   	push   ebx
c0016369:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001636d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016371:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016379:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001637f:	77 41                	ja     c00163c2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016381:	99                   	cdq    
c0016382:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016388:	01 c8                	add    eax,ecx
c001638a:	11 da                	adc    edx,ebx
c001638c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016392:	19 d7                	sbb    edi,edx
c0016394:	72 33                	jb     c00163c9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016396:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001639c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	5f                   	pop    edi
c00163bd:	e9 1c 0b 00 00       	jmp    c0016ede <VCache::read(unsigned long long, int, void*)>
c00163c2:	b8 05 00 00 00       	mov    eax,0x5
c00163c7:	eb 05                	jmp    c00163ce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163c9:	b8 07 00 00 00       	mov    eax,0x7
c00163ce:	5b                   	pop    ebx
c00163cf:	5e                   	pop    esi
c00163d0:	5f                   	pop    edi
c00163d1:	c3                   	ret    

c00163d2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00163d2:	57                   	push   edi
c00163d3:	56                   	push   esi
c00163d4:	53                   	push   ebx
c00163d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163eb:	77 41                	ja     c001642e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00163ed:	99                   	cdq    
c00163ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163f4:	01 c8                	add    eax,ecx
c00163f6:	11 da                	adc    edx,ebx
c00163f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163fe:	19 d7                	sbb    edi,edx
c0016400:	72 33                	jb     c0016435 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016402:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016408:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001640e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016412:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016416:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001641c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016426:	5b                   	pop    ebx
c0016427:	5e                   	pop    esi
c0016428:	5f                   	pop    edi
c0016429:	e9 86 09 00 00       	jmp    c0016db4 <VCache::write(unsigned long long, int, void*)>
c001642e:	b8 05 00 00 00       	mov    eax,0x5
c0016433:	eb 05                	jmp    c001643a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016435:	b8 07 00 00 00       	mov    eax,0x7
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	5f                   	pop    edi
c001643d:	c3                   	ret    

c001643e <Mouse::Mouse(char const*)>:
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016445:	83 ec 08             	sub    esp,0x8
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	50                   	push   eax
c001644d:	e8 f6 db ff ff       	call   c0014048 <Device::Device(char const*)>
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c001645a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645e:	89 10                	mov    DWORD PTR [eax],edx
c0016460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016464:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001646e:	90                   	nop
c001646f:	83 c4 0c             	add    esp,0xc
c0016472:	c3                   	ret    
c0016473:	90                   	nop

c0016474 <Mouse::~Mouse()>:
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c001647c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016480:	89 10                	mov    DWORD PTR [eax],edx
c0016482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016486:	83 ec 0c             	sub    esp,0xc
c0016489:	50                   	push   eax
c001648a:	e8 83 d8 ff ff       	call   c0013d12 <Device::~Device()>
c001648f:	83 c4 10             	add    esp,0x10
c0016492:	90                   	nop
c0016493:	83 c4 0c             	add    esp,0xc
c0016496:	c3                   	ret    
c0016497:	90                   	nop

c0016498 <Mouse::~Mouse()>:
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	83 ec 0c             	sub    esp,0xc
c001649e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a2:	e8 cd ff ff ff       	call   c0016474 <Mouse::~Mouse()>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	83 ec 08             	sub    esp,0x8
c00164ad:	68 58 01 00 00       	push   0x158
c00164b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b6:	e8 78 c4 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00164bb:	83 c4 10             	add    esp,0x10
c00164be:	83 c4 0c             	add    esp,0xc
c00164c1:	c3                   	ret    

c00164c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164c2:	55                   	push   ebp
c00164c3:	57                   	push   edi
c00164c4:	56                   	push   esi
c00164c5:	53                   	push   ebx
c00164c6:	81 ec 28 01 00 00    	sub    esp,0x128
c00164cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00164d3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00164da:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00164e1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00164e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00164f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164f7:	e8 48 dc ff ff       	call   c0014144 <Device::getName()>
c00164fc:	5a                   	pop    edx
c00164fd:	59                   	pop    ecx
c00164fe:	50                   	push   eax
c00164ff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016503:	55                   	push   ebp
c0016504:	e8 03 a3 fe ff       	call   c000080c <strcpy>
c0016509:	5b                   	pop    ebx
c001650a:	58                   	pop    eax
c001650b:	68 d0 b8 02 c0       	push   0xc002b8d0
c0016510:	55                   	push   ebp
c0016511:	e8 36 a4 fe ff       	call   c000094c <strcat>
c0016516:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001651d:	e8 91 94 ff ff       	call   c000f9b3 <malloc>
c0016522:	83 c4 0c             	add    esp,0xc
c0016525:	89 c3                	mov    ebx,eax
c0016527:	57                   	push   edi
c0016528:	56                   	push   esi
c0016529:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001652d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016531:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016538:	55                   	push   ebp
c0016539:	50                   	push   eax
c001653a:	e8 f9 fb ff ff       	call   c0016138 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001653f:	83 c4 14             	add    esp,0x14
c0016542:	53                   	push   ebx
c0016543:	e8 a6 fc ff ff       	call   c00161ee <LogicalDisk::assignDriveLetter()>
c0016548:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001654b:	e8 54 fd ff ff       	call   c00162a4 <LogicalDisk::mount()>
c0016550:	58                   	pop    eax
c0016551:	5a                   	pop    edx
c0016552:	53                   	push   ebx
c0016553:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001655a:	e8 e5 d8 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c001655f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016565:	5b                   	pop    ebx
c0016566:	5e                   	pop    esi
c0016567:	5f                   	pop    edi
c0016568:	5d                   	pop    ebp
c0016569:	c3                   	ret    

c001656a <createPartitionsForDisk(PhysicalDisk*)>:
c001656a:	55                   	push   ebp
c001656b:	57                   	push   edi
c001656c:	56                   	push   esi
c001656d:	53                   	push   ebx
c001656e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016574:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001657b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016581:	3d 00 02 00 00       	cmp    eax,0x200
c0016586:	74 27                	je     c00165af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016588:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001658e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016594:	83 ec 10             	sub    esp,0x10
c0016597:	0f a4 f7 0a          	shld   edi,esi,0xa
c001659b:	99                   	cdq    
c001659c:	c1 e6 0a             	shl    esi,0xa
c001659f:	52                   	push   edx
c00165a0:	89 fd                	mov    ebp,edi
c00165a2:	50                   	push   eax
c00165a3:	55                   	push   ebp
c00165a4:	56                   	push   esi
c00165a5:	e8 3a 08 01 00       	call   c0026de4 <__udivdi3>
c00165aa:	e9 b1 00 00 00       	jmp    c0016660 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165af:	83 ec 0c             	sub    esp,0xc
c00165b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165b8:	56                   	push   esi
c00165b9:	6a 01                	push   0x1
c00165bb:	6a 00                	push   0x0
c00165bd:	6a 00                	push   0x0
c00165bf:	53                   	push   ebx
c00165c0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00165c3:	83 c4 20             	add    esp,0x20
c00165c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00165ce:	75 0a                	jne    c00165da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00165d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00165d8:	74 2c                	je     c0016606 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00165da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165ec:	83 ec 10             	sub    esp,0x10
c00165ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165f3:	89 f7                	mov    edi,esi
c00165f5:	c1 e0 0a             	shl    eax,0xa
c00165f8:	c1 ff 1f             	sar    edi,0x1f
c00165fb:	57                   	push   edi
c00165fc:	56                   	push   esi
c00165fd:	52                   	push   edx
c00165fe:	50                   	push   eax
c00165ff:	e8 e0 07 01 00       	call   c0026de4 <__udivdi3>
c0016604:	eb 5a                	jmp    c0016660 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016606:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001660d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016614:	83 e1 7f             	and    ecx,0x7f
c0016617:	83 e0 7f             	and    eax,0x7f
c001661a:	01 c1                	add    ecx,eax
c001661c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016623:	83 e0 7f             	and    eax,0x7f
c0016626:	01 c1                	add    ecx,eax
c0016628:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001662f:	83 e0 7f             	and    eax,0x7f
c0016632:	00 c1                	add    cl,al
c0016634:	74 41                	je     c0016677 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016636:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001663c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016642:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016648:	83 ec 10             	sub    esp,0x10
c001664b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001664f:	89 f7                	mov    edi,esi
c0016651:	c1 e0 0a             	shl    eax,0xa
c0016654:	c1 ff 1f             	sar    edi,0x1f
c0016657:	57                   	push   edi
c0016658:	56                   	push   esi
c0016659:	52                   	push   edx
c001665a:	50                   	push   eax
c001665b:	e8 84 07 01 00       	call   c0026de4 <__udivdi3>
c0016660:	83 c4 14             	add    esp,0x14
c0016663:	52                   	push   edx
c0016664:	50                   	push   eax
c0016665:	6a 00                	push   0x0
c0016667:	6a 00                	push   0x0
c0016669:	53                   	push   ebx
c001666a:	e8 53 fe ff ff       	call   c00164c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001666f:	83 c4 20             	add    esp,0x20
c0016672:	e9 79 01 00 00       	jmp    c00167f0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016677:	89 f0                	mov    eax,esi
c0016679:	31 f6                	xor    esi,esi
c001667b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016682:	75 02                	jne    c0016686 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016684:	89 f1                	mov    ecx,esi
c0016686:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001668d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016694:	c1 e2 08             	shl    edx,0x8
c0016697:	c1 e7 10             	shl    edi,0x10
c001669a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166a2:	09 fa                	or     edx,edi
c00166a4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166ac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166b3:	83 c0 10             	add    eax,0x10
c00166b6:	09 fa                	or     edx,edi
c00166b8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00166bf:	c1 e7 18             	shl    edi,0x18
c00166c2:	09 fa                	or     edx,edi
c00166c4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00166cb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00166cf:	c1 e7 10             	shl    edi,0x10
c00166d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00166d9:	c1 e2 08             	shl    edx,0x8
c00166dc:	09 fa                	or     edx,edi
c00166de:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00166e5:	09 fa                	or     edx,edi
c00166e7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00166ee:	c1 e7 18             	shl    edi,0x18
c00166f1:	09 fa                	or     edx,edi
c00166f3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00166f7:	46                   	inc    esi
c00166f8:	83 fe 04             	cmp    esi,0x4
c00166fb:	0f 85 7a ff ff ff    	jne    c001667b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016705:	83 f0 01             	xor    eax,0x1
c0016708:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001670c:	75 57                	jne    c0016765 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001670e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016712:	83 f0 01             	xor    eax,0x1
c0016715:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016719:	75 4a                	jne    c0016765 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001671b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001671f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016727:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001672f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016735:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001673b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016741:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016745:	89 f7                	mov    edi,esi
c0016747:	c1 e0 0a             	shl    eax,0xa
c001674a:	c1 ff 1f             	sar    edi,0x1f
c001674d:	57                   	push   edi
c001674e:	56                   	push   esi
c001674f:	52                   	push   edx
c0016750:	50                   	push   eax
c0016751:	e8 8e 06 01 00       	call   c0026de4 <__udivdi3>
c0016756:	83 c4 10             	add    esp,0x10
c0016759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001675d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016761:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016765:	84 c9                	test   cl,cl
c0016767:	74 53                	je     c00167bc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016769:	0f b6 c9             	movzx  ecx,cl
c001676c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016770:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016774:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016778:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001677c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016784:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016788:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001678c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016790:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001679c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167a0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167a4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167a8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167b4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167b8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00167bc:	31 ed                	xor    ebp,ebp
c00167be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00167c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00167c6:	89 f8                	mov    eax,edi
c00167c8:	09 f0                	or     eax,esi
c00167ca:	74 1e                	je     c00167ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167cc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00167d0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00167d4:	89 d1                	mov    ecx,edx
c00167d6:	09 c1                	or     ecx,eax
c00167d8:	74 10                	je     c00167ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	57                   	push   edi
c00167de:	56                   	push   esi
c00167df:	52                   	push   edx
c00167e0:	50                   	push   eax
c00167e1:	53                   	push   ebx
c00167e2:	e8 db fc ff ff       	call   c00164c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00167e7:	83 c4 20             	add    esp,0x20
c00167ea:	45                   	inc    ebp
c00167eb:	83 fd 04             	cmp    ebp,0x4
c00167ee:	75 ce                	jne    c00167be <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00167f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00167f6:	5b                   	pop    ebx
c00167f7:	5e                   	pop    esi
c00167f8:	5f                   	pop    edi
c00167f9:	5d                   	pop    ebp
c00167fa:	c3                   	ret    
c00167fb:	90                   	nop

c00167fc <Serial::Serial(char const*)>:
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016803:	83 ec 08             	sub    esp,0x8
c0016806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001680a:	50                   	push   eax
c001680b:	e8 38 d8 ff ff       	call   c0014048 <Device::Device(char const*)>
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	ba e4 b8 02 c0       	mov    edx,0xc002b8e4
c0016818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681c:	89 10                	mov    DWORD PTR [eax],edx
c001681e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016822:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001682c:	90                   	nop
c001682d:	83 c4 0c             	add    esp,0xc
c0016830:	c3                   	ret    
c0016831:	90                   	nop

c0016832 <Serial::~Serial()>:
c0016832:	83 ec 0c             	sub    esp,0xc
c0016835:	ba e4 b8 02 c0       	mov    edx,0xc002b8e4
c001683a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683e:	89 10                	mov    DWORD PTR [eax],edx
c0016840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	50                   	push   eax
c0016848:	e8 c5 d4 ff ff       	call   c0013d12 <Device::~Device()>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	90                   	nop
c0016851:	83 c4 0c             	add    esp,0xc
c0016854:	c3                   	ret    
c0016855:	90                   	nop

c0016856 <Serial::~Serial()>:
c0016856:	83 ec 0c             	sub    esp,0xc
c0016859:	83 ec 0c             	sub    esp,0xc
c001685c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016860:	e8 cd ff ff ff       	call   c0016832 <Serial::~Serial()>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	83 ec 08             	sub    esp,0x8
c001686b:	68 58 01 00 00       	push   0x158
c0016870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016874:	e8 ba c0 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	83 c4 0c             	add    esp,0xc
c001687f:	c3                   	ret    

c0016880 <Timer::Timer(char const*)>:
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016887:	83 ec 08             	sub    esp,0x8
c001688a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001688e:	50                   	push   eax
c001688f:	e8 b4 d7 ff ff       	call   c0014048 <Device::Device(char const*)>
c0016894:	83 c4 10             	add    esp,0x10
c0016897:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c001689c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a0:	89 10                	mov    DWORD PTR [eax],edx
c00168a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168b0:	90                   	nop
c00168b1:	83 c4 0c             	add    esp,0xc
c00168b4:	c3                   	ret    
c00168b5:	90                   	nop

c00168b6 <Timer::~Timer()>:
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c00168be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c2:	89 10                	mov    DWORD PTR [eax],edx
c00168c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	50                   	push   eax
c00168cc:	e8 41 d4 ff ff       	call   c0013d12 <Device::~Device()>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	90                   	nop
c00168d5:	83 c4 0c             	add    esp,0xc
c00168d8:	c3                   	ret    
c00168d9:	90                   	nop

c00168da <Timer::~Timer()>:
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	83 ec 0c             	sub    esp,0xc
c00168e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e4:	e8 cd ff ff ff       	call   c00168b6 <Timer::~Timer()>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	83 ec 08             	sub    esp,0x8
c00168ef:	68 5c 01 00 00       	push   0x15c
c00168f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f8:	e8 36 c0 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	83 c4 0c             	add    esp,0xc
c0016903:	c3                   	ret    

c0016904 <Timer::read()>:
c0016904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016908:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001690e:	c3                   	ret    

c001690f <timerHandler(unsigned long long)>:
c001690f:	55                   	push   ebp
c0016910:	57                   	push   edi
c0016911:	56                   	push   esi
c0016912:	53                   	push   ebx
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001691a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001691e:	01 35 d0 ec 02 c0    	add    DWORD PTR ds:0xc002ecd0,esi
c0016924:	11 3d d4 ec 02 c0    	adc    DWORD PTR ds:0xc002ecd4,edi
c001692a:	80 3d 6d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66d,0x0
c0016931:	0f 84 42 01 00 00    	je     c0016a79 <timerHandler(unsigned long long)+0x16a>
c0016937:	fa                   	cli    
c0016938:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c0016947:	68 78 fb 02 c0       	push   0xc002fb78
c001694c:	e8 ed 24 01 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	84 c0                	test   al,al
c0016956:	0f 85 a2 00 00 00    	jne    c00169fe <timerHandler(unsigned long long)+0xef>
c001695c:	83 ec 0c             	sub    esp,0xc
c001695f:	68 78 fb 02 c0       	push   0xc002fb78
c0016964:	e8 f1 24 01 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016969:	83 c4 10             	add    esp,0x10
c001696c:	89 c3                	mov    ebx,eax
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	68 78 fb 02 c0       	push   0xc002fb78
c0016976:	e8 df 24 01 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001697b:	c7 04 24 78 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb78
c0016982:	89 c5                	mov    ebp,eax
c0016984:	e8 d9 24 01 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016989:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001698c:	83 c4 10             	add    esp,0x10
c001698f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016992:	39 15 d0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecd0,edx
c0016998:	a1 d4 ec 02 c0       	mov    eax,ds:0xc002ecd4
c001699d:	19 c8                	sbb    eax,ecx
c001699f:	72 21                	jb     c00169c2 <timerHandler(unsigned long long)+0xb3>
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	55                   	push   ebp
c00169a5:	e8 23 7a 00 00       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c00169aa:	83 c4 10             	add    esp,0x10
c00169ad:	39 eb                	cmp    ebx,ebp
c00169af:	75 21                	jne    c00169d2 <timerHandler(unsigned long long)+0xc3>
c00169b1:	83 ec 0c             	sub    esp,0xc
c00169b4:	68 78 fb 02 c0       	push   0xc002fb78
c00169b9:	e8 9c 24 01 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169be:	89 c3                	mov    ebx,eax
c00169c0:	eb 0d                	jmp    c00169cf <timerHandler(unsigned long long)+0xc0>
c00169c2:	50                   	push   eax
c00169c3:	50                   	push   eax
c00169c4:	55                   	push   ebp
c00169c5:	68 78 fb 02 c0       	push   0xc002fb78
c00169ca:	e8 41 25 01 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	83 ec 0c             	sub    esp,0xc
c00169d5:	68 78 fb 02 c0       	push   0xc002fb78
c00169da:	e8 5f 24 01 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169df:	83 c4 10             	add    esp,0x10
c00169e2:	84 c0                	test   al,al
c00169e4:	75 18                	jne    c00169fe <timerHandler(unsigned long long)+0xef>
c00169e6:	83 ec 0c             	sub    esp,0xc
c00169e9:	68 78 fb 02 c0       	push   0xc002fb78
c00169ee:	e8 67 24 01 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	39 d8                	cmp    eax,ebx
c00169f8:	0f 85 70 ff ff ff    	jne    c001696e <timerHandler(unsigned long long)+0x5f>
c00169fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a03:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016a07:	74 3d                	je     c0016a46 <timerHandler(unsigned long long)+0x137>
c0016a09:	80 3d 6c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66c,0x0
c0016a10:	74 34                	je     c0016a46 <timerHandler(unsigned long long)+0x137>
c0016a12:	fa                   	cli    
c0016a13:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0016a19:	31 d2                	xor    edx,edx
c0016a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a20:	89 f9                	mov    ecx,edi
c0016a22:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a2d:	39 c6                	cmp    esi,eax
c0016a2f:	19 d1                	sbb    ecx,edx
c0016a31:	72 05                	jb     c0016a38 <timerHandler(unsigned long long)+0x129>
c0016a33:	e8 03 75 00 00       	call   c001df3b <schedule()>
c0016a38:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0016a3d:	48                   	dec    eax
c0016a3e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0016a43:	75 01                	jne    c0016a46 <timerHandler(unsigned long long)+0x137>
c0016a45:	fb                   	sti    
c0016a46:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c0016a4b:	48                   	dec    eax
c0016a4c:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c0016a51:	75 18                	jne    c0016a6b <timerHandler(unsigned long long)+0x15c>
c0016a53:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c0016a5a:	74 0f                	je     c0016a6b <timerHandler(unsigned long long)+0x15c>
c0016a5c:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c0016a66:	e8 d0 74 00 00       	call   c001df3b <schedule()>
c0016a6b:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0016a70:	48                   	dec    eax
c0016a71:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0016a76:	75 01                	jne    c0016a79 <timerHandler(unsigned long long)+0x16a>
c0016a78:	fb                   	sti    
c0016a79:	83 c4 0c             	add    esp,0xc
c0016a7c:	5b                   	pop    ebx
c0016a7d:	5e                   	pop    esi
c0016a7e:	5f                   	pop    edi
c0016a7f:	5d                   	pop    ebp
c0016a80:	c3                   	ret    

c0016a81 <setupTimer(int)>:
c0016a81:	57                   	push   edi
c0016a82:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016a87:	56                   	push   esi
c0016a88:	53                   	push   ebx
c0016a89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a93:	83 ec 0c             	sub    esp,0xc
c0016a96:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a9c:	e8 a3 d6 ff ff       	call   c0014144 <Device::getName()>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016aa7:	0f 85 8d 00 00 00    	jne    c0016b3a <setupTimer(int)+0xb9>
c0016aad:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016ab2:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ab9:	74 7f                	je     c0016b3a <setupTimer(int)+0xb9>
c0016abb:	83 ec 0c             	sub    esp,0xc
c0016abe:	68 5c 01 00 00       	push   0x15c
c0016ac3:	e8 eb 8e ff ff       	call   c000f9b3 <malloc>
c0016ac8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016acb:	89 c3                	mov    ebx,eax
c0016acd:	e8 e2 fe 00 00       	call   c00269b4 <PIT::PIT()>
c0016ad2:	59                   	pop    ecx
c0016ad3:	5f                   	pop    edi
c0016ad4:	53                   	push   ebx
c0016ad5:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016adb:	e8 64 d3 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0016ae0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ae2:	6a 00                	push   0x0
c0016ae4:	6a 00                	push   0x0
c0016ae6:	56                   	push   esi
c0016ae7:	53                   	push   ebx
c0016ae8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aeb:	83 c4 14             	add    esp,0x14
c0016aee:	68 60 01 00 00       	push   0x160
c0016af3:	e8 bb 8e ff ff       	call   c000f9b3 <malloc>
c0016af8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016afb:	89 c7                	mov    edi,eax
c0016afd:	e8 62 fd 00 00       	call   c0026864 <APICTimer::APICTimer()>
c0016b02:	6a 00                	push   0x0
c0016b04:	6a 00                	push   0x0
c0016b06:	56                   	push   esi
c0016b07:	57                   	push   edi
c0016b08:	e8 59 fc 00 00       	call   c0026766 <APICTimer::open(int, int, void*)>
c0016b0d:	83 c4 20             	add    esp,0x20
c0016b10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b12:	6a 00                	push   0x0
c0016b14:	6a 00                	push   0x0
c0016b16:	6a 00                	push   0x0
c0016b18:	53                   	push   ebx
c0016b19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b1c:	58                   	pop    eax
c0016b1d:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016b22:	5a                   	pop    edx
c0016b23:	57                   	push   edi
c0016b24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b2a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b30:	e8 0f d3 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	eb 33                	jmp    c0016b6d <setupTimer(int)+0xec>
c0016b3a:	83 ec 0c             	sub    esp,0xc
c0016b3d:	68 5c 01 00 00       	push   0x15c
c0016b42:	e8 6c 8e ff ff       	call   c000f9b3 <malloc>
c0016b47:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b4a:	89 c3                	mov    ebx,eax
c0016b4c:	e8 63 fe 00 00       	call   c00269b4 <PIT::PIT()>
c0016b51:	58                   	pop    eax
c0016b52:	5a                   	pop    edx
c0016b53:	53                   	push   ebx
c0016b54:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016b5a:	e8 e5 d2 ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0016b5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b61:	6a 00                	push   0x0
c0016b63:	6a 00                	push   0x0
c0016b65:	56                   	push   esi
c0016b66:	53                   	push   ebx
c0016b67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b6a:	83 c4 20             	add    esp,0x20
c0016b6d:	89 d8                	mov    eax,ebx
c0016b6f:	5b                   	pop    ebx
c0016b70:	5e                   	pop    esi
c0016b71:	5f                   	pop    edi
c0016b72:	c3                   	ret    
c0016b73:	90                   	nop

c0016b74 <VCache::VCache(PhysicalDisk*)>:
c0016b74:	53                   	push   ebx
c0016b75:	83 ec 18             	sub    esp,0x18
c0016b78:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0016b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b81:	89 10                	mov    DWORD PTR [eax],edx
c0016b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b87:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b92:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ba4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016baf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016bb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016bdb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016be2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c05:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c0d:	83 ec 0c             	sub    esp,0xc
c0016c10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c14:	e8 9a 8d ff ff       	call   c000f9b3 <malloc>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	89 c3                	mov    ebx,eax
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	53                   	push   ebx
c0016c22:	e8 dd 70 00 00       	call   c001dd04 <Mutex::Mutex()>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c2e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c40:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c5c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c6c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c6f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c76:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c84:	05 00 01 00 00       	add    eax,0x100
c0016c89:	c1 e0 04             	shl    eax,0x4
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	50                   	push   eax
c0016c90:	e8 1e 8d ff ff       	call   c000f9b3 <malloc>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	89 c2                	mov    edx,eax
c0016c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cbe:	c1 e0 07             	shl    eax,0x7
c0016cc1:	83 ec 0c             	sub    esp,0xc
c0016cc4:	50                   	push   eax
c0016cc5:	e8 e9 8c ff ff       	call   c000f9b3 <malloc>
c0016cca:	83 c4 10             	add    esp,0x10
c0016ccd:	89 c2                	mov    edx,eax
c0016ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cd3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016cd6:	90                   	nop
c0016cd7:	83 c4 18             	add    esp,0x18
c0016cda:	5b                   	pop    ebx
c0016cdb:	c3                   	ret    

c0016cdc <VCache::invalidateReadBuffer()>:
c0016cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ce0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016ce6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016cea:	c3                   	ret    
c0016ceb:	90                   	nop

c0016cec <VCache::writeWriteBuffer()>:
c0016cec:	53                   	push   ebx
c0016ced:	83 ec 0c             	sub    esp,0xc
c0016cf0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016cf4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016cf7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016cfa:	68 50 b9 02 c0       	push   0xc002b950
c0016cff:	e8 07 bd ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016d04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d07:	5a                   	pop    edx
c0016d08:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d0a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d10:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d16:	50                   	push   eax
c0016d17:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d1a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d21:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d28:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d2c:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d33:	83 c4 28             	add    esp,0x28
c0016d36:	5b                   	pop    ebx
c0016d37:	c3                   	ret    

c0016d38 <VCache::~VCache()>:
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0016d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d44:	89 10                	mov    DWORD PTR [eax],edx
c0016d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d4d:	84 c0                	test   al,al
c0016d4f:	74 0f                	je     c0016d60 <VCache::~VCache()+0x28>
c0016d51:	83 ec 0c             	sub    esp,0xc
c0016d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d58:	e8 8f ff ff ff       	call   c0016cec <VCache::writeWriteBuffer()>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d64:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d67:	83 ec 0c             	sub    esp,0xc
c0016d6a:	50                   	push   eax
c0016d6b:	e8 53 8c ff ff       	call   c000f9c3 <free>
c0016d70:	83 c4 10             	add    esp,0x10
c0016d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	50                   	push   eax
c0016d7e:	e8 40 8c ff ff       	call   c000f9c3 <free>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	90                   	nop
c0016d87:	83 c4 0c             	add    esp,0xc
c0016d8a:	c3                   	ret    
c0016d8b:	90                   	nop

c0016d8c <VCache::~VCache()>:
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d96:	e8 9d ff ff ff       	call   c0016d38 <VCache::~VCache()>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	83 ec 08             	sub    esp,0x8
c0016da1:	6a 44                	push   0x44
c0016da3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da7:	e8 87 bb ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0016dac:	83 c4 10             	add    esp,0x10
c0016daf:	83 c4 0c             	add    esp,0xc
c0016db2:	c3                   	ret    
c0016db3:	90                   	nop

c0016db4 <VCache::write(unsigned long long, int, void*)>:
c0016db4:	55                   	push   ebp
c0016db5:	57                   	push   edi
c0016db6:	56                   	push   esi
c0016db7:	53                   	push   ebx
c0016db8:	83 ec 18             	sub    esp,0x18
c0016dbb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016dbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016dc3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016dc7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016dcb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dce:	e8 77 74 00 00       	call   c001e24a <Semaphore::acquire()>
c0016dd3:	c7 04 24 74 b9 02 c0 	mov    DWORD PTR [esp],0xc002b974
c0016dda:	e8 2c bc ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016de6:	74 0c                	je     c0016df4 <VCache::write(unsigned long long, int, void*)+0x40>
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	53                   	push   ebx
c0016dec:	e8 eb fe ff ff       	call   c0016cdc <VCache::invalidateReadBuffer()>
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016df8:	74 66                	je     c0016e60 <VCache::write(unsigned long long, int, void*)+0xac>
c0016dfa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dfd:	99                   	cdq    
c0016dfe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016e01:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016e04:	31 f0                	xor    eax,esi
c0016e06:	89 d1                	mov    ecx,edx
c0016e08:	89 ca                	mov    edx,ecx
c0016e0a:	31 fa                	xor    edx,edi
c0016e0c:	09 d0                	or     eax,edx
c0016e0e:	75 44                	jne    c0016e54 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e10:	83 fd 01             	cmp    ebp,0x1
c0016e13:	75 3f                	jne    c0016e54 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	68 9b b9 02 c0       	push   0xc002b99b
c0016e1d:	e8 e9 bb ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016e22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e25:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016e28:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e2e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e32:	0f af f9             	imul   edi,ecx
c0016e35:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016e38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e3d:	83 c4 10             	add    esp,0x10
c0016e40:	40                   	inc    eax
c0016e41:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e44:	83 c0 80             	add    eax,0xffffff80
c0016e47:	75 75                	jne    c0016ebe <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	53                   	push   ebx
c0016e4d:	e8 9a fe ff ff       	call   c0016cec <VCache::writeWriteBuffer()>
c0016e52:	eb 41                	jmp    c0016e95 <VCache::write(unsigned long long, int, void*)+0xe1>
c0016e54:	83 ec 0c             	sub    esp,0xc
c0016e57:	53                   	push   ebx
c0016e58:	e8 8f fe ff ff       	call   c0016cec <VCache::writeWriteBuffer()>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	83 fd 7f             	cmp    ebp,0x7f
c0016e63:	7f 35                	jg     c0016e9a <VCache::write(unsigned long long, int, void*)+0xe6>
c0016e65:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e68:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e6b:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e6e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e72:	56                   	push   esi
c0016e73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e77:	6a 01                	push   0x1
c0016e79:	68 b1 b9 02 c0       	push   0xc002b9b1
c0016e7e:	e8 88 bb ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016e83:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e86:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016e89:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e8f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	eb 24                	jmp    c0016ebe <VCache::write(unsigned long long, int, void*)+0x10a>
c0016e9a:	52                   	push   edx
c0016e9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e9f:	55                   	push   ebp
c0016ea0:	68 d2 b9 02 c0       	push   0xc002b9d2
c0016ea5:	e8 61 bb ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016eaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ead:	59                   	pop    ecx
c0016eae:	8b 10                	mov    edx,DWORD PTR [eax]
c0016eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016eb4:	55                   	push   ebp
c0016eb5:	57                   	push   edi
c0016eb6:	56                   	push   esi
c0016eb7:	50                   	push   eax
c0016eb8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016ebb:	83 c4 20             	add    esp,0x20
c0016ebe:	83 ec 0c             	sub    esp,0xc
c0016ec1:	68 ef b9 02 c0       	push   0xc002b9ef
c0016ec6:	e8 40 bb ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016ecb:	58                   	pop    eax
c0016ecc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ecf:	e8 e2 79 00 00       	call   c001e8b6 <Semaphore::release()>
c0016ed4:	83 c4 1c             	add    esp,0x1c
c0016ed7:	31 c0                	xor    eax,eax
c0016ed9:	5b                   	pop    ebx
c0016eda:	5e                   	pop    esi
c0016edb:	5f                   	pop    edi
c0016edc:	5d                   	pop    ebp
c0016edd:	c3                   	ret    

c0016ede <VCache::read(unsigned long long, int, void*)>:
c0016ede:	55                   	push   ebp
c0016edf:	57                   	push   edi
c0016ee0:	56                   	push   esi
c0016ee1:	53                   	push   ebx
c0016ee2:	83 ec 28             	sub    esp,0x28
c0016ee5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ee9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016eed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ef5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ef9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016efd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016f01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f04:	e8 41 73 00 00       	call   c001e24a <Semaphore::acquire()>
c0016f09:	c7 04 24 0f ba 02 c0 	mov    DWORD PTR [esp],0xc002ba0f
c0016f10:	e8 f6 ba ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016f15:	83 c4 10             	add    esp,0x10
c0016f18:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f1c:	74 0c                	je     c0016f2a <VCache::read(unsigned long long, int, void*)+0x4c>
c0016f1e:	83 ec 0c             	sub    esp,0xc
c0016f21:	53                   	push   ebx
c0016f22:	e8 c5 fd ff ff       	call   c0016cec <VCache::writeWriteBuffer()>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	83 fe 01             	cmp    esi,0x1
c0016f2d:	75 79                	jne    c0016fa8 <VCache::read(unsigned long long, int, void*)+0xca>
c0016f2f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f32:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016f39:	75 6d                	jne    c0016fa8 <VCache::read(unsigned long long, int, void*)+0xca>
c0016f3b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f3e:	89 d1                	mov    ecx,edx
c0016f40:	f7 d9                	neg    ecx
c0016f42:	89 cf                	mov    edi,ecx
c0016f44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f48:	c1 ff 1f             	sar    edi,0x1f
c0016f4b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016f4e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f52:	89 ce                	mov    esi,ecx
c0016f54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f58:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016f5c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f60:	89 cf                	mov    edi,ecx
c0016f62:	74 0a                	je     c0016f6e <VCache::read(unsigned long long, int, void*)+0x90>
c0016f64:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f67:	75 05                	jne    c0016f6e <VCache::read(unsigned long long, int, void*)+0x90>
c0016f69:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016f6c:	74 1c                	je     c0016f8a <VCache::read(unsigned long long, int, void*)+0xac>
c0016f6e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f72:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016f75:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f7d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f80:	52                   	push   edx
c0016f81:	57                   	push   edi
c0016f82:	56                   	push   esi
c0016f83:	50                   	push   eax
c0016f84:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f87:	83 c4 20             	add    esp,0x20
c0016f8a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f8d:	89 ef                	mov    edi,ebp
c0016f8f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f95:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f98:	8d 70 ff             	lea    esi,[eax-0x1]
c0016f9b:	23 34 24             	and    esi,DWORD PTR [esp]
c0016f9e:	0f af f1             	imul   esi,ecx
c0016fa1:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016fa4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fa6:	eb 30                	jmp    c0016fd8 <VCache::read(unsigned long long, int, void*)+0xfa>
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	53                   	push   ebx
c0016fac:	e8 2b fd ff ff       	call   c0016cdc <VCache::invalidateReadBuffer()>
c0016fb1:	83 c4 0c             	add    esp,0xc
c0016fb4:	55                   	push   ebp
c0016fb5:	56                   	push   esi
c0016fb6:	68 35 ba 02 c0       	push   0xc002ba35
c0016fbb:	e8 4b ba ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016fc0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fc5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016fc8:	56                   	push   esi
c0016fc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fd1:	50                   	push   eax
c0016fd2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016fd5:	83 c4 20             	add    esp,0x20
c0016fd8:	83 ec 0c             	sub    esp,0xc
c0016fdb:	68 51 ba 02 c0       	push   0xc002ba51
c0016fe0:	e8 26 ba ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0016fe5:	58                   	pop    eax
c0016fe6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fe9:	e8 c8 78 00 00       	call   c001e8b6 <Semaphore::release()>
c0016fee:	83 c4 2c             	add    esp,0x2c
c0016ff1:	31 c0                	xor    eax,eax
c0016ff3:	5b                   	pop    ebx
c0016ff4:	5e                   	pop    esi
c0016ff5:	5f                   	pop    edi
c0016ff6:	5d                   	pop    ebp
c0016ff7:	c3                   	ret    

c0016ff8 <Video::putrect(int, int, int, int, unsigned int)>:
c0016ff8:	55                   	push   ebp
c0016ff9:	57                   	push   edi
c0016ffa:	56                   	push   esi
c0016ffb:	53                   	push   ebx
c0016ffc:	83 ec 1c             	sub    esp,0x1c
c0016fff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017003:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017007:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001700b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001700f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017017:	01 df                	add    edi,ebx
c0017019:	39 fb                	cmp    ebx,edi
c001701b:	7d 1f                	jge    c001703c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001701d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017021:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017025:	7d 12                	jge    c0017039 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017027:	8b 16                	mov    edx,DWORD PTR [esi]
c0017029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001702d:	53                   	push   ebx
c001702e:	55                   	push   ebp
c001702f:	45                   	inc    ebp
c0017030:	56                   	push   esi
c0017031:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017034:	83 c4 10             	add    esp,0x10
c0017037:	eb e8                	jmp    c0017021 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017039:	43                   	inc    ebx
c001703a:	eb dd                	jmp    c0017019 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001703c:	83 c4 1c             	add    esp,0x1c
c001703f:	5b                   	pop    ebx
c0017040:	5e                   	pop    esi
c0017041:	5f                   	pop    edi
c0017042:	5d                   	pop    ebp
c0017043:	c3                   	ret    

c0017044 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017044:	55                   	push   ebp
c0017045:	57                   	push   edi
c0017046:	31 ff                	xor    edi,edi
c0017048:	56                   	push   esi
c0017049:	53                   	push   ebx
c001704a:	83 ec 1c             	sub    esp,0x1c
c001704d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017051:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017055:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001705c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017061:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017065:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017069:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001706d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017070:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017074:	01 f9                	add    ecx,edi
c0017076:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001707a:	7d 2f                	jge    c00170ab <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001707c:	31 f6                	xor    esi,esi
c001707e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017082:	01 f2                	add    edx,esi
c0017084:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017088:	7d 1a                	jge    c00170a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001708a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001708d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017090:	46                   	inc    esi
c0017091:	51                   	push   ecx
c0017092:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017096:	52                   	push   edx
c0017097:	55                   	push   ebp
c0017098:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170a2:	eb da                	jmp    c001707e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00170a4:	47                   	inc    edi
c00170a5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00170a9:	eb c5                	jmp    c0017070 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00170ab:	83 c4 1c             	add    esp,0x1c
c00170ae:	5b                   	pop    ebx
c00170af:	5e                   	pop    esi
c00170b0:	5f                   	pop    edi
c00170b1:	5d                   	pop    ebp
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <Video::blit(unsigned int*, int, int, int, int)>:
c00170b4:	55                   	push   ebp
c00170b5:	57                   	push   edi
c00170b6:	56                   	push   esi
c00170b7:	53                   	push   ebx
c00170b8:	83 ec 1c             	sub    esp,0x1c
c00170bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170c3:	85 c0                	test   eax,eax
c00170c5:	79 02                	jns    c00170c9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00170c7:	31 c0                	xor    eax,eax
c00170c9:	c1 e0 02             	shl    eax,0x2
c00170cc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170d8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00170dc:	39 d8                	cmp    eax,ebx
c00170de:	7e 49                	jle    c0017129 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00170e0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170e6:	7c 41                	jl     c0017129 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00170e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00170ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170f0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00170f4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00170f8:	39 f9                	cmp    ecx,edi
c00170fa:	7e 22                	jle    c001711e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00170fc:	83 c5 04             	add    ebp,0x4
c00170ff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017105:	7c 14                	jl     c001711b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017107:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017109:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001710c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017110:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017114:	56                   	push   esi
c0017115:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017118:	83 c4 10             	add    esp,0x10
c001711b:	47                   	inc    edi
c001711c:	eb d2                	jmp    c00170f0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001711e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017122:	43                   	inc    ebx
c0017123:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017127:	eb ab                	jmp    c00170d4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017129:	83 c4 1c             	add    esp,0x1c
c001712c:	5b                   	pop    ebx
c001712d:	5e                   	pop    esi
c001712e:	5f                   	pop    edi
c001712f:	5d                   	pop    ebp
c0017130:	c3                   	ret    
c0017131:	90                   	nop

c0017132 <Video::clearScreen(unsigned int)>:
c0017132:	57                   	push   edi
c0017133:	56                   	push   esi
c0017134:	53                   	push   ebx
c0017135:	31 db                	xor    ebx,ebx
c0017137:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001713b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017141:	7e 1f                	jle    c0017162 <Video::clearScreen(unsigned int)+0x30>
c0017143:	31 ff                	xor    edi,edi
c0017145:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001714b:	7e 12                	jle    c001715f <Video::clearScreen(unsigned int)+0x2d>
c001714d:	8b 06                	mov    eax,DWORD PTR [esi]
c001714f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017153:	53                   	push   ebx
c0017154:	57                   	push   edi
c0017155:	47                   	inc    edi
c0017156:	56                   	push   esi
c0017157:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	eb e6                	jmp    c0017145 <Video::clearScreen(unsigned int)+0x13>
c001715f:	43                   	inc    ebx
c0017160:	eb d9                	jmp    c001713b <Video::clearScreen(unsigned int)+0x9>
c0017162:	5b                   	pop    ebx
c0017163:	5e                   	pop    esi
c0017164:	5f                   	pop    edi
c0017165:	c3                   	ret    

c0017166 <Video::putpixel(int, int, unsigned int)>:
c0017166:	c7 44 24 04 80 ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba80
c001716e:	e9 36 32 00 00       	jmp    c001a3a9 <Krnl::panic(char const*)>
c0017173:	90                   	nop

c0017174 <Video::Video(char const*)>:
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717b:	83 ec 08             	sub    esp,0x8
c001717e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017182:	50                   	push   eax
c0017183:	e8 c0 ce ff ff       	call   c0014048 <Device::Device(char const*)>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	ba f0 ba 02 c0       	mov    edx,0xc002baf0
c0017190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017194:	89 10                	mov    DWORD PTR [eax],edx
c0017196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001719a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00171a4:	90                   	nop
c00171a5:	83 c4 0c             	add    esp,0xc
c00171a8:	c3                   	ret    
c00171a9:	90                   	nop

c00171aa <Video::~Video()>:
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	ba f0 ba 02 c0       	mov    edx,0xc002baf0
c00171b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b6:	89 10                	mov    DWORD PTR [eax],edx
c00171b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171bc:	83 ec 0c             	sub    esp,0xc
c00171bf:	50                   	push   eax
c00171c0:	e8 4d cb ff ff       	call   c0013d12 <Device::~Device()>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	90                   	nop
c00171c9:	83 c4 0c             	add    esp,0xc
c00171cc:	c3                   	ret    
c00171cd:	90                   	nop

c00171ce <Video::~Video()>:
c00171ce:	83 ec 0c             	sub    esp,0xc
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d8:	e8 cd ff ff ff       	call   c00171aa <Video::~Video()>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	83 ec 08             	sub    esp,0x8
c00171e3:	68 64 01 00 00       	push   0x164
c00171e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ec:	e8 42 b7 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00171f1:	83 c4 10             	add    esp,0x10
c00171f4:	83 c4 0c             	add    esp,0xc
c00171f7:	c3                   	ret    

c00171f8 <Video::isMonochrome()>:
c00171f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171fc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <Video::getWidth()>:
c0017204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017208:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001720e:	c3                   	ret    
c001720f:	90                   	nop

c0017210 <Video::getHeight()>:
c0017210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017214:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001721a:	c3                   	ret    
c001721b:	90                   	nop

c001721c <Video::drawCursor(int, int, unsigned char*, int)>:
c001721c:	55                   	push   ebp
c001721d:	57                   	push   edi
c001721e:	56                   	push   esi
c001721f:	53                   	push   ebx
c0017220:	83 ec 2c             	sub    esp,0x2c
c0017223:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017227:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001722b:	83 f8 01             	cmp    eax,0x1
c001722e:	19 c9                	sbb    ecx,ecx
c0017230:	31 db                	xor    ebx,ebx
c0017232:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017236:	89 cd                	mov    ebp,ecx
c0017238:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017240:	f7 d5                	not    ebp
c0017242:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017248:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001724c:	01 d8                	add    eax,ebx
c001724e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017252:	56                   	push   esi
c0017253:	e8 b8 ff ff ff       	call   c0017210 <Video::getHeight()>
c0017258:	59                   	pop    ecx
c0017259:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001725d:	7e 70                	jle    c00172cf <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001725f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017263:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017267:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001726a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001726e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017272:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017279:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001727d:	89 f8                	mov    eax,edi
c001727f:	83 c0 20             	add    eax,0x20
c0017282:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017286:	56                   	push   esi
c0017287:	e8 78 ff ff ff       	call   c0017204 <Video::getWidth()>
c001728c:	5a                   	pop    edx
c001728d:	39 c7                	cmp    edi,eax
c001728f:	7d 34                	jge    c00172c5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017291:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017296:	74 05                	je     c001729d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017298:	8b 06                	mov    eax,DWORD PTR [esi]
c001729a:	55                   	push   ebp
c001729b:	eb 0d                	jmp    c00172aa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001729d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00172a2:	74 12                	je     c00172b6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00172a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00172a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00172ae:	57                   	push   edi
c00172af:	56                   	push   esi
c00172b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00172ba:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00172be:	47                   	inc    edi
c00172bf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00172c3:	75 c1                	jne    c0017286 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00172c5:	43                   	inc    ebx
c00172c6:	83 fb 20             	cmp    ebx,0x20
c00172c9:	0f 85 79 ff ff ff    	jne    c0017248 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00172cf:	83 c4 2c             	add    esp,0x2c
c00172d2:	5b                   	pop    ebx
c00172d3:	5e                   	pop    esi
c00172d4:	5f                   	pop    edi
c00172d5:	5d                   	pop    ebp
c00172d6:	c3                   	ret    
c00172d7:	90                   	nop

c00172d8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00172d8:	55                   	push   ebp
c00172d9:	57                   	push   edi
c00172da:	56                   	push   esi
c00172db:	53                   	push   ebx
c00172dc:	83 ec 28             	sub    esp,0x28
c00172df:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00172e3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00172e7:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00172eb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00172ef:	c1 e6 08             	shl    esi,0x8
c00172f2:	01 c6                	add    esi,eax
c00172f4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00172f8:	c1 e0 08             	shl    eax,0x8
c00172fb:	01 d0                	add    eax,edx
c00172fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017305:	0f af c6             	imul   eax,esi
c0017308:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001730f:	50                   	push   eax
c0017310:	e8 9e 86 ff ff       	call   c000f9b3 <malloc>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	89 c7                	mov    edi,eax
c001731a:	85 c0                	test   eax,eax
c001731c:	75 10                	jne    c001732e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	68 a1 ba 02 c0       	push   0xc002baa1
c0017326:	e8 7e 30 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017331:	ba 12 00 00 00       	mov    edx,0x12
c0017336:	84 c0                	test   al,al
c0017338:	74 11                	je     c001734b <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001733a:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001733e:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0017342:	c1 fa 03             	sar    edx,0x3
c0017345:	0f af d1             	imul   edx,ecx
c0017348:	83 c2 12             	add    edx,0x12
c001734b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001734f:	74 04                	je     c0017355 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017351:	85 f6                	test   esi,esi
c0017353:	75 12                	jne    c0017367 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017355:	83 ec 0c             	sub    esp,0xc
c0017358:	68 b1 ba 02 c0       	push   0xc002bab1
c001735d:	e8 a9 b6 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0017362:	e9 b8 00 00 00       	jmp    c001741f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0017367:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001736b:	80 f9 02             	cmp    cl,0x2
c001736e:	0f 85 96 00 00 00    	jne    c001740a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017374:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017379:	75 0e                	jne    c0017389 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001737b:	84 c0                	test   al,al
c001737d:	75 0a                	jne    c0017389 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001737f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017382:	83 e8 18             	sub    eax,0x18
c0017385:	a8 f7                	test   al,0xf7
c0017387:	74 0a                	je     c0017393 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017389:	83 ec 0c             	sub    esp,0xc
c001738c:	68 c6 ba 02 c0       	push   0xc002bac6
c0017391:	eb 7f                	jmp    c0017412 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017393:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001739b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173a3:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00173a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00173af:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00173b3:	75 0c                	jne    c00173c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173b5:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00173ba:	c1 e0 18             	shl    eax,0x18
c00173bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173c1:	45                   	inc    ebp
c00173c2:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00173c7:	c1 e1 10             	shl    ecx,0x10
c00173ca:	89 c8                	mov    eax,ecx
c00173cc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00173d1:	c1 e1 08             	shl    ecx,0x8
c00173d4:	09 c1                	or     ecx,eax
c00173d6:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00173da:	09 c1                	or     ecx,eax
c00173dc:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00173e0:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00173e4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00173e8:	c1 f8 03             	sar    eax,0x3
c00173eb:	01 c2                	add    edx,eax
c00173ed:	89 e8                	mov    eax,ebp
c00173ef:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173f3:	39 c6                	cmp    esi,eax
c00173f5:	7f b0                	jg     c00173a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00173f7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173ff:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017402:	7e 22                	jle    c0017426 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017404:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017408:	eb 99                	jmp    c00173a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001740a:	50                   	push   eax
c001740b:	50                   	push   eax
c001740c:	51                   	push   ecx
c001740d:	68 d4 ba 02 c0       	push   0xc002bad4
c0017412:	e8 f4 b5 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0017417:	89 3c 24             	mov    DWORD PTR [esp],edi
c001741a:	e8 a4 85 ff ff       	call   c000f9c3 <free>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	31 ff                	xor    edi,edi
c0017424:	eb 0f                	jmp    c0017435 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017426:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001742a:	89 30                	mov    DWORD PTR [eax],esi
c001742c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017430:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017433:	89 30                	mov    DWORD PTR [eax],esi
c0017435:	83 c4 1c             	add    esp,0x1c
c0017438:	89 f8                	mov    eax,edi
c001743a:	5b                   	pop    ebx
c001743b:	5e                   	pop    esi
c001743c:	5f                   	pop    edi
c001743d:	5d                   	pop    ebp
c001743e:	c3                   	ret    
c001743f:	90                   	nop

c0017440 <Video::putTGA(int, int, unsigned char*, int)>:
c0017440:	55                   	push   ebp
c0017441:	57                   	push   edi
c0017442:	56                   	push   esi
c0017443:	53                   	push   ebx
c0017444:	83 ec 28             	sub    esp,0x28
c0017447:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001744b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001744f:	50                   	push   eax
c0017450:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017454:	50                   	push   eax
c0017455:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017459:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001745d:	56                   	push   esi
c001745e:	e8 75 fe ff ff       	call   c00172d8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017463:	83 c4 20             	add    esp,0x20
c0017466:	85 c0                	test   eax,eax
c0017468:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001746c:	74 35                	je     c00174a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001746e:	89 c7                	mov    edi,eax
c0017470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017474:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017478:	39 d8                	cmp    eax,ebx
c001747a:	7e 27                	jle    c00174a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001747c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017480:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017484:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017488:	39 e8                	cmp    eax,ebp
c001748a:	7e 14                	jle    c00174a0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001748c:	8b 06                	mov    eax,DWORD PTR [esi]
c001748e:	83 c7 04             	add    edi,0x4
c0017491:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017494:	53                   	push   ebx
c0017495:	55                   	push   ebp
c0017496:	45                   	inc    ebp
c0017497:	56                   	push   esi
c0017498:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	eb e0                	jmp    c0017480 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00174a0:	43                   	inc    ebx
c00174a1:	eb cd                	jmp    c0017470 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00174a3:	83 c4 1c             	add    esp,0x1c
c00174a6:	5b                   	pop    ebx
c00174a7:	5e                   	pop    esi
c00174a8:	5f                   	pop    edi
c00174a9:	5d                   	pop    ebp
c00174aa:	c3                   	ret    
c00174ab:	90                   	nop

c00174ac <ACPI::close(int, int, void*)>:
c00174ac:	83 ec 1c             	sub    esp,0x1c
c00174af:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00174b7:	74 0a                	je     c00174c3 <ACPI::close(int, int, void*)+0x17>
c00174b9:	b8 00 00 00 00       	mov    eax,0x0
c00174be:	e9 8a 00 00 00       	jmp    c001754d <ACPI::close(int, int, void*)+0xa1>
c00174c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00174c8:	75 27                	jne    c00174f1 <ACPI::close(int, int, void*)+0x45>
c00174ca:	a1 e8 ec 02 c0       	mov    eax,ds:0xc002ece8
c00174cf:	85 c0                	test   eax,eax
c00174d1:	74 07                	je     c00174da <ACPI::close(int, int, void*)+0x2e>
c00174d3:	a1 e8 ec 02 c0       	mov    eax,ds:0xc002ece8
c00174d8:	ff d0                	call   eax
c00174da:	83 ec 0c             	sub    esp,0xc
c00174dd:	68 30 bb 02 c0       	push   0xc002bb30
c00174e2:	e8 c2 2e 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174ef:	eb 5c                	jmp    c001754d <ACPI::close(int, int, void*)+0xa1>
c00174f1:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174f6:	75 50                	jne    c0017548 <ACPI::close(int, int, void*)+0x9c>
c00174f8:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c00174fd:	85 c0                	test   eax,eax
c00174ff:	74 07                	je     c0017508 <ACPI::close(int, int, void*)+0x5c>
c0017501:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c0017506:	ff d0                	call   eax
c0017508:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001750d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017512:	83 e0 02             	and    eax,0x2
c0017515:	74 1c                	je     c0017533 <ACPI::close(int, int, void*)+0x87>
c0017517:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001751e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017522:	89 c2                	mov    edx,eax
c0017524:	ec                   	in     al,dx
c0017525:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017529:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001752d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017531:	eb da                	jmp    c001750d <ACPI::close(int, int, void*)+0x61>
c0017533:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001753a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001753f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017543:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017547:	ee                   	out    dx,al
c0017548:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001754d:	83 c4 1c             	add    esp,0x1c
c0017550:	c3                   	ret    

c0017551 <findRSDP()>:
c0017551:	83 ec 1c             	sub    esp,0x1c
c0017554:	83 ec 0c             	sub    esp,0xc
c0017557:	68 0b bc 02 c0       	push   0xc002bc0b
c001755c:	e8 ac 84 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017561:	83 c4 10             	add    esp,0x10
c0017564:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017569:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001756f:	83 e0 04             	and    eax,0x4
c0017572:	84 c0                	test   al,al
c0017574:	75 0a                	jne    c0017580 <findRSDP()+0x2f>
c0017576:	b8 00 00 00 00       	mov    eax,0x0
c001757b:	e9 9a 00 00 00       	jmp    c001761a <findRSDP()+0xc9>
c0017580:	a1 b4 e6 02 c0       	mov    eax,ds:0xc002e6b4
c0017585:	3d ff 07 00 00       	cmp    eax,0x7ff
c001758a:	7f 1b                	jg     c00175a7 <findRSDP()+0x56>
c001758c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017591:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017597:	83 e2 fb             	and    edx,0xfffffffb
c001759a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175a0:	b8 00 00 00 00       	mov    eax,0x0
c00175a5:	eb 73                	jmp    c001761a <findRSDP()+0xc9>
c00175a7:	83 ec 0c             	sub    esp,0xc
c00175aa:	68 1b bc 02 c0       	push   0xc002bc1b
c00175af:	e8 59 84 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00175bf:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00175c7:	77 3c                	ja     c0017605 <findRSDP()+0xb4>
c00175c9:	83 ec 04             	sub    esp,0x4
c00175cc:	6a 08                	push   0x8
c00175ce:	68 34 bc 02 c0       	push   0xc002bc34
c00175d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175d7:	e8 70 90 fe ff       	call   c000064c <memcmp>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	85 c0                	test   eax,eax
c00175e1:	0f 94 c0             	sete   al
c00175e4:	84 c0                	test   al,al
c00175e6:	74 16                	je     c00175fe <findRSDP()+0xad>
c00175e8:	83 ec 0c             	sub    esp,0xc
c00175eb:	68 3d bc 02 c0       	push   0xc002bc3d
c00175f0:	e8 18 84 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fc:	eb 1c                	jmp    c001761a <findRSDP()+0xc9>
c00175fe:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017603:	eb ba                	jmp    c00175bf <findRSDP()+0x6e>
c0017605:	83 ec 0c             	sub    esp,0xc
c0017608:	68 4b bc 02 c0       	push   0xc002bc4b
c001760d:	e8 fb 83 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	b8 00 00 00 00       	mov    eax,0x0
c001761a:	83 c4 1c             	add    esp,0x1c
c001761d:	c3                   	ret    

c001761e <loadACPITables(unsigned char*)>:
c001761e:	57                   	push   edi
c001761f:	56                   	push   esi
c0017620:	53                   	push   ebx
c0017621:	83 ec 60             	sub    esp,0x60
c0017624:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017629:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001762f:	83 e0 04             	and    eax,0x4
c0017632:	84 c0                	test   al,al
c0017634:	0f 84 33 02 00 00    	je     c001786d <loadACPITables(unsigned char*)+0x24f>
c001763a:	a0 00 ef 02 c0       	mov    al,ds:0xc002ef00
c001763f:	84 c0                	test   al,al
c0017641:	74 75                	je     c00176b8 <loadACPITables(unsigned char*)+0x9a>
c0017643:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017647:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001764b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001764f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017652:	83 e8 24             	sub    eax,0x24
c0017655:	c1 e8 03             	shr    eax,0x3
c0017658:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001765c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017664:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017668:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001766c:	0f 8d b2 00 00 00    	jge    c0017724 <loadACPITables(unsigned char*)+0x106>
c0017672:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017676:	83 c0 24             	add    eax,0x24
c0017679:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001767d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017681:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017685:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017689:	c1 e0 03             	shl    eax,0x3
c001768c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017690:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017694:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017697:	8b 00                	mov    eax,DWORD PTR [eax]
c0017699:	89 c1                	mov    ecx,eax
c001769b:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c00176a0:	8d 50 01             	lea    edx,[eax+0x1]
c00176a3:	89 15 ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edx
c00176a9:	89 ca                	mov    edx,ecx
c00176ab:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c00176b2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00176b6:	eb ac                	jmp    c0017664 <loadACPITables(unsigned char*)+0x46>
c00176b8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176c7:	83 e8 24             	sub    eax,0x24
c00176ca:	c1 e8 02             	shr    eax,0x2
c00176cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176d1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00176d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176dd:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00176e1:	7d 41                	jge    c0017724 <loadACPITables(unsigned char*)+0x106>
c00176e3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00176e7:	83 c0 24             	add    eax,0x24
c00176ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176f2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176f6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00176fa:	c1 e0 02             	shl    eax,0x2
c00176fd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017701:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017705:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017707:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c001770c:	8d 50 01             	lea    edx,[eax+0x1]
c001770f:	89 15 ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edx
c0017715:	89 ca                	mov    edx,ecx
c0017717:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c001771e:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017722:	eb b5                	jmp    c00176d9 <loadACPITables(unsigned char*)+0xbb>
c0017724:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001772c:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017731:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017735:	0f 8d 33 01 00 00    	jge    c001786e <loadACPITables(unsigned char*)+0x250>
c001773b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001773f:	8b 04 c5 04 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd12fc]
c0017746:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001774a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001774e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017756:	25 ff 0f 00 00       	and    eax,0xfff
c001775b:	89 c6                	mov    esi,eax
c001775d:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0017763:	83 ec 0c             	sub    esp,0xc
c0017766:	6a 01                	push   0x1
c0017768:	e8 cc 9e ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017774:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001777a:	83 ec 0c             	sub    esp,0xc
c001777d:	6a 01                	push   0x1
c001777f:	6a 01                	push   0x1
c0017781:	50                   	push   eax
c0017782:	52                   	push   edx
c0017783:	53                   	push   ebx
c0017784:	e8 4d a8 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017789:	83 c4 20             	add    esp,0x20
c001778c:	09 f0                	or     eax,esi
c001778e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017792:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017796:	c1 e0 03             	shl    eax,0x3
c0017799:	05 00 ed 02 c0       	add    eax,0xc002ed00
c001779e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00177b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00177c6:	89 c6                	mov    esi,eax
c00177c8:	89 d7                	mov    edi,edx
c00177ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177cc:	89 c8                	mov    eax,ecx
c00177ce:	89 fa                	mov    edx,edi
c00177d0:	89 f3                	mov    ebx,esi
c00177d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00177d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00177da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ed:	05 00 10 00 00       	add    eax,0x1000
c00177f2:	c1 e8 0c             	shr    eax,0xc
c00177f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017805:	25 ff 0f 00 00       	and    eax,0xfff
c001780a:	89 c6                	mov    esi,eax
c001780c:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0017812:	83 ec 0c             	sub    esp,0xc
c0017815:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017819:	e8 1b 9e ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017825:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	6a 01                	push   0x1
c0017830:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017834:	50                   	push   eax
c0017835:	52                   	push   edx
c0017836:	53                   	push   ebx
c0017837:	e8 9a a7 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001783c:	83 c4 20             	add    esp,0x20
c001783f:	09 f0                	or     eax,esi
c0017841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017849:	83 ec 0c             	sub    esp,0xc
c001784c:	50                   	push   eax
c001784d:	e8 17 a1 ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c0017852:	83 c4 10             	add    esp,0x10
c0017855:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017859:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001785d:	89 14 c5 04 ed 02 c0 	mov    DWORD PTR [eax*8-0x3ffd12fc],edx
c0017864:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017868:	e9 bf fe ff ff       	jmp    c001772c <loadACPITables(unsigned char*)+0x10e>
c001786d:	90                   	nop
c001786e:	83 c4 60             	add    esp,0x60
c0017871:	5b                   	pop    ebx
c0017872:	5e                   	pop    esi
c0017873:	5f                   	pop    edi
c0017874:	c3                   	ret    

c0017875 <findRSDT(unsigned char*)>:
c0017875:	57                   	push   edi
c0017876:	56                   	push   esi
c0017877:	53                   	push   ebx
c0017878:	83 ec 50             	sub    esp,0x50
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	68 5f bc 02 c0       	push   0xc002bc5f
c0017883:	e8 85 81 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017888:	83 c4 10             	add    esp,0x10
c001788b:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017890:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017896:	83 e0 04             	and    eax,0x4
c0017899:	84 c0                	test   al,al
c001789b:	75 0a                	jne    c00178a7 <findRSDT(unsigned char*)+0x32>
c001789d:	b8 00 00 00 00       	mov    eax,0x0
c00178a2:	e9 81 01 00 00       	jmp    c0017a28 <findRSDT(unsigned char*)+0x1b3>
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	68 71 bc 02 c0       	push   0xc002bc71
c00178af:	e8 59 81 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	89 e0                	mov    eax,esp
c00178b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00178c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00178c5:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00178cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178d9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00178dd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00178e1:	89 c6                	mov    esi,eax
c00178e3:	89 d7                	mov    edi,edx
c00178e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178e7:	89 c8                	mov    eax,ecx
c00178e9:	89 fa                	mov    edx,edi
c00178eb:	89 f3                	mov    ebx,esi
c00178ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00178f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00178f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178f9:	83 ec 0c             	sub    esp,0xc
c00178fc:	68 83 bc 02 c0       	push   0xc002bc83
c0017901:	e8 07 81 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001790d:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017911:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	68 95 bc 02 c0       	push   0xc002bc95
c0017921:	e8 e7 80 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001792d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017931:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017939:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001793d:	83 ec 04             	sub    esp,0x4
c0017940:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017944:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017948:	68 54 bb 02 c0       	push   0xc002bb54
c001794d:	e8 b9 b0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017959:	25 ff 0f 00 00       	and    eax,0xfff
c001795e:	89 c6                	mov    esi,eax
c0017960:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c0017966:	83 ec 0c             	sub    esp,0xc
c0017969:	6a 02                	push   0x2
c001796b:	e8 c9 9c ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017977:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001797d:	83 ec 0c             	sub    esp,0xc
c0017980:	6a 01                	push   0x1
c0017982:	6a 02                	push   0x2
c0017984:	50                   	push   eax
c0017985:	52                   	push   edx
c0017986:	53                   	push   ebx
c0017987:	e8 4a a6 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001798c:	83 c4 20             	add    esp,0x20
c001798f:	09 f0                	or     eax,esi
c0017991:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017995:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017999:	25 ff 0f 00 00       	and    eax,0xfff
c001799e:	89 c6                	mov    esi,eax
c00179a0:	8b 1d d0 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d0
c00179a6:	83 ec 0c             	sub    esp,0xc
c00179a9:	6a 02                	push   0x2
c00179ab:	e8 89 9c ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179b7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179bd:	83 ec 0c             	sub    esp,0xc
c00179c0:	6a 01                	push   0x1
c00179c2:	6a 02                	push   0x2
c00179c4:	50                   	push   eax
c00179c5:	52                   	push   edx
c00179c6:	53                   	push   ebx
c00179c7:	e8 0a a6 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179cc:	83 c4 20             	add    esp,0x20
c00179cf:	09 f0                	or     eax,esi
c00179d1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00179d5:	83 ec 04             	sub    esp,0x4
c00179d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179e0:	68 74 bb 02 c0       	push   0xc002bb74
c00179e5:	e8 21 b0 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00179f2:	75 11                	jne    c0017a05 <findRSDT(unsigned char*)+0x190>
c00179f4:	c6 05 00 ef 02 c0 00 	mov    BYTE PTR ds:0xc002ef00,0x0
c00179fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179ff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a03:	eb 1f                	jmp    c0017a24 <findRSDT(unsigned char*)+0x1af>
c0017a05:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017a0a:	75 11                	jne    c0017a1d <findRSDT(unsigned char*)+0x1a8>
c0017a0c:	c6 05 00 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef00,0x1
c0017a13:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a17:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a1b:	eb 07                	jmp    c0017a24 <findRSDT(unsigned char*)+0x1af>
c0017a1d:	b8 00 00 00 00       	mov    eax,0x0
c0017a22:	eb 04                	jmp    c0017a28 <findRSDT(unsigned char*)+0x1b3>
c0017a24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a28:	83 c4 50             	add    esp,0x50
c0017a2b:	5b                   	pop    ebx
c0017a2c:	5e                   	pop    esi
c0017a2d:	5f                   	pop    edi
c0017a2e:	c3                   	ret    

c0017a2f <findDataTable(unsigned char*, char*)>:
c0017a2f:	83 ec 1c             	sub    esp,0x1c
c0017a32:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017a37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a3d:	83 e0 04             	and    eax,0x4
c0017a40:	84 c0                	test   al,al
c0017a42:	75 07                	jne    c0017a4b <findDataTable(unsigned char*, char*)+0x1c>
c0017a44:	b8 00 00 00 00       	mov    eax,0x0
c0017a49:	eb 52                	jmp    c0017a9d <findDataTable(unsigned char*, char*)+0x6e>
c0017a4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a53:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0017a58:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017a5c:	7d 3a                	jge    c0017a98 <findDataTable(unsigned char*, char*)+0x69>
c0017a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a62:	c1 e0 03             	shl    eax,0x3
c0017a65:	05 00 ed 02 c0       	add    eax,0xc002ed00
c0017a6a:	83 ec 04             	sub    esp,0x4
c0017a6d:	6a 04                	push   0x4
c0017a6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a73:	50                   	push   eax
c0017a74:	e8 d3 8b fe ff       	call   c000064c <memcmp>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	85 c0                	test   eax,eax
c0017a7e:	0f 94 c0             	sete   al
c0017a81:	84 c0                	test   al,al
c0017a83:	74 0d                	je     c0017a92 <findDataTable(unsigned char*, char*)+0x63>
c0017a85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a89:	8b 04 c5 04 ed 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd12fc]
c0017a90:	eb 0b                	jmp    c0017a9d <findDataTable(unsigned char*, char*)+0x6e>
c0017a92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a96:	eb bb                	jmp    c0017a53 <findDataTable(unsigned char*, char*)+0x24>
c0017a98:	b8 00 00 00 00       	mov    eax,0x0
c0017a9d:	83 c4 1c             	add    esp,0x1c
c0017aa0:	c3                   	ret    

c0017aa1 <scanMADT()>:
c0017aa1:	53                   	push   ebx
c0017aa2:	83 ec 38             	sub    esp,0x38
c0017aa5:	83 ec 0c             	sub    esp,0xc
c0017aa8:	68 a7 bc 02 c0       	push   0xc002bca7
c0017aad:	e8 5b 7f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0017aba:	25 00 04 00 00       	and    eax,0x400
c0017abf:	74 14                	je     c0017ad5 <scanMADT()+0x34>
c0017ac1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017ac6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017acc:	83 e2 fb             	and    edx,0xfffffffb
c0017acf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ad5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017ada:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ae0:	83 e0 04             	and    eax,0x4
c0017ae3:	84 c0                	test   al,al
c0017ae5:	0f 84 7a 04 00 00    	je     c0017f65 <scanMADT()+0x4c4>
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	68 b4 bc 02 c0       	push   0xc002bcb4
c0017af3:	e8 15 7f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	e8 51 fa ff ff       	call   c0017551 <findRSDP()>
c0017b00:	a3 0c ef 02 c0       	mov    ds:0xc002ef0c,eax
c0017b05:	a1 0c ef 02 c0       	mov    eax,ds:0xc002ef0c
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	75 19                	jne    c0017b27 <scanMADT()+0x86>
c0017b0e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017b13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b19:	83 e2 fb             	and    edx,0xfffffffb
c0017b1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b22:	e9 42 04 00 00       	jmp    c0017f69 <scanMADT()+0x4c8>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 c6 bc 02 c0       	push   0xc002bcc6
c0017b2f:	e8 d9 7e ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	a1 0c ef 02 c0       	mov    eax,ds:0xc002ef0c
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	50                   	push   eax
c0017b40:	e8 30 fd ff ff       	call   c0017875 <findRSDT(unsigned char*)>
c0017b45:	83 c4 10             	add    esp,0x10
c0017b48:	a3 08 ef 02 c0       	mov    ds:0xc002ef08,eax
c0017b4d:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b52:	85 c0                	test   eax,eax
c0017b54:	75 19                	jne    c0017b6f <scanMADT()+0xce>
c0017b56:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017b5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b61:	83 e2 fb             	and    edx,0xfffffffb
c0017b64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b6a:	e9 fa 03 00 00       	jmp    c0017f69 <scanMADT()+0x4c8>
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	68 d6 bc 02 c0       	push   0xc002bcd6
c0017b77:	e8 91 7e ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b84:	83 ec 0c             	sub    esp,0xc
c0017b87:	50                   	push   eax
c0017b88:	e8 91 fa ff ff       	call   c001761e <loadACPITables(unsigned char*)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0017b95:	83 ec 08             	sub    esp,0x8
c0017b98:	68 ee bc 02 c0       	push   0xc002bcee
c0017b9d:	50                   	push   eax
c0017b9e:	e8 8c fe ff ff       	call   c0017a2f <findDataTable(unsigned char*, char*)>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017baa:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017baf:	75 19                	jne    c0017bca <scanMADT()+0x129>
c0017bb1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017bb6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bbc:	83 e2 fe             	and    edx,0xfffffffe
c0017bbf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bc5:	e9 9f 03 00 00       	jmp    c0017f69 <scanMADT()+0x4c8>
c0017bca:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017bd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bd9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017bdd:	0f 87 86 03 00 00    	ja     c0017f69 <scanMADT()+0x4c8>
c0017be3:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017beb:	0f 87 78 03 00 00    	ja     c0017f69 <scanMADT()+0x4c8>
c0017bf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0017c00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c08:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c0c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c14:	8d 50 01             	lea    edx,[eax+0x1]
c0017c17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c1f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c23:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c27:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017c2c:	0f 86 36 03 00 00    	jbe    c0017f68 <scanMADT()+0x4c7>
c0017c32:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017c37:	75 57                	jne    c0017c90 <scanMADT()+0x1ef>
c0017c39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c3d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c44:	8a 15 00 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f100
c0017c4a:	0f b6 d2             	movzx  edx,dl
c0017c4d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c51:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c55:	88 82 40 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0ec0],al
c0017c5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c5f:	8d 50 01             	lea    edx,[eax+0x1]
c0017c62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c66:	8a 15 00 f1 02 c0    	mov    dl,BYTE PTR ds:0xc002f100
c0017c6c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c6f:	88 0d 00 f1 02 c0    	mov    BYTE PTR ds:0xc002f100,cl
c0017c75:	0f b6 d2             	movzx  edx,dl
c0017c78:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c7c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c80:	88 82 20 f1 02 c0    	mov    BYTE PTR [edx-0x3ffd0ee0],al
c0017c86:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c8b:	e9 c1 02 00 00       	jmp    c0017f51 <scanMADT()+0x4b0>
c0017c90:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017c95:	0f 85 14 01 00 00    	jne    c0017daf <scanMADT()+0x30e>
c0017c9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017ca2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ca6:	8a 15 c0 ef 02 c0    	mov    dl,BYTE PTR ds:0xc002efc0
c0017cac:	0f b6 d2             	movzx  edx,dl
c0017caf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cb3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cb7:	88 82 e0 ef 02 c0    	mov    BYTE PTR [edx-0x3ffd1020],al
c0017cbd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017cc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc9:	01 d0                	add    eax,edx
c0017ccb:	83 c0 2c             	add    eax,0x2c
c0017cce:	8a 00                	mov    al,BYTE PTR [eax]
c0017cd0:	0f b6 d0             	movzx  edx,al
c0017cd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ce2:	0f b6 c0             	movzx  eax,al
c0017ce5:	c1 e0 08             	shl    eax,0x8
c0017ce8:	89 d1                	mov    ecx,edx
c0017cea:	09 c1                	or     ecx,eax
c0017cec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf0:	8d 50 02             	lea    edx,[eax+0x2]
c0017cf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cfb:	0f b6 c0             	movzx  eax,al
c0017cfe:	c1 e0 10             	shl    eax,0x10
c0017d01:	09 c1                	or     ecx,eax
c0017d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d07:	8d 50 03             	lea    edx,[eax+0x3]
c0017d0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d12:	0f b6 c0             	movzx  eax,al
c0017d15:	c1 e0 18             	shl    eax,0x18
c0017d18:	09 c1                	or     ecx,eax
c0017d1a:	89 ca                	mov    edx,ecx
c0017d1c:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017d21:	0f b6 c0             	movzx  eax,al
c0017d24:	89 14 85 00 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1000],edx
c0017d2b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d38:	01 d0                	add    eax,edx
c0017d3a:	83 c0 2c             	add    eax,0x2c
c0017d3d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d3f:	0f b6 d0             	movzx  edx,al
c0017d42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d46:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d4d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d51:	0f b6 c0             	movzx  eax,al
c0017d54:	c1 e0 08             	shl    eax,0x8
c0017d57:	89 d1                	mov    ecx,edx
c0017d59:	09 c1                	or     ecx,eax
c0017d5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d5f:	8d 50 02             	lea    edx,[eax+0x2]
c0017d62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d6a:	0f b6 c0             	movzx  eax,al
c0017d6d:	c1 e0 10             	shl    eax,0x10
c0017d70:	09 c1                	or     ecx,eax
c0017d72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d76:	8d 50 03             	lea    edx,[eax+0x3]
c0017d79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d7d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d81:	0f b6 c0             	movzx  eax,al
c0017d84:	c1 e0 18             	shl    eax,0x18
c0017d87:	09 c1                	or     ecx,eax
c0017d89:	89 ca                	mov    edx,ecx
c0017d8b:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017d90:	0f b6 c0             	movzx  eax,al
c0017d93:	89 14 85 80 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f80],edx
c0017d9a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d9f:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0017da4:	40                   	inc    eax
c0017da5:	a2 c0 ef 02 c0       	mov    ds:0xc002efc0,al
c0017daa:	e9 a2 01 00 00       	jmp    c0017f51 <scanMADT()+0x4b0>
c0017daf:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017db4:	0f 85 e9 00 00 00    	jne    c0017ea3 <scanMADT()+0x402>
c0017dba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dbe:	8d 50 01             	lea    edx,[eax+0x1]
c0017dc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dc9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dcd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017dd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ddc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017de4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017de8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df0:	01 d0                	add    eax,edx
c0017df2:	83 c0 2c             	add    eax,0x2c
c0017df5:	8a 00                	mov    al,BYTE PTR [eax]
c0017df7:	0f b6 d0             	movzx  edx,al
c0017dfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dfe:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e05:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e09:	0f b6 c0             	movzx  eax,al
c0017e0c:	c1 e0 08             	shl    eax,0x8
c0017e0f:	89 d1                	mov    ecx,edx
c0017e11:	09 c1                	or     ecx,eax
c0017e13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e17:	8d 50 02             	lea    edx,[eax+0x2]
c0017e1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e22:	0f b6 c0             	movzx  eax,al
c0017e25:	c1 e0 10             	shl    eax,0x10
c0017e28:	09 c1                	or     ecx,eax
c0017e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2e:	8d 50 03             	lea    edx,[eax+0x3]
c0017e31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e35:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e39:	0f b6 c0             	movzx  eax,al
c0017e3c:	c1 e0 18             	shl    eax,0x18
c0017e3f:	09 c8                	or     eax,ecx
c0017e41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e45:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e52:	01 d0                	add    eax,edx
c0017e54:	83 c0 2c             	add    eax,0x2c
c0017e57:	8a 00                	mov    al,BYTE PTR [eax]
c0017e59:	0f b6 c0             	movzx  eax,al
c0017e5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e60:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e67:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017e6b:	0f b6 d2             	movzx  edx,dl
c0017e6e:	c1 e2 08             	shl    edx,0x8
c0017e71:	09 d0                	or     eax,edx
c0017e73:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017e78:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017e7d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e86:	88 90 c0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2740],dl
c0017e8c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017e91:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017e96:	66 89 84 12 a0 ef 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd1060],ax
c0017e9e:	e9 ae 00 00 00       	jmp    c0017f51 <scanMADT()+0x4b0>
c0017ea3:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ea8:	0f 85 97 00 00 00    	jne    c0017f45 <scanMADT()+0x4a4>
c0017eae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb2:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ebd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ec1:	0f b6 c0             	movzx  eax,al
c0017ec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ec8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ecc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed0:	01 d0                	add    eax,edx
c0017ed2:	83 c0 2c             	add    eax,0x2c
c0017ed5:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed7:	0f b6 d0             	movzx  edx,al
c0017eda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ede:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ee9:	0f b6 c0             	movzx  eax,al
c0017eec:	c1 e0 08             	shl    eax,0x8
c0017eef:	09 d0                	or     eax,edx
c0017ef1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ef5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017efa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efe:	8d 50 01             	lea    edx,[eax+0x1]
c0017f01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f09:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f0d:	0f b6 c0             	movzx  eax,al
c0017f10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f18:	c1 e0 08             	shl    eax,0x8
c0017f1b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017f1f:	89 c1                	mov    ecx,eax
c0017f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f25:	c1 e0 18             	shl    eax,0x18
c0017f28:	89 c3                	mov    ebx,eax
c0017f2a:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c0017f2f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f32:	89 15 10 ef 02 c0    	mov    DWORD PTR ds:0xc002ef10,edx
c0017f38:	09 d9                	or     ecx,ebx
c0017f3a:	89 ca                	mov    edx,ecx
c0017f3c:	89 14 85 20 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10e0],edx
c0017f43:	eb 0c                	jmp    c0017f51 <scanMADT()+0x4b0>
c0017f45:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f4a:	75 05                	jne    c0017f51 <scanMADT()+0x4b0>
c0017f4c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017f51:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017f56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f5a:	01 d0                	add    eax,edx
c0017f5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017f60:	e9 6d fc ff ff       	jmp    c0017bd2 <scanMADT()+0x131>
c0017f65:	90                   	nop
c0017f66:	eb 01                	jmp    c0017f69 <scanMADT()+0x4c8>
c0017f68:	90                   	nop
c0017f69:	83 c4 38             	add    esp,0x38
c0017f6c:	5b                   	pop    ebx
c0017f6d:	c3                   	ret    

c0017f6e <ACPI::ACPI()>:
c0017f6e:	83 ec 0c             	sub    esp,0xc
c0017f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f75:	83 ec 08             	sub    esp,0x8
c0017f78:	68 f3 bc 02 c0       	push   0xc002bcf3
c0017f7d:	50                   	push   eax
c0017f7e:	e8 c5 c0 ff ff       	call   c0014048 <Device::Device(char const*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c0017f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8f:	89 10                	mov    DWORD PTR [eax],edx
c0017f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f95:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fae:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	68 f8 bc 02 c0       	push   0xc002bcf8
c0017fc0:	e8 48 7a ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	e8 d4 fa ff ff       	call   c0017aa1 <scanMADT()>
c0017fcd:	90                   	nop
c0017fce:	83 c4 0c             	add    esp,0xc
c0017fd1:	c3                   	ret    

c0017fd2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017fd2:	83 ec 2c             	sub    esp,0x2c
c0017fd5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017fd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017fdd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fe1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017fe5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017fea:	88 d0                	mov    al,dl
c0017fec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ff0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ff5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ffd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018001:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018007:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001800b:	0f 8d 97 00 00 00    	jge    c00180a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018011:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018015:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018019:	83 c2 2a             	add    edx,0x2a
c001801c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018020:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018025:	75 78                	jne    c001809f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018027:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001802b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001802f:	83 c2 2a             	add    edx,0x2a
c0018032:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018036:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001803a:	75 63                	jne    c001809f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001803c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018041:	74 3a                	je     c001807d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018043:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018047:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001804b:	83 c2 2a             	add    edx,0x2a
c001804e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018059:	39 c2                	cmp    edx,eax
c001805b:	74 10                	je     c001806d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001805d:	83 ec 0c             	sub    esp,0xc
c0018060:	68 94 bb 02 c0       	push   0xc002bb94
c0018065:	e8 3f 23 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001806a:	83 c4 10             	add    esp,0x10
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	68 06 bd 02 c0       	push   0xc002bd06
c0018075:	e8 2f 23 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001807a:	83 c4 10             	add    esp,0x10
c001807d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018081:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018085:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018089:	83 c2 2a             	add    edx,0x2a
c001808c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018090:	8b 02                	mov    eax,DWORD PTR [edx]
c0018092:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018095:	89 01                	mov    DWORD PTR [ecx],eax
c0018097:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001809a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001809f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00180a3:	e9 55 ff ff ff       	jmp    c0017ffd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00180a8:	90                   	nop
c00180a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ad:	83 c4 2c             	add    esp,0x2c
c00180b0:	c2 04 00             	ret    0x4
c00180b3:	90                   	nop

c00180b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00180b4:	83 ec 1c             	sub    esp,0x1c
c00180b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00180bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180c8:	88 c8                	mov    al,cl
c00180ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00180ce:	88 d0                	mov    al,dl
c00180d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00180de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00180e5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00180e9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00180ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180fb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00180fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018102:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018111:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018115:	8d 48 01             	lea    ecx,[eax+0x1]
c0018118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811c:	83 c2 2a             	add    edx,0x2a
c001811f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018127:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018131:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018134:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018138:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001813c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018140:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018146:	8d 50 01             	lea    edx,[eax+0x1]
c0018149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018157:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001815d:	3d 00 02 00 00       	cmp    eax,0x200
c0018162:	75 10                	jne    c0018174 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	68 15 bd 02 c0       	push   0xc002bd15
c001816c:	e8 38 22 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	90                   	nop
c0018175:	83 c4 1c             	add    esp,0x1c
c0018178:	c3                   	ret    
c0018179:	90                   	nop

c001817a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001817a:	b8 00 00 00 00       	mov    eax,0x0
c001817f:	c3                   	ret    

c0018180 <ACPI::detectPCI()>:
c0018180:	53                   	push   ebx
c0018181:	83 ec 28             	sub    esp,0x28
c0018184:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018189:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001818e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018193:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018199:	83 e0 04             	and    eax,0x4
c001819c:	84 c0                	test   al,al
c001819e:	74 2b                	je     c00181cb <ACPI::detectPCI()+0x4b>
c00181a0:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c00181a5:	83 ec 08             	sub    esp,0x8
c00181a8:	68 32 bd 02 c0       	push   0xc002bd32
c00181ad:	50                   	push   eax
c00181ae:	e8 7c f8 ff ff       	call   c0017a2f <findDataTable(unsigned char*, char*)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181ba:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00181bf:	74 0a                	je     c00181cb <ACPI::detectPCI()+0x4b>
c00181c1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181c6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181cb:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00181d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181d7:	8a 00                	mov    al,BYTE PTR [eax]
c00181d9:	3c 01                	cmp    al,0x1
c00181db:	75 0c                	jne    c00181e9 <ACPI::detectPCI()+0x69>
c00181dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181e2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00181e7:	eb 26                	jmp    c001820f <ACPI::detectPCI()+0x8f>
c00181e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181ed:	8a 00                	mov    al,BYTE PTR [eax]
c00181ef:	3c 02                	cmp    al,0x2
c00181f1:	75 1c                	jne    c001820f <ACPI::detectPCI()+0x8f>
c00181f3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00181f8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00181fd:	74 10                	je     c001820f <ACPI::detectPCI()+0x8f>
c00181ff:	83 ec 0c             	sub    esp,0xc
c0018202:	68 c4 bb 02 c0       	push   0xc002bbc4
c0018207:	e8 9d 21 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018213:	83 f0 01             	xor    eax,0x1
c0018216:	84 c0                	test   al,al
c0018218:	74 3f                	je     c0018259 <ACPI::detectPCI()+0xd9>
c001821a:	e8 31 7f fe ff       	call   c0000150 <manualPCIProbe>
c001821f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018223:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018228:	75 0c                	jne    c0018236 <ACPI::detectPCI()+0xb6>
c001822a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001822f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018234:	eb 23                	jmp    c0018259 <ACPI::detectPCI()+0xd9>
c0018236:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001823b:	75 1c                	jne    c0018259 <ACPI::detectPCI()+0xd9>
c001823d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018242:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018247:	74 10                	je     c0018259 <ACPI::detectPCI()+0xd9>
c0018249:	83 ec 0c             	sub    esp,0xc
c001824c:	68 c4 bb 02 c0       	push   0xc002bbc4
c0018251:	e8 53 21 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c0018256:	83 c4 10             	add    esp,0x10
c0018259:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001825e:	74 7e                	je     c00182de <ACPI::detectPCI()+0x15e>
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	68 37 bd 02 c0       	push   0xc002bd37
c0018268:	e8 a0 77 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001826d:	83 c4 10             	add    esp,0x10
c0018270:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001827f:	e8 2f 77 ff ff       	call   c000f9b3 <malloc>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	89 c3                	mov    ebx,eax
c0018289:	83 ec 0c             	sub    esp,0xc
c001828c:	53                   	push   ebx
c001828d:	e8 18 a7 00 00       	call   c00229aa <PCI::PCI()>
c0018292:	83 c4 10             	add    esp,0x10
c0018295:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018299:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001829d:	83 ec 08             	sub    esp,0x8
c00182a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182a4:	50                   	push   eax
c00182a5:	e8 9a bb ff ff       	call   c0013e44 <Device::addChild(Device*)>
c00182aa:	83 c4 10             	add    esp,0x10
c00182ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00182b3:	83 c0 08             	add    eax,0x8
c00182b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00182b8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00182bd:	74 07                	je     c00182c6 <ACPI::detectPCI()+0x146>
c00182bf:	ba 01 00 00 00       	mov    edx,0x1
c00182c4:	eb 05                	jmp    c00182cb <ACPI::detectPCI()+0x14b>
c00182c6:	ba 02 00 00 00       	mov    edx,0x2
c00182cb:	6a 00                	push   0x0
c00182cd:	6a 00                	push   0x0
c00182cf:	52                   	push   edx
c00182d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182d4:	ff d0                	call   eax
c00182d6:	83 c4 10             	add    esp,0x10
c00182d9:	e9 9e 00 00 00       	jmp    c001837c <ACPI::detectPCI()+0x1fc>
c00182de:	83 ec 0c             	sub    esp,0xc
c00182e1:	68 4f bd 02 c0       	push   0xc002bd4f
c00182e6:	e8 20 a7 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00182eb:	83 c4 10             	add    esp,0x10
c00182ee:	83 ec 0c             	sub    esp,0xc
c00182f1:	68 5a bd 02 c0       	push   0xc002bd5a
c00182f6:	e8 12 77 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0018305:	83 ec 0c             	sub    esp,0xc
c0018308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001830c:	e8 a2 76 ff ff       	call   c000f9b3 <malloc>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	89 c3                	mov    ebx,eax
c0018316:	83 ec 0c             	sub    esp,0xc
c0018319:	53                   	push   ebx
c001831a:	e8 f5 b1 00 00       	call   c0023514 <IDE::IDE()>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0018326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832a:	83 ec 08             	sub    esp,0x8
c001832d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018331:	50                   	push   eax
c0018332:	e8 0d bb ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001833e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0018348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001834c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0018355:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018359:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0018362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018366:	8b 00                	mov    eax,DWORD PTR [eax]
c0018368:	83 c0 08             	add    eax,0x8
c001836b:	8b 00                	mov    eax,DWORD PTR [eax]
c001836d:	6a 00                	push   0x0
c001836f:	6a 00                	push   0x0
c0018371:	6a 00                	push   0x0
c0018373:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018377:	ff d0                	call   eax
c0018379:	83 c4 10             	add    esp,0x10
c001837c:	90                   	nop
c001837d:	83 c4 28             	add    esp,0x28
c0018380:	5b                   	pop    ebx
c0018381:	c3                   	ret    

c0018382 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018382:	83 ec 1c             	sub    esp,0x1c
c0018385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018389:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001838c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018390:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018395:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001839a:	83 ec 08             	sub    esp,0x8
c001839d:	52                   	push   edx
c001839e:	50                   	push   eax
c001839f:	e8 4e 6a ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183ab:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00183b0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183b5:	83 ec 04             	sub    esp,0x4
c00183b8:	6a 01                	push   0x1
c00183ba:	52                   	push   edx
c00183bb:	50                   	push   eax
c00183bc:	e8 ed 6b ff ff       	call   c000efae <Computer::writeCMOS(unsigned char, unsigned char)>
c00183c1:	83 c4 10             	add    esp,0x10
c00183c4:	90                   	nop
c00183c5:	83 c4 1c             	add    esp,0x1c
c00183c8:	c3                   	ret    
c00183c9:	90                   	nop

c00183ca <ACPI::sleep()>:
c00183ca:	83 ec 0c             	sub    esp,0xc
c00183cd:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c00183d2:	85 c0                	test   eax,eax
c00183d4:	74 07                	je     c00183dd <ACPI::sleep()+0x13>
c00183d6:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c00183db:	ff d0                	call   eax
c00183dd:	90                   	nop
c00183de:	83 c4 0c             	add    esp,0xc
c00183e1:	c3                   	ret    

c00183e2 <ACPI::open(int, int, void*)>:
c00183e2:	57                   	push   edi
c00183e3:	56                   	push   esi
c00183e4:	53                   	push   ebx
c00183e5:	81 ec 60 01 00 00    	sub    esp,0x160
c00183eb:	83 ec 0c             	sub    esp,0xc
c00183ee:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00183f5:	e8 86 fd ff ff       	call   c0018180 <ACPI::detectPCI()>
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	83 ec 0c             	sub    esp,0xc
c0018400:	68 ec bb 02 c0       	push   0xc002bbec
c0018405:	e8 03 76 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	83 ec 0c             	sub    esp,0xc
c0018410:	68 6f bd 02 c0       	push   0xc002bd6f
c0018415:	e8 e5 46 00 00       	call   c001caff <Thr::loadKernelSymbolTable(char const*)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	83 ec 0c             	sub    esp,0xc
c0018420:	68 8d bd 02 c0       	push   0xc002bd8d
c0018425:	e8 e3 75 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	83 ec 04             	sub    esp,0x4
c0018430:	6a 0c                	push   0xc
c0018432:	68 a8 bd 02 c0       	push   0xc002bda8
c0018437:	68 b9 bd 02 c0       	push   0xc002bdb9
c001843c:	e8 24 2d 00 00       	call   c001b165 <Reg::readIntWithDefault(char*, char*, int)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001844b:	83 ec 0c             	sub    esp,0xc
c001844e:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018455:	e8 e9 93 ff ff       	call   c0011843 <Virt::setupPageSwapping(int)>
c001845a:	83 c4 10             	add    esp,0x10
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	68 ec a4 02 c0       	push   0xc002a4ec
c0018465:	e8 a3 75 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0018473:	83 ec 08             	sub    esp,0x8
c0018476:	6a 01                	push   0x1
c0018478:	68 c0 bd 02 c0       	push   0xc002bdc0
c001847d:	e8 f4 50 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0018482:	83 c4 10             	add    esp,0x10
c0018485:	83 ec 08             	sub    esp,0x8
c0018488:	53                   	push   ebx
c0018489:	50                   	push   eax
c001848a:	e8 18 53 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018499:	83 ec 08             	sub    esp,0x8
c001849c:	6a 12                	push   0x12
c001849e:	50                   	push   eax
c001849f:	e8 24 bd ff ff       	call   c00141c8 <getDevicesOfType(DeviceType)>
c00184a4:	83 c4 0c             	add    esp,0xc
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184b1:	50                   	push   eax
c00184b2:	e8 7d 0b 01 00       	call   c0029034 <LinkedList<Device>::isEmpty()>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	83 f0 01             	xor    eax,0x1
c00184bd:	84 c0                	test   al,al
c00184bf:	0f 84 43 01 00 00    	je     c0018608 <ACPI::open(int, int, void*)+0x226>
c00184c5:	83 ec 0c             	sub    esp,0xc
c00184c8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184cf:	50                   	push   eax
c00184d0:	e8 7b 0b 01 00       	call   c0029050 <LinkedList<Device>::getFirstElement()>
c00184d5:	83 c4 10             	add    esp,0x10
c00184d8:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00184df:	83 ec 0c             	sub    esp,0xc
c00184e2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184e9:	50                   	push   eax
c00184ea:	e8 69 0b 01 00       	call   c0029058 <LinkedList<Device>::removeFirst()>
c00184ef:	83 c4 10             	add    esp,0x10
c00184f2:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00184f9:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018500:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018507:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001850b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018511:	ba 09 00 00 00       	mov    edx,0x9
c0018516:	fc                   	cld    
c0018517:	89 c7                	mov    edi,eax
c0018519:	89 de                	mov    esi,ebx
c001851b:	89 d1                	mov    ecx,edx
c001851d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001851f:	83 ec 08             	sub    esp,0x8
c0018522:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018526:	50                   	push   eax
c0018527:	83 ec 24             	sub    esp,0x24
c001852a:	89 e0                	mov    eax,esp
c001852c:	89 c3                	mov    ebx,eax
c001852e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018532:	ba 09 00 00 00       	mov    edx,0x9
c0018537:	89 df                	mov    edi,ebx
c0018539:	89 c6                	mov    esi,eax
c001853b:	89 d1                	mov    ecx,edx
c001853d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001853f:	e8 44 a9 00 00       	call   c0022e88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018544:	83 c4 30             	add    esp,0x30
c0018547:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001854e:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018556:	0f 84 4b ff ff ff    	je     c00184a7 <ACPI::open(int, int, void*)+0xc5>
c001855c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018567:	83 ec 0c             	sub    esp,0xc
c001856a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018571:	e8 3d 74 ff ff       	call   c000f9b3 <malloc>
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	89 c3                	mov    ebx,eax
c001857b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c0018580:	83 ec 04             	sub    esp,0x4
c0018583:	50                   	push   eax
c0018584:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001858b:	53                   	push   ebx
c001858c:	e8 d9 a9 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001859b:	83 ec 0c             	sub    esp,0xc
c001859e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185a5:	e8 92 ac ff ff       	call   c001323c <File::exists()>
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	84 c0                	test   al,al
c00185af:	74 27                	je     c00185d8 <ACPI::open(int, int, void*)+0x1f6>
c00185b1:	83 ec 08             	sub    esp,0x8
c00185b4:	6a 01                	push   0x1
c00185b6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185bd:	e8 b4 4f 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	83 ec 08             	sub    esp,0x8
c00185c8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00185cf:	50                   	push   eax
c00185d0:	e8 d2 51 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00185e0:	0f 84 c1 fe ff ff    	je     c00184a7 <ACPI::open(int, int, void*)+0xc5>
c00185e6:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00185ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ef:	83 c0 08             	add    eax,0x8
c00185f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f4:	83 ec 0c             	sub    esp,0xc
c00185f7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00185fe:	ff d0                	call   eax
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	e9 9f fe ff ff       	jmp    c00184a7 <ACPI::open(int, int, void*)+0xc5>
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018612:	50                   	push   eax
c0018613:	e8 1a 0a 01 00       	call   c0029032 <LinkedList<Device>::~LinkedList()>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0018621:	83 ec 08             	sub    esp,0x8
c0018624:	6a 01                	push   0x1
c0018626:	68 db bd 02 c0       	push   0xc002bddb
c001862b:	e8 46 4f 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	83 ec 08             	sub    esp,0x8
c0018636:	53                   	push   ebx
c0018637:	50                   	push   eax
c0018638:	e8 6a 51 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0018646:	83 ec 08             	sub    esp,0x8
c0018649:	6a 01                	push   0x1
c001864b:	68 f8 bd 02 c0       	push   0xc002bdf8
c0018650:	e8 21 4f 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	83 ec 08             	sub    esp,0x8
c001865b:	53                   	push   ebx
c001865c:	50                   	push   eax
c001865d:	e8 45 51 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001866a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018670:	83 e0 04             	and    eax,0x4
c0018673:	84 c0                	test   al,al
c0018675:	0f 84 0d 01 00 00    	je     c0018788 <ACPI::open(int, int, void*)+0x3a6>
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	68 15 be 02 c0       	push   0xc002be15
c0018683:	e8 85 73 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0018688:	83 c4 10             	add    esp,0x10
c001868b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00186a0:	e8 0e 73 ff ff       	call   c000f9b3 <malloc>
c00186a5:	83 c4 10             	add    esp,0x10
c00186a8:	89 c3                	mov    ebx,eax
c00186aa:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00186af:	83 ec 04             	sub    esp,0x4
c00186b2:	50                   	push   eax
c00186b3:	68 32 be 02 c0       	push   0xc002be32
c00186b8:	53                   	push   ebx
c00186b9:	e8 ac a8 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00186c8:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00186d0:	74 1a                	je     c00186ec <ACPI::open(int, int, void*)+0x30a>
c00186d2:	83 ec 0c             	sub    esp,0xc
c00186d5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00186dc:	e8 5b ab ff ff       	call   c001323c <File::exists()>
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	84 c0                	test   al,al
c00186e6:	74 04                	je     c00186ec <ACPI::open(int, int, void*)+0x30a>
c00186e8:	b0 01                	mov    al,0x1
c00186ea:	eb 02                	jmp    c00186ee <ACPI::open(int, int, void*)+0x30c>
c00186ec:	b0 00                	mov    al,0x0
c00186ee:	84 c0                	test   al,al
c00186f0:	74 25                	je     c0018717 <ACPI::open(int, int, void*)+0x335>
c00186f2:	83 ec 08             	sub    esp,0x8
c00186f5:	6a 01                	push   0x1
c00186f7:	68 32 be 02 c0       	push   0xc002be32
c00186fc:	e8 75 4e 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	83 ec 08             	sub    esp,0x8
c0018707:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001870e:	50                   	push   eax
c001870f:	e8 93 50 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001871f:	74 27                	je     c0018748 <ACPI::open(int, int, void*)+0x366>
c0018721:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018729:	74 1d                	je     c0018748 <ACPI::open(int, int, void*)+0x366>
c001872b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018732:	8b 00                	mov    eax,DWORD PTR [eax]
c0018734:	83 c0 08             	add    eax,0x8
c0018737:	8b 00                	mov    eax,DWORD PTR [eax]
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018743:	ff d0                	call   eax
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c001874d:	83 ec 08             	sub    esp,0x8
c0018750:	68 4f be 02 c0       	push   0xc002be4f
c0018755:	50                   	push   eax
c0018756:	e8 d4 f2 ff ff       	call   c0017a2f <findDataTable(unsigned char*, char*)>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018765:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001876d:	74 19                	je     c0018788 <ACPI::open(int, int, void*)+0x3a6>
c001876f:	83 ec 08             	sub    esp,0x8
c0018772:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018779:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018780:	e8 fd fb ff ff       	call   c0018382 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	b8 00 00 00 00       	mov    eax,0x0
c001878d:	81 c4 60 01 00 00    	add    esp,0x160
c0018793:	5b                   	pop    ebx
c0018794:	5e                   	pop    esi
c0018795:	5f                   	pop    edi
c0018796:	c3                   	ret    
c0018797:	90                   	nop

c0018798 <CPU::close(int, int, void*)>:
c0018798:	31 c0                	xor    eax,eax
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001879c:	55                   	push   ebp
c001879d:	57                   	push   edi
c001879e:	56                   	push   esi
c001879f:	53                   	push   ebx
c00187a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187a8:	89 ce                	mov    esi,ecx
c00187aa:	89 d5                	mov    ebp,edx
c00187ac:	80 f9 04             	cmp    cl,0x4
c00187af:	75 28                	jne    c00187d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187b1:	8d 42 f9             	lea    eax,[edx-0x7]
c00187b4:	3c 03                	cmp    al,0x3
c00187b6:	0f 86 63 01 00 00    	jbe    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187bc:	80 fa 03             	cmp    dl,0x3
c00187bf:	0f 84 5a 01 00 00    	je     c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187c5:	8d 7a f2             	lea    edi,[edx-0xe]
c00187c8:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00187cd:	89 fb                	mov    ebx,edi
c00187cf:	80 fb 01             	cmp    bl,0x1
c00187d2:	77 4e                	ja     c0018822 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187d4:	e9 52 01 00 00       	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d9:	80 f9 05             	cmp    cl,0x5
c00187dc:	75 4d                	jne    c001882b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187de:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00187e3:	80 fa 03             	cmp    dl,0x3
c00187e6:	0f 86 3f 01 00 00    	jbe    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ec:	8d 7a fa             	lea    edi,[edx-0x6]
c00187ef:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00187f4:	89 fb                	mov    ebx,edi
c00187f6:	80 fb 01             	cmp    bl,0x1
c00187f9:	0f 86 2c 01 00 00    	jbe    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ff:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018804:	80 fa 08             	cmp    dl,0x8
c0018807:	0f 84 1e 01 00 00    	je     c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880d:	89 d7                	mov    edi,edx
c001880f:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018814:	83 e7 fb             	and    edi,0xfffffffb
c0018817:	89 fb                	mov    ebx,edi
c0018819:	80 fb 09             	cmp    bl,0x9
c001881c:	0f 84 09 01 00 00    	je     c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018822:	31 c0                	xor    eax,eax
c0018824:	89 eb                	mov    ebx,ebp
c0018826:	0f b6 fb             	movzx  edi,bl
c0018829:	eb 30                	jmp    c001885b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001882b:	31 c0                	xor    eax,eax
c001882d:	80 f9 06             	cmp    cl,0x6
c0018830:	75 f2                	jne    c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018832:	80 fa 0a             	cmp    dl,0xa
c0018835:	77 ed                	ja     c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018837:	bf de 05 00 00       	mov    edi,0x5de
c001883c:	0f a3 d7             	bt     edi,edx
c001883f:	73 e3                	jae    c0018824 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018841:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018846:	e9 e0 00 00 00       	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884b:	39 c7                	cmp    edi,eax
c001884d:	0f 84 d3 00 00 00    	je     c0018926 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018853:	40                   	inc    eax
c0018854:	3d d0 00 00 00       	cmp    eax,0xd0
c0018859:	74 09                	je     c0018864 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001885b:	89 f3                	mov    ebx,esi
c001885d:	80 fb 0f             	cmp    bl,0xf
c0018860:	75 f1                	jne    c0018853 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018862:	eb e7                	jmp    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018864:	80 f9 10             	cmp    cl,0x10
c0018867:	75 14                	jne    c001887d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018869:	8d 42 fc             	lea    eax,[edx-0x4]
c001886c:	83 e0 fb             	and    eax,0xfffffffb
c001886f:	3c 02                	cmp    al,0x2
c0018871:	76 34                	jbe    c00188a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018873:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018878:	80 fa 02             	cmp    dl,0x2
c001887b:	eb 24                	jmp    c00188a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001887d:	80 f9 11             	cmp    cl,0x11
c0018880:	75 13                	jne    c0018895 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018882:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018887:	80 fa 03             	cmp    dl,0x3
c001888a:	0f 85 9b 00 00 00    	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018890:	e9 91 00 00 00       	jmp    c0018926 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018895:	80 f9 12             	cmp    cl,0x12
c0018898:	75 14                	jne    c00188ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001889a:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c001889f:	fe ca                	dec    dl
c00188a1:	0f 85 84 00 00 00    	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a7:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00188ac:	eb 7d                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ae:	80 f9 14             	cmp    cl,0x14
c00188b1:	75 12                	jne    c00188c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188b3:	4a                   	dec    edx
c00188b4:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00188b9:	80 fa 01             	cmp    dl,0x1
c00188bc:	77 6d                	ja     c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188be:	b8 10 db 02 c0       	mov    eax,0xc002db10
c00188c3:	eb 66                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c5:	80 f9 15             	cmp    cl,0x15
c00188c8:	75 31                	jne    c00188fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188ca:	b8 20 db 02 c0       	mov    eax,0xc002db20
c00188cf:	80 fa 01             	cmp    dl,0x1
c00188d2:	74 57                	je     c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d4:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00188d9:	80 fa 13             	cmp    dl,0x13
c00188dc:	76 0c                	jbe    c00188ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188de:	80 fa 30             	cmp    dl,0x30
c00188e1:	75 48                	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e3:	b8 40 db 02 c0       	mov    eax,0xc002db40
c00188e8:	eb 41                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ea:	b9 04 00 09 00       	mov    ecx,0x90004
c00188ef:	0f a3 d1             	bt     ecx,edx
c00188f2:	73 37                	jae    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f4:	b8 30 db 02 c0       	mov    eax,0xc002db30
c00188f9:	eb 30                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fb:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018900:	80 f9 16             	cmp    cl,0x16
c0018903:	75 26                	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018905:	b8 50 db 02 c0       	mov    eax,0xc002db50
c001890a:	84 d2                	test   dl,dl
c001890c:	74 1d                	je     c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890e:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018913:	80 fa 30             	cmp    dl,0x30
c0018916:	75 13                	jne    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018918:	b8 60 db 02 c0       	mov    eax,0xc002db60
c001891d:	eb 0c                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891f:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018924:	eb 05                	jmp    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018926:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c001892b:	5b                   	pop    ebx
c001892c:	5e                   	pop    esi
c001892d:	5f                   	pop    edi
c001892e:	5d                   	pop    ebp
c001892f:	c3                   	ret    

c0018930 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018930:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018938:	80 f9 04             	cmp    cl,0x4
c001893b:	75 6b                	jne    c00189a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001893d:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018942:	80 fa 01             	cmp    dl,0x1
c0018945:	0f 86 92 02 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894b:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018950:	80 fa 02             	cmp    dl,0x2
c0018953:	0f 84 84 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018959:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001895e:	80 fa 03             	cmp    dl,0x3
c0018961:	0f 84 76 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018967:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c001896c:	80 fa 04             	cmp    dl,0x4
c001896f:	0f 84 68 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018975:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c001897a:	80 fa 05             	cmp    dl,0x5
c001897d:	0f 84 5a 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018983:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018988:	80 fa 07             	cmp    dl,0x7
c001898b:	0f 84 4c 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018991:	83 ea 08             	sub    edx,0x8
c0018994:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018999:	80 fa 01             	cmp    dl,0x1
c001899c:	0f 87 3b 02 00 00    	ja     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a2:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00189a7:	c3                   	ret    
c00189a8:	80 f9 05             	cmp    cl,0x5
c00189ab:	75 45                	jne    c00189f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189ad:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189b0:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189b5:	80 f9 02             	cmp    cl,0x2
c00189b8:	0f 86 1f 02 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189be:	80 fa 04             	cmp    dl,0x4
c00189c1:	0f 84 f3 01 00 00    	je     c0018bba <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189c7:	80 fa 07             	cmp    dl,0x7
c00189ca:	0f 84 0d 02 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d0:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00189d5:	80 fa 08             	cmp    dl,0x8
c00189d8:	0f 84 ff 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189de:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c00189e3:	80 fa 09             	cmp    dl,0x9
c00189e6:	0f 85 f1 01 00 00    	jne    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ec:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00189f1:	c3                   	ret    
c00189f2:	80 f9 06             	cmp    cl,0x6
c00189f5:	0f 85 85 01 00 00    	jne    c0018b80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189fb:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018a00:	80 fa 01             	cmp    dl,0x1
c0018a03:	0f 84 d4 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a0c:	3c 01                	cmp    al,0x1
c0018a0e:	0f 86 ac 01 00 00    	jbe    c0018bc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a14:	80 fa 03             	cmp    dl,0x3
c0018a17:	0f 84 a3 01 00 00    	je     c0018bc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a1d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a20:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a25:	80 f9 01             	cmp    cl,0x1
c0018a28:	0f 86 af 01 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2e:	80 fa 09             	cmp    dl,0x9
c0018a31:	0f 84 8f 01 00 00    	je     c0018bc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a37:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a3a:	80 f9 01             	cmp    cl,0x1
c0018a3d:	0f 86 9a 01 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a43:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a48:	80 fa 0d             	cmp    dl,0xd
c0018a4b:	0f 84 8c 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a51:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018a56:	80 fa 0e             	cmp    dl,0xe
c0018a59:	0f 84 7e 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a5f:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018a64:	80 fa 0f             	cmp    dl,0xf
c0018a67:	0f 84 70 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6d:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a72:	80 fa 15             	cmp    dl,0x15
c0018a75:	0f 84 62 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a7e:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018a83:	80 f9 01             	cmp    cl,0x1
c0018a86:	0f 86 51 01 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8c:	80 fa 1a             	cmp    dl,0x1a
c0018a8f:	0f 84 37 01 00 00    	je     c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a95:	80 fa 1c             	cmp    dl,0x1c
c0018a98:	0f 84 34 01 00 00    	je     c0018bd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a9e:	80 fa 1d             	cmp    dl,0x1d
c0018aa1:	0f 84 36 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa7:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018aac:	80 fa 25             	cmp    dl,0x25
c0018aaf:	0f 84 28 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab5:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ab8:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018abd:	80 f9 01             	cmp    cl,0x1
c0018ac0:	0f 86 17 01 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac6:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018acb:	80 fa 2a             	cmp    dl,0x2a
c0018ace:	0f 84 09 01 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad4:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018ad9:	80 fa 2c             	cmp    dl,0x2c
c0018adc:	0f 84 fb 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae2:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018ae7:	80 fa 2d             	cmp    dl,0x2d
c0018aea:	0f 84 ed 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af0:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018af5:	80 fa 2e             	cmp    dl,0x2e
c0018af8:	0f 84 df 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afe:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b03:	80 fa 2f             	cmp    dl,0x2f
c0018b06:	0f 84 d1 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b0f:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b14:	80 f9 01             	cmp    cl,0x1
c0018b17:	0f 86 c0 00 00 00    	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1d:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b22:	80 fa 37             	cmp    dl,0x37
c0018b25:	0f 84 b2 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2b:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b30:	80 fa 3a             	cmp    dl,0x3a
c0018b33:	0f 84 a4 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b39:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018b3e:	80 fa 3c             	cmp    dl,0x3c
c0018b41:	0f 84 96 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b47:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b4c:	80 fa 3d             	cmp    dl,0x3d
c0018b4f:	0f 84 88 00 00 00    	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b55:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b5a:	80 fa 3e             	cmp    dl,0x3e
c0018b5d:	74 7e                	je     c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b62:	3c 01                	cmp    al,0x1
c0018b64:	76 72                	jbe    c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b66:	80 fa 3f             	cmp    dl,0x3f
c0018b69:	74 6d                	je     c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b6b:	80 fa 4a             	cmp    dl,0x4a
c0018b6e:	74 0a                	je     c0018b7a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b70:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018b75:	80 fa 4d             	cmp    dl,0x4d
c0018b78:	75 63                	jne    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7a:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b7f:	c3                   	ret    
c0018b80:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018b85:	80 f9 0b             	cmp    cl,0xb
c0018b88:	75 0a                	jne    c0018b94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b8a:	fe ca                	dec    dl
c0018b8c:	75 4f                	jne    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8e:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018b93:	c3                   	ret    
c0018b94:	80 f9 0f             	cmp    cl,0xf
c0018b97:	75 44                	jne    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b99:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018b9e:	80 fa 02             	cmp    dl,0x2
c0018ba1:	76 3a                	jbe    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ba6:	3c 01                	cmp    al,0x1
c0018ba8:	76 0a                	jbe    c0018bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018baa:	b8 d5 bf 02 c0       	mov    eax,0xc002bfd5
c0018baf:	80 fa 06             	cmp    dl,0x6
c0018bb2:	75 29                	jne    c0018bdd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb4:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018bb9:	c3                   	ret    
c0018bba:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018bbf:	c3                   	ret    
c0018bc0:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018bc5:	c3                   	ret    
c0018bc6:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018bcb:	c3                   	ret    
c0018bcc:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018bd1:	c3                   	ret    
c0018bd2:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018bd7:	c3                   	ret    
c0018bd8:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018bdd:	c3                   	ret    

c0018bde <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bde:	60                   	pusha  
c0018bdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018be7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018beb:	9c                   	pushf  
c0018bec:	fa                   	cli    
c0018bed:	0f 09                	wbinvd 
c0018bef:	0f 30                	wrmsr  
c0018bf1:	9d                   	popf   
c0018bf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bf6:	89 02                	mov    DWORD PTR [edx],eax
c0018bf8:	61                   	popa   
c0018bf9:	c3                   	ret    

c0018bfa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018bfa:	60                   	pusha  
c0018bfb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bff:	9c                   	pushf  
c0018c00:	fa                   	cli    
c0018c01:	0f 09                	wbinvd 
c0018c03:	31 c0                	xor    eax,eax
c0018c05:	31 d2                	xor    edx,edx
c0018c07:	0f 32                	rdmsr  
c0018c09:	9d                   	popf   
c0018c0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c0e:	89 02                	mov    DWORD PTR [edx],eax
c0018c10:	61                   	popa   
c0018c11:	c3                   	ret    

c0018c12 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c12:	56                   	push   esi
c0018c13:	53                   	push   ebx
c0018c14:	83 ec 10             	sub    esp,0x10
c0018c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c1b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c20:	75 5d                	jne    c0018c7f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c22:	83 f8 08             	cmp    eax,0x8
c0018c25:	75 09                	jne    c0018c30 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c27:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c2c:	7e 13                	jle    c0018c41 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c2e:	eb 30                	jmp    c0018c60 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c30:	83 f8 06             	cmp    eax,0x6
c0018c33:	7c 4a                	jl     c0018c7f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c35:	83 f8 07             	cmp    eax,0x7
c0018c38:	7e 07                	jle    c0018c41 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c3a:	83 f8 09             	cmp    eax,0x9
c0018c3d:	74 21                	je     c0018c60 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c3f:	eb 3e                	jmp    c0018c7f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c41:	89 e6                	mov    esi,esp
c0018c43:	8b 1d a8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a8
c0018c49:	56                   	push   esi
c0018c4a:	c1 eb 15             	shr    ebx,0x15
c0018c4d:	68 82 00 00 c0       	push   0xc0000082
c0018c52:	83 e3 7e             	and    ebx,0x7e
c0018c55:	e8 a0 ff ff ff       	call   c0018bfa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c5a:	56                   	push   esi
c0018c5b:	6a 00                	push   0x0
c0018c5d:	53                   	push   ebx
c0018c5e:	eb 12                	jmp    c0018c72 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c60:	89 e3                	mov    ebx,esp
c0018c62:	53                   	push   ebx
c0018c63:	68 82 00 00 c0       	push   0xc0000082
c0018c68:	e8 8d ff ff ff       	call   c0018bfa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c6d:	53                   	push   ebx
c0018c6e:	6a 00                	push   0x0
c0018c70:	6a 00                	push   0x0
c0018c72:	68 82 00 00 c0       	push   0xc0000082
c0018c77:	e8 62 ff ff ff       	call   c0018bde <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c7c:	83 c4 18             	add    esp,0x18
c0018c7f:	83 c4 10             	add    esp,0x10
c0018c82:	5b                   	pop    ebx
c0018c83:	5e                   	pop    esi
c0018c84:	c3                   	ret    
c0018c85:	90                   	nop

c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c86:	55                   	push   ebp
c0018c87:	57                   	push   edi
c0018c88:	56                   	push   esi
c0018c89:	53                   	push   ebx
c0018c8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c8e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c96:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c9a:	39 05 80 db 02 c0    	cmp    DWORD PTR ds:0xc002db80,eax
c0018ca0:	75 23                	jne    c0018cc5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ca2:	a1 6c f1 02 c0       	mov    eax,ds:0xc002f16c
c0018ca7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cab:	89 06                	mov    DWORD PTR [esi],eax
c0018cad:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c0018cb2:	89 07                	mov    DWORD PTR [edi],eax
c0018cb4:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c0018cb9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cbc:	a1 60 f1 02 c0       	mov    eax,ds:0xc002f160
c0018cc1:	89 02                	mov    DWORD PTR [edx],eax
c0018cc3:	eb 3f                	jmp    c0018d04 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cc5:	31 c9                	xor    ecx,ecx
c0018cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ccb:	0f a2                	cpuid  
c0018ccd:	89 06                	mov    DWORD PTR [esi],eax
c0018ccf:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cd5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cd8:	89 10                	mov    DWORD PTR [eax],edx
c0018cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cde:	a3 80 db 02 c0       	mov    ds:0xc002db80,eax
c0018ce3:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ce5:	a3 6c f1 02 c0       	mov    ds:0xc002f16c,eax
c0018cea:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cec:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c0018cf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cf4:	a3 64 f1 02 c0       	mov    ds:0xc002f164,eax
c0018cf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cff:	a3 60 f1 02 c0       	mov    ds:0xc002f160,eax
c0018d04:	5b                   	pop    ebx
c0018d05:	5e                   	pop    esi
c0018d06:	5f                   	pop    edi
c0018d07:	5d                   	pop    ebp
c0018d08:	c3                   	ret    
c0018d09:	90                   	nop

c0018d0a <CPU::cpuidCheckEDX(unsigned int)>:
c0018d0a:	83 ec 10             	sub    esp,0x10
c0018d0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d11:	50                   	push   eax
c0018d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d16:	50                   	push   eax
c0018d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1b:	50                   	push   eax
c0018d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d20:	50                   	push   eax
c0018d21:	6a 01                	push   0x1
c0018d23:	e8 5e ff ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d2c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d30:	0f 95 c0             	setne  al
c0018d33:	83 c4 24             	add    esp,0x24
c0018d36:	c3                   	ret    
c0018d37:	90                   	nop

c0018d38 <CPU::cpuidCheckECX(unsigned int)>:
c0018d38:	83 ec 10             	sub    esp,0x10
c0018d3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3f:	50                   	push   eax
c0018d40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d44:	50                   	push   eax
c0018d45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d49:	50                   	push   eax
c0018d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4e:	50                   	push   eax
c0018d4f:	6a 01                	push   0x1
c0018d51:	e8 30 ff ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d5a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d5e:	0f 95 c0             	setne  al
c0018d61:	83 c4 24             	add    esp,0x24
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop

c0018d66 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d66:	83 ec 10             	sub    esp,0x10
c0018d69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d72:	50                   	push   eax
c0018d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d77:	50                   	push   eax
c0018d78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7c:	50                   	push   eax
c0018d7d:	6a 07                	push   0x7
c0018d7f:	e8 02 ff ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d88:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d8c:	0f 95 c0             	setne  al
c0018d8f:	83 c4 24             	add    esp,0x24
c0018d92:	c3                   	ret    
c0018d93:	90                   	nop

c0018d94 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d94:	83 ec 10             	sub    esp,0x10
c0018d97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9b:	50                   	push   eax
c0018d9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da0:	50                   	push   eax
c0018da1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da5:	50                   	push   eax
c0018da6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daa:	50                   	push   eax
c0018dab:	6a 07                	push   0x7
c0018dad:	e8 d4 fe ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dba:	0f 95 c0             	setne  al
c0018dbd:	83 c4 24             	add    esp,0x24
c0018dc0:	c3                   	ret    
c0018dc1:	90                   	nop

c0018dc2 <CPU::CPU()>:
c0018dc2:	83 ec 0c             	sub    esp,0xc
c0018dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc9:	83 ec 08             	sub    esp,0x8
c0018dcc:	68 d5 bf 02 c0       	push   0xc002bfd5
c0018dd1:	50                   	push   eax
c0018dd2:	e8 71 b2 ff ff       	call   c0014048 <Device::Device(char const*)>
c0018dd7:	83 c4 10             	add    esp,0x10
c0018dda:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c0018ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de3:	89 10                	mov    DWORD PTR [eax],edx
c0018de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df7:	05 78 01 00 00       	add    eax,0x178
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	50                   	push   eax
c0018e00:	e8 93 62 ff ff       	call   c000f098 <GDT::GDT()>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0c:	05 7c 09 00 00       	add    eax,0x97c
c0018e11:	83 ec 0c             	sub    esp,0xc
c0018e14:	50                   	push   eax
c0018e15:	e8 ce 64 ff ff       	call   c000f2e8 <IDT::IDT()>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e21:	05 7c 11 00 00       	add    eax,0x117c
c0018e26:	83 ec 0c             	sub    esp,0xc
c0018e29:	50                   	push   eax
c0018e2a:	e8 51 81 ff ff       	call   c0010f80 <TSS::TSS()>
c0018e2f:	83 c4 10             	add    esp,0x10
c0018e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e36:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e41:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e4b:	90                   	nop
c0018e4c:	83 c4 0c             	add    esp,0xc
c0018e4f:	c3                   	ret    

c0018e50 <CPU::displayFeatures()>:
c0018e50:	c3                   	ret    
c0018e51:	90                   	nop

c0018e52 <CPU::detectFeatures()>:
c0018e52:	55                   	push   ebp
c0018e53:	57                   	push   edi
c0018e54:	56                   	push   esi
c0018e55:	53                   	push   ebx
c0018e56:	83 ec 50             	sub    esp,0x50
c0018e59:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e5d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e67:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e6e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e74:	6a 0d                	push   0xd
c0018e76:	6a 00                	push   0x0
c0018e78:	55                   	push   ebp
c0018e79:	e8 d2 78 fe ff       	call   c0000750 <memset>
c0018e7e:	83 c4 10             	add    esp,0x10
c0018e81:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018e86:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e8d:	0f 84 22 09 00 00    	je     c00197b5 <CPU::detectFeatures()+0x963>
c0018e93:	83 ec 0c             	sub    esp,0xc
c0018e96:	89 ef                	mov    edi,ebp
c0018e98:	6a 10                	push   0x10
c0018e9a:	e8 6b fe ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018e9f:	83 e0 01             	and    eax,0x1
c0018ea2:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ea5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eab:	83 e0 fd             	and    eax,0xfffffffd
c0018eae:	09 d0                	or     eax,edx
c0018eb0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eb6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018ebd:	e8 48 fe ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018ec2:	83 e0 01             	and    eax,0x1
c0018ec5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ecc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ed2:	83 e0 fb             	and    eax,0xfffffffb
c0018ed5:	09 d0                	or     eax,edx
c0018ed7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018edd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018ee4:	e8 21 fe ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018ee9:	83 e0 01             	and    eax,0x1
c0018eec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ef3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ef9:	83 e0 f7             	and    eax,0xfffffff7
c0018efc:	09 d0                	or     eax,edx
c0018efe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f04:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018f0b:	e8 fa fd ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018f10:	83 e0 01             	and    eax,0x1
c0018f13:	c1 e0 04             	shl    eax,0x4
c0018f16:	88 c2                	mov    dl,al
c0018f18:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f1e:	83 e0 ef             	and    eax,0xffffffef
c0018f21:	09 d0                	or     eax,edx
c0018f23:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f29:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018f30:	e8 d5 fd ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018f35:	83 e0 01             	and    eax,0x1
c0018f38:	c1 e0 05             	shl    eax,0x5
c0018f3b:	88 c2                	mov    dl,al
c0018f3d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f43:	83 e0 df             	and    eax,0xffffffdf
c0018f46:	09 d0                	or     eax,edx
c0018f48:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f4e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f55:	e8 b0 fd ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018f5a:	83 e0 01             	and    eax,0x1
c0018f5d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f60:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f66:	83 e0 fd             	and    eax,0xfffffffd
c0018f69:	09 d0                	or     eax,edx
c0018f6b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f71:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f78:	e8 8d fd ff ff       	call   c0018d0a <CPU::cpuidCheckEDX(unsigned int)>
c0018f7d:	83 e0 01             	and    eax,0x1
c0018f80:	c1 e0 06             	shl    eax,0x6
c0018f83:	88 c2                	mov    dl,al
c0018f85:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f8b:	83 e0 bf             	and    eax,0xffffffbf
c0018f8e:	09 d0                	or     eax,edx
c0018f90:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f96:	58                   	pop    eax
c0018f97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f9b:	50                   	push   eax
c0018f9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fa0:	50                   	push   eax
c0018fa1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018fa5:	56                   	push   esi
c0018fa6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018faa:	50                   	push   eax
c0018fab:	6a 00                	push   0x0
c0018fad:	e8 d4 fc ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fb2:	b8 04 00 00 00       	mov    eax,0x4
c0018fb7:	89 c1                	mov    ecx,eax
c0018fb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fbb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018fc1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018fc5:	89 c1                	mov    ecx,eax
c0018fc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fc9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018fcf:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018fd3:	89 c1                	mov    ecx,eax
c0018fd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fd7:	83 c4 18             	add    esp,0x18
c0018fda:	68 80 be 02 c0       	push   0xc002be80
c0018fdf:	55                   	push   ebp
c0018fe0:	e8 b3 78 fe ff       	call   c0000898 <strcmp>
c0018fe5:	83 c4 10             	add    esp,0x10
c0018fe8:	85 c0                	test   eax,eax
c0018fea:	75 0f                	jne    c0018ffb <CPU::detectFeatures()+0x1a9>
c0018fec:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018ff6:	e9 22 02 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c0018ffb:	50                   	push   eax
c0018ffc:	50                   	push   eax
c0018ffd:	68 8d be 02 c0       	push   0xc002be8d
c0019002:	55                   	push   ebp
c0019003:	e8 90 78 fe ff       	call   c0000898 <strcmp>
c0019008:	83 c4 10             	add    esp,0x10
c001900b:	85 c0                	test   eax,eax
c001900d:	74 dd                	je     c0018fec <CPU::detectFeatures()+0x19a>
c001900f:	50                   	push   eax
c0019010:	50                   	push   eax
c0019011:	68 9a be 02 c0       	push   0xc002be9a
c0019016:	55                   	push   ebp
c0019017:	e8 7c 78 fe ff       	call   c0000898 <strcmp>
c001901c:	83 c4 10             	add    esp,0x10
c001901f:	85 c0                	test   eax,eax
c0019021:	74 2a                	je     c001904d <CPU::detectFeatures()+0x1fb>
c0019023:	50                   	push   eax
c0019024:	50                   	push   eax
c0019025:	68 a7 be 02 c0       	push   0xc002bea7
c001902a:	55                   	push   ebp
c001902b:	e8 68 78 fe ff       	call   c0000898 <strcmp>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	85 c0                	test   eax,eax
c0019035:	74 16                	je     c001904d <CPU::detectFeatures()+0x1fb>
c0019037:	50                   	push   eax
c0019038:	50                   	push   eax
c0019039:	68 b4 be 02 c0       	push   0xc002beb4
c001903e:	55                   	push   ebp
c001903f:	e8 54 78 fe ff       	call   c0000898 <strcmp>
c0019044:	83 c4 10             	add    esp,0x10
c0019047:	85 c0                	test   eax,eax
c0019049:	74 48                	je     c0019093 <CPU::detectFeatures()+0x241>
c001904b:	eb 0f                	jmp    c001905c <CPU::detectFeatures()+0x20a>
c001904d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019057:	e9 c1 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c001905c:	50                   	push   eax
c001905d:	50                   	push   eax
c001905e:	68 c1 be 02 c0       	push   0xc002bec1
c0019063:	55                   	push   ebp
c0019064:	e8 2f 78 fe ff       	call   c0000898 <strcmp>
c0019069:	83 c4 10             	add    esp,0x10
c001906c:	85 c0                	test   eax,eax
c001906e:	74 23                	je     c0019093 <CPU::detectFeatures()+0x241>
c0019070:	57                   	push   edi
c0019071:	57                   	push   edi
c0019072:	68 ce be 02 c0       	push   0xc002bece
c0019077:	55                   	push   ebp
c0019078:	e8 1b 78 fe ff       	call   c0000898 <strcmp>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	85 c0                	test   eax,eax
c0019082:	75 1e                	jne    c00190a2 <CPU::detectFeatures()+0x250>
c0019084:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001908e:	e9 8a 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c0019093:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001909d:	e9 7b 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c00190a2:	56                   	push   esi
c00190a3:	56                   	push   esi
c00190a4:	68 db be 02 c0       	push   0xc002bedb
c00190a9:	55                   	push   ebp
c00190aa:	e8 e9 77 fe ff       	call   c0000898 <strcmp>
c00190af:	83 c4 10             	add    esp,0x10
c00190b2:	85 c0                	test   eax,eax
c00190b4:	75 0f                	jne    c00190c5 <CPU::detectFeatures()+0x273>
c00190b6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00190c0:	e9 58 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c00190c5:	51                   	push   ecx
c00190c6:	51                   	push   ecx
c00190c7:	68 9a be 02 c0       	push   0xc002be9a
c00190cc:	55                   	push   ebp
c00190cd:	e8 c6 77 fe ff       	call   c0000898 <strcmp>
c00190d2:	83 c4 10             	add    esp,0x10
c00190d5:	85 c0                	test   eax,eax
c00190d7:	75 0f                	jne    c00190e8 <CPU::detectFeatures()+0x296>
c00190d9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00190e3:	e9 35 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c00190e8:	52                   	push   edx
c00190e9:	52                   	push   edx
c00190ea:	68 e8 be 02 c0       	push   0xc002bee8
c00190ef:	55                   	push   ebp
c00190f0:	e8 a3 77 fe ff       	call   c0000898 <strcmp>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	85 c0                	test   eax,eax
c00190fa:	75 0f                	jne    c001910b <CPU::detectFeatures()+0x2b9>
c00190fc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019106:	e9 12 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c001910b:	50                   	push   eax
c001910c:	50                   	push   eax
c001910d:	68 f5 be 02 c0       	push   0xc002bef5
c0019112:	55                   	push   ebp
c0019113:	e8 80 77 fe ff       	call   c0000898 <strcmp>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	85 c0                	test   eax,eax
c001911d:	75 0f                	jne    c001912e <CPU::detectFeatures()+0x2dc>
c001911f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019129:	e9 ef 00 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c001912e:	50                   	push   eax
c001912f:	50                   	push   eax
c0019130:	68 02 bf 02 c0       	push   0xc002bf02
c0019135:	55                   	push   ebp
c0019136:	e8 5d 77 fe ff       	call   c0000898 <strcmp>
c001913b:	83 c4 10             	add    esp,0x10
c001913e:	85 c0                	test   eax,eax
c0019140:	75 0f                	jne    c0019151 <CPU::detectFeatures()+0x2ff>
c0019142:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001914c:	e9 cc 00 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c0019151:	50                   	push   eax
c0019152:	50                   	push   eax
c0019153:	68 0f bf 02 c0       	push   0xc002bf0f
c0019158:	55                   	push   ebp
c0019159:	e8 3a 77 fe ff       	call   c0000898 <strcmp>
c001915e:	83 c4 10             	add    esp,0x10
c0019161:	85 c0                	test   eax,eax
c0019163:	75 0f                	jne    c0019174 <CPU::detectFeatures()+0x322>
c0019165:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001916f:	e9 a9 00 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c0019174:	50                   	push   eax
c0019175:	50                   	push   eax
c0019176:	68 1c bf 02 c0       	push   0xc002bf1c
c001917b:	55                   	push   ebp
c001917c:	e8 17 77 fe ff       	call   c0000898 <strcmp>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	85 c0                	test   eax,eax
c0019186:	75 0f                	jne    c0019197 <CPU::detectFeatures()+0x345>
c0019188:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019192:	e9 86 00 00 00       	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c0019197:	50                   	push   eax
c0019198:	50                   	push   eax
c0019199:	68 29 bf 02 c0       	push   0xc002bf29
c001919e:	55                   	push   ebp
c001919f:	e8 f4 76 fe ff       	call   c0000898 <strcmp>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	85 c0                	test   eax,eax
c00191a9:	75 0c                	jne    c00191b7 <CPU::detectFeatures()+0x365>
c00191ab:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00191b5:	eb 66                	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c00191b7:	50                   	push   eax
c00191b8:	50                   	push   eax
c00191b9:	68 36 bf 02 c0       	push   0xc002bf36
c00191be:	55                   	push   ebp
c00191bf:	e8 d4 76 fe ff       	call   c0000898 <strcmp>
c00191c4:	83 c4 10             	add    esp,0x10
c00191c7:	85 c0                	test   eax,eax
c00191c9:	75 0c                	jne    c00191d7 <CPU::detectFeatures()+0x385>
c00191cb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00191d5:	eb 46                	jmp    c001921d <CPU::detectFeatures()+0x3cb>
c00191d7:	57                   	push   edi
c00191d8:	57                   	push   edi
c00191d9:	68 43 bf 02 c0       	push   0xc002bf43
c00191de:	55                   	push   ebp
c00191df:	e8 b4 76 fe ff       	call   c0000898 <strcmp>
c00191e4:	83 c4 10             	add    esp,0x10
c00191e7:	85 c0                	test   eax,eax
c00191e9:	74 e0                	je     c00191cb <CPU::detectFeatures()+0x379>
c00191eb:	56                   	push   esi
c00191ec:	56                   	push   esi
c00191ed:	68 50 bf 02 c0       	push   0xc002bf50
c00191f2:	55                   	push   ebp
c00191f3:	e8 a0 76 fe ff       	call   c0000898 <strcmp>
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	85 c0                	test   eax,eax
c00191fd:	74 cc                	je     c00191cb <CPU::detectFeatures()+0x379>
c00191ff:	51                   	push   ecx
c0019200:	51                   	push   ecx
c0019201:	68 5d bf 02 c0       	push   0xc002bf5d
c0019206:	55                   	push   ebp
c0019207:	e8 8c 76 fe ff       	call   c0000898 <strcmp>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	85 c0                	test   eax,eax
c0019211:	74 b8                	je     c00191cb <CPU::detectFeatures()+0x379>
c0019213:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001921d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019222:	0f 86 be 00 00 00    	jbe    c00192e6 <CPU::detectFeatures()+0x494>
c0019228:	83 ec 0c             	sub    esp,0xc
c001922b:	68 80 00 00 00       	push   0x80
c0019230:	e8 31 fb ff ff       	call   c0018d66 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019235:	83 e0 01             	and    eax,0x1
c0019238:	c1 e0 06             	shl    eax,0x6
c001923b:	88 c2                	mov    dl,al
c001923d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019243:	83 e0 bf             	and    eax,0xffffffbf
c0019246:	09 d0                	or     eax,edx
c0019248:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019255:	e8 0c fb ff ff       	call   c0018d66 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001925a:	83 e0 01             	and    eax,0x1
c001925d:	c1 e0 04             	shl    eax,0x4
c0019260:	88 c2                	mov    dl,al
c0019262:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019268:	83 e0 ef             	and    eax,0xffffffef
c001926b:	09 d0                	or     eax,edx
c001926d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019273:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001927a:	e8 e7 fa ff ff       	call   c0018d66 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001927f:	c1 e0 07             	shl    eax,0x7
c0019282:	88 c2                	mov    dl,al
c0019284:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001928a:	83 e0 7f             	and    eax,0x7f
c001928d:	09 d0                	or     eax,edx
c001928f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019295:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001929c:	e8 f3 fa ff ff       	call   c0018d94 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192a1:	83 e0 01             	and    eax,0x1
c00192a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00192ab:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192b1:	83 e0 f7             	and    eax,0xfffffff7
c00192b4:	09 d0                	or     eax,edx
c00192b6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192bc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00192c3:	e8 cc fa ff ff       	call   c0018d94 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192c8:	83 c4 10             	add    esp,0x10
c00192cb:	83 e0 01             	and    eax,0x1
c00192ce:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00192d5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192db:	83 e0 fb             	and    eax,0xfffffffb
c00192de:	09 d0                	or     eax,edx
c00192e0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192e6:	83 ec 0c             	sub    esp,0xc
c00192e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192ed:	50                   	push   eax
c00192ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192f2:	50                   	push   eax
c00192f3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192f7:	56                   	push   esi
c00192f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192fc:	50                   	push   eax
c00192fd:	6a 01                	push   0x1
c00192ff:	e8 82 f9 ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019304:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019308:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001930e:	88 ca                	mov    dl,cl
c0019310:	83 e0 f0             	and    eax,0xfffffff0
c0019313:	83 e2 0f             	and    edx,0xf
c0019316:	09 d0                	or     eax,edx
c0019318:	88 ca                	mov    dl,cl
c001931a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019320:	c0 ea 04             	shr    dl,0x4
c0019323:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019327:	0f b6 c2             	movzx  eax,dl
c001932a:	83 c4 20             	add    esp,0x20
c001932d:	c1 e0 06             	shl    eax,0x6
c0019330:	89 c7                	mov    edi,eax
c0019332:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019338:	66 25 3f c0          	and    ax,0xc03f
c001933c:	09 f8                	or     eax,edi
c001933e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019345:	89 c8                	mov    eax,ecx
c0019347:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001934e:	c1 e8 08             	shr    eax,0x8
c0019351:	83 e5 3f             	and    ebp,0x3f
c0019354:	83 e0 0f             	and    eax,0xf
c0019357:	89 c7                	mov    edi,eax
c0019359:	c1 e7 06             	shl    edi,0x6
c001935c:	09 ef                	or     edi,ebp
c001935e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019365:	89 fa                	mov    edx,edi
c0019367:	83 e5 c0             	and    ebp,0xffffffc0
c001936a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019370:	88 c2                	mov    dl,al
c0019372:	c0 ea 02             	shr    dl,0x2
c0019375:	89 d7                	mov    edi,edx
c0019377:	09 ef                	or     edi,ebp
c0019379:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001937f:	89 fa                	mov    edx,edi
c0019381:	83 e5 cf             	and    ebp,0xffffffcf
c0019384:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001938a:	89 cf                	mov    edi,ecx
c001938c:	c1 ef 0c             	shr    edi,0xc
c001938f:	83 e7 03             	and    edi,0x3
c0019392:	c1 e7 04             	shl    edi,0x4
c0019395:	09 ef                	or     edi,ebp
c0019397:	3c 06                	cmp    al,0x6
c0019399:	89 fa                	mov    edx,edi
c001939b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00193a1:	74 04                	je     c00193a7 <CPU::detectFeatures()+0x555>
c00193a3:	3c 0f                	cmp    al,0xf
c00193a5:	75 5c                	jne    c0019403 <CPU::detectFeatures()+0x5b1>
c00193a7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00193ab:	89 cf                	mov    edi,ecx
c00193ad:	c1 ef 10             	shr    edi,0x10
c00193b0:	c1 e7 04             	shl    edi,0x4
c00193b3:	09 fa                	or     edx,edi
c00193b5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00193bb:	0f b6 d2             	movzx  edx,dl
c00193be:	66 81 e7 3f c0       	and    di,0xc03f
c00193c3:	c1 e2 06             	shl    edx,0x6
c00193c6:	09 fa                	or     edx,edi
c00193c8:	3c 0f                	cmp    al,0xf
c00193ca:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00193d1:	75 30                	jne    c0019403 <CPU::detectFeatures()+0x5b1>
c00193d3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00193d9:	c1 e9 14             	shr    ecx,0x14
c00193dc:	83 e0 3f             	and    eax,0x3f
c00193df:	83 c1 0f             	add    ecx,0xf
c00193e2:	88 ca                	mov    dl,cl
c00193e4:	c0 e9 02             	shr    cl,0x2
c00193e7:	c1 e2 06             	shl    edx,0x6
c00193ea:	09 d0                	or     eax,edx
c00193ec:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00193f2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193f8:	83 e0 c0             	and    eax,0xffffffc0
c00193fb:	09 c1                	or     ecx,eax
c00193fd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019403:	83 ec 0c             	sub    esp,0xc
c0019406:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001940d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019411:	50                   	push   eax
c0019412:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019416:	55                   	push   ebp
c0019417:	56                   	push   esi
c0019418:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001941c:	57                   	push   edi
c001941d:	68 00 00 00 80       	push   0x80000000
c0019422:	e8 5f f8 ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019427:	83 c4 20             	add    esp,0x20
c001942a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019432:	76 22                	jbe    c0019456 <CPU::detectFeatures()+0x604>
c0019434:	83 ec 0c             	sub    esp,0xc
c0019437:	8d 44 24 28          	lea    eax,[esp+0x28]
c001943b:	50                   	push   eax
c001943c:	55                   	push   ebp
c001943d:	56                   	push   esi
c001943e:	57                   	push   edi
c001943f:	68 01 00 00 80       	push   0x80000001
c0019444:	e8 3d f8 ff ff       	call   c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019449:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019453:	83 c4 20             	add    esp,0x20
c0019456:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001945c:	83 f8 01             	cmp    eax,0x1
c001945f:	75 6f                	jne    c00194d0 <CPU::detectFeatures()+0x67e>
c0019461:	51                   	push   ecx
c0019462:	51                   	push   ecx
c0019463:	68 69 bf 02 c0       	push   0xc002bf69
c0019468:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001946c:	56                   	push   esi
c001946d:	e8 9a 73 fe ff       	call   c000080c <strcpy>
c0019472:	5f                   	pop    edi
c0019473:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019479:	5d                   	pop    ebp
c001947a:	66 c1 e8 06          	shr    ax,0x6
c001947e:	0f b6 c0             	movzx  eax,al
c0019481:	50                   	push   eax
c0019482:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019488:	c1 e8 0e             	shr    eax,0xe
c001948b:	0f b6 c0             	movzx  eax,al
c001948e:	50                   	push   eax
c001948f:	e8 9c f4 ff ff       	call   c0018930 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019494:	5a                   	pop    edx
c0019495:	59                   	pop    ecx
c0019496:	50                   	push   eax
c0019497:	56                   	push   esi
c0019498:	e8 af 74 fe ff       	call   c000094c <strcat>
c001949d:	5f                   	pop    edi
c001949e:	5d                   	pop    ebp
c001949f:	56                   	push   esi
c00194a0:	53                   	push   ebx
c00194a1:	e8 94 ab ff ff       	call   c001403a <Device::setName(char const*)>
c00194a6:	58                   	pop    eax
c00194a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194ad:	5a                   	pop    edx
c00194ae:	68 70 bf 02 c0       	push   0xc002bf70
c00194b3:	50                   	push   eax
c00194b4:	e8 df 73 fe ff       	call   c0000898 <strcmp>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	85 c0                	test   eax,eax
c00194be:	0f 85 71 03 00 00    	jne    c0019835 <CPU::detectFeatures()+0x9e3>
c00194c4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00194cb:	e9 65 03 00 00       	jmp    c0019835 <CPU::detectFeatures()+0x9e3>
c00194d0:	83 f8 02             	cmp    eax,0x2
c00194d3:	0f 85 b5 00 00 00    	jne    c001958e <CPU::detectFeatures()+0x73c>
c00194d9:	57                   	push   edi
c00194da:	57                   	push   edi
c00194db:	68 82 bf 02 c0       	push   0xc002bf82
c00194e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194e4:	56                   	push   esi
c00194e5:	e8 22 73 fe ff       	call   c000080c <strcpy>
c00194ea:	5d                   	pop    ebp
c00194eb:	58                   	pop    eax
c00194ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f2:	66 c1 e8 06          	shr    ax,0x6
c00194f6:	0f b6 c0             	movzx  eax,al
c00194f9:	50                   	push   eax
c00194fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019500:	c1 e8 0e             	shr    eax,0xe
c0019503:	0f b6 c0             	movzx  eax,al
c0019506:	50                   	push   eax
c0019507:	e8 90 f2 ff ff       	call   c001879c <CPU::lookupAMDName(unsigned char, unsigned char)>
c001950c:	5a                   	pop    edx
c001950d:	59                   	pop    ecx
c001950e:	50                   	push   eax
c001950f:	56                   	push   esi
c0019510:	e8 37 74 fe ff       	call   c000094c <strcat>
c0019515:	5f                   	pop    edi
c0019516:	5d                   	pop    ebp
c0019517:	56                   	push   esi
c0019518:	53                   	push   ebx
c0019519:	e8 1c ab ff ff       	call   c001403a <Device::setName(char const*)>
c001951e:	58                   	pop    eax
c001951f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019525:	5a                   	pop    edx
c0019526:	68 87 bf 02 c0       	push   0xc002bf87
c001952b:	50                   	push   eax
c001952c:	e8 67 73 fe ff       	call   c0000898 <strcmp>
c0019531:	83 c4 10             	add    esp,0x10
c0019534:	85 c0                	test   eax,eax
c0019536:	75 20                	jne    c0019558 <CPU::detectFeatures()+0x706>
c0019538:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c001953e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019544:	a8 01                	test   al,0x1
c0019546:	74 10                	je     c0019558 <CPU::detectFeatures()+0x706>
c0019548:	83 e0 fe             	and    eax,0xfffffffe
c001954b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019551:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019558:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001955e:	c1 e8 0e             	shr    eax,0xe
c0019561:	3c 05                	cmp    al,0x5
c0019563:	0f 85 cc 02 00 00    	jne    c0019835 <CPU::detectFeatures()+0x9e3>
c0019569:	56                   	push   esi
c001956a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019570:	83 e0 0f             	and    eax,0xf
c0019573:	50                   	push   eax
c0019574:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001957a:	66 c1 e8 06          	shr    ax,0x6
c001957e:	0f b6 c0             	movzx  eax,al
c0019581:	50                   	push   eax
c0019582:	6a 05                	push   0x5
c0019584:	e8 89 f6 ff ff       	call   c0018c12 <CPU::AMD_K6_writeback(int, int, int)>
c0019589:	e9 1f 02 00 00       	jmp    c00197ad <CPU::detectFeatures()+0x95b>
c001958e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019591:	83 fa 01             	cmp    edx,0x1
c0019594:	76 09                	jbe    c001959f <CPU::detectFeatures()+0x74d>
c0019596:	83 f8 06             	cmp    eax,0x6
c0019599:	0f 85 91 01 00 00    	jne    c0019730 <CPU::detectFeatures()+0x8de>
c001959f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195a5:	c1 ea 0e             	shr    edx,0xe
c00195a8:	80 fa 05             	cmp    dl,0x5
c00195ab:	75 7b                	jne    c0019628 <CPU::detectFeatures()+0x7d6>
c00195ad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195b3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195b8:	66 81 fa 00 01       	cmp    dx,0x100
c00195bd:	75 0c                	jne    c00195cb <CPU::detectFeatures()+0x779>
c00195bf:	51                   	push   ecx
c00195c0:	51                   	push   ecx
c00195c1:	68 8e bf 02 c0       	push   0xc002bf8e
c00195c6:	e9 dc 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c00195cb:	66 81 fa 00 02       	cmp    dx,0x200
c00195d0:	75 0c                	jne    c00195de <CPU::detectFeatures()+0x78c>
c00195d2:	52                   	push   edx
c00195d3:	52                   	push   edx
c00195d4:	68 a1 bf 02 c0       	push   0xc002bfa1
c00195d9:	e9 c9 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c00195de:	66 81 fa 40 02       	cmp    dx,0x240
c00195e3:	75 0c                	jne    c00195f1 <CPU::detectFeatures()+0x79f>
c00195e5:	50                   	push   eax
c00195e6:	50                   	push   eax
c00195e7:	68 b3 bf 02 c0       	push   0xc002bfb3
c00195ec:	e9 b6 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c00195f1:	83 f8 06             	cmp    eax,0x6
c00195f4:	75 0c                	jne    c0019602 <CPU::detectFeatures()+0x7b0>
c00195f6:	50                   	push   eax
c00195f7:	50                   	push   eax
c00195f8:	68 c5 bf 02 c0       	push   0xc002bfc5
c00195fd:	e9 a5 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019602:	83 f8 04             	cmp    eax,0x4
c0019605:	75 0c                	jne    c0019613 <CPU::detectFeatures()+0x7c1>
c0019607:	50                   	push   eax
c0019608:	50                   	push   eax
c0019609:	68 d1 bf 02 c0       	push   0xc002bfd1
c001960e:	e9 94 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019613:	83 f8 03             	cmp    eax,0x3
c0019616:	0f 85 19 02 00 00    	jne    c0019835 <CPU::detectFeatures()+0x9e3>
c001961c:	50                   	push   eax
c001961d:	50                   	push   eax
c001961e:	68 d9 bf 02 c0       	push   0xc002bfd9
c0019623:	e9 7f 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019628:	80 fa 06             	cmp    dl,0x6
c001962b:	0f 85 db 00 00 00    	jne    c001970c <CPU::detectFeatures()+0x8ba>
c0019631:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019637:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001963c:	66 81 fa 80 01       	cmp    dx,0x180
c0019641:	75 0c                	jne    c001964f <CPU::detectFeatures()+0x7fd>
c0019643:	50                   	push   eax
c0019644:	50                   	push   eax
c0019645:	68 e4 bf 02 c0       	push   0xc002bfe4
c001964a:	e9 58 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001964f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019655:	66 f7 c1 80 ff       	test   cx,0xff80
c001965a:	75 0c                	jne    c0019668 <CPU::detectFeatures()+0x816>
c001965c:	50                   	push   eax
c001965d:	50                   	push   eax
c001965e:	68 f4 bf 02 c0       	push   0xc002bff4
c0019663:	e9 3f 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019668:	66 81 fa 40 02       	cmp    dx,0x240
c001966d:	75 0c                	jne    c001967b <CPU::detectFeatures()+0x829>
c001966f:	55                   	push   ebp
c0019670:	55                   	push   ebp
c0019671:	68 fb bf 02 c0       	push   0xc002bffb
c0019676:	e9 2c 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001967b:	66 81 fa 80 02       	cmp    dx,0x280
c0019680:	75 0c                	jne    c001968e <CPU::detectFeatures()+0x83c>
c0019682:	57                   	push   edi
c0019683:	57                   	push   edi
c0019684:	68 04 c0 02 c0       	push   0xc002c004
c0019689:	e9 19 01 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001968e:	66 81 fa 40 03       	cmp    dx,0x340
c0019693:	74 ed                	je     c0019682 <CPU::detectFeatures()+0x830>
c0019695:	66 81 fa c0 03       	cmp    dx,0x3c0
c001969a:	75 0c                	jne    c00196a8 <CPU::detectFeatures()+0x856>
c001969c:	56                   	push   esi
c001969d:	56                   	push   esi
c001969e:	68 0b c0 02 c0       	push   0xc002c00b
c00196a3:	e9 ff 00 00 00       	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c00196a8:	83 f8 06             	cmp    eax,0x6
c00196ab:	0f 84 45 ff ff ff    	je     c00195f6 <CPU::detectFeatures()+0x7a4>
c00196b1:	83 f8 04             	cmp    eax,0x4
c00196b4:	0f 84 4d ff ff ff    	je     c0019607 <CPU::detectFeatures()+0x7b5>
c00196ba:	83 f8 03             	cmp    eax,0x3
c00196bd:	0f 85 72 01 00 00    	jne    c0019835 <CPU::detectFeatures()+0x9e3>
c00196c3:	51                   	push   ecx
c00196c4:	51                   	push   ecx
c00196c5:	68 14 c0 02 c0       	push   0xc002c014
c00196ca:	53                   	push   ebx
c00196cb:	e8 6a a9 ff ff       	call   c001403a <Device::setName(char const*)>
c00196d0:	b1 c1                	mov    cl,0xc1
c00196d2:	88 c8                	mov    al,cl
c00196d4:	e6 22                	out    0x22,al
c00196d6:	e4 23                	in     al,0x23
c00196d8:	88 c2                	mov    dl,al
c00196da:	88 c8                	mov    al,cl
c00196dc:	e6 22                	out    0x22,al
c00196de:	88 d0                	mov    al,dl
c00196e0:	83 c8 10             	or     eax,0x10
c00196e3:	e6 23                	out    0x23,al
c00196e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00196ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00196ef:	89 d0                	mov    eax,edx
c00196f1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196f7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196fb:	40                   	inc    eax
c00196fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019702:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019707:	e9 a1 00 00 00       	jmp    c00197ad <CPU::detectFeatures()+0x95b>
c001970c:	83 f8 06             	cmp    eax,0x6
c001970f:	0f 84 e1 fe ff ff    	je     c00195f6 <CPU::detectFeatures()+0x7a4>
c0019715:	83 f8 04             	cmp    eax,0x4
c0019718:	0f 84 e9 fe ff ff    	je     c0019607 <CPU::detectFeatures()+0x7b5>
c001971e:	83 f8 03             	cmp    eax,0x3
c0019721:	0f 85 0e 01 00 00    	jne    c0019835 <CPU::detectFeatures()+0x9e3>
c0019727:	52                   	push   edx
c0019728:	52                   	push   edx
c0019729:	68 1f c0 02 c0       	push   0xc002c01f
c001972e:	eb 77                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019730:	83 f8 07             	cmp    eax,0x7
c0019733:	75 09                	jne    c001973e <CPU::detectFeatures()+0x8ec>
c0019735:	50                   	push   eax
c0019736:	50                   	push   eax
c0019737:	68 29 c0 02 c0       	push   0xc002c029
c001973c:	eb 69                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001973e:	83 f8 0a             	cmp    eax,0xa
c0019741:	75 09                	jne    c001974c <CPU::detectFeatures()+0x8fa>
c0019743:	50                   	push   eax
c0019744:	50                   	push   eax
c0019745:	68 34 c0 02 c0       	push   0xc002c034
c001974a:	eb 5b                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001974c:	83 f8 0b             	cmp    eax,0xb
c001974f:	75 09                	jne    c001975a <CPU::detectFeatures()+0x908>
c0019751:	50                   	push   eax
c0019752:	50                   	push   eax
c0019753:	68 3c c0 02 c0       	push   0xc002c03c
c0019758:	eb 4d                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c001975a:	83 f8 08             	cmp    eax,0x8
c001975d:	75 09                	jne    c0019768 <CPU::detectFeatures()+0x916>
c001975f:	50                   	push   eax
c0019760:	50                   	push   eax
c0019761:	68 45 c0 02 c0       	push   0xc002c045
c0019766:	eb 3f                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019768:	83 f8 09             	cmp    eax,0x9
c001976b:	75 09                	jne    c0019776 <CPU::detectFeatures()+0x924>
c001976d:	50                   	push   eax
c001976e:	50                   	push   eax
c001976f:	68 4d c0 02 c0       	push   0xc002c04d
c0019774:	eb 31                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019776:	83 f8 05             	cmp    eax,0x5
c0019779:	75 09                	jne    c0019784 <CPU::detectFeatures()+0x932>
c001977b:	50                   	push   eax
c001977c:	50                   	push   eax
c001977d:	68 55 c0 02 c0       	push   0xc002c055
c0019782:	eb 23                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019784:	83 f8 0c             	cmp    eax,0xc
c0019787:	75 09                	jne    c0019792 <CPU::detectFeatures()+0x940>
c0019789:	55                   	push   ebp
c001978a:	55                   	push   ebp
c001978b:	68 63 c0 02 c0       	push   0xc002c063
c0019790:	eb 15                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c0019792:	83 f8 0d             	cmp    eax,0xd
c0019795:	75 09                	jne    c00197a0 <CPU::detectFeatures()+0x94e>
c0019797:	57                   	push   edi
c0019798:	57                   	push   edi
c0019799:	68 6e c0 02 c0       	push   0xc002c06e
c001979e:	eb 07                	jmp    c00197a7 <CPU::detectFeatures()+0x955>
c00197a0:	56                   	push   esi
c00197a1:	56                   	push   esi
c00197a2:	68 82 c0 02 c0       	push   0xc002c082
c00197a7:	53                   	push   ebx
c00197a8:	e8 8d a8 ff ff       	call   c001403a <Device::setName(char const*)>
c00197ad:	83 c4 10             	add    esp,0x10
c00197b0:	e9 80 00 00 00       	jmp    c0019835 <CPU::detectFeatures()+0x9e3>
c00197b5:	51                   	push   ecx
c00197b6:	51                   	push   ecx
c00197b7:	68 ce be 02 c0       	push   0xc002bece
c00197bc:	55                   	push   ebp
c00197bd:	e8 4a 70 fe ff       	call   c000080c <strcpy>
c00197c2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00197cc:	e8 dd 6a fe ff       	call   c00002ae <is486>
c00197d1:	83 c4 10             	add    esp,0x10
c00197d4:	85 c0                	test   eax,eax
c00197d6:	74 2b                	je     c0019803 <CPU::detectFeatures()+0x9b1>
c00197d8:	52                   	push   edx
c00197d9:	52                   	push   edx
c00197da:	68 8e c0 02 c0       	push   0xc002c08e
c00197df:	53                   	push   ebx
c00197e0:	e8 55 a8 ff ff       	call   c001403a <Device::setName(char const*)>
c00197e5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00197ec:	0f 20 c0             	mov    eax,cr0
c00197ef:	83 e0 14             	and    eax,0x14
c00197f2:	83 c4 10             	add    esp,0x10
c00197f5:	83 f8 04             	cmp    eax,0x4
c00197f8:	75 1f                	jne    c0019819 <CPU::detectFeatures()+0x9c7>
c00197fa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019801:	eb 32                	jmp    c0019835 <CPU::detectFeatures()+0x9e3>
c0019803:	50                   	push   eax
c0019804:	50                   	push   eax
c0019805:	68 99 c0 02 c0       	push   0xc002c099
c001980a:	53                   	push   ebx
c001980b:	e8 2a a8 ff ff       	call   c001403a <Device::setName(char const*)>
c0019810:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019817:	eb d3                	jmp    c00197ec <CPU::detectFeatures()+0x99a>
c0019819:	e8 6b 6a fe ff       	call   c0000289 <hasLegacyFPU>
c001981e:	83 e0 01             	and    eax,0x1
c0019821:	8d 14 00             	lea    edx,[eax+eax*1]
c0019824:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001982a:	83 e0 fd             	and    eax,0xfffffffd
c001982d:	09 d0                	or     eax,edx
c001982f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019835:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001983c:	83 c4 4c             	add    esp,0x4c
c001983f:	5b                   	pop    ebx
c0019840:	5e                   	pop    esi
c0019841:	5f                   	pop    edi
c0019842:	5d                   	pop    ebp
c0019843:	c3                   	ret    

c0019844 <CPU::setupSMEP()>:
c0019844:	0f 20 e0             	mov    eax,cr4
c0019847:	0d 00 00 10 00       	or     eax,0x100000
c001984c:	0f 22 e0             	mov    cr4,eax
c001984f:	c3                   	ret    

c0019850 <CPU::setupUMIP()>:
c0019850:	0f 20 e0             	mov    eax,cr4
c0019853:	80 cc 08             	or     ah,0x8
c0019856:	0f 22 e0             	mov    cr4,eax
c0019859:	c3                   	ret    

c001985a <CPU::setupTSC()>:
c001985a:	0f 20 e0             	mov    eax,cr4
c001985d:	83 c8 04             	or     eax,0x4
c0019860:	0f 22 e0             	mov    cr4,eax
c0019863:	c3                   	ret    

c0019864 <CPU::setupLargePages()>:
c0019864:	0f 20 e0             	mov    eax,cr4
c0019867:	83 c8 10             	or     eax,0x10
c001986a:	0f 22 e0             	mov    cr4,eax
c001986d:	c3                   	ret    

c001986e <CPU::setupPAT()>:
c001986e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019873:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001987a:	74 2c                	je     c00198a8 <CPU::setupPAT()+0x3a>
c001987c:	53                   	push   ebx
c001987d:	83 ec 10             	sub    esp,0x10
c0019880:	68 77 02 00 00       	push   0x277
c0019885:	50                   	push   eax
c0019886:	e8 f7 54 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c001988b:	83 e2 f8             	and    edx,0xfffffff8
c001988e:	83 ca 01             	or     edx,0x1
c0019891:	52                   	push   edx
c0019892:	50                   	push   eax
c0019893:	68 77 02 00 00       	push   0x277
c0019898:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001989e:	e8 0b 55 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c00198a3:	83 c4 28             	add    esp,0x28
c00198a6:	5b                   	pop    ebx
c00198a7:	c3                   	ret    
c00198a8:	c3                   	ret    
c00198a9:	90                   	nop

c00198aa <CPU::setupMTRR()>:
c00198aa:	c3                   	ret    
c00198ab:	90                   	nop

c00198ac <CPU::setupGlobalPages()>:
c00198ac:	0f 20 e0             	mov    eax,cr4
c00198af:	0c 80                	or     al,0x80
c00198b1:	0f 22 e0             	mov    cr4,eax
c00198b4:	c3                   	ret    
c00198b5:	90                   	nop

c00198b6 <CPU::allowUsermodeDataAccess()>:
c00198b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198c1:	74 03                	je     c00198c6 <CPU::allowUsermodeDataAccess()+0x10>
c00198c3:	0f 01 cb             	stac   
c00198c6:	c3                   	ret    
c00198c7:	90                   	nop

c00198c8 <CPU::prohibitUsermodeDataAccess()>:
c00198c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198cc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198d3:	74 03                	je     c00198d8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00198d5:	0f 01 ca             	clac   
c00198d8:	c3                   	ret    
c00198d9:	90                   	nop

c00198da <CPU::setupSMAP()>:
c00198da:	0f 20 e0             	mov    eax,cr4
c00198dd:	0d 00 00 20 00       	or     eax,0x200000
c00198e2:	0f 22 e0             	mov    cr4,eax
c00198e5:	eb e1                	jmp    c00198c8 <CPU::prohibitUsermodeDataAccess()>
c00198e7:	90                   	nop

c00198e8 <CPU::setupFeatures()>:
c00198e8:	83 ec 0c             	sub    esp,0xc
c00198eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198ef:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198f6:	74 07                	je     c00198ff <CPU::setupFeatures()+0x17>
c00198f8:	52                   	push   edx
c00198f9:	e8 46 ff ff ff       	call   c0019844 <CPU::setupSMEP()>
c00198fe:	58                   	pop    eax
c00198ff:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019906:	74 07                	je     c001990f <CPU::setupFeatures()+0x27>
c0019908:	52                   	push   edx
c0019909:	e8 cc ff ff ff       	call   c00198da <CPU::setupSMAP()>
c001990e:	58                   	pop    eax
c001990f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019916:	74 07                	je     c001991f <CPU::setupFeatures()+0x37>
c0019918:	52                   	push   edx
c0019919:	e8 32 ff ff ff       	call   c0019850 <CPU::setupUMIP()>
c001991e:	58                   	pop    eax
c001991f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019926:	74 07                	je     c001992f <CPU::setupFeatures()+0x47>
c0019928:	52                   	push   edx
c0019929:	e8 2c ff ff ff       	call   c001985a <CPU::setupTSC()>
c001992e:	58                   	pop    eax
c001992f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019936:	74 07                	je     c001993f <CPU::setupFeatures()+0x57>
c0019938:	52                   	push   edx
c0019939:	e8 26 ff ff ff       	call   c0019864 <CPU::setupLargePages()>
c001993e:	59                   	pop    ecx
c001993f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019946:	74 07                	je     c001994f <CPU::setupFeatures()+0x67>
c0019948:	52                   	push   edx
c0019949:	e8 5e ff ff ff       	call   c00198ac <CPU::setupGlobalPages()>
c001994e:	58                   	pop    eax
c001994f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019956:	74 0c                	je     c0019964 <CPU::setupFeatures()+0x7c>
c0019958:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001995c:	83 c4 0c             	add    esp,0xc
c001995f:	e9 0a ff ff ff       	jmp    c001986e <CPU::setupPAT()>
c0019964:	83 c4 0c             	add    esp,0xc
c0019967:	c3                   	ret    

c0019968 <CPU::open(int, int, void*)>:
c0019968:	57                   	push   edi
c0019969:	56                   	push   esi
c001996a:	53                   	push   ebx
c001996b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001996f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019973:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019979:	83 ec 0c             	sub    esp,0xc
c001997c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019982:	68 a4 c0 02 c0       	push   0xc002c0a4
c0019987:	e8 81 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001998c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019992:	89 04 24             	mov    DWORD PTR [esp],eax
c0019995:	e8 60 57 ff ff       	call   c000f0fa <GDT::setup()>
c001999a:	c7 04 24 b6 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0b6
c00199a1:	e8 67 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00199a6:	83 c4 0c             	add    esp,0xc
c00199a9:	6a 00                	push   0x0
c00199ab:	68 ef be ad de       	push   0xdeadbeef
c00199b0:	57                   	push   edi
c00199b1:	e8 0a 76 ff ff       	call   c0010fc0 <TSS::setup(unsigned long, unsigned long)>
c00199b6:	c7 04 24 c8 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c8
c00199bd:	e8 4b 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00199c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199c5:	e8 d6 75 ff ff       	call   c0010fa0 <TSS::flush()>
c00199ca:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c00199d1:	e8 37 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00199d6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00199dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00199df:	e8 7a 59 ff ff       	call   c000f35e <IDT::setup()>
c00199e4:	c7 04 24 ee c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ee
c00199eb:	e8 1d 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c00199f0:	b8 00 04 00 00       	mov    eax,0x400
c00199f5:	0f 23 f8             	mov    db7,eax
c00199f8:	c7 04 24 0c c1 02 c0 	mov    DWORD PTR [esp],0xc002c10c
c00199ff:	e8 09 60 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019a04:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a0e:	e8 9c 63 ff ff       	call   c000fdaf <Phys::allocatePage()>
c0019a13:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a19:	89 30                	mov    DWORD PTR [eax],esi
c0019a1b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a21:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a24:	c7 04 24 2e c1 02 c0 	mov    DWORD PTR [esp],0xc002c12e
c0019a2b:	e8 dd 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019a30:	58                   	pop    eax
c0019a31:	5a                   	pop    edx
c0019a32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a3c:	e8 79 85 ff ff       	call   c0011fba <VAS::setCPUSpecific(unsigned long)>
c0019a41:	c7 04 24 56 c1 02 c0 	mov    DWORD PTR [esp],0xc002c156
c0019a48:	e8 c0 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019a4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a50:	e8 fd f3 ff ff       	call   c0018e52 <CPU::detectFeatures()>
c0019a55:	c7 04 24 79 c1 02 c0 	mov    DWORD PTR [esp],0xc002c179
c0019a5c:	e8 ac 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019a61:	e8 2e ba ff ff       	call   c0015494 <setupInterruptController()>
c0019a66:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a6c:	c7 04 24 9d c1 02 c0 	mov    DWORD PTR [esp],0xc002c19d
c0019a73:	e8 95 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019a78:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0019a7d:	83 e0 10             	and    eax,0x10
c0019a80:	83 f8 01             	cmp    eax,0x1
c0019a83:	19 c0                	sbb    eax,eax
c0019a85:	83 e0 46             	and    eax,0x46
c0019a88:	83 c0 1e             	add    eax,0x1e
c0019a8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a8e:	e8 ee cf ff ff       	call   c0016a81 <setupTimer(int)>
c0019a93:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a99:	c7 04 24 b8 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b8
c0019aa0:	e8 68 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019aa5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aa8:	e8 3b fe ff ff       	call   c00198e8 <CPU::setupFeatures()>
c0019aad:	c7 04 24 d3 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d3
c0019ab4:	e8 54 5f ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c0019ab9:	83 c4 10             	add    esp,0x10
c0019abc:	31 c0                	xor    eax,eax
c0019abe:	5b                   	pop    ebx
c0019abf:	5e                   	pop    esi
c0019ac0:	5f                   	pop    edi
c0019ac1:	c3                   	ret    

c0019ac2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ac2:	57                   	push   edi
c0019ac3:	56                   	push   esi
c0019ac4:	53                   	push   ebx
c0019ac5:	51                   	push   ecx
c0019ac6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019aca:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019acd:	0f 02 c0             	lar    eax,ax
c0019ad0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ad3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ad7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ada:	88 ca                	mov    dl,cl
c0019adc:	c0 ea 06             	shr    dl,0x6
c0019adf:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ae3:	89 ca                	mov    edx,ecx
c0019ae5:	66 c1 ea 03          	shr    dx,0x3
c0019ae9:	83 e2 07             	and    edx,0x7
c0019aec:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019af1:	88 17                	mov    BYTE PTR [edi],dl
c0019af3:	0f 84 a6 01 00 00    	je     c0019c9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019af9:	83 e1 07             	and    ecx,0x7
c0019afc:	80 f9 04             	cmp    cl,0x4
c0019aff:	0f 84 98 00 00 00    	je     c0019b9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b05:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b0a:	0f 95 c0             	setne  al
c0019b0d:	80 f9 05             	cmp    cl,0x5
c0019b10:	0f 95 c2             	setne  dl
c0019b13:	08 c2                	or     dl,al
c0019b15:	74 79                	je     c0019b90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b17:	84 c9                	test   cl,cl
c0019b19:	75 05                	jne    c0019b20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b1b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b1e:	eb 3c                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b20:	80 f9 01             	cmp    cl,0x1
c0019b23:	75 05                	jne    c0019b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b25:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b28:	eb 32                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b2a:	80 f9 02             	cmp    cl,0x2
c0019b2d:	75 05                	jne    c0019b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b2f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b32:	eb 28                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b34:	31 c0                	xor    eax,eax
c0019b36:	80 f9 03             	cmp    cl,0x3
c0019b39:	75 05                	jne    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b3b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b3e:	eb 1c                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b40:	80 f9 05             	cmp    cl,0x5
c0019b43:	75 05                	jne    c0019b4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b45:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b48:	eb 12                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b4a:	80 f9 06             	cmp    cl,0x6
c0019b4d:	75 05                	jne    c0019b54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b52:	eb 08                	jmp    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b54:	80 f9 07             	cmp    cl,0x7
c0019b57:	75 03                	jne    c0019b5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b59:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b5c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b61:	75 10                	jne    c0019b73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b63:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b67:	b9 03 00 00 00       	mov    ecx,0x3
c0019b6c:	01 d0                	add    eax,edx
c0019b6e:	e9 37 01 00 00       	jmp    c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b73:	b9 02 00 00 00       	mov    ecx,0x2
c0019b78:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b7d:	0f 85 27 01 00 00    	jne    c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b83:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b86:	b9 06 00 00 00       	mov    ecx,0x6
c0019b8b:	e9 1a 01 00 00       	jmp    c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b90:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b93:	b9 06 00 00 00       	mov    ecx,0x6
c0019b98:	e9 0f 01 00 00       	jmp    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b9d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019ba0:	88 ca                	mov    dl,cl
c0019ba2:	c0 ea 06             	shr    dl,0x6
c0019ba5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ba9:	89 ca                	mov    edx,ecx
c0019bab:	66 c1 ea 03          	shr    dx,0x3
c0019baf:	83 e2 07             	and    edx,0x7
c0019bb2:	80 e1 07             	and    cl,0x7
c0019bb5:	75 05                	jne    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019bb7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019bba:	eb 4c                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bbc:	80 f9 01             	cmp    cl,0x1
c0019bbf:	75 05                	jne    c0019bc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019bc1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019bc4:	eb 42                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bc6:	80 f9 02             	cmp    cl,0x2
c0019bc9:	75 05                	jne    c0019bd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019bcb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019bce:	eb 38                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bd0:	80 f9 03             	cmp    cl,0x3
c0019bd3:	75 05                	jne    c0019bda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019bd5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019bd8:	eb 2e                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bda:	80 f9 04             	cmp    cl,0x4
c0019bdd:	75 12                	jne    c0019bf1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019bdf:	f6 c4 60             	test   ah,0x60
c0019be2:	75 08                	jne    c0019bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019be4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019be7:	8d 78 14             	lea    edi,[eax+0x14]
c0019bea:	eb 1c                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bec:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019bef:	eb 17                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bf1:	80 f9 05             	cmp    cl,0x5
c0019bf4:	75 05                	jne    c0019bfb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019bf6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019bf9:	eb 0d                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bfb:	80 f9 06             	cmp    cl,0x6
c0019bfe:	75 05                	jne    c0019c05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c00:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c03:	eb 03                	jmp    c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c05:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c08:	84 d2                	test   dl,dl
c0019c0a:	75 05                	jne    c0019c11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c0c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c0f:	eb 3c                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c11:	80 fa 01             	cmp    dl,0x1
c0019c14:	75 05                	jne    c0019c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c19:	eb 32                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c1b:	80 fa 02             	cmp    dl,0x2
c0019c1e:	75 05                	jne    c0019c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c20:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c23:	eb 28                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c25:	80 fa 03             	cmp    dl,0x3
c0019c28:	75 05                	jne    c0019c2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c2a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c2d:	eb 1e                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c2f:	31 c0                	xor    eax,eax
c0019c31:	80 fa 04             	cmp    dl,0x4
c0019c34:	74 17                	je     c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c36:	80 fa 05             	cmp    dl,0x5
c0019c39:	75 05                	jne    c0019c40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c3b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c3e:	eb 0d                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c40:	80 fa 06             	cmp    dl,0x6
c0019c43:	75 05                	jne    c0019c4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c48:	eb 03                	jmp    c0019c4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c4d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c52:	0f 94 c2             	sete   dl
c0019c55:	80 f9 05             	cmp    cl,0x5
c0019c58:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c5c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c61:	d3 e0                	shl    eax,cl
c0019c63:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c67:	74 0a                	je     c0019c73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c69:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c6c:	b9 07 00 00 00       	mov    ecx,0x7
c0019c71:	eb 37                	jmp    c0019caa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c73:	01 f8                	add    eax,edi
c0019c75:	b9 03 00 00 00       	mov    ecx,0x3
c0019c7a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c7f:	74 2b                	je     c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c81:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c86:	75 0d                	jne    c0019c95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c88:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c8c:	01 c8                	add    eax,ecx
c0019c8e:	b9 04 00 00 00       	mov    ecx,0x4
c0019c93:	eb 17                	jmp    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c95:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c98:	b9 07 00 00 00       	mov    ecx,0x7
c0019c9d:	eb 0d                	jmp    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c9f:	b9 02 00 00 00       	mov    ecx,0x2
c0019ca4:	b2 01                	mov    dl,0x1
c0019ca6:	31 c0                	xor    eax,eax
c0019ca8:	eb 02                	jmp    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019caa:	31 d2                	xor    edx,edx
c0019cac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019cb0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019cb2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019cb6:	88 11                	mov    BYTE PTR [ecx],dl
c0019cb8:	5a                   	pop    edx
c0019cb9:	5b                   	pop    ebx
c0019cba:	5e                   	pop    esi
c0019cbb:	5f                   	pop    edi
c0019cbc:	c3                   	ret    

c0019cbd <Krnl::smpEntry()>:
c0019cbd:	eb fe                	jmp    c0019cbd <Krnl::smpEntry()>

c0019cbf <Krnl::startCPU(int)>:
c0019cbf:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019cc4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ccb:	0f 84 36 01 00 00    	je     c0019e07 <Krnl::startCPU(int)+0x148>
c0019cd1:	53                   	push   ebx
c0019cd2:	83 ec 10             	sub    esp,0x10
c0019cd5:	fa                   	cli    
c0019cd6:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0019cdc:	6a 1b                	push   0x1b
c0019cde:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0019ce4:	e8 99 50 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019ce9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019cee:	89 c3                	mov    ebx,eax
c0019cf0:	58                   	pop    eax
c0019cf1:	5a                   	pop    edx
c0019cf2:	53                   	push   ebx
c0019cf3:	68 1c c2 02 c0       	push   0xc002c21c
c0019cf8:	e8 0e 8d ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0019cfd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d0b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d15:	c1 e0 18             	shl    eax,0x18
c0019d18:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d27:	09 c2                	or     edx,eax
c0019d29:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d2f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d35:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d3b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d41:	80 cd c5             	or     ch,0xc5
c0019d44:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d4a:	f3 90                	pause  
c0019d4c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d4e:	0f ba e1 0c          	bt     ecx,0xc
c0019d52:	72 f6                	jb     c0019d4a <Krnl::startCPU(int)+0x8b>
c0019d54:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d5a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d60:	09 c1                	or     ecx,eax
c0019d62:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d68:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d6e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d74:	80 cd 85             	or     ch,0x85
c0019d77:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d7d:	f3 90                	pause  
c0019d7f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d81:	0f ba e1 0c          	bt     ecx,0xc
c0019d85:	72 f6                	jb     c0019d7d <Krnl::startCPU(int)+0xbe>
c0019d87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d91:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d97:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d9d:	09 c1                	or     ecx,eax
c0019d9f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019da5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dab:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019db1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019db7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dbd:	f3 90                	pause  
c0019dbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dc1:	0f ba e1 0c          	bt     ecx,0xc
c0019dc5:	72 f6                	jb     c0019dbd <Krnl::startCPU(int)+0xfe>
c0019dc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019dd1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dd7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ddd:	09 c8                	or     eax,ecx
c0019ddf:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019de5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019deb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019df0:	0d 02 06 00 00       	or     eax,0x602
c0019df5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019dfb:	f3 90                	pause  
c0019dfd:	8b 02                	mov    eax,DWORD PTR [edx]
c0019dff:	0f ba e0 0c          	bt     eax,0xc
c0019e03:	72 f6                	jb     c0019dfb <Krnl::startCPU(int)+0x13c>
c0019e05:	eb fe                	jmp    c0019e05 <Krnl::startCPU(int)+0x146>
c0019e07:	c3                   	ret    

c0019e08 <Krnl::startCPUs()>:
c0019e08:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019e0d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e13:	88 c2                	mov    dl,al
c0019e15:	83 e2 0a             	and    edx,0xa
c0019e18:	80 fa 0a             	cmp    dl,0xa
c0019e1b:	75 09                	jne    c0019e26 <Krnl::startCPUs()+0x1e>
c0019e1d:	a8 01                	test   al,0x1
c0019e1f:	74 05                	je     c0019e26 <Krnl::startCPUs()+0x1e>
c0019e21:	e9 75 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e26:	c3                   	ret    
c0019e27:	90                   	nop

c0019e28 <EnvVarContainer::getEnv(char const*)>:
c0019e28:	57                   	push   edi
c0019e29:	56                   	push   esi
c0019e2a:	53                   	push   ebx
c0019e2b:	31 db                	xor    ebx,ebx
c0019e2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e31:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e33:	7e 2b                	jle    c0019e60 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e35:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e3c:	50                   	push   eax
c0019e3d:	50                   	push   eax
c0019e3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e41:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e48:	e8 4b 6a fe ff       	call   c0000898 <strcmp>
c0019e4d:	83 c4 10             	add    esp,0x10
c0019e50:	85 c0                	test   eax,eax
c0019e52:	75 09                	jne    c0019e5d <EnvVarContainer::getEnv(char const*)+0x35>
c0019e54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e57:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e5b:	eb 05                	jmp    c0019e62 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e5d:	43                   	inc    ebx
c0019e5e:	eb d1                	jmp    c0019e31 <EnvVarContainer::getEnv(char const*)+0x9>
c0019e60:	31 c0                	xor    eax,eax
c0019e62:	5b                   	pop    ebx
c0019e63:	5e                   	pop    esi
c0019e64:	5f                   	pop    edi
c0019e65:	c3                   	ret    

c0019e66 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e66:	55                   	push   ebp
c0019e67:	57                   	push   edi
c0019e68:	56                   	push   esi
c0019e69:	53                   	push   ebx
c0019e6a:	83 ec 28             	sub    esp,0x28
c0019e6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e71:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e79:	56                   	push   esi
c0019e7a:	e8 ed 68 fe ff       	call   c000076c <strlen>
c0019e7f:	40                   	inc    eax
c0019e80:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e83:	e8 2b 5b ff ff       	call   c000f9b3 <malloc>
c0019e88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e8f:	e8 d8 68 fe ff       	call   c000076c <strlen>
c0019e94:	40                   	inc    eax
c0019e95:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e98:	e8 16 5b ff ff       	call   c000f9b3 <malloc>
c0019e9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ea0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ea4:	e8 c3 68 fe ff       	call   c000076c <strlen>
c0019ea9:	83 c4 0c             	add    esp,0xc
c0019eac:	40                   	inc    eax
c0019ead:	50                   	push   eax
c0019eae:	6a 00                	push   0x0
c0019eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019eb4:	e8 97 68 fe ff       	call   c0000750 <memset>
c0019eb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ebc:	e8 ab 68 fe ff       	call   c000076c <strlen>
c0019ec1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019ec5:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ec8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019eca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ecd:	89 de                	mov    esi,ebx
c0019ecf:	e8 98 68 fe ff       	call   c000076c <strlen>
c0019ed4:	83 c4 0c             	add    esp,0xc
c0019ed7:	40                   	inc    eax
c0019ed8:	50                   	push   eax
c0019ed9:	6a 00                	push   0x0
c0019edb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019edf:	e8 6c 68 fe ff       	call   c0000750 <memset>
c0019ee4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ee7:	e8 80 68 fe ff       	call   c000076c <strlen>
c0019eec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ef0:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ef3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ef8:	40                   	inc    eax
c0019ef9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019efc:	c1 e0 03             	shl    eax,0x3
c0019eff:	5a                   	pop    edx
c0019f00:	59                   	pop    ecx
c0019f01:	50                   	push   eax
c0019f02:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f05:	e8 95 5a ff ff       	call   c000f99f <realloc>
c0019f0a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f0e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f11:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f14:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f18:	b9 08 00 00 00       	mov    ecx,0x8
c0019f1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f1f:	83 c4 2c             	add    esp,0x2c
c0019f22:	5b                   	pop    ebx
c0019f23:	5e                   	pop    esi
c0019f24:	5f                   	pop    edi
c0019f25:	5d                   	pop    ebp
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <EnvVarContainer::deleteEnv(char const*)>:
c0019f28:	c3                   	ret    
c0019f29:	90                   	nop

c0019f2a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f2a:	55                   	push   ebp
c0019f2b:	57                   	push   edi
c0019f2c:	56                   	push   esi
c0019f2d:	53                   	push   ebx
c0019f2e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f34:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019f3b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019f42:	68 14 01 00 00       	push   0x114
c0019f47:	e8 67 5a ff ff       	call   c000f9b3 <malloc>
c0019f4c:	83 c4 0c             	add    esp,0xc
c0019f4f:	89 c3                	mov    ebx,eax
c0019f51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019f54:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f5b:	50                   	push   eax
c0019f5c:	e8 09 90 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c0019f61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f64:	e8 d3 92 ff ff       	call   c001323c <File::exists()>
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	84 c0                	test   al,al
c0019f6e:	75 31                	jne    c0019fa1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019f70:	50                   	push   eax
c0019f71:	50                   	push   eax
c0019f72:	6a 12                	push   0x12
c0019f74:	53                   	push   ebx
c0019f75:	e8 54 90 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c0019f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f7c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f7f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f82:	e8 e5 67 fe ff       	call   c000076c <strlen>
c0019f87:	5a                   	pop    edx
c0019f88:	31 d2                	xor    edx,edx
c0019f8a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f8e:	51                   	push   ecx
c0019f8f:	56                   	push   esi
c0019f90:	52                   	push   edx
c0019f91:	50                   	push   eax
c0019f92:	53                   	push   ebx
c0019f93:	ff d7                	call   edi
c0019f95:	83 c4 14             	add    esp,0x14
c0019f98:	53                   	push   ebx
c0019f99:	e8 8e 90 ff ff       	call   c001302c <File::close()>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	56                   	push   esi
c0019fa2:	31 f6                	xor    esi,esi
c0019fa4:	68 00 01 00 00       	push   0x100
c0019fa9:	6a 00                	push   0x0
c0019fab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019faf:	50                   	push   eax
c0019fb0:	e8 9b 67 fe ff       	call   c0000750 <memset>
c0019fb5:	5f                   	pop    edi
c0019fb6:	58                   	pop    eax
c0019fb7:	6a 01                	push   0x1
c0019fb9:	53                   	push   ebx
c0019fba:	e8 0f 90 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019fca:	83 ec 0c             	sub    esp,0xc
c0019fcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fcf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019fd3:	51                   	push   ecx
c0019fd4:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019fd8:	52                   	push   edx
c0019fd9:	6a 00                	push   0x0
c0019fdb:	6a 01                	push   0x1
c0019fdd:	53                   	push   ebx
c0019fde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019fe1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019fe5:	83 c4 20             	add    esp,0x20
c0019fe8:	3c 0d                	cmp    al,0xd
c0019fea:	0f 84 09 01 00 00    	je     c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ff0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019ff5:	0f 84 ef 00 00 00    	je     c001a0ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019ffb:	3c 0a                	cmp    al,0xa
c0019ffd:	74 13                	je     c001a012 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019fff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a004:	74 0c                	je     c001a012 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001a006:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a00c:	0f 8e d8 00 00 00    	jle    c001a0ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001a012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	8d 78 01             	lea    edi,[eax+0x1]
c001a01c:	57                   	push   edi
c001a01d:	e8 91 59 ff ff       	call   c000f9b3 <malloc>
c001a022:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a026:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a02a:	8d 56 04             	lea    edx,[esi+0x4]
c001a02d:	89 14 24             	mov    DWORD PTR [esp],edx
c001a030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a034:	e8 7a 59 ff ff       	call   c000f9b3 <malloc>
c001a039:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a03d:	83 c4 0c             	add    esp,0xc
c001a040:	57                   	push   edi
c001a041:	6a 00                	push   0x0
c001a043:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a047:	e8 04 67 fe ff       	call   c0000750 <memset>
c001a04c:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a050:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a054:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a058:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a05a:	83 c4 0c             	add    esp,0xc
c001a05d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a061:	52                   	push   edx
c001a062:	6a 00                	push   0x0
c001a064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a068:	e8 e3 66 fe ff       	call   c0000750 <memset>
c001a06d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a071:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a075:	89 34 24             	mov    DWORD PTR [esp],esi
c001a078:	e8 ef 66 fe ff       	call   c000076c <strlen>
c001a07d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a081:	89 c1                	mov    ecx,eax
c001a083:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a085:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a088:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001a08b:	40                   	inc    eax
c001a08c:	83 c4 10             	add    esp,0x10
c001a08f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a092:	85 d2                	test   edx,edx
c001a094:	75 0c                	jne    c001a0a2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001a096:	83 ec 0c             	sub    esp,0xc
c001a099:	6a 08                	push   0x8
c001a09b:	e8 13 59 ff ff       	call   c000f9b3 <malloc>
c001a0a0:	eb 0c                	jmp    c001a0ae <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001a0a2:	c1 e0 03             	shl    eax,0x3
c001a0a5:	51                   	push   ecx
c001a0a6:	51                   	push   ecx
c001a0a7:	50                   	push   eax
c001a0a8:	52                   	push   edx
c001a0a9:	e8 f1 58 ff ff       	call   c000f99f <realloc>
c001a0ae:	83 c4 10             	add    esp,0x10
c001a0b1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a0b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a0b7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001a0ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a0be:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a0c2:	b9 08 00 00 00       	mov    ecx,0x8
c001a0c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0c9:	31 f6                	xor    esi,esi
c001a0cb:	50                   	push   eax
c001a0cc:	68 00 01 00 00       	push   0x100
c001a0d1:	6a 00                	push   0x0
c001a0d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0d7:	50                   	push   eax
c001a0d8:	e8 73 66 fe ff       	call   c0000750 <memset>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0e8:	eb 0f                	jmp    c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0ea:	3c 3d                	cmp    al,0x3d
c001a0ec:	74 07                	je     c001a0f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001a0ee:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a0f2:	46                   	inc    esi
c001a0f3:	eb 04                	jmp    c001a0f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a0f5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0fe:	0f 85 c6 fe ff ff    	jne    c0019fca <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001a104:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a10a:	5b                   	pop    ebx
c001a10b:	5e                   	pop    esi
c001a10c:	5f                   	pop    edi
c001a10d:	5d                   	pop    ebp
c001a10e:	c3                   	ret    
c001a10f:	90                   	nop

c001a110 <EnvVarContainer::__loadSystem()>:
c001a110:	83 ec 10             	sub    esp,0x10
c001a113:	68 a0 db 02 c0       	push   0xc002dba0
c001a118:	68 2d c2 02 c0       	push   0xc002c22d
c001a11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a121:	e8 04 fe ff ff       	call   c0019f2a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a126:	83 c4 1c             	add    esp,0x1c
c001a129:	c3                   	ret    

c001a12a <EnvVarContainer::__loadUser()>:
c001a12a:	c3                   	ret    
c001a12b:	90                   	nop

c001a12c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a13a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a13e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a145:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a14c:	90                   	nop
c001a14d:	c3                   	ret    

c001a14e <EnvVarContainer::~EnvVarContainer()>:
c001a14e:	83 ec 0c             	sub    esp,0xc
c001a151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a155:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a158:	85 c0                	test   eax,eax
c001a15a:	74 1d                	je     c001a179 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a160:	8b 00                	mov    eax,DWORD PTR [eax]
c001a162:	85 c0                	test   eax,eax
c001a164:	74 13                	je     c001a179 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a16a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a16d:	83 ec 0c             	sub    esp,0xc
c001a170:	50                   	push   eax
c001a171:	e8 4d 58 ff ff       	call   c000f9c3 <free>
c001a176:	83 c4 10             	add    esp,0x10
c001a179:	90                   	nop
c001a17a:	83 c4 0c             	add    esp,0xc
c001a17d:	c3                   	ret    

c001a17e <Krnl::getEnv(Process*, char const*)>:
c001a17e:	53                   	push   ebx
c001a17f:	83 ec 08             	sub    esp,0x8
c001a182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a186:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a18a:	39 05 90 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb90,eax
c001a190:	74 04                	je     c001a196 <Krnl::getEnv(Process*, char const*)+0x18>
c001a192:	85 c0                	test   eax,eax
c001a194:	75 0b                	jne    c001a1a1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a196:	a1 74 f1 02 c0       	mov    eax,ds:0xc002f174
c001a19b:	85 c0                	test   eax,eax
c001a19d:	75 19                	jne    c001a1b8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a19f:	eb 27                	jmp    c001a1c8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a1a1:	52                   	push   edx
c001a1a2:	52                   	push   edx
c001a1a3:	53                   	push   ebx
c001a1a4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a1aa:	e8 79 fc ff ff       	call   c0019e28 <EnvVarContainer::getEnv(char const*)>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	85 c0                	test   eax,eax
c001a1b4:	75 28                	jne    c001a1de <Krnl::getEnv(Process*, char const*)+0x60>
c001a1b6:	eb de                	jmp    c001a196 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1b8:	52                   	push   edx
c001a1b9:	52                   	push   edx
c001a1ba:	53                   	push   ebx
c001a1bb:	50                   	push   eax
c001a1bc:	e8 67 fc ff ff       	call   c0019e28 <EnvVarContainer::getEnv(char const*)>
c001a1c1:	83 c4 10             	add    esp,0x10
c001a1c4:	85 c0                	test   eax,eax
c001a1c6:	75 16                	jne    c001a1de <Krnl::getEnv(Process*, char const*)+0x60>
c001a1c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1cc:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c001a1d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1d5:	83 c4 08             	add    esp,0x8
c001a1d8:	5b                   	pop    ebx
c001a1d9:	e9 4a fc ff ff       	jmp    c0019e28 <EnvVarContainer::getEnv(char const*)>
c001a1de:	83 c4 08             	add    esp,0x8
c001a1e1:	5b                   	pop    ebx
c001a1e2:	c3                   	ret    

c001a1e3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a1e3:	83 ec 10             	sub    esp,0x10
c001a1e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1ee:	ff 35 78 f1 02 c0    	push   DWORD PTR ds:0xc002f178
c001a1f4:	e8 6d fc ff ff       	call   c0019e66 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1f9:	83 c4 1c             	add    esp,0x1c
c001a1fc:	c3                   	ret    

c001a1fd <Krnl::setEnvUser(char const*, char const*)>:
c001a1fd:	a1 74 f1 02 c0       	mov    eax,ds:0xc002f174
c001a202:	85 c0                	test   eax,eax
c001a204:	74 15                	je     c001a21b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a206:	83 ec 10             	sub    esp,0x10
c001a209:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a20d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a211:	50                   	push   eax
c001a212:	e8 4f fc ff ff       	call   c0019e66 <EnvVarContainer::setEnv(char const*, char const*)>
c001a217:	83 c4 1c             	add    esp,0x1c
c001a21a:	c3                   	ret    
c001a21b:	c3                   	ret    

c001a21c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a220:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a22a:	e9 37 fc ff ff       	jmp    c0019e66 <EnvVarContainer::setEnv(char const*, char const*)>

c001a22f <Krnl::deleteEnvSystem(char const*)>:
c001a22f:	c3                   	ret    

c001a230 <Krnl::deleteEnvUser(char const*)>:
c001a230:	c3                   	ret    

c001a231 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a231:	c3                   	ret    

c001a232 <Krnl::newProcessEnv(Process*)>:
c001a232:	83 ec 28             	sub    esp,0x28
c001a235:	6a 0c                	push   0xc
c001a237:	e8 77 57 ff ff       	call   c000f9b3 <malloc>
c001a23c:	5a                   	pop    edx
c001a23d:	59                   	pop    ecx
c001a23e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a242:	50                   	push   eax
c001a243:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a247:	e8 e0 fe ff ff       	call   c001a12c <EnvVarContainer::EnvVarContainer(Process*)>
c001a24c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a250:	83 c4 2c             	add    esp,0x2c
c001a253:	c3                   	ret    

c001a254 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a254:	57                   	push   edi
c001a255:	56                   	push   esi
c001a256:	53                   	push   ebx
c001a257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a25b:	83 ec 0c             	sub    esp,0xc
c001a25e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a264:	6a 0c                	push   0xc
c001a266:	e8 48 57 ff ff       	call   c000f9b3 <malloc>
c001a26b:	89 c3                	mov    ebx,eax
c001a26d:	58                   	pop    eax
c001a26e:	5a                   	pop    edx
c001a26f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a273:	53                   	push   ebx
c001a274:	e8 b3 fe ff ff       	call   c001a12c <EnvVarContainer::EnvVarContainer(Process*)>
c001a279:	8b 07                	mov    eax,DWORD PTR [edi]
c001a27b:	89 03                	mov    DWORD PTR [ebx],eax
c001a27d:	c1 e0 03             	shl    eax,0x3
c001a280:	89 04 24             	mov    DWORD PTR [esp],eax
c001a283:	e8 2b 57 ff ff       	call   c000f9b3 <malloc>
c001a288:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a28b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a28d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a290:	c1 e1 03             	shl    ecx,0x3
c001a293:	89 c7                	mov    edi,eax
c001a295:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	89 d8                	mov    eax,ebx
c001a29c:	5b                   	pop    ebx
c001a29d:	5e                   	pop    esi
c001a29e:	5f                   	pop    edi
c001a29f:	c3                   	ret    

c001a2a0 <Krnl::loadSystemEnv()>:
c001a2a0:	53                   	push   ebx
c001a2a1:	83 ec 14             	sub    esp,0x14
c001a2a4:	6a 0c                	push   0xc
c001a2a6:	e8 08 57 ff ff       	call   c000f9b3 <malloc>
c001a2ab:	89 c3                	mov    ebx,eax
c001a2ad:	58                   	pop    eax
c001a2ae:	5a                   	pop    edx
c001a2af:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001a2b5:	53                   	push   ebx
c001a2b6:	e8 71 fe ff ff       	call   c001a12c <EnvVarContainer::EnvVarContainer(Process*)>
c001a2bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2be:	89 1d 78 f1 02 c0    	mov    DWORD PTR ds:0xc002f178,ebx
c001a2c4:	e8 47 fe ff ff       	call   c001a110 <EnvVarContainer::__loadSystem()>
c001a2c9:	83 c4 18             	add    esp,0x18
c001a2cc:	5b                   	pop    ebx
c001a2cd:	c3                   	ret    

c001a2ce <Krnl::loadUserEnv()>:
c001a2ce:	53                   	push   ebx
c001a2cf:	83 ec 14             	sub    esp,0x14
c001a2d2:	6a 0c                	push   0xc
c001a2d4:	e8 da 56 ff ff       	call   c000f9b3 <malloc>
c001a2d9:	89 c3                	mov    ebx,eax
c001a2db:	58                   	pop    eax
c001a2dc:	5a                   	pop    edx
c001a2dd:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001a2e3:	53                   	push   ebx
c001a2e4:	e8 43 fe ff ff       	call   c001a12c <EnvVarContainer::EnvVarContainer(Process*)>
c001a2e9:	89 1d 74 f1 02 c0    	mov    DWORD PTR ds:0xc002f174,ebx
c001a2ef:	83 c4 18             	add    esp,0x18
c001a2f2:	5b                   	pop    ebx
c001a2f3:	c3                   	ret    

c001a2f4 <Krnl::flushEnv()>:
c001a2f4:	c3                   	ret    

c001a2f5 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2f9:	8b 15 74 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f174
c001a2ff:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a305:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c001a30a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a30c:	03 01                	add    eax,DWORD PTR [ecx]
c001a30e:	85 d2                	test   edx,edx
c001a310:	74 02                	je     c001a314 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a312:	03 02                	add    eax,DWORD PTR [edx]
c001a314:	c3                   	ret    

c001a315 <Krnl::getProcessEnvPair(Process*, int)>:
c001a315:	57                   	push   edi
c001a316:	56                   	push   esi
c001a317:	8b 35 74 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f174
c001a31d:	53                   	push   ebx
c001a31e:	85 f6                	test   esi,esi
c001a320:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a328:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a32e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a332:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a334:	75 16                	jne    c001a34c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a336:	39 c2                	cmp    edx,eax
c001a338:	7c 16                	jl     c001a350 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a33a:	8b 0d 78 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f178
c001a340:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a342:	01 c6                	add    esi,eax
c001a344:	39 d6                	cmp    esi,edx
c001a346:	7e 3c                	jle    c001a384 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a348:	29 c2                	sub    edx,eax
c001a34a:	eb 04                	jmp    c001a350 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a34c:	39 c2                	cmp    edx,eax
c001a34e:	7d 05                	jge    c001a355 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a350:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a353:	eb 20                	jmp    c001a375 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a355:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a357:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a35a:	39 d1                	cmp    ecx,edx
c001a35c:	7e 04                	jle    c001a362 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a35e:	29 c2                	sub    edx,eax
c001a360:	eb 10                	jmp    c001a372 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a362:	8b 35 78 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f178
c001a368:	03 0e                	add    ecx,DWORD PTR [esi]
c001a36a:	39 d1                	cmp    ecx,edx
c001a36c:	7e 16                	jle    c001a384 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a36e:	29 c2                	sub    edx,eax
c001a370:	29 fa                	sub    edx,edi
c001a372:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a375:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a378:	8b 02                	mov    eax,DWORD PTR [edx]
c001a37a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a37d:	89 03                	mov    DWORD PTR [ebx],eax
c001a37f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a382:	eb 1d                	jmp    c001a3a1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	68 4f c2 02 c0       	push   0xc002c24f
c001a38c:	e8 18 00 00 00       	call   c001a3a9 <Krnl::panic(char const*)>
c001a391:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a397:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a39e:	83 c4 10             	add    esp,0x10
c001a3a1:	89 d8                	mov    eax,ebx
c001a3a3:	5b                   	pop    ebx
c001a3a4:	5e                   	pop    esi
c001a3a5:	5f                   	pop    edi
c001a3a6:	c2 04 00             	ret    0x4

c001a3a9 <Krnl::panic(char const*)>:
c001a3a9:	55                   	push   ebp
c001a3aa:	89 e5                	mov    ebp,esp
c001a3ac:	53                   	push   ebx
c001a3ad:	83 ec 10             	sub    esp,0x10
c001a3b0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a3b3:	fa                   	cli    
c001a3b4:	c6 05 84 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f184,0x1
c001a3bb:	53                   	push   ebx
c001a3bc:	e8 4c 56 ff ff       	call   c000fa0d <Krnl::setBootMessage(char const*)>
c001a3c1:	58                   	pop    eax
c001a3c2:	c6 05 a0 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d5a0,0x0
c001a3c9:	5a                   	pop    edx
c001a3ca:	53                   	push   ebx
c001a3cb:	68 69 c2 02 c0       	push   0xc002c269
c001a3d0:	e8 36 86 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001a3d5:	59                   	pop    ecx
c001a3d6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a3db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e1:	e8 87 63 ff ff       	call   c001076d <setActiveTerminal(VgaText*)>
c001a3e6:	83 c4 0c             	add    esp,0xc
c001a3e9:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a3ee:	6a 01                	push   0x1
c001a3f0:	6a 0f                	push   0xf
c001a3f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3f8:	e8 cf 61 ff ff       	call   c00105cc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3fd:	58                   	pop    eax
c001a3fe:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a403:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a409:	e8 e0 66 ff ff       	call   c0010aee <VgaText::clearScreen()>
c001a40e:	58                   	pop    eax
c001a40f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a414:	5a                   	pop    edx
c001a415:	68 82 c2 02 c0       	push   0xc002c282
c001a41a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a420:	e8 55 68 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a425:	59                   	pop    ecx
c001a426:	58                   	pop    eax
c001a427:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a42c:	68 28 c3 02 c0       	push   0xc002c328
c001a431:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a437:	e8 3e 68 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a43c:	58                   	pop    eax
c001a43d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a442:	5a                   	pop    edx
c001a443:	68 9e c2 02 c0       	push   0xc002c29e
c001a448:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a44e:	e8 27 68 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a453:	59                   	pop    ecx
c001a454:	58                   	pop    eax
c001a455:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a45a:	53                   	push   ebx
c001a45b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a461:	e8 14 68 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a466:	58                   	pop    eax
c001a467:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a46c:	5a                   	pop    edx
c001a46d:	68 be c2 02 c0       	push   0xc002c2be
c001a472:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a478:	e8 fd 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a47d:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c001a482:	83 c4 10             	add    esp,0x10
c001a485:	85 c0                	test   eax,eax
c001a487:	74 02                	je     c001a48b <Krnl::panic(char const*)+0xe2>
c001a489:	ff d0                	call   eax
c001a48b:	83 ec 0c             	sub    esp,0xc
c001a48e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a491:	e8 8f 30 00 00       	call   c001d525 <Thr::getDriverNameFromAddress(unsigned long)>
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	89 c3                	mov    ebx,eax
c001a49b:	85 c0                	test   eax,eax
c001a49d:	0f 84 4e 02 00 00    	je     c001a6f1 <Krnl::panic(char const*)+0x348>
c001a4a3:	83 ec 08             	sub    esp,0x8
c001a4a6:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4ab:	68 64 c3 02 c0       	push   0xc002c364
c001a4b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b6:	e8 bf 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a4bb:	58                   	pop    eax
c001a4bc:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4c1:	5a                   	pop    edx
c001a4c2:	68 9e c2 02 c0       	push   0xc002c29e
c001a4c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4cd:	e8 a8 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a4d2:	59                   	pop    ecx
c001a4d3:	58                   	pop    eax
c001a4d4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4d9:	53                   	push   ebx
c001a4da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e0:	e8 95 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a4e5:	83 c4 10             	add    esp,0x10
c001a4e8:	83 ec 08             	sub    esp,0x8
c001a4eb:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a4f0:	68 bd c2 02 c0       	push   0xc002c2bd
c001a4f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fb:	e8 7a 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a500:	58                   	pop    eax
c001a501:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a506:	5a                   	pop    edx
c001a507:	68 bc c3 02 c0       	push   0xc002c3bc
c001a50c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a512:	e8 63 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a517:	59                   	pop    ecx
c001a518:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a51d:	5b                   	pop    ebx
c001a51e:	68 fc c3 02 c0       	push   0xc002c3fc
c001a523:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a529:	e8 4c 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a52e:	58                   	pop    eax
c001a52f:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a534:	5a                   	pop    edx
c001a535:	68 a9 c2 02 c0       	push   0xc002c2a9
c001a53a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a540:	e8 35 67 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a545:	59                   	pop    ecx
c001a546:	5b                   	pop    ebx
c001a547:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a54a:	68 c1 c2 02 c0       	push   0xc002c2c1
c001a54f:	e8 b7 84 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001a554:	58                   	pop    eax
c001a555:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a558:	5a                   	pop    edx
c001a559:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a55c:	68 ca c2 02 c0       	push   0xc002c2ca
c001a561:	e8 a5 84 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001a566:	59                   	pop    ecx
c001a567:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a56a:	5b                   	pop    ebx
c001a56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a56d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a570:	68 d3 c2 02 c0       	push   0xc002c2d3
c001a575:	e8 91 84 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001a57a:	58                   	pop    eax
c001a57b:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a580:	5a                   	pop    edx
c001a581:	68 40 c4 02 c0       	push   0xc002c440
c001a586:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a58c:	e8 e9 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a591:	59                   	pop    ecx
c001a592:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a597:	5b                   	pop    ebx
c001a598:	68 dc c2 02 c0       	push   0xc002c2dc
c001a59d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a3:	e8 d2 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a5a8:	0f 20 c0             	mov    eax,cr0
c001a5ab:	5a                   	pop    edx
c001a5ac:	59                   	pop    ecx
c001a5ad:	50                   	push   eax
c001a5ae:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b9:	e8 76 66 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a5be:	5b                   	pop    ebx
c001a5bf:	58                   	pop    eax
c001a5c0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5c5:	68 e6 c2 02 c0       	push   0xc002c2e6
c001a5ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d0:	e8 a5 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a5d5:	0f 20 d0             	mov    eax,cr2
c001a5d8:	5a                   	pop    edx
c001a5d9:	59                   	pop    ecx
c001a5da:	50                   	push   eax
c001a5db:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e6:	e8 49 66 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a5eb:	5b                   	pop    ebx
c001a5ec:	58                   	pop    eax
c001a5ed:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a5f2:	68 f0 c2 02 c0       	push   0xc002c2f0
c001a5f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5fd:	e8 78 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a602:	0f 20 d8             	mov    eax,cr3
c001a605:	5a                   	pop    edx
c001a606:	59                   	pop    ecx
c001a607:	50                   	push   eax
c001a608:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a60d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a613:	e8 1c 66 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a618:	5b                   	pop    ebx
c001a619:	58                   	pop    eax
c001a61a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a61f:	68 03 c3 02 c0       	push   0xc002c303
c001a624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62a:	e8 4b 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a62f:	0f 20 e0             	mov    eax,cr4
c001a632:	5a                   	pop    edx
c001a633:	59                   	pop    ecx
c001a634:	50                   	push   eax
c001a635:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a63a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a640:	e8 ef 65 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a645:	5b                   	pop    ebx
c001a646:	58                   	pop    eax
c001a647:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a64c:	68 0d c3 02 c0       	push   0xc002c30d
c001a651:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a657:	e8 1e 66 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a65c:	5a                   	pop    edx
c001a65d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a662:	59                   	pop    ecx
c001a663:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a66c:	50                   	push   eax
c001a66d:	e8 c2 65 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a672:	5b                   	pop    ebx
c001a673:	58                   	pop    eax
c001a674:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a679:	68 24 c3 02 c0       	push   0xc002c324
c001a67e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a684:	e8 f1 65 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a689:	5a                   	pop    edx
c001a68a:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a68f:	59                   	pop    ecx
c001a690:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a696:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a699:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a69c:	50                   	push   eax
c001a69d:	e8 92 65 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a6a2:	5b                   	pop    ebx
c001a6a3:	58                   	pop    eax
c001a6a4:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a6a9:	68 24 c3 02 c0       	push   0xc002c324
c001a6ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b4:	e8 c1 65 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a6b9:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a6be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6c7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6c9:	59                   	pop    ecx
c001a6ca:	5b                   	pop    ebx
c001a6cb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6ce:	50                   	push   eax
c001a6cf:	e8 60 65 ff ff       	call   c0010c34 <VgaText::putx(unsigned int)>
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	b2 fe                	mov    dl,0xfe
c001a6d9:	e4 60                	in     al,0x60
c001a6db:	3c 1c                	cmp    al,0x1c
c001a6dd:	74 04                	je     c001a6e3 <Krnl::panic(char const*)+0x33a>
c001a6df:	3c 5a                	cmp    al,0x5a
c001a6e1:	75 f6                	jne    c001a6d9 <Krnl::panic(char const*)+0x330>
c001a6e3:	e4 64                	in     al,0x64
c001a6e5:	a8 02                	test   al,0x2
c001a6e7:	75 fa                	jne    c001a6e3 <Krnl::panic(char const*)+0x33a>
c001a6e9:	88 d0                	mov    al,dl
c001a6eb:	e6 64                	out    0x64,al
c001a6ed:	fa                   	cli    
c001a6ee:	f4                   	hlt    
c001a6ef:	eb e8                	jmp    c001a6d9 <Krnl::panic(char const*)+0x330>
c001a6f1:	50                   	push   eax
c001a6f2:	50                   	push   eax
c001a6f3:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a6f8:	68 90 c3 02 c0       	push   0xc002c390
c001a6fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a703:	e8 72 65 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a708:	58                   	pop    eax
c001a709:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a70e:	5a                   	pop    edx
c001a70f:	68 9e c2 02 c0       	push   0xc002c29e
c001a714:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71a:	e8 5b 65 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a71f:	59                   	pop    ecx
c001a720:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a725:	5b                   	pop    ebx
c001a726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a729:	83 c0 0c             	add    eax,0xc
c001a72c:	50                   	push   eax
c001a72d:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001a732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a738:	e8 3d 65 ff ff       	call   c0010c7a <VgaText::puts(char const*)>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	e9 a3 fd ff ff       	jmp    c001a4e8 <Krnl::panic(char const*)+0x13f>

c001a745 <Net::switchEndian16(unsigned short)>:
c001a745:	83 ec 04             	sub    esp,0x4
c001a748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a74c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a750:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a754:	c1 f8 08             	sar    eax,0x8
c001a757:	89 c2                	mov    edx,eax
c001a759:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a75d:	c1 e0 08             	shl    eax,0x8
c001a760:	09 d0                	or     eax,edx
c001a762:	83 c4 04             	add    esp,0x4
c001a765:	c3                   	ret    

c001a766 <Net::switchEndian32(unsigned int)>:
c001a766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a76a:	c1 e8 18             	shr    eax,0x18
c001a76d:	89 c2                	mov    edx,eax
c001a76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a773:	c1 e0 08             	shl    eax,0x8
c001a776:	25 00 00 ff 00       	and    eax,0xff0000
c001a77b:	09 c2                	or     edx,eax
c001a77d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a781:	c1 e8 08             	shr    eax,0x8
c001a784:	25 00 ff 00 00       	and    eax,0xff00
c001a789:	09 c2                	or     edx,eax
c001a78b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78f:	c1 e0 18             	shl    eax,0x18
c001a792:	09 d0                	or     eax,edx
c001a794:	c3                   	ret    

c001a795 <Net::crc32Calc(unsigned char*, int)>:
c001a795:	83 ec 10             	sub    esp,0x10
c001a798:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a79d:	75 07                	jne    c001a7a6 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a79f:	b8 00 00 00 00       	mov    eax,0x0
c001a7a4:	eb 7c                	jmp    c001a822 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7a6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a7ab:	7f 07                	jg     c001a7b4 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a7ad:	b8 00 00 00 00       	mov    eax,0x0
c001a7b2:	eb 6e                	jmp    c001a822 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7b4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a7bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7c8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a7cc:	7d 4e                	jge    c001a81c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a7ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7d6:	01 d0                	add    eax,edx
c001a7d8:	8a 00                	mov    al,BYTE PTR [eax]
c001a7da:	0f b6 c0             	movzx  eax,al
c001a7dd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a7e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7e9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a7ee:	7f 26                	jg     c001a816 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7f4:	83 e0 01             	and    eax,0x1
c001a7f7:	74 0d                	je     c001a806 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7fd:	d1 e8                	shr    eax,1
c001a7ff:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a804:	eb 06                	jmp    c001a80c <Net::crc32Calc(unsigned char*, int)+0x77>
c001a806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a80a:	d1 e8                	shr    eax,1
c001a80c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a810:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a814:	eb d3                	jmp    c001a7e9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a816:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a81a:	eb a8                	jmp    c001a7c4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a820:	f7 d0                	not    eax
c001a822:	83 c4 10             	add    esp,0x10
c001a825:	c3                   	ret    

c001a826 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a826:	57                   	push   edi
c001a827:	56                   	push   esi
c001a828:	53                   	push   ebx
c001a829:	83 ec 60             	sub    esp,0x60
c001a82c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a833:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a837:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a83f:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a844:	7f 1a                	jg     c001a860 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a846:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a84d:	8d 50 01             	lea    edx,[eax+0x1]
c001a850:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a857:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a85a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a85e:	eb df                	jmp    c001a83f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a860:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a867:	8d 50 01             	lea    edx,[eax+0x1]
c001a86a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a871:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a874:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a87b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a87f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a883:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a887:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a88f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a89b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a89f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8a3:	89 c6                	mov    esi,eax
c001a8a5:	89 d7                	mov    edi,edx
c001a8a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8a9:	89 c8                	mov    eax,ecx
c001a8ab:	89 fa                	mov    edx,edi
c001a8ad:	89 f3                	mov    ebx,esi
c001a8af:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8ba:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8cd:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a8d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8d5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8ed:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8f1:	89 c6                	mov    esi,eax
c001a8f3:	89 d7                	mov    edi,edx
c001a8f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8f7:	89 c8                	mov    eax,ecx
c001a8f9:	89 fa                	mov    edx,edi
c001a8fb:	89 f3                	mov    ebx,esi
c001a8fd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a901:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a909:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a911:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a918:	0f b7 c0             	movzx  eax,ax
c001a91b:	c1 f8 08             	sar    eax,0x8
c001a91e:	89 c1                	mov    ecx,eax
c001a920:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a927:	8d 50 01             	lea    edx,[eax+0x1]
c001a92a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a931:	88 ca                	mov    dl,cl
c001a933:	88 10                	mov    BYTE PTR [eax],dl
c001a935:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a93c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a943:	8d 48 01             	lea    ecx,[eax+0x1]
c001a946:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a94d:	88 10                	mov    BYTE PTR [eax],dl
c001a94f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a953:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a957:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a95e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a962:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a966:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a96a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a96e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a972:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a976:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a97a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a97e:	89 c6                	mov    esi,eax
c001a980:	89 d7                	mov    edi,edx
c001a982:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a984:	89 c8                	mov    eax,ecx
c001a986:	89 fa                	mov    edx,edi
c001a988:	89 f3                	mov    ebx,esi
c001a98a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a98e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a992:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a996:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a99a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a9a1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9a8:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a9ac:	50                   	push   eax
c001a9ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9b1:	e8 df fd ff ff       	call   c001a795 <Net::crc32Calc(unsigned char*, int)>
c001a9b6:	83 c4 08             	add    esp,0x8
c001a9b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9c1:	c1 e8 18             	shr    eax,0x18
c001a9c4:	89 c1                	mov    ecx,eax
c001a9c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9cd:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9d7:	88 ca                	mov    dl,cl
c001a9d9:	88 10                	mov    BYTE PTR [eax],dl
c001a9db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9df:	c1 e8 10             	shr    eax,0x10
c001a9e2:	89 c1                	mov    ecx,eax
c001a9e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9eb:	8d 50 01             	lea    edx,[eax+0x1]
c001a9ee:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9f5:	88 ca                	mov    dl,cl
c001a9f7:	88 10                	mov    BYTE PTR [eax],dl
c001a9f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9fd:	c1 e8 08             	shr    eax,0x8
c001aa00:	89 c1                	mov    ecx,eax
c001aa02:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa09:	8d 50 01             	lea    edx,[eax+0x1]
c001aa0c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa13:	88 ca                	mov    dl,cl
c001aa15:	88 10                	mov    BYTE PTR [eax],dl
c001aa17:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa1e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa21:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa28:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa2c:	88 10                	mov    BYTE PTR [eax],dl
c001aa2e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa32:	83 c4 60             	add    esp,0x60
c001aa35:	5b                   	pop    ebx
c001aa36:	5e                   	pop    esi
c001aa37:	5f                   	pop    edi
c001aa38:	c3                   	ret    

c001aa39 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa39:	57                   	push   edi
c001aa3a:	56                   	push   esi
c001aa3b:	53                   	push   ebx
c001aa3c:	83 ec 70             	sub    esp,0x70
c001aa3f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa46:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa4a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa59:	83 c0 0e             	add    eax,0xe
c001aa5c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa6b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa83:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa87:	89 c6                	mov    esi,eax
c001aa89:	89 d7                	mov    edi,edx
c001aa8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa8d:	89 c8                	mov    eax,ecx
c001aa8f:	89 fa                	mov    edx,edi
c001aa91:	89 f3                	mov    ebx,esi
c001aa93:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa97:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa9f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aaa7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaae:	83 c0 08             	add    eax,0x8
c001aab1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aab5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aabc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aac0:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aac8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aacc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aad0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aad4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aadc:	89 c6                	mov    esi,eax
c001aade:	89 d7                	mov    edi,edx
c001aae0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aae2:	89 c8                	mov    eax,ecx
c001aae4:	89 fa                	mov    edx,edi
c001aae6:	89 f3                	mov    ebx,esi
c001aae8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aaec:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aaf0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aaf4:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aafc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab03:	8d 50 01             	lea    edx,[eax+0x1]
c001ab06:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab0d:	8a 00                	mov    al,BYTE PTR [eax]
c001ab0f:	0f b6 c0             	movzx  eax,al
c001ab12:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab21:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab28:	8a 00                	mov    al,BYTE PTR [eax]
c001ab2a:	0f b6 c0             	movzx  eax,al
c001ab2d:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab32:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab37:	c1 e0 08             	shl    eax,0x8
c001ab3a:	89 c2                	mov    edx,eax
c001ab3c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab40:	09 d0                	or     eax,edx
c001ab42:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab49:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab4d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab55:	75 46                	jne    c001ab9d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab57:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab5e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab61:	66 3d dc 05          	cmp    ax,0x5dc
c001ab65:	77 16                	ja     c001ab7d <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab67:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab6e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab71:	0f b7 c0             	movzx  eax,ax
c001ab74:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab7b:	eb 20                	jmp    c001ab9d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab7d:	83 ec 0c             	sub    esp,0xc
c001ab80:	68 68 c4 02 c0       	push   0xc002c468
c001ab85:	e8 81 7e ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab94:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab98:	e9 17 01 00 00       	jmp    c001acb4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab9d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aba4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001abab:	8b 12                	mov    edx,DWORD PTR [edx]
c001abad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001abb1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001abb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001abbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abcc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abd4:	89 c6                	mov    esi,eax
c001abd6:	89 d7                	mov    edi,edx
c001abd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abda:	89 c8                	mov    eax,ecx
c001abdc:	89 fa                	mov    edx,edi
c001abde:	89 f3                	mov    ebx,esi
c001abe0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abe8:	89 04 24             	mov    DWORD PTR [esp],eax
c001abeb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abf2:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001abf9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac00:	8d 50 01             	lea    edx,[eax+0x1]
c001ac03:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac0a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac0c:	0f b6 c0             	movzx  eax,al
c001ac0f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac13:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac1a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac1d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac24:	8a 00                	mov    al,BYTE PTR [eax]
c001ac26:	0f b6 c0             	movzx  eax,al
c001ac29:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac2d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac34:	8d 50 01             	lea    edx,[eax+0x1]
c001ac37:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac3e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac40:	0f b6 c0             	movzx  eax,al
c001ac43:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac47:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac51:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac58:	8a 00                	mov    al,BYTE PTR [eax]
c001ac5a:	0f b6 c0             	movzx  eax,al
c001ac5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac65:	c1 e0 18             	shl    eax,0x18
c001ac68:	89 c2                	mov    edx,eax
c001ac6a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac6e:	c1 e0 10             	shl    eax,0x10
c001ac71:	09 c2                	or     edx,eax
c001ac73:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac77:	c1 e0 08             	shl    eax,0x8
c001ac7a:	09 d0                	or     eax,edx
c001ac7c:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac8b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac8f:	83 e8 04             	sub    eax,0x4
c001ac92:	83 ec 08             	sub    esp,0x8
c001ac95:	50                   	push   eax
c001ac96:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac9a:	e8 f6 fa ff ff       	call   c001a795 <Net::crc32Calc(unsigned char*, int)>
c001ac9f:	83 c4 10             	add    esp,0x10
c001aca2:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001aca6:	0f 94 c2             	sete   dl
c001aca9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acb0:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acb3:	90                   	nop
c001acb4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acbb:	83 c4 70             	add    esp,0x70
c001acbe:	5b                   	pop    ebx
c001acbf:	5e                   	pop    esi
c001acc0:	5f                   	pop    edi
c001acc1:	c2 04 00             	ret    0x4

c001acc4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acc4:	55                   	push   ebp
c001acc5:	57                   	push   edi
c001acc6:	56                   	push   esi
c001acc7:	53                   	push   ebx
c001acc8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acce:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acd5:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acd7:	8d 6e 01             	lea    ebp,[esi+0x1]
c001acda:	80 fb 40             	cmp    bl,0x40
c001acdd:	75 1b                	jne    c001acfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acdf:	8a 16                	mov    dl,BYTE PTR [esi]
c001ace1:	84 d2                	test   dl,dl
c001ace3:	0f 84 f1 00 00 00    	je     c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ace9:	8d 46 01             	lea    eax,[esi+0x1]
c001acec:	80 fa 3a             	cmp    dl,0x3a
c001acef:	74 04                	je     c001acf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001acf1:	89 c6                	mov    esi,eax
c001acf3:	eb ea                	jmp    c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acf5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acf8:	89 c6                	mov    esi,eax
c001acfa:	50                   	push   eax
c001acfb:	6a 40                	push   0x40
c001acfd:	6a 00                	push   0x0
c001acff:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad03:	50                   	push   eax
c001ad04:	e8 47 5a fe ff       	call   c0000750 <memset>
c001ad09:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad10:	31 c0                	xor    eax,eax
c001ad12:	83 c4 10             	add    esp,0x10
c001ad15:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad17:	84 c9                	test   cl,cl
c001ad19:	0f 84 bb 00 00 00    	je     c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1f:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad24:	0f 8f b0 00 00 00    	jg     c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad2a:	80 f9 0a             	cmp    cl,0xa
c001ad2d:	0f 85 98 00 00 00    	jne    c001adcb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad33:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad38:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad3c:	a8 df                	test   al,0xdf
c001ad3e:	0f 94 c1             	sete   cl
c001ad41:	3c 23                	cmp    al,0x23
c001ad43:	0f 94 c2             	sete   dl
c001ad46:	08 d1                	or     cl,dl
c001ad48:	75 4a                	jne    c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4a:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad4d:	80 fa 01             	cmp    dl,0x1
c001ad50:	76 42                	jbe    c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad52:	3c 5b                	cmp    al,0x5b
c001ad54:	75 42                	jne    c001ad98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad56:	80 fb 40             	cmp    bl,0x40
c001ad59:	75 39                	jne    c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad62:	52                   	push   edx
c001ad63:	e8 04 5a fe ff       	call   c000076c <strlen>
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	83 f8 3f             	cmp    eax,0x3f
c001ad6e:	77 6a                	ja     c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad70:	50                   	push   eax
c001ad71:	50                   	push   eax
c001ad72:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad76:	52                   	push   edx
c001ad77:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad7b:	52                   	push   edx
c001ad7c:	e8 8b 5a fe ff       	call   c000080c <strcpy>
c001ad81:	58                   	pop    eax
c001ad82:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad86:	52                   	push   edx
c001ad87:	e8 e0 59 fe ff       	call   c000076c <strlen>
c001ad8c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad91:	83 c4 10             	add    esp,0x10
c001ad94:	31 d2                	xor    edx,edx
c001ad96:	eb 3a                	jmp    c001add2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad98:	80 fb 40             	cmp    bl,0x40
c001ad9b:	74 06                	je     c001ada3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad9d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ada1:	eb 20                	jmp    c001adc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ada3:	50                   	push   eax
c001ada4:	50                   	push   eax
c001ada5:	55                   	push   ebp
c001ada6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adaa:	50                   	push   eax
c001adab:	e8 e8 5a fe ff       	call   c0000898 <strcmp>
c001adb0:	83 c4 10             	add    esp,0x10
c001adb3:	85 c0                	test   eax,eax
c001adb5:	75 dd                	jne    c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb7:	eb e4                	jmp    c001ad9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adb9:	8d 50 01             	lea    edx,[eax+0x1]
c001adbc:	80 f9 3d             	cmp    cl,0x3d
c001adbf:	74 1d                	je     c001adde <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adc1:	89 d0                	mov    eax,edx
c001adc3:	8a 08                	mov    cl,BYTE PTR [eax]
c001adc5:	84 c9                	test   cl,cl
c001adc7:	75 f0                	jne    c001adb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adc9:	eb 0f                	jmp    c001adda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adcb:	8d 50 01             	lea    edx,[eax+0x1]
c001adce:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001add2:	47                   	inc    edi
c001add3:	89 d0                	mov    eax,edx
c001add5:	e9 3b ff ff ff       	jmp    c001ad15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adda:	31 c0                	xor    eax,eax
c001addc:	eb 33                	jmp    c001ae11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001adde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ade2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ade5:	50                   	push   eax
c001ade6:	50                   	push   eax
c001ade7:	8d 44 24 60          	lea    eax,[esp+0x60]
c001adeb:	50                   	push   eax
c001adec:	56                   	push   esi
c001aded:	e8 a6 5a fe ff       	call   c0000898 <strcmp>
c001adf2:	83 c4 10             	add    esp,0x10
c001adf5:	85 c0                	test   eax,eax
c001adf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adfb:	75 97                	jne    c001ad94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adfd:	51                   	push   ecx
c001adfe:	51                   	push   ecx
c001adff:	52                   	push   edx
c001ae00:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae07:	e8 00 5a fe ff       	call   c000080c <strcpy>
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	b0 01                	mov    al,0x1
c001ae11:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae17:	5b                   	pop    ebx
c001ae18:	5e                   	pop    esi
c001ae19:	5f                   	pop    edi
c001ae1a:	5d                   	pop    ebp
c001ae1b:	c3                   	ret    

c001ae1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae1c:	57                   	push   edi
c001ae1d:	56                   	push   esi
c001ae1e:	53                   	push   ebx
c001ae1f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae25:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae2c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae33:	53                   	push   ebx
c001ae34:	e8 33 59 fe ff       	call   c000076c <strlen>
c001ae39:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae3c:	89 c7                	mov    edi,eax
c001ae3e:	e8 29 59 fe ff       	call   c000076c <strlen>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae4a:	3d ff 00 00 00       	cmp    eax,0xff
c001ae4f:	0f 87 d3 00 00 00    	ja     c001af28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae55:	57                   	push   edi
c001ae56:	57                   	push   edi
c001ae57:	56                   	push   esi
c001ae58:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae5c:	56                   	push   esi
c001ae5d:	e8 aa 59 fe ff       	call   c000080c <strcpy>
c001ae62:	58                   	pop    eax
c001ae63:	5a                   	pop    edx
c001ae64:	68 0a c8 02 c0       	push   0xc002c80a
c001ae69:	56                   	push   esi
c001ae6a:	e8 dd 5a fe ff       	call   c000094c <strcat>
c001ae6f:	59                   	pop    ecx
c001ae70:	5f                   	pop    edi
c001ae71:	53                   	push   ebx
c001ae72:	56                   	push   esi
c001ae73:	e8 d4 5a fe ff       	call   c000094c <strcat>
c001ae78:	58                   	pop    eax
c001ae79:	5a                   	pop    edx
c001ae7a:	68 b4 c4 02 c0       	push   0xc002c4b4
c001ae7f:	56                   	push   esi
c001ae80:	e8 c7 5a fe ff       	call   c000094c <strcat>
c001ae85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae8c:	e8 22 4b ff ff       	call   c000f9b3 <malloc>
c001ae91:	83 c4 0c             	add    esp,0xc
c001ae94:	89 c3                	mov    ebx,eax
c001ae96:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001ae9c:	56                   	push   esi
c001ae9d:	50                   	push   eax
c001ae9e:	e8 c7 80 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	85 db                	test   ebx,ebx
c001aea8:	74 7e                	je     c001af28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeaa:	51                   	push   ecx
c001aeab:	51                   	push   ecx
c001aeac:	6a 01                	push   0x1
c001aeae:	53                   	push   ebx
c001aeaf:	e8 1a 81 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 c0                	test   eax,eax
c001aeb9:	74 08                	je     c001aec3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aebb:	83 ec 0c             	sub    esp,0xc
c001aebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec0:	53                   	push   ebx
c001aec1:	eb 5f                	jmp    c001af22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aec3:	52                   	push   edx
c001aec4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aec8:	50                   	push   eax
c001aec9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aecd:	50                   	push   eax
c001aece:	53                   	push   ebx
c001aecf:	e8 a6 83 ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c001aed4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aed8:	83 c4 10             	add    esp,0x10
c001aedb:	89 c1                	mov    ecx,eax
c001aedd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aee1:	74 31                	je     c001af14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aee3:	83 ec 0c             	sub    esp,0xc
c001aee6:	50                   	push   eax
c001aee7:	e8 c7 4a ff ff       	call   c000f9b3 <malloc>
c001aeec:	89 c6                	mov    esi,eax
c001aeee:	58                   	pop    eax
c001aeef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aef1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aef5:	52                   	push   edx
c001aef6:	56                   	push   esi
c001aef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aefb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeff:	53                   	push   ebx
c001af00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af03:	83 c4 20             	add    esp,0x20
c001af06:	85 c0                	test   eax,eax
c001af08:	75 0a                	jne    c001af14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af12:	74 18                	je     c001af2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af14:	83 ec 0c             	sub    esp,0xc
c001af17:	53                   	push   ebx
c001af18:	e8 0f 81 ff ff       	call   c001302c <File::close()>
c001af1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af25:	83 c4 10             	add    esp,0x10
c001af28:	31 c0                	xor    eax,eax
c001af2a:	eb 3b                	jmp    c001af67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af2c:	83 ec 0c             	sub    esp,0xc
c001af2f:	53                   	push   ebx
c001af30:	e8 f7 80 ff ff       	call   c001302c <File::close()>
c001af35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af3d:	83 c4 0c             	add    esp,0xc
c001af40:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af47:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af4e:	56                   	push   esi
c001af4f:	e8 70 fd ff ff       	call   c001acc4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af54:	89 34 24             	mov    DWORD PTR [esp],esi
c001af57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af5b:	e8 63 4a ff ff       	call   c000f9c3 <free>
c001af60:	83 c4 10             	add    esp,0x10
c001af63:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af67:	81 c4 20 01 00 00    	add    esp,0x120
c001af6d:	5b                   	pop    ebx
c001af6e:	5e                   	pop    esi
c001af6f:	5f                   	pop    edi
c001af70:	c3                   	ret    

c001af71 <Reg::getLine(char*, char*, char*)>:
c001af71:	57                   	push   edi
c001af72:	56                   	push   esi
c001af73:	53                   	push   ebx
c001af74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af80:	57                   	push   edi
c001af81:	56                   	push   esi
c001af82:	53                   	push   ebx
c001af83:	68 b9 c4 02 c0       	push   0xc002c4b9
c001af88:	e8 8f fe ff ff       	call   c001ae1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	84 c0                	test   al,al
c001af92:	75 10                	jne    c001afa4 <Reg::getLine(char*, char*, char*)+0x33>
c001af94:	57                   	push   edi
c001af95:	56                   	push   esi
c001af96:	53                   	push   ebx
c001af97:	68 de c4 02 c0       	push   0xc002c4de
c001af9c:	e8 7b fe ff ff       	call   c001ae1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afa1:	83 c4 10             	add    esp,0x10
c001afa4:	5b                   	pop    ebx
c001afa5:	5e                   	pop    esi
c001afa6:	5f                   	pop    edi
c001afa7:	c3                   	ret    

c001afa8 <Reg::readInt(char*, char*, int*)>:
c001afa8:	55                   	push   ebp
c001afa9:	57                   	push   edi
c001afaa:	56                   	push   esi
c001afab:	53                   	push   ebx
c001afac:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afb2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afb6:	57                   	push   edi
c001afb7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afbe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afc5:	e8 a7 ff ff ff       	call   c001af71 <Reg::getLine(char*, char*, char*)>
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	84 c0                	test   al,al
c001afcf:	0f 84 b3 00 00 00    	je     c001b088 <Reg::readInt(char*, char*, int*)+0xe0>
c001afd5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afd9:	80 fa 2b             	cmp    dl,0x2b
c001afdc:	74 0c                	je     c001afea <Reg::readInt(char*, char*, int*)+0x42>
c001afde:	80 fa 2d             	cmp    dl,0x2d
c001afe1:	75 0e                	jne    c001aff1 <Reg::readInt(char*, char*, int*)+0x49>
c001afe3:	ba 01 00 00 00       	mov    edx,0x1
c001afe8:	eb 0b                	jmp    c001aff5 <Reg::readInt(char*, char*, int*)+0x4d>
c001afea:	ba 01 00 00 00       	mov    edx,0x1
c001afef:	eb 02                	jmp    c001aff3 <Reg::readInt(char*, char*, int*)+0x4b>
c001aff1:	31 d2                	xor    edx,edx
c001aff3:	31 c0                	xor    eax,eax
c001aff5:	be 0a 00 00 00       	mov    esi,0xa
c001affa:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001afff:	75 20                	jne    c001b021 <Reg::readInt(char*, char*, int*)+0x79>
c001b001:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b005:	80 f9 78             	cmp    cl,0x78
c001b008:	75 0a                	jne    c001b014 <Reg::readInt(char*, char*, int*)+0x6c>
c001b00a:	83 c2 02             	add    edx,0x2
c001b00d:	be 10 00 00 00       	mov    esi,0x10
c001b012:	eb 0d                	jmp    c001b021 <Reg::readInt(char*, char*, int*)+0x79>
c001b014:	80 f9 62             	cmp    cl,0x62
c001b017:	75 08                	jne    c001b021 <Reg::readInt(char*, char*, int*)+0x79>
c001b019:	83 c2 02             	add    edx,0x2
c001b01c:	be 02 00 00 00       	mov    esi,0x2
c001b021:	01 d7                	add    edi,edx
c001b023:	31 d2                	xor    edx,edx
c001b025:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b027:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b02b:	80 fb 0d             	cmp    bl,0xd
c001b02e:	0f 94 c3             	sete   bl
c001b031:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b036:	0f 94 c1             	sete   cl
c001b039:	08 cb                	or     bl,cl
c001b03b:	75 3a                	jne    c001b077 <Reg::readInt(char*, char*, int*)+0xcf>
c001b03d:	0f af d6             	imul   edx,esi
c001b040:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b045:	83 fe 10             	cmp    esi,0x10
c001b048:	75 26                	jne    c001b070 <Reg::readInt(char*, char*, int*)+0xc8>
c001b04a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b04e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b051:	89 e9                	mov    ecx,ebp
c001b053:	80 f9 05             	cmp    cl,0x5
c001b056:	77 06                	ja     c001b05e <Reg::readInt(char*, char*, int*)+0xb6>
c001b058:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b05c:	eb 16                	jmp    c001b074 <Reg::readInt(char*, char*, int*)+0xcc>
c001b05e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b062:	83 e9 61             	sub    ecx,0x61
c001b065:	80 f9 05             	cmp    cl,0x5
c001b068:	77 06                	ja     c001b070 <Reg::readInt(char*, char*, int*)+0xc8>
c001b06a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b06e:	eb 04                	jmp    c001b074 <Reg::readInt(char*, char*, int*)+0xcc>
c001b070:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b074:	47                   	inc    edi
c001b075:	eb ae                	jmp    c001b025 <Reg::readInt(char*, char*, int*)+0x7d>
c001b077:	84 c0                	test   al,al
c001b079:	74 02                	je     c001b07d <Reg::readInt(char*, char*, int*)+0xd5>
c001b07b:	f7 da                	neg    edx
c001b07d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b084:	89 10                	mov    DWORD PTR [eax],edx
c001b086:	88 d8                	mov    al,bl
c001b088:	81 c4 ec 00 00 00    	add    esp,0xec
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	5f                   	pop    edi
c001b091:	5d                   	pop    ebp
c001b092:	c3                   	ret    

c001b093 <Reg::readString(char*, char*, char*, int)>:
c001b093:	57                   	push   edi
c001b094:	56                   	push   esi
c001b095:	53                   	push   ebx
c001b096:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b09c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0a3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0a7:	57                   	push   edi
c001b0a8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0af:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0b6:	e8 b6 fe ff ff       	call   c001af71 <Reg::getLine(char*, char*, char*)>
c001b0bb:	83 c4 10             	add    esp,0x10
c001b0be:	89 c6                	mov    esi,eax
c001b0c0:	84 c0                	test   al,al
c001b0c2:	74 44                	je     c001b108 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0c4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0cb:	31 c0                	xor    eax,eax
c001b0cd:	4a                   	dec    edx
c001b0ce:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0d1:	84 c9                	test   cl,cl
c001b0d3:	74 0f                	je     c001b0e4 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0d5:	39 c2                	cmp    edx,eax
c001b0d7:	7e 0b                	jle    c001b0e4 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0d9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0dc:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0e1:	40                   	inc    eax
c001b0e2:	eb ea                	jmp    c001b0ce <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0e4:	83 ec 0c             	sub    esp,0xc
c001b0e7:	53                   	push   ebx
c001b0e8:	e8 7f 56 fe ff       	call   c000076c <strlen>
c001b0ed:	83 c4 10             	add    esp,0x10
c001b0f0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0f5:	75 11                	jne    c001b108 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	53                   	push   ebx
c001b0fb:	e8 6c 56 fe ff       	call   c000076c <strlen>
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b108:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b10e:	89 f0                	mov    eax,esi
c001b110:	5b                   	pop    ebx
c001b111:	5e                   	pop    esi
c001b112:	5f                   	pop    edi
c001b113:	c3                   	ret    

c001b114 <Reg::readBool(char*, char*, bool*)>:
c001b114:	83 ec 20             	sub    esp,0x20
c001b117:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b11b:	50                   	push   eax
c001b11c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b124:	e8 7f fe ff ff       	call   c001afa8 <Reg::readInt(char*, char*, int*)>
c001b129:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b12e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b132:	0f 95 02             	setne  BYTE PTR [edx]
c001b135:	83 c4 2c             	add    esp,0x2c
c001b138:	c3                   	ret    

c001b139 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b139:	53                   	push   ebx
c001b13a:	83 ec 1c             	sub    esp,0x1c
c001b13d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b141:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b145:	50                   	push   eax
c001b146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b14a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b14e:	e8 c1 ff ff ff       	call   c001b114 <Reg::readBool(char*, char*, bool*)>
c001b153:	83 c4 10             	add    esp,0x10
c001b156:	84 c0                	test   al,al
c001b158:	74 04                	je     c001b15e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b15a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b15e:	88 d8                	mov    al,bl
c001b160:	83 c4 18             	add    esp,0x18
c001b163:	5b                   	pop    ebx
c001b164:	c3                   	ret    

c001b165 <Reg::readIntWithDefault(char*, char*, int)>:
c001b165:	53                   	push   ebx
c001b166:	83 ec 1c             	sub    esp,0x1c
c001b169:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b16d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b171:	50                   	push   eax
c001b172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17a:	e8 29 fe ff ff       	call   c001afa8 <Reg::readInt(char*, char*, int*)>
c001b17f:	83 c4 10             	add    esp,0x10
c001b182:	84 c0                	test   al,al
c001b184:	74 04                	je     c001b18a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b186:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b18a:	89 d8                	mov    eax,ebx
c001b18c:	83 c4 18             	add    esp,0x18
c001b18f:	5b                   	pop    ebx
c001b190:	c3                   	ret    

c001b191 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b191:	57                   	push   edi
c001b192:	56                   	push   esi
c001b193:	56                   	push   esi
c001b194:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b198:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b19c:	56                   	push   esi
c001b19d:	57                   	push   edi
c001b19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1a6:	e8 e8 fe ff ff       	call   c001b093 <Reg::readString(char*, char*, char*, int)>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	84 c0                	test   al,al
c001b1b0:	75 1a                	jne    c001b1cc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b1b2:	51                   	push   ecx
c001b1b3:	56                   	push   esi
c001b1b4:	6a 00                	push   0x0
c001b1b6:	57                   	push   edi
c001b1b7:	e8 94 55 fe ff       	call   c0000750 <memset>
c001b1bc:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b1bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1c5:	83 c4 10             	add    esp,0x10
c001b1c8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1cc:	89 f8                	mov    eax,edi
c001b1ce:	5a                   	pop    edx
c001b1cf:	5e                   	pop    esi
c001b1d0:	5f                   	pop    edi
c001b1d1:	c3                   	ret    

c001b1d2 <Sys::eject(regs*)>:
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	83 ca ff             	or     edx,0xffffffff
c001b1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1dc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1e4:	83 e9 41             	sub    ecx,0x41
c001b1e7:	83 f9 19             	cmp    ecx,0x19
c001b1ea:	77 18                	ja     c001b204 <Sys::eject(regs*)+0x32>
c001b1ec:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001b1f3:	85 c9                	test   ecx,ecx
c001b1f5:	74 0d                	je     c001b204 <Sys::eject(regs*)+0x32>
c001b1f7:	83 ec 0c             	sub    esp,0xc
c001b1fa:	51                   	push   ecx
c001b1fb:	e8 fc b0 ff ff       	call   c00162fc <LogicalDisk::eject()>
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	99                   	cdq    
c001b204:	83 c4 0c             	add    esp,0xc
c001b207:	c3                   	ret    

c001b208 <Sys::exit(regs*)>:
c001b208:	83 ec 18             	sub    esp,0x18
c001b20b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b20f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b212:	e8 d3 35 00 00       	call   c001e7ea <terminateTask(int)>
c001b217:	83 c8 ff             	or     eax,0xffffffff
c001b21a:	83 c4 1c             	add    esp,0x1c
c001b21d:	89 c2                	mov    edx,eax
c001b21f:	c3                   	ret    

c001b220 <Sys::getCwd(regs*)>:
c001b220:	83 ec 10             	sub    esp,0x10
c001b223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b227:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b22a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b22d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b232:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b235:	e8 32 7b ff ff       	call   c0012d6c <Fs::getcwd(Process*, char*, int)>
c001b23a:	83 c4 1c             	add    esp,0x1c
c001b23d:	99                   	cdq    
c001b23e:	c3                   	ret    

c001b23f <Sys::getPID(regs*)>:
c001b23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b244:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b247:	8b 00                	mov    eax,DWORD PTR [eax]
c001b249:	99                   	cdq    
c001b24a:	c3                   	ret    

c001b24b <Sys::getRAMData(regs*)>:
c001b24b:	8b 0d b4 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6b4
c001b251:	69 05 b0 e6 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e6b0,0xc8
c001b25b:	99                   	cdq    
c001b25c:	f7 f9                	idiv   ecx
c001b25e:	c1 e0 18             	shl    eax,0x18
c001b261:	09 c8                	or     eax,ecx
c001b263:	99                   	cdq    
c001b264:	c3                   	ret    

c001b265 <Sys::getVGAPtr(regs*)>:
c001b265:	55                   	push   ebp
c001b266:	57                   	push   edi
c001b267:	56                   	push   esi
c001b268:	53                   	push   ebx
c001b269:	83 ec 18             	sub    esp,0x18
c001b26c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b270:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b273:	e8 be 30 00 00       	call   c001e336 <Thr::processFromPID(int)>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	89 c1                	mov    ecx,eax
c001b27d:	b8 01 00 00 00       	mov    eax,0x1
c001b282:	85 c9                	test   ecx,ecx
c001b284:	74 59                	je     c001b2df <Sys::getVGAPtr(regs*)+0x7a>
c001b286:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b28c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b290:	74 0c                	je     c001b29e <Sys::getVGAPtr(regs*)+0x39>
c001b292:	83 ec 0c             	sub    esp,0xc
c001b295:	53                   	push   ebx
c001b296:	e8 d2 54 ff ff       	call   c001076d <setActiveTerminal(VgaText*)>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b2a1:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b2a4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b2a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b2ae:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2b1:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2b7:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2bd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2c0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2c3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2c9:	50                   	push   eax
c001b2ca:	50                   	push   eax
c001b2cb:	53                   	push   ebx
c001b2cc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2cf:	05 a8 0f 00 00       	add    eax,0xfa8
c001b2d4:	50                   	push   eax
c001b2d5:	e8 32 55 fe ff       	call   c000080c <strcpy>
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	31 c0                	xor    eax,eax
c001b2df:	83 c4 0c             	add    esp,0xc
c001b2e2:	31 d2                	xor    edx,edx
c001b2e4:	5b                   	pop    ebx
c001b2e5:	5e                   	pop    esi
c001b2e6:	5f                   	pop    edi
c001b2e7:	5d                   	pop    ebp
c001b2e8:	c3                   	ret    

c001b2e9 <Sys::loadDLL(regs*)>:
c001b2e9:	56                   	push   esi
c001b2ea:	53                   	push   ebx
c001b2eb:	31 d2                	xor    edx,edx
c001b2ed:	51                   	push   ecx
c001b2ee:	b8 01 00 00 00       	mov    eax,0x1
c001b2f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2f7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2fb:	0f 84 8c 00 00 00    	je     c001b38d <Sys::loadDLL(regs*)+0xa4>
c001b301:	83 ec 0c             	sub    esp,0xc
c001b304:	68 14 01 00 00       	push   0x114
c001b309:	e8 a5 46 ff ff       	call   c000f9b3 <malloc>
c001b30e:	83 c4 0c             	add    esp,0xc
c001b311:	89 c3                	mov    ebx,eax
c001b313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b318:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b31b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b31e:	53                   	push   ebx
c001b31f:	e8 46 7c ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	31 d2                	xor    edx,edx
c001b329:	b8 02 00 00 00       	mov    eax,0x2
c001b32e:	85 db                	test   ebx,ebx
c001b330:	74 5b                	je     c001b38d <Sys::loadDLL(regs*)+0xa4>
c001b332:	83 ec 0c             	sub    esp,0xc
c001b335:	53                   	push   ebx
c001b336:	e8 01 7f ff ff       	call   c001323c <File::exists()>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	84 c0                	test   al,al
c001b340:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b342:	75 11                	jne    c001b355 <Sys::loadDLL(regs*)+0x6c>
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	53                   	push   ebx
c001b348:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	b8 03 00 00 00       	mov    eax,0x3
c001b353:	eb 36                	jmp    c001b38b <Sys::loadDLL(regs*)+0xa2>
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	53                   	push   ebx
c001b359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35c:	58                   	pop    eax
c001b35d:	5a                   	pop    edx
c001b35e:	6a 00                	push   0x0
c001b360:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b363:	e8 0e 22 00 00       	call   c001d576 <Thr::loadDLL(char const*, bool)>
c001b368:	83 c4 10             	add    esp,0x10
c001b36b:	89 c1                	mov    ecx,eax
c001b36d:	31 d2                	xor    edx,edx
c001b36f:	b8 04 00 00 00       	mov    eax,0x4
c001b374:	85 c9                	test   ecx,ecx
c001b376:	74 15                	je     c001b38d <Sys::loadDLL(regs*)+0xa4>
c001b378:	53                   	push   ebx
c001b379:	53                   	push   ebx
c001b37a:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001b380:	51                   	push   ecx
c001b381:	e8 21 24 00 00       	call   c001d7a7 <Thr::executeDLL(unsigned long, void*)>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	31 c0                	xor    eax,eax
c001b38b:	31 d2                	xor    edx,edx
c001b38d:	59                   	pop    ecx
c001b38e:	5b                   	pop    ebx
c001b38f:	5e                   	pop    esi
c001b390:	c3                   	ret    

c001b391 <Sys::read(regs*)>:
c001b391:	57                   	push   edi
c001b392:	56                   	push   esi
c001b393:	53                   	push   ebx
c001b394:	83 ec 10             	sub    esp,0x10
c001b397:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b39b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b39e:	83 f8 02             	cmp    eax,0x2
c001b3a1:	77 10                	ja     c001b3b3 <Sys::read(regs*)+0x22>
c001b3a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ab:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3b1:	eb 0e                	jmp    c001b3c1 <Sys::read(regs*)+0x30>
c001b3b3:	83 ec 0c             	sub    esp,0xc
c001b3b6:	50                   	push   eax
c001b3b7:	e8 27 61 ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b3bc:	83 c4 10             	add    esp,0x10
c001b3bf:	89 c1                	mov    ecx,eax
c001b3c1:	83 c8 ff             	or     eax,0xffffffff
c001b3c4:	85 c9                	test   ecx,ecx
c001b3c6:	89 c2                	mov    edx,eax
c001b3c8:	74 28                	je     c001b3f2 <Sys::read(regs*)+0x61>
c001b3ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3d2:	31 ff                	xor    edi,edi
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3dd:	52                   	push   edx
c001b3de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3e4:	57                   	push   edi
c001b3e5:	56                   	push   esi
c001b3e6:	51                   	push   ecx
c001b3e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ee:	83 c4 20             	add    esp,0x20
c001b3f1:	99                   	cdq    
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	5b                   	pop    ebx
c001b3f6:	5e                   	pop    esi
c001b3f7:	5f                   	pop    edi
c001b3f8:	c3                   	ret    

c001b3f9 <Sys::sbrk(regs*)>:
c001b3f9:	56                   	push   esi
c001b3fa:	53                   	push   ebx
c001b3fb:	50                   	push   eax
c001b3fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b405:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b408:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b40b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b411:	85 db                	test   ebx,ebx
c001b413:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b416:	74 02                	je     c001b41a <Sys::sbrk(regs*)+0x21>
c001b418:	79 06                	jns    c001b420 <Sys::sbrk(regs*)+0x27>
c001b41a:	89 f0                	mov    eax,esi
c001b41c:	31 d2                	xor    edx,edx
c001b41e:	eb 2a                	jmp    c001b44a <Sys::sbrk(regs*)+0x51>
c001b420:	83 c8 ff             	or     eax,0xffffffff
c001b423:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b429:	89 c2                	mov    edx,eax
c001b42b:	77 1d                	ja     c001b44a <Sys::sbrk(regs*)+0x51>
c001b42d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b433:	50                   	push   eax
c001b434:	c1 ea 0c             	shr    edx,0xc
c001b437:	68 07 0c 00 00       	push   0xc07
c001b43c:	52                   	push   edx
c001b43d:	51                   	push   ecx
c001b43e:	e8 9f 69 ff ff       	call   c0011de2 <VAS::allocatePages(int, int)>
c001b443:	89 f0                	mov    eax,esi
c001b445:	31 d2                	xor    edx,edx
c001b447:	83 c4 10             	add    esp,0x10
c001b44a:	59                   	pop    ecx
c001b44b:	5b                   	pop    ebx
c001b44c:	5e                   	pop    esi
c001b44d:	c3                   	ret    

c001b44e <Sys::setCwd(regs*)>:
c001b44e:	83 ec 14             	sub    esp,0x14
c001b451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b455:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b45d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b460:	e8 76 7e ff ff       	call   c00132db <Fs::setcwd(Process*, char*)>
c001b465:	83 c4 1c             	add    esp,0x1c
c001b468:	99                   	cdq    
c001b469:	c3                   	ret    

c001b46a <Sys::setTime(regs*)>:
c001b46a:	55                   	push   ebp
c001b46b:	31 c9                	xor    ecx,ecx
c001b46d:	57                   	push   edi
c001b46e:	bd 0c 00 00 00       	mov    ebp,0xc
c001b473:	56                   	push   esi
c001b474:	53                   	push   ebx
c001b475:	31 db                	xor    ebx,ebx
c001b477:	83 ec 10             	sub    esp,0x10
c001b47a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b47e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b481:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b484:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b487:	89 c2                	mov    edx,eax
c001b489:	66 81 ef 6c 07       	sub    di,0x76c
c001b48e:	83 e2 1f             	and    edx,0x1f
c001b491:	c1 e7 10             	shl    edi,0x10
c001b494:	42                   	inc    edx
c001b495:	c1 e8 05             	shr    eax,0x5
c001b498:	88 d1                	mov    cl,dl
c001b49a:	31 d2                	xor    edx,edx
c001b49c:	f7 f5                	div    ebp
c001b49e:	89 dd                	mov    ebp,ebx
c001b4a0:	88 d5                	mov    ch,dl
c001b4a2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b4a8:	0f b7 c1             	movzx  eax,cx
c001b4ab:	31 d2                	xor    edx,edx
c001b4ad:	09 f8                	or     eax,edi
c001b4af:	bf 3c 00 00 00       	mov    edi,0x3c
c001b4b4:	89 c1                	mov    ecx,eax
c001b4b6:	89 f0                	mov    eax,esi
c001b4b8:	f7 f7                	div    edi
c001b4ba:	c1 e2 10             	shl    edx,0x10
c001b4bd:	09 d5                	or     ebp,edx
c001b4bf:	31 d2                	xor    edx,edx
c001b4c1:	89 eb                	mov    ebx,ebp
c001b4c3:	f7 f7                	div    edi
c001b4c5:	bf 10 0e 00 00       	mov    edi,0xe10
c001b4ca:	88 d7                	mov    bh,dl
c001b4cc:	89 f0                	mov    eax,esi
c001b4ce:	31 d2                	xor    edx,edx
c001b4d0:	f7 f7                	div    edi
c001b4d2:	bf 18 00 00 00       	mov    edi,0x18
c001b4d7:	31 d2                	xor    edx,edx
c001b4d9:	f7 f7                	div    edi
c001b4db:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b4e0:	88 d3                	mov    bl,dl
c001b4e2:	53                   	push   ebx
c001b4e3:	51                   	push   ecx
c001b4e4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4ea:	e8 35 86 ff ff       	call   c0013b24 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4ef:	83 c4 1c             	add    esp,0x1c
c001b4f2:	83 f0 01             	xor    eax,0x1
c001b4f5:	5b                   	pop    ebx
c001b4f6:	0f b6 c0             	movzx  eax,al
c001b4f9:	5e                   	pop    esi
c001b4fa:	31 d2                	xor    edx,edx
c001b4fc:	5f                   	pop    edi
c001b4fd:	5d                   	pop    ebp
c001b4fe:	c3                   	ret    

c001b4ff <Sys::timezone(regs*)>:
c001b4ff:	53                   	push   ebx
c001b500:	83 ec 08             	sub    esp,0x8
c001b503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b507:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b50b:	75 17                	jne    c001b524 <Sys::timezone(regs*)+0x25>
c001b50d:	83 ec 0c             	sub    esp,0xc
c001b510:	68 f9 c4 02 c0       	push   0xc002c4f9
c001b515:	e8 f1 74 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001b51a:	83 c8 ff             	or     eax,0xffffffff
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	89 c2                	mov    edx,eax
c001b522:	eb 20                	jmp    c001b544 <Sys::timezone(regs*)+0x45>
c001b524:	83 ec 0c             	sub    esp,0xc
c001b527:	68 0e c5 02 c0       	push   0xc002c50e
c001b52c:	e8 da 74 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001b531:	58                   	pop    eax
c001b532:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b535:	e8 4c 83 ff ff       	call   c0013886 <User::loadClockSettings(int)>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	b8 01 00 00 00       	mov    eax,0x1
c001b542:	31 d2                	xor    edx,edx
c001b544:	83 c4 08             	add    esp,0x8
c001b547:	5b                   	pop    ebx
c001b548:	c3                   	ret    

c001b549 <Sys::write(regs*)>:
c001b549:	57                   	push   edi
c001b54a:	56                   	push   esi
c001b54b:	53                   	push   ebx
c001b54c:	83 ec 10             	sub    esp,0x10
c001b54f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b556:	83 f8 02             	cmp    eax,0x2
c001b559:	77 10                	ja     c001b56b <Sys::write(regs*)+0x22>
c001b55b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b560:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b563:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b569:	eb 0e                	jmp    c001b579 <Sys::write(regs*)+0x30>
c001b56b:	83 ec 0c             	sub    esp,0xc
c001b56e:	50                   	push   eax
c001b56f:	e8 6f 5f ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b574:	83 c4 10             	add    esp,0x10
c001b577:	89 c1                	mov    ecx,eax
c001b579:	83 c8 ff             	or     eax,0xffffffff
c001b57c:	85 c9                	test   ecx,ecx
c001b57e:	89 c2                	mov    edx,eax
c001b580:	74 28                	je     c001b5aa <Sys::write(regs*)+0x61>
c001b582:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b58a:	31 ff                	xor    edi,edi
c001b58c:	83 ec 0c             	sub    esp,0xc
c001b58f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b591:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b595:	52                   	push   edx
c001b596:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b599:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b59c:	57                   	push   edi
c001b59d:	56                   	push   esi
c001b59e:	51                   	push   ecx
c001b59f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5a6:	83 c4 20             	add    esp,0x20
c001b5a9:	99                   	cdq    
c001b5aa:	83 c4 10             	add    esp,0x10
c001b5ad:	5b                   	pop    ebx
c001b5ae:	5e                   	pop    esi
c001b5af:	5f                   	pop    edi
c001b5b0:	c3                   	ret    

c001b5b1 <Sys::wsbe(regs*)>:
c001b5b1:	57                   	push   edi
c001b5b2:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5b7:	56                   	push   esi
c001b5b8:	be 4d c5 02 c0       	mov    esi,0xc002c54d
c001b5bd:	53                   	push   ebx
c001b5be:	83 ec 30             	sub    esp,0x30
c001b5c1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5c5:	fc                   	cld    
c001b5c6:	83 ec 0c             	sub    esp,0xc
c001b5c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5cb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5d7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5dd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5df:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5e2:	57                   	push   edi
c001b5e3:	e8 84 51 fe ff       	call   c000076c <strlen>
c001b5e8:	5a                   	pop    edx
c001b5e9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5ed:	52                   	push   edx
c001b5ee:	31 d2                	xor    edx,edx
c001b5f0:	57                   	push   edi
c001b5f1:	52                   	push   edx
c001b5f2:	50                   	push   eax
c001b5f3:	56                   	push   esi
c001b5f4:	ff d3                	call   ebx
c001b5f6:	83 c4 14             	add    esp,0x14
c001b5f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5fd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b600:	e8 e5 31 00 00       	call   c001e7ea <terminateTask(int)>
c001b605:	83 c4 40             	add    esp,0x40
c001b608:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b60d:	5b                   	pop    ebx
c001b60e:	31 d2                	xor    edx,edx
c001b610:	5e                   	pop    esi
c001b611:	5f                   	pop    edi
c001b612:	c3                   	ret    

c001b613 <Sys::yield(regs*)>:
c001b613:	57                   	push   edi
c001b614:	56                   	push   esi
c001b615:	53                   	push   ebx
c001b616:	fa                   	cli    
c001b617:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001b61d:	e8 19 29 00 00       	call   c001df3b <schedule()>
c001b622:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001b627:	48                   	dec    eax
c001b628:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001b62d:	75 01                	jne    c001b630 <Sys::yield(regs*)+0x1d>
c001b62f:	fb                   	sti    
c001b630:	8b 35 d0 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecd0
c001b636:	8b 3d d4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecd4
c001b63c:	89 f0                	mov    eax,esi
c001b63e:	89 fb                	mov    ebx,edi
c001b640:	89 f1                	mov    ecx,esi
c001b642:	c1 e0 07             	shl    eax,0x7
c001b645:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b649:	25 80 30 0f 00       	and    eax,0xf3080
c001b64e:	c1 eb 17             	shr    ebx,0x17
c001b651:	31 c8                	xor    eax,ecx
c001b653:	89 da                	mov    edx,ebx
c001b655:	5b                   	pop    ebx
c001b656:	5e                   	pop    esi
c001b657:	5f                   	pop    edi
c001b658:	c3                   	ret    

c001b659 <sysCallSeekDir(regs*)>:
c001b659:	31 c0                	xor    eax,eax
c001b65b:	31 d2                	xor    edx,edx
c001b65d:	c3                   	ret    

c001b65e <sysCallTellDir(regs*)>:
c001b65e:	31 c0                	xor    eax,eax
c001b660:	31 d2                	xor    edx,edx
c001b662:	c3                   	ret    

c001b663 <sysCallVerify(regs*)>:
c001b663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b667:	31 d2                	xor    edx,edx
c001b669:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b66c:	c3                   	ret    

c001b66d <sysCallGetArgc(regs*)>:
c001b66d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b672:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b675:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b67b:	99                   	cdq    
c001b67c:	c3                   	ret    

c001b67d <sysFormatDisk(regs*)>:
c001b67d:	56                   	push   esi
c001b67e:	53                   	push   ebx
c001b67f:	53                   	push   ebx
c001b680:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b684:	8b 1d d4 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7d4
c001b68a:	eb 25                	jmp    c001b6b1 <sysFormatDisk(regs*)+0x34>
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b692:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b694:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b697:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b69a:	50                   	push   eax
c001b69b:	ff 34 85 60 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13a0]
c001b6a2:	53                   	push   ebx
c001b6a3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6a6:	83 c4 20             	add    esp,0x20
c001b6a9:	83 f8 08             	cmp    eax,0x8
c001b6ac:	75 12                	jne    c001b6c0 <sysFormatDisk(regs*)+0x43>
c001b6ae:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6b1:	85 db                	test   ebx,ebx
c001b6b3:	75 d7                	jne    c001b68c <sysFormatDisk(regs*)+0xf>
c001b6b5:	59                   	pop    ecx
c001b6b6:	b8 03 00 00 00       	mov    eax,0x3
c001b6bb:	31 d2                	xor    edx,edx
c001b6bd:	5b                   	pop    ebx
c001b6be:	5e                   	pop    esi
c001b6bf:	c3                   	ret    
c001b6c0:	85 c0                	test   eax,eax
c001b6c2:	74 1b                	je     c001b6df <sysFormatDisk(regs*)+0x62>
c001b6c4:	83 f8 09             	cmp    eax,0x9
c001b6c7:	74 0b                	je     c001b6d4 <sysFormatDisk(regs*)+0x57>
c001b6c9:	59                   	pop    ecx
c001b6ca:	b8 02 00 00 00       	mov    eax,0x2
c001b6cf:	31 d2                	xor    edx,edx
c001b6d1:	5b                   	pop    ebx
c001b6d2:	5e                   	pop    esi
c001b6d3:	c3                   	ret    
c001b6d4:	59                   	pop    ecx
c001b6d5:	b8 01 00 00 00       	mov    eax,0x1
c001b6da:	31 d2                	xor    edx,edx
c001b6dc:	5b                   	pop    ebx
c001b6dd:	5e                   	pop    esi
c001b6de:	c3                   	ret    
c001b6df:	59                   	pop    ecx
c001b6e0:	31 c0                	xor    eax,eax
c001b6e2:	31 d2                	xor    edx,edx
c001b6e4:	5b                   	pop    ebx
c001b6e5:	5e                   	pop    esi
c001b6e6:	c3                   	ret    

c001b6e7 <sysSetDiskVolumeLabel(regs*)>:
c001b6e7:	56                   	push   esi
c001b6e8:	53                   	push   ebx
c001b6e9:	53                   	push   ebx
c001b6ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6ee:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6f1:	83 f8 19             	cmp    eax,0x19
c001b6f4:	77 29                	ja     c001b71f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f6:	8b 0c 85 60 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13a0]
c001b6fd:	85 c9                	test   ecx,ecx
c001b6ff:	74 1e                	je     c001b71f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b701:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b704:	85 d2                	test   edx,edx
c001b706:	74 17                	je     c001b71f <sysSetDiskVolumeLabel(regs*)+0x38>
c001b708:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b70e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b710:	52                   	push   edx
c001b711:	50                   	push   eax
c001b712:	51                   	push   ecx
c001b713:	53                   	push   ebx
c001b714:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	99                   	cdq    
c001b71b:	59                   	pop    ecx
c001b71c:	5b                   	pop    ebx
c001b71d:	5e                   	pop    esi
c001b71e:	c3                   	ret    
c001b71f:	59                   	pop    ecx
c001b720:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b725:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b72a:	5b                   	pop    ebx
c001b72b:	5e                   	pop    esi
c001b72c:	c3                   	ret    

c001b72d <sysGetDiskVolumeLabel(regs*)>:
c001b72d:	57                   	push   edi
c001b72e:	56                   	push   esi
c001b72f:	53                   	push   ebx
c001b730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b734:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b737:	83 fa 19             	cmp    edx,0x19
c001b73a:	77 34                	ja     c001b770 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b73c:	8b 0c 95 60 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13a0]
c001b743:	85 c9                	test   ecx,ecx
c001b745:	74 29                	je     c001b770 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b747:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b74a:	85 db                	test   ebx,ebx
c001b74c:	74 22                	je     c001b770 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b74e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b751:	85 c0                	test   eax,eax
c001b753:	74 1b                	je     c001b770 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b755:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b75b:	83 ec 0c             	sub    esp,0xc
c001b75e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b760:	50                   	push   eax
c001b761:	53                   	push   ebx
c001b762:	52                   	push   edx
c001b763:	51                   	push   ecx
c001b764:	56                   	push   esi
c001b765:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b768:	83 c4 20             	add    esp,0x20
c001b76b:	99                   	cdq    
c001b76c:	5b                   	pop    ebx
c001b76d:	5e                   	pop    esi
c001b76e:	5f                   	pop    edi
c001b76f:	c3                   	ret    
c001b770:	5b                   	pop    ebx
c001b771:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b776:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b77b:	5e                   	pop    esi
c001b77c:	5f                   	pop    edi
c001b77d:	c3                   	ret    

c001b77e <sysShutdown(regs*)>:
c001b77e:	83 ec 0c             	sub    esp,0xc
c001b781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b785:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b788:	85 c0                	test   eax,eax
c001b78a:	74 18                	je     c001b7a4 <sysShutdown(regs*)+0x26>
c001b78c:	83 f8 01             	cmp    eax,0x1
c001b78f:	74 38                	je     c001b7c9 <sysShutdown(regs*)+0x4b>
c001b791:	83 f8 02             	cmp    eax,0x2
c001b794:	74 24                	je     c001b7ba <sysShutdown(regs*)+0x3c>
c001b796:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b79b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a0:	83 c4 0c             	add    esp,0xc
c001b7a3:	c3                   	ret    
c001b7a4:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b7a9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7ab:	6a 00                	push   0x0
c001b7ad:	6a 00                	push   0x0
c001b7af:	6a 00                	push   0x0
c001b7b1:	50                   	push   eax
c001b7b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7b5:	83 c4 10             	add    esp,0x10
c001b7b8:	eb dc                	jmp    c001b796 <sysShutdown(regs*)+0x18>
c001b7ba:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b7bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7c1:	6a 00                	push   0x0
c001b7c3:	6a 00                	push   0x0
c001b7c5:	6a 01                	push   0x1
c001b7c7:	eb e8                	jmp    c001b7b1 <sysShutdown(regs*)+0x33>
c001b7c9:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c001b7ce:	85 c0                	test   eax,eax
c001b7d0:	74 02                	je     c001b7d4 <sysShutdown(regs*)+0x56>
c001b7d2:	ff d0                	call   eax
c001b7d4:	31 c0                	xor    eax,eax
c001b7d6:	31 d2                	xor    edx,edx
c001b7d8:	83 c4 0c             	add    esp,0xc
c001b7db:	c3                   	ret    

c001b7dc <sysCallRealpath(regs*)>:
c001b7dc:	83 ec 0c             	sub    esp,0xc
c001b7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7e6:	85 d2                	test   edx,edx
c001b7e8:	74 07                	je     c001b7f1 <sysCallRealpath(regs*)+0x15>
c001b7ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7ed:	85 c0                	test   eax,eax
c001b7ef:	75 0b                	jne    c001b7fc <sysCallRealpath(regs*)+0x20>
c001b7f1:	b8 01 00 00 00       	mov    eax,0x1
c001b7f6:	31 d2                	xor    edx,edx
c001b7f8:	83 c4 0c             	add    esp,0xc
c001b7fb:	c3                   	ret    
c001b7fc:	51                   	push   ecx
c001b7fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b803:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b806:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b80c:	51                   	push   ecx
c001b80d:	52                   	push   edx
c001b80e:	50                   	push   eax
c001b80f:	e8 ac 75 ff ff       	call   c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b814:	83 c4 10             	add    esp,0x10
c001b817:	31 c0                	xor    eax,eax
c001b819:	31 d2                	xor    edx,edx
c001b81b:	83 c4 0c             	add    esp,0xc
c001b81e:	c3                   	ret    

c001b81f <sysCallReadDir(regs*)>:
c001b81f:	53                   	push   ebx
c001b820:	83 ec 18             	sub    esp,0x18
c001b823:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b82a:	83 f8 02             	cmp    eax,0x2
c001b82d:	76 60                	jbe    c001b88f <sysCallReadDir(regs*)+0x70>
c001b82f:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b836:	77 48                	ja     c001b880 <sysCallReadDir(regs*)+0x61>
c001b838:	83 ec 0c             	sub    esp,0xc
c001b83b:	50                   	push   eax
c001b83c:	e8 a2 5c ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b841:	83 c4 10             	add    esp,0x10
c001b844:	85 c0                	test   eax,eax
c001b846:	74 38                	je     c001b880 <sysCallReadDir(regs*)+0x61>
c001b848:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b850:	83 ec 0c             	sub    esp,0xc
c001b853:	8b 10                	mov    edx,DWORD PTR [eax]
c001b855:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b859:	51                   	push   ecx
c001b85a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b85d:	6a 00                	push   0x0
c001b85f:	68 10 01 00 00       	push   0x110
c001b864:	50                   	push   eax
c001b865:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b868:	83 c4 20             	add    esp,0x20
c001b86b:	85 c0                	test   eax,eax
c001b86d:	74 29                	je     c001b898 <sysCallReadDir(regs*)+0x79>
c001b86f:	83 f8 07             	cmp    eax,0x7
c001b872:	74 1b                	je     c001b88f <sysCallReadDir(regs*)+0x70>
c001b874:	b8 02 00 00 00       	mov    eax,0x2
c001b879:	31 d2                	xor    edx,edx
c001b87b:	83 c4 18             	add    esp,0x18
c001b87e:	5b                   	pop    ebx
c001b87f:	c3                   	ret    
c001b880:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b885:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88a:	83 c4 18             	add    esp,0x18
c001b88d:	5b                   	pop    ebx
c001b88e:	c3                   	ret    
c001b88f:	b8 01 00 00 00       	mov    eax,0x1
c001b894:	31 d2                	xor    edx,edx
c001b896:	eb e3                	jmp    c001b87b <sysCallReadDir(regs*)+0x5c>
c001b898:	31 c0                	xor    eax,eax
c001b89a:	31 d2                	xor    edx,edx
c001b89c:	eb dd                	jmp    c001b87b <sysCallReadDir(regs*)+0x5c>

c001b89e <sysCallIsATTY(regs*)>:
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8a8:	83 f8 02             	cmp    eax,0x2
c001b8ab:	76 07                	jbe    c001b8b4 <sysCallIsATTY(regs*)+0x16>
c001b8ad:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8b2:	75 26                	jne    c001b8da <sysCallIsATTY(regs*)+0x3c>
c001b8b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8c2:	85 c0                	test   eax,eax
c001b8c4:	74 24                	je     c001b8ea <sysCallIsATTY(regs*)+0x4c>
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8cb:	50                   	push   eax
c001b8cc:	ff 12                	call   DWORD PTR [edx]
c001b8ce:	31 d2                	xor    edx,edx
c001b8d0:	0f b6 c0             	movzx  eax,al
c001b8d3:	83 c4 10             	add    esp,0x10
c001b8d6:	83 c4 0c             	add    esp,0xc
c001b8d9:	c3                   	ret    
c001b8da:	83 ec 0c             	sub    esp,0xc
c001b8dd:	50                   	push   eax
c001b8de:	e8 00 5c ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b8e3:	83 c4 10             	add    esp,0x10
c001b8e6:	85 c0                	test   eax,eax
c001b8e8:	75 dc                	jne    c001b8c6 <sysCallIsATTY(regs*)+0x28>
c001b8ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8f4:	83 c4 0c             	add    esp,0xc
c001b8f7:	c3                   	ret    

c001b8f8 <sysCallSeek(regs*)>:
c001b8f8:	53                   	push   ebx
c001b8f9:	83 ec 08             	sub    esp,0x8
c001b8fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b900:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b903:	8d 50 fd             	lea    edx,[eax-0x3]
c001b906:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b90c:	77 32                	ja     c001b940 <sysCallSeek(regs*)+0x48>
c001b90e:	83 ec 0c             	sub    esp,0xc
c001b911:	50                   	push   eax
c001b912:	e8 cc 5b ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b917:	83 c4 0c             	add    esp,0xc
c001b91a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b91d:	31 db                	xor    ebx,ebx
c001b91f:	53                   	push   ebx
c001b920:	51                   	push   ecx
c001b921:	50                   	push   eax
c001b922:	e8 65 77 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	85 c0                	test   eax,eax
c001b92c:	0f 95 c0             	setne  al
c001b92f:	31 d2                	xor    edx,edx
c001b931:	0f b6 c0             	movzx  eax,al
c001b934:	f7 d8                	neg    eax
c001b936:	83 d2 00             	adc    edx,0x0
c001b939:	83 c4 08             	add    esp,0x8
c001b93c:	f7 da                	neg    edx
c001b93e:	5b                   	pop    ebx
c001b93f:	c3                   	ret    
c001b940:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b945:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b94a:	83 c4 08             	add    esp,0x8
c001b94d:	5b                   	pop    ebx
c001b94e:	c3                   	ret    

c001b94f <sysCallTell(regs*)>:
c001b94f:	53                   	push   ebx
c001b950:	83 ec 08             	sub    esp,0x8
c001b953:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b957:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b95a:	83 f8 02             	cmp    eax,0x2
c001b95d:	76 4d                	jbe    c001b9ac <sysCallTell(regs*)+0x5d>
c001b95f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b964:	76 19                	jbe    c001b97f <sysCallTell(regs*)+0x30>
c001b966:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b969:	31 d2                	xor    edx,edx
c001b96b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b971:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b978:	31 c0                	xor    eax,eax
c001b97a:	83 c4 08             	add    esp,0x8
c001b97d:	5b                   	pop    ebx
c001b97e:	c3                   	ret    
c001b97f:	83 ec 0c             	sub    esp,0xc
c001b982:	50                   	push   eax
c001b983:	e8 5b 5b ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b988:	5a                   	pop    edx
c001b989:	59                   	pop    ecx
c001b98a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b98d:	50                   	push   eax
c001b98e:	e8 4f 77 ff ff       	call   c00130e2 <File::tell(unsigned long long*)>
c001b993:	83 c4 10             	add    esp,0x10
c001b996:	85 c0                	test   eax,eax
c001b998:	0f 95 c0             	setne  al
c001b99b:	31 d2                	xor    edx,edx
c001b99d:	0f b6 c0             	movzx  eax,al
c001b9a0:	f7 d8                	neg    eax
c001b9a2:	83 d2 00             	adc    edx,0x0
c001b9a5:	83 c4 08             	add    esp,0x8
c001b9a8:	f7 da                	neg    edx
c001b9aa:	5b                   	pop    ebx
c001b9ab:	c3                   	ret    
c001b9ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9b6:	83 c4 08             	add    esp,0x8
c001b9b9:	5b                   	pop    ebx
c001b9ba:	c3                   	ret    

c001b9bb <sysCallSize(regs*)>:
c001b9bb:	53                   	push   ebx
c001b9bc:	83 ec 18             	sub    esp,0x18
c001b9bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c6:	83 f8 02             	cmp    eax,0x2
c001b9c9:	76 53                	jbe    c001ba1e <sysCallSize(regs*)+0x63>
c001b9cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9d0:	76 19                	jbe    c001b9eb <sysCallSize(regs*)+0x30>
c001b9d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9d5:	31 d2                	xor    edx,edx
c001b9d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9e4:	31 c0                	xor    eax,eax
c001b9e6:	83 c4 18             	add    esp,0x18
c001b9e9:	5b                   	pop    ebx
c001b9ea:	c3                   	ret    
c001b9eb:	83 ec 0c             	sub    esp,0xc
c001b9ee:	50                   	push   eax
c001b9ef:	e8 ef 5a ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001b9f4:	83 c4 0c             	add    esp,0xc
c001b9f7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9fb:	52                   	push   edx
c001b9fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ff:	50                   	push   eax
c001ba00:	e8 75 78 ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c001ba05:	83 c4 10             	add    esp,0x10
c001ba08:	85 c0                	test   eax,eax
c001ba0a:	0f 95 c0             	setne  al
c001ba0d:	31 d2                	xor    edx,edx
c001ba0f:	0f b6 c0             	movzx  eax,al
c001ba12:	f7 d8                	neg    eax
c001ba14:	83 d2 00             	adc    edx,0x0
c001ba17:	83 c4 18             	add    esp,0x18
c001ba1a:	f7 da                	neg    edx
c001ba1c:	5b                   	pop    ebx
c001ba1d:	c3                   	ret    
c001ba1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba28:	83 c4 18             	add    esp,0x18
c001ba2b:	5b                   	pop    ebx
c001ba2c:	c3                   	ret    

c001ba2d <sysCallSizeFromFilename(regs*)>:
c001ba2d:	57                   	push   edi
c001ba2e:	56                   	push   esi
c001ba2f:	53                   	push   ebx
c001ba30:	83 ec 20             	sub    esp,0x20
c001ba33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ba37:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001ba3a:	83 fb 02             	cmp    ebx,0x2
c001ba3d:	0f 86 88 00 00 00    	jbe    c001bacb <sysCallSizeFromFilename(regs*)+0x9e>
c001ba43:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba49:	76 1b                	jbe    c001ba66 <sysCallSizeFromFilename(regs*)+0x39>
c001ba4b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba4e:	31 d2                	xor    edx,edx
c001ba50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba5d:	83 c4 20             	add    esp,0x20
c001ba60:	31 c0                	xor    eax,eax
c001ba62:	5b                   	pop    ebx
c001ba63:	5e                   	pop    esi
c001ba64:	5f                   	pop    edi
c001ba65:	c3                   	ret    
c001ba66:	83 ec 0c             	sub    esp,0xc
c001ba69:	68 14 01 00 00       	push   0x114
c001ba6e:	e8 40 3f ff ff       	call   c000f9b3 <malloc>
c001ba73:	83 c4 0c             	add    esp,0xc
c001ba76:	89 c7                	mov    edi,eax
c001ba78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba80:	53                   	push   ebx
c001ba81:	57                   	push   edi
c001ba82:	e8 e3 74 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001ba87:	83 c4 0c             	add    esp,0xc
c001ba8a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba8e:	50                   	push   eax
c001ba8f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba92:	57                   	push   edi
c001ba93:	e8 e2 77 ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	85 ff                	test   edi,edi
c001ba9d:	74 14                	je     c001bab3 <sysCallSizeFromFilename(regs*)+0x86>
c001ba9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa3:	8b 17                	mov    edx,DWORD PTR [edi]
c001baa5:	83 ec 0c             	sub    esp,0xc
c001baa8:	57                   	push   edi
c001baa9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baac:	83 c4 10             	add    esp,0x10
c001baaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab3:	85 c0                	test   eax,eax
c001bab5:	0f 95 c0             	setne  al
c001bab8:	31 d2                	xor    edx,edx
c001baba:	0f b6 c0             	movzx  eax,al
c001babd:	f7 d8                	neg    eax
c001babf:	83 d2 00             	adc    edx,0x0
c001bac2:	83 c4 20             	add    esp,0x20
c001bac5:	f7 da                	neg    edx
c001bac7:	5b                   	pop    ebx
c001bac8:	5e                   	pop    esi
c001bac9:	5f                   	pop    edi
c001baca:	c3                   	ret    
c001bacb:	83 c4 20             	add    esp,0x20
c001bace:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad3:	5b                   	pop    ebx
c001bad4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad9:	5e                   	pop    esi
c001bada:	5f                   	pop    edi
c001badb:	c3                   	ret    

c001badc <sysCallClose(regs*)>:
c001badc:	53                   	push   ebx
c001badd:	83 ec 08             	sub    esp,0x8
c001bae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bae7:	83 f8 02             	cmp    eax,0x2
c001baea:	76 41                	jbe    c001bb2d <sysCallClose(regs*)+0x51>
c001baec:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001baf2:	83 fa 01             	cmp    edx,0x1
c001baf5:	76 2d                	jbe    c001bb24 <sysCallClose(regs*)+0x48>
c001baf7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bafc:	77 2f                	ja     c001bb2d <sysCallClose(regs*)+0x51>
c001bafe:	83 ec 0c             	sub    esp,0xc
c001bb01:	50                   	push   eax
c001bb02:	e8 dc 59 ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001bb07:	89 c3                	mov    ebx,eax
c001bb09:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb0c:	e8 1b 75 ff ff       	call   c001302c <File::close()>
c001bb11:	83 c4 10             	add    esp,0x10
c001bb14:	85 db                	test   ebx,ebx
c001bb16:	74 0c                	je     c001bb24 <sysCallClose(regs*)+0x48>
c001bb18:	83 ec 0c             	sub    esp,0xc
c001bb1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb1d:	53                   	push   ebx
c001bb1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	31 c0                	xor    eax,eax
c001bb26:	31 d2                	xor    edx,edx
c001bb28:	83 c4 08             	add    esp,0x8
c001bb2b:	5b                   	pop    ebx
c001bb2c:	c3                   	ret    
c001bb2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb32:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb37:	83 c4 08             	add    esp,0x8
c001bb3a:	5b                   	pop    ebx
c001bb3b:	c3                   	ret    

c001bb3c <sysCallOpenDir(regs*)>:
c001bb3c:	56                   	push   esi
c001bb3d:	53                   	push   ebx
c001bb3e:	53                   	push   ebx
c001bb3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb43:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb46:	85 f6                	test   esi,esi
c001bb48:	74 59                	je     c001bba3 <sysCallOpenDir(regs*)+0x67>
c001bb4a:	83 ec 0c             	sub    esp,0xc
c001bb4d:	68 14 01 00 00       	push   0x114
c001bb52:	e8 5c 3e ff ff       	call   c000f9b3 <malloc>
c001bb57:	83 c4 0c             	add    esp,0xc
c001bb5a:	89 c6                	mov    esi,eax
c001bb5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb61:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb67:	56                   	push   esi
c001bb68:	e8 a9 78 ff ff       	call   c0013416 <Directory::Directory(char const*, Process*)>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	85 f6                	test   esi,esi
c001bb72:	74 2f                	je     c001bba3 <sysCallOpenDir(regs*)+0x67>
c001bb74:	83 ec 0c             	sub    esp,0xc
c001bb77:	56                   	push   esi
c001bb78:	e8 fd 78 ff ff       	call   c001347a <Directory::open()>
c001bb7d:	83 c4 10             	add    esp,0x10
c001bb80:	85 c0                	test   eax,eax
c001bb82:	75 1f                	jne    c001bba3 <sysCallOpenDir(regs*)+0x67>
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	56                   	push   esi
c001bb88:	e8 61 56 ff ff       	call   c00111ee <UnixFile::getFileDescriptor()>
c001bb8d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	89 02                	mov    DWORD PTR [edx],eax
c001bb95:	c1 f8 1f             	sar    eax,0x1f
c001bb98:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb9b:	31 c0                	xor    eax,eax
c001bb9d:	59                   	pop    ecx
c001bb9e:	31 d2                	xor    edx,edx
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	c3                   	ret    
c001bba3:	59                   	pop    ecx
c001bba4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbae:	5b                   	pop    ebx
c001bbaf:	5e                   	pop    esi
c001bbb0:	c3                   	ret    

c001bbb1 <sysCallCloseDir(regs*)>:
c001bbb1:	53                   	push   ebx
c001bbb2:	83 ec 08             	sub    esp,0x8
c001bbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbbc:	8d 50 fd             	lea    edx,[eax-0x3]
c001bbbf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001bbc5:	77 2f                	ja     c001bbf6 <sysCallCloseDir(regs*)+0x45>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	50                   	push   eax
c001bbcb:	e8 13 59 ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001bbd0:	89 c3                	mov    ebx,eax
c001bbd2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbd5:	e8 fc 78 ff ff       	call   c00134d6 <Directory::close()>
c001bbda:	83 c4 10             	add    esp,0x10
c001bbdd:	85 db                	test   ebx,ebx
c001bbdf:	74 0c                	je     c001bbed <sysCallCloseDir(regs*)+0x3c>
c001bbe1:	83 ec 0c             	sub    esp,0xc
c001bbe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbe6:	53                   	push   ebx
c001bbe7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	31 d2                	xor    edx,edx
c001bbf1:	83 c4 08             	add    esp,0x8
c001bbf4:	5b                   	pop    ebx
c001bbf5:	c3                   	ret    
c001bbf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc00:	83 c4 08             	add    esp,0x8
c001bc03:	5b                   	pop    ebx
c001bc04:	c3                   	ret    

c001bc05 <sysCallMakeDir(regs*)>:
c001bc05:	56                   	push   esi
c001bc06:	53                   	push   ebx
c001bc07:	83 ec 10             	sub    esp,0x10
c001bc0a:	68 14 01 00 00       	push   0x114
c001bc0f:	e8 9f 3d ff ff       	call   c000f9b3 <malloc>
c001bc14:	83 c4 0c             	add    esp,0xc
c001bc17:	89 c3                	mov    ebx,eax
c001bc19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc25:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc28:	53                   	push   ebx
c001bc29:	e8 e8 77 ff ff       	call   c0013416 <Directory::Directory(char const*, Process*)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	85 db                	test   ebx,ebx
c001bc33:	74 32                	je     c001bc67 <sysCallMakeDir(regs*)+0x62>
c001bc35:	83 ec 0c             	sub    esp,0xc
c001bc38:	53                   	push   ebx
c001bc39:	e8 1c 7a ff ff       	call   c001365a <Directory::create()>
c001bc3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc41:	89 c6                	mov    esi,eax
c001bc43:	e8 8e 78 ff ff       	call   c00134d6 <Directory::close()>
c001bc48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	31 c0                	xor    eax,eax
c001bc55:	59                   	pop    ecx
c001bc56:	85 f6                	test   esi,esi
c001bc58:	5b                   	pop    ebx
c001bc59:	0f 95 c0             	setne  al
c001bc5c:	5e                   	pop    esi
c001bc5d:	31 d2                	xor    edx,edx
c001bc5f:	f7 d8                	neg    eax
c001bc61:	83 d2 00             	adc    edx,0x0
c001bc64:	f7 da                	neg    edx
c001bc66:	c3                   	ret    
c001bc67:	59                   	pop    ecx
c001bc68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc72:	5b                   	pop    ebx
c001bc73:	5e                   	pop    esi
c001bc74:	c3                   	ret    

c001bc75 <sysCallWait(regs*)>:
c001bc75:	83 ec 10             	sub    esp,0x10
c001bc78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc7c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc7f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc82:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc85:	e8 b4 24 00 00       	call   c001e13e <waitTask(int, int*, int)>
c001bc8a:	83 c4 1c             	add    esp,0x1c
c001bc8d:	99                   	cdq    
c001bc8e:	c3                   	ret    

c001bc8f <sysCallNotImpl(regs*)>:
c001bc8f:	83 ec 18             	sub    esp,0x18
c001bc92:	68 79 c5 02 c0       	push   0xc002c579
c001bc97:	e8 0d e7 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001bc9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca6:	83 c4 1c             	add    esp,0x1c
c001bca9:	c3                   	ret    

c001bcaa <sysPanic(regs*)>:
c001bcaa:	83 ec 18             	sub    esp,0x18
c001bcad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcb4:	e8 f0 e6 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001bcb9:	b8 01 00 00 00       	mov    eax,0x1
c001bcbe:	31 d2                	xor    edx,edx
c001bcc0:	83 c4 1c             	add    esp,0x1c
c001bcc3:	c3                   	ret    

c001bcc4 <sysCallRmdir(regs*)>:
c001bcc4:	56                   	push   esi
c001bcc5:	53                   	push   ebx
c001bcc6:	83 ec 20             	sub    esp,0x20
c001bcc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bccd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcd0:	68 14 01 00 00       	push   0x114
c001bcd5:	e8 d9 3c ff ff       	call   c000f9b3 <malloc>
c001bcda:	83 c4 0c             	add    esp,0xc
c001bcdd:	89 c3                	mov    ebx,eax
c001bcdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bce7:	56                   	push   esi
c001bce8:	53                   	push   ebx
c001bce9:	e8 7c 72 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001bcee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcf1:	e8 50 74 ff ff       	call   c0013146 <File::unlink()>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	85 db                	test   ebx,ebx
c001bcfb:	74 14                	je     c001bd11 <sysCallRmdir(regs*)+0x4d>
c001bcfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd01:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd03:	83 ec 0c             	sub    esp,0xc
c001bd06:	53                   	push   ebx
c001bd07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd11:	85 c0                	test   eax,eax
c001bd13:	0f 95 c0             	setne  al
c001bd16:	31 d2                	xor    edx,edx
c001bd18:	0f b6 c0             	movzx  eax,al
c001bd1b:	f7 d8                	neg    eax
c001bd1d:	83 d2 00             	adc    edx,0x0
c001bd20:	83 c4 14             	add    esp,0x14
c001bd23:	f7 da                	neg    edx
c001bd25:	5b                   	pop    ebx
c001bd26:	5e                   	pop    esi
c001bd27:	c3                   	ret    

c001bd28 <sysCallUnlink(regs*)>:
c001bd28:	56                   	push   esi
c001bd29:	53                   	push   ebx
c001bd2a:	83 ec 20             	sub    esp,0x20
c001bd2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd31:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd34:	68 14 01 00 00       	push   0x114
c001bd39:	e8 75 3c ff ff       	call   c000f9b3 <malloc>
c001bd3e:	83 c4 0c             	add    esp,0xc
c001bd41:	89 c3                	mov    ebx,eax
c001bd43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd48:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd4b:	56                   	push   esi
c001bd4c:	53                   	push   ebx
c001bd4d:	e8 18 72 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001bd52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd55:	e8 ec 73 ff ff       	call   c0013146 <File::unlink()>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	85 db                	test   ebx,ebx
c001bd5f:	74 14                	je     c001bd75 <sysCallUnlink(regs*)+0x4d>
c001bd61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd65:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd67:	83 ec 0c             	sub    esp,0xc
c001bd6a:	53                   	push   ebx
c001bd6b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd6e:	83 c4 10             	add    esp,0x10
c001bd71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd75:	85 c0                	test   eax,eax
c001bd77:	0f 95 c0             	setne  al
c001bd7a:	31 d2                	xor    edx,edx
c001bd7c:	0f b6 c0             	movzx  eax,al
c001bd7f:	f7 d8                	neg    eax
c001bd81:	83 d2 00             	adc    edx,0x0
c001bd84:	83 c4 14             	add    esp,0x14
c001bd87:	f7 da                	neg    edx
c001bd89:	5b                   	pop    ebx
c001bd8a:	5e                   	pop    esi
c001bd8b:	c3                   	ret    

c001bd8c <sysCallGetArgv(regs*)>:
c001bd8c:	83 ec 0c             	sub    esp,0xc
c001bd8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd93:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd96:	85 c0                	test   eax,eax
c001bd98:	78 2b                	js     c001bdc5 <sysCallGetArgv(regs*)+0x39>
c001bd9a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bda0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bda3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bda9:	7d 1a                	jge    c001bdc5 <sysCallGetArgv(regs*)+0x39>
c001bdab:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bdb2:	85 c0                	test   eax,eax
c001bdb4:	74 17                	je     c001bdcd <sysCallGetArgv(regs*)+0x41>
c001bdb6:	83 ec 08             	sub    esp,0x8
c001bdb9:	50                   	push   eax
c001bdba:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bdbd:	e8 4a 4a fe ff       	call   c000080c <strcpy>
c001bdc2:	83 c4 10             	add    esp,0x10
c001bdc5:	31 c0                	xor    eax,eax
c001bdc7:	31 d2                	xor    edx,edx
c001bdc9:	83 c4 0c             	add    esp,0xc
c001bdcc:	c3                   	ret    
c001bdcd:	b8 01 00 00 00       	mov    eax,0x1
c001bdd2:	31 d2                	xor    edx,edx
c001bdd4:	83 c4 0c             	add    esp,0xc
c001bdd7:	c3                   	ret    

c001bdd8 <sysCallTTYName(regs*)>:
c001bdd8:	56                   	push   esi
c001bdd9:	53                   	push   ebx
c001bdda:	53                   	push   ebx
c001bddb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bddf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bde2:	85 c0                	test   eax,eax
c001bde4:	74 5f                	je     c001be45 <sysCallTTYName(regs*)+0x6d>
c001bde6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bde9:	83 f8 02             	cmp    eax,0x2
c001bdec:	77 3e                	ja     c001be2c <sysCallTTYName(regs*)+0x54>
c001bdee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdf6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bdfc:	85 db                	test   ebx,ebx
c001bdfe:	74 45                	je     c001be45 <sysCallTTYName(regs*)+0x6d>
c001be00:	83 ec 0c             	sub    esp,0xc
c001be03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be05:	53                   	push   ebx
c001be06:	ff 10                	call   DWORD PTR [eax]
c001be08:	83 c4 10             	add    esp,0x10
c001be0b:	84 c0                	test   al,al
c001be0d:	74 41                	je     c001be50 <sysCallTTYName(regs*)+0x78>
c001be0f:	83 ec 08             	sub    esp,0x8
c001be12:	81 c3 82 00 00 00    	add    ebx,0x82
c001be18:	53                   	push   ebx
c001be19:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be1c:	e8 eb 49 fe ff       	call   c000080c <strcpy>
c001be21:	83 c4 10             	add    esp,0x10
c001be24:	31 c0                	xor    eax,eax
c001be26:	59                   	pop    ecx
c001be27:	31 d2                	xor    edx,edx
c001be29:	5b                   	pop    ebx
c001be2a:	5e                   	pop    esi
c001be2b:	c3                   	ret    
c001be2c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be31:	74 bb                	je     c001bdee <sysCallTTYName(regs*)+0x16>
c001be33:	83 ec 0c             	sub    esp,0xc
c001be36:	50                   	push   eax
c001be37:	e8 a7 56 ff ff       	call   c00114e3 <getFromFileDescriptor(int)>
c001be3c:	83 c4 10             	add    esp,0x10
c001be3f:	89 c3                	mov    ebx,eax
c001be41:	85 db                	test   ebx,ebx
c001be43:	75 bb                	jne    c001be00 <sysCallTTYName(regs*)+0x28>
c001be45:	59                   	pop    ecx
c001be46:	b8 01 00 00 00       	mov    eax,0x1
c001be4b:	31 d2                	xor    edx,edx
c001be4d:	5b                   	pop    ebx
c001be4e:	5e                   	pop    esi
c001be4f:	c3                   	ret    
c001be50:	59                   	pop    ecx
c001be51:	b8 02 00 00 00       	mov    eax,0x2
c001be56:	31 d2                	xor    edx,edx
c001be58:	5b                   	pop    ebx
c001be59:	5e                   	pop    esi
c001be5a:	c3                   	ret    

c001be5b <sysCallUSleep(regs*)>:
c001be5b:	83 ec 14             	sub    esp,0x14
c001be5e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be67:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be6e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be71:	01 ca                	add    edx,ecx
c001be73:	52                   	push   edx
c001be74:	50                   	push   eax
c001be75:	e8 9b 23 00 00       	call   c001e215 <nanoSleep(unsigned long long)>
c001be7a:	31 c0                	xor    eax,eax
c001be7c:	31 d2                	xor    edx,edx
c001be7e:	83 c4 1c             	add    esp,0x1c
c001be81:	c3                   	ret    

c001be82 <sysCallSpawn(regs*)>:
c001be82:	56                   	push   esi
c001be83:	53                   	push   ebx
c001be84:	50                   	push   eax
c001be85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be89:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be8c:	85 c0                	test   eax,eax
c001be8e:	75 08                	jne    c001be98 <sysCallSpawn(regs*)+0x16>
c001be90:	59                   	pop    ecx
c001be91:	31 c0                	xor    eax,eax
c001be93:	31 d2                	xor    edx,edx
c001be95:	5b                   	pop    ebx
c001be96:	5e                   	pop    esi
c001be97:	c3                   	ret    
c001be98:	83 ec 0c             	sub    esp,0xc
c001be9b:	68 3f 07 00 00       	push   0x73f
c001bea0:	e8 0e 3b ff ff       	call   c000f9b3 <malloc>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	89 c6                	mov    esi,eax
c001beaa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bead:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001beb0:	85 c0                	test   eax,eax
c001beb2:	75 32                	jne    c001bee6 <sysCallSpawn(regs*)+0x64>
c001beb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bebc:	52                   	push   edx
c001bebd:	50                   	push   eax
c001bebe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bec1:	56                   	push   esi
c001bec2:	e8 73 1a 00 00       	call   c001d93a <Process::Process(char const*, Process*, char**)>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bed1:	75 bd                	jne    c001be90 <sysCallSpawn(regs*)+0xe>
c001bed3:	83 ec 0c             	sub    esp,0xc
c001bed6:	56                   	push   esi
c001bed7:	e8 40 1f 00 00       	call   c001de1c <Process::createUserThread()>
c001bedc:	8b 06                	mov    eax,DWORD PTR [esi]
c001bede:	83 c4 10             	add    esp,0x10
c001bee1:	99                   	cdq    
c001bee2:	59                   	pop    ecx
c001bee3:	5b                   	pop    ebx
c001bee4:	5e                   	pop    esi
c001bee5:	c3                   	ret    
c001bee6:	31 c0                	xor    eax,eax
c001bee8:	eb d2                	jmp    c001bebc <sysCallSpawn(regs*)+0x3a>

c001beea <sysCallGetEnv(regs*)>:
c001beea:	57                   	push   edi
c001beeb:	56                   	push   esi
c001beec:	53                   	push   ebx
c001beed:	83 ec 1c             	sub    esp,0x1c
c001bef0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001befc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001beff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf02:	e8 ee e3 ff ff       	call   c001a2f5 <Krnl::getProcessTotalEnvCount(Process*)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	39 c7                	cmp    edi,eax
c001bf0c:	7c 14                	jl     c001bf22 <sysCallGetEnv(regs*)+0x38>
c001bf0e:	85 f6                	test   esi,esi
c001bf10:	75 0b                	jne    c001bf1d <sysCallGetEnv(regs*)+0x33>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	31 c0                	xor    eax,eax
c001bf17:	5b                   	pop    ebx
c001bf18:	31 d2                	xor    edx,edx
c001bf1a:	5e                   	pop    esi
c001bf1b:	5f                   	pop    edi
c001bf1c:	c3                   	ret    
c001bf1d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf20:	eb f0                	jmp    c001bf12 <sysCallGetEnv(regs*)+0x28>
c001bf22:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf26:	52                   	push   edx
c001bf27:	57                   	push   edi
c001bf28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf2e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf31:	50                   	push   eax
c001bf32:	e8 de e3 ff ff       	call   c001a315 <Krnl::getProcessEnvPair(Process*, int)>
c001bf37:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf3e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf42:	83 c4 0c             	add    esp,0xc
c001bf45:	85 c9                	test   ecx,ecx
c001bf47:	75 23                	jne    c001bf6c <sysCallGetEnv(regs*)+0x82>
c001bf49:	83 ec 0c             	sub    esp,0xc
c001bf4c:	50                   	push   eax
c001bf4d:	e8 1a 48 fe ff       	call   c000076c <strlen>
c001bf52:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf55:	89 c3                	mov    ebx,eax
c001bf57:	e8 10 48 fe ff       	call   c000076c <strlen>
c001bf5c:	83 c4 10             	add    esp,0x10
c001bf5f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf63:	83 c4 10             	add    esp,0x10
c001bf66:	31 d2                	xor    edx,edx
c001bf68:	5b                   	pop    ebx
c001bf69:	5e                   	pop    esi
c001bf6a:	5f                   	pop    edi
c001bf6b:	c3                   	ret    
c001bf6c:	83 ec 08             	sub    esp,0x8
c001bf6f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bf72:	50                   	push   eax
c001bf73:	56                   	push   esi
c001bf74:	e8 93 48 fe ff       	call   c000080c <strcpy>
c001bf79:	58                   	pop    eax
c001bf7a:	5a                   	pop    edx
c001bf7b:	68 93 c5 02 c0       	push   0xc002c593
c001bf80:	56                   	push   esi
c001bf81:	e8 c6 49 fe ff       	call   c000094c <strcat>
c001bf86:	59                   	pop    ecx
c001bf87:	5b                   	pop    ebx
c001bf88:	57                   	push   edi
c001bf89:	56                   	push   esi
c001bf8a:	e8 bd 49 fe ff       	call   c000094c <strcat>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	e9 7b ff ff ff       	jmp    c001bf12 <sysCallGetEnv(regs*)+0x28>

c001bf97 <sysAppSettings(regs*)>:
c001bf97:	57                   	push   edi
c001bf98:	56                   	push   esi
c001bf99:	56                   	push   esi
c001bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bfa1:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bfa7:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfac:	66 3d c0 09          	cmp    ax,0x9c0
c001bfb0:	75 2e                	jne    c001bfe0 <sysAppSettings(regs*)+0x49>
c001bfb2:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bfb8:	83 e0 1f             	and    eax,0x1f
c001bfbb:	3c 01                	cmp    al,0x1
c001bfbd:	74 2c                	je     c001bfeb <sysAppSettings(regs*)+0x54>
c001bfbf:	3c 07                	cmp    al,0x7
c001bfc1:	0f 84 b3 00 00 00    	je     c001c07a <sysAppSettings(regs*)+0xe3>
c001bfc7:	84 c0                	test   al,al
c001bfc9:	0f 84 d2 00 00 00    	je     c001c0a1 <sysAppSettings(regs*)+0x10a>
c001bfcf:	3c 08                	cmp    al,0x8
c001bfd1:	74 63                	je     c001c036 <sysAppSettings(regs*)+0x9f>
c001bfd3:	59                   	pop    ecx
c001bfd4:	0f b6 c0             	movzx  eax,al
c001bfd7:	5e                   	pop    esi
c001bfd8:	05 e8 03 00 00       	add    eax,0x3e8
c001bfdd:	5f                   	pop    edi
c001bfde:	99                   	cdq    
c001bfdf:	c3                   	ret    
c001bfe0:	b8 01 00 00 00       	mov    eax,0x1
c001bfe5:	59                   	pop    ecx
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	5e                   	pop    esi
c001bfe9:	5f                   	pop    edi
c001bfea:	c3                   	ret    
c001bfeb:	50                   	push   eax
c001bfec:	68 00 01 00 00       	push   0x100
c001bff1:	6a 00                	push   0x0
c001bff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bffb:	83 c0 0c             	add    eax,0xc
c001bffe:	50                   	push   eax
c001bfff:	e8 4c 47 fe ff       	call   c0000750 <memset>
c001c004:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c009:	b9 ff 00 00 00       	mov    ecx,0xff
c001c00e:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c011:	83 c7 0c             	add    edi,0xc
c001c014:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c01b:	5a                   	pop    edx
c001c01c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c01f:	59                   	pop    ecx
c001c020:	8d 50 0c             	lea    edx,[eax+0xc]
c001c023:	52                   	push   edx
c001c024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c02a:	e8 dd 45 ff ff       	call   c001060c <VgaText::setTitle(char*)>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	31 c0                	xor    eax,eax
c001c034:	eb af                	jmp    c001bfe5 <sysAppSettings(regs*)+0x4e>
c001c036:	83 ec 08             	sub    esp,0x8
c001c039:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c03f:	83 e0 0f             	and    eax,0xf
c001c042:	50                   	push   eax
c001c043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c048:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c04b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c051:	e8 a6 45 ff ff       	call   c00105fc <VgaText::setTitleColour(VgaColour)>
c001c056:	5f                   	pop    edi
c001c057:	58                   	pop    eax
c001c058:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c05e:	c1 e8 04             	shr    eax,0x4
c001c061:	83 e0 0f             	and    eax,0xf
c001c064:	50                   	push   eax
c001c065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c06a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c06d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c073:	e8 74 45 ff ff       	call   c00105ec <VgaText::setTitleTextColour(VgaColour)>
c001c078:	eb b5                	jmp    c001c02f <sysAppSettings(regs*)+0x98>
c001c07a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c07f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c082:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c088:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c08e:	c0 e8 06             	shr    al,0x6
c001c091:	83 e0 01             	and    eax,0x1
c001c094:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c09a:	31 c0                	xor    eax,eax
c001c09c:	e9 44 ff ff ff       	jmp    c001bfe5 <sysAppSettings(regs*)+0x4e>
c001c0a1:	b8 02 00 00 00       	mov    eax,0x2
c001c0a6:	e9 3a ff ff ff       	jmp    c001bfe5 <sysAppSettings(regs*)+0x4e>

c001c0ab <sysSetFatAttrib(regs*)>:
c001c0ab:	57                   	push   edi
c001c0ac:	56                   	push   esi
c001c0ad:	53                   	push   ebx
c001c0ae:	83 ec 1c             	sub    esp,0x1c
c001c0b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0b5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0b8:	68 14 01 00 00       	push   0x114
c001c0bd:	e8 f1 38 ff ff       	call   c000f9b3 <malloc>
c001c0c2:	83 c4 0c             	add    esp,0xc
c001c0c5:	89 c3                	mov    ebx,eax
c001c0c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0cf:	57                   	push   edi
c001c0d0:	53                   	push   ebx
c001c0d1:	e8 94 6e ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001c0d6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c0d9:	83 c4 0c             	add    esp,0xc
c001c0dc:	0f b6 d4             	movzx  edx,ah
c001c0df:	0f b6 c0             	movzx  eax,al
c001c0e2:	52                   	push   edx
c001c0e3:	50                   	push   eax
c001c0e4:	53                   	push   ebx
c001c0e5:	e8 f6 70 ff ff       	call   c00131e0 <File::chfatattr(unsigned char, unsigned char)>
c001c0ea:	83 c4 10             	add    esp,0x10
c001c0ed:	85 db                	test   ebx,ebx
c001c0ef:	74 14                	je     c001c105 <sysSetFatAttrib(regs*)+0x5a>
c001c0f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c0f7:	83 ec 0c             	sub    esp,0xc
c001c0fa:	53                   	push   ebx
c001c0fb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0fe:	83 c4 10             	add    esp,0x10
c001c101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c105:	85 c0                	test   eax,eax
c001c107:	0f 95 c0             	setne  al
c001c10a:	31 d2                	xor    edx,edx
c001c10c:	0f b6 c0             	movzx  eax,al
c001c10f:	f7 d8                	neg    eax
c001c111:	83 d2 00             	adc    edx,0x0
c001c114:	83 c4 10             	add    esp,0x10
c001c117:	f7 da                	neg    edx
c001c119:	5b                   	pop    ebx
c001c11a:	5e                   	pop    esi
c001c11b:	5f                   	pop    edi
c001c11c:	c3                   	ret    

c001c11d <sysPipe(regs*)>:
c001c11d:	57                   	push   edi
c001c11e:	56                   	push   esi
c001c11f:	53                   	push   ebx
c001c120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c124:	83 ec 0c             	sub    esp,0xc
c001c127:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c12a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c12d:	6a 20                	push   0x20
c001c12f:	e8 7f 38 ff ff       	call   c000f9b3 <malloc>
c001c134:	89 c3                	mov    ebx,eax
c001c136:	58                   	pop    eax
c001c137:	5a                   	pop    edx
c001c138:	68 00 50 00 00       	push   0x5000
c001c13d:	53                   	push   ebx
c001c13e:	e8 41 42 ff ff       	call   c0010384 <Pipe::Pipe(int)>
c001c143:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c146:	e8 a3 50 ff ff       	call   c00111ee <UnixFile::getFileDescriptor()>
c001c14b:	89 07                	mov    DWORD PTR [edi],eax
c001c14d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c150:	e8 99 50 ff ff       	call   c00111ee <UnixFile::getFileDescriptor()>
c001c155:	83 c4 10             	add    esp,0x10
c001c158:	89 06                	mov    DWORD PTR [esi],eax
c001c15a:	31 d2                	xor    edx,edx
c001c15c:	5b                   	pop    ebx
c001c15d:	31 c0                	xor    eax,eax
c001c15f:	5e                   	pop    esi
c001c160:	5f                   	pop    edi
c001c161:	c3                   	ret    

c001c162 <sysGetUnixTime(regs*)>:
c001c162:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001c167:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c16d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c171:	e9 e6 77 ff ff       	jmp    c001395c <Clock::timeInSecondsLocal()>

c001c176 <string_ends_with(char const*, char const*)>:
c001c176:	57                   	push   edi
c001c177:	56                   	push   esi
c001c178:	53                   	push   ebx
c001c179:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c17d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c181:	83 ec 0c             	sub    esp,0xc
c001c184:	53                   	push   ebx
c001c185:	e8 e2 45 fe ff       	call   c000076c <strlen>
c001c18a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c18d:	89 c6                	mov    esi,eax
c001c18f:	e8 d8 45 fe ff       	call   c000076c <strlen>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	39 c6                	cmp    esi,eax
c001c199:	7d 06                	jge    c001c1a1 <string_ends_with(char const*, char const*)+0x2b>
c001c19b:	5b                   	pop    ebx
c001c19c:	31 c0                	xor    eax,eax
c001c19e:	5e                   	pop    esi
c001c19f:	5f                   	pop    edi
c001c1a0:	c3                   	ret    
c001c1a1:	83 ec 08             	sub    esp,0x8
c001c1a4:	29 c6                	sub    esi,eax
c001c1a6:	57                   	push   edi
c001c1a7:	01 f3                	add    ebx,esi
c001c1a9:	53                   	push   ebx
c001c1aa:	e8 e9 46 fe ff       	call   c0000898 <strcmp>
c001c1af:	83 c4 10             	add    esp,0x10
c001c1b2:	85 c0                	test   eax,eax
c001c1b4:	5b                   	pop    ebx
c001c1b5:	0f 94 c0             	sete   al
c001c1b8:	5e                   	pop    esi
c001c1b9:	0f b6 c0             	movzx  eax,al
c001c1bc:	5f                   	pop    edi
c001c1bd:	c3                   	ret    

c001c1be <sysCallOpen(regs*)>:
c001c1be:	56                   	push   esi
c001c1bf:	53                   	push   ebx
c001c1c0:	81 ec 04 01 00 00    	sub    esp,0x104
c001c1c6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c1cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c1d0:	85 c9                	test   ecx,ecx
c001c1d2:	0f 84 ad 01 00 00    	je     c001c385 <sysCallOpen(regs*)+0x1c7>
c001c1d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c1db:	85 c0                	test   eax,eax
c001c1dd:	0f 84 a2 01 00 00    	je     c001c385 <sysCallOpen(regs*)+0x1c7>
c001c1e3:	52                   	push   edx
c001c1e4:	68 95 c5 02 c0       	push   0xc002c595
c001c1e9:	50                   	push   eax
c001c1ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c1ee:	56                   	push   esi
c001c1ef:	e8 cc 6b ff ff       	call   c0012dc0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1f7:	e8 70 45 fe ff       	call   c000076c <strlen>
c001c1fc:	83 c4 10             	add    esp,0x10
c001c1ff:	48                   	dec    eax
c001c200:	74 1d                	je     c001c21f <sysCallOpen(regs*)+0x61>
c001c202:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c205:	eb 0f                	jmp    c001c216 <sysCallOpen(regs*)+0x58>
c001c207:	80 fa 3a             	cmp    dl,0x3a
c001c20a:	74 0f                	je     c001c21b <sysCallOpen(regs*)+0x5d>
c001c20c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c210:	48                   	dec    eax
c001c211:	74 0c                	je     c001c21f <sysCallOpen(regs*)+0x61>
c001c213:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c216:	80 fa 2e             	cmp    dl,0x2e
c001c219:	75 ec                	jne    c001c207 <sysCallOpen(regs*)+0x49>
c001c21b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c21f:	83 ec 08             	sub    esp,0x8
c001c222:	68 99 c5 02 c0       	push   0xc002c599
c001c227:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c22a:	e8 47 ff ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c22f:	83 c4 10             	add    esp,0x10
c001c232:	85 c0                	test   eax,eax
c001c234:	74 1d                	je     c001c253 <sysCallOpen(regs*)+0x95>
c001c236:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c239:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c23f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c246:	81 c4 04 01 00 00    	add    esp,0x104
c001c24c:	31 c0                	xor    eax,eax
c001c24e:	31 d2                	xor    edx,edx
c001c250:	5b                   	pop    ebx
c001c251:	5e                   	pop    esi
c001c252:	c3                   	ret    
c001c253:	83 ec 08             	sub    esp,0x8
c001c256:	68 9e c5 02 c0       	push   0xc002c59e
c001c25b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c25e:	e8 13 ff ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	85 c0                	test   eax,eax
c001c268:	75 cc                	jne    c001c236 <sysCallOpen(regs*)+0x78>
c001c26a:	83 ec 08             	sub    esp,0x8
c001c26d:	68 9a c5 02 c0       	push   0xc002c59a
c001c272:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c275:	e8 1e 46 fe ff       	call   c0000898 <strcmp>
c001c27a:	83 c4 10             	add    esp,0x10
c001c27d:	85 c0                	test   eax,eax
c001c27f:	74 b5                	je     c001c236 <sysCallOpen(regs*)+0x78>
c001c281:	83 ec 08             	sub    esp,0x8
c001c284:	68 99 c5 02 c0       	push   0xc002c599
c001c289:	56                   	push   esi
c001c28a:	e8 e7 fe ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	85 c0                	test   eax,eax
c001c294:	75 a0                	jne    c001c236 <sysCallOpen(regs*)+0x78>
c001c296:	83 ec 08             	sub    esp,0x8
c001c299:	68 a3 c5 02 c0       	push   0xc002c5a3
c001c29e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2a1:	e8 d0 fe ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c2a6:	83 c4 10             	add    esp,0x10
c001c2a9:	85 c0                	test   eax,eax
c001c2ab:	0f 85 e7 00 00 00    	jne    c001c398 <sysCallOpen(regs*)+0x1da>
c001c2b1:	83 ec 08             	sub    esp,0x8
c001c2b4:	68 a8 c5 02 c0       	push   0xc002c5a8
c001c2b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2bc:	e8 b5 fe ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c2c1:	83 c4 10             	add    esp,0x10
c001c2c4:	85 c0                	test   eax,eax
c001c2c6:	0f 85 cc 00 00 00    	jne    c001c398 <sysCallOpen(regs*)+0x1da>
c001c2cc:	83 ec 08             	sub    esp,0x8
c001c2cf:	68 a4 c5 02 c0       	push   0xc002c5a4
c001c2d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2d7:	e8 bc 45 fe ff       	call   c0000898 <strcmp>
c001c2dc:	83 c4 10             	add    esp,0x10
c001c2df:	85 c0                	test   eax,eax
c001c2e1:	0f 84 b1 00 00 00    	je     c001c398 <sysCallOpen(regs*)+0x1da>
c001c2e7:	83 ec 08             	sub    esp,0x8
c001c2ea:	68 a3 c5 02 c0       	push   0xc002c5a3
c001c2ef:	56                   	push   esi
c001c2f0:	e8 81 fe ff ff       	call   c001c176 <string_ends_with(char const*, char const*)>
c001c2f5:	83 c4 10             	add    esp,0x10
c001c2f8:	85 c0                	test   eax,eax
c001c2fa:	0f 85 98 00 00 00    	jne    c001c398 <sysCallOpen(regs*)+0x1da>
c001c300:	83 ec 0c             	sub    esp,0xc
c001c303:	68 14 01 00 00       	push   0x114
c001c308:	e8 a6 36 ff ff       	call   c000f9b3 <malloc>
c001c30d:	83 c4 0c             	add    esp,0xc
c001c310:	89 c6                	mov    esi,eax
c001c312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c317:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c31a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c31d:	56                   	push   esi
c001c31e:	e8 47 6c ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	85 f6                	test   esi,esi
c001c328:	74 5b                	je     c001c385 <sysCallOpen(regs*)+0x1c7>
c001c32a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c32d:	0f b6 c2             	movzx  eax,dl
c001c330:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c333:	89 d0                	mov    eax,edx
c001c335:	83 e0 01             	and    eax,0x1
c001c338:	f6 c2 02             	test   dl,0x2
c001c33b:	74 03                	je     c001c340 <sysCallOpen(regs*)+0x182>
c001c33d:	83 c8 02             	or     eax,0x2
c001c340:	f6 c2 04             	test   dl,0x4
c001c343:	74 03                	je     c001c348 <sysCallOpen(regs*)+0x18a>
c001c345:	83 c8 04             	or     eax,0x4
c001c348:	f6 c2 08             	test   dl,0x8
c001c34b:	74 03                	je     c001c350 <sysCallOpen(regs*)+0x192>
c001c34d:	83 c8 0a             	or     eax,0xa
c001c350:	83 e2 10             	and    edx,0x10
c001c353:	74 03                	je     c001c358 <sysCallOpen(regs*)+0x19a>
c001c355:	83 c8 12             	or     eax,0x12
c001c358:	83 ec 08             	sub    esp,0x8
c001c35b:	50                   	push   eax
c001c35c:	56                   	push   esi
c001c35d:	e8 6c 6c ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001c362:	83 c4 10             	add    esp,0x10
c001c365:	85 c0                	test   eax,eax
c001c367:	75 1c                	jne    c001c385 <sysCallOpen(regs*)+0x1c7>
c001c369:	83 ec 0c             	sub    esp,0xc
c001c36c:	56                   	push   esi
c001c36d:	e8 7c 4e ff ff       	call   c00111ee <UnixFile::getFileDescriptor()>
c001c372:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c375:	83 c4 10             	add    esp,0x10
c001c378:	89 02                	mov    DWORD PTR [edx],eax
c001c37a:	c1 f8 1f             	sar    eax,0x1f
c001c37d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c380:	e9 c1 fe ff ff       	jmp    c001c246 <sysCallOpen(regs*)+0x88>
c001c385:	81 c4 04 01 00 00    	add    esp,0x104
c001c38b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c390:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c395:	5b                   	pop    ebx
c001c396:	5e                   	pop    esi
c001c397:	c3                   	ret    
c001c398:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c39b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c3a1:	e9 99 fe ff ff       	jmp    c001c23f <sysCallOpen(regs*)+0x81>

c001c3a6 <Sys::loadSyscalls()>:
c001c3a6:	c7 05 a0 f1 02 c0 13 b6 01 c0 	mov    DWORD PTR ds:0xc002f1a0,0xc001b613
c001c3b0:	c7 05 a4 f1 02 c0 08 b2 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001b208
c001c3ba:	c7 05 a8 f1 02 c0 f9 b3 01 c0 	mov    DWORD PTR ds:0xc002f1a8,0xc001b3f9
c001c3c4:	c7 05 ac f1 02 c0 49 b5 01 c0 	mov    DWORD PTR ds:0xc002f1ac,0xc001b549
c001c3ce:	c7 05 b0 f1 02 c0 91 b3 01 c0 	mov    DWORD PTR ds:0xc002f1b0,0xc001b391
c001c3d8:	c7 05 b4 f1 02 c0 3f b2 01 c0 	mov    DWORD PTR ds:0xc002f1b4,0xc001b23f
c001c3e2:	c7 05 b8 f1 02 c0 20 b2 01 c0 	mov    DWORD PTR ds:0xc002f1b8,0xc001b220
c001c3ec:	c7 05 bc f1 02 c0 4e b4 01 c0 	mov    DWORD PTR ds:0xc002f1bc,0xc001b44e
c001c3f6:	c7 05 c4 f1 02 c0 dc ba 01 c0 	mov    DWORD PTR ds:0xc002f1c4,0xc001badc
c001c400:	c7 05 c0 f1 02 c0 be c1 01 c0 	mov    DWORD PTR ds:0xc002f1c0,0xc001c1be
c001c40a:	c7 05 c8 f1 02 c0 3c bb 01 c0 	mov    DWORD PTR ds:0xc002f1c8,0xc001bb3c
c001c414:	c7 05 cc f1 02 c0 1f b8 01 c0 	mov    DWORD PTR ds:0xc002f1cc,0xc001b81f
c001c41e:	c7 05 d0 f1 02 c0 59 b6 01 c0 	mov    DWORD PTR ds:0xc002f1d0,0xc001b659
c001c428:	c7 05 d4 f1 02 c0 5e b6 01 c0 	mov    DWORD PTR ds:0xc002f1d4,0xc001b65e
c001c432:	c7 05 d8 f1 02 c0 05 bc 01 c0 	mov    DWORD PTR ds:0xc002f1d8,0xc001bc05
c001c43c:	c7 05 dc f1 02 c0 b1 bb 01 c0 	mov    DWORD PTR ds:0xc002f1dc,0xc001bbb1
c001c446:	c7 05 e0 f1 02 c0 f8 b8 01 c0 	mov    DWORD PTR ds:0xc002f1e0,0xc001b8f8
c001c450:	c7 05 e4 f1 02 c0 4f b9 01 c0 	mov    DWORD PTR ds:0xc002f1e4,0xc001b94f
c001c45a:	c7 05 e8 f1 02 c0 bb b9 01 c0 	mov    DWORD PTR ds:0xc002f1e8,0xc001b9bb
c001c464:	c7 05 ec f1 02 c0 63 b6 01 c0 	mov    DWORD PTR ds:0xc002f1ec,0xc001b663
c001c46e:	c7 05 f0 f1 02 c0 75 bc 01 c0 	mov    DWORD PTR ds:0xc002f1f0,0xc001bc75
c001c478:	c7 05 f4 f1 02 c0 8f bc 01 c0 	mov    DWORD PTR ds:0xc002f1f4,0xc001bc8f
c001c482:	c7 05 f8 f1 02 c0 8f bc 01 c0 	mov    DWORD PTR ds:0xc002f1f8,0xc001bc8f
c001c48c:	c7 05 fc f1 02 c0 c4 bc 01 c0 	mov    DWORD PTR ds:0xc002f1fc,0xc001bcc4
c001c496:	c7 05 00 f2 02 c0 28 bd 01 c0 	mov    DWORD PTR ds:0xc002f200,0xc001bd28
c001c4a0:	c7 05 04 f2 02 c0 6d b6 01 c0 	mov    DWORD PTR ds:0xc002f204,0xc001b66d
c001c4aa:	c7 05 08 f2 02 c0 8c bd 01 c0 	mov    DWORD PTR ds:0xc002f208,0xc001bd8c
c001c4b4:	c7 05 0c f2 02 c0 dc b7 01 c0 	mov    DWORD PTR ds:0xc002f20c,0xc001b7dc
c001c4be:	c7 05 10 f2 02 c0 d8 bd 01 c0 	mov    DWORD PTR ds:0xc002f210,0xc001bdd8
c001c4c8:	c7 05 14 f2 02 c0 9e b8 01 c0 	mov    DWORD PTR ds:0xc002f214,0xc001b89e
c001c4d2:	c7 05 18 f2 02 c0 5b be 01 c0 	mov    DWORD PTR ds:0xc002f218,0xc001be5b
c001c4dc:	c7 05 1c f2 02 c0 2d ba 01 c0 	mov    DWORD PTR ds:0xc002f21c,0xc001ba2d
c001c4e6:	c7 05 20 f2 02 c0 82 be 01 c0 	mov    DWORD PTR ds:0xc002f220,0xc001be82
c001c4f0:	c7 05 24 f2 02 c0 ea be 01 c0 	mov    DWORD PTR ds:0xc002f224,0xc001beea
c001c4fa:	c7 05 28 f2 02 c0 97 bf 01 c0 	mov    DWORD PTR ds:0xc002f228,0xc001bf97
c001c504:	c7 05 2c f2 02 c0 7d b6 01 c0 	mov    DWORD PTR ds:0xc002f22c,0xc001b67d
c001c50e:	c7 05 30 f2 02 c0 e7 b6 01 c0 	mov    DWORD PTR ds:0xc002f230,0xc001b6e7
c001c518:	c7 05 34 f2 02 c0 2d b7 01 c0 	mov    DWORD PTR ds:0xc002f234,0xc001b72d
c001c522:	c7 05 38 f2 02 c0 ab c0 01 c0 	mov    DWORD PTR ds:0xc002f238,0xc001c0ab
c001c52c:	c7 05 3c f2 02 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc002f23c,0xc001bcaa
c001c536:	c7 05 40 f2 02 c0 7e b7 01 c0 	mov    DWORD PTR ds:0xc002f240,0xc001b77e
c001c540:	c7 05 44 f2 02 c0 1d c1 01 c0 	mov    DWORD PTR ds:0xc002f244,0xc001c11d
c001c54a:	c7 05 48 f2 02 c0 62 c1 01 c0 	mov    DWORD PTR ds:0xc002f248,0xc001c162
c001c554:	c7 05 4c f2 02 c0 e9 b2 01 c0 	mov    DWORD PTR ds:0xc002f24c,0xc001b2e9
c001c55e:	c7 05 50 f2 02 c0 6a b4 01 c0 	mov    DWORD PTR ds:0xc002f250,0xc001b46a
c001c568:	c7 05 54 f2 02 c0 ff b4 01 c0 	mov    DWORD PTR ds:0xc002f254,0xc001b4ff
c001c572:	c7 05 58 f2 02 c0 d2 b1 01 c0 	mov    DWORD PTR ds:0xc002f258,0xc001b1d2
c001c57c:	c7 05 5c f2 02 c0 b1 b5 01 c0 	mov    DWORD PTR ds:0xc002f25c,0xc001b5b1
c001c586:	c7 05 60 f2 02 c0 4b b2 01 c0 	mov    DWORD PTR ds:0xc002f260,0xc001b24b
c001c590:	c7 05 64 f2 02 c0 65 b2 01 c0 	mov    DWORD PTR ds:0xc002f264,0xc001b265
c001c59a:	c3                   	ret    

c001c59b <Sys::systemCall(regs*, void*)>:
c001c59b:	53                   	push   ebx
c001c59c:	83 ec 08             	sub    esp,0x8
c001c59f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5a3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c5a6:	83 f8 7f             	cmp    eax,0x7f
c001c5a9:	77 16                	ja     c001c5c1 <Sys::systemCall(regs*, void*)+0x26>
c001c5ab:	8b 14 85 a0 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e60]
c001c5b2:	85 d2                	test   edx,edx
c001c5b4:	74 0b                	je     c001c5c1 <Sys::systemCall(regs*, void*)+0x26>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	53                   	push   ebx
c001c5ba:	ff d2                	call   edx
c001c5bc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c5bf:	eb 0d                	jmp    c001c5ce <Sys::systemCall(regs*, void*)+0x33>
c001c5c1:	52                   	push   edx
c001c5c2:	52                   	push   edx
c001c5c3:	50                   	push   eax
c001c5c4:	68 ad c5 02 c0       	push   0xc002c5ad
c001c5c9:	e8 3d 64 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c5d6:	31 d2                	xor    edx,edx
c001c5d8:	83 c4 08             	add    esp,0x8
c001c5db:	5b                   	pop    ebx
c001c5dc:	c3                   	ret    

c001c5dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c5dd:	55                   	push   ebp
c001c5de:	57                   	push   edi
c001c5df:	56                   	push   esi
c001c5e0:	53                   	push   ebx
c001c5e1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c5e7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c5ee:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c5f5:	85 c0                	test   eax,eax
c001c5f7:	0f 95 c1             	setne  cl
c001c5fa:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c602:	0f 94 c2             	sete   dl
c001c605:	84 d1                	test   cl,dl
c001c607:	74 23                	je     c001c62c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c609:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c60f:	74 1b                	je     c001c62c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c611:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c617:	89 da                	mov    edx,ebx
c001c619:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c61f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c625:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c62c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c633:	05 ff 0f 00 00       	add    eax,0xfff
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c63f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c645:	c1 e8 0c             	shr    eax,0xc
c001c648:	89 fe                	mov    esi,edi
c001c64a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c64e:	c1 ee 0c             	shr    esi,0xc
c001c651:	6a 01                	push   0x1
c001c653:	e8 e1 4f ff ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c001c658:	89 c5                	mov    ebp,eax
c001c65a:	58                   	pop    eax
c001c65b:	5a                   	pop    edx
c001c65c:	56                   	push   esi
c001c65d:	68 c1 c5 02 c0       	push   0xc002c5c1
c001c662:	e8 a4 63 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001c667:	59                   	pop    ecx
c001c668:	58                   	pop    eax
c001c669:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c66d:	68 d3 c5 02 c0       	push   0xc002c5d3
c001c672:	e8 94 63 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c680:	0f 86 31 01 00 00    	jbe    c001c7b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c686:	c1 e6 0c             	shl    esi,0xc
c001c689:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c68c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c693:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c69a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c69d:	01 df                	add    edi,ebx
c001c69f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c6a2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c6a6:	0f 84 08 01 00 00    	je     c001c7b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c6ac:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c6b2:	76 05                	jbe    c001c6b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c6b4:	bf 00 10 00 00       	mov    edi,0x1000
c001c6b9:	83 ec 0c             	sub    esp,0xc
c001c6bc:	31 d2                	xor    edx,edx
c001c6be:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c6c7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c6cb:	50                   	push   eax
c001c6cc:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c6d0:	56                   	push   esi
c001c6d1:	52                   	push   edx
c001c6d2:	57                   	push   edi
c001c6d3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c6da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6dd:	83 c4 20             	add    esp,0x20
c001c6e0:	85 c0                	test   eax,eax
c001c6e2:	74 0a                	je     c001c6ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c6e4:	53                   	push   ebx
c001c6e5:	53                   	push   ebx
c001c6e6:	50                   	push   eax
c001c6e7:	68 e5 c5 02 c0       	push   0xc002c5e5
c001c6ec:	eb 0f                	jmp    c001c6fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c6ee:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c6f2:	74 20                	je     c001c714 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c6f4:	51                   	push   ecx
c001c6f5:	51                   	push   ecx
c001c6f6:	6a 00                	push   0x0
c001c6f8:	68 10 c6 02 c0       	push   0xc002c610
c001c6fd:	e8 09 63 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001c702:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c705:	e8 5f 52 ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c001c70a:	83 c4 10             	add    esp,0x10
c001c70d:	31 c0                	xor    eax,eax
c001c70f:	e9 68 01 00 00       	jmp    c001c87c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c714:	fa                   	cli    
c001c715:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001c71b:	e8 8f 36 ff ff       	call   c000fdaf <Phys::allocatePage()>
c001c720:	6a 07                	push   0x7
c001c722:	89 c7                	mov    edi,eax
c001c724:	55                   	push   ebp
c001c725:	50                   	push   eax
c001c726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c72b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c72e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c734:	e8 a7 55 ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c739:	83 c4 0c             	add    esp,0xc
c001c73c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c743:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c749:	6a 00                	push   0x0
c001c74b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c753:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c759:	e8 dc 53 ff ff       	call   c0011b3a <VAS::mapOtherVASIn(bool, VAS*)>
c001c75e:	58                   	pop    eax
c001c75f:	5a                   	pop    edx
c001c760:	68 07 0c 00 00       	push   0xc07
c001c765:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c769:	57                   	push   edi
c001c76a:	89 ef                	mov    edi,ebp
c001c76c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c773:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c779:	6a 00                	push   0x0
c001c77b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c780:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c783:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c789:	e8 0e 59 ff ff       	call   c001209c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c78e:	b9 00 10 00 00       	mov    ecx,0x1000
c001c793:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c795:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001c79a:	83 c4 20             	add    esp,0x20
c001c79d:	48                   	dec    eax
c001c79e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001c7a3:	85 c0                	test   eax,eax
c001c7a5:	75 01                	jne    c001c7a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c7a7:	fb                   	sti    
c001c7a8:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c7af:	e9 df fe ff ff       	jmp    c001c693 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c7b4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c7b7:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c7bf:	0f 86 a9 00 00 00    	jbe    c001c86e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c7c5:	fa                   	cli    
c001c7c6:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001c7cc:	51                   	push   ecx
c001c7cd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7d4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7da:	6a 00                	push   0x0
c001c7dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c7ea:	e8 4b 53 ff ff       	call   c0011b3a <VAS::mapOtherVASIn(bool, VAS*)>
c001c7ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c7f3:	c1 e6 0c             	shl    esi,0xc
c001c7f6:	01 de                	add    esi,ebx
c001c7f8:	83 c4 10             	add    esp,0x10
c001c7fb:	39 de                	cmp    esi,ebx
c001c7fd:	74 61                	je     c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c7ff:	e8 ab 35 ff ff       	call   c000fdaf <Phys::allocatePage()>
c001c804:	6a 07                	push   0x7
c001c806:	89 c7                	mov    edi,eax
c001c808:	55                   	push   ebp
c001c809:	50                   	push   eax
c001c80a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c80f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c812:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c818:	e8 c3 54 ff ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c81d:	58                   	pop    eax
c001c81e:	5a                   	pop    edx
c001c81f:	68 07 0c 00 00       	push   0xc07
c001c824:	53                   	push   ebx
c001c825:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c82b:	57                   	push   edi
c001c82c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c833:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c839:	6a 00                	push   0x0
c001c83b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c840:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c843:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c849:	e8 4e 58 ff ff       	call   c001209c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c84e:	83 c4 1c             	add    esp,0x1c
c001c851:	68 00 10 00 00       	push   0x1000
c001c856:	6a 00                	push   0x0
c001c858:	55                   	push   ebp
c001c859:	e8 f2 3e fe ff       	call   c0000750 <memset>
c001c85e:	eb 98                	jmp    c001c7f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c860:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001c865:	48                   	dec    eax
c001c866:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001c86b:	75 01                	jne    c001c86e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c86d:	fb                   	sti    
c001c86e:	83 ec 0c             	sub    esp,0xc
c001c871:	55                   	push   ebp
c001c872:	e8 f2 50 ff ff       	call   c0011969 <Virt::freeKernelVirtualPages(unsigned long)>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	b0 01                	mov    al,0x1
c001c87c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c882:	5b                   	pop    ebx
c001c883:	5e                   	pop    esi
c001c884:	5f                   	pop    edi
c001c885:	5d                   	pop    ebp
c001c886:	c3                   	ret    

c001c887 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c887:	55                   	push   ebp
c001c888:	57                   	push   edi
c001c889:	56                   	push   esi
c001c88a:	53                   	push   ebx
c001c88b:	83 ec 48             	sub    esp,0x48
c001c88e:	68 14 01 00 00       	push   0x114
c001c893:	e8 1b 31 ff ff       	call   c000f9b3 <malloc>
c001c898:	83 c4 0c             	add    esp,0xc
c001c89b:	89 c6                	mov    esi,eax
c001c89d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8a5:	50                   	push   eax
c001c8a6:	e8 bf 66 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001c8ab:	58                   	pop    eax
c001c8ac:	5a                   	pop    edx
c001c8ad:	6a 01                	push   0x1
c001c8af:	56                   	push   esi
c001c8b0:	e8 19 67 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001c8b5:	83 c4 10             	add    esp,0x10
c001c8b8:	85 c0                	test   eax,eax
c001c8ba:	0f 85 47 01 00 00    	jne    c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8c8:	83 ec 0c             	sub    esp,0xc
c001c8cb:	6a 34                	push   0x34
c001c8cd:	e8 e1 30 ff ff       	call   c000f9b3 <malloc>
c001c8d2:	89 c3                	mov    ebx,eax
c001c8d4:	58                   	pop    eax
c001c8d5:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8d7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c8db:	57                   	push   edi
c001c8dc:	53                   	push   ebx
c001c8dd:	6a 00                	push   0x0
c001c8df:	6a 34                	push   0x34
c001c8e1:	56                   	push   esi
c001c8e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8e5:	83 c4 20             	add    esp,0x20
c001c8e8:	85 c0                	test   eax,eax
c001c8ea:	0f 85 17 01 00 00    	jne    c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8f0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c8f6:	0f 85 0b 01 00 00    	jne    c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8fc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8ff:	85 c0                	test   eax,eax
c001c901:	0f 84 00 01 00 00    	je     c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c907:	31 d2                	xor    edx,edx
c001c909:	55                   	push   ebp
c001c90a:	52                   	push   edx
c001c90b:	50                   	push   eax
c001c90c:	56                   	push   esi
c001c90d:	e8 7a 67 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	85 c0                	test   eax,eax
c001c917:	0f 85 ea 00 00 00    	jne    c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c91d:	83 ec 0c             	sub    esp,0xc
c001c920:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c923:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c927:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c92b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c92f:	0f af c2             	imul   eax,edx
c001c932:	50                   	push   eax
c001c933:	e8 7b 30 ff ff       	call   c000f9b3 <malloc>
c001c938:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c93a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c93e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c941:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c945:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c949:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c94d:	0f af c2             	imul   eax,edx
c001c950:	99                   	cdq    
c001c951:	52                   	push   edx
c001c952:	50                   	push   eax
c001c953:	56                   	push   esi
c001c954:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c957:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c95a:	83 c4 20             	add    esp,0x20
c001c95d:	85 c0                	test   eax,eax
c001c95f:	0f 84 a2 00 00 00    	je     c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c965:	31 d2                	xor    edx,edx
c001c967:	51                   	push   ecx
c001c968:	52                   	push   edx
c001c969:	50                   	push   eax
c001c96a:	56                   	push   esi
c001c96b:	e8 1c 67 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001c970:	83 c4 10             	add    esp,0x10
c001c973:	85 c0                	test   eax,eax
c001c975:	0f 85 8c 00 00 00    	jne    c001ca07 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c97b:	83 ec 0c             	sub    esp,0xc
c001c97e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c982:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c986:	31 ed                	xor    ebp,ebp
c001c988:	0f af c2             	imul   eax,edx
c001c98b:	50                   	push   eax
c001c98c:	e8 22 30 ff ff       	call   c000f9b3 <malloc>
c001c991:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c997:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c99e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9a2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9a6:	0f af c2             	imul   eax,edx
c001c9a9:	99                   	cdq    
c001c9aa:	52                   	push   edx
c001c9ab:	50                   	push   eax
c001c9ac:	56                   	push   esi
c001c9ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9b0:	83 c4 20             	add    esp,0x20
c001c9b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c9bb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c9bf:	0f 86 80 00 00 00    	jbe    c001ca45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c9c5:	0f b7 fd             	movzx  edi,bp
c001c9c8:	c1 e7 05             	shl    edi,0x5
c001c9cb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c9cf:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c9d2:	75 6b                	jne    c001ca3f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9d4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c9d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9db:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c9de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9e2:	52                   	push   edx
c001c9e3:	31 d2                	xor    edx,edx
c001c9e5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c9e8:	52                   	push   edx
c001c9e9:	50                   	push   eax
c001c9ea:	56                   	push   esi
c001c9eb:	e8 9c 66 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001c9f0:	83 c4 10             	add    esp,0x10
c001c9f3:	85 c0                	test   eax,eax
c001c9f5:	74 17                	je     c001ca0e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c9f7:	83 ec 0c             	sub    esp,0xc
c001c9fa:	68 3c c6 02 c0       	push   0xc002c63c
c001c9ff:	e8 07 60 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	31 c0                	xor    eax,eax
c001ca09:	e9 87 00 00 00       	jmp    c001ca95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca0e:	83 ec 0c             	sub    esp,0xc
c001ca11:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca14:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca17:	50                   	push   eax
c001ca18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca20:	56                   	push   esi
c001ca21:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca25:	e8 b3 fb ff ff       	call   c001c5dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca2e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca32:	83 c4 20             	add    esp,0x20
c001ca35:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca39:	73 04                	jae    c001ca3f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca3f:	45                   	inc    ebp
c001ca40:	e9 76 ff ff ff       	jmp    c001c9bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca45:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca51:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ca57:	83 ec 0c             	sub    esp,0xc
c001ca5a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ca60:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca65:	05 00 10 00 00       	add    eax,0x1000
c001ca6a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca71:	e8 4d 2f ff ff       	call   c000f9c3 <free>
c001ca76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca79:	e8 45 2f ff ff       	call   c000f9c3 <free>
c001ca7e:	58                   	pop    eax
c001ca7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca83:	e8 3b 2f ff ff       	call   c000f9c3 <free>
c001ca88:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca8b:	e8 9c 65 ff ff       	call   c001302c <File::close()>
c001ca90:	83 c4 10             	add    esp,0x10
c001ca93:	b0 01                	mov    al,0x1
c001ca95:	83 c4 3c             	add    esp,0x3c
c001ca98:	5b                   	pop    ebx
c001ca99:	5e                   	pop    esi
c001ca9a:	5f                   	pop    edi
c001ca9b:	5d                   	pop    ebp
c001ca9c:	c3                   	ret    

c001ca9d <Thr::runtimeReferenceHelper()>:
c001ca9d:	83 ec 18             	sub    esp,0x18
c001caa0:	68 44 c6 02 c0       	push   0xc002c644
c001caa5:	e8 61 5f ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001caaa:	fa                   	cli    
c001caab:	83 c4 10             	add    esp,0x10
c001caae:	eb fe                	jmp    c001caae <Thr::runtimeReferenceHelper()+0x11>

c001cab0 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cab0:	57                   	push   edi
c001cab1:	56                   	push   esi
c001cab2:	53                   	push   ebx
c001cab3:	31 db                	xor    ebx,ebx
c001cab5:	39 1d 40 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb40,ebx
c001cabb:	7e 3c                	jle    c001caf9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cabd:	8b 34 9d c0 fa 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0540]
c001cac4:	31 ff                	xor    edi,edi
c001cac6:	39 3c 9d c0 f9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0640],edi
c001cacd:	7e 27                	jle    c001caf6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cacf:	50                   	push   eax
c001cad0:	50                   	push   eax
c001cad1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cad5:	8b 06                	mov    eax,DWORD PTR [esi]
c001cad7:	03 04 9d 40 fa 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd05c0]
c001cade:	50                   	push   eax
c001cadf:	e8 b4 3d fe ff       	call   c0000898 <strcmp>
c001cae4:	83 c4 10             	add    esp,0x10
c001cae7:	85 c0                	test   eax,eax
c001cae9:	75 05                	jne    c001caf0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001caeb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001caee:	eb 0b                	jmp    c001cafb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001caf0:	83 c6 10             	add    esi,0x10
c001caf3:	47                   	inc    edi
c001caf4:	eb d0                	jmp    c001cac6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001caf6:	43                   	inc    ebx
c001caf7:	eb bc                	jmp    c001cab5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001caf9:	31 c0                	xor    eax,eax
c001cafb:	5b                   	pop    ebx
c001cafc:	5e                   	pop    esi
c001cafd:	5f                   	pop    edi
c001cafe:	c3                   	ret    

c001caff <Thr::loadKernelSymbolTable(char const*)>:
c001caff:	55                   	push   ebp
c001cb00:	57                   	push   edi
c001cb01:	56                   	push   esi
c001cb02:	53                   	push   ebx
c001cb03:	83 ec 68             	sub    esp,0x68
c001cb06:	8b 35 90 fb 02 c0    	mov    esi,DWORD PTR ds:0xc002fb90
c001cb0c:	68 14 01 00 00       	push   0x114
c001cb11:	e8 9d 2e ff ff       	call   c000f9b3 <malloc>
c001cb16:	83 c4 0c             	add    esp,0xc
c001cb19:	89 c3                	mov    ebx,eax
c001cb1b:	56                   	push   esi
c001cb1c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb20:	50                   	push   eax
c001cb21:	e8 44 64 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001cb26:	5e                   	pop    esi
c001cb27:	5f                   	pop    edi
c001cb28:	6a 01                	push   0x1
c001cb2a:	53                   	push   ebx
c001cb2b:	e8 9e 64 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	85 c0                	test   eax,eax
c001cb35:	74 0a                	je     c001cb41 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb37:	83 ec 0c             	sub    esp,0xc
c001cb3a:	68 66 c6 02 c0       	push   0xc002c666
c001cb3f:	eb 34                	jmp    c001cb75 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb41:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb49:	83 ec 0c             	sub    esp,0xc
c001cb4c:	6a 34                	push   0x34
c001cb4e:	e8 60 2e ff ff       	call   c000f9b3 <malloc>
c001cb53:	59                   	pop    ecx
c001cb54:	89 c7                	mov    edi,eax
c001cb56:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb5c:	56                   	push   esi
c001cb5d:	57                   	push   edi
c001cb5e:	6a 00                	push   0x0
c001cb60:	6a 34                	push   0x34
c001cb62:	53                   	push   ebx
c001cb63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb66:	83 c4 20             	add    esp,0x20
c001cb69:	85 c0                	test   eax,eax
c001cb6b:	74 17                	je     c001cb84 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb6d:	83 ec 0c             	sub    esp,0xc
c001cb70:	68 7d c6 02 c0       	push   0xc002c67d
c001cb75:	e8 2f d8 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	31 c0                	xor    eax,eax
c001cb7f:	e9 31 02 00 00       	jmp    c001cdb5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cb84:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cb8a:	75 e1                	jne    c001cb6d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb8c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cb8f:	85 c0                	test   eax,eax
c001cb91:	74 da                	je     c001cb6d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cb93:	52                   	push   edx
c001cb94:	31 d2                	xor    edx,edx
c001cb96:	52                   	push   edx
c001cb97:	50                   	push   eax
c001cb98:	53                   	push   ebx
c001cb99:	e8 ee 64 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001cb9e:	83 c4 10             	add    esp,0x10
c001cba1:	85 c0                	test   eax,eax
c001cba3:	75 c8                	jne    c001cb6d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cba5:	83 ec 0c             	sub    esp,0xc
c001cba8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbb0:	31 ed                	xor    ebp,ebp
c001cbb2:	0f af c2             	imul   eax,edx
c001cbb5:	50                   	push   eax
c001cbb6:	e8 f8 2d ff ff       	call   c000f9b3 <malloc>
c001cbbb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbc1:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbc8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbcc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbd0:	0f af c2             	imul   eax,edx
c001cbd3:	99                   	cdq    
c001cbd4:	52                   	push   edx
c001cbd5:	50                   	push   eax
c001cbd6:	53                   	push   ebx
c001cbd7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbda:	83 c4 20             	add    esp,0x20
c001cbdd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbe5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cbed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cbf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cbfd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc01:	0f 86 aa 00 00 00    	jbe    c001ccb1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc07:	0f b7 f5             	movzx  esi,bp
c001cc0a:	6b f6 28             	imul   esi,esi,0x28
c001cc0d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc11:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc18:	50                   	push   eax
c001cc19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc1d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc21:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc23:	6b c0 28             	imul   eax,eax,0x28
c001cc26:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc2a:	89 d0                	mov    eax,edx
c001cc2c:	31 d2                	xor    edx,edx
c001cc2e:	52                   	push   edx
c001cc2f:	50                   	push   eax
c001cc30:	53                   	push   ebx
c001cc31:	e8 56 64 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001cc36:	83 c4 0c             	add    esp,0xc
c001cc39:	6a 20                	push   0x20
c001cc3b:	6a 00                	push   0x0
c001cc3d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc41:	52                   	push   edx
c001cc42:	e8 09 3b fe ff       	call   c0000750 <memset>
c001cc47:	58                   	pop    eax
c001cc48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc4a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc4e:	51                   	push   ecx
c001cc4f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc53:	52                   	push   edx
c001cc54:	6a 00                	push   0x0
c001cc56:	6a 1f                	push   0x1f
c001cc58:	53                   	push   ebx
c001cc59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc5c:	83 c4 18             	add    esp,0x18
c001cc5f:	68 94 c6 02 c0       	push   0xc002c694
c001cc64:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc68:	52                   	push   edx
c001cc69:	e8 2a 3c fe ff       	call   c0000898 <strcmp>
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	85 c0                	test   eax,eax
c001cc73:	75 0f                	jne    c001cc84 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc84:	50                   	push   eax
c001cc85:	50                   	push   eax
c001cc86:	68 9c c6 02 c0       	push   0xc002c69c
c001cc8b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc8f:	50                   	push   eax
c001cc90:	e8 03 3c fe ff       	call   c0000898 <strcmp>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	85 c0                	test   eax,eax
c001cc9a:	75 0f                	jne    c001ccab <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cc9c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cca3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cca7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccab:	45                   	inc    ebp
c001ccac:	e9 4c ff ff ff       	jmp    c001cbfd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ccb1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccb6:	75 10                	jne    c001ccc8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	68 a4 c6 02 c0       	push   0xc002c6a4
c001ccc0:	e8 e4 d6 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001ccc5:	83 c4 10             	add    esp,0x10
c001ccc8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cccd:	75 10                	jne    c001ccdf <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cccf:	83 ec 0c             	sub    esp,0xc
c001ccd2:	68 a4 c6 02 c0       	push   0xc002c6a4
c001ccd7:	e8 cd d6 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	31 d2                	xor    edx,edx
c001cce1:	50                   	push   eax
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	52                   	push   edx
c001cce7:	50                   	push   eax
c001cce8:	53                   	push   ebx
c001cce9:	e8 9e 63 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001ccee:	5a                   	pop    edx
c001ccef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccf3:	e8 bb 2c ff ff       	call   c000f9b3 <malloc>
c001ccf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd00:	31 c9                	xor    ecx,ecx
c001cd02:	5e                   	pop    esi
c001cd03:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd05:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd09:	55                   	push   ebp
c001cd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd0e:	51                   	push   ecx
c001cd0f:	52                   	push   edx
c001cd10:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd14:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd18:	53                   	push   ebx
c001cd19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd1c:	83 c4 14             	add    esp,0x14
c001cd1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd23:	e8 8b 2c ff ff       	call   c000f9b3 <malloc>
c001cd28:	89 c6                	mov    esi,eax
c001cd2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd2c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd2f:	56                   	push   esi
c001cd30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd38:	51                   	push   ecx
c001cd39:	52                   	push   edx
c001cd3a:	53                   	push   ebx
c001cd3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd42:	8b 15 40 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb40
c001cd48:	83 c4 1c             	add    esp,0x1c
c001cd4b:	c1 e8 04             	shr    eax,0x4
c001cd4e:	89 04 95 c0 f9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0640],eax
c001cd55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd59:	31 d2                	xor    edx,edx
c001cd5b:	52                   	push   edx
c001cd5c:	50                   	push   eax
c001cd5d:	53                   	push   ebx
c001cd5e:	e8 29 63 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001cd63:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd65:	31 d2                	xor    edx,edx
c001cd67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd6a:	56                   	push   esi
c001cd6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd6f:	52                   	push   edx
c001cd70:	50                   	push   eax
c001cd71:	53                   	push   ebx
c001cd72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd75:	83 c4 14             	add    esp,0x14
c001cd78:	53                   	push   ebx
c001cd79:	e8 ae 62 ff ff       	call   c001302c <File::close()>
c001cd7e:	5d                   	pop    ebp
c001cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd83:	e8 3b 2c ff ff       	call   c000f9c3 <free>
c001cd88:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd8b:	e8 33 2c ff ff       	call   c000f9c3 <free>
c001cd90:	a1 40 fb 02 c0       	mov    eax,ds:0xc002fb40
c001cd95:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd99:	8d 50 01             	lea    edx,[eax+0x1]
c001cd9c:	89 0c 85 c0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0540],ecx
c001cda3:	89 34 85 40 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05c0],esi
c001cdaa:	89 15 40 fb 02 c0    	mov    DWORD PTR ds:0xc002fb40,edx
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	b0 01                	mov    al,0x1
c001cdb5:	83 c4 5c             	add    esp,0x5c
c001cdb8:	5b                   	pop    ebx
c001cdb9:	5e                   	pop    esi
c001cdba:	5f                   	pop    edi
c001cdbb:	5d                   	pop    ebp
c001cdbc:	c3                   	ret    

c001cdbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cdbd:	55                   	push   ebp
c001cdbe:	57                   	push   edi
c001cdbf:	56                   	push   esi
c001cdc0:	53                   	push   ebx
c001cdc1:	81 ec 68 03 00 00    	sub    esp,0x368
c001cdc7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cdce:	8b 1d 90 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fb90
c001cdd4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cdd8:	68 14 01 00 00       	push   0x114
c001cddd:	e8 d1 2b ff ff       	call   c000f9b3 <malloc>
c001cde2:	83 c4 0c             	add    esp,0xc
c001cde5:	89 c5                	mov    ebp,eax
c001cde7:	53                   	push   ebx
c001cde8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cdef:	50                   	push   eax
c001cdf0:	e8 75 61 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001cdf5:	5e                   	pop    esi
c001cdf6:	5f                   	pop    edi
c001cdf7:	6a 01                	push   0x1
c001cdf9:	55                   	push   ebp
c001cdfa:	e8 cf 61 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	85 c0                	test   eax,eax
c001ce04:	0f 85 a7 06 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce0a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce12:	83 ec 0c             	sub    esp,0xc
c001ce15:	6a 34                	push   0x34
c001ce17:	e8 97 2b ff ff       	call   c000f9b3 <malloc>
c001ce1c:	5b                   	pop    ebx
c001ce1d:	89 c7                	mov    edi,eax
c001ce1f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce26:	53                   	push   ebx
c001ce27:	57                   	push   edi
c001ce28:	6a 00                	push   0x0
c001ce2a:	6a 34                	push   0x34
c001ce2c:	55                   	push   ebp
c001ce2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce30:	83 c4 20             	add    esp,0x20
c001ce33:	85 c0                	test   eax,eax
c001ce35:	0f 85 76 06 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce3b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce41:	0f 85 6a 06 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce47:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce4a:	85 c0                	test   eax,eax
c001ce4c:	0f 84 5f 06 00 00    	je     c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce52:	31 d2                	xor    edx,edx
c001ce54:	51                   	push   ecx
c001ce55:	52                   	push   edx
c001ce56:	50                   	push   eax
c001ce57:	55                   	push   ebp
c001ce58:	e8 2f 62 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	85 c0                	test   eax,eax
c001ce62:	0f 85 49 06 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce6e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce72:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ce76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce7a:	0f af c2             	imul   eax,edx
c001ce7d:	50                   	push   eax
c001ce7e:	e8 30 2b ff ff       	call   c000f9b3 <malloc>
c001ce83:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce91:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce95:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce99:	0f af c2             	imul   eax,edx
c001ce9c:	99                   	cdq    
c001ce9d:	52                   	push   edx
c001ce9e:	50                   	push   eax
c001ce9f:	55                   	push   ebp
c001cea0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cea3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cea6:	83 c4 20             	add    esp,0x20
c001cea9:	85 c0                	test   eax,eax
c001ceab:	0f 84 00 06 00 00    	je     c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ceb1:	52                   	push   edx
c001ceb2:	31 d2                	xor    edx,edx
c001ceb4:	52                   	push   edx
c001ceb5:	50                   	push   eax
c001ceb6:	55                   	push   ebp
c001ceb7:	e8 d0 61 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001cebc:	83 c4 10             	add    esp,0x10
c001cebf:	85 c0                	test   eax,eax
c001cec1:	0f 85 ea 05 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cece:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ced2:	31 f6                	xor    esi,esi
c001ced4:	0f af c2             	imul   eax,edx
c001ced7:	50                   	push   eax
c001ced8:	e8 d6 2a ff ff       	call   c000f9b3 <malloc>
c001cedd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cee0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cee4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cee7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceeb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ceef:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cef3:	0f af c2             	imul   eax,edx
c001cef6:	99                   	cdq    
c001cef7:	52                   	push   edx
c001cef8:	50                   	push   eax
c001cef9:	55                   	push   ebp
c001cefa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cefd:	83 c4 20             	add    esp,0x20
c001cf00:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf04:	0f 86 8a 00 00 00    	jbe    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf0a:	0f b7 de             	movzx  ebx,si
c001cf0d:	c1 e3 05             	shl    ebx,0x5
c001cf10:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf14:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf17:	75 75                	jne    c001cf8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf1c:	31 d2                	xor    edx,edx
c001cf1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf29:	50                   	push   eax
c001cf2a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf2d:	52                   	push   edx
c001cf2e:	50                   	push   eax
c001cf2f:	55                   	push   ebp
c001cf30:	e8 57 61 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001cf35:	83 c4 10             	add    esp,0x10
c001cf38:	85 c0                	test   eax,eax
c001cf3a:	0f 85 71 05 00 00    	jne    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf40:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf47:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf4a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf4e:	31 d2                	xor    edx,edx
c001cf50:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf5b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf62:	50                   	push   eax
c001cf63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6b:	52                   	push   edx
c001cf6c:	50                   	push   eax
c001cf6d:	55                   	push   ebp
c001cf6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf71:	83 c4 1c             	add    esp,0x1c
c001cf74:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cf77:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cf7a:	50                   	push   eax
c001cf7b:	6a 00                	push   0x0
c001cf7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf81:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cf85:	50                   	push   eax
c001cf86:	e8 c5 37 fe ff       	call   c0000750 <memset>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	46                   	inc    esi
c001cf8f:	e9 6c ff ff ff       	jmp    c001cf00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cf94:	53                   	push   ebx
c001cf95:	31 db                	xor    ebx,ebx
c001cf97:	68 00 01 00 00       	push   0x100
c001cf9c:	6a 00                	push   0x0
c001cf9e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfa2:	50                   	push   eax
c001cfa3:	e8 a8 37 fe ff       	call   c0000750 <memset>
c001cfa8:	83 c4 0c             	add    esp,0xc
c001cfab:	68 00 01 00 00       	push   0x100
c001cfb0:	6a 00                	push   0x0
c001cfb2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cfb9:	50                   	push   eax
c001cfba:	e8 91 37 fe ff       	call   c0000750 <memset>
c001cfbf:	83 c4 10             	add    esp,0x10
c001cfc2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cfca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cfd2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cfda:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cfe2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cfea:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cfee:	0f 86 30 01 00 00    	jbe    c001d124 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cff4:	0f b7 f3             	movzx  esi,bx
c001cff7:	6b f6 28             	imul   esi,esi,0x28
c001cffa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cffe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d001:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d005:	52                   	push   edx
c001d006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d00a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d00e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d010:	6b d2 28             	imul   edx,edx,0x28
c001d013:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d017:	31 d2                	xor    edx,edx
c001d019:	52                   	push   edx
c001d01a:	50                   	push   eax
c001d01b:	55                   	push   ebp
c001d01c:	e8 6b 60 ff ff       	call   c001308c <File::seek(unsigned long long)>
c001d021:	83 c4 0c             	add    esp,0xc
c001d024:	6a 20                	push   0x20
c001d026:	6a 00                	push   0x0
c001d028:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d02f:	51                   	push   ecx
c001d030:	e8 1b 37 fe ff       	call   c0000750 <memset>
c001d035:	59                   	pop    ecx
c001d036:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d039:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d03d:	52                   	push   edx
c001d03e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d045:	51                   	push   ecx
c001d046:	6a 00                	push   0x0
c001d048:	6a 1f                	push   0x1f
c001d04a:	55                   	push   ebp
c001d04b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d04e:	83 c4 1c             	add    esp,0x1c
c001d051:	6a 09                	push   0x9
c001d053:	68 be c6 02 c0       	push   0xc002c6be
c001d058:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d05f:	51                   	push   ecx
c001d060:	e8 e7 35 fe ff       	call   c000064c <memcmp>
c001d065:	83 c4 10             	add    esp,0x10
c001d068:	85 c0                	test   eax,eax
c001d06a:	75 21                	jne    c001d08d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d074:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d078:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d07c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d07f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d086:	89 d0                	mov    eax,edx
c001d088:	40                   	inc    eax
c001d089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d08d:	50                   	push   eax
c001d08e:	6a 09                	push   0x9
c001d090:	68 c8 c6 02 c0       	push   0xc002c6c8
c001d095:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d09c:	50                   	push   eax
c001d09d:	e8 aa 35 fe ff       	call   c000064c <memcmp>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	85 c0                	test   eax,eax
c001d0a7:	75 21                	jne    c001d0ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0b1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0bc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0c3:	89 d0                	mov    eax,edx
c001d0c5:	40                   	inc    eax
c001d0c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0ca:	50                   	push   eax
c001d0cb:	50                   	push   eax
c001d0cc:	68 94 c6 02 c0       	push   0xc002c694
c001d0d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0d8:	50                   	push   eax
c001d0d9:	e8 ba 37 fe ff       	call   c0000898 <strcmp>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	85 c0                	test   eax,eax
c001d0e3:	75 0f                	jne    c001d0f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d0e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0f4:	50                   	push   eax
c001d0f5:	50                   	push   eax
c001d0f6:	68 9c c6 02 c0       	push   0xc002c69c
c001d0fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d102:	50                   	push   eax
c001d103:	e8 90 37 fe ff       	call   c0000898 <strcmp>
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	85 c0                	test   eax,eax
c001d10d:	75 0f                	jne    c001d11e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d10f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d11a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d11e:	43                   	inc    ebx
c001d11f:	e9 c6 fe ff ff       	jmp    c001cfea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d124:	31 d2                	xor    edx,edx
c001d126:	50                   	push   eax
c001d127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d12b:	52                   	push   edx
c001d12c:	50                   	push   eax
c001d12d:	55                   	push   ebp
c001d12e:	e8 59 5f ff ff       	call   c001308c <File::seek(unsigned long long)>
c001d133:	58                   	pop    eax
c001d134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d138:	e8 76 28 ff ff       	call   c000f9b3 <malloc>
c001d13d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d140:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d144:	31 d2                	xor    edx,edx
c001d146:	58                   	pop    eax
c001d147:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d14b:	53                   	push   ebx
c001d14c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d154:	52                   	push   edx
c001d155:	50                   	push   eax
c001d156:	55                   	push   ebp
c001d157:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d15a:	83 c4 14             	add    esp,0x14
c001d15d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d161:	e8 4d 28 ff ff       	call   c000f9b3 <malloc>
c001d166:	31 d2                	xor    edx,edx
c001d168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d16c:	83 c4 0c             	add    esp,0xc
c001d16f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d173:	52                   	push   edx
c001d174:	50                   	push   eax
c001d175:	55                   	push   ebp
c001d176:	e8 11 5f ff ff       	call   c001308c <File::seek(unsigned long long)>
c001d17b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d17e:	31 d2                	xor    edx,edx
c001d180:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d183:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d187:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d18b:	52                   	push   edx
c001d18c:	50                   	push   eax
c001d18d:	55                   	push   ebp
c001d18e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d191:	83 c4 20             	add    esp,0x20
c001d194:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d19c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1a0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1a4:	0f 84 0b 03 00 00    	je     c001d4b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d1aa:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1b1:	31 d2                	xor    edx,edx
c001d1b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1b7:	c1 e8 03             	shr    eax,0x3
c001d1ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d1be:	51                   	push   ecx
c001d1bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1c3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d1c7:	52                   	push   edx
c001d1c8:	50                   	push   eax
c001d1c9:	55                   	push   ebp
c001d1ca:	e8 bd 5e ff ff       	call   c001308c <File::seek(unsigned long long)>
c001d1cf:	5b                   	pop    ebx
c001d1d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d1db:	e8 d3 27 ff ff       	call   c000f9b3 <malloc>
c001d1e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1e7:	31 d2                	xor    edx,edx
c001d1e9:	5e                   	pop    esi
c001d1ea:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d1ee:	50                   	push   eax
c001d1ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1f7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d1fe:	52                   	push   edx
c001d1ff:	50                   	push   eax
c001d200:	55                   	push   ebp
c001d201:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d204:	83 c4 20             	add    esp,0x20
c001d207:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d20f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d213:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d217:	0f 8d 7c 02 00 00    	jge    c001d499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d21d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d225:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d22a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d22d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d235:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d239:	89 d8                	mov    eax,ebx
c001d23b:	c1 e8 08             	shr    eax,0x8
c001d23e:	89 c6                	mov    esi,eax
c001d240:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d244:	c1 e6 04             	shl    esi,0x4
c001d247:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d24b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d24e:	85 d2                	test   edx,edx
c001d250:	0f 85 bf 00 00 00    	jne    c001d315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d256:	83 ec 0c             	sub    esp,0xc
c001d259:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d25d:	03 06                	add    eax,DWORD PTR [esi]
c001d25f:	50                   	push   eax
c001d260:	e8 4b f8 ff ff       	call   c001cab0 <Thr::getAddressOfKernelSymbol(char const*)>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	89 c2                	mov    edx,eax
c001d26a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d26f:	85 c0                	test   eax,eax
c001d271:	0f 85 9e 00 00 00    	jne    c001d315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d277:	83 ec 0c             	sub    esp,0xc
c001d27a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d27e:	03 06                	add    eax,DWORD PTR [esi]
c001d280:	50                   	push   eax
c001d281:	e8 ef 14 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d286:	83 c4 10             	add    esp,0x10
c001d289:	89 c2                	mov    edx,eax
c001d28b:	85 c0                	test   eax,eax
c001d28d:	0f 85 82 00 00 00    	jne    c001d315 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d293:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d297:	50                   	push   eax
c001d298:	50                   	push   eax
c001d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29d:	03 06                	add    eax,DWORD PTR [esi]
c001d29f:	50                   	push   eax
c001d2a0:	68 d2 c6 02 c0       	push   0xc002c6d2
c001d2a5:	e8 61 57 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001d2aa:	58                   	pop    eax
c001d2ab:	5a                   	pop    edx
c001d2ac:	68 ec c6 02 c0       	push   0xc002c6ec
c001d2b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b8:	50                   	push   eax
c001d2b9:	e8 4e 35 fe ff       	call   c000080c <strcpy>
c001d2be:	59                   	pop    ecx
c001d2bf:	58                   	pop    eax
c001d2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c4:	03 06                	add    eax,DWORD PTR [esi]
c001d2c6:	50                   	push   eax
c001d2c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ce:	50                   	push   eax
c001d2cf:	e8 78 36 fe ff       	call   c000094c <strcat>
c001d2d4:	58                   	pop    eax
c001d2d5:	5a                   	pop    edx
c001d2d6:	68 82 c7 02 c0       	push   0xc002c782
c001d2db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e2:	50                   	push   eax
c001d2e3:	e8 64 36 fe ff       	call   c000094c <strcat>
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2f0:	0f 84 5d 01 00 00    	je     c001d453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2f6:	83 ec 0c             	sub    esp,0xc
c001d2f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d300:	50                   	push   eax
c001d301:	e8 a3 d0 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d30d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d311:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d315:	80 fb 01             	cmp    bl,0x1
c001d318:	0f 85 88 00 00 00    	jne    c001d3a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d31e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d325:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d329:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d32d:	01 ce                	add    esi,ecx
c001d32f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d335:	0f 94 c0             	sete   al
c001d338:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d33e:	0f 94 c3             	sete   bl
c001d341:	09 c3                	or     ebx,eax
c001d343:	8b 06                	mov    eax,DWORD PTR [esi]
c001d345:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d34a:	74 41                	je     c001d38d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d34c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d34f:	84 db                	test   bl,bl
c001d351:	75 15                	jne    c001d368 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d353:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d357:	66 83 f8 0c          	cmp    ax,0xc
c001d35b:	76 05                	jbe    c001d362 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d35d:	b8 0c 00 00 00       	mov    eax,0xc
c001d362:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d366:	76 37                	jbe    c001d39f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d368:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d36c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d371:	0f 84 dc 00 00 00    	je     c001d453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	68 03 c7 02 c0       	push   0xc002c703
c001d37f:	e8 25 d0 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d384:	83 c4 10             	add    esp,0x10
c001d387:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d38b:	eb 12                	jmp    c001d39f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d38d:	01 c1                	add    ecx,eax
c001d38f:	84 db                	test   bl,bl
c001d391:	75 0c                	jne    c001d39f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d393:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d397:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d39b:	77 02                	ja     c001d39f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d39d:	01 d1                	add    ecx,edx
c001d39f:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3a1:	e9 ea 00 00 00       	jmp    c001d490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d3a6:	80 fb 02             	cmp    bl,0x2
c001d3a9:	75 7c                	jne    c001d427 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d3ab:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3b2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3b6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3ba:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3c0:	74 20                	je     c001d3e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3c2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3c8:	74 18                	je     c001d3e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d3ca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3ce:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3d3:	66 83 f8 0e          	cmp    ax,0xe
c001d3d7:	77 03                	ja     c001d3dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d3d9:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d3dc:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d3e0:	76 1f                	jbe    c001d401 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d3e2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d3e6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3eb:	74 66                	je     c001d453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	68 1f c7 02 c0       	push   0xc002c71f
c001d3f5:	e8 af cf ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d3fa:	83 c4 10             	add    esp,0x10
c001d3fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d401:	8b 06                	mov    eax,DWORD PTR [esi]
c001d403:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d408:	74 13                	je     c001d41d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d40a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d40e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d415:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d419:	01 c8                	add    eax,ecx
c001d41b:	eb 04                	jmp    c001d421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d41d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d421:	01 c2                	add    edx,eax
c001d423:	89 16                	mov    DWORD PTR [esi],edx
c001d425:	eb 69                	jmp    c001d490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d427:	0f b6 db             	movzx  ebx,bl
c001d42a:	50                   	push   eax
c001d42b:	50                   	push   eax
c001d42c:	53                   	push   ebx
c001d42d:	68 3b c7 02 c0       	push   0xc002c73b
c001d432:	e8 d4 55 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001d437:	83 c4 10             	add    esp,0x10
c001d43a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d43f:	74 12                	je     c001d453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d441:	83 ec 0c             	sub    esp,0xc
c001d444:	68 46 c7 02 c0       	push   0xc002c746
c001d449:	e8 5b cf ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	eb 3d                	jmp    c001d490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d453:	83 ec 0c             	sub    esp,0xc
c001d456:	55                   	push   ebp
c001d457:	e8 d0 5b ff ff       	call   c001302c <File::close()>
c001d45c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d45f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d462:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d465:	59                   	pop    ecx
c001d466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d46a:	e8 54 25 ff ff       	call   c000f9c3 <free>
c001d46f:	5b                   	pop    ebx
c001d470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d474:	e8 4a 25 ff ff       	call   c000f9c3 <free>
c001d479:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d47c:	e8 42 25 ff ff       	call   c000f9c3 <free>
c001d481:	5e                   	pop    esi
c001d482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d486:	e8 38 25 ff ff       	call   c000f9c3 <free>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	eb 21                	jmp    c001d4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d490:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d494:	e9 76 fd ff ff       	jmp    c001d20f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d499:	83 ec 0c             	sub    esp,0xc
c001d49c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4a0:	e8 1e 25 ff ff       	call   c000f9c3 <free>
c001d4a5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4a9:	83 c4 10             	add    esp,0x10
c001d4ac:	e9 eb fc ff ff       	jmp    c001d19c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4b1:	31 c0                	xor    eax,eax
c001d4b3:	eb 33                	jmp    c001d4e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	55                   	push   ebp
c001d4b9:	e8 6e 5b ff ff       	call   c001302c <File::close()>
c001d4be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4c7:	58                   	pop    eax
c001d4c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4cc:	e8 f2 24 ff ff       	call   c000f9c3 <free>
c001d4d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4d4:	e8 ea 24 ff ff       	call   c000f9c3 <free>
c001d4d9:	5a                   	pop    edx
c001d4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4de:	e8 e0 24 ff ff       	call   c000f9c3 <free>
c001d4e3:	83 c4 10             	add    esp,0x10
c001d4e6:	b0 01                	mov    al,0x1
c001d4e8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d4ee:	5b                   	pop    ebx
c001d4ef:	5e                   	pop    esi
c001d4f0:	5f                   	pop    edi
c001d4f1:	5d                   	pop    ebp
c001d4f2:	c3                   	ret    

c001d4f3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d4f3:	56                   	push   esi
c001d4f4:	31 d2                	xor    edx,edx
c001d4f6:	53                   	push   ebx
c001d4f7:	8b 1d a0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3a0
c001d4fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d501:	39 d3                	cmp    ebx,edx
c001d503:	7e 1b                	jle    c001d520 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d505:	8b 04 95 c0 f5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a40]
c001d50c:	39 c8                	cmp    eax,ecx
c001d50e:	77 0d                	ja     c001d51d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d510:	8b 34 95 c0 f3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0c40]
c001d517:	01 c6                	add    esi,eax
c001d519:	39 ce                	cmp    esi,ecx
c001d51b:	77 05                	ja     c001d522 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d51d:	42                   	inc    edx
c001d51e:	eb e1                	jmp    c001d501 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d520:	31 c0                	xor    eax,eax
c001d522:	5b                   	pop    ebx
c001d523:	5e                   	pop    esi
c001d524:	c3                   	ret    

c001d525 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d525:	53                   	push   ebx
c001d526:	31 c0                	xor    eax,eax
c001d528:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d52c:	8b 1d a0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3a0
c001d532:	39 c3                	cmp    ebx,eax
c001d534:	7e 22                	jle    c001d558 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d536:	8b 14 85 c0 f5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0a40]
c001d53d:	39 ca                	cmp    edx,ecx
c001d53f:	77 14                	ja     c001d555 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d541:	03 14 85 c0 f3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0c40]
c001d548:	39 ca                	cmp    edx,ecx
c001d54a:	76 09                	jbe    c001d555 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d54c:	8b 04 85 c0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0840]
c001d553:	eb 05                	jmp    c001d55a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d555:	40                   	inc    eax
c001d556:	eb da                	jmp    c001d532 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d558:	31 c0                	xor    eax,eax
c001d55a:	5b                   	pop    ebx
c001d55b:	c3                   	ret    

c001d55c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d55c:	53                   	push   ebx
c001d55d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d561:	53                   	push   ebx
c001d562:	e8 8c ff ff ff       	call   c001d4f3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d567:	5a                   	pop    edx
c001d568:	31 d2                	xor    edx,edx
c001d56a:	85 c0                	test   eax,eax
c001d56c:	74 04                	je     c001d572 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d56e:	89 da                	mov    edx,ebx
c001d570:	29 c2                	sub    edx,eax
c001d572:	89 d0                	mov    eax,edx
c001d574:	5b                   	pop    ebx
c001d575:	c3                   	ret    

c001d576 <Thr::loadDLL(char const*, bool)>:
c001d576:	55                   	push   ebp
c001d577:	57                   	push   edi
c001d578:	56                   	push   esi
c001d579:	53                   	push   ebx
c001d57a:	81 ec 34 01 00 00    	sub    esp,0x134
c001d580:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d587:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d58e:	56                   	push   esi
c001d58f:	68 5e c7 02 c0       	push   0xc002c75e
c001d594:	e8 72 54 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001d599:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5a0:	e8 0e 24 ff ff       	call   c000f9b3 <malloc>
c001d5a5:	83 c4 0c             	add    esp,0xc
c001d5a8:	89 c3                	mov    ebx,eax
c001d5aa:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001d5b0:	56                   	push   esi
c001d5b1:	50                   	push   eax
c001d5b2:	e8 b3 59 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	85 db                	test   ebx,ebx
c001d5bc:	75 3c                	jne    c001d5fa <Thr::loadDLL(char const*, bool)+0x84>
c001d5be:	89 f8                	mov    eax,edi
c001d5c0:	84 c0                	test   al,al
c001d5c2:	0f 84 d2 01 00 00    	je     c001d79a <Thr::loadDLL(char const*, bool)+0x224>
c001d5c8:	55                   	push   ebp
c001d5c9:	55                   	push   ebp
c001d5ca:	68 6f c7 02 c0       	push   0xc002c76f
c001d5cf:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d5d3:	55                   	push   ebp
c001d5d4:	e8 33 32 fe ff       	call   c000080c <strcpy>
c001d5d9:	58                   	pop    eax
c001d5da:	5a                   	pop    edx
c001d5db:	56                   	push   esi
c001d5dc:	55                   	push   ebp
c001d5dd:	e8 6a 33 fe ff       	call   c000094c <strcat>
c001d5e2:	59                   	pop    ecx
c001d5e3:	58                   	pop    eax
c001d5e4:	68 82 c7 02 c0       	push   0xc002c782
c001d5e9:	55                   	push   ebp
c001d5ea:	e8 5d 33 fe ff       	call   c000094c <strcat>
c001d5ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5f2:	e8 b2 cd ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d5f7:	83 c4 10             	add    esp,0x10
c001d5fa:	51                   	push   ecx
c001d5fb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d5ff:	50                   	push   eax
c001d600:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d604:	50                   	push   eax
c001d605:	53                   	push   ebx
c001d606:	e8 6f 5c ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	85 db                	test   ebx,ebx
c001d610:	74 0c                	je     c001d61e <Thr::loadDLL(char const*, bool)+0xa8>
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d617:	53                   	push   ebx
c001d618:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d623:	75 0a                	jne    c001d62f <Thr::loadDLL(char const*, bool)+0xb9>
c001d625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d629:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d62d:	75 3c                	jne    c001d66b <Thr::loadDLL(char const*, bool)+0xf5>
c001d62f:	89 f8                	mov    eax,edi
c001d631:	84 c0                	test   al,al
c001d633:	0f 84 49 01 00 00    	je     c001d782 <Thr::loadDLL(char const*, bool)+0x20c>
c001d639:	51                   	push   ecx
c001d63a:	51                   	push   ecx
c001d63b:	68 6f c7 02 c0       	push   0xc002c76f
c001d640:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d644:	53                   	push   ebx
c001d645:	e8 c2 31 fe ff       	call   c000080c <strcpy>
c001d64a:	5d                   	pop    ebp
c001d64b:	58                   	pop    eax
c001d64c:	56                   	push   esi
c001d64d:	53                   	push   ebx
c001d64e:	e8 f9 32 fe ff       	call   c000094c <strcat>
c001d653:	58                   	pop    eax
c001d654:	5a                   	pop    edx
c001d655:	68 82 c7 02 c0       	push   0xc002c782
c001d65a:	53                   	push   ebx
c001d65b:	e8 ec 32 fe ff       	call   c000094c <strcat>
c001d660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d663:	e8 41 cd ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	52                   	push   edx
c001d66c:	6a 03                	push   0x3
c001d66e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d672:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d676:	05 ff 0f 00 00       	add    eax,0xfff
c001d67b:	83 d2 00             	adc    edx,0x0
c001d67e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d682:	50                   	push   eax
c001d683:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c001d689:	e8 54 47 ff ff       	call   c0011de2 <VAS::allocatePages(int, int)>
c001d68e:	59                   	pop    ecx
c001d68f:	89 c3                	mov    ebx,eax
c001d691:	5d                   	pop    ebp
c001d692:	50                   	push   eax
c001d693:	68 2d a9 02 c0       	push   0xc002a92d
c001d698:	e8 6e 53 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001d69d:	89 34 24             	mov    DWORD PTR [esp],esi
c001d6a0:	e8 c7 30 fe ff       	call   c000076c <strlen>
c001d6a5:	8b 2d a0 f3 02 c0    	mov    ebp,DWORD PTR ds:0xc002f3a0
c001d6ab:	40                   	inc    eax
c001d6ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6af:	e8 ff 22 ff ff       	call   c000f9b3 <malloc>
c001d6b4:	89 04 ad c0 f7 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0840],eax
c001d6bb:	58                   	pop    eax
c001d6bc:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c001d6c1:	5a                   	pop    edx
c001d6c2:	56                   	push   esi
c001d6c3:	ff 34 85 c0 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0840]
c001d6ca:	e8 3d 31 fe ff       	call   c000080c <strcpy>
c001d6cf:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c001d6d4:	8d 50 01             	lea    edx,[eax+0x1]
c001d6d7:	89 1c 85 c0 f5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0a40],ebx
c001d6de:	89 15 a0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a0,edx
c001d6e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d6e8:	83 c4 0c             	add    esp,0xc
c001d6eb:	89 14 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],edx
c001d6f2:	6a 01                	push   0x1
c001d6f4:	53                   	push   ebx
c001d6f5:	56                   	push   esi
c001d6f6:	e8 c2 f6 ff ff       	call   c001cdbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d6fb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d6ff:	83 c4 10             	add    esp,0x10
c001d702:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d707:	0f 85 89 00 00 00    	jne    c001d796 <Thr::loadDLL(char const*, bool)+0x220>
c001d70d:	89 f8                	mov    eax,edi
c001d70f:	84 c0                	test   al,al
c001d711:	74 73                	je     c001d786 <Thr::loadDLL(char const*, bool)+0x210>
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	68 84 c7 02 c0       	push   0xc002c784
c001d71b:	e8 89 cc ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d720:	83 c4 10             	add    esp,0x10
c001d723:	eb 61                	jmp    c001d786 <Thr::loadDLL(char const*, bool)+0x210>
c001d725:	50                   	push   eax
c001d726:	50                   	push   eax
c001d727:	89 e8                	mov    eax,ebp
c001d729:	c1 e0 0c             	shl    eax,0xc
c001d72c:	01 d8                	add    eax,ebx
c001d72e:	50                   	push   eax
c001d72f:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c001d735:	e8 10 42 ff ff       	call   c001194a <VAS::getPageTableEntry(unsigned long)>
c001d73a:	83 c4 10             	add    esp,0x10
c001d73d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d73f:	a8 60                	test   al,0x60
c001d741:	75 11                	jne    c001d754 <Thr::loadDLL(char const*, bool)+0x1de>
c001d743:	83 ec 0c             	sub    esp,0xc
c001d746:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d74b:	50                   	push   eax
c001d74c:	e8 ed 25 ff ff       	call   c000fd3e <Phys::freePage(unsigned long)>
c001d751:	83 c4 10             	add    esp,0x10
c001d754:	45                   	inc    ebp
c001d755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d759:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d75d:	05 ff 0f 00 00       	add    eax,0xfff
c001d762:	bf 00 00 00 00       	mov    edi,0x0
c001d767:	83 d2 00             	adc    edx,0x0
c001d76a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d76e:	c1 ea 0c             	shr    edx,0xc
c001d771:	39 c5                	cmp    ebp,eax
c001d773:	89 d1                	mov    ecx,edx
c001d775:	89 f8                	mov    eax,edi
c001d777:	19 c8                	sbb    eax,ecx
c001d779:	72 aa                	jb     c001d725 <Thr::loadDLL(char const*, bool)+0x1af>
c001d77b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d780:	75 18                	jne    c001d79a <Thr::loadDLL(char const*, bool)+0x224>
c001d782:	31 db                	xor    ebx,ebx
c001d784:	eb 14                	jmp    c001d79a <Thr::loadDLL(char const*, bool)+0x224>
c001d786:	83 ec 0c             	sub    esp,0xc
c001d789:	68 a3 c7 02 c0       	push   0xc002c7a3
c001d78e:	e8 16 cc ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d793:	83 c4 10             	add    esp,0x10
c001d796:	31 ed                	xor    ebp,ebp
c001d798:	eb bb                	jmp    c001d755 <Thr::loadDLL(char const*, bool)+0x1df>
c001d79a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7a0:	89 d8                	mov    eax,ebx
c001d7a2:	5b                   	pop    ebx
c001d7a3:	5e                   	pop    esi
c001d7a4:	5f                   	pop    edi
c001d7a5:	5d                   	pop    ebp
c001d7a6:	c3                   	ret    

c001d7a7 <Thr::executeDLL(unsigned long, void*)>:
c001d7a7:	56                   	push   esi
c001d7a8:	53                   	push   ebx
c001d7a9:	52                   	push   edx
c001d7aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d7b2:	85 db                	test   ebx,ebx
c001d7b4:	75 10                	jne    c001d7c6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	68 bf c7 02 c0       	push   0xc002c7bf
c001d7be:	e8 e6 cb ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	50                   	push   eax
c001d7c7:	50                   	push   eax
c001d7c8:	53                   	push   ebx
c001d7c9:	68 e9 c7 02 c0       	push   0xc002c7e9
c001d7ce:	e8 38 52 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001d7d3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7d7:	89 d8                	mov    eax,ebx
c001d7d9:	83 c4 14             	add    esp,0x14
c001d7dc:	5b                   	pop    ebx
c001d7dd:	5e                   	pop    esi
c001d7de:	ff e0                	jmp    eax

c001d7e0 <userModeEntryPoint(void*)>:
c001d7e0:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001d7e5:	48                   	dec    eax
c001d7e6:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001d7eb:	75 01                	jne    c001d7ee <userModeEntryPoint(void*)+0xe>
c001d7ed:	fb                   	sti    
c001d7ee:	fb                   	sti    
c001d7ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d7f7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d7fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d801:	e9 24 2b fe ff       	jmp    c000032a <goToUsermode>

c001d806 <changeTSS>:
c001d806:	83 ec 14             	sub    esp,0x14
c001d809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d80e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d811:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d816:	c1 e2 15             	shl    edx,0x15
c001d819:	29 d0                	sub    eax,edx
c001d81b:	50                   	push   eax
c001d81c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001d821:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d827:	05 7c 11 00 00       	add    eax,0x117c
c001d82c:	50                   	push   eax
c001d82d:	e8 5c 37 ff ff       	call   c0010f8e <TSS::setESP(unsigned long)>
c001d832:	83 c4 1c             	add    esp,0x1c
c001d835:	c3                   	ret    

c001d836 <switchToThread(ThreadControlBlock*)>:
c001d836:	57                   	push   edi
c001d837:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001d83c:	56                   	push   esi
c001d83d:	85 c0                	test   eax,eax
c001d83f:	53                   	push   ebx
c001d840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d844:	0f 85 88 00 00 00    	jne    c001d8d2 <switchToThread(ThreadControlBlock*)+0x9c>
c001d84a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d84d:	3c ff                	cmp    al,0xff
c001d84f:	74 7d                	je     c001d8ce <switchToThread(ThreadControlBlock*)+0x98>
c001d851:	0f b6 d0             	movzx  edx,al
c001d854:	b8 84 03 00 00       	mov    eax,0x384
c001d859:	29 d0                	sub    eax,edx
c001d85b:	c1 e0 10             	shl    eax,0x10
c001d85e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d861:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d864:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001d869:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d86f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d876:	74 4a                	je     c001d8c2 <switchToThread(ThreadControlBlock*)+0x8c>
c001d878:	0f 31                	rdtsc  
c001d87a:	a3 a8 fb 02 c0       	mov    ds:0xc002fba8,eax
c001d87f:	89 c6                	mov    esi,eax
c001d881:	89 d7                	mov    edi,edx
c001d883:	2b 35 98 fb 02 c0    	sub    esi,DWORD PTR ds:0xc002fb98
c001d889:	89 15 ac fb 02 c0    	mov    DWORD PTR ds:0xc002fbac,edx
c001d88f:	1b 3d 9c fb 02 c0    	sbb    edi,DWORD PTR ds:0xc002fb9c
c001d895:	89 35 a0 fb 02 c0    	mov    DWORD PTR ds:0xc002fba0,esi
c001d89b:	a3 98 fb 02 c0       	mov    ds:0xc002fb98,eax
c001d8a0:	89 3d a4 fb 02 c0    	mov    DWORD PTR ds:0xc002fba4,edi
c001d8a6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d8ac:	89 15 9c fb 02 c0    	mov    DWORD PTR ds:0xc002fb9c,edx
c001d8b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8b5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d8b8:	01 c6                	add    esi,eax
c001d8ba:	11 d7                	adc    edi,edx
c001d8bc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d8bf:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d8c2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d8c6:	5b                   	pop    ebx
c001d8c7:	5e                   	pop    esi
c001d8c8:	5f                   	pop    edi
c001d8c9:	e9 94 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d8ce:	31 c0                	xor    eax,eax
c001d8d0:	eb 8f                	jmp    c001d861 <switchToThread(ThreadControlBlock*)+0x2b>
c001d8d2:	5b                   	pop    ebx
c001d8d3:	c7 05 60 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x1
c001d8dd:	5e                   	pop    esi
c001d8de:	5f                   	pop    edi
c001d8df:	c3                   	ret    

c001d8e0 <Process::addArgs(char**)>:
c001d8e0:	57                   	push   edi
c001d8e1:	56                   	push   esi
c001d8e2:	53                   	push   ebx
c001d8e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d8eb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d8f5:	85 ff                	test   edi,edi
c001d8f7:	74 3d                	je     c001d936 <Process::addArgs(char**)+0x56>
c001d8f9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8fb:	85 c0                	test   eax,eax
c001d8fd:	74 37                	je     c001d936 <Process::addArgs(char**)+0x56>
c001d8ff:	31 db                	xor    ebx,ebx
c001d901:	83 ec 0c             	sub    esp,0xc
c001d904:	50                   	push   eax
c001d905:	e8 62 2e fe ff       	call   c000076c <strlen>
c001d90a:	40                   	inc    eax
c001d90b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d90e:	e8 a0 20 ff ff       	call   c000f9b3 <malloc>
c001d913:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d91a:	5a                   	pop    edx
c001d91b:	59                   	pop    ecx
c001d91c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d91f:	43                   	inc    ebx
c001d920:	50                   	push   eax
c001d921:	e8 e6 2e fe ff       	call   c000080c <strcpy>
c001d926:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d92c:	83 c4 10             	add    esp,0x10
c001d92f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d932:	85 c0                	test   eax,eax
c001d934:	75 cb                	jne    c001d901 <Process::addArgs(char**)+0x21>
c001d936:	5b                   	pop    ebx
c001d937:	5e                   	pop    esi
c001d938:	5f                   	pop    edi
c001d939:	c3                   	ret    

c001d93a <Process::Process(char const*, Process*, char**)>:
c001d93a:	56                   	push   esi
c001d93b:	53                   	push   ebx
c001d93c:	83 ec 14             	sub    esp,0x14
c001d93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d943:	05 0c 02 00 00       	add    eax,0x20c
c001d948:	bb 07 00 00 00       	mov    ebx,0x7
c001d94d:	89 c6                	mov    esi,eax
c001d94f:	85 db                	test   ebx,ebx
c001d951:	78 12                	js     c001d965 <Process::Process(char const*, Process*, char**)+0x2b>
c001d953:	83 ec 0c             	sub    esp,0xc
c001d956:	56                   	push   esi
c001d957:	e8 fa b7 00 00       	call   c0029156 <ThreadControlBlock::ThreadControlBlock()>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	83 c6 63             	add    esi,0x63
c001d962:	4b                   	dec    ebx
c001d963:	eb ea                	jmp    c001d94f <Process::Process(char const*, Process*, char**)+0x15>
c001d965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d969:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d977:	e8 b6 c8 ff ff       	call   c001a232 <Krnl::newProcessEnv(Process*)>
c001d97c:	83 c4 10             	add    esp,0x10
c001d97f:	89 c2                	mov    edx,eax
c001d981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d985:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d998:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001d99d:	8d 50 01             	lea    edx,[eax+0x1]
c001d9a0:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001d9a6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9aa:	89 02                	mov    DWORD PTR [edx],eax
c001d9ac:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9bb:	e8 f3 1f ff ff       	call   c000f9b3 <malloc>
c001d9c0:	83 c4 10             	add    esp,0x10
c001d9c3:	89 c3                	mov    ebx,eax
c001d9c5:	83 ec 08             	sub    esp,0x8
c001d9c8:	6a 00                	push   0x0
c001d9ca:	53                   	push   ebx
c001d9cb:	e8 ba 47 ff ff       	call   c001218a <VAS::VAS(bool)>
c001d9d0:	83 c4 10             	add    esp,0x10
c001d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d9eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9f3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9fd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da03:	85 c0                	test   eax,eax
c001da05:	74 42                	je     c001da49 <Process::Process(char const*, Process*, char**)+0x10f>
c001da07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da11:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da25:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da2b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da35:	05 0c 01 00 00       	add    eax,0x10c
c001da3a:	83 ec 08             	sub    esp,0x8
c001da3d:	52                   	push   edx
c001da3e:	50                   	push   eax
c001da3f:	e8 c8 2d fe ff       	call   c000080c <strcpy>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	eb 63                	jmp    c001daac <Process::Process(char const*, Process*, char**)+0x172>
c001da49:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001da51:	83 ec 0c             	sub    esp,0xc
c001da54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001da58:	e8 56 1f ff ff       	call   c000f9b3 <malloc>
c001da5d:	83 c4 10             	add    esp,0x10
c001da60:	89 c3                	mov    ebx,eax
c001da62:	83 ec 08             	sub    esp,0x8
c001da65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da69:	53                   	push   ebx
c001da6a:	e8 31 32 ff ff       	call   c0010ca0 <VgaText::VgaText(char const*)>
c001da6f:	83 c4 10             	add    esp,0x10
c001da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da76:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da86:	83 ec 0c             	sub    esp,0xc
c001da89:	50                   	push   eax
c001da8a:	e8 d0 29 ff ff       	call   c001045f <addToTerminalCycle(VgaText*)>
c001da8f:	83 c4 10             	add    esp,0x10
c001da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da96:	05 0c 01 00 00       	add    eax,0x10c
c001da9b:	83 ec 08             	sub    esp,0x8
c001da9e:	68 08 c8 02 c0       	push   0xc002c808
c001daa3:	50                   	push   eax
c001daa4:	e8 63 2d fe ff       	call   c000080c <strcpy>
c001daa9:	83 c4 10             	add    esp,0x10
c001daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab0:	83 c0 0c             	add    eax,0xc
c001dab3:	83 ec 08             	sub    esp,0x8
c001dab6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daba:	50                   	push   eax
c001dabb:	e8 4c 2d fe ff       	call   c000080c <strcpy>
c001dac0:	83 c4 10             	add    esp,0x10
c001dac3:	83 ec 08             	sub    esp,0x8
c001dac6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001daca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dace:	e8 0d fe ff ff       	call   c001d8e0 <Process::addArgs(char**)>
c001dad3:	83 c4 10             	add    esp,0x10
c001dad6:	83 ec 08             	sub    esp,0x8
c001dad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dadd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae1:	e8 a1 ed ff ff       	call   c001c887 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dae6:	83 c4 10             	add    esp,0x10
c001dae9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001daf1:	83 f0 01             	xor    eax,0x1
c001daf4:	88 c2                	mov    dl,al
c001daf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafa:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001db00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db05:	83 ec 08             	sub    esp,0x8
c001db08:	50                   	push   eax
c001db09:	68 60 c8 02 c0       	push   0xc002c860
c001db0e:	e8 f8 4e ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001db13:	83 c4 10             	add    esp,0x10
c001db16:	90                   	nop
c001db17:	83 c4 14             	add    esp,0x14
c001db1a:	5b                   	pop    ebx
c001db1b:	5e                   	pop    esi
c001db1c:	c3                   	ret    
c001db1d:	90                   	nop

c001db1e <Process::Process(bool, char const*, Process*, char**)>:
c001db1e:	56                   	push   esi
c001db1f:	53                   	push   ebx
c001db20:	83 ec 24             	sub    esp,0x24
c001db23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001db2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db2f:	05 0c 02 00 00       	add    eax,0x20c
c001db34:	bb 07 00 00 00       	mov    ebx,0x7
c001db39:	89 c6                	mov    esi,eax
c001db3b:	85 db                	test   ebx,ebx
c001db3d:	78 12                	js     c001db51 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001db3f:	83 ec 0c             	sub    esp,0xc
c001db42:	56                   	push   esi
c001db43:	e8 0e b6 00 00       	call   c0029156 <ThreadControlBlock::ThreadControlBlock()>
c001db48:	83 c4 10             	add    esp,0x10
c001db4b:	83 c6 63             	add    esi,0x63
c001db4e:	4b                   	dec    ebx
c001db4f:	eb ea                	jmp    c001db3b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001db51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db55:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db63:	e8 ca c6 ff ff       	call   c001a232 <Krnl::newProcessEnv(Process*)>
c001db68:	83 c4 10             	add    esp,0x10
c001db6b:	89 c2                	mov    edx,eax
c001db6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db71:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db84:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001db89:	8d 50 01             	lea    edx,[eax+0x1]
c001db8c:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001db92:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db96:	89 02                	mov    DWORD PTR [edx],eax
c001db98:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dba0:	83 ec 0c             	sub    esp,0xc
c001dba3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dba7:	e8 07 1e ff ff       	call   c000f9b3 <malloc>
c001dbac:	83 c4 10             	add    esp,0x10
c001dbaf:	89 c3                	mov    ebx,eax
c001dbb1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dbb6:	83 ec 08             	sub    esp,0x8
c001dbb9:	50                   	push   eax
c001dbba:	53                   	push   ebx
c001dbbb:	e8 ca 45 ff ff       	call   c001218a <VAS::VAS(bool)>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbdf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbe3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbf3:	85 c0                	test   eax,eax
c001dbf5:	74 42                	je     c001dc39 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dbf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbfb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc01:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc0b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc1b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc25:	05 0c 01 00 00       	add    eax,0x10c
c001dc2a:	83 ec 08             	sub    esp,0x8
c001dc2d:	52                   	push   edx
c001dc2e:	50                   	push   eax
c001dc2f:	e8 d8 2b fe ff       	call   c000080c <strcpy>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	eb 63                	jmp    c001dc9c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dc39:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dc48:	e8 66 1d ff ff       	call   c000f9b3 <malloc>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	89 c3                	mov    ebx,eax
c001dc52:	83 ec 08             	sub    esp,0x8
c001dc55:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc59:	53                   	push   ebx
c001dc5a:	e8 41 30 ff ff       	call   c0010ca0 <VgaText::VgaText(char const*)>
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc66:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc70:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc76:	83 ec 0c             	sub    esp,0xc
c001dc79:	50                   	push   eax
c001dc7a:	e8 e0 27 ff ff       	call   c001045f <addToTerminalCycle(VgaText*)>
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc86:	05 0c 01 00 00       	add    eax,0x10c
c001dc8b:	83 ec 08             	sub    esp,0x8
c001dc8e:	68 08 c8 02 c0       	push   0xc002c808
c001dc93:	50                   	push   eax
c001dc94:	e8 73 2b fe ff       	call   c000080c <strcpy>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca0:	83 c0 0c             	add    eax,0xc
c001dca3:	83 ec 08             	sub    esp,0x8
c001dca6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcaa:	50                   	push   eax
c001dcab:	e8 5c 2b fe ff       	call   c000080c <strcpy>
c001dcb0:	83 c4 10             	add    esp,0x10
c001dcb3:	83 ec 08             	sub    esp,0x8
c001dcb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcbe:	e8 1d fc ff ff       	call   c001d8e0 <Process::addArgs(char**)>
c001dcc3:	83 c4 10             	add    esp,0x10
c001dcc6:	90                   	nop
c001dcc7:	83 c4 24             	add    esp,0x24
c001dcca:	5b                   	pop    ebx
c001dccb:	5e                   	pop    esi
c001dccc:	c3                   	ret    

c001dccd <taskStartupFunction>:
c001dccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcd2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcd5:	c3                   	ret    

c001dcd6 <Semaphore::Semaphore(int)>:
c001dcd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcde:	89 10                	mov    DWORD PTR [eax],edx
c001dce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dce4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dcf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcfa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd01:	90                   	nop
c001dd02:	c3                   	ret    
c001dd03:	90                   	nop

c001dd04 <Mutex::Mutex()>:
c001dd04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd08:	6a 01                	push   0x1
c001dd0a:	50                   	push   eax
c001dd0b:	e8 c6 ff ff ff       	call   c001dcd6 <Semaphore::Semaphore(int)>
c001dd10:	83 c4 08             	add    esp,0x8
c001dd13:	90                   	nop
c001dd14:	c3                   	ret    
c001dd15:	90                   	nop

c001dd16 <Process::createThread(void (*)(void*), void*, int)>:
c001dd16:	55                   	push   ebp
c001dd17:	31 c9                	xor    ecx,ecx
c001dd19:	57                   	push   edi
c001dd1a:	56                   	push   esi
c001dd1b:	53                   	push   ebx
c001dd1c:	83 ec 1c             	sub    esp,0x1c
c001dd1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd23:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dd2a:	89 f2                	mov    edx,esi
c001dd2c:	0f b7 c2             	movzx  eax,dx
c001dd2f:	83 e2 01             	and    edx,0x1
c001dd32:	74 16                	je     c001dd4a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dd34:	d1 f8                	sar    eax,1
c001dd36:	41                   	inc    ecx
c001dd37:	89 c2                	mov    edx,eax
c001dd39:	83 f9 10             	cmp    ecx,0x10
c001dd3c:	75 ee                	jne    c001dd2c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dd3e:	83 c4 1c             	add    esp,0x1c
c001dd41:	31 db                	xor    ebx,ebx
c001dd43:	89 d8                	mov    eax,ebx
c001dd45:	5b                   	pop    ebx
c001dd46:	5e                   	pop    esi
c001dd47:	5f                   	pop    edi
c001dd48:	5d                   	pop    ebp
c001dd49:	c3                   	ret    
c001dd4a:	b8 01 00 00 00       	mov    eax,0x1
c001dd4f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dd52:	d3 e0                	shl    eax,cl
c001dd54:	09 c6                	or     esi,eax
c001dd56:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dd59:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dd60:	89 c6                	mov    esi,eax
c001dd62:	c1 e6 05             	shl    esi,0x5
c001dd65:	01 f0                	add    eax,esi
c001dd67:	01 d8                	add    eax,ebx
c001dd69:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dd70:	75 0a                	jne    c001dd7c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dd72:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dd7c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd82:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dd86:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dd89:	01 ca                	add    edx,ecx
c001dd8b:	83 ec 08             	sub    esp,0x8
c001dd8e:	89 d0                	mov    eax,edx
c001dd90:	c1 e0 05             	shl    eax,0x5
c001dd93:	01 d0                	add    eax,edx
c001dd95:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dd99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd9d:	01 d8                	add    eax,ebx
c001dd9f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dda5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001ddab:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001ddb1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ddb7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ddbd:	89 cd                	mov    ebp,ecx
c001ddbf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001ddc3:	f7 dd                	neg    ebp
c001ddc5:	c1 e5 15             	shl    ebp,0x15
c001ddc8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001ddce:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001ddd4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001ddde:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dde4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001ddee:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ddf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddfc:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001de03:	53                   	push   ebx
c001de04:	68 84 fb 02 c0       	push   0xc002fb84
c001de09:	e8 02 b1 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de0e:	89 d8                	mov    eax,ebx
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	83 c4 1c             	add    esp,0x1c
c001de16:	5b                   	pop    ebx
c001de17:	5e                   	pop    esi
c001de18:	5f                   	pop    edi
c001de19:	5d                   	pop    ebp
c001de1a:	c3                   	ret    
c001de1b:	90                   	nop

c001de1c <Process::createUserThread()>:
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	68 80 00 00 00       	push   0x80
c001de24:	6a 00                	push   0x0
c001de26:	68 e0 d7 01 c0       	push   0xc001d7e0
c001de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de2f:	e8 e2 fe ff ff       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c001de34:	83 c4 1c             	add    esp,0x1c
c001de37:	c3                   	ret    

c001de38 <setupMultitasking(void (*)())>:
c001de38:	56                   	push   esi
c001de39:	53                   	push   ebx
c001de3a:	51                   	push   ecx
c001de3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de3f:	eb 10                	jmp    c001de51 <setupMultitasking(void (*)())+0x19>
c001de41:	83 ec 0c             	sub    esp,0xc
c001de44:	68 84 fb 02 c0       	push   0xc002fb84
c001de49:	e8 14 b0 00 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de4e:	83 c4 10             	add    esp,0x10
c001de51:	83 ec 0c             	sub    esp,0xc
c001de54:	68 84 fb 02 c0       	push   0xc002fb84
c001de59:	e8 e0 af 00 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de5e:	83 c4 10             	add    esp,0x10
c001de61:	84 c0                	test   al,al
c001de63:	74 dc                	je     c001de41 <setupMultitasking(void (*)())+0x9>
c001de65:	83 ec 0c             	sub    esp,0xc
c001de68:	68 3f 07 00 00       	push   0x73f
c001de6d:	e8 41 1b ff ff       	call   c000f9b3 <malloc>
c001de72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de79:	89 c3                	mov    ebx,eax
c001de7b:	6a 00                	push   0x0
c001de7d:	68 0c c8 02 c0       	push   0xc002c80c
c001de82:	6a 01                	push   0x1
c001de84:	50                   	push   eax
c001de85:	e8 94 fc ff ff       	call   c001db1e <Process::Process(bool, char const*, Process*, char**)>
c001de8a:	83 c4 14             	add    esp,0x14
c001de8d:	89 1d 90 fb 02 c0    	mov    DWORD PTR ds:0xc002fb90,ebx
c001de93:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001de99:	e8 cf 28 ff ff       	call   c001076d <setActiveTerminal(VgaText*)>
c001de9e:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dea6:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001deb0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001deb6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001deb9:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dec3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dec9:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001decf:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001ded9:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dee3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001deed:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001def3:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001defd:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df03:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df0d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df13:	58                   	pop    eax
c001df14:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df1a:	5a                   	pop    edx
c001df1b:	68 08 c8 02 c0       	push   0xc002c808
c001df20:	50                   	push   eax
c001df21:	e8 e6 28 fe ff       	call   c000080c <strcpy>
c001df26:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df2d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df31:	83 c4 14             	add    esp,0x14
c001df34:	5b                   	pop    ebx
c001df35:	5e                   	pop    esi
c001df36:	e9 19 24 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001df3b <schedule()>:
c001df3b:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001df40:	85 c0                	test   eax,eax
c001df42:	74 0b                	je     c001df4f <schedule()+0x14>
c001df44:	c7 05 60 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x1
c001df4e:	c3                   	ret    
c001df4f:	53                   	push   ebx
c001df50:	83 ec 14             	sub    esp,0x14
c001df53:	68 84 fb 02 c0       	push   0xc002fb84
c001df58:	e8 e1 ae 00 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	84 c0                	test   al,al
c001df62:	75 38                	jne    c001df9c <schedule()+0x61>
c001df64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df6c:	4a                   	dec    edx
c001df6d:	74 32                	je     c001dfa1 <schedule()+0x66>
c001df6f:	83 ec 0c             	sub    esp,0xc
c001df72:	68 84 fb 02 c0       	push   0xc002fb84
c001df77:	e8 de ae 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df7c:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001df83:	89 c3                	mov    ebx,eax
c001df85:	e8 d8 ae 00 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df8a:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001df91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df94:	e8 9d f8 ff ff       	call   c001d836 <switchToThread(ThreadControlBlock*)>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	83 c4 08             	add    esp,0x8
c001df9f:	5b                   	pop    ebx
c001dfa0:	c3                   	ret    
c001dfa1:	83 ec 08             	sub    esp,0x8
c001dfa4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dfab:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dfb1:	68 84 fb 02 c0       	push   0xc002fb84
c001dfb6:	e8 55 af 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfbb:	83 c4 10             	add    esp,0x10
c001dfbe:	eb af                	jmp    c001df6f <schedule()+0x34>

c001dfc0 <Semaphore::tryAcquire()>:
c001dfc0:	53                   	push   ebx
c001dfc1:	83 ec 08             	sub    esp,0x8
c001dfc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfc8:	fa                   	cli    
c001dfc9:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001dfce:	8d 50 01             	lea    edx,[eax+0x1]
c001dfd1:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001dfd7:	8b 15 64 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb64
c001dfdd:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dfe0:	89 1d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ebx
c001dfe6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dfe9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dfeb:	7c 2a                	jl     c001e017 <Semaphore::tryAcquire()+0x57>
c001dfed:	89 15 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,edx
c001dff3:	85 d2                	test   edx,edx
c001dff5:	75 0a                	jne    c001e001 <Semaphore::tryAcquire()+0x41>
c001dff7:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001dffd:	85 d2                	test   edx,edx
c001dfff:	75 5b                	jne    c001e05c <Semaphore::tryAcquire()+0x9c>
c001e001:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e006:	85 c0                	test   eax,eax
c001e008:	74 07                	je     c001e011 <Semaphore::tryAcquire()+0x51>
c001e00a:	31 c0                	xor    eax,eax
c001e00c:	83 c4 08             	add    esp,0x8
c001e00f:	5b                   	pop    ebx
c001e010:	c3                   	ret    
c001e011:	fb                   	sti    
c001e012:	83 c4 08             	add    esp,0x8
c001e015:	5b                   	pop    ebx
c001e016:	c3                   	ret    
c001e017:	43                   	inc    ebx
c001e018:	89 15 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,edx
c001e01e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e021:	85 d2                	test   edx,edx
c001e023:	75 1f                	jne    c001e044 <Semaphore::tryAcquire()+0x84>
c001e025:	8b 0d 60 fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fb60
c001e02b:	85 c9                	test   ecx,ecx
c001e02d:	74 15                	je     c001e044 <Semaphore::tryAcquire()+0x84>
c001e02f:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e039:	e8 fd fe ff ff       	call   c001df3b <schedule()>
c001e03e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e043:	48                   	dec    eax
c001e044:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e049:	85 c0                	test   eax,eax
c001e04b:	75 08                	jne    c001e055 <Semaphore::tryAcquire()+0x95>
c001e04d:	fb                   	sti    
c001e04e:	b0 01                	mov    al,0x1
c001e050:	83 c4 08             	add    esp,0x8
c001e053:	5b                   	pop    ebx
c001e054:	c3                   	ret    
c001e055:	b0 01                	mov    al,0x1
c001e057:	83 c4 08             	add    esp,0x8
c001e05a:	5b                   	pop    ebx
c001e05b:	c3                   	ret    
c001e05c:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e066:	e8 d0 fe ff ff       	call   c001df3b <schedule()>
c001e06b:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e070:	48                   	dec    eax
c001e071:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e076:	85 c0                	test   eax,eax
c001e078:	75 90                	jne    c001e00a <Semaphore::tryAcquire()+0x4a>
c001e07a:	eb 95                	jmp    c001e011 <Semaphore::tryAcquire()+0x51>

c001e07c <Semaphore::assertLocked(char const*)>:
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e083:	fa                   	cli    
c001e084:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e08a:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e08f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e092:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e098:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e09a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e09d:	7c 24                	jl     c001e0c3 <Semaphore::assertLocked(char const*)+0x47>
c001e09f:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e0a4:	85 c0                	test   eax,eax
c001e0a6:	75 09                	jne    c001e0b1 <Semaphore::assertLocked(char const*)+0x35>
c001e0a8:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	75 29                	jne    c001e0da <Semaphore::assertLocked(char const*)+0x5e>
c001e0b1:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e0b6:	48                   	dec    eax
c001e0b7:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e0bc:	75 01                	jne    c001e0bf <Semaphore::assertLocked(char const*)+0x43>
c001e0be:	fb                   	sti    
c001e0bf:	83 c4 0c             	add    esp,0xc
c001e0c2:	c3                   	ret    
c001e0c3:	83 ec 0c             	sub    esp,0xc
c001e0c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e0ca:	e8 da c2 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001e0cf:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	48                   	dec    eax
c001e0d8:	eb c5                	jmp    c001e09f <Semaphore::assertLocked(char const*)+0x23>
c001e0da:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e0e4:	e8 52 fe ff ff       	call   c001df3b <schedule()>
c001e0e9:	eb c6                	jmp    c001e0b1 <Semaphore::assertLocked(char const*)+0x35>

c001e0eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0eb:	83 ec 0c             	sub    esp,0xc
c001e0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0fa:	e8 3c fe ff ff       	call   c001df3b <schedule()>
c001e0ff:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e104:	48                   	dec    eax
c001e105:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e10a:	75 01                	jne    c001e10d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001e10c:	fb                   	sti    
c001e10d:	83 c4 0c             	add    esp,0xc
c001e110:	c3                   	ret    

c001e111 <blockTask(TaskState)>:
c001e111:	83 ec 0c             	sub    esp,0xc
c001e114:	fa                   	cli    
c001e115:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e11b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e11f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e124:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e127:	e8 0f fe ff ff       	call   c001df3b <schedule()>
c001e12c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e131:	48                   	dec    eax
c001e132:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e137:	75 01                	jne    c001e13a <blockTask(TaskState)+0x29>
c001e139:	fb                   	sti    
c001e13a:	83 c4 0c             	add    esp,0xc
c001e13d:	c3                   	ret    

c001e13e <waitTask(int, int*, int)>:
c001e13e:	83 ec 18             	sub    esp,0x18
c001e141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e146:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e14a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e14d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e156:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e159:	6a 07                	push   0x7
c001e15b:	e8 b1 ff ff ff       	call   c001e111 <blockTask(TaskState)>
c001e160:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e165:	83 c4 10             	add    esp,0x10
c001e168:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e16b:	85 d2                	test   edx,edx
c001e16d:	74 0a                	je     c001e179 <waitTask(int, int*, int)+0x3b>
c001e16f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e172:	89 02                	mov    DWORD PTR [edx],eax
c001e174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e179:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e17c:	83 c4 0c             	add    esp,0xc
c001e17f:	c3                   	ret    

c001e180 <nanoSleepUntil(unsigned long long)>:
c001e180:	83 ec 0c             	sub    esp,0xc
c001e183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e187:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e18b:	3b 05 d0 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ecd0
c001e191:	89 d1                	mov    ecx,edx
c001e193:	1b 0d d4 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ecd4
c001e199:	73 04                	jae    c001e19f <nanoSleepUntil(unsigned long long)+0x1f>
c001e19b:	83 c4 0c             	add    esp,0xc
c001e19e:	c3                   	ret    
c001e19f:	fa                   	cli    
c001e1a0:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e1a6:	83 ec 08             	sub    esp,0x8
c001e1a9:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e1af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1b5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e1b8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1bb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1c1:	68 78 fb 02 c0       	push   0xc002fb78
c001e1c6:	e8 45 ad 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1cb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1d2:	e8 3a ff ff ff       	call   c001e111 <blockTask(TaskState)>
c001e1d7:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	48                   	dec    eax
c001e1e0:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e1e5:	85 c0                	test   eax,eax
c001e1e7:	75 09                	jne    c001e1f2 <nanoSleepUntil(unsigned long long)+0x72>
c001e1e9:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e1ee:	85 c0                	test   eax,eax
c001e1f0:	75 12                	jne    c001e204 <nanoSleepUntil(unsigned long long)+0x84>
c001e1f2:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e1f7:	48                   	dec    eax
c001e1f8:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e1fd:	75 9c                	jne    c001e19b <nanoSleepUntil(unsigned long long)+0x1b>
c001e1ff:	fb                   	sti    
c001e200:	83 c4 0c             	add    esp,0xc
c001e203:	c3                   	ret    
c001e204:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e20e:	e8 28 fd ff ff       	call   c001df3b <schedule()>
c001e213:	eb dd                	jmp    c001e1f2 <nanoSleepUntil(unsigned long long)+0x72>

c001e215 <nanoSleep(unsigned long long)>:
c001e215:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c001e21a:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c001e220:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e224:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e228:	e9 53 ff ff ff       	jmp    c001e180 <nanoSleepUntil(unsigned long long)>

c001e22d <sleep(unsigned long long)>:
c001e22d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e235:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e23a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e23e:	01 ca                	add    edx,ecx
c001e240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e244:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e248:	eb cb                	jmp    c001e215 <nanoSleep(unsigned long long)>

c001e24a <Semaphore::acquire()>:
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e251:	fa                   	cli    
c001e252:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e257:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e25d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e260:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e266:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e269:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e26b:	7d 28                	jge    c001e295 <Semaphore::acquire()+0x4b>
c001e26d:	41                   	inc    ecx
c001e26e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e271:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e276:	85 c0                	test   eax,eax
c001e278:	75 09                	jne    c001e283 <Semaphore::acquire()+0x39>
c001e27a:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e27f:	85 c0                	test   eax,eax
c001e281:	75 5d                	jne    c001e2e0 <Semaphore::acquire()+0x96>
c001e283:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e288:	48                   	dec    eax
c001e289:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e28e:	75 01                	jne    c001e291 <Semaphore::acquire()+0x47>
c001e290:	fb                   	sti    
c001e291:	83 c4 0c             	add    esp,0xc
c001e294:	c3                   	ret    
c001e295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e29a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e2a1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e2a4:	85 c9                	test   ecx,ecx
c001e2a6:	74 49                	je     c001e2f1 <Semaphore::acquire()+0xa7>
c001e2a8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e2ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e2b1:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e2bf:	68 88 c8 02 c0       	push   0xc002c888
c001e2c4:	e8 42 47 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001e2c9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e2d0:	e8 3c fe ff ff       	call   c001e111 <blockTask(TaskState)>
c001e2d5:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e2da:	83 c4 10             	add    esp,0x10
c001e2dd:	48                   	dec    eax
c001e2de:	eb 91                	jmp    c001e271 <Semaphore::acquire()+0x27>
c001e2e0:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e2ea:	e8 4c fc ff ff       	call   c001df3b <schedule()>
c001e2ef:	eb 92                	jmp    c001e283 <Semaphore::acquire()+0x39>
c001e2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e2f9:	eb b9                	jmp    c001e2b4 <Semaphore::acquire()+0x6a>

c001e2fb <taskReturned>:
c001e2fb:	83 ec 18             	sub    esp,0x18
c001e2fe:	68 a8 c8 02 c0       	push   0xc002c8a8
c001e303:	e8 a1 c0 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001e308:	83 c4 10             	add    esp,0x10
c001e30b:	83 ec 0c             	sub    esp,0xc
c001e30e:	6a 02                	push   0x2
c001e310:	e8 fc fd ff ff       	call   c001e111 <blockTask(TaskState)>
c001e315:	fa                   	cli    
c001e316:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e31c:	e8 1a fc ff ff       	call   c001df3b <schedule()>
c001e321:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	48                   	dec    eax
c001e32a:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e32f:	85 c0                	test   eax,eax
c001e331:	75 d8                	jne    c001e30b <taskReturned+0x10>
c001e333:	fb                   	sti    
c001e334:	eb d5                	jmp    c001e30b <taskReturned+0x10>

c001e336 <Thr::processFromPID(int)>:
c001e336:	57                   	push   edi
c001e337:	56                   	push   esi
c001e338:	53                   	push   ebx
c001e339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e33d:	fa                   	cli    
c001e33e:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	68 84 fb 02 c0       	push   0xc002fb84
c001e34c:	e8 09 ab 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e351:	83 c4 10             	add    esp,0x10
c001e354:	89 c7                	mov    edi,eax
c001e356:	eb 14                	jmp    c001e36c <Thr::processFromPID(int)+0x36>
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	68 84 fb 02 c0       	push   0xc002fb84
c001e360:	e8 f5 aa 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e365:	83 c4 10             	add    esp,0x10
c001e368:	39 f8                	cmp    eax,edi
c001e36a:	74 49                	je     c001e3b5 <Thr::processFromPID(int)+0x7f>
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	68 84 fb 02 c0       	push   0xc002fb84
c001e374:	e8 e1 aa 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e379:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e380:	89 c3                	mov    ebx,eax
c001e382:	e8 db aa 00 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e387:	58                   	pop    eax
c001e388:	5a                   	pop    edx
c001e389:	53                   	push   ebx
c001e38a:	68 84 fb 02 c0       	push   0xc002fb84
c001e38f:	e8 7c ab 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e394:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e397:	83 c4 10             	add    esp,0x10
c001e39a:	39 30                	cmp    DWORD PTR [eax],esi
c001e39c:	75 ba                	jne    c001e358 <Thr::processFromPID(int)+0x22>
c001e39e:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e3a3:	48                   	dec    eax
c001e3a4:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e3a9:	74 07                	je     c001e3b2 <Thr::processFromPID(int)+0x7c>
c001e3ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3ae:	5b                   	pop    ebx
c001e3af:	5e                   	pop    esi
c001e3b0:	5f                   	pop    edi
c001e3b1:	c3                   	ret    
c001e3b2:	fb                   	sti    
c001e3b3:	eb f6                	jmp    c001e3ab <Thr::processFromPID(int)+0x75>
c001e3b5:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e3ba:	48                   	dec    eax
c001e3bb:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e3c0:	75 05                	jne    c001e3c7 <Thr::processFromPID(int)+0x91>
c001e3c2:	fb                   	sti    
c001e3c3:	5b                   	pop    ebx
c001e3c4:	5e                   	pop    esi
c001e3c5:	5f                   	pop    edi
c001e3c6:	c3                   	ret    
c001e3c7:	5b                   	pop    ebx
c001e3c8:	31 c0                	xor    eax,eax
c001e3ca:	5e                   	pop    esi
c001e3cb:	5f                   	pop    edi
c001e3cc:	c3                   	ret    

c001e3cd <unblockTask(ThreadControlBlock*)>:
c001e3cd:	53                   	push   ebx
c001e3ce:	83 ec 08             	sub    esp,0x8
c001e3d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3d5:	fa                   	cli    
c001e3d6:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e3dc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3df:	85 c0                	test   eax,eax
c001e3e1:	74 5a                	je     c001e43d <unblockTask(ThreadControlBlock*)+0x70>
c001e3e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3e6:	48                   	dec    eax
c001e3e7:	74 31                	je     c001e41a <unblockTask(ThreadControlBlock*)+0x4d>
c001e3e9:	83 ec 0c             	sub    esp,0xc
c001e3ec:	68 84 fb 02 c0       	push   0xc002fb84
c001e3f1:	e8 64 aa 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	85 c0                	test   eax,eax
c001e3fb:	75 17                	jne    c001e414 <unblockTask(ThreadControlBlock*)+0x47>
c001e3fd:	eb 50                	jmp    c001e44f <unblockTask(ThreadControlBlock*)+0x82>
c001e3ff:	83 ec 08             	sub    esp,0x8
c001e402:	50                   	push   eax
c001e403:	68 84 fb 02 c0       	push   0xc002fb84
c001e408:	e8 d5 ad 00 00       	call   c00291e2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e40d:	83 c4 10             	add    esp,0x10
c001e410:	85 c0                	test   eax,eax
c001e412:	74 3b                	je     c001e44f <unblockTask(ThreadControlBlock*)+0x82>
c001e414:	39 c3                	cmp    ebx,eax
c001e416:	75 e7                	jne    c001e3ff <unblockTask(ThreadControlBlock*)+0x32>
c001e418:	eb 10                	jmp    c001e42a <unblockTask(ThreadControlBlock*)+0x5d>
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	68 2a c8 02 c0       	push   0xc002c82a
c001e422:	e8 e4 45 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001e427:	83 c4 10             	add    esp,0x10
c001e42a:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e42f:	48                   	dec    eax
c001e430:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e435:	75 01                	jne    c001e438 <unblockTask(ThreadControlBlock*)+0x6b>
c001e437:	fb                   	sti    
c001e438:	83 c4 08             	add    esp,0x8
c001e43b:	5b                   	pop    ebx
c001e43c:	c3                   	ret    
c001e43d:	83 ec 0c             	sub    esp,0xc
c001e440:	68 13 c8 02 c0       	push   0xc002c813
c001e445:	e8 c1 45 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001e44a:	83 c4 10             	add    esp,0x10
c001e44d:	eb db                	jmp    c001e42a <unblockTask(ThreadControlBlock*)+0x5d>
c001e44f:	83 ec 08             	sub    esp,0x8
c001e452:	53                   	push   ebx
c001e453:	68 84 fb 02 c0       	push   0xc002fb84
c001e458:	e8 b3 aa 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	eb c8                	jmp    c001e42a <unblockTask(ThreadControlBlock*)+0x5d>

c001e462 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e462:	55                   	push   ebp
c001e463:	57                   	push   edi
c001e464:	56                   	push   esi
c001e465:	53                   	push   ebx
c001e466:	83 ec 1c             	sub    esp,0x1c
c001e469:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e46d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e470:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e476:	85 ff                	test   edi,edi
c001e478:	7e 20                	jle    c001e49a <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e47a:	31 f6                	xor    esi,esi
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e486:	46                   	inc    esi
c001e487:	e8 37 15 ff ff       	call   c000f9c3 <free>
c001e48c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e48f:	83 c4 10             	add    esp,0x10
c001e492:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e498:	7f e2                	jg     c001e47c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e49a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e4a4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e4a9:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e4ac:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e4af:	d3 c0                	rol    eax,cl
c001e4b1:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e4b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4bb:	89 f7                	mov    edi,esi
c001e4bd:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e4c5:	0f 85 64 01 00 00    	jne    c001e62f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e4cb:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e4d1:	85 ed                	test   ebp,ebp
c001e4d3:	74 1b                	je     c001e4f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4d5:	83 ec 0c             	sub    esp,0xc
c001e4d8:	55                   	push   ebp
c001e4d9:	e8 70 bc ff ff       	call   c001a14e <EnvVarContainer::~EnvVarContainer()>
c001e4de:	59                   	pop    ecx
c001e4df:	5e                   	pop    esi
c001e4e0:	6a 0c                	push   0xc
c001e4e2:	55                   	push   ebp
c001e4e3:	e8 4b 44 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001e4e8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4eb:	83 c4 10             	add    esp,0x10
c001e4ee:	89 f7                	mov    edi,esi
c001e4f0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4f6:	85 c0                	test   eax,eax
c001e4f8:	0f 84 aa 00 00 00    	je     c001e5a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4fe:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e501:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e505:	31 c9                	xor    ecx,ecx
c001e507:	eb 10                	jmp    c001e519 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e509:	41                   	inc    ecx
c001e50a:	83 f9 10             	cmp    ecx,0x10
c001e50d:	0f 84 95 00 00 00    	je     c001e5a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e513:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e519:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e520:	d3 fa                	sar    edx,cl
c001e522:	83 e2 01             	and    edx,0x1
c001e525:	74 e2                	je     c001e509 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e527:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e52a:	01 ca                	add    edx,ecx
c001e52c:	89 d5                	mov    ebp,edx
c001e52e:	c1 e5 05             	shl    ebp,0x5
c001e531:	01 ea                	add    edx,ebp
c001e533:	01 d0                	add    eax,edx
c001e535:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e53b:	83 fd 07             	cmp    ebp,0x7
c001e53e:	75 c9                	jne    c001e509 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e540:	05 40 02 00 00       	add    eax,0x240
c001e545:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e548:	83 fd ff             	cmp    ebp,0xffffffff
c001e54b:	0f 8c e6 00 00 00    	jl     c001e637 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e551:	0f 84 97 01 00 00    	je     c001e6ee <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e557:	85 ed                	test   ebp,ebp
c001e559:	0f 84 7e 01 00 00    	je     c001e6dd <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e55f:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e561:	75 a6                	jne    c001e509 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e563:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e569:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e56d:	01 d0                	add    eax,edx
c001e56f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e573:	83 ec 0c             	sub    esp,0xc
c001e576:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e57c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e57f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e585:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e58c:	50                   	push   eax
c001e58d:	e8 3b fe ff ff       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c001e592:	83 c4 10             	add    esp,0x10
c001e595:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e59c:	89 f7                	mov    edi,esi
c001e59e:	41                   	inc    ecx
c001e59f:	83 f9 10             	cmp    ecx,0x10
c001e5a2:	0f 85 6b ff ff ff    	jne    c001e513 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e5a8:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e5ae:	85 c0                	test   eax,eax
c001e5b0:	74 5d                	je     c001e60f <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5b2:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e5b8:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e5be:	74 4f                	je     c001e60f <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	68 84 fb 02 c0       	push   0xc002fb84
c001e5c8:	e8 8d a8 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5cd:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e5d4:	89 c7                	mov    edi,eax
c001e5d6:	e8 63 a8 00 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5db:	83 c4 10             	add    esp,0x10
c001e5de:	84 c0                	test   al,al
c001e5e0:	0f 84 c2 00 00 00    	je     c001e6a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e5e6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5e9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5ef:	85 d2                	test   edx,edx
c001e5f1:	74 0f                	je     c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5f3:	83 ec 0c             	sub    esp,0xc
c001e5f6:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5f8:	52                   	push   edx
c001e5f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5fc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ff:	83 c4 10             	add    esp,0x10
c001e602:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e60c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e60f:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e615:	85 db                	test   ebx,ebx
c001e617:	74 16                	je     c001e62f <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e619:	83 ec 0c             	sub    esp,0xc
c001e61c:	53                   	push   ebx
c001e61d:	e8 42 35 ff ff       	call   c0011b64 <VAS::~VAS()>
c001e622:	58                   	pop    eax
c001e623:	5a                   	pop    edx
c001e624:	6a 14                	push   0x14
c001e626:	53                   	push   ebx
c001e627:	e8 07 43 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c001e62c:	83 c4 10             	add    esp,0x10
c001e62f:	83 c4 1c             	add    esp,0x1c
c001e632:	5b                   	pop    ebx
c001e633:	5e                   	pop    esi
c001e634:	5f                   	pop    edi
c001e635:	5d                   	pop    ebp
c001e636:	c3                   	ret    
c001e637:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	68 dc c8 02 c0       	push   0xc002c8dc
c001e643:	e8 61 bd ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001e648:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	89 f7                	mov    edi,esi
c001e650:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e654:	e9 b0 fe ff ff       	jmp    c001e509 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e659:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e65f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e665:	75 1c                	jne    c001e683 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e667:	83 ec 0c             	sub    esp,0xc
c001e66a:	68 44 c9 02 c0       	push   0xc002c944
c001e66f:	e8 97 43 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001e674:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e67b:	e8 91 fa ff ff       	call   c001e111 <blockTask(TaskState)>
c001e680:	83 c4 10             	add    esp,0x10
c001e683:	83 ec 08             	sub    esp,0x8
c001e686:	56                   	push   esi
c001e687:	68 84 fb 02 c0       	push   0xc002fb84
c001e68c:	e8 7f a8 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e691:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e698:	e8 bd a7 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	39 f8                	cmp    eax,edi
c001e6a2:	0f 84 3e ff ff ff    	je     c001e5e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e6a8:	83 ec 0c             	sub    esp,0xc
c001e6ab:	68 84 fb 02 c0       	push   0xc002fb84
c001e6b0:	e8 a5 a7 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6b5:	c7 04 24 84 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb84
c001e6bc:	89 c6                	mov    esi,eax
c001e6be:	e8 9f a7 00 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6c3:	83 c4 10             	add    esp,0x10
c001e6c6:	39 f3                	cmp    ebx,esi
c001e6c8:	74 b9                	je     c001e683 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e6ca:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6cd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6d0:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e6d6:	75 ab                	jne    c001e683 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e6d8:	e9 7c ff ff ff       	jmp    c001e659 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e6dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e1:	83 ec 0c             	sub    esp,0xc
c001e6e4:	68 10 c9 02 c0       	push   0xc002c910
c001e6e9:	e9 55 ff ff ff       	jmp    c001e643 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e6ee:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6f4:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6fa:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e700:	01 d7                	add    edi,edx
c001e702:	89 f8                	mov    eax,edi
c001e704:	e9 66 fe ff ff       	jmp    c001e56f <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e709 <cleanerTaskFunction(void*)>:
c001e709:	53                   	push   ebx
c001e70a:	83 ec 08             	sub    esp,0x8
c001e70d:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e712:	48                   	dec    eax
c001e713:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e718:	75 01                	jne    c001e71b <cleanerTaskFunction(void*)+0x12>
c001e71a:	fb                   	sti    
c001e71b:	fa                   	cli    
c001e71c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e721:	80 3d 4c fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fb4c,0x0
c001e728:	8d 50 01             	lea    edx,[eax+0x1]
c001e72b:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001e731:	0f 84 a1 00 00 00    	je     c001e7d8 <cleanerTaskFunction(void*)+0xcf>
c001e737:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e73c:	85 c0                	test   eax,eax
c001e73e:	75 01                	jne    c001e741 <cleanerTaskFunction(void*)+0x38>
c001e740:	fb                   	sti    
c001e741:	c6 05 4c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb4c,0x0
c001e748:	fa                   	cli    
c001e749:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e74f:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e755:	fa                   	cli    
c001e756:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e75c:	eb 26                	jmp    c001e784 <cleanerTaskFunction(void*)+0x7b>
c001e75e:	83 ec 0c             	sub    esp,0xc
c001e761:	68 6c fb 02 c0       	push   0xc002fb6c
c001e766:	e8 ef a6 00 00       	call   c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e76b:	c7 04 24 6c fb 02 c0 	mov    DWORD PTR [esp],0xc002fb6c
c001e772:	89 c3                	mov    ebx,eax
c001e774:	e8 e9 a6 00 00       	call   c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e77c:	e8 e1 fc ff ff       	call   c001e462 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	68 6c fb 02 c0       	push   0xc002fb6c
c001e78c:	e8 ad a6 00 00       	call   c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e791:	83 c4 10             	add    esp,0x10
c001e794:	84 c0                	test   al,al
c001e796:	74 c6                	je     c001e75e <cleanerTaskFunction(void*)+0x55>
c001e798:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e79d:	48                   	dec    eax
c001e79e:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e7a3:	75 01                	jne    c001e7a6 <cleanerTaskFunction(void*)+0x9d>
c001e7a5:	fb                   	sti    
c001e7a6:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e7ab:	48                   	dec    eax
c001e7ac:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e7b1:	0f 85 56 ff ff ff    	jne    c001e70d <cleanerTaskFunction(void*)+0x4>
c001e7b7:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e7bc:	85 c0                	test   eax,eax
c001e7be:	0f 84 49 ff ff ff    	je     c001e70d <cleanerTaskFunction(void*)+0x4>
c001e7c4:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e7ce:	e8 68 f7 ff ff       	call   c001df3b <schedule()>
c001e7d3:	e9 35 ff ff ff       	jmp    c001e70d <cleanerTaskFunction(void*)+0x4>
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	6a 02                	push   0x2
c001e7dd:	e8 09 f9 ff ff       	call   c001e0eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7e2:	83 c4 10             	add    esp,0x10
c001e7e5:	e9 57 ff ff ff       	jmp    c001e741 <cleanerTaskFunction(void*)+0x38>

c001e7ea <terminateTask(int)>:
c001e7ea:	83 ec 14             	sub    esp,0x14
c001e7ed:	fa                   	cli    
c001e7ee:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e7f4:	ff 05 64 fb 02 c0    	inc    DWORD PTR ds:0xc002fb64
c001e7fa:	fa                   	cli    
c001e7fb:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e801:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e805:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e80a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e80d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e812:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e815:	50                   	push   eax
c001e816:	68 6c fb 02 c0       	push   0xc002fb6c
c001e81b:	e8 f0 a6 00 00       	call   c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e825:	83 c4 10             	add    esp,0x10
c001e828:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e82f:	a1 48 fb 02 c0       	mov    eax,ds:0xc002fb48
c001e834:	85 c0                	test   eax,eax
c001e836:	74 53                	je     c001e88b <terminateTask(int)+0xa1>
c001e838:	83 ec 0c             	sub    esp,0xc
c001e83b:	c6 05 4c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb4c,0x1
c001e842:	50                   	push   eax
c001e843:	e8 85 fb ff ff       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e850:	48                   	dec    eax
c001e851:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e856:	75 01                	jne    c001e859 <terminateTask(int)+0x6f>
c001e858:	fb                   	sti    
c001e859:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e85e:	48                   	dec    eax
c001e85f:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e864:	75 09                	jne    c001e86f <terminateTask(int)+0x85>
c001e866:	83 3d 60 fb 02 c0 00 	cmp    DWORD PTR ds:0xc002fb60,0x0
c001e86d:	75 2e                	jne    c001e89d <terminateTask(int)+0xb3>
c001e86f:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e874:	48                   	dec    eax
c001e875:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e87a:	75 01                	jne    c001e87d <terminateTask(int)+0x93>
c001e87c:	fb                   	sti    
c001e87d:	fa                   	cli    
c001e87e:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e884:	e8 b2 f6 ff ff       	call   c001df3b <schedule()>
c001e889:	eb e4                	jmp    c001e86f <terminateTask(int)+0x85>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 41 c8 02 c0       	push   0xc002c841
c001e893:	e8 73 41 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	eb ae                	jmp    c001e84b <terminateTask(int)+0x61>
c001e89d:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e8a7:	eb db                	jmp    c001e884 <terminateTask(int)+0x9a>

c001e8a9 <Thr::terminateFromIRQ(int)>:
c001e8a9:	83 ec 18             	sub    esp,0x18
c001e8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b0:	e8 35 ff ff ff       	call   c001e7ea <terminateTask(int)>
c001e8b5:	90                   	nop

c001e8b6 <Semaphore::release()>:
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8bd:	fa                   	cli    
c001e8be:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e8c3:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001e8c9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8cc:	89 0d 64 fb 02 c0    	mov    DWORD PTR ds:0xc002fb64,ecx
c001e8d2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e8d5:	85 c9                	test   ecx,ecx
c001e8d7:	74 3c                	je     c001e915 <Semaphore::release()+0x5f>
c001e8d9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e8e2:	51                   	push   ecx
c001e8e3:	e8 e5 fa ff ff       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c001e8e8:	a1 64 fb 02 c0       	mov    eax,ds:0xc002fb64
c001e8ed:	83 c4 10             	add    esp,0x10
c001e8f0:	48                   	dec    eax
c001e8f1:	a3 64 fb 02 c0       	mov    ds:0xc002fb64,eax
c001e8f6:	85 c0                	test   eax,eax
c001e8f8:	75 09                	jne    c001e903 <Semaphore::release()+0x4d>
c001e8fa:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001e8ff:	85 c0                	test   eax,eax
c001e901:	75 17                	jne    c001e91a <Semaphore::release()+0x64>
c001e903:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001e908:	48                   	dec    eax
c001e909:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001e90e:	75 01                	jne    c001e911 <Semaphore::release()+0x5b>
c001e910:	fb                   	sti    
c001e911:	83 c4 0c             	add    esp,0xc
c001e914:	c3                   	ret    
c001e915:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e918:	eb d7                	jmp    c001e8f1 <Semaphore::release()+0x3b>
c001e91a:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001e924:	e8 12 f6 ff ff       	call   c001df3b <schedule()>
c001e929:	eb d8                	jmp    c001e903 <Semaphore::release()+0x4d>

c001e92b <__static_initialization_and_destruction_0(int, int)>:
c001e92b:	83 ec 0c             	sub    esp,0xc
c001e92e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e933:	0f 85 88 00 00 00    	jne    c001e9c1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e939:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e941:	75 7e                	jne    c001e9c1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e943:	83 ec 0c             	sub    esp,0xc
c001e946:	68 84 fb 02 c0       	push   0xc002fb84
c001e94b:	e8 50 a8 00 00       	call   c00291a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	83 ec 04             	sub    esp,0x4
c001e956:	68 24 d4 02 c0       	push   0xc002d424
c001e95b:	68 84 fb 02 c0       	push   0xc002fb84
c001e960:	68 54 91 02 c0       	push   0xc0029154
c001e965:	e8 43 3f ff ff       	call   c00128ad <__cxa_atexit>
c001e96a:	83 c4 10             	add    esp,0x10
c001e96d:	83 ec 0c             	sub    esp,0xc
c001e970:	68 78 fb 02 c0       	push   0xc002fb78
c001e975:	e8 26 a8 00 00       	call   c00291a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	83 ec 04             	sub    esp,0x4
c001e980:	68 24 d4 02 c0       	push   0xc002d424
c001e985:	68 78 fb 02 c0       	push   0xc002fb78
c001e98a:	68 54 91 02 c0       	push   0xc0029154
c001e98f:	e8 19 3f ff ff       	call   c00128ad <__cxa_atexit>
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	83 ec 0c             	sub    esp,0xc
c001e99a:	68 6c fb 02 c0       	push   0xc002fb6c
c001e99f:	e8 fc a7 00 00       	call   c00291a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9a4:	83 c4 10             	add    esp,0x10
c001e9a7:	83 ec 04             	sub    esp,0x4
c001e9aa:	68 24 d4 02 c0       	push   0xc002d424
c001e9af:	68 6c fb 02 c0       	push   0xc002fb6c
c001e9b4:	68 54 91 02 c0       	push   0xc0029154
c001e9b9:	e8 ef 3e ff ff       	call   c00128ad <__cxa_atexit>
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	90                   	nop
c001e9c2:	83 c4 0c             	add    esp,0xc
c001e9c5:	c3                   	ret    

c001e9c6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	83 ec 08             	sub    esp,0x8
c001e9cc:	68 ff ff 00 00       	push   0xffff
c001e9d1:	6a 01                	push   0x1
c001e9d3:	e8 53 ff ff ff       	call   c001e92b <__static_initialization_and_destruction_0(int, int)>
c001e9d8:	83 c4 10             	add    esp,0x10
c001e9db:	83 c4 0c             	add    esp,0xc
c001e9de:	c3                   	ret    

c001e9df <Vm::inbv(unsigned short)>:
c001e9df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9e3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9e8:	75 06                	jne    c001e9f0 <Vm::inbv(unsigned short)+0x11>
c001e9ea:	a0 cc fb 02 c0       	mov    al,ds:0xc002fbcc
c001e9ef:	c3                   	ret    
c001e9f0:	ec                   	in     al,dx
c001e9f1:	c3                   	ret    

c001e9f2 <Vm::outbv(unsigned short, unsigned char)>:
c001e9f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9fa:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9ff:	75 25                	jne    c001ea26 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ea01:	8b 0d cc fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbcc
c001ea07:	8d 51 01             	lea    edx,[ecx+0x1]
c001ea0a:	88 81 e0 fb 02 c0    	mov    BYTE PTR [ecx-0x3ffd0420],al
c001ea10:	89 15 cc fb 02 c0    	mov    DWORD PTR ds:0xc002fbcc,edx
c001ea16:	83 fa 20             	cmp    edx,0x20
c001ea19:	75 0c                	jne    c001ea27 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ea1b:	c7 05 cc fb 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x1f
c001ea25:	c3                   	ret    
c001ea26:	ee                   	out    dx,al
c001ea27:	c3                   	ret    

c001ea28 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea32:	c1 e0 04             	shl    eax,0x4
c001ea35:	01 d0                	add    eax,edx
c001ea37:	c3                   	ret    

c001ea38 <Vm::getSegment(unsigned int)>:
c001ea38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea3c:	c1 e8 10             	shr    eax,0x10
c001ea3f:	c3                   	ret    

c001ea40 <Vm::getOffset(unsigned int)>:
c001ea40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea44:	c3                   	ret    

c001ea45 <Vm::mainloop2()>:
c001ea45:	83 ec 18             	sub    esp,0x18
c001ea48:	fa                   	cli    
c001ea49:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001ea4f:	6a 02                	push   0x2
c001ea51:	c6 05 c5 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbc5,0x1
c001ea58:	e8 8e f6 ff ff       	call   c001e0eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea62:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea66:	52                   	push   edx
c001ea67:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea6b:	52                   	push   edx
c001ea6c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea70:	52                   	push   edx
c001ea71:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea75:	50                   	push   eax
c001ea76:	e8 7f 18 fe ff       	call   c00002fa <goToVM86>
c001ea7b:	83 c4 2c             	add    esp,0x2c
c001ea7e:	c3                   	ret    

c001ea7f <Vm::mainVm8086Loop(void*)>:
c001ea7f:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ea84:	48                   	dec    eax
c001ea85:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ea8a:	75 01                	jne    c001ea8d <Vm::mainVm8086Loop(void*)+0xe>
c001ea8c:	fb                   	sti    
c001ea8d:	eb b6                	jmp    c001ea45 <Vm::mainloop2()>

c001ea8f <Vm::mainloop3(unsigned long)>:
c001ea8f:	83 ec 18             	sub    esp,0x18
c001ea92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea96:	fa                   	cli    
c001ea97:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001ea9d:	6a 02                	push   0x2
c001ea9f:	c6 05 c4 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fbc4,0x1
c001eaa6:	a3 c0 fb 02 c0       	mov    ds:0xc002fbc0,eax
c001eaab:	e8 3b f6 ff ff       	call   c001e0eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eab0:	83 c4 1c             	add    esp,0x1c
c001eab3:	eb 90                	jmp    c001ea45 <Vm::mainloop2()>

c001eab5 <Vm::initialise8086()>:
c001eab5:	83 ec 0c             	sub    esp,0xc
c001eab8:	68 80 00 00 00       	push   0x80
c001eabd:	6a 00                	push   0x0
c001eabf:	68 7f ea 01 c0       	push   0xc001ea7f
c001eac4:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001eaca:	e8 47 f2 ff ff       	call   c001dd16 <Process::createThread(void (*)(void*), void*, int)>
c001eacf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ead6:	a3 c8 fb 02 c0       	mov    ds:0xc002fbc8,eax
c001eadb:	68 00 01 00 00       	push   0x100
c001eae0:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c001eae5:	6a 00                	push   0x0
c001eae7:	6a 00                	push   0x0
c001eae9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eaef:	e8 e2 34 ff ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eaf4:	83 c4 2c             	add    esp,0x2c
c001eaf7:	c3                   	ret    

c001eaf8 <Vm::finish8086()>:
c001eaf8:	53                   	push   ebx
c001eaf9:	83 ec 08             	sub    esp,0x8
c001eafc:	fa                   	cli    
c001eafd:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001eb03:	80 3d c4 fb 02 c0 00 	cmp    BYTE PTR ds:0xc002fbc4,0x0
c001eb0a:	75 15                	jne    c001eb21 <Vm::finish8086()+0x29>
c001eb0c:	e8 2a f4 ff ff       	call   c001df3b <schedule()>
c001eb11:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001eb16:	48                   	dec    eax
c001eb17:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001eb1c:	75 de                	jne    c001eafc <Vm::finish8086()+0x4>
c001eb1e:	fb                   	sti    
c001eb1f:	eb db                	jmp    c001eafc <Vm::finish8086()+0x4>
c001eb21:	83 ec 0c             	sub    esp,0xc
c001eb24:	8b 1d c0 fb 02 c0    	mov    ebx,DWORD PTR ds:0xc002fbc0
c001eb2a:	ff 35 c8 fb 02 c0    	push   DWORD PTR ds:0xc002fbc8
c001eb30:	c6 05 c4 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fbc4,0x0
c001eb37:	e8 91 f8 ff ff       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c001eb3c:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb47:	89 15 68 fb 02 c0    	mov    DWORD PTR ds:0xc002fb68,edx
c001eb4d:	85 d2                	test   edx,edx
c001eb4f:	75 01                	jne    c001eb52 <Vm::finish8086()+0x5a>
c001eb51:	fb                   	sti    
c001eb52:	89 d8                	mov    eax,ebx
c001eb54:	83 c4 08             	add    esp,0x8
c001eb57:	5b                   	pop    ebx
c001eb58:	c3                   	ret    

c001eb59 <Vm::getOutput8086(unsigned char*)>:
c001eb59:	57                   	push   edi
c001eb5a:	8b 0d cc fb 02 c0    	mov    ecx,DWORD PTR ds:0xc002fbcc
c001eb60:	56                   	push   esi
c001eb61:	be e0 fb 02 c0       	mov    esi,0xc002fbe0
c001eb66:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb6c:	a1 cc fb 02 c0       	mov    eax,ds:0xc002fbcc
c001eb71:	5e                   	pop    esi
c001eb72:	c7 05 cc fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x0
c001eb7c:	5f                   	pop    edi
c001eb7d:	c3                   	ret    

c001eb7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb7e:	55                   	push   ebp
c001eb7f:	57                   	push   edi
c001eb80:	56                   	push   esi
c001eb81:	53                   	push   ebx
c001eb82:	83 ec 2c             	sub    esp,0x2c
c001eb85:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb89:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eb8d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eb91:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eb95:	fa                   	cli    
c001eb96:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c001eb9c:	0f b6 35 c5 fb 02 c0 	movzx  esi,BYTE PTR ds:0xc002fbc5
c001eba3:	89 f0                	mov    eax,esi
c001eba5:	84 c0                	test   al,al
c001eba7:	75 1d                	jne    c001ebc6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eba9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebad:	e8 89 f3 ff ff       	call   c001df3b <schedule()>
c001ebb2:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ebb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebbb:	48                   	dec    eax
c001ebbc:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ebc1:	75 d2                	jne    c001eb95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebc3:	fb                   	sti    
c001ebc4:	eb cf                	jmp    c001eb95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebc6:	a1 c8 fb 02 c0       	mov    eax,ds:0xc002fbc8
c001ebcb:	c7 05 cc fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fbcc,0x0
c001ebd5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ebd9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ebdd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ebe1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ebe5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebe9:	50                   	push   eax
c001ebea:	6a 20                	push   0x20
c001ebec:	6a 00                	push   0x0
c001ebee:	68 e0 fb 02 c0       	push   0xc002fbe0
c001ebf3:	e8 58 1b fe ff       	call   c0000750 <memset>
c001ebf8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebff:	e8 af 0d ff ff       	call   c000f9b3 <malloc>
c001ec04:	83 c4 0c             	add    esp,0xc
c001ec07:	89 c3                	mov    ebx,eax
c001ec09:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c001ec0f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec13:	50                   	push   eax
c001ec14:	e8 51 43 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c001ec19:	83 c4 10             	add    esp,0x10
c001ec1c:	85 db                	test   ebx,ebx
c001ec1e:	75 0a                	jne    c001ec2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ec20:	83 ec 0c             	sub    esp,0xc
c001ec23:	68 6c c9 02 c0       	push   0xc002c96c
c001ec28:	eb 3e                	jmp    c001ec68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec2a:	50                   	push   eax
c001ec2b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec2f:	50                   	push   eax
c001ec30:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec34:	50                   	push   eax
c001ec35:	53                   	push   ebx
c001ec36:	e8 3f 46 ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ec43:	74 0a                	je     c001ec4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec45:	83 ec 0c             	sub    esp,0xc
c001ec48:	68 80 c9 02 c0       	push   0xc002c980
c001ec4d:	eb 19                	jmp    c001ec68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec4f:	51                   	push   ecx
c001ec50:	51                   	push   ecx
c001ec51:	6a 01                	push   0x1
c001ec53:	53                   	push   ebx
c001ec54:	e8 75 43 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c001ec59:	83 c4 10             	add    esp,0x10
c001ec5c:	85 c0                	test   eax,eax
c001ec5e:	74 24                	je     c001ec84 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	68 99 c9 02 c0       	push   0xc002c999
c001ec68:	e8 3c b7 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001ec6d:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	48                   	dec    eax
c001ec76:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ec7b:	85 c0                	test   eax,eax
c001ec7d:	75 01                	jne    c001ec80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ec7f:	fb                   	sti    
c001ec80:	31 f6                	xor    esi,esi
c001ec82:	eb 58                	jmp    c001ecdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ec84:	0f b7 ed             	movzx  ebp,bp
c001ec87:	50                   	push   eax
c001ec88:	0f b7 ff             	movzx  edi,di
c001ec8b:	50                   	push   eax
c001ec8c:	55                   	push   ebp
c001ec8d:	57                   	push   edi
c001ec8e:	e8 95 fd ff ff       	call   c001ea28 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec93:	5a                   	pop    edx
c001ec94:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ec96:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec9a:	51                   	push   ecx
c001ec9b:	50                   	push   eax
c001ec9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eca0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eca4:	53                   	push   ebx
c001eca5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eca8:	83 c4 14             	add    esp,0x14
c001ecab:	53                   	push   ebx
c001ecac:	e8 7b 43 ff ff       	call   c001302c <File::close()>
c001ecb1:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c001ecb6:	83 c4 10             	add    esp,0x10
c001ecb9:	48                   	dec    eax
c001ecba:	c6 05 c5 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fbc5,0x0
c001ecc1:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c001ecc6:	85 c0                	test   eax,eax
c001ecc8:	75 01                	jne    c001eccb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ecca:	fb                   	sti    
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	ff 35 c8 fb 02 c0    	push   DWORD PTR ds:0xc002fbc8
c001ecd4:	e8 f4 f6 ff ff       	call   c001e3cd <unblockTask(ThreadControlBlock*)>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	83 c4 2c             	add    esp,0x2c
c001ecdf:	89 f0                	mov    eax,esi
c001ece1:	5b                   	pop    ebx
c001ece2:	5e                   	pop    esi
c001ece3:	5f                   	pop    edi
c001ece4:	5d                   	pop    ebp
c001ece5:	c3                   	ret    

c001ece6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ece6:	57                   	push   edi
c001ece7:	56                   	push   esi
c001ece8:	53                   	push   ebx
c001ece9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecf5:	83 e8 06             	sub    eax,0x6
c001ecf8:	0f b7 c0             	movzx  eax,ax
c001ecfb:	50                   	push   eax
c001ecfc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed01:	50                   	push   eax
c001ed02:	e8 21 fd ff ff       	call   c001ea28 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed07:	5a                   	pop    edx
c001ed08:	5e                   	pop    esi
c001ed09:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed0c:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed0f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed15:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed18:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed1b:	83 c2 02             	add    edx,0x2
c001ed1e:	66 89 10             	mov    WORD PTR [eax],dx
c001ed21:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed24:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed28:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed2b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed2f:	89 d6                	mov    esi,edx
c001ed31:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed37:	66 81 e6 ff fd       	and    si,0xfdff
c001ed3c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed40:	74 07                	je     c001ed49 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed42:	89 d6                	mov    esi,edx
c001ed44:	66 81 ce 00 02       	or     si,0x200
c001ed49:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed56:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed5e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed61:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed69:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed6c:	5b                   	pop    ebx
c001ed6d:	5e                   	pop    esi
c001ed6e:	5f                   	pop    edi
c001ed6f:	c3                   	ret    

c001ed70 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7a:	c1 e0 04             	shl    eax,0x4
c001ed7d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed80:	c3                   	ret    

c001ed81 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed81:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed86:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8b:	c1 e0 04             	shl    eax,0x4
c001ed8e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed92:	c3                   	ret    

c001ed93 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed93:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed98:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed9d:	c1 e0 04             	shl    eax,0x4
c001eda0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eda3:	c3                   	ret    

c001eda4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eda4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edae:	c1 e0 04             	shl    eax,0x4
c001edb1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edb5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edb8:	c3                   	ret    

c001edb9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edb9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edbe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc3:	c1 e0 04             	shl    eax,0x4
c001edc6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edca:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edce:	c3                   	ret    

c001edcf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edcf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd9:	c1 e0 04             	shl    eax,0x4
c001eddc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ede0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ede3:	c3                   	ret    

c001ede4 <Vm::faultHandler(regs*)>:
c001ede4:	55                   	push   ebp
c001ede5:	57                   	push   edi
c001ede6:	56                   	push   esi
c001ede7:	53                   	push   ebx
c001ede8:	83 ec 1c             	sub    esp,0x1c
c001edeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001edef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001edf2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001edf6:	0f b7 f8             	movzx  edi,ax
c001edf9:	52                   	push   edx
c001edfa:	0f b7 c0             	movzx  eax,ax
c001edfd:	50                   	push   eax
c001edfe:	e8 25 fc ff ff       	call   c001ea28 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee03:	5a                   	pop    edx
c001ee04:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ee07:	59                   	pop    ecx
c001ee08:	89 c1                	mov    ecx,eax
c001ee0a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ee0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee11:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee1a:	0f b7 c5             	movzx  eax,bp
c001ee1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee21:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ee25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ee29:	e8 fa fb ff ff       	call   c001ea28 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee2e:	5e                   	pop    esi
c001ee2f:	be 06 00 00 00       	mov    esi,0x6
c001ee34:	5a                   	pop    edx
c001ee35:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ee3a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ee3f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ee42:	80 fa 9d             	cmp    dl,0x9d
c001ee45:	0f 84 2c 02 00 00    	je     c001f077 <Vm::faultHandler(regs*)+0x293>
c001ee4b:	0f 87 91 00 00 00    	ja     c001eee2 <Vm::faultHandler(regs*)+0xfe>
c001ee51:	80 fa 66             	cmp    dl,0x66
c001ee54:	0f 84 98 01 00 00    	je     c001eff2 <Vm::faultHandler(regs*)+0x20e>
c001ee5a:	77 47                	ja     c001eea3 <Vm::faultHandler(regs*)+0xbf>
c001ee5c:	80 fa 36             	cmp    dl,0x36
c001ee5f:	0f 84 80 01 00 00    	je     c001efe5 <Vm::faultHandler(regs*)+0x201>
c001ee65:	77 1a                	ja     c001ee81 <Vm::faultHandler(regs*)+0x9d>
c001ee67:	80 fa 26             	cmp    dl,0x26
c001ee6a:	0f 84 4e 01 00 00    	je     c001efbe <Vm::faultHandler(regs*)+0x1da>
c001ee70:	80 fa 2e             	cmp    dl,0x2e
c001ee73:	0f 85 e2 05 00 00    	jne    c001f45b <Vm::faultHandler(regs*)+0x677>
c001ee79:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee7c:	31 f6                	xor    esi,esi
c001ee7e:	41                   	inc    ecx
c001ee7f:	eb be                	jmp    c001ee3f <Vm::faultHandler(regs*)+0x5b>
c001ee81:	80 fa 64             	cmp    dl,0x64
c001ee84:	0f 84 41 01 00 00    	je     c001efcb <Vm::faultHandler(regs*)+0x1e7>
c001ee8a:	0f 87 48 01 00 00    	ja     c001efd8 <Vm::faultHandler(regs*)+0x1f4>
c001ee90:	80 fa 3e             	cmp    dl,0x3e
c001ee93:	0f 85 c2 05 00 00    	jne    c001f45b <Vm::faultHandler(regs*)+0x677>
c001ee99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee9c:	be 01 00 00 00       	mov    esi,0x1
c001eea1:	eb db                	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001eea3:	80 fa 6d             	cmp    dl,0x6d
c001eea6:	0f 84 ec 02 00 00    	je     c001f198 <Vm::faultHandler(regs*)+0x3b4>
c001eeac:	77 17                	ja     c001eec5 <Vm::faultHandler(regs*)+0xe1>
c001eeae:	80 fa 67             	cmp    dl,0x67
c001eeb1:	0f 84 48 01 00 00    	je     c001efff <Vm::faultHandler(regs*)+0x21b>
c001eeb7:	80 fa 6c             	cmp    dl,0x6c
c001eeba:	0f 84 69 02 00 00    	je     c001f129 <Vm::faultHandler(regs*)+0x345>
c001eec0:	e9 96 05 00 00       	jmp    c001f45b <Vm::faultHandler(regs*)+0x677>
c001eec5:	80 fa 6f             	cmp    dl,0x6f
c001eec8:	0f 84 f4 03 00 00    	je     c001f2c2 <Vm::faultHandler(regs*)+0x4de>
c001eece:	0f 82 59 03 00 00    	jb     c001f22d <Vm::faultHandler(regs*)+0x449>
c001eed4:	80 fa 9c             	cmp    dl,0x9c
c001eed7:	0f 84 2f 01 00 00    	je     c001f00c <Vm::faultHandler(regs*)+0x228>
c001eedd:	e9 79 05 00 00       	jmp    c001f45b <Vm::faultHandler(regs*)+0x677>
c001eee2:	80 fa ec             	cmp    dl,0xec
c001eee5:	0f 84 14 05 00 00    	je     c001f3ff <Vm::faultHandler(regs*)+0x61b>
c001eeeb:	77 7b                	ja     c001ef68 <Vm::faultHandler(regs*)+0x184>
c001eeed:	80 fa e4             	cmp    dl,0xe4
c001eef0:	0f 84 93 04 00 00    	je     c001f389 <Vm::faultHandler(regs*)+0x5a5>
c001eef6:	77 53                	ja     c001ef4b <Vm::faultHandler(regs*)+0x167>
c001eef8:	80 fa cd             	cmp    dl,0xcd
c001eefb:	0f 84 d9 01 00 00    	je     c001f0da <Vm::faultHandler(regs*)+0x2f6>
c001ef01:	80 fa cf             	cmp    dl,0xcf
c001ef04:	0f 85 51 05 00 00    	jne    c001f45b <Vm::faultHandler(regs*)+0x677>
c001ef0a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ef0d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ef10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ef14:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ef17:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ef1b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef21:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef24:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ef28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef2e:	66 c1 e8 09          	shr    ax,0x9
c001ef32:	83 e0 01             	and    eax,0x1
c001ef35:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef38:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef3b:	83 c0 06             	add    eax,0x6
c001ef3e:	25 ff ff 00 00       	and    eax,0xffff
c001ef43:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef46:	e9 0c 05 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x673>
c001ef4b:	80 fa e6             	cmp    dl,0xe6
c001ef4e:	0f 84 7f 04 00 00    	je     c001f3d3 <Vm::faultHandler(regs*)+0x5ef>
c001ef54:	0f 82 4b 04 00 00    	jb     c001f3a5 <Vm::faultHandler(regs*)+0x5c1>
c001ef5a:	80 fa e7             	cmp    dl,0xe7
c001ef5d:	0f 84 87 04 00 00    	je     c001f3ea <Vm::faultHandler(regs*)+0x606>
c001ef63:	e9 f3 04 00 00       	jmp    c001f45b <Vm::faultHandler(regs*)+0x677>
c001ef68:	80 fa ef             	cmp    dl,0xef
c001ef6b:	0f 84 d1 04 00 00    	je     c001f442 <Vm::faultHandler(regs*)+0x65e>
c001ef71:	77 28                	ja     c001ef9b <Vm::faultHandler(regs*)+0x1b7>
c001ef73:	80 fa ed             	cmp    dl,0xed
c001ef76:	0f 84 9f 04 00 00    	je     c001f41b <Vm::faultHandler(regs*)+0x637>
c001ef7c:	80 fa ee             	cmp    dl,0xee
c001ef7f:	0f 85 d6 04 00 00    	jne    c001f45b <Vm::faultHandler(regs*)+0x677>
c001ef85:	50                   	push   eax
c001ef86:	50                   	push   eax
c001ef87:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef8b:	50                   	push   eax
c001ef8c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef90:	50                   	push   eax
c001ef91:	e8 5c fa ff ff       	call   c001e9f2 <Vm::outbv(unsigned short, unsigned char)>
c001ef96:	e9 9f 04 00 00       	jmp    c001f43a <Vm::faultHandler(regs*)+0x656>
c001ef9b:	80 fa fa             	cmp    dl,0xfa
c001ef9e:	0f 84 69 01 00 00    	je     c001f10d <Vm::faultHandler(regs*)+0x329>
c001efa4:	80 fa fb             	cmp    dl,0xfb
c001efa7:	0f 84 6e 01 00 00    	je     c001f11b <Vm::faultHandler(regs*)+0x337>
c001efad:	80 fa f3             	cmp    dl,0xf3
c001efb0:	0f 85 a5 04 00 00    	jne    c001f45b <Vm::faultHandler(regs*)+0x677>
c001efb6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efb9:	e9 c0 fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001efbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efc1:	be 02 00 00 00       	mov    esi,0x2
c001efc6:	e9 b3 fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001efcb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efce:	be 03 00 00 00       	mov    esi,0x3
c001efd3:	e9 a6 fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001efd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efdb:	be 04 00 00 00       	mov    esi,0x4
c001efe0:	e9 99 fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001efe5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efe8:	be 05 00 00 00       	mov    esi,0x5
c001efed:	e9 8c fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001eff2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eff5:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001effa:	e9 7f fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001efff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f002:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f007:	e9 72 fe ff ff       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x9a>
c001f00c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f00f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f013:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f018:	74 30                	je     c001f04a <Vm::faultHandler(regs*)+0x266>
c001f01a:	83 e9 04             	sub    ecx,0x4
c001f01d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f023:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f029:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f02c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f02f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f035:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f039:	0f 84 15 04 00 00    	je     c001f454 <Vm::faultHandler(regs*)+0x670>
c001f03f:	80 ce 02             	or     dh,0x2
c001f042:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f045:	e9 0a 04 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f04a:	83 e9 02             	sub    ecx,0x2
c001f04d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f053:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f056:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f05a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f060:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f064:	74 05                	je     c001f06b <Vm::faultHandler(regs*)+0x287>
c001f066:	80 ce 02             	or     dh,0x2
c001f069:	eb 03                	jmp    c001f06e <Vm::faultHandler(regs*)+0x28a>
c001f06b:	80 e6 fd             	and    dh,0xfd
c001f06e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f072:	e9 dd 03 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f077:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f07c:	74 2a                	je     c001f0a8 <Vm::faultHandler(regs*)+0x2c4>
c001f07e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f080:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f086:	81 ca 00 02 02 00    	or     edx,0x20200
c001f08c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f08f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f091:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f097:	c1 e8 09             	shr    eax,0x9
c001f09a:	83 e0 01             	and    eax,0x1
c001f09d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0a3:	83 c0 04             	add    eax,0x4
c001f0a6:	eb 25                	jmp    c001f0cd <Vm::faultHandler(regs*)+0x2e9>
c001f0a8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f0ab:	81 ca 00 02 02 00    	or     edx,0x20200
c001f0b1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f0b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f0b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0bd:	66 c1 e8 09          	shr    ax,0x9
c001f0c1:	83 e0 01             	and    eax,0x1
c001f0c4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0c7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0ca:	83 c0 02             	add    eax,0x2
c001f0cd:	25 ff ff 00 00       	and    eax,0xffff
c001f0d2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f0d5:	e9 7a 03 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f0da:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0de:	3c ee                	cmp    al,0xee
c001f0e0:	75 10                	jne    c001f0f2 <Vm::faultHandler(regs*)+0x30e>
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f0e8:	e8 a2 f9 ff ff       	call   c001ea8f <Vm::mainloop3(unsigned long)>
c001f0ed:	e9 4b 03 00 00       	jmp    c001f43d <Vm::faultHandler(regs*)+0x659>
c001f0f2:	83 ec 0c             	sub    esp,0xc
c001f0f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fd:	51                   	push   ecx
c001f0fe:	50                   	push   eax
c001f0ff:	53                   	push   ebx
c001f100:	e8 e1 fb ff ff       	call   c001ece6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f105:	83 c4 20             	add    esp,0x20
c001f108:	e9 4a 03 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x673>
c001f10d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f112:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f116:	e9 39 03 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f11b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f120:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f124:	e9 2b 03 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f129:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f12c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f131:	74 2b                	je     c001f15e <Vm::faultHandler(regs*)+0x37a>
c001f133:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f13a:	76 22                	jbe    c001f15e <Vm::faultHandler(regs*)+0x37a>
c001f13c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f140:	50                   	push   eax
c001f141:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f145:	50                   	push   eax
c001f146:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f14a:	50                   	push   eax
c001f14b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f14f:	50                   	push   eax
c001f150:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f154:	50                   	push   eax
c001f155:	6a 6c                	push   0x6c
c001f157:	6a 6c                	push   0x6c
c001f159:	e9 b9 01 00 00       	jmp    c001f317 <Vm::faultHandler(regs*)+0x533>
c001f15e:	83 ec 0c             	sub    esp,0xc
c001f161:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f165:	0f b7 f6             	movzx  esi,si
c001f168:	50                   	push   eax
c001f169:	e8 71 f8 ff ff       	call   c001e9df <Vm::inbv(unsigned short)>
c001f16e:	83 c4 0c             	add    esp,0xc
c001f171:	0f b6 c0             	movzx  eax,al
c001f174:	50                   	push   eax
c001f175:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f179:	50                   	push   eax
c001f17a:	56                   	push   esi
c001f17b:	e8 24 fc ff ff       	call   c001eda4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f180:	83 c4 10             	add    esp,0x10
c001f183:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f186:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f18a:	74 03                	je     c001f18f <Vm::faultHandler(regs*)+0x3ab>
c001f18c:	48                   	dec    eax
c001f18d:	eb 01                	jmp    c001f190 <Vm::faultHandler(regs*)+0x3ac>
c001f18f:	40                   	inc    eax
c001f190:	0f b7 c0             	movzx  eax,ax
c001f193:	e9 8d 00 00 00       	jmp    c001f225 <Vm::faultHandler(regs*)+0x441>
c001f198:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f19b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f19e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f1a3:	74 29                	je     c001f1ce <Vm::faultHandler(regs*)+0x3ea>
c001f1a5:	3d ff ff 00 00       	cmp    eax,0xffff
c001f1aa:	76 22                	jbe    c001f1ce <Vm::faultHandler(regs*)+0x3ea>
c001f1ac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f1b0:	50                   	push   eax
c001f1b1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f1b5:	50                   	push   eax
c001f1b6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f1ba:	50                   	push   eax
c001f1bb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f1bf:	50                   	push   eax
c001f1c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f1c4:	50                   	push   eax
c001f1c5:	6a 6d                	push   0x6d
c001f1c7:	6a 6d                	push   0x6d
c001f1c9:	e9 49 01 00 00       	jmp    c001f317 <Vm::faultHandler(regs*)+0x533>
c001f1ce:	0f b7 c8             	movzx  ecx,ax
c001f1d1:	0f b7 f6             	movzx  esi,si
c001f1d4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f1d7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1dc:	74 20                	je     c001f1fe <Vm::faultHandler(regs*)+0x41a>
c001f1de:	ed                   	in     eax,dx
c001f1df:	55                   	push   ebp
c001f1e0:	50                   	push   eax
c001f1e1:	51                   	push   ecx
c001f1e2:	56                   	push   esi
c001f1e3:	e8 e7 fb ff ff       	call   c001edcf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1e8:	83 c4 10             	add    esp,0x10
c001f1eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1ee:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1f2:	74 05                	je     c001f1f9 <Vm::faultHandler(regs*)+0x415>
c001f1f4:	83 e8 04             	sub    eax,0x4
c001f1f7:	eb 27                	jmp    c001f220 <Vm::faultHandler(regs*)+0x43c>
c001f1f9:	83 c0 04             	add    eax,0x4
c001f1fc:	eb 22                	jmp    c001f220 <Vm::faultHandler(regs*)+0x43c>
c001f1fe:	66 ed                	in     ax,dx
c001f200:	0f b7 c0             	movzx  eax,ax
c001f203:	57                   	push   edi
c001f204:	50                   	push   eax
c001f205:	51                   	push   ecx
c001f206:	56                   	push   esi
c001f207:	e8 ad fb ff ff       	call   c001edb9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f20c:	83 c4 10             	add    esp,0x10
c001f20f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f212:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f216:	74 05                	je     c001f21d <Vm::faultHandler(regs*)+0x439>
c001f218:	83 e8 02             	sub    eax,0x2
c001f21b:	eb 03                	jmp    c001f220 <Vm::faultHandler(regs*)+0x43c>
c001f21d:	83 c0 02             	add    eax,0x2
c001f220:	25 ff ff 00 00       	and    eax,0xffff
c001f225:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f228:	e9 27 02 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f22d:	8d 46 ff             	lea    eax,[esi-0x1]
c001f230:	3c 05                	cmp    al,0x5
c001f232:	77 24                	ja     c001f258 <Vm::faultHandler(regs*)+0x474>
c001f234:	0f b6 c0             	movzx  eax,al
c001f237:	ff 24 85 0c ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd35f4]
c001f23e:	0f b7 fd             	movzx  edi,bp
c001f241:	eb 15                	jmp    c001f258 <Vm::faultHandler(regs*)+0x474>
c001f243:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f247:	eb 0f                	jmp    c001f258 <Vm::faultHandler(regs*)+0x474>
c001f249:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f24d:	eb 09                	jmp    c001f258 <Vm::faultHandler(regs*)+0x474>
c001f24f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f253:	eb 03                	jmp    c001f258 <Vm::faultHandler(regs*)+0x474>
c001f255:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f258:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f25b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f260:	74 29                	je     c001f28b <Vm::faultHandler(regs*)+0x4a7>
c001f262:	3d ff ff 00 00       	cmp    eax,0xffff
c001f267:	76 22                	jbe    c001f28b <Vm::faultHandler(regs*)+0x4a7>
c001f269:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f26d:	50                   	push   eax
c001f26e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f272:	50                   	push   eax
c001f273:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f277:	50                   	push   eax
c001f278:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f27c:	50                   	push   eax
c001f27d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f281:	50                   	push   eax
c001f282:	6a 6e                	push   0x6e
c001f284:	6a 6e                	push   0x6e
c001f286:	e9 8c 00 00 00       	jmp    c001f317 <Vm::faultHandler(regs*)+0x533>
c001f28b:	0f b7 c0             	movzx  eax,ax
c001f28e:	52                   	push   edx
c001f28f:	52                   	push   edx
c001f290:	50                   	push   eax
c001f291:	57                   	push   edi
c001f292:	e8 d9 fa ff ff       	call   c001ed70 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f297:	59                   	pop    ecx
c001f298:	0f b6 c0             	movzx  eax,al
c001f29b:	5e                   	pop    esi
c001f29c:	50                   	push   eax
c001f29d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f2a1:	50                   	push   eax
c001f2a2:	e8 4b f7 ff ff       	call   c001e9f2 <Vm::outbv(unsigned short, unsigned char)>
c001f2a7:	83 c4 10             	add    esp,0x10
c001f2aa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f2ad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f2b1:	74 03                	je     c001f2b6 <Vm::faultHandler(regs*)+0x4d2>
c001f2b3:	48                   	dec    eax
c001f2b4:	eb 01                	jmp    c001f2b7 <Vm::faultHandler(regs*)+0x4d3>
c001f2b6:	40                   	inc    eax
c001f2b7:	0f b7 c0             	movzx  eax,ax
c001f2ba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f2bd:	e9 92 01 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f2c2:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2c5:	3c 05                	cmp    al,0x5
c001f2c7:	77 1f                	ja     c001f2e8 <Vm::faultHandler(regs*)+0x504>
c001f2c9:	0f b6 c0             	movzx  eax,al
c001f2cc:	ff 24 85 24 ca 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd35dc]
c001f2d3:	89 ef                	mov    edi,ebp
c001f2d5:	eb 11                	jmp    c001f2e8 <Vm::faultHandler(regs*)+0x504>
c001f2d7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f2da:	eb 0c                	jmp    c001f2e8 <Vm::faultHandler(regs*)+0x504>
c001f2dc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f2df:	eb 07                	jmp    c001f2e8 <Vm::faultHandler(regs*)+0x504>
c001f2e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f2e4:	eb 02                	jmp    c001f2e8 <Vm::faultHandler(regs*)+0x504>
c001f2e6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f2e8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f2eb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f2f0:	74 37                	je     c001f329 <Vm::faultHandler(regs*)+0x545>
c001f2f2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f2f8:	76 2f                	jbe    c001f329 <Vm::faultHandler(regs*)+0x545>
c001f2fa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2fe:	50                   	push   eax
c001f2ff:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f303:	50                   	push   eax
c001f304:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f308:	50                   	push   eax
c001f309:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f30d:	50                   	push   eax
c001f30e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f312:	50                   	push   eax
c001f313:	6a 6f                	push   0x6f
c001f315:	6a 6f                	push   0x6f
c001f317:	68 b2 c9 02 c0       	push   0xc002c9b2
c001f31c:	e8 ea 36 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001f321:	83 c4 20             	add    esp,0x20
c001f324:	e9 86 01 00 00       	jmp    c001f4af <Vm::faultHandler(regs*)+0x6cb>
c001f329:	0f b7 d7             	movzx  edx,di
c001f32c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f32f:	0f b7 c6             	movzx  eax,si
c001f332:	81 e1 00 04 00 00    	and    ecx,0x400
c001f338:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f33b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f340:	74 1d                	je     c001f35f <Vm::faultHandler(regs*)+0x57b>
c001f342:	55                   	push   ebp
c001f343:	55                   	push   ebp
c001f344:	50                   	push   eax
c001f345:	52                   	push   edx
c001f346:	e8 48 fa ff ff       	call   c001ed93 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f34b:	83 c4 10             	add    esp,0x10
c001f34e:	89 fa                	mov    edx,edi
c001f350:	ef                   	out    dx,eax
c001f351:	85 c9                	test   ecx,ecx
c001f353:	74 05                	je     c001f35a <Vm::faultHandler(regs*)+0x576>
c001f355:	83 ee 04             	sub    esi,0x4
c001f358:	eb 21                	jmp    c001f37b <Vm::faultHandler(regs*)+0x597>
c001f35a:	83 c6 04             	add    esi,0x4
c001f35d:	eb 1c                	jmp    c001f37b <Vm::faultHandler(regs*)+0x597>
c001f35f:	55                   	push   ebp
c001f360:	55                   	push   ebp
c001f361:	50                   	push   eax
c001f362:	52                   	push   edx
c001f363:	e8 19 fa ff ff       	call   c001ed81 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f368:	83 c4 10             	add    esp,0x10
c001f36b:	89 fa                	mov    edx,edi
c001f36d:	66 ef                	out    dx,ax
c001f36f:	85 c9                	test   ecx,ecx
c001f371:	74 05                	je     c001f378 <Vm::faultHandler(regs*)+0x594>
c001f373:	83 ee 02             	sub    esi,0x2
c001f376:	eb 03                	jmp    c001f37b <Vm::faultHandler(regs*)+0x597>
c001f378:	83 c6 02             	add    esi,0x2
c001f37b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f381:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f384:	e9 cb 00 00 00       	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f389:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f390:	83 ec 0c             	sub    esp,0xc
c001f393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f397:	50                   	push   eax
c001f398:	e8 42 f6 ff ff       	call   c001e9df <Vm::inbv(unsigned short)>
c001f39d:	0f b6 c0             	movzx  eax,al
c001f3a0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f3a3:	eb 3f                	jmp    c001f3e4 <Vm::faultHandler(regs*)+0x600>
c001f3a5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3aa:	74 07                	je     c001f3b3 <Vm::faultHandler(regs*)+0x5cf>
c001f3ac:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3b0:	ed                   	in     eax,dx
c001f3b1:	eb 14                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x5e3>
c001f3b3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f3b6:	66 31 f6             	xor    si,si
c001f3b9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f3bc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3c0:	66 ed                	in     ax,dx
c001f3c2:	0f b7 c0             	movzx  eax,ax
c001f3c5:	09 f0                	or     eax,esi
c001f3c7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3ca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3ce:	e9 84 00 00 00       	jmp    c001f457 <Vm::faultHandler(regs*)+0x673>
c001f3d3:	52                   	push   edx
c001f3d4:	52                   	push   edx
c001f3d5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f3d9:	50                   	push   eax
c001f3da:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3de:	50                   	push   eax
c001f3df:	e8 0e f6 ff ff       	call   c001e9f2 <Vm::outbv(unsigned short, unsigned char)>
c001f3e4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3e8:	eb 53                	jmp    c001f43d <Vm::faultHandler(regs*)+0x659>
c001f3ea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3ed:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3f1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3f6:	74 03                	je     c001f3fb <Vm::faultHandler(regs*)+0x617>
c001f3f8:	ef                   	out    dx,eax
c001f3f9:	eb cf                	jmp    c001f3ca <Vm::faultHandler(regs*)+0x5e6>
c001f3fb:	66 ef                	out    dx,ax
c001f3fd:	eb cb                	jmp    c001f3ca <Vm::faultHandler(regs*)+0x5e6>
c001f3ff:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f40d:	50                   	push   eax
c001f40e:	e8 cc f5 ff ff       	call   c001e9df <Vm::inbv(unsigned short)>
c001f413:	0f b6 c0             	movzx  eax,al
c001f416:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f419:	eb 1f                	jmp    c001f43a <Vm::faultHandler(regs*)+0x656>
c001f41b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f41e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f423:	74 03                	je     c001f428 <Vm::faultHandler(regs*)+0x644>
c001f425:	ed                   	in     eax,dx
c001f426:	eb 0d                	jmp    c001f435 <Vm::faultHandler(regs*)+0x651>
c001f428:	66 ed                	in     ax,dx
c001f42a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f42d:	0f b7 c0             	movzx  eax,ax
c001f430:	66 31 d2             	xor    dx,dx
c001f433:	09 d0                	or     eax,edx
c001f435:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f438:	eb 1a                	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f43a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f43d:	83 c4 10             	add    esp,0x10
c001f440:	eb 15                	jmp    c001f457 <Vm::faultHandler(regs*)+0x673>
c001f442:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f445:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f448:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f44d:	74 03                	je     c001f452 <Vm::faultHandler(regs*)+0x66e>
c001f44f:	ef                   	out    dx,eax
c001f450:	eb 02                	jmp    c001f454 <Vm::faultHandler(regs*)+0x670>
c001f452:	66 ef                	out    dx,ax
c001f454:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f457:	b0 01                	mov    al,0x1
c001f459:	eb 56                	jmp    c001f4b1 <Vm::faultHandler(regs*)+0x6cd>
c001f45b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f45f:	50                   	push   eax
c001f460:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f464:	50                   	push   eax
c001f465:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f469:	50                   	push   eax
c001f46a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f46e:	50                   	push   eax
c001f46f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f473:	50                   	push   eax
c001f474:	52                   	push   edx
c001f475:	52                   	push   edx
c001f476:	68 df c9 02 c0       	push   0xc002c9df
c001f47b:	e8 8b 35 ff ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c001f480:	83 c4 20             	add    esp,0x20
c001f483:	83 ec 0c             	sub    esp,0xc
c001f486:	6a 60                	push   0x60
c001f488:	e8 52 f5 ff ff       	call   c001e9df <Vm::inbv(unsigned short)>
c001f48d:	83 c4 10             	add    esp,0x10
c001f490:	3c 1c                	cmp    al,0x1c
c001f492:	74 04                	je     c001f498 <Vm::faultHandler(regs*)+0x6b4>
c001f494:	3c 5a                	cmp    al,0x5a
c001f496:	75 eb                	jne    c001f483 <Vm::faultHandler(regs*)+0x69f>
c001f498:	3c 5a                	cmp    al,0x5a
c001f49a:	74 04                	je     c001f4a0 <Vm::faultHandler(regs*)+0x6bc>
c001f49c:	3c 1c                	cmp    al,0x1c
c001f49e:	75 0f                	jne    c001f4af <Vm::faultHandler(regs*)+0x6cb>
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	6a 60                	push   0x60
c001f4a5:	e8 35 f5 ff ff       	call   c001e9df <Vm::inbv(unsigned short)>
c001f4aa:	83 c4 10             	add    esp,0x10
c001f4ad:	eb e9                	jmp    c001f498 <Vm::faultHandler(regs*)+0x6b4>
c001f4af:	31 c0                	xor    eax,eax
c001f4b1:	83 c4 1c             	add    esp,0x1c
c001f4b4:	5b                   	pop    ebx
c001f4b5:	5e                   	pop    esi
c001f4b6:	5f                   	pop    edi
c001f4b7:	5d                   	pop    ebp
c001f4b8:	c3                   	ret    

c001f4b9 <Vm::fpuInternalTo32(unsigned long long)>:
c001f4b9:	57                   	push   edi
c001f4ba:	56                   	push   esi
c001f4bb:	53                   	push   ebx
c001f4bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c4:	89 d6                	mov    esi,edx
c001f4c6:	89 d7                	mov    edi,edx
c001f4c8:	89 c1                	mov    ecx,eax
c001f4ca:	c1 ef 14             	shr    edi,0x14
c001f4cd:	89 d3                	mov    ebx,edx
c001f4cf:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4d5:	31 d2                	xor    edx,edx
c001f4d7:	89 f8                	mov    eax,edi
c001f4d9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f4df:	bf ff 00 00 00       	mov    edi,0xff
c001f4e4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f4e9:	83 d2 ff             	adc    edx,0xffffffff
c001f4ec:	39 c7                	cmp    edi,eax
c001f4ee:	bf 00 00 00 00       	mov    edi,0x0
c001f4f3:	19 d7                	sbb    edi,edx
c001f4f5:	72 15                	jb     c001f50c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4f7:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4fb:	c1 e0 17             	shl    eax,0x17
c001f4fe:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f504:	09 f1                	or     ecx,esi
c001f506:	09 c1                	or     ecx,eax
c001f508:	89 cf                	mov    edi,ecx
c001f50a:	eb 02                	jmp    c001f50e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f50c:	31 ff                	xor    edi,edi
c001f50e:	89 f8                	mov    eax,edi
c001f510:	5b                   	pop    ebx
c001f511:	5e                   	pop    esi
c001f512:	5f                   	pop    edi
c001f513:	c3                   	ret    

c001f514 <Vm::fpuInternalTo64(unsigned long long)>:
c001f514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f51c:	c3                   	ret    

c001f51d <Vm::fpu32ToInternal(unsigned int)>:
c001f51d:	57                   	push   edi
c001f51e:	31 ff                	xor    edi,edi
c001f520:	56                   	push   esi
c001f521:	53                   	push   ebx
c001f522:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f526:	89 cb                	mov    ebx,ecx
c001f528:	89 ce                	mov    esi,ecx
c001f52a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f530:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f536:	c1 e9 17             	shr    ecx,0x17
c001f539:	89 f0                	mov    eax,esi
c001f53b:	0f b6 d1             	movzx  edx,cl
c001f53e:	81 c2 80 03 00 00    	add    edx,0x380
c001f544:	89 d1                	mov    ecx,edx
c001f546:	89 fa                	mov    edx,edi
c001f548:	c1 e1 14             	shl    ecx,0x14
c001f54b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f54f:	c1 e0 1d             	shl    eax,0x1d
c001f552:	89 d7                	mov    edi,edx
c001f554:	89 c6                	mov    esi,eax
c001f556:	89 ca                	mov    edx,ecx
c001f558:	89 f0                	mov    eax,esi
c001f55a:	09 fa                	or     edx,edi
c001f55c:	09 da                	or     edx,ebx
c001f55e:	5b                   	pop    ebx
c001f55f:	5e                   	pop    esi
c001f560:	5f                   	pop    edi
c001f561:	c3                   	ret    

c001f562 <Vm::fpu64ToInternal(unsigned long long)>:
c001f562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f56a:	c3                   	ret    

c001f56b <Vm::fpuFloatToLong(unsigned long long)>:
c001f56b:	57                   	push   edi
c001f56c:	31 c0                	xor    eax,eax
c001f56e:	56                   	push   esi
c001f56f:	31 d2                	xor    edx,edx
c001f571:	53                   	push   ebx
c001f572:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f576:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f57a:	89 d9                	mov    ecx,ebx
c001f57c:	c1 e9 14             	shr    ecx,0x14
c001f57f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f585:	89 cf                	mov    edi,ecx
c001f587:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f58d:	78 33                	js     c001f5c2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f58f:	89 d9                	mov    ecx,ebx
c001f591:	89 f0                	mov    eax,esi
c001f593:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f599:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f59f:	89 ca                	mov    edx,ecx
c001f5a1:	b9 34 00 00 00       	mov    ecx,0x34
c001f5a6:	29 f9                	sub    ecx,edi
c001f5a8:	0f ad d0             	shrd   eax,edx,cl
c001f5ab:	d3 fa                	sar    edx,cl
c001f5ad:	f6 c1 20             	test   cl,0x20
c001f5b0:	74 05                	je     c001f5b7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5b2:	89 d0                	mov    eax,edx
c001f5b4:	c1 fa 1f             	sar    edx,0x1f
c001f5b7:	85 db                	test   ebx,ebx
c001f5b9:	79 07                	jns    c001f5c2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5bb:	f7 d8                	neg    eax
c001f5bd:	83 d2 00             	adc    edx,0x0
c001f5c0:	f7 da                	neg    edx
c001f5c2:	5b                   	pop    ebx
c001f5c3:	5e                   	pop    esi
c001f5c4:	5f                   	pop    edi
c001f5c5:	c3                   	ret    

c001f5c6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5c6:	57                   	push   edi
c001f5c7:	31 c9                	xor    ecx,ecx
c001f5c9:	56                   	push   esi
c001f5ca:	53                   	push   ebx
c001f5cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5d3:	0f ba e7 14          	bt     edi,0x14
c001f5d7:	72 07                	jb     c001f5e0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5d9:	01 f6                	add    esi,esi
c001f5db:	11 ff                	adc    edi,edi
c001f5dd:	41                   	inc    ecx
c001f5de:	eb f3                	jmp    c001f5d3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f5e0:	89 fa                	mov    edx,edi
c001f5e2:	89 f0                	mov    eax,esi
c001f5e4:	bb 33 04 00 00       	mov    ebx,0x433
c001f5e9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5ef:	29 cb                	sub    ebx,ecx
c001f5f1:	89 d9                	mov    ecx,ebx
c001f5f3:	5b                   	pop    ebx
c001f5f4:	c1 e1 14             	shl    ecx,0x14
c001f5f7:	5e                   	pop    esi
c001f5f8:	09 ca                	or     edx,ecx
c001f5fa:	5f                   	pop    edi
c001f5fb:	c3                   	ret    

c001f5fc <Vm::fpuLongToFloat(long long)>:
c001f5fc:	56                   	push   esi
c001f5fd:	31 c0                	xor    eax,eax
c001f5ff:	53                   	push   ebx
c001f600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f608:	39 c8                	cmp    eax,ecx
c001f60a:	19 d8                	sbb    eax,ebx
c001f60c:	7d 04                	jge    c001f612 <Vm::fpuLongToFloat(long long)+0x16>
c001f60e:	31 f6                	xor    esi,esi
c001f610:	eb 0c                	jmp    c001f61e <Vm::fpuLongToFloat(long long)+0x22>
c001f612:	f7 d9                	neg    ecx
c001f614:	be 01 00 00 00       	mov    esi,0x1
c001f619:	83 d3 00             	adc    ebx,0x0
c001f61c:	f7 db                	neg    ebx
c001f61e:	31 c0                	xor    eax,eax
c001f620:	0f ba e3 14          	bt     ebx,0x14
c001f624:	72 07                	jb     c001f62d <Vm::fpuLongToFloat(long long)+0x31>
c001f626:	01 c9                	add    ecx,ecx
c001f628:	11 db                	adc    ebx,ebx
c001f62a:	40                   	inc    eax
c001f62b:	eb f3                	jmp    c001f620 <Vm::fpuLongToFloat(long long)+0x24>
c001f62d:	ba 33 04 00 00       	mov    edx,0x433
c001f632:	29 c2                	sub    edx,eax
c001f634:	89 c8                	mov    eax,ecx
c001f636:	c1 e2 14             	shl    edx,0x14
c001f639:	89 d9                	mov    ecx,ebx
c001f63b:	89 f3                	mov    ebx,esi
c001f63d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f643:	09 ca                	or     edx,ecx
c001f645:	84 db                	test   bl,bl
c001f647:	74 06                	je     c001f64f <Vm::fpuLongToFloat(long long)+0x53>
c001f649:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f64f:	5b                   	pop    ebx
c001f650:	5e                   	pop    esi
c001f651:	c3                   	ret    

c001f652 <Vm::fpuGet0()>:
c001f652:	31 c0                	xor    eax,eax
c001f654:	31 d2                	xor    edx,edx
c001f656:	c3                   	ret    

c001f657 <Vm::fpuGet1()>:
c001f657:	b8 01 00 00 00       	mov    eax,0x1
c001f65c:	31 d2                	xor    edx,edx
c001f65e:	c3                   	ret    

c001f65f <Vm::fpuGetPi()>:
c001f65f:	b8 03 00 00 00       	mov    eax,0x3
c001f664:	31 d2                	xor    edx,edx
c001f666:	c3                   	ret    

c001f667 <Vm::fpuGetLog2E()>:
c001f667:	83 ec 18             	sub    esp,0x18
c001f66a:	68 3c ca 02 c0       	push   0xc002ca3c
c001f66f:	e8 35 ad ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f674:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f679:	31 d2                	xor    edx,edx
c001f67b:	83 c4 1c             	add    esp,0x1c
c001f67e:	c3                   	ret    

c001f67f <Vm::fpuGetLogE2()>:
c001f67f:	83 ec 18             	sub    esp,0x18
c001f682:	68 48 ca 02 c0       	push   0xc002ca48
c001f687:	e8 1d ad ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f68c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f691:	31 d2                	xor    edx,edx
c001f693:	83 c4 1c             	add    esp,0x1c
c001f696:	c3                   	ret    

c001f697 <Vm::fpuGetLog210()>:
c001f697:	83 ec 18             	sub    esp,0x18
c001f69a:	68 54 ca 02 c0       	push   0xc002ca54
c001f69f:	e8 05 ad ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f6a4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6a9:	31 d2                	xor    edx,edx
c001f6ab:	83 c4 1c             	add    esp,0x1c
c001f6ae:	c3                   	ret    

c001f6af <Vm::fpuGetLog102()>:
c001f6af:	83 ec 18             	sub    esp,0x18
c001f6b2:	68 61 ca 02 c0       	push   0xc002ca61
c001f6b7:	e8 ed ac ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f6bc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6c1:	31 d2                	xor    edx,edx
c001f6c3:	83 c4 1c             	add    esp,0x1c
c001f6c6:	c3                   	ret    

c001f6c7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6cb:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6d3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6d7:	0f 92 c0             	setb   al
c001f6da:	c3                   	ret    

c001f6db <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f6e7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6eb:	09 c2                	or     edx,eax
c001f6ed:	0f 94 c0             	sete   al
c001f6f0:	c3                   	ret    

c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	53                   	push   ebx
c001f6f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f700:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f704:	57                   	push   edi
c001f705:	56                   	push   esi
c001f706:	53                   	push   ebx
c001f707:	51                   	push   ecx
c001f708:	e8 ce ff ff ff       	call   c001f6db <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	88 c2                	mov    dl,al
c001f712:	31 c0                	xor    eax,eax
c001f714:	84 d2                	test   dl,dl
c001f716:	75 0c                	jne    c001f724 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f718:	57                   	push   edi
c001f719:	56                   	push   esi
c001f71a:	53                   	push   ebx
c001f71b:	51                   	push   ecx
c001f71c:	e8 a6 ff ff ff       	call   c001f6c7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f721:	83 c4 10             	add    esp,0x10
c001f724:	83 e0 01             	and    eax,0x1
c001f727:	5b                   	pop    ebx
c001f728:	88 c1                	mov    cl,al
c001f72a:	83 e2 01             	and    edx,0x1
c001f72d:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f732:	c1 e2 06             	shl    edx,0x6
c001f735:	83 e0 ba             	and    eax,0xffffffba
c001f738:	5e                   	pop    esi
c001f739:	09 c8                	or     eax,ecx
c001f73b:	5f                   	pop    edi
c001f73c:	09 d0                	or     eax,edx
c001f73e:	a2 01 fc 02 c0       	mov    ds:0xc002fc01,al
c001f743:	c3                   	ret    

c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f74c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f750:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f754:	c3                   	ret    

c001f755 <Vm::fpuAbs(unsigned long long)>:
c001f755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f759:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f75d:	c3                   	ret    

c001f75e <Vm::fpuChs(unsigned long long)>:
c001f75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f762:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f766:	f7 d8                	neg    eax
c001f768:	83 d2 00             	adc    edx,0x0
c001f76b:	f7 da                	neg    edx
c001f76d:	c3                   	ret    

c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f76e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f772:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f777:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f77b:	eb c7                	jmp    c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f77d:	53                   	push   ebx
c001f77e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f782:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f78a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f78e:	0f af ca             	imul   ecx,edx
c001f791:	0f af d8             	imul   ebx,eax
c001f794:	f7 e2                	mul    edx
c001f796:	01 d9                	add    ecx,ebx
c001f798:	5b                   	pop    ebx
c001f799:	01 ca                	add    edx,ecx
c001f79b:	c3                   	ret    

c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f79c:	83 ec 0c             	sub    esp,0xc
c001f79f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7af:	e8 30 76 00 00       	call   c0026de4 <__udivdi3>
c001f7b4:	83 c4 1c             	add    esp,0x1c
c001f7b7:	c3                   	ret    

c001f7b8 <Vm::fpuSquare(unsigned long long)>:
c001f7b8:	50                   	push   eax
c001f7b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7c1:	52                   	push   edx
c001f7c2:	50                   	push   eax
c001f7c3:	52                   	push   edx
c001f7c4:	50                   	push   eax
c001f7c5:	e8 b3 ff ff ff       	call   c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7ca:	83 c4 14             	add    esp,0x14
c001f7cd:	c3                   	ret    

c001f7ce <Vm::fpuGetReg(int)>:
c001f7ce:	83 ec 0c             	sub    esp,0xc
c001f7d1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7d6:	76 10                	jbe    c001f7e8 <Vm::fpuGetReg(int)+0x1a>
c001f7d8:	83 ec 0c             	sub    esp,0xc
c001f7db:	68 6e ca 02 c0       	push   0xc002ca6e
c001f7e0:	e8 c4 ab ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f7e5:	83 c4 10             	add    esp,0x10
c001f7e8:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f7ed:	b9 08 00 00 00       	mov    ecx,0x8
c001f7f2:	c0 e8 03             	shr    al,0x3
c001f7f5:	83 e0 07             	and    eax,0x7
c001f7f8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7fc:	99                   	cdq    
c001f7fd:	f7 f9                	idiv   ecx
c001f7ff:	8b 04 d5 04 fc 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd03fc]
c001f806:	8b 14 d5 08 fc 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd03f8]
c001f80d:	83 c4 0c             	add    esp,0xc
c001f810:	c3                   	ret    

c001f811 <Vm::fpuSetReg(int, unsigned long long)>:
c001f811:	57                   	push   edi
c001f812:	56                   	push   esi
c001f813:	52                   	push   edx
c001f814:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f818:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f81c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f821:	76 10                	jbe    c001f833 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	68 81 ca 02 c0       	push   0xc002ca81
c001f82b:	e8 79 ab ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c001f830:	83 c4 10             	add    esp,0x10
c001f833:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f838:	b9 08 00 00 00       	mov    ecx,0x8
c001f83d:	c0 e8 03             	shr    al,0x3
c001f840:	83 e0 07             	and    eax,0x7
c001f843:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f847:	99                   	cdq    
c001f848:	f7 f9                	idiv   ecx
c001f84a:	89 34 d5 04 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd03fc],esi
c001f851:	89 3c d5 08 fc 02 c0 	mov    DWORD PTR [edx*8-0x3ffd03f8],edi
c001f858:	58                   	pop    eax
c001f859:	5e                   	pop    esi
c001f85a:	5f                   	pop    edi
c001f85b:	c3                   	ret    

c001f85c <Vm::fpuPush(unsigned long long)>:
c001f85c:	a0 01 fc 02 c0       	mov    al,ds:0xc002fc01
c001f861:	c0 e8 03             	shr    al,0x3
c001f864:	83 e0 07             	and    eax,0x7
c001f867:	83 c0 07             	add    eax,0x7
c001f86a:	88 c2                	mov    dl,al
c001f86c:	83 e0 07             	and    eax,0x7
c001f86f:	83 e2 07             	and    edx,0x7
c001f872:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f879:	8a 15 01 fc 02 c0    	mov    dl,BYTE PTR ds:0xc002fc01
c001f87f:	83 e2 c7             	and    edx,0xffffffc7
c001f882:	09 ca                	or     edx,ecx
c001f884:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f888:	88 15 01 fc 02 c0    	mov    BYTE PTR ds:0xc002fc01,dl
c001f88e:	89 0c c5 08 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03f8],ecx
c001f895:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f899:	89 14 c5 04 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03fc],edx
c001f8a0:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c001f8a5:	83 f8 08             	cmp    eax,0x8
c001f8a8:	75 08                	jne    c001f8b2 <Vm::fpuPush(unsigned long long)+0x56>
c001f8aa:	80 0d 00 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc00,0x40
c001f8b1:	c3                   	ret    
c001f8b2:	40                   	inc    eax
c001f8b3:	a3 44 fc 02 c0       	mov    ds:0xc002fc44,eax
c001f8b8:	c3                   	ret    

c001f8b9 <Vm::fpuPop()>:
c001f8b9:	8a 0d 01 fc 02 c0    	mov    cl,BYTE PTR ds:0xc002fc01
c001f8bf:	53                   	push   ebx
c001f8c0:	c0 e9 03             	shr    cl,0x3
c001f8c3:	8a 1d 01 fc 02 c0    	mov    bl,BYTE PTR ds:0xc002fc01
c001f8c9:	83 e1 07             	and    ecx,0x7
c001f8cc:	83 e3 c7             	and    ebx,0xffffffc7
c001f8cf:	8b 04 cd 04 fc 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd03fc]
c001f8d6:	8b 14 cd 08 fc 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd03f8]
c001f8dd:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f8e4:	83 e1 38             	and    ecx,0x38
c001f8e7:	09 d9                	or     ecx,ebx
c001f8e9:	88 0d 01 fc 02 c0    	mov    BYTE PTR ds:0xc002fc01,cl
c001f8ef:	8b 0d 44 fc 02 c0    	mov    ecx,DWORD PTR ds:0xc002fc44
c001f8f5:	85 c9                	test   ecx,ecx
c001f8f7:	74 09                	je     c001f902 <Vm::fpuPop()+0x49>
c001f8f9:	49                   	dec    ecx
c001f8fa:	89 0d 44 fc 02 c0    	mov    DWORD PTR ds:0xc002fc44,ecx
c001f900:	eb 07                	jmp    c001f909 <Vm::fpuPop()+0x50>
c001f902:	80 0d 00 fc 02 c0 40 	or     BYTE PTR ds:0xc002fc00,0x40
c001f909:	5b                   	pop    ebx
c001f90a:	c3                   	ret    

c001f90b <Vm::x87Handler(regs*)>:
c001f90b:	55                   	push   ebp
c001f90c:	57                   	push   edi
c001f90d:	56                   	push   esi
c001f90e:	53                   	push   ebx
c001f90f:	83 ec 1c             	sub    esp,0x1c
c001f912:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f916:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f91b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f91e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f926:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f92a:	50                   	push   eax
c001f92b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f92f:	50                   	push   eax
c001f930:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f934:	50                   	push   eax
c001f935:	53                   	push   ebx
c001f936:	e8 87 a1 ff ff       	call   c0019ac2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f93b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	89 c6                	mov    esi,eax
c001f943:	80 fa d9             	cmp    dl,0xd9
c001f946:	0f 85 52 01 00 00    	jne    c001fa9e <Vm::x87Handler(regs*)+0x193>
c001f94c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f950:	8d 50 20             	lea    edx,[eax+0x20]
c001f953:	80 fa 0e             	cmp    dl,0xe
c001f956:	0f 87 86 00 00 00    	ja     c001f9e2 <Vm::x87Handler(regs*)+0xd7>
c001f95c:	0f b6 d2             	movzx  edx,dl
c001f95f:	ff 24 95 94 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd356c]
c001f966:	e8 e7 fc ff ff       	call   c001f652 <Vm::fpuGet0()>
c001f96b:	eb 05                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f96d:	e8 e5 fc ff ff       	call   c001f657 <Vm::fpuGet1()>
c001f972:	57                   	push   edi
c001f973:	57                   	push   edi
c001f974:	52                   	push   edx
c001f975:	50                   	push   eax
c001f976:	e8 e1 fe ff ff       	call   c001f85c <Vm::fpuPush(unsigned long long)>
c001f97b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	b0 01                	mov    al,0x1
c001f984:	e9 e3 09 00 00       	jmp    c002036c <Vm::x87Handler(regs*)+0xa61>
c001f989:	83 ec 0c             	sub    esp,0xc
c001f98c:	6a 00                	push   0x0
c001f98e:	e8 3b fe ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001f993:	59                   	pop    ecx
c001f994:	5e                   	pop    esi
c001f995:	52                   	push   edx
c001f996:	50                   	push   eax
c001f997:	e8 c2 fd ff ff       	call   c001f75e <Vm::fpuChs(unsigned long long)>
c001f99c:	eb 13                	jmp    c001f9b1 <Vm::x87Handler(regs*)+0xa6>
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	6a 00                	push   0x0
c001f9a3:	e8 26 fe ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001f9a8:	5f                   	pop    edi
c001f9a9:	5d                   	pop    ebp
c001f9aa:	52                   	push   edx
c001f9ab:	50                   	push   eax
c001f9ac:	e8 a4 fd ff ff       	call   c001f755 <Vm::fpuAbs(unsigned long long)>
c001f9b1:	83 c4 0c             	add    esp,0xc
c001f9b4:	52                   	push   edx
c001f9b5:	50                   	push   eax
c001f9b6:	6a 00                	push   0x0
c001f9b8:	e8 54 fe ff ff       	call   c001f811 <Vm::fpuSetReg(int, unsigned long long)>
c001f9bd:	eb bc                	jmp    c001f97b <Vm::x87Handler(regs*)+0x70>
c001f9bf:	e8 d3 fc ff ff       	call   c001f697 <Vm::fpuGetLog210()>
c001f9c4:	eb ac                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f9c6:	e8 9c fc ff ff       	call   c001f667 <Vm::fpuGetLog2E()>
c001f9cb:	eb a5                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f9cd:	e8 8d fc ff ff       	call   c001f65f <Vm::fpuGetPi()>
c001f9d2:	eb 9e                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f9d4:	e8 d6 fc ff ff       	call   c001f6af <Vm::fpuGetLog102()>
c001f9d9:	eb 97                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f9db:	e8 9f fc ff ff       	call   c001f67f <Vm::fpuGetLogE2()>
c001f9e0:	eb 90                	jmp    c001f972 <Vm::x87Handler(regs*)+0x67>
c001f9e2:	8d 50 40             	lea    edx,[eax+0x40]
c001f9e5:	80 fa 07             	cmp    dl,0x7
c001f9e8:	77 15                	ja     c001f9ff <Vm::x87Handler(regs*)+0xf4>
c001f9ea:	83 ec 0c             	sub    esp,0xc
c001f9ed:	2d c0 00 00 00       	sub    eax,0xc0
c001f9f2:	50                   	push   eax
c001f9f3:	e8 d6 fd ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001f9f8:	59                   	pop    ecx
c001f9f9:	5e                   	pop    esi
c001f9fa:	e9 75 ff ff ff       	jmp    c001f974 <Vm::x87Handler(regs*)+0x69>
c001f9ff:	8d 50 38             	lea    edx,[eax+0x38]
c001fa02:	80 fa 07             	cmp    dl,0x7
c001fa05:	77 3c                	ja     c001fa43 <Vm::x87Handler(regs*)+0x138>
c001fa07:	83 ec 0c             	sub    esp,0xc
c001fa0a:	2d c8 00 00 00       	sub    eax,0xc8
c001fa0f:	50                   	push   eax
c001fa10:	e8 b9 fd ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fa15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa1c:	89 c6                	mov    esi,eax
c001fa1e:	89 d7                	mov    edi,edx
c001fa20:	e8 a9 fd ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fa25:	83 c4 0c             	add    esp,0xc
c001fa28:	52                   	push   edx
c001fa29:	50                   	push   eax
c001fa2a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa2e:	2d c8 00 00 00       	sub    eax,0xc8
c001fa33:	50                   	push   eax
c001fa34:	e8 d8 fd ff ff       	call   c001f811 <Vm::fpuSetReg(int, unsigned long long)>
c001fa39:	83 c4 0c             	add    esp,0xc
c001fa3c:	57                   	push   edi
c001fa3d:	56                   	push   esi
c001fa3e:	e9 73 ff ff ff       	jmp    c001f9b6 <Vm::x87Handler(regs*)+0xab>
c001fa43:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa47:	84 d2                	test   dl,dl
c001fa49:	75 0f                	jne    c001fa5a <Vm::x87Handler(regs*)+0x14f>
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	ff 36                	push   DWORD PTR [esi]
c001fa50:	e8 c8 fa ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c001fa55:	e9 bf 00 00 00       	jmp    c001fb19 <Vm::x87Handler(regs*)+0x20e>
c001fa5a:	80 fa 03             	cmp    dl,0x3
c001fa5d:	75 13                	jne    c001fa72 <Vm::x87Handler(regs*)+0x167>
c001fa5f:	e8 55 fe ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001fa64:	55                   	push   ebp
c001fa65:	55                   	push   ebp
c001fa66:	52                   	push   edx
c001fa67:	50                   	push   eax
c001fa68:	e8 4c fa ff ff       	call   c001f4b9 <Vm::fpuInternalTo32(unsigned long long)>
c001fa6d:	e9 88 00 00 00       	jmp    c001fafa <Vm::x87Handler(regs*)+0x1ef>
c001fa72:	80 fa 05             	cmp    dl,0x5
c001fa75:	75 0e                	jne    c001fa85 <Vm::x87Handler(regs*)+0x17a>
c001fa77:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa7a:	66 a3 02 fc 02 c0    	mov    ds:0xc002fc02,ax
c001fa80:	e9 df 00 00 00       	jmp    c001fb64 <Vm::x87Handler(regs*)+0x259>
c001fa85:	31 c0                	xor    eax,eax
c001fa87:	80 fa 07             	cmp    dl,0x7
c001fa8a:	0f 85 dc 08 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c001fa90:	66 a1 02 fc 02 c0    	mov    ax,ds:0xc002fc02
c001fa96:	66 89 06             	mov    WORD PTR [esi],ax
c001fa99:	e9 c6 00 00 00       	jmp    c001fb64 <Vm::x87Handler(regs*)+0x259>
c001fa9e:	80 fa d8             	cmp    dl,0xd8
c001faa1:	0f 84 c9 00 00 00    	je     c001fb70 <Vm::x87Handler(regs*)+0x265>
c001faa7:	80 fa dc             	cmp    dl,0xdc
c001faaa:	0f 84 0d 02 00 00    	je     c001fcbd <Vm::x87Handler(regs*)+0x3b2>
c001fab0:	80 fa de             	cmp    dl,0xde
c001fab3:	0f 84 cd 02 00 00    	je     c001fd86 <Vm::x87Handler(regs*)+0x47b>
c001fab9:	80 fa dd             	cmp    dl,0xdd
c001fabc:	0f 84 5f 04 00 00    	je     c001ff21 <Vm::x87Handler(regs*)+0x616>
c001fac2:	80 fa da             	cmp    dl,0xda
c001fac5:	0f 84 24 05 00 00    	je     c001ffef <Vm::x87Handler(regs*)+0x6e4>
c001facb:	80 fa df             	cmp    dl,0xdf
c001face:	0f 84 68 05 00 00    	je     c002003c <Vm::x87Handler(regs*)+0x731>
c001fad4:	31 c0                	xor    eax,eax
c001fad6:	80 fa db             	cmp    dl,0xdb
c001fad9:	0f 85 8d 08 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c001fadf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fae3:	80 fa 03             	cmp    dl,0x3
c001fae6:	0f 85 70 06 00 00    	jne    c002015c <Vm::x87Handler(regs*)+0x851>
c001faec:	e8 c8 fd ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001faf1:	55                   	push   ebp
c001faf2:	55                   	push   ebp
c001faf3:	52                   	push   edx
c001faf4:	50                   	push   eax
c001faf5:	e8 71 fa ff ff       	call   c001f56b <Vm::fpuFloatToLong(unsigned long long)>
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	89 06                	mov    DWORD PTR [esi],eax
c001faff:	eb 63                	jmp    c001fb64 <Vm::x87Handler(regs*)+0x259>
c001fb01:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb05:	84 d2                	test   dl,dl
c001fb07:	0f 85 e6 05 00 00    	jne    c00200f3 <Vm::x87Handler(regs*)+0x7e8>
c001fb0d:	57                   	push   edi
c001fb0e:	57                   	push   edi
c001fb0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb12:	ff 36                	push   DWORD PTR [esi]
c001fb14:	e8 49 fa ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c001fb19:	5e                   	pop    esi
c001fb1a:	5f                   	pop    edi
c001fb1b:	52                   	push   edx
c001fb1c:	50                   	push   eax
c001fb1d:	e8 3a fd ff ff       	call   c001f85c <Vm::fpuPush(unsigned long long)>
c001fb22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb26:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb29:	e9 51 fe ff ff       	jmp    c001f97f <Vm::x87Handler(regs*)+0x74>
c001fb2e:	80 fa 03             	cmp    dl,0x3
c001fb31:	0f 85 d7 06 00 00    	jne    c002020e <Vm::x87Handler(regs*)+0x903>
c001fb37:	57                   	push   edi
c001fb38:	57                   	push   edi
c001fb39:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb3c:	ff 36                	push   DWORD PTR [esi]
c001fb3e:	e8 1f fa ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c001fb43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4a:	89 c6                	mov    esi,eax
c001fb4c:	89 d7                	mov    edi,edx
c001fb4e:	e8 7b fc ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fb53:	57                   	push   edi
c001fb54:	56                   	push   esi
c001fb55:	52                   	push   edx
c001fb56:	50                   	push   eax
c001fb57:	e8 95 fb ff ff       	call   c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb5c:	83 c4 20             	add    esp,0x20
c001fb5f:	e8 55 fd ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001fb64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb68:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb6b:	e9 12 fe ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x77>
c001fb70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb74:	8d 50 40             	lea    edx,[eax+0x40]
c001fb77:	80 fa 07             	cmp    dl,0x7
c001fb7a:	77 29                	ja     c001fba5 <Vm::x87Handler(regs*)+0x29a>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	2d c0 00 00 00       	sub    eax,0xc0
c001fb84:	50                   	push   eax
c001fb85:	e8 44 fc ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fb8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb91:	89 c6                	mov    esi,eax
c001fb93:	89 d7                	mov    edi,edx
c001fb95:	e8 34 fc ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fb9a:	57                   	push   edi
c001fb9b:	56                   	push   esi
c001fb9c:	52                   	push   edx
c001fb9d:	50                   	push   eax
c001fb9e:	e8 a1 fb ff ff       	call   c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fba3:	eb 2f                	jmp    c001fbd4 <Vm::x87Handler(regs*)+0x2c9>
c001fba5:	8d 50 38             	lea    edx,[eax+0x38]
c001fba8:	80 fa 07             	cmp    dl,0x7
c001fbab:	77 2f                	ja     c001fbdc <Vm::x87Handler(regs*)+0x2d1>
c001fbad:	83 ec 0c             	sub    esp,0xc
c001fbb0:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb5:	50                   	push   eax
c001fbb6:	e8 13 fc ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fbbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc2:	89 c6                	mov    esi,eax
c001fbc4:	89 d7                	mov    edi,edx
c001fbc6:	e8 03 fc ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fbcb:	57                   	push   edi
c001fbcc:	56                   	push   esi
c001fbcd:	52                   	push   edx
c001fbce:	50                   	push   eax
c001fbcf:	e8 a9 fb ff ff       	call   c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbd4:	83 c4 1c             	add    esp,0x1c
c001fbd7:	e9 d8 fd ff ff       	jmp    c001f9b4 <Vm::x87Handler(regs*)+0xa9>
c001fbdc:	8d 50 30             	lea    edx,[eax+0x30]
c001fbdf:	80 fa 07             	cmp    dl,0x7
c001fbe2:	77 0d                	ja     c001fbf1 <Vm::x87Handler(regs*)+0x2e6>
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	2d d0 00 00 00       	sub    eax,0xd0
c001fbec:	e9 99 03 00 00       	jmp    c001ff8a <Vm::x87Handler(regs*)+0x67f>
c001fbf1:	8d 50 28             	lea    edx,[eax+0x28]
c001fbf4:	80 fa 07             	cmp    dl,0x7
c001fbf7:	77 0d                	ja     c001fc06 <Vm::x87Handler(regs*)+0x2fb>
c001fbf9:	83 ec 0c             	sub    esp,0xc
c001fbfc:	2d d8 00 00 00       	sub    eax,0xd8
c001fc01:	e9 c0 03 00 00       	jmp    c001ffc6 <Vm::x87Handler(regs*)+0x6bb>
c001fc06:	8d 50 20             	lea    edx,[eax+0x20]
c001fc09:	80 fa 07             	cmp    dl,0x7
c001fc0c:	77 1b                	ja     c001fc29 <Vm::x87Handler(regs*)+0x31e>
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	2d e0 00 00 00       	sub    eax,0xe0
c001fc16:	50                   	push   eax
c001fc17:	e8 b2 fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fc1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc23:	89 c6                	mov    esi,eax
c001fc25:	89 d7                	mov    edi,edx
c001fc27:	eb 22                	jmp    c001fc4b <Vm::x87Handler(regs*)+0x340>
c001fc29:	8d 50 18             	lea    edx,[eax+0x18]
c001fc2c:	80 fa 07             	cmp    dl,0x7
c001fc2f:	77 2d                	ja     c001fc5e <Vm::x87Handler(regs*)+0x353>
c001fc31:	83 ec 0c             	sub    esp,0xc
c001fc34:	6a 00                	push   0x0
c001fc36:	e8 93 fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fc3b:	89 c6                	mov    esi,eax
c001fc3d:	89 d7                	mov    edi,edx
c001fc3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc43:	2d e8 00 00 00       	sub    eax,0xe8
c001fc48:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc4b:	e8 7e fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fc50:	57                   	push   edi
c001fc51:	56                   	push   esi
c001fc52:	52                   	push   edx
c001fc53:	50                   	push   eax
c001fc54:	e8 15 fb ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc59:	e9 76 ff ff ff       	jmp    c001fbd4 <Vm::x87Handler(regs*)+0x2c9>
c001fc5e:	8d 50 10             	lea    edx,[eax+0x10]
c001fc61:	80 fa 07             	cmp    dl,0x7
c001fc64:	77 1b                	ja     c001fc81 <Vm::x87Handler(regs*)+0x376>
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	2d f0 00 00 00       	sub    eax,0xf0
c001fc6e:	50                   	push   eax
c001fc6f:	e8 5a fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fc74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7b:	89 c6                	mov    esi,eax
c001fc7d:	89 d7                	mov    edi,edx
c001fc7f:	eb 22                	jmp    c001fca3 <Vm::x87Handler(regs*)+0x398>
c001fc81:	3c f7                	cmp    al,0xf7
c001fc83:	0f 86 d1 03 00 00    	jbe    c002005a <Vm::x87Handler(regs*)+0x74f>
c001fc89:	83 ec 0c             	sub    esp,0xc
c001fc8c:	6a 00                	push   0x0
c001fc8e:	e8 3b fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fc93:	89 c6                	mov    esi,eax
c001fc95:	89 d7                	mov    edi,edx
c001fc97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9b:	2d f8 00 00 00       	sub    eax,0xf8
c001fca0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fca3:	e8 26 fb ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fca8:	57                   	push   edi
c001fca9:	56                   	push   esi
c001fcaa:	52                   	push   edx
c001fcab:	50                   	push   eax
c001fcac:	e8 eb fa ff ff       	call   c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcb1:	83 c4 1c             	add    esp,0x1c
c001fcb4:	52                   	push   edx
c001fcb5:	50                   	push   eax
c001fcb6:	6a 00                	push   0x0
c001fcb8:	e9 51 02 00 00       	jmp    c001ff0e <Vm::x87Handler(regs*)+0x603>
c001fcbd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc1:	8d 50 40             	lea    edx,[eax+0x40]
c001fcc4:	80 fa 07             	cmp    dl,0x7
c001fcc7:	77 37                	ja     c001fd00 <Vm::x87Handler(regs*)+0x3f5>
c001fcc9:	83 ec 0c             	sub    esp,0xc
c001fccc:	2d c0 00 00 00       	sub    eax,0xc0
c001fcd1:	50                   	push   eax
c001fcd2:	e8 f7 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fcd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcde:	89 c6                	mov    esi,eax
c001fce0:	89 d7                	mov    edi,edx
c001fce2:	e8 e7 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fce7:	57                   	push   edi
c001fce8:	56                   	push   esi
c001fce9:	52                   	push   edx
c001fcea:	50                   	push   eax
c001fceb:	e8 54 fa ff ff       	call   c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcf0:	83 c4 1c             	add    esp,0x1c
c001fcf3:	52                   	push   edx
c001fcf4:	50                   	push   eax
c001fcf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf9:	2d c0 00 00 00       	sub    eax,0xc0
c001fcfe:	eb 3d                	jmp    c001fd3d <Vm::x87Handler(regs*)+0x432>
c001fd00:	8d 50 38             	lea    edx,[eax+0x38]
c001fd03:	80 fa 07             	cmp    dl,0x7
c001fd06:	77 3b                	ja     c001fd43 <Vm::x87Handler(regs*)+0x438>
c001fd08:	83 ec 0c             	sub    esp,0xc
c001fd0b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd10:	50                   	push   eax
c001fd11:	e8 b8 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fd16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd1d:	89 c6                	mov    esi,eax
c001fd1f:	89 d7                	mov    edi,edx
c001fd21:	e8 a8 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fd26:	57                   	push   edi
c001fd27:	56                   	push   esi
c001fd28:	52                   	push   edx
c001fd29:	50                   	push   eax
c001fd2a:	e8 4e fa ff ff       	call   c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd2f:	83 c4 1c             	add    esp,0x1c
c001fd32:	52                   	push   edx
c001fd33:	50                   	push   eax
c001fd34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd38:	2d c8 00 00 00       	sub    eax,0xc8
c001fd3d:	50                   	push   eax
c001fd3e:	e9 75 fc ff ff       	jmp    c001f9b8 <Vm::x87Handler(regs*)+0xad>
c001fd43:	83 c0 18             	add    eax,0x18
c001fd46:	3c 07                	cmp    al,0x7
c001fd48:	0f 87 3b 04 00 00    	ja     c0020189 <Vm::x87Handler(regs*)+0x87e>
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	6a 00                	push   0x0
c001fd53:	e8 76 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fd58:	89 c6                	mov    esi,eax
c001fd5a:	89 d7                	mov    edi,edx
c001fd5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd60:	2d e8 00 00 00       	sub    eax,0xe8
c001fd65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd68:	e8 61 fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fd6d:	57                   	push   edi
c001fd6e:	56                   	push   esi
c001fd6f:	52                   	push   edx
c001fd70:	50                   	push   eax
c001fd71:	e8 f8 f9 ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd76:	83 c4 1c             	add    esp,0x1c
c001fd79:	52                   	push   edx
c001fd7a:	50                   	push   eax
c001fd7b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7f:	2d e8 00 00 00       	sub    eax,0xe8
c001fd84:	eb b7                	jmp    c001fd3d <Vm::x87Handler(regs*)+0x432>
c001fd86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd8a:	8d 50 40             	lea    edx,[eax+0x40]
c001fd8d:	80 fa 07             	cmp    dl,0x7
c001fd90:	77 3a                	ja     c001fdcc <Vm::x87Handler(regs*)+0x4c1>
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	2d c0 00 00 00       	sub    eax,0xc0
c001fd9a:	50                   	push   eax
c001fd9b:	e8 2e fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fda0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda7:	89 c6                	mov    esi,eax
c001fda9:	89 d7                	mov    edi,edx
c001fdab:	e8 1e fa ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fdb0:	57                   	push   edi
c001fdb1:	56                   	push   esi
c001fdb2:	52                   	push   edx
c001fdb3:	50                   	push   eax
c001fdb4:	e8 8b f9 ff ff       	call   c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdb9:	83 c4 1c             	add    esp,0x1c
c001fdbc:	52                   	push   edx
c001fdbd:	50                   	push   eax
c001fdbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc2:	2d c0 00 00 00       	sub    eax,0xc0
c001fdc7:	e9 9e 01 00 00       	jmp    c001ff6a <Vm::x87Handler(regs*)+0x65f>
c001fdcc:	8d 50 20             	lea    edx,[eax+0x20]
c001fdcf:	80 fa 07             	cmp    dl,0x7
c001fdd2:	77 3a                	ja     c001fe0e <Vm::x87Handler(regs*)+0x503>
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	2d e0 00 00 00       	sub    eax,0xe0
c001fddc:	50                   	push   eax
c001fddd:	e8 ec f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fde2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde9:	89 c6                	mov    esi,eax
c001fdeb:	89 d7                	mov    edi,edx
c001fded:	e8 dc f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fdf2:	57                   	push   edi
c001fdf3:	56                   	push   esi
c001fdf4:	52                   	push   edx
c001fdf5:	50                   	push   eax
c001fdf6:	e8 73 f9 ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdfb:	83 c4 1c             	add    esp,0x1c
c001fdfe:	52                   	push   edx
c001fdff:	50                   	push   eax
c001fe00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe04:	2d e0 00 00 00       	sub    eax,0xe0
c001fe09:	e9 5c 01 00 00       	jmp    c001ff6a <Vm::x87Handler(regs*)+0x65f>
c001fe0e:	8d 50 18             	lea    edx,[eax+0x18]
c001fe11:	80 fa 07             	cmp    dl,0x7
c001fe14:	77 3b                	ja     c001fe51 <Vm::x87Handler(regs*)+0x546>
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	6a 00                	push   0x0
c001fe1b:	e8 ae f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fe20:	89 c6                	mov    esi,eax
c001fe22:	89 d7                	mov    edi,edx
c001fe24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe28:	2d e8 00 00 00       	sub    eax,0xe8
c001fe2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe30:	e8 99 f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fe35:	57                   	push   edi
c001fe36:	56                   	push   esi
c001fe37:	52                   	push   edx
c001fe38:	50                   	push   eax
c001fe39:	e8 30 f9 ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe3e:	83 c4 1c             	add    esp,0x1c
c001fe41:	52                   	push   edx
c001fe42:	50                   	push   eax
c001fe43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe47:	2d e8 00 00 00       	sub    eax,0xe8
c001fe4c:	e9 19 01 00 00       	jmp    c001ff6a <Vm::x87Handler(regs*)+0x65f>
c001fe51:	8d 50 38             	lea    edx,[eax+0x38]
c001fe54:	80 fa 07             	cmp    dl,0x7
c001fe57:	77 37                	ja     c001fe90 <Vm::x87Handler(regs*)+0x585>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe61:	50                   	push   eax
c001fe62:	e8 67 f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fe67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe6e:	89 c6                	mov    esi,eax
c001fe70:	89 d7                	mov    edi,edx
c001fe72:	e8 57 f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fe77:	57                   	push   edi
c001fe78:	56                   	push   esi
c001fe79:	52                   	push   edx
c001fe7a:	50                   	push   eax
c001fe7b:	e8 fd f8 ff ff       	call   c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe80:	83 c4 1c             	add    esp,0x1c
c001fe83:	52                   	push   edx
c001fe84:	50                   	push   eax
c001fe85:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe89:	2d c8 00 00 00       	sub    eax,0xc8
c001fe8e:	eb 7d                	jmp    c001ff0d <Vm::x87Handler(regs*)+0x602>
c001fe90:	3c f7                	cmp    al,0xf7
c001fe92:	76 38                	jbe    c001fecc <Vm::x87Handler(regs*)+0x5c1>
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	6a 00                	push   0x0
c001fe99:	e8 30 f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fe9e:	89 c6                	mov    esi,eax
c001fea0:	89 d7                	mov    edi,edx
c001fea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea6:	2d f8 00 00 00       	sub    eax,0xf8
c001feab:	89 04 24             	mov    DWORD PTR [esp],eax
c001feae:	e8 1b f9 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001feb3:	57                   	push   edi
c001feb4:	56                   	push   esi
c001feb5:	52                   	push   edx
c001feb6:	50                   	push   eax
c001feb7:	e8 e0 f8 ff ff       	call   c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001febc:	83 c4 1c             	add    esp,0x1c
c001febf:	52                   	push   edx
c001fec0:	50                   	push   eax
c001fec1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec5:	2d f8 00 00 00       	sub    eax,0xf8
c001feca:	eb 41                	jmp    c001ff0d <Vm::x87Handler(regs*)+0x602>
c001fecc:	8d 50 10             	lea    edx,[eax+0x10]
c001fecf:	80 fa 07             	cmp    dl,0x7
c001fed2:	0f 87 5a 01 00 00    	ja     c0020032 <Vm::x87Handler(regs*)+0x727>
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	2d f0 00 00 00       	sub    eax,0xf0
c001fee0:	50                   	push   eax
c001fee1:	e8 e8 f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fee6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feed:	89 c6                	mov    esi,eax
c001feef:	89 d7                	mov    edi,edx
c001fef1:	e8 d8 f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001fef6:	57                   	push   edi
c001fef7:	56                   	push   esi
c001fef8:	52                   	push   edx
c001fef9:	50                   	push   eax
c001fefa:	e8 9d f8 ff ff       	call   c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feff:	83 c4 1c             	add    esp,0x1c
c001ff02:	52                   	push   edx
c001ff03:	50                   	push   eax
c001ff04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff08:	2d f0 00 00 00       	sub    eax,0xf0
c001ff0d:	50                   	push   eax
c001ff0e:	e8 fe f8 ff ff       	call   c001f811 <Vm::fpuSetReg(int, unsigned long long)>
c001ff13:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff17:	e8 9d f9 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001ff1c:	e9 5e fa ff ff       	jmp    c001f97f <Vm::x87Handler(regs*)+0x74>
c001ff21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff25:	8d 50 30             	lea    edx,[eax+0x30]
c001ff28:	80 fa 07             	cmp    dl,0x7
c001ff2b:	77 1d                	ja     c001ff4a <Vm::x87Handler(regs*)+0x63f>
c001ff2d:	83 ec 0c             	sub    esp,0xc
c001ff30:	6a 00                	push   0x0
c001ff32:	e8 97 f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ff37:	83 c4 0c             	add    esp,0xc
c001ff3a:	52                   	push   edx
c001ff3b:	50                   	push   eax
c001ff3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff40:	2d d0 00 00 00       	sub    eax,0xd0
c001ff45:	e9 f3 fd ff ff       	jmp    c001fd3d <Vm::x87Handler(regs*)+0x432>
c001ff4a:	8d 50 28             	lea    edx,[eax+0x28]
c001ff4d:	80 fa 07             	cmp    dl,0x7
c001ff50:	77 28                	ja     c001ff7a <Vm::x87Handler(regs*)+0x66f>
c001ff52:	83 ec 0c             	sub    esp,0xc
c001ff55:	6a 00                	push   0x0
c001ff57:	e8 72 f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ff5c:	83 c4 0c             	add    esp,0xc
c001ff5f:	52                   	push   edx
c001ff60:	50                   	push   eax
c001ff61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff65:	2d d8 00 00 00       	sub    eax,0xd8
c001ff6a:	50                   	push   eax
c001ff6b:	e8 a1 f8 ff ff       	call   c001f811 <Vm::fpuSetReg(int, unsigned long long)>
c001ff70:	e8 44 f9 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001ff75:	e9 01 fa ff ff       	jmp    c001f97b <Vm::x87Handler(regs*)+0x70>
c001ff7a:	8d 50 20             	lea    edx,[eax+0x20]
c001ff7d:	80 fa 07             	cmp    dl,0x7
c001ff80:	77 30                	ja     c001ffb2 <Vm::x87Handler(regs*)+0x6a7>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	2d e0 00 00 00       	sub    eax,0xe0
c001ff8a:	50                   	push   eax
c001ff8b:	e8 3e f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ff90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff97:	89 c6                	mov    esi,eax
c001ff99:	89 d7                	mov    edi,edx
c001ff9b:	e8 2e f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ffa0:	57                   	push   edi
c001ffa1:	56                   	push   esi
c001ffa2:	52                   	push   edx
c001ffa3:	50                   	push   eax
c001ffa4:	e8 48 f7 ff ff       	call   c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffa9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffad:	e9 54 02 00 00       	jmp    c0020206 <Vm::x87Handler(regs*)+0x8fb>
c001ffb2:	8d 50 18             	lea    edx,[eax+0x18]
c001ffb5:	80 fa 07             	cmp    dl,0x7
c001ffb8:	0f 87 43 fb ff ff    	ja     c001fb01 <Vm::x87Handler(regs*)+0x1f6>
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	2d e8 00 00 00       	sub    eax,0xe8
c001ffc6:	50                   	push   eax
c001ffc7:	e8 02 f8 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ffcc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd3:	89 c6                	mov    esi,eax
c001ffd5:	89 d7                	mov    edi,edx
c001ffd7:	e8 f2 f7 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c001ffdc:	57                   	push   edi
c001ffdd:	56                   	push   esi
c001ffde:	52                   	push   edx
c001ffdf:	50                   	push   eax
c001ffe0:	e8 0c f7 ff ff       	call   c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffe5:	83 c4 20             	add    esp,0x20
c001ffe8:	e8 cc f8 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c001ffed:	eb 62                	jmp    c0020051 <Vm::x87Handler(regs*)+0x746>
c001ffef:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fff3:	0f 85 0f 01 00 00    	jne    c0020108 <Vm::x87Handler(regs*)+0x7fd>
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	6a 01                	push   0x1
c001fffe:	e8 cb f7 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c0020003:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000a:	89 c6                	mov    esi,eax
c002000c:	89 d7                	mov    edi,edx
c002000e:	e8 bb f7 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c0020013:	57                   	push   edi
c0020014:	56                   	push   esi
c0020015:	52                   	push   edx
c0020016:	50                   	push   eax
c0020017:	e8 d5 f6 ff ff       	call   c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002001c:	83 c4 20             	add    esp,0x20
c002001f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020023:	e8 91 f8 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c0020028:	e8 8c f8 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c002002d:	e9 50 f9 ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x77>
c0020032:	3c d9                	cmp    al,0xd9
c0020034:	0f 85 b5 02 00 00    	jne    c00202ef <Vm::x87Handler(regs*)+0x9e4>
c002003a:	eb bd                	jmp    c001fff9 <Vm::x87Handler(regs*)+0x6ee>
c002003c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020040:	0f 85 ea 02 00 00    	jne    c0020330 <Vm::x87Handler(regs*)+0xa25>
c0020046:	0f b7 05 00 fc 02 c0 	movzx  eax,WORD PTR ds:0xc002fc00
c002004d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020051:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020055:	e9 28 f9 ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x77>
c002005a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002005e:	84 d2                	test   dl,dl
c0020060:	75 0f                	jne    c0020071 <Vm::x87Handler(regs*)+0x766>
c0020062:	83 ec 0c             	sub    esp,0xc
c0020065:	ff 36                	push   DWORD PTR [esi]
c0020067:	e8 b1 f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c002006c:	e9 2c 01 00 00       	jmp    c002019d <Vm::x87Handler(regs*)+0x892>
c0020071:	80 fa 01             	cmp    dl,0x1
c0020074:	75 0f                	jne    c0020085 <Vm::x87Handler(regs*)+0x77a>
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	ff 36                	push   DWORD PTR [esi]
c002007b:	e8 9d f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c0020080:	e9 81 02 00 00       	jmp    c0020306 <Vm::x87Handler(regs*)+0x9fb>
c0020085:	80 fa 04             	cmp    dl,0x4
c0020088:	75 0f                	jne    c0020099 <Vm::x87Handler(regs*)+0x78e>
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	ff 36                	push   DWORD PTR [esi]
c002008f:	e8 89 f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c0020094:	e9 86 01 00 00       	jmp    c002021f <Vm::x87Handler(regs*)+0x914>
c0020099:	80 fa 05             	cmp    dl,0x5
c002009c:	75 1b                	jne    c00200b9 <Vm::x87Handler(regs*)+0x7ae>
c002009e:	83 ec 0c             	sub    esp,0xc
c00200a1:	6a 00                	push   0x0
c00200a3:	e8 26 f7 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00200a8:	89 c7                	mov    edi,eax
c00200aa:	89 d5                	mov    ebp,edx
c00200ac:	58                   	pop    eax
c00200ad:	ff 36                	push   DWORD PTR [esi]
c00200af:	e8 69 f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c00200b4:	e9 a3 01 00 00       	jmp    c002025c <Vm::x87Handler(regs*)+0x951>
c00200b9:	80 fa 06             	cmp    dl,0x6
c00200bc:	75 0f                	jne    c00200cd <Vm::x87Handler(regs*)+0x7c2>
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	ff 36                	push   DWORD PTR [esi]
c00200c3:	e8 55 f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c00200c8:	e9 ae 01 00 00       	jmp    c002027b <Vm::x87Handler(regs*)+0x970>
c00200cd:	31 c0                	xor    eax,eax
c00200cf:	80 fa 07             	cmp    dl,0x7
c00200d2:	0f 85 94 02 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c00200d8:	83 ec 0c             	sub    esp,0xc
c00200db:	6a 00                	push   0x0
c00200dd:	e8 ec f6 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00200e2:	89 c7                	mov    edi,eax
c00200e4:	89 d5                	mov    ebp,edx
c00200e6:	58                   	pop    eax
c00200e7:	ff 36                	push   DWORD PTR [esi]
c00200e9:	e8 2f f4 ff ff       	call   c001f51d <Vm::fpu32ToInternal(unsigned int)>
c00200ee:	e9 cb 01 00 00       	jmp    c00202be <Vm::x87Handler(regs*)+0x9b3>
c00200f3:	80 fa 03             	cmp    dl,0x3
c00200f6:	0f 85 d3 01 00 00    	jne    c00202cf <Vm::x87Handler(regs*)+0x9c4>
c00200fc:	e8 b8 f7 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c0020101:	51                   	push   ecx
c0020102:	51                   	push   ecx
c0020103:	e9 de 01 00 00       	jmp    c00202e6 <Vm::x87Handler(regs*)+0x9db>
c0020108:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002010c:	80 fa 01             	cmp    dl,0x1
c002010f:	75 09                	jne    c002011a <Vm::x87Handler(regs*)+0x80f>
c0020111:	57                   	push   edi
c0020112:	57                   	push   edi
c0020113:	8b 06                	mov    eax,DWORD PTR [esi]
c0020115:	e9 e3 01 00 00       	jmp    c00202fd <Vm::x87Handler(regs*)+0x9f2>
c002011a:	80 fa 04             	cmp    dl,0x4
c002011d:	75 12                	jne    c0020131 <Vm::x87Handler(regs*)+0x826>
c002011f:	31 d2                	xor    edx,edx
c0020121:	51                   	push   ecx
c0020122:	51                   	push   ecx
c0020123:	8b 06                	mov    eax,DWORD PTR [esi]
c0020125:	52                   	push   edx
c0020126:	50                   	push   eax
c0020127:	e8 d0 f4 ff ff       	call   c001f5fc <Vm::fpuLongToFloat(long long)>
c002012c:	e9 ee 00 00 00       	jmp    c002021f <Vm::x87Handler(regs*)+0x914>
c0020131:	31 c0                	xor    eax,eax
c0020133:	80 fa 07             	cmp    dl,0x7
c0020136:	0f 85 30 02 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c002013c:	83 ec 0c             	sub    esp,0xc
c002013f:	6a 00                	push   0x0
c0020141:	e8 88 f6 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c0020146:	89 c7                	mov    edi,eax
c0020148:	89 d5                	mov    ebp,edx
c002014a:	58                   	pop    eax
c002014b:	8b 06                	mov    eax,DWORD PTR [esi]
c002014d:	5a                   	pop    edx
c002014e:	31 d2                	xor    edx,edx
c0020150:	52                   	push   edx
c0020151:	50                   	push   eax
c0020152:	e8 a5 f4 ff ff       	call   c001f5fc <Vm::fpuLongToFloat(long long)>
c0020157:	e9 62 01 00 00       	jmp    c00202be <Vm::x87Handler(regs*)+0x9b3>
c002015c:	84 d2                	test   dl,dl
c002015e:	75 0d                	jne    c002016d <Vm::x87Handler(regs*)+0x862>
c0020160:	31 d2                	xor    edx,edx
c0020162:	55                   	push   ebp
c0020163:	55                   	push   ebp
c0020164:	8b 06                	mov    eax,DWORD PTR [esi]
c0020166:	52                   	push   edx
c0020167:	50                   	push   eax
c0020168:	e9 d3 01 00 00       	jmp    c0020340 <Vm::x87Handler(regs*)+0xa35>
c002016d:	31 c0                	xor    eax,eax
c002016f:	80 fa 02             	cmp    dl,0x2
c0020172:	0f 85 f4 01 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	6a 00                	push   0x0
c002017d:	e8 4c f6 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c0020182:	59                   	pop    ecx
c0020183:	5f                   	pop    edi
c0020184:	e9 6a f9 ff ff       	jmp    c001faf3 <Vm::x87Handler(regs*)+0x1e8>
c0020189:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002018d:	84 d2                	test   dl,dl
c002018f:	75 2a                	jne    c00201bb <Vm::x87Handler(regs*)+0x8b0>
c0020191:	50                   	push   eax
c0020192:	50                   	push   eax
c0020193:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020196:	ff 36                	push   DWORD PTR [esi]
c0020198:	e8 c5 f3 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c002019d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a4:	89 c6                	mov    esi,eax
c00201a6:	89 d7                	mov    edi,edx
c00201a8:	e8 21 f6 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00201ad:	57                   	push   edi
c00201ae:	56                   	push   esi
c00201af:	52                   	push   edx
c00201b0:	50                   	push   eax
c00201b1:	e8 8e f5 ff ff       	call   c001f744 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201b6:	e9 64 01 00 00       	jmp    c002031f <Vm::x87Handler(regs*)+0xa14>
c00201bb:	80 fa 01             	cmp    dl,0x1
c00201be:	75 11                	jne    c00201d1 <Vm::x87Handler(regs*)+0x8c6>
c00201c0:	50                   	push   eax
c00201c1:	50                   	push   eax
c00201c2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201c5:	ff 36                	push   DWORD PTR [esi]
c00201c7:	e8 96 f3 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c00201cc:	e9 35 01 00 00       	jmp    c0020306 <Vm::x87Handler(regs*)+0x9fb>
c00201d1:	80 fa 02             	cmp    dl,0x2
c00201d4:	0f 85 54 f9 ff ff    	jne    c001fb2e <Vm::x87Handler(regs*)+0x223>
c00201da:	55                   	push   ebp
c00201db:	55                   	push   ebp
c00201dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201df:	ff 36                	push   DWORD PTR [esi]
c00201e1:	e8 7c f3 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c00201e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ed:	89 c6                	mov    esi,eax
c00201ef:	89 d7                	mov    edi,edx
c00201f1:	e8 d8 f5 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00201f6:	57                   	push   edi
c00201f7:	56                   	push   esi
c00201f8:	52                   	push   edx
c00201f9:	50                   	push   eax
c00201fa:	e8 f2 f4 ff ff       	call   c001f6f1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020203:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020206:	83 c4 20             	add    esp,0x20
c0020209:	e9 74 f7 ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x77>
c002020e:	80 fa 04             	cmp    dl,0x4
c0020211:	75 2a                	jne    c002023d <Vm::x87Handler(regs*)+0x932>
c0020213:	51                   	push   ecx
c0020214:	51                   	push   ecx
c0020215:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020218:	ff 36                	push   DWORD PTR [esi]
c002021a:	e8 43 f3 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c002021f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020226:	89 c6                	mov    esi,eax
c0020228:	89 d7                	mov    edi,edx
c002022a:	e8 9f f5 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c002022f:	57                   	push   edi
c0020230:	56                   	push   esi
c0020231:	52                   	push   edx
c0020232:	50                   	push   eax
c0020233:	e8 36 f5 ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020238:	e9 e2 00 00 00       	jmp    c002031f <Vm::x87Handler(regs*)+0xa14>
c002023d:	80 fa 05             	cmp    dl,0x5
c0020240:	75 28                	jne    c002026a <Vm::x87Handler(regs*)+0x95f>
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	6a 00                	push   0x0
c0020247:	e8 82 f5 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c002024c:	89 c7                	mov    edi,eax
c002024e:	89 d5                	mov    ebp,edx
c0020250:	58                   	pop    eax
c0020251:	5a                   	pop    edx
c0020252:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020255:	ff 36                	push   DWORD PTR [esi]
c0020257:	e8 06 f3 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c002025c:	83 c4 10             	add    esp,0x10
c002025f:	55                   	push   ebp
c0020260:	57                   	push   edi
c0020261:	52                   	push   edx
c0020262:	50                   	push   eax
c0020263:	e8 06 f5 ff ff       	call   c001f76e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020268:	eb 60                	jmp    c00202ca <Vm::x87Handler(regs*)+0x9bf>
c002026a:	80 fa 06             	cmp    dl,0x6
c002026d:	75 2a                	jne    c0020299 <Vm::x87Handler(regs*)+0x98e>
c002026f:	51                   	push   ecx
c0020270:	51                   	push   ecx
c0020271:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020274:	ff 36                	push   DWORD PTR [esi]
c0020276:	e8 e7 f2 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c002027b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020282:	89 c6                	mov    esi,eax
c0020284:	89 d7                	mov    edi,edx
c0020286:	e8 43 f5 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c002028b:	57                   	push   edi
c002028c:	56                   	push   esi
c002028d:	52                   	push   edx
c002028e:	50                   	push   eax
c002028f:	e8 08 f5 ff ff       	call   c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020294:	e9 86 00 00 00       	jmp    c002031f <Vm::x87Handler(regs*)+0xa14>
c0020299:	31 c0                	xor    eax,eax
c002029b:	80 fa 07             	cmp    dl,0x7
c002029e:	0f 85 c8 00 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c00202a4:	83 ec 0c             	sub    esp,0xc
c00202a7:	6a 00                	push   0x0
c00202a9:	e8 20 f5 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00202ae:	89 c7                	mov    edi,eax
c00202b0:	89 d5                	mov    ebp,edx
c00202b2:	58                   	pop    eax
c00202b3:	5a                   	pop    edx
c00202b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b7:	ff 36                	push   DWORD PTR [esi]
c00202b9:	e8 a4 f2 ff ff       	call   c001f562 <Vm::fpu64ToInternal(unsigned long long)>
c00202be:	83 c4 10             	add    esp,0x10
c00202c1:	55                   	push   ebp
c00202c2:	57                   	push   edi
c00202c3:	52                   	push   edx
c00202c4:	50                   	push   eax
c00202c5:	e8 d2 f4 ff ff       	call   c001f79c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202ca:	83 c4 0c             	add    esp,0xc
c00202cd:	eb 53                	jmp    c0020322 <Vm::x87Handler(regs*)+0xa17>
c00202cf:	31 c0                	xor    eax,eax
c00202d1:	80 fa 02             	cmp    dl,0x2
c00202d4:	0f 85 92 00 00 00    	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	6a 00                	push   0x0
c00202df:	e8 ea f4 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c00202e4:	59                   	pop    ecx
c00202e5:	5f                   	pop    edi
c00202e6:	52                   	push   edx
c00202e7:	50                   	push   eax
c00202e8:	e8 27 f2 ff ff       	call   c001f514 <Vm::fpuInternalTo64(unsigned long long)>
c00202ed:	eb 70                	jmp    c002035f <Vm::x87Handler(regs*)+0xa54>
c00202ef:	31 c0                	xor    eax,eax
c00202f1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202f6:	75 74                	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c00202f8:	50                   	push   eax
c00202f9:	50                   	push   eax
c00202fa:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202fd:	31 d2                	xor    edx,edx
c00202ff:	52                   	push   edx
c0020300:	50                   	push   eax
c0020301:	e8 f6 f2 ff ff       	call   c001f5fc <Vm::fpuLongToFloat(long long)>
c0020306:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002030d:	89 c6                	mov    esi,eax
c002030f:	89 d7                	mov    edi,edx
c0020311:	e8 b8 f4 ff ff       	call   c001f7ce <Vm::fpuGetReg(int)>
c0020316:	57                   	push   edi
c0020317:	56                   	push   esi
c0020318:	52                   	push   edx
c0020319:	50                   	push   eax
c002031a:	e8 5e f4 ff ff       	call   c001f77d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002031f:	83 c4 1c             	add    esp,0x1c
c0020322:	52                   	push   edx
c0020323:	50                   	push   eax
c0020324:	6a 00                	push   0x0
c0020326:	e8 e6 f4 ff ff       	call   c001f811 <Vm::fpuSetReg(int, unsigned long long)>
c002032b:	e9 f2 f7 ff ff       	jmp    c001fb22 <Vm::x87Handler(regs*)+0x217>
c0020330:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020334:	80 fa 05             	cmp    dl,0x5
c0020337:	75 11                	jne    c002034a <Vm::x87Handler(regs*)+0xa3f>
c0020339:	55                   	push   ebp
c002033a:	55                   	push   ebp
c002033b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002033e:	ff 36                	push   DWORD PTR [esi]
c0020340:	e8 81 f2 ff ff       	call   c001f5c6 <Vm::fpuULongToFloat(unsigned long long)>
c0020345:	e9 cf f7 ff ff       	jmp    c001fb19 <Vm::x87Handler(regs*)+0x20e>
c002034a:	31 c0                	xor    eax,eax
c002034c:	80 fa 07             	cmp    dl,0x7
c002034f:	75 1b                	jne    c002036c <Vm::x87Handler(regs*)+0xa61>
c0020351:	e8 63 f5 ff ff       	call   c001f8b9 <Vm::fpuPop()>
c0020356:	51                   	push   ecx
c0020357:	51                   	push   ecx
c0020358:	52                   	push   edx
c0020359:	50                   	push   eax
c002035a:	e8 0c f2 ff ff       	call   c001f56b <Vm::fpuFloatToLong(unsigned long long)>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	89 06                	mov    DWORD PTR [esi],eax
c0020364:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020367:	e9 f8 f7 ff ff       	jmp    c001fb64 <Vm::x87Handler(regs*)+0x259>
c002036c:	83 c4 1c             	add    esp,0x1c
c002036f:	5b                   	pop    ebx
c0020370:	5e                   	pop    esi
c0020371:	5f                   	pop    edi
c0020372:	5d                   	pop    ebp
c0020373:	c3                   	ret    

c0020374 <__static_initialization_and_destruction_0(int, int)>:
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002037c:	75 1a                	jne    c0020398 <__static_initialization_and_destruction_0(int, int)+0x24>
c002037e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020386:	75 10                	jne    c0020398 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020388:	83 ec 0c             	sub    esp,0xc
c002038b:	68 00 fc 02 c0       	push   0xc002fc00
c0020390:	e8 55 8e 00 00       	call   c00291ea <Vm::_FPUState::_FPUState()>
c0020395:	83 c4 10             	add    esp,0x10
c0020398:	90                   	nop
c0020399:	83 c4 0c             	add    esp,0xc
c002039c:	c3                   	ret    

c002039d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002039d:	83 ec 0c             	sub    esp,0xc
c00203a0:	83 ec 08             	sub    esp,0x8
c00203a3:	68 ff ff 00 00       	push   0xffff
c00203a8:	6a 01                	push   0x1
c00203aa:	e8 c5 ff ff ff       	call   c0020374 <__static_initialization_and_destruction_0(int, int)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    

c00203b6 <FAT::getName()>:
c00203b6:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00203bb:	c3                   	ret    

c00203bc <FAT::tell(void*, unsigned long long*)>:
c00203bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203c1:	75 06                	jne    c00203c9 <FAT::tell(void*, unsigned long long*)+0xd>
c00203c3:	b8 04 00 00 00       	mov    eax,0x4
c00203c8:	c3                   	ret    
c00203c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203ce:	75 06                	jne    c00203d6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00203d0:	b8 04 00 00 00       	mov    eax,0x4
c00203d5:	c3                   	ret    
c00203d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203da:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00203dd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00203e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203e4:	89 01                	mov    DWORD PTR [ecx],eax
c00203e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203e9:	b8 00 00 00 00       	mov    eax,0x0
c00203ee:	c3                   	ret    
c00203ef:	90                   	nop

c00203f0 <FAT::stat(void*, unsigned long long*)>:
c00203f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203f5:	75 06                	jne    c00203fd <FAT::stat(void*, unsigned long long*)+0xd>
c00203f7:	b8 04 00 00 00       	mov    eax,0x4
c00203fc:	c3                   	ret    
c00203fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020402:	75 06                	jne    c002040a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020404:	b8 04 00 00 00       	mov    eax,0x4
c0020409:	c3                   	ret    
c002040a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002040e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020411:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020414:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020418:	89 01                	mov    DWORD PTR [ecx],eax
c002041a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002041d:	b8 00 00 00 00       	mov    eax,0x0
c0020422:	c3                   	ret    
c0020423:	90                   	nop

c0020424 <FAT::~FAT()>:
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	ba 1c cb 02 c0       	mov    edx,0xc002cb1c
c002042c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020430:	89 10                	mov    DWORD PTR [eax],edx
c0020432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020436:	83 ec 0c             	sub    esp,0xc
c0020439:	50                   	push   eax
c002043a:	e8 fb 28 ff ff       	call   c0012d3a <Filesystem::~Filesystem()>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	90                   	nop
c0020443:	83 c4 0c             	add    esp,0xc
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <FAT::~FAT()>:
c0020448:	83 ec 0c             	sub    esp,0xc
c002044b:	83 ec 0c             	sub    esp,0xc
c002044e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020452:	e8 cd ff ff ff       	call   c0020424 <FAT::~FAT()>
c0020457:	83 c4 10             	add    esp,0x10
c002045a:	83 ec 08             	sub    esp,0x8
c002045d:	6a 08                	push   0x8
c002045f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020463:	e8 cb 24 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0020468:	83 c4 10             	add    esp,0x10
c002046b:	83 c4 0c             	add    esp,0xc
c002046e:	c3                   	ret    
c002046f:	90                   	nop

c0020470 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020470:	83 ec 1c             	sub    esp,0x1c
c0020473:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002047a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002047f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020483:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c002048a:	83 f8 ff             	cmp    eax,0xffffffff
c002048d:	75 34                	jne    c00204c3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002048f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020493:	88 c2                	mov    dl,al
c0020495:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c002049a:	01 d0                	add    eax,edx
c002049c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204a0:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c00204a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204aa:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c00204b1:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00204b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204ba:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c00204c1:	eb 17                	jmp    c00204da <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204c7:	88 c2                	mov    dl,al
c00204c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204cd:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00204d4:	01 d0                	add    eax,edx
c00204d6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204da:	83 ec 04             	sub    esp,0x4
c00204dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204e5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00204e9:	50                   	push   eax
c00204ea:	e8 0f 68 fe ff       	call   c0006cfe <f_getlabel>
c00204ef:	83 c4 10             	add    esp,0x10
c00204f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204fb:	75 07                	jne    c0020504 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204fd:	b8 00 00 00 00       	mov    eax,0x0
c0020502:	eb 05                	jmp    c0020509 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020504:	b8 01 00 00 00       	mov    eax,0x1
c0020509:	83 c4 1c             	add    esp,0x1c
c002050c:	c3                   	ret    
c002050d:	90                   	nop

c002050e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002050e:	57                   	push   edi
c002050f:	83 ec 58             	sub    esp,0x58
c0020512:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002051a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002051e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020523:	b8 00 00 00 00       	mov    eax,0x0
c0020528:	fc                   	cld    
c0020529:	89 d7                	mov    edi,edx
c002052b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002052d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020531:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0020538:	83 f8 ff             	cmp    eax,0xffffffff
c002053b:	75 34                	jne    c0020571 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002053d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020541:	88 c2                	mov    dl,al
c0020543:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020548:	01 d0                	add    eax,edx
c002054a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002054e:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c0020554:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020558:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c002055f:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020564:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020568:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c002056f:	eb 17                	jmp    c0020588 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020571:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020575:	88 c2                	mov    dl,al
c0020577:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002057b:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0020582:	01 d0                	add    eax,edx
c0020584:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020588:	83 ec 08             	sub    esp,0x8
c002058b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002058f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020593:	50                   	push   eax
c0020594:	e8 b3 03 fe ff       	call   c000094c <strcat>
c0020599:	83 c4 10             	add    esp,0x10
c002059c:	83 ec 0c             	sub    esp,0xc
c002059f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205a3:	50                   	push   eax
c00205a4:	e8 43 69 fe ff       	call   c0006eec <f_setlabel>
c00205a9:	83 c4 10             	add    esp,0x10
c00205ac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205b0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205b5:	75 07                	jne    c00205be <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205b7:	b8 00 00 00 00       	mov    eax,0x0
c00205bc:	eb 05                	jmp    c00205c3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205be:	b8 01 00 00 00       	mov    eax,0x1
c00205c3:	83 c4 58             	add    esp,0x58
c00205c6:	5f                   	pop    edi
c00205c7:	c3                   	ret    

c00205c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205c8:	83 ec 2c             	sub    esp,0x2c
c00205cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205d3:	83 ec 08             	sub    esp,0x8
c00205d6:	68 f4 ca 02 c0       	push   0xc002caf4
c00205db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205df:	e8 b4 02 fe ff       	call   c0000898 <strcmp>
c00205e4:	83 c4 10             	add    esp,0x10
c00205e7:	85 c0                	test   eax,eax
c00205e9:	0f 94 c0             	sete   al
c00205ec:	84 c0                	test   al,al
c00205ee:	74 0d                	je     c00205fd <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205f0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205f8:	e9 a6 00 00 00       	jmp    c00206a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205fd:	83 ec 08             	sub    esp,0x8
c0020600:	68 e6 ca 02 c0       	push   0xc002cae6
c0020605:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020609:	e8 8a 02 fe ff       	call   c0000898 <strcmp>
c002060e:	83 c4 10             	add    esp,0x10
c0020611:	85 c0                	test   eax,eax
c0020613:	0f 94 c0             	sete   al
c0020616:	84 c0                	test   al,al
c0020618:	74 0a                	je     c0020624 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002061a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020622:	eb 7f                	jmp    c00206a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020624:	83 ec 08             	sub    esp,0x8
c0020627:	68 ec ca 02 c0       	push   0xc002caec
c002062c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020630:	e8 63 02 fe ff       	call   c0000898 <strcmp>
c0020635:	83 c4 10             	add    esp,0x10
c0020638:	85 c0                	test   eax,eax
c002063a:	0f 94 c0             	sete   al
c002063d:	84 c0                	test   al,al
c002063f:	74 0a                	je     c002064b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020641:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020649:	eb 58                	jmp    c00206a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002064b:	83 ec 08             	sub    esp,0x8
c002064e:	68 4c 99 02 c0       	push   0xc002994c
c0020653:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020657:	e8 3c 02 fe ff       	call   c0000898 <strcmp>
c002065c:	83 c4 10             	add    esp,0x10
c002065f:	85 c0                	test   eax,eax
c0020661:	0f 94 c0             	sete   al
c0020664:	84 c0                	test   al,al
c0020666:	74 0a                	je     c0020672 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020668:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020670:	eb 31                	jmp    c00206a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020672:	83 ec 08             	sub    esp,0x8
c0020675:	68 f2 ca 02 c0       	push   0xc002caf2
c002067a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002067e:	e8 15 02 fe ff       	call   c0000898 <strcmp>
c0020683:	83 c4 10             	add    esp,0x10
c0020686:	85 c0                	test   eax,eax
c0020688:	0f 94 c0             	sete   al
c002068b:	84 c0                	test   al,al
c002068d:	74 0a                	je     c0020699 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002068f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020697:	eb 0a                	jmp    c00206a3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020699:	b8 08 00 00 00       	mov    eax,0x8
c002069e:	e9 df 00 00 00       	jmp    c0020782 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00206a3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206aa:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206b3:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00206ba:	83 f8 ff             	cmp    eax,0xffffffff
c00206bd:	75 34                	jne    c00206f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206bf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206c3:	88 c2                	mov    dl,al
c00206c5:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00206ca:	01 d0                	add    eax,edx
c00206cc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206d0:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c00206d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206da:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c00206e1:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c00206e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206ea:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c00206f1:	eb 17                	jmp    c002070a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206f3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206f7:	88 c2                	mov    dl,al
c00206f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206fd:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0020704:	01 d0                	add    eax,edx
c0020706:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002070a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002070e:	88 04 24             	mov    BYTE PTR [esp],al
c0020711:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020719:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020721:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020726:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002072e:	83 ec 0c             	sub    esp,0xc
c0020731:	68 00 20 00 00       	push   0x2000
c0020736:	e8 78 f2 fe ff       	call   c000f9b3 <malloc>
c002073b:	83 c4 10             	add    esp,0x10
c002073e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020742:	68 00 20 00 00       	push   0x2000
c0020747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002074f:	50                   	push   eax
c0020750:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020754:	50                   	push   eax
c0020755:	e8 13 6e fe ff       	call   c000756d <f_mkfs>
c002075a:	83 c4 10             	add    esp,0x10
c002075d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020761:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020766:	75 07                	jne    c002076f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020768:	b8 00 00 00 00       	mov    eax,0x0
c002076d:	eb 13                	jmp    c0020782 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002076f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020774:	75 07                	jne    c002077d <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020776:	b8 09 00 00 00       	mov    eax,0x9
c002077b:	eb 05                	jmp    c0020782 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002077d:	b8 01 00 00 00       	mov    eax,0x1
c0020782:	83 c4 2c             	add    esp,0x2c
c0020785:	c3                   	ret    

c0020786 <FAT::tryMount(LogicalDisk*, int)>:
c0020786:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002078c:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020791:	83 f8 14             	cmp    eax,0x14
c0020794:	75 17                	jne    c00207ad <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020796:	83 ec 0c             	sub    esp,0xc
c0020799:	68 f8 ca 02 c0       	push   0xc002caf8
c002079e:	e8 06 9c ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	b0 00                	mov    al,0x0
c00207a8:	e9 d7 01 00 00       	jmp    c0020984 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207ad:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207c0:	3d 00 02 00 00       	cmp    eax,0x200
c00207c5:	74 07                	je     c00207ce <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207c7:	b0 00                	mov    al,0x0
c00207c9:	e9 b6 01 00 00       	jmp    c0020984 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207ce:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00207d6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207dd:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c00207e4:	83 f8 ff             	cmp    eax,0xffffffff
c00207e7:	74 07                	je     c00207f0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00207e9:	b0 01                	mov    al,0x1
c00207eb:	e9 94 01 00 00       	jmp    c0020984 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207f0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00207fa:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020802:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020809:	88 c2                	mov    dl,al
c002080b:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020810:	01 d0                	add    eax,edx
c0020812:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020819:	8b 15 60 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc60
c002081f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020826:	89 14 85 80 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0380],edx
c002082d:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020832:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020839:	89 14 85 00 fd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0300],edx
c0020840:	83 ec 0c             	sub    esp,0xc
c0020843:	68 54 02 00 00       	push   0x254
c0020848:	e8 66 f1 fe ff       	call   c000f9b3 <malloc>
c002084d:	83 c4 10             	add    esp,0x10
c0020850:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020857:	83 ec 04             	sub    esp,0x4
c002085a:	6a 00                	push   0x0
c002085c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020863:	50                   	push   eax
c0020864:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002086b:	e8 85 46 fe ff       	call   c0004ef5 <f_mount>
c0020870:	83 c4 10             	add    esp,0x10
c0020873:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002087a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020882:	74 19                	je     c002089d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002088e:	e8 40 f1 fe ff       	call   c000f9d3 <rfree>
c0020893:	83 c4 10             	add    esp,0x10
c0020896:	b0 00                	mov    al,0x0
c0020898:	e9 e7 00 00 00       	jmp    c0020984 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002089d:	83 ec 04             	sub    esp,0x4
c00208a0:	68 00 01 00 00       	push   0x100
c00208a5:	6a 00                	push   0x0
c00208a7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208ae:	50                   	push   eax
c00208af:	e8 9c fe fd ff       	call   c0000750 <memset>
c00208b4:	83 c4 10             	add    esp,0x10
c00208b7:	83 ec 08             	sub    esp,0x8
c00208ba:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208c1:	50                   	push   eax
c00208c2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208c9:	50                   	push   eax
c00208ca:	e8 7d 00 fe ff       	call   c000094c <strcat>
c00208cf:	83 c4 10             	add    esp,0x10
c00208d2:	83 ec 08             	sub    esp,0x8
c00208d5:	68 06 cb 02 c0       	push   0xc002cb06
c00208da:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208e1:	50                   	push   eax
c00208e2:	e8 65 00 fe ff       	call   c000094c <strcat>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	83 ec 04             	sub    esp,0x4
c00208ed:	6a 01                	push   0x1
c00208ef:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00208f6:	50                   	push   eax
c00208f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00208fb:	50                   	push   eax
c00208fc:	e8 56 46 fe ff       	call   c0004f57 <f_open>
c0020901:	83 c4 10             	add    esp,0x10
c0020904:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002090b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020912:	85 c0                	test   eax,eax
c0020914:	74 0a                	je     c0020920 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020916:	78 2d                	js     c0020945 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020918:	83 e8 04             	sub    eax,0x4
c002091b:	83 f8 01             	cmp    eax,0x1
c002091e:	77 25                	ja     c0020945 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020920:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020928:	83 ec 0c             	sub    esp,0xc
c002092b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002092f:	50                   	push   eax
c0020930:	e8 74 51 fe ff       	call   c0005aa9 <f_close>
c0020935:	83 c4 10             	add    esp,0x10
c0020938:	90                   	nop
c0020939:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020941:	74 3a                	je     c002097d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020943:	eb 2d                	jmp    c0020972 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020945:	83 ec 0c             	sub    esp,0xc
c0020948:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002094f:	e8 7f f0 fe ff       	call   c000f9d3 <rfree>
c0020954:	83 c4 10             	add    esp,0x10
c0020957:	83 ec 04             	sub    esp,0x4
c002095a:	6a 00                	push   0x0
c002095c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020963:	50                   	push   eax
c0020964:	6a 00                	push   0x0
c0020966:	e8 8a 45 fe ff       	call   c0004ef5 <f_mount>
c002096b:	83 c4 10             	add    esp,0x10
c002096e:	b0 00                	mov    al,0x0
c0020970:	eb 12                	jmp    c0020984 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020972:	a1 60 fc 02 c0       	mov    eax,ds:0xc002fc60
c0020977:	40                   	inc    eax
c0020978:	a3 60 fc 02 c0       	mov    ds:0xc002fc60,eax
c002097d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020984:	81 c4 6c 03 00 00    	add    esp,0x36c
c002098a:	c3                   	ret    
c002098b:	90                   	nop

c002098c <FAT::allocateSwapfile(char const*, int)>:
c002098c:	53                   	push   ebx
c002098d:	81 ec 28 04 00 00    	sub    esp,0x428
c0020993:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c002099e:	83 ec 0c             	sub    esp,0xc
c00209a1:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c00209a8:	e8 06 f0 fe ff       	call   c000f9b3 <malloc>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	89 c3                	mov    ebx,eax
c00209b2:	a1 90 fb 02 c0       	mov    eax,ds:0xc002fb90
c00209b7:	83 ec 04             	sub    esp,0x4
c00209ba:	50                   	push   eax
c00209bb:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c00209c2:	53                   	push   ebx
c00209c3:	e8 a2 25 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c00209d2:	83 ec 0c             	sub    esp,0xc
c00209d5:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00209dc:	e8 65 27 ff ff       	call   c0013146 <File::unlink()>
c00209e1:	83 c4 10             	add    esp,0x10
c00209e4:	83 ec 08             	sub    esp,0x8
c00209e7:	6a 12                	push   0x12
c00209e9:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00209f0:	e8 d9 25 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c00209f5:	83 c4 10             	add    esp,0x10
c00209f8:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00209ff:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020a05:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020a0c:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c0020a13:	c1 e0 14             	shl    eax,0x14
c0020a16:	99                   	cdq    
c0020a17:	6a 01                	push   0x1
c0020a19:	52                   	push   edx
c0020a1a:	50                   	push   eax
c0020a1b:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c0020a22:	e8 32 67 fe ff       	call   c0007159 <f_expand>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a33:	83 c0 10             	add    eax,0x10
c0020a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a38:	83 ec 0c             	sub    esp,0xc
c0020a3b:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a3f:	52                   	push   edx
c0020a40:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020a44:	52                   	push   edx
c0020a45:	6a 00                	push   0x0
c0020a47:	68 00 04 00 00       	push   0x400
c0020a4c:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020a53:	ff d0                	call   eax
c0020a55:	83 c4 20             	add    esp,0x20
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a62:	e8 c5 25 ff ff       	call   c001302c <File::close()>
c0020a67:	83 c4 10             	add    esp,0x10
c0020a6a:	83 ec 08             	sub    esp,0x8
c0020a6d:	6a 01                	push   0x1
c0020a6f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020a76:	e8 53 25 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c0020a7b:	83 c4 10             	add    esp,0x10
c0020a7e:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020a85:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a87:	83 c0 0c             	add    eax,0xc
c0020a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8c:	83 ec 0c             	sub    esp,0xc
c0020a8f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a93:	52                   	push   edx
c0020a94:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a98:	52                   	push   edx
c0020a99:	6a 00                	push   0x0
c0020a9b:	6a 04                	push   0x4
c0020a9d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0020aa4:	ff d0                	call   eax
c0020aa6:	83 c4 20             	add    esp,0x20
c0020aa9:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020ab0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ab6:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020abd:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c0020ac4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ac7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020aca:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020ad1:	83 ec 0c             	sub    esp,0xc
c0020ad4:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020adb:	e8 4c 25 ff ff       	call   c001302c <File::close()>
c0020ae0:	83 c4 10             	add    esp,0x10
c0020ae3:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020aea:	ba 00 00 00 00       	mov    edx,0x0
c0020aef:	81 c4 28 04 00 00    	add    esp,0x428
c0020af5:	5b                   	pop    ebx
c0020af6:	c3                   	ret    
c0020af7:	90                   	nop

c0020af8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020af8:	57                   	push   edi
c0020af9:	56                   	push   esi
c0020afa:	53                   	push   ebx
c0020afb:	81 ec 50 02 00 00    	sub    esp,0x250
c0020b01:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020b09:	74 0a                	je     c0020b15 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020b0b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020b13:	75 0a                	jne    c0020b1f <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020b15:	b8 04 00 00 00       	mov    eax,0x4
c0020b1a:	e9 29 01 00 00       	jmp    c0020c48 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020b1f:	83 ec 08             	sub    esp,0x8
c0020b22:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b29:	50                   	push   eax
c0020b2a:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020b31:	e8 7d 55 fe ff       	call   c00060b3 <f_readdir>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020b40:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020b47:	83 ec 0c             	sub    esp,0xc
c0020b4a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020b51:	83 c0 1a             	add    eax,0x1a
c0020b54:	50                   	push   eax
c0020b55:	e8 12 fc fd ff       	call   c000076c <strlen>
c0020b5a:	83 c4 10             	add    esp,0x10
c0020b5d:	ba 00 00 00 00       	mov    edx,0x0
c0020b62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b6a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020b71:	0f b6 c0             	movzx  eax,al
c0020b74:	83 e0 10             	and    eax,0x10
c0020b77:	74 07                	je     c0020b80 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020b79:	b8 02 00 00 00       	mov    eax,0x2
c0020b7e:	eb 05                	jmp    c0020b85 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020b80:	b8 01 00 00 00       	mov    eax,0x1
c0020b85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b89:	83 ec 08             	sub    esp,0x8
c0020b8c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b93:	83 c0 1a             	add    eax,0x1a
c0020b96:	50                   	push   eax
c0020b97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b9b:	83 c0 10             	add    eax,0x10
c0020b9e:	50                   	push   eax
c0020b9f:	e8 68 fc fd ff       	call   c000080c <strcpy>
c0020ba4:	83 c4 10             	add    esp,0x10
c0020ba7:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020bae:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020bb5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020bb9:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020bc0:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020bc7:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020bce:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020bd5:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020bdc:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020be3:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020bea:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020bf1:	89 c6                	mov    esi,eax
c0020bf3:	89 d7                	mov    edi,edx
c0020bf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020bf7:	89 c8                	mov    eax,ecx
c0020bf9:	89 fa                	mov    edx,edi
c0020bfb:	89 f3                	mov    ebx,esi
c0020bfd:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020c04:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020c0b:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020c12:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020c19:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c1f:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020c26:	84 c0                	test   al,al
c0020c28:	75 07                	jne    c0020c31 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020c2a:	b8 07 00 00 00       	mov    eax,0x7
c0020c2f:	eb 17                	jmp    c0020c48 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c31:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020c38:	85 c0                	test   eax,eax
c0020c3a:	75 07                	jne    c0020c43 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020c3c:	b8 00 00 00 00       	mov    eax,0x0
c0020c41:	eb 05                	jmp    c0020c48 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020c43:	b8 01 00 00 00       	mov    eax,0x1
c0020c48:	81 c4 50 02 00 00    	add    esp,0x250
c0020c4e:	5b                   	pop    ebx
c0020c4f:	5e                   	pop    esi
c0020c50:	5f                   	pop    edi
c0020c51:	c3                   	ret    

c0020c52 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c52:	83 ec 1c             	sub    esp,0x1c
c0020c55:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c5a:	74 07                	je     c0020c63 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c5c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c61:	75 07                	jne    c0020c6a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c63:	b8 04 00 00 00       	mov    eax,0x4
c0020c68:	eb 3d                	jmp    c0020ca7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c6e:	50                   	push   eax
c0020c6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c7b:	e8 13 47 fe ff       	call   c0005393 <f_read>
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c8b:	89 c2                	mov    edx,eax
c0020c8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c91:	89 10                	mov    DWORD PTR [eax],edx
c0020c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c97:	85 c0                	test   eax,eax
c0020c99:	75 07                	jne    c0020ca2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c9b:	b8 00 00 00 00       	mov    eax,0x0
c0020ca0:	eb 05                	jmp    c0020ca7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ca2:	b8 01 00 00 00       	mov    eax,0x1
c0020ca7:	83 c4 1c             	add    esp,0x1c
c0020caa:	c3                   	ret    
c0020cab:	90                   	nop

c0020cac <FAT::write(void*, unsigned long, void*, int*)>:
c0020cac:	83 ec 1c             	sub    esp,0x1c
c0020caf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cb4:	74 07                	je     c0020cbd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cb6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cbb:	75 07                	jne    c0020cc4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cbd:	b8 04 00 00 00       	mov    eax,0x4
c0020cc2:	eb 3d                	jmp    c0020d01 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cc8:	50                   	push   eax
c0020cc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ccd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd5:	e8 39 49 fe ff       	call   c0005613 <f_write>
c0020cda:	83 c4 10             	add    esp,0x10
c0020cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ce5:	89 c2                	mov    edx,eax
c0020ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ceb:	89 10                	mov    DWORD PTR [eax],edx
c0020ced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf1:	85 c0                	test   eax,eax
c0020cf3:	75 07                	jne    c0020cfc <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cf5:	b8 00 00 00 00       	mov    eax,0x0
c0020cfa:	eb 05                	jmp    c0020d01 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cfc:	b8 01 00 00 00       	mov    eax,0x1
c0020d01:	83 c4 1c             	add    esp,0x1c
c0020d04:	c3                   	ret    
c0020d05:	90                   	nop

c0020d06 <FAT::close(void*)>:
c0020d06:	83 ec 1c             	sub    esp,0x1c
c0020d09:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d0e:	75 07                	jne    c0020d17 <FAT::close(void*)+0x11>
c0020d10:	b8 04 00 00 00       	mov    eax,0x4
c0020d15:	eb 36                	jmp    c0020d4d <FAT::close(void*)+0x47>
c0020d17:	83 ec 0c             	sub    esp,0xc
c0020d1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d1e:	e8 86 4d fe ff       	call   c0005aa9 <f_close>
c0020d23:	83 c4 10             	add    esp,0x10
c0020d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d2a:	83 ec 0c             	sub    esp,0xc
c0020d2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d31:	e8 8d ec fe ff       	call   c000f9c3 <free>
c0020d36:	83 c4 10             	add    esp,0x10
c0020d39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d3d:	85 c0                	test   eax,eax
c0020d3f:	75 07                	jne    c0020d48 <FAT::close(void*)+0x42>
c0020d41:	b8 00 00 00 00       	mov    eax,0x0
c0020d46:	eb 05                	jmp    c0020d4d <FAT::close(void*)+0x47>
c0020d48:	b8 01 00 00 00       	mov    eax,0x1
c0020d4d:	83 c4 1c             	add    esp,0x1c
c0020d50:	c3                   	ret    
c0020d51:	90                   	nop

c0020d52 <FAT::closeDir(void*)>:
c0020d52:	83 ec 1c             	sub    esp,0x1c
c0020d55:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d5a:	75 07                	jne    c0020d63 <FAT::closeDir(void*)+0x11>
c0020d5c:	b8 04 00 00 00       	mov    eax,0x4
c0020d61:	eb 36                	jmp    c0020d99 <FAT::closeDir(void*)+0x47>
c0020d63:	83 ec 0c             	sub    esp,0xc
c0020d66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d6a:	e8 22 53 fe ff       	call   c0006091 <f_closedir>
c0020d6f:	83 c4 10             	add    esp,0x10
c0020d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d76:	83 ec 0c             	sub    esp,0xc
c0020d79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7d:	e8 41 ec fe ff       	call   c000f9c3 <free>
c0020d82:	83 c4 10             	add    esp,0x10
c0020d85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d89:	85 c0                	test   eax,eax
c0020d8b:	75 07                	jne    c0020d94 <FAT::closeDir(void*)+0x42>
c0020d8d:	b8 00 00 00 00       	mov    eax,0x0
c0020d92:	eb 05                	jmp    c0020d99 <FAT::closeDir(void*)+0x47>
c0020d94:	b8 01 00 00 00       	mov    eax,0x1
c0020d99:	83 c4 1c             	add    esp,0x1c
c0020d9c:	c3                   	ret    
c0020d9d:	90                   	nop

c0020d9e <FAT::seek(void*, unsigned long long)>:
c0020d9e:	83 ec 2c             	sub    esp,0x2c
c0020da1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020da5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020da9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020db1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020db6:	75 07                	jne    c0020dbf <FAT::seek(void*, unsigned long long)+0x21>
c0020db8:	b8 04 00 00 00       	mov    eax,0x4
c0020dbd:	eb 2f                	jmp    c0020dee <FAT::seek(void*, unsigned long long)+0x50>
c0020dbf:	83 ec 04             	sub    esp,0x4
c0020dc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dce:	e8 05 4d fe ff       	call   c0005ad8 <f_lseek>
c0020dd3:	83 c4 10             	add    esp,0x10
c0020dd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dde:	85 c0                	test   eax,eax
c0020de0:	75 07                	jne    c0020de9 <FAT::seek(void*, unsigned long long)+0x4b>
c0020de2:	b8 00 00 00 00       	mov    eax,0x0
c0020de7:	eb 05                	jmp    c0020dee <FAT::seek(void*, unsigned long long)+0x50>
c0020de9:	b8 01 00 00 00       	mov    eax,0x1
c0020dee:	83 c4 2c             	add    esp,0x2c
c0020df1:	c3                   	ret    

c0020df2 <fatWrapperReadDisk>:
c0020df2:	83 ec 1c             	sub    esp,0x1c
c0020df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e11:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e1c:	83 ec 0c             	sub    esp,0xc
c0020e1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e23:	52                   	push   edx
c0020e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e2c:	50                   	push   eax
c0020e2d:	e8 34 55 ff ff       	call   c0016366 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e32:	83 c4 20             	add    esp,0x20
c0020e35:	83 c4 1c             	add    esp,0x1c
c0020e38:	c3                   	ret    

c0020e39 <fatWrapperWriteDisk>:
c0020e39:	83 ec 1c             	sub    esp,0x1c
c0020e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e48:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e53:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e58:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e5f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e63:	83 ec 0c             	sub    esp,0xc
c0020e66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e6a:	52                   	push   edx
c0020e6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e73:	50                   	push   eax
c0020e74:	e8 59 55 ff ff       	call   c00163d2 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e79:	83 c4 20             	add    esp,0x20
c0020e7c:	83 c4 1c             	add    esp,0x1c
c0020e7f:	c3                   	ret    

c0020e80 <fatWrapperIoctl>:
c0020e80:	53                   	push   ebx
c0020e81:	83 ec 28             	sub    esp,0x28
c0020e84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e8c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e90:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e94:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e99:	75 31                	jne    c0020ecc <fatWrapperIoctl+0x4c>
c0020e9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ea3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ea8:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020eaf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eb5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ebb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ebf:	66 89 02             	mov    WORD PTR [edx],ax
c0020ec2:	b8 00 00 00 00       	mov    eax,0x0
c0020ec7:	e9 b2 00 00 00       	jmp    c0020f7e <fatWrapperIoctl+0xfe>
c0020ecc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ed1:	75 6a                	jne    c0020f3d <fatWrapperIoctl+0xbd>
c0020ed3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ed7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020edb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ee0:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020ee7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eed:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ef3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ef9:	89 c8                	mov    eax,ecx
c0020efb:	89 da                	mov    edx,ebx
c0020efd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f01:	c1 e0 0a             	shl    eax,0xa
c0020f04:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f09:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0020f10:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f16:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f1c:	89 cb                	mov    ebx,ecx
c0020f1e:	c1 fb 1f             	sar    ebx,0x1f
c0020f21:	53                   	push   ebx
c0020f22:	51                   	push   ecx
c0020f23:	52                   	push   edx
c0020f24:	50                   	push   eax
c0020f25:	e8 ba 5e 00 00       	call   c0026de4 <__udivdi3>
c0020f2a:	83 c4 10             	add    esp,0x10
c0020f2d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f31:	89 01                	mov    DWORD PTR [ecx],eax
c0020f33:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f36:	b8 00 00 00 00       	mov    eax,0x0
c0020f3b:	eb 41                	jmp    c0020f7e <fatWrapperIoctl+0xfe>
c0020f3d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f42:	75 07                	jne    c0020f4b <fatWrapperIoctl+0xcb>
c0020f44:	b8 00 00 00 00       	mov    eax,0x0
c0020f49:	eb 33                	jmp    c0020f7e <fatWrapperIoctl+0xfe>
c0020f4b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f50:	75 19                	jne    c0020f6b <fatWrapperIoctl+0xeb>
c0020f52:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f5e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f64:	b8 00 00 00 00       	mov    eax,0x0
c0020f69:	eb 13                	jmp    c0020f7e <fatWrapperIoctl+0xfe>
c0020f6b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f70:	75 07                	jne    c0020f79 <fatWrapperIoctl+0xf9>
c0020f72:	b8 00 00 00 00       	mov    eax,0x0
c0020f77:	eb 05                	jmp    c0020f7e <fatWrapperIoctl+0xfe>
c0020f79:	b8 04 00 00 00       	mov    eax,0x4
c0020f7e:	83 c4 28             	add    esp,0x28
c0020f81:	5b                   	pop    ebx
c0020f82:	c3                   	ret    
c0020f83:	90                   	nop

c0020f84 <FAT::FAT()>:
c0020f84:	83 ec 1c             	sub    esp,0x1c
c0020f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f8b:	83 ec 0c             	sub    esp,0xc
c0020f8e:	50                   	push   eax
c0020f8f:	e8 82 1d ff ff       	call   c0012d16 <Filesystem::Filesystem()>
c0020f94:	83 c4 10             	add    esp,0x10
c0020f97:	ba 1c cb 02 c0       	mov    edx,0xc002cb1c
c0020f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fa0:	89 10                	mov    DWORD PTR [eax],edx
c0020fa2:	c7 05 60 fc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fc60,0x0
c0020fac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fb4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fb9:	7f 15                	jg     c0020fd0 <FAT::FAT()+0x4c>
c0020fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fbf:	c7 04 85 80 fc 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0380],0xffffffff
c0020fca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fce:	eb e4                	jmp    c0020fb4 <FAT::FAT()+0x30>
c0020fd0:	90                   	nop
c0020fd1:	83 c4 1c             	add    esp,0x1c
c0020fd4:	c3                   	ret    
c0020fd5:	90                   	nop

c0020fd6 <FAT::fixFilepath(char*)>:
c0020fd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fda:	8a 00                	mov    al,BYTE PTR [eax]
c0020fdc:	3c 40                	cmp    al,0x40
c0020fde:	7e 2c                	jle    c002100c <FAT::fixFilepath(char*)+0x36>
c0020fe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe4:	8a 00                	mov    al,BYTE PTR [eax]
c0020fe6:	83 e8 41             	sub    eax,0x41
c0020fe9:	88 c2                	mov    dl,al
c0020feb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fef:	88 10                	mov    BYTE PTR [eax],dl
c0020ff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff5:	8a 00                	mov    al,BYTE PTR [eax]
c0020ff7:	0f be c0             	movsx  eax,al
c0020ffa:	8b 04 85 80 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0380]
c0021001:	83 c0 30             	add    eax,0x30
c0021004:	88 c2                	mov    dl,al
c0021006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002100a:	88 10                	mov    BYTE PTR [eax],dl
c002100c:	90                   	nop
c002100d:	c3                   	ret    

c002100e <FAT::open(char const*, void**, FileOpenMode)>:
c002100e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021014:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002101c:	74 0a                	je     c0021028 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002101e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021026:	75 0a                	jne    c0021032 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021028:	b8 04 00 00 00       	mov    eax,0x4
c002102d:	e9 fd 00 00 00       	jmp    c002112f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021032:	83 ec 08             	sub    esp,0x8
c0021035:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002103c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021040:	50                   	push   eax
c0021041:	e8 c6 f7 fd ff       	call   c000080c <strcpy>
c0021046:	83 c4 10             	add    esp,0x10
c0021049:	83 ec 08             	sub    esp,0x8
c002104c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021050:	50                   	push   eax
c0021051:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021058:	e8 79 ff ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c002105d:	83 c4 10             	add    esp,0x10
c0021060:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021068:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002106f:	83 e0 01             	and    eax,0x1
c0021072:	74 08                	je     c002107c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021074:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002107c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021083:	83 e0 04             	and    eax,0x4
c0021086:	74 10                	je     c0021098 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021088:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021090:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021098:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002109f:	83 e0 02             	and    eax,0x2
c00210a2:	74 08                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b3:	83 e0 08             	and    eax,0x8
c00210b6:	74 08                	je     c00210c0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210b8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c7:	83 e0 10             	and    eax,0x10
c00210ca:	74 08                	je     c00210d4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210cc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210d4:	83 ec 0c             	sub    esp,0xc
c00210d7:	68 50 02 00 00       	push   0x250
c00210dc:	e8 d2 e8 fe ff       	call   c000f9b3 <malloc>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	89 c2                	mov    edx,eax
c00210e6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210ed:	89 10                	mov    DWORD PTR [eax],edx
c00210ef:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210f7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0021100:	83 ec 04             	sub    esp,0x4
c0021103:	52                   	push   edx
c0021104:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021108:	52                   	push   edx
c0021109:	50                   	push   eax
c002110a:	e8 48 3e fe ff       	call   c0004f57 <f_open>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021119:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021121:	74 07                	je     c002112a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021123:	b8 01 00 00 00       	mov    eax,0x1
c0021128:	eb 05                	jmp    c002112f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002112a:	b8 00 00 00 00       	mov    eax,0x0
c002112f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021135:	c3                   	ret    

c0021136 <FAT::openDir(char const*, void**)>:
c0021136:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002113c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021144:	74 0a                	je     c0021150 <FAT::openDir(char const*, void**)+0x1a>
c0021146:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002114e:	75 07                	jne    c0021157 <FAT::openDir(char const*, void**)+0x21>
c0021150:	b8 04 00 00 00       	mov    eax,0x4
c0021155:	eb 7d                	jmp    c00211d4 <FAT::openDir(char const*, void**)+0x9e>
c0021157:	83 ec 08             	sub    esp,0x8
c002115a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021161:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021165:	50                   	push   eax
c0021166:	e8 a1 f6 fd ff       	call   c000080c <strcpy>
c002116b:	83 c4 10             	add    esp,0x10
c002116e:	83 ec 08             	sub    esp,0x8
c0021171:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021175:	50                   	push   eax
c0021176:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002117d:	e8 54 fe ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	83 ec 0c             	sub    esp,0xc
c0021188:	6a 4c                	push   0x4c
c002118a:	e8 24 e8 fe ff       	call   c000f9b3 <malloc>
c002118f:	83 c4 10             	add    esp,0x10
c0021192:	89 c2                	mov    edx,eax
c0021194:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002119b:	89 10                	mov    DWORD PTR [eax],edx
c002119d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211a6:	83 ec 08             	sub    esp,0x8
c00211a9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211ad:	52                   	push   edx
c00211ae:	50                   	push   eax
c00211af:	e8 db 4d fe ff       	call   c0005f8f <f_opendir>
c00211b4:	83 c4 10             	add    esp,0x10
c00211b7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211be:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211c6:	74 07                	je     c00211cf <FAT::openDir(char const*, void**)+0x99>
c00211c8:	b8 01 00 00 00       	mov    eax,0x1
c00211cd:	eb 05                	jmp    c00211d4 <FAT::openDir(char const*, void**)+0x9e>
c00211cf:	b8 00 00 00 00       	mov    eax,0x0
c00211d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211da:	c3                   	ret    
c00211db:	90                   	nop

c00211dc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211e2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211ea:	75 0a                	jne    c00211f6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211ec:	b8 04 00 00 00       	mov    eax,0x4
c00211f1:	e9 c9 00 00 00       	jmp    c00212bf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211f6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211fe:	75 0a                	jne    c002120a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021200:	b8 04 00 00 00       	mov    eax,0x4
c0021205:	e9 b5 00 00 00       	jmp    c00212bf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002120a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021212:	75 0a                	jne    c002121e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021214:	b8 04 00 00 00       	mov    eax,0x4
c0021219:	e9 a1 00 00 00       	jmp    c00212bf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002121e:	83 ec 08             	sub    esp,0x8
c0021221:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021228:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002122f:	50                   	push   eax
c0021230:	e8 d7 f5 fd ff       	call   c000080c <strcpy>
c0021235:	83 c4 10             	add    esp,0x10
c0021238:	83 ec 08             	sub    esp,0x8
c002123b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021242:	50                   	push   eax
c0021243:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002124a:	e8 87 fd ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c002124f:	83 c4 10             	add    esp,0x10
c0021252:	83 ec 08             	sub    esp,0x8
c0021255:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021259:	50                   	push   eax
c002125a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021261:	50                   	push   eax
c0021262:	e8 e7 4e fe ff       	call   c000614e <f_stat>
c0021267:	83 c4 10             	add    esp,0x10
c002126a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021271:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021278:	85 c0                	test   eax,eax
c002127a:	74 07                	je     c0021283 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002127c:	83 f8 04             	cmp    eax,0x4
c002127f:	74 32                	je     c00212b3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021281:	eb 37                	jmp    c00212ba <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021283:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021287:	0f b6 c0             	movzx  eax,al
c002128a:	83 e0 10             	and    eax,0x10
c002128d:	0f 95 c2             	setne  dl
c0021290:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021297:	88 10                	mov    BYTE PTR [eax],dl
c0021299:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002129c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212a0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212a7:	89 01                	mov    DWORD PTR [ecx],eax
c00212a9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212ac:	b8 00 00 00 00       	mov    eax,0x0
c00212b1:	eb 0c                	jmp    c00212bf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212b3:	b8 02 00 00 00       	mov    eax,0x2
c00212b8:	eb 05                	jmp    c00212bf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ba:	b8 01 00 00 00       	mov    eax,0x1
c00212bf:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212c5:	c3                   	ret    

c00212c6 <FAT::unlink(char const*)>:
c00212c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212cc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212d4:	75 07                	jne    c00212dd <FAT::unlink(char const*)+0x17>
c00212d6:	b8 04 00 00 00       	mov    eax,0x4
c00212db:	eb 5c                	jmp    c0021339 <FAT::unlink(char const*)+0x73>
c00212dd:	83 ec 08             	sub    esp,0x8
c00212e0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212eb:	50                   	push   eax
c00212ec:	e8 1b f5 fd ff       	call   c000080c <strcpy>
c00212f1:	83 c4 10             	add    esp,0x10
c00212f4:	83 ec 08             	sub    esp,0x8
c00212f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212fb:	50                   	push   eax
c00212fc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021303:	e8 ce fc ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	83 ec 0c             	sub    esp,0xc
c002130e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021312:	50                   	push   eax
c0021313:	e8 88 51 fe ff       	call   c00064a0 <f_unlink>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021322:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021329:	85 c0                	test   eax,eax
c002132b:	75 07                	jne    c0021334 <FAT::unlink(char const*)+0x6e>
c002132d:	b8 00 00 00 00       	mov    eax,0x0
c0021332:	eb 05                	jmp    c0021339 <FAT::unlink(char const*)+0x73>
c0021334:	b8 01 00 00 00       	mov    eax,0x1
c0021339:	81 c4 1c 01 00 00    	add    esp,0x11c
c002133f:	c3                   	ret    

c0021340 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021340:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021346:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002134d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021354:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021358:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002135c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021364:	75 0a                	jne    c0021370 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021366:	b8 04 00 00 00       	mov    eax,0x4
c002136b:	e9 1c 01 00 00       	jmp    c002148c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021370:	83 ec 08             	sub    esp,0x8
c0021373:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002137a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002137e:	50                   	push   eax
c002137f:	e8 88 f4 fd ff       	call   c000080c <strcpy>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	83 ec 08             	sub    esp,0x8
c002138a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002138e:	50                   	push   eax
c002138f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021396:	e8 3b fc ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213a6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b3:	83 e0 01             	and    eax,0x1
c00213b6:	74 08                	je     c00213c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213b8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c5:	83 e0 02             	and    eax,0x2
c00213c8:	74 08                	je     c00213d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213ca:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d7:	83 e0 04             	and    eax,0x4
c00213da:	74 08                	je     c00213e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213dc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e9:	83 e0 08             	and    eax,0x8
c00213ec:	74 08                	je     c00213f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213ee:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213fb:	83 e0 01             	and    eax,0x1
c00213fe:	74 08                	je     c0021408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021400:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021408:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002140d:	83 e0 02             	and    eax,0x2
c0021410:	74 08                	je     c002141a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021412:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002141a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141f:	83 e0 04             	and    eax,0x4
c0021422:	74 08                	je     c002142c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021424:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002142c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021431:	83 e0 08             	and    eax,0x8
c0021434:	74 08                	je     c002143e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021436:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002143e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021445:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002144c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021454:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002145c:	83 ec 04             	sub    esp,0x4
c002145f:	52                   	push   edx
c0021460:	50                   	push   eax
c0021461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021465:	50                   	push   eax
c0021466:	e8 d7 56 fe ff       	call   c0006b42 <f_chmod>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021475:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002147c:	85 c0                	test   eax,eax
c002147e:	75 07                	jne    c0021487 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021480:	b8 00 00 00 00       	mov    eax,0x0
c0021485:	eb 05                	jmp    c002148c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021487:	b8 01 00 00 00       	mov    eax,0x1
c002148c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021492:	c3                   	ret    
c0021493:	90                   	nop

c0021494 <FAT::rename(char const*, char const*)>:
c0021494:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002149a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214a2:	74 0a                	je     c00214ae <FAT::rename(char const*, char const*)+0x1a>
c00214a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214ac:	75 0a                	jne    c00214b8 <FAT::rename(char const*, char const*)+0x24>
c00214ae:	b8 04 00 00 00       	mov    eax,0x4
c00214b3:	e9 98 00 00 00       	jmp    c0021550 <FAT::rename(char const*, char const*)+0xbc>
c00214b8:	83 ec 08             	sub    esp,0x8
c00214bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214c9:	50                   	push   eax
c00214ca:	e8 3d f3 fd ff       	call   c000080c <strcpy>
c00214cf:	83 c4 10             	add    esp,0x10
c00214d2:	83 ec 08             	sub    esp,0x8
c00214d5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214dc:	50                   	push   eax
c00214dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214e4:	e8 ed fa ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c00214e9:	83 c4 10             	add    esp,0x10
c00214ec:	83 ec 08             	sub    esp,0x8
c00214ef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214fa:	50                   	push   eax
c00214fb:	e8 0c f3 fd ff       	call   c000080c <strcpy>
c0021500:	83 c4 10             	add    esp,0x10
c0021503:	83 ec 08             	sub    esp,0x8
c0021506:	8d 44 24 14          	lea    eax,[esp+0x14]
c002150a:	50                   	push   eax
c002150b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021512:	e8 bf fa ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c0021517:	83 c4 10             	add    esp,0x10
c002151a:	83 ec 08             	sub    esp,0x8
c002151d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021521:	50                   	push   eax
c0021522:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021529:	50                   	push   eax
c002152a:	e8 20 53 fe ff       	call   c000684f <f_rename>
c002152f:	83 c4 10             	add    esp,0x10
c0021532:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021539:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021540:	85 c0                	test   eax,eax
c0021542:	75 07                	jne    c002154b <FAT::rename(char const*, char const*)+0xb7>
c0021544:	b8 00 00 00 00       	mov    eax,0x0
c0021549:	eb 05                	jmp    c0021550 <FAT::rename(char const*, char const*)+0xbc>
c002154b:	b8 01 00 00 00       	mov    eax,0x1
c0021550:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021556:	c3                   	ret    
c0021557:	90                   	nop

c0021558 <FAT::mkdir(char const*)>:
c0021558:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002155e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021566:	75 07                	jne    c002156f <FAT::mkdir(char const*)+0x17>
c0021568:	b8 04 00 00 00       	mov    eax,0x4
c002156d:	eb 5c                	jmp    c00215cb <FAT::mkdir(char const*)+0x73>
c002156f:	83 ec 08             	sub    esp,0x8
c0021572:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021579:	8d 44 24 18          	lea    eax,[esp+0x18]
c002157d:	50                   	push   eax
c002157e:	e8 89 f2 fd ff       	call   c000080c <strcpy>
c0021583:	83 c4 10             	add    esp,0x10
c0021586:	83 ec 08             	sub    esp,0x8
c0021589:	8d 44 24 14          	lea    eax,[esp+0x14]
c002158d:	50                   	push   eax
c002158e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021595:	e8 3c fa ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c002159a:	83 c4 10             	add    esp,0x10
c002159d:	83 ec 0c             	sub    esp,0xc
c00215a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215a4:	50                   	push   eax
c00215a5:	e8 79 50 fe ff       	call   c0006623 <f_mkdir>
c00215aa:	83 c4 10             	add    esp,0x10
c00215ad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215b4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215bb:	85 c0                	test   eax,eax
c00215bd:	75 07                	jne    c00215c6 <FAT::mkdir(char const*)+0x6e>
c00215bf:	b8 00 00 00 00       	mov    eax,0x0
c00215c4:	eb 05                	jmp    c00215cb <FAT::mkdir(char const*)+0x73>
c00215c6:	b8 01 00 00 00       	mov    eax,0x1
c00215cb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215d1:	c3                   	ret    

c00215d2 <FAT::exists(char const*)>:
c00215d2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215d8:	83 ec 08             	sub    esp,0x8
c00215db:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215e6:	50                   	push   eax
c00215e7:	e8 20 f2 fd ff       	call   c000080c <strcpy>
c00215ec:	83 c4 10             	add    esp,0x10
c00215ef:	83 ec 08             	sub    esp,0x8
c00215f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215f6:	50                   	push   eax
c00215f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215fe:	e8 d3 f9 ff ff       	call   c0020fd6 <FAT::fixFilepath(char*)>
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	83 ec 08             	sub    esp,0x8
c0021609:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021610:	50                   	push   eax
c0021611:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021615:	50                   	push   eax
c0021616:	e8 33 4b fe ff       	call   c000614e <f_stat>
c002161b:	83 c4 10             	add    esp,0x10
c002161e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021625:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002162c:	85 c0                	test   eax,eax
c002162e:	75 04                	jne    c0021634 <FAT::exists(char const*)+0x62>
c0021630:	b0 01                	mov    al,0x1
c0021632:	eb 02                	jmp    c0021636 <FAT::exists(char const*)+0x64>
c0021634:	b0 00                	mov    al,0x0
c0021636:	81 c4 2c 02 00 00    	add    esp,0x22c
c002163c:	c3                   	ret    
c002163d:	90                   	nop

c002163e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002163e:	b8 08 00 00 00       	mov    eax,0x8
c0021643:	c3                   	ret    

c0021644 <ISO9660::seek(void*, unsigned long long)>:
c0021644:	53                   	push   ebx
c0021645:	b8 04 00 00 00       	mov    eax,0x4
c002164a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002164e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021652:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021656:	85 d2                	test   edx,edx
c0021658:	74 17                	je     c0021671 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002165a:	89 c8                	mov    eax,ecx
c002165c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002165f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021662:	b8 01 00 00 00       	mov    eax,0x1
c0021667:	73 08                	jae    c0021671 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021669:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002166c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002166f:	31 c0                	xor    eax,eax
c0021671:	5b                   	pop    ebx
c0021672:	c3                   	ret    
c0021673:	90                   	nop

c0021674 <ISO9660::tell(void*, unsigned long long*)>:
c0021674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002167c:	85 d2                	test   edx,edx
c002167e:	74 12                	je     c0021692 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021680:	85 c0                	test   eax,eax
c0021682:	74 0e                	je     c0021692 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021684:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021687:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002168a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002168d:	89 10                	mov    DWORD PTR [eax],edx
c002168f:	31 c0                	xor    eax,eax
c0021691:	c3                   	ret    
c0021692:	b8 04 00 00 00       	mov    eax,0x4
c0021697:	c3                   	ret    

c0021698 <ISO9660::getName()>:
c0021698:	b8 7c cb 02 c0       	mov    eax,0xc002cb7c
c002169d:	c3                   	ret    

c002169e <ISO9660::stat(void*, unsigned long long*)>:
c002169e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216a6:	85 d2                	test   edx,edx
c00216a8:	74 12                	je     c00216bc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216aa:	85 c0                	test   eax,eax
c00216ac:	74 0e                	je     c00216bc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216ae:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216b1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216b4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216b7:	89 10                	mov    DWORD PTR [eax],edx
c00216b9:	31 c0                	xor    eax,eax
c00216bb:	c3                   	ret    
c00216bc:	b8 04 00 00 00       	mov    eax,0x4
c00216c1:	c3                   	ret    

c00216c2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216c2:	b8 01 00 00 00       	mov    eax,0x1
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::unlink(char const*)>:
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	c3                   	ret    

c00216ce <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216ce:	b8 01 00 00 00       	mov    eax,0x1
c00216d3:	c3                   	ret    

c00216d4 <ISO9660::rename(char const*, char const*)>:
c00216d4:	b8 01 00 00 00       	mov    eax,0x1
c00216d9:	c3                   	ret    

c00216da <ISO9660::mkdir(char const*)>:
c00216da:	b8 01 00 00 00       	mov    eax,0x1
c00216df:	c3                   	ret    

c00216e0 <ISO9660::close(void*)>:
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	b8 04 00 00 00       	mov    eax,0x4
c00216e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216ec:	85 d2                	test   edx,edx
c00216ee:	74 0e                	je     c00216fe <ISO9660::close(void*)+0x1e>
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	52                   	push   edx
c00216f4:	e8 ca e2 fe ff       	call   c000f9c3 <free>
c00216f9:	83 c4 10             	add    esp,0x10
c00216fc:	31 c0                	xor    eax,eax
c00216fe:	83 c4 0c             	add    esp,0xc
c0021701:	c3                   	ret    

c0021702 <ISO9660::closeDir(void*)>:
c0021702:	83 ec 0c             	sub    esp,0xc
c0021705:	b8 04 00 00 00       	mov    eax,0x4
c002170a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002170e:	85 d2                	test   edx,edx
c0021710:	74 0e                	je     c0021720 <ISO9660::closeDir(void*)+0x1e>
c0021712:	83 ec 0c             	sub    esp,0xc
c0021715:	52                   	push   edx
c0021716:	e8 a8 e2 fe ff       	call   c000f9c3 <free>
c002171b:	83 c4 10             	add    esp,0x10
c002171e:	31 c0                	xor    eax,eax
c0021720:	83 c4 0c             	add    esp,0xc
c0021723:	c3                   	ret    

c0021724 <ISO9660::~ISO9660()>:
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	ba a0 cb 02 c0       	mov    edx,0xc002cba0
c002172c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021730:	89 10                	mov    DWORD PTR [eax],edx
c0021732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021736:	83 ec 0c             	sub    esp,0xc
c0021739:	50                   	push   eax
c002173a:	e8 fb 15 ff ff       	call   c0012d3a <Filesystem::~Filesystem()>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	90                   	nop
c0021743:	83 c4 0c             	add    esp,0xc
c0021746:	c3                   	ret    
c0021747:	90                   	nop

c0021748 <ISO9660::~ISO9660()>:
c0021748:	83 ec 0c             	sub    esp,0xc
c002174b:	83 ec 0c             	sub    esp,0xc
c002174e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021752:	e8 cd ff ff ff       	call   c0021724 <ISO9660::~ISO9660()>
c0021757:	83 c4 10             	add    esp,0x10
c002175a:	83 ec 08             	sub    esp,0x8
c002175d:	6a 08                	push   0x8
c002175f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021763:	e8 cb 11 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0021768:	83 c4 10             	add    esp,0x10
c002176b:	83 c4 0c             	add    esp,0xc
c002176e:	c3                   	ret    

c002176f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002176f:	55                   	push   ebp
c0021770:	31 c9                	xor    ecx,ecx
c0021772:	57                   	push   edi
c0021773:	56                   	push   esi
c0021774:	53                   	push   ebx
c0021775:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021779:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002177d:	89 eb                	mov    ebx,ebp
c002177f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021783:	39 ce                	cmp    esi,ecx
c0021785:	7e 17                	jle    c002179e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021787:	31 d2                	xor    edx,edx
c0021789:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002178d:	7d 13                	jge    c00217a2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002178f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021793:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021796:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021799:	75 0d                	jne    c00217a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002179b:	42                   	inc    edx
c002179c:	eb eb                	jmp    c0021789 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002179e:	31 c0                	xor    eax,eax
c00217a0:	eb 0a                	jmp    c00217ac <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217a2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217a6:	eb 04                	jmp    c00217ac <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217a8:	41                   	inc    ecx
c00217a9:	43                   	inc    ebx
c00217aa:	eb d7                	jmp    c0021783 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217ac:	5b                   	pop    ebx
c00217ad:	5e                   	pop    esi
c00217ae:	5f                   	pop    edi
c00217af:	5d                   	pop    ebp
c00217b0:	c3                   	ret    

c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217b1:	57                   	push   edi
c00217b2:	56                   	push   esi
c00217b3:	53                   	push   ebx
c00217b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217bc:	39 0d 60 fd 02 c0    	cmp    DWORD PTR ds:0xc002fd60,ecx
c00217c2:	75 08                	jne    c00217cc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00217c4:	38 05 f4 db 02 c0    	cmp    BYTE PTR ds:0xc002dbf4,al
c00217ca:	74 2b                	je     c00217f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	a2 f4 db 02 c0       	mov    ds:0xc002dbf4,al
c00217d4:	68 80 fd 02 c0       	push   0xc002fd80
c00217d9:	0f be c0             	movsx  eax,al
c00217dc:	6a 01                	push   0x1
c00217de:	89 0d 60 fd 02 c0    	mov    DWORD PTR ds:0xc002fd60,ecx
c00217e4:	31 db                	xor    ebx,ebx
c00217e6:	53                   	push   ebx
c00217e7:	51                   	push   ecx
c00217e8:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c00217ef:	e8 72 4b ff ff       	call   c0016366 <LogicalDisk::read(unsigned long long, int, void*)>
c00217f4:	83 c4 20             	add    esp,0x20
c00217f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00217fb:	be 80 fd 02 c0       	mov    esi,0xc002fd80
c0021800:	b9 00 08 00 00       	mov    ecx,0x800
c0021805:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021807:	5b                   	pop    ebx
c0021808:	5e                   	pop    esi
c0021809:	5f                   	pop    edi
c002180a:	c3                   	ret    
c002180b:	90                   	nop

c002180c <ISO9660::tryMount(LogicalDisk*, int)>:
c002180c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021812:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021819:	83 c0 41             	add    eax,0x41
c002181c:	0f be c0             	movsx  eax,al
c002181f:	50                   	push   eax
c0021820:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021824:	50                   	push   eax
c0021825:	6a 10                	push   0x10
c0021827:	e8 85 ff ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002182c:	83 c4 10             	add    esp,0x10
c002182f:	31 c0                	xor    eax,eax
c0021831:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021836:	75 1d                	jne    c0021855 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021838:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002183d:	75 16                	jne    c0021855 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021844:	75 0f                	jne    c0021855 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021846:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002184b:	75 08                	jne    c0021855 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002184d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021852:	0f 94 c0             	sete   al
c0021855:	81 c4 0c 08 00 00    	add    esp,0x80c
c002185b:	c3                   	ret    

c002185c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002185c:	55                   	push   ebp
c002185d:	57                   	push   edi
c002185e:	56                   	push   esi
c002185f:	53                   	push   ebx
c0021860:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021866:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002186d:	85 ed                	test   ebp,ebp
c002186f:	0f 84 da 01 00 00    	je     c0021a4f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021875:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002187d:	0f 84 cc 01 00 00    	je     c0021a4f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021883:	b8 01 00 00 00       	mov    eax,0x1
c0021888:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002188c:	0f 85 c2 01 00 00    	jne    c0021a54 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021892:	31 d2                	xor    edx,edx
c0021894:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002189b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002189e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00218a1:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00218a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ab:	01 c8                	add    eax,ecx
c00218ad:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00218b0:	11 da                	adc    edx,ebx
c00218b2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00218b6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00218ba:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218c2:	19 d7                	sbb    edi,edx
c00218c4:	72 11                	jb     c00218d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00218c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00218c9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00218cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218d5:	eb 0c                	jmp    c00218e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218d7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00218db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218df:	29 ce                	sub    esi,ecx
c00218e1:	19 df                	sbb    edi,ebx
c00218e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218e6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218e9:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218ed:	c1 e0 0b             	shl    eax,0xb
c00218f0:	01 c8                	add    eax,ecx
c00218f2:	11 da                	adc    edx,ebx
c00218f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218fb:	51                   	push   ecx
c00218fc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021900:	50                   	push   eax
c0021901:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021905:	53                   	push   ebx
c0021906:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002190a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002190e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021912:	50                   	push   eax
c0021913:	e8 99 fe ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021918:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002191b:	b8 00 08 00 00       	mov    eax,0x800
c0021920:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021926:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002192a:	29 d0                	sub    eax,edx
c002192c:	83 c4 10             	add    esp,0x10
c002192f:	89 f9                	mov    ecx,edi
c0021931:	39 c6                	cmp    esi,eax
c0021933:	83 d9 00             	sbb    ecx,0x0
c0021936:	7d 1b                	jge    c0021953 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021938:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002193d:	75 12                	jne    c0021951 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002193f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021946:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002194c:	e9 fa 00 00 00       	jmp    c0021a4b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021951:	89 f0                	mov    eax,esi
c0021953:	01 d3                	add    ebx,edx
c0021955:	31 d2                	xor    edx,edx
c0021957:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002195b:	39 c2                	cmp    edx,eax
c002195d:	7d 14                	jge    c0021973 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002195f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021966:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002196a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002196d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021970:	42                   	inc    edx
c0021971:	eb e8                	jmp    c002195b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021973:	89 c2                	mov    edx,eax
c0021975:	85 c0                	test   eax,eax
c0021977:	79 02                	jns    c002197b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021979:	31 d2                	xor    edx,edx
c002197b:	01 c2                	add    edx,eax
c002197d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021980:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021987:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002198b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002198f:	99                   	cdq    
c0021990:	01 c1                	add    ecx,eax
c0021992:	11 d3                	adc    ebx,edx
c0021994:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021998:	29 c6                	sub    esi,eax
c002199a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002199e:	19 d7                	sbb    edi,edx
c00219a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00219a3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219a7:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219ac:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219af:	b8 00 00 00 00       	mov    eax,0x0
c00219b4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219b8:	7d 43                	jge    c00219fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00219ba:	52                   	push   edx
c00219bb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219bf:	50                   	push   eax
c00219c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219cc:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219d0:	50                   	push   eax
c00219d1:	e8 db fd ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219d6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219de:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219e3:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00219eb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219f3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219f8:	83 c4 10             	add    esp,0x10
c00219fb:	eb aa                	jmp    c00219a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00219fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a01:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a04:	74 2a                	je     c0021a30 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021a06:	50                   	push   eax
c0021a07:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a0b:	50                   	push   eax
c0021a0c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021a10:	56                   	push   esi
c0021a11:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021a15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021a19:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021a1d:	51                   	push   ecx
c0021a1e:	e8 8e fd ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a23:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a37:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021a3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a3f:	89 18                	mov    DWORD PTR [eax],ebx
c0021a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a45:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a48:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a4b:	31 c0                	xor    eax,eax
c0021a4d:	eb 05                	jmp    c0021a54 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a4f:	b8 04 00 00 00       	mov    eax,0x4
c0021a54:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a5a:	5b                   	pop    ebx
c0021a5b:	5e                   	pop    esi
c0021a5c:	5f                   	pop    edi
c0021a5d:	5d                   	pop    ebp
c0021a5e:	c3                   	ret    
c0021a5f:	90                   	nop

c0021a60 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a60:	55                   	push   ebp
c0021a61:	57                   	push   edi
c0021a62:	56                   	push   esi
c0021a63:	53                   	push   ebx
c0021a64:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a6a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021a71:	85 ed                	test   ebp,ebp
c0021a73:	0f 84 51 02 00 00    	je     c0021cca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a79:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a81:	0f 84 43 02 00 00    	je     c0021cca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021a87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a8a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021a8d:	75 0a                	jne    c0021a99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a8f:	b8 07 00 00 00       	mov    eax,0x7
c0021a94:	e9 36 02 00 00       	jmp    c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a99:	50                   	push   eax
c0021a9a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a9e:	50                   	push   eax
c0021a9f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021aa6:	53                   	push   ebx
c0021aa7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021aaa:	c1 e0 0b             	shl    eax,0xb
c0021aad:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021ab0:	c1 e8 0b             	shr    eax,0xb
c0021ab3:	50                   	push   eax
c0021ab4:	e8 f8 fc ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021abc:	83 c4 10             	add    esp,0x10
c0021abf:	89 c1                	mov    ecx,eax
c0021ac1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021ac4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021aca:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021acd:	84 db                	test   bl,bl
c0021acf:	0f 85 8b 00 00 00    	jne    c0021b60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021ad5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021adb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021ade:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021ae4:	29 c6                	sub    esi,eax
c0021ae6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021aea:	89 f3                	mov    ebx,esi
c0021aec:	89 f1                	mov    ecx,esi
c0021aee:	c1 fb 1f             	sar    ebx,0x1f
c0021af1:	01 f0                	add    eax,esi
c0021af3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021af6:	11 da                	adc    edx,ebx
c0021af8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021afb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aff:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b02:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b05:	89 d8                	mov    eax,ebx
c0021b07:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021b0b:	ba 00 00 00 00       	mov    edx,0x0
c0021b10:	19 f8                	sbb    eax,edi
c0021b12:	b8 00 00 00 00       	mov    eax,0x0
c0021b17:	73 08                	jae    c0021b21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021b19:	89 f0                	mov    eax,esi
c0021b1b:	89 fa                	mov    edx,edi
c0021b1d:	29 c8                	sub    eax,ecx
c0021b1f:	19 da                	sbb    edx,ebx
c0021b21:	89 d7                	mov    edi,edx
c0021b23:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b26:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b29:	09 c7                	or     edi,eax
c0021b2b:	0f 84 5e ff ff ff    	je     c0021a8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b31:	57                   	push   edi
c0021b32:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b36:	50                   	push   eax
c0021b37:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b3e:	53                   	push   ebx
c0021b3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b42:	c1 e0 0b             	shl    eax,0xb
c0021b45:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021b49:	c1 e8 0b             	shr    eax,0xb
c0021b4c:	50                   	push   eax
c0021b4d:	e8 5f fc ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b55:	83 c4 10             	add    esp,0x10
c0021b58:	25 ff 07 00 00       	and    eax,0x7ff
c0021b5d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b60:	31 ff                	xor    edi,edi
c0021b62:	56                   	push   esi
c0021b63:	6a 28                	push   0x28
c0021b65:	6a 00                	push   0x0
c0021b67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b6b:	50                   	push   eax
c0021b6c:	e8 df eb fd ff       	call   c0000750 <memset>
c0021b71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b74:	25 ff 07 00 00       	and    eax,0x7ff
c0021b79:	89 c6                	mov    esi,eax
c0021b7b:	83 c6 21             	add    esi,0x21
c0021b7e:	83 d7 00             	adc    edi,0x0
c0021b81:	83 c4 10             	add    esp,0x10
c0021b84:	31 c9                	xor    ecx,ecx
c0021b86:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021b8d:	83 f9 28             	cmp    ecx,0x28
c0021b90:	88 04 24             	mov    BYTE PTR [esp],al
c0021b93:	0f 94 c2             	sete   dl
c0021b96:	88 d0                	mov    al,dl
c0021b98:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b9d:	39 f2                	cmp    edx,esi
c0021b9f:	ba 00 00 00 00       	mov    edx,0x0
c0021ba4:	19 fa                	sbb    edx,edi
c0021ba6:	0f 92 c2             	setb   dl
c0021ba9:	09 c2                	or     edx,eax
c0021bab:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021baf:	0f 94 c0             	sete   al
c0021bb2:	08 d0                	or     al,dl
c0021bb4:	75 16                	jne    c0021bcc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021bb6:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bba:	74 10                	je     c0021bcc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021bbc:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bbf:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bc3:	41                   	inc    ecx
c0021bc4:	83 c6 01             	add    esi,0x1
c0021bc7:	83 d7 00             	adc    edi,0x0
c0021bca:	eb ba                	jmp    c0021b86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021bcc:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bd3:	83 ec 0c             	sub    esp,0xc
c0021bd6:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021bda:	56                   	push   esi
c0021bdb:	e8 8c eb fd ff       	call   c000076c <strlen>
c0021be0:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021be7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021beb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021bf6:	5a                   	pop    edx
c0021bf7:	25 ff 07 00 00       	and    eax,0x7ff
c0021bfc:	59                   	pop    ecx
c0021bfd:	01 f8                	add    eax,edi
c0021bff:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c05:	83 e0 02             	and    eax,0x2
c0021c08:	3c 01                	cmp    al,0x1
c0021c0a:	19 c0                	sbb    eax,eax
c0021c0c:	83 c0 02             	add    eax,0x2
c0021c0f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c13:	56                   	push   esi
c0021c14:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c18:	50                   	push   eax
c0021c19:	e8 ee eb fd ff       	call   c000080c <strcpy>
c0021c1e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c22:	83 c4 10             	add    esp,0x10
c0021c25:	84 c0                	test   al,al
c0021c27:	75 21                	jne    c0021c4a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021c29:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c31:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c39:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c41:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c48:	eb 28                	jmp    c0021c72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c4a:	fe c8                	dec    al
c0021c4c:	75 24                	jne    c0021c72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021c4e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c56:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c5e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c66:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c6d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c72:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021c76:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021c7d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021c84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c86:	0f b6 f3             	movzx  esi,bl
c0021c89:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021c90:	31 db                	xor    ebx,ebx
c0021c92:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c98:	89 df                	mov    edi,ebx
c0021c9a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ca0:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021ca3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ca6:	39 c6                	cmp    esi,eax
c0021ca8:	19 d7                	sbb    edi,edx
c0021caa:	72 10                	jb     c0021cbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021cac:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021cb3:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021cba:	eb 0a                	jmp    c0021cc6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021cbc:	29 f0                	sub    eax,esi
c0021cbe:	19 da                	sbb    edx,ebx
c0021cc0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021cc3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021cc6:	31 c0                	xor    eax,eax
c0021cc8:	eb 05                	jmp    c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cca:	b8 04 00 00 00       	mov    eax,0x4
c0021ccf:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cd5:	5b                   	pop    ebx
c0021cd6:	5e                   	pop    esi
c0021cd7:	5f                   	pop    edi
c0021cd8:	5d                   	pop    ebp
c0021cd9:	c3                   	ret    

c0021cda <readRoot(unsigned int*, unsigned int*, char)>:
c0021cda:	57                   	push   edi
c0021cdb:	56                   	push   esi
c0021cdc:	81 ec 38 08 00 00    	sub    esp,0x838
c0021ce2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021cea:	50                   	push   eax
c0021ceb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cef:	50                   	push   eax
c0021cf0:	6a 10                	push   0x10
c0021cf2:	e8 ba fa ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cf7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021cfe:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021d02:	b9 22 00 00 00       	mov    ecx,0x22
c0021d07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021d09:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d14:	89 10                	mov    DWORD PTR [eax],edx
c0021d16:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d21:	89 10                	mov    DWORD PTR [eax],edx
c0021d23:	81 c4 44 08 00 00    	add    esp,0x844
c0021d29:	b0 01                	mov    al,0x1
c0021d2b:	5e                   	pop    esi
c0021d2c:	5f                   	pop    edi
c0021d2d:	c3                   	ret    

c0021d2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d2e:	55                   	push   ebp
c0021d2f:	57                   	push   edi
c0021d30:	56                   	push   esi
c0021d31:	53                   	push   ebx
c0021d32:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d38:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d3f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d4a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d4e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d56:	75 03                	jne    c0021d5b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d58:	83 c3 02             	add    ebx,0x2
c0021d5b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d5e:	75 03                	jne    c0021d63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d60:	43                   	inc    ebx
c0021d61:	eb f8                	jmp    c0021d5b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d63:	51                   	push   ecx
c0021d64:	68 00 01 00 00       	push   0x100
c0021d69:	6a 00                	push   0x0
c0021d6b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d6f:	50                   	push   eax
c0021d70:	e8 db e9 fd ff       	call   c0000750 <memset>
c0021d75:	83 c4 10             	add    esp,0x10
c0021d78:	31 d2                	xor    edx,edx
c0021d7a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d7d:	84 c0                	test   al,al
c0021d7f:	74 21                	je     c0021da2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d81:	3c 2f                	cmp    al,0x2f
c0021d83:	75 0b                	jne    c0021d90 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d85:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d89:	bd 01 00 00 00       	mov    ebp,0x1
c0021d8e:	eb 14                	jmp    c0021da4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d90:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d93:	80 f9 19             	cmp    cl,0x19
c0021d96:	77 03                	ja     c0021d9b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d98:	83 e8 20             	sub    eax,0x20
c0021d9b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d9f:	42                   	inc    edx
c0021da0:	eb d8                	jmp    c0021d7a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021da2:	31 ed                	xor    ebp,ebp
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dae:	e8 00 dc fe ff       	call   c000f9b3 <malloc>
c0021db3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dba:	89 c6                	mov    esi,eax
c0021dbc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dc2:	c1 ef 0b             	shr    edi,0xb
c0021dc5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dcc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dd0:	83 c4 10             	add    esp,0x10
c0021dd3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ddc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021de3:	74 28                	je     c0021e0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021de5:	52                   	push   edx
c0021de6:	57                   	push   edi
c0021de7:	50                   	push   eax
c0021de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021dec:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021df3:	e8 b9 f9 ff ff       	call   c00217b1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dfc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e03:	05 00 08 00 00       	add    eax,0x800
c0021e08:	83 c4 10             	add    esp,0x10
c0021e0b:	eb cb                	jmp    c0021dd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e0d:	83 ec 0c             	sub    esp,0xc
c0021e10:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e14:	57                   	push   edi
c0021e15:	e8 52 e9 fd ff       	call   c000076c <strlen>
c0021e1a:	50                   	push   eax
c0021e1b:	57                   	push   edi
c0021e1c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e23:	56                   	push   esi
c0021e24:	e8 46 f9 ff ff       	call   c002176f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e29:	83 c4 20             	add    esp,0x20
c0021e2c:	85 c0                	test   eax,eax
c0021e2e:	75 13                	jne    c0021e43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e30:	83 ec 0c             	sub    esp,0xc
c0021e33:	56                   	push   esi
c0021e34:	e8 8a db fe ff       	call   c000f9c3 <free>
c0021e39:	83 c4 10             	add    esp,0x10
c0021e3c:	31 c0                	xor    eax,eax
c0021e3e:	e9 b3 00 00 00       	jmp    c0021ef6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e43:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e47:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e4b:	c1 e7 08             	shl    edi,0x8
c0021e4e:	c1 e2 10             	shl    edx,0x10
c0021e51:	09 d7                	or     edi,edx
c0021e53:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e57:	09 d7                	or     edi,edx
c0021e59:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e5d:	c1 e2 18             	shl    edx,0x18
c0021e60:	09 d7                	or     edi,edx
c0021e62:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e66:	89 d1                	mov    ecx,edx
c0021e68:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e6c:	c1 e1 08             	shl    ecx,0x8
c0021e6f:	c1 e2 10             	shl    edx,0x10
c0021e72:	09 ca                	or     edx,ecx
c0021e74:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e78:	09 ca                	or     edx,ecx
c0021e7a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e7e:	c1 e1 18             	shl    ecx,0x18
c0021e81:	09 ca                	or     edx,ecx
c0021e83:	89 e9                	mov    ecx,ebp
c0021e85:	84 c9                	test   cl,cl
c0021e87:	74 3c                	je     c0021ec5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e89:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e8d:	83 ec 0c             	sub    esp,0xc
c0021e90:	56                   	push   esi
c0021e91:	e8 2d db fe ff       	call   c000f9c3 <free>
c0021e96:	83 c4 0c             	add    esp,0xc
c0021e99:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ea5:	50                   	push   eax
c0021ea6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ead:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eb8:	52                   	push   edx
c0021eb9:	57                   	push   edi
c0021eba:	53                   	push   ebx
c0021ebb:	e8 6e fe ff ff       	call   c0021d2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ec0:	83 c4 20             	add    esp,0x20
c0021ec3:	eb 31                	jmp    c0021ef6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ec5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ec8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ecf:	d0 e8                	shr    al,1
c0021ed1:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ed3:	83 e0 01             	and    eax,0x1
c0021ed6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021edd:	83 ec 0c             	sub    esp,0xc
c0021ee0:	89 13                	mov    DWORD PTR [ebx],edx
c0021ee2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021ee9:	89 03                	mov    DWORD PTR [ebx],eax
c0021eeb:	56                   	push   esi
c0021eec:	e8 d2 da fe ff       	call   c000f9c3 <free>
c0021ef1:	83 c4 10             	add    esp,0x10
c0021ef4:	b0 01                	mov    al,0x1
c0021ef6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021efc:	5b                   	pop    ebx
c0021efd:	5e                   	pop    esi
c0021efe:	5f                   	pop    edi
c0021eff:	5d                   	pop    ebp
c0021f00:	c3                   	ret    

c0021f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f01:	55                   	push   ebp
c0021f02:	57                   	push   edi
c0021f03:	56                   	push   esi
c0021f04:	53                   	push   ebx
c0021f05:	83 ec 20             	sub    esp,0x20
c0021f08:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f0c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f10:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f1c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f24:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f29:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f2f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f35:	57                   	push   edi
c0021f36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f3a:	50                   	push   eax
c0021f3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f3f:	50                   	push   eax
c0021f40:	e8 95 fd ff ff       	call   c0021cda <readRoot(unsigned int*, unsigned int*, char)>
c0021f45:	5a                   	pop    edx
c0021f46:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f4a:	e8 1d e8 fd ff       	call   c000076c <strlen>
c0021f4f:	83 c4 10             	add    esp,0x10
c0021f52:	83 f8 03             	cmp    eax,0x3
c0021f55:	77 17                	ja     c0021f6e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f5b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f61:	89 06                	mov    DWORD PTR [esi],eax
c0021f63:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f6a:	b0 01                	mov    al,0x1
c0021f6c:	eb 19                	jmp    c0021f87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f6e:	50                   	push   eax
c0021f6f:	55                   	push   ebp
c0021f70:	57                   	push   edi
c0021f71:	56                   	push   esi
c0021f72:	53                   	push   ebx
c0021f73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f7f:	e8 aa fd ff ff       	call   c0021d2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f84:	83 c4 20             	add    esp,0x20
c0021f87:	83 c4 1c             	add    esp,0x1c
c0021f8a:	5b                   	pop    ebx
c0021f8b:	5e                   	pop    esi
c0021f8c:	5f                   	pop    edi
c0021f8d:	5d                   	pop    ebp
c0021f8e:	c3                   	ret    
c0021f8f:	90                   	nop

c0021f90 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f90:	57                   	push   edi
c0021f91:	56                   	push   esi
c0021f92:	53                   	push   ebx
c0021f93:	83 ec 10             	sub    esp,0x10
c0021f96:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f9a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f9e:	85 ff                	test   edi,edi
c0021fa0:	0f 84 8b 00 00 00    	je     c0022031 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021fa6:	85 f6                	test   esi,esi
c0021fa8:	0f 84 83 00 00 00    	je     c0022031 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021fae:	b8 03 00 00 00       	mov    eax,0x3
c0021fb3:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fb8:	75 7c                	jne    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	6a 1c                	push   0x1c
c0021fbf:	e8 ef d9 fe ff       	call   c000f9b3 <malloc>
c0021fc4:	89 07                	mov    DWORD PTR [edi],eax
c0021fc6:	89 c3                	mov    ebx,eax
c0021fc8:	58                   	pop    eax
c0021fc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fcd:	50                   	push   eax
c0021fce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fd1:	50                   	push   eax
c0021fd2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fd6:	50                   	push   eax
c0021fd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fdb:	50                   	push   eax
c0021fdc:	56                   	push   esi
c0021fdd:	e8 1f ff ff ff       	call   c0021f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fe2:	83 c4 20             	add    esp,0x20
c0021fe5:	84 c0                	test   al,al
c0021fe7:	74 07                	je     c0021ff0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021fe9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fee:	74 0b                	je     c0021ffb <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021ff0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ff4:	b8 01 00 00 00       	mov    eax,0x1
c0021ff9:	eb 3b                	jmp    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022003:	89 03                	mov    DWORD PTR [ebx],eax
c0022005:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002200c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022010:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022017:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002201e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022021:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022028:	8a 06                	mov    al,BYTE PTR [esi]
c002202a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002202d:	31 c0                	xor    eax,eax
c002202f:	eb 05                	jmp    c0022036 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0022031:	b8 04 00 00 00       	mov    eax,0x4
c0022036:	83 c4 10             	add    esp,0x10
c0022039:	5b                   	pop    ebx
c002203a:	5e                   	pop    esi
c002203b:	5f                   	pop    edi
c002203c:	c3                   	ret    
c002203d:	90                   	nop

c002203e <ISO9660::exists(char const*)>:
c002203e:	83 ec 28             	sub    esp,0x28
c0022041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022045:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022049:	52                   	push   edx
c002204a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002204d:	52                   	push   edx
c002204e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022052:	52                   	push   edx
c0022053:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022057:	52                   	push   edx
c0022058:	50                   	push   eax
c0022059:	e8 a3 fe ff ff       	call   c0021f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002205e:	83 c4 3c             	add    esp,0x3c
c0022061:	c3                   	ret    

c0022062 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022062:	56                   	push   esi
c0022063:	53                   	push   ebx
c0022064:	83 ec 14             	sub    esp,0x14
c0022067:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002206b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002206f:	85 db                	test   ebx,ebx
c0022071:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022075:	0f 94 c2             	sete   dl
c0022078:	85 f6                	test   esi,esi
c002207a:	0f 94 c0             	sete   al
c002207d:	08 c2                	or     dl,al
c002207f:	75 68                	jne    c00220e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022081:	85 c9                	test   ecx,ecx
c0022083:	74 64                	je     c00220e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022085:	83 ec 0c             	sub    esp,0xc
c0022088:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002208b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002208f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022095:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002209c:	50                   	push   eax
c002209d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220a0:	50                   	push   eax
c00220a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220a5:	50                   	push   eax
c00220a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220aa:	50                   	push   eax
c00220ab:	51                   	push   ecx
c00220ac:	e8 50 fe ff ff       	call   c0021f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220b1:	83 c4 20             	add    esp,0x20
c00220b4:	ba 01 00 00 00       	mov    edx,0x1
c00220b9:	84 c0                	test   al,al
c00220bb:	74 31                	je     c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220c8:	89 03                	mov    DWORD PTR [ebx],eax
c00220ca:	ba 00 00 00 00       	mov    edx,0x0
c00220cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220d3:	85 c0                	test   eax,eax
c00220d5:	0f 95 06             	setne  BYTE PTR [esi]
c00220d8:	74 14                	je     c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220e7:	eb 05                	jmp    c00220ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220e9:	ba 04 00 00 00       	mov    edx,0x4
c00220ee:	83 c4 14             	add    esp,0x14
c00220f1:	89 d0                	mov    eax,edx
c00220f3:	5b                   	pop    ebx
c00220f4:	5e                   	pop    esi
c00220f5:	c3                   	ret    

c00220f6 <ISO9660::openDir(char const*, void**)>:
c00220f6:	57                   	push   edi
c00220f7:	56                   	push   esi
c00220f8:	53                   	push   ebx
c00220f9:	83 ec 10             	sub    esp,0x10
c00220fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022100:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022104:	85 ff                	test   edi,edi
c0022106:	74 7b                	je     c0022183 <ISO9660::openDir(char const*, void**)+0x8d>
c0022108:	85 f6                	test   esi,esi
c002210a:	74 77                	je     c0022183 <ISO9660::openDir(char const*, void**)+0x8d>
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	6a 1c                	push   0x1c
c0022111:	e8 9d d8 fe ff       	call   c000f9b3 <malloc>
c0022116:	89 07                	mov    DWORD PTR [edi],eax
c0022118:	89 c3                	mov    ebx,eax
c002211a:	58                   	pop    eax
c002211b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002211f:	50                   	push   eax
c0022120:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022123:	50                   	push   eax
c0022124:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022128:	50                   	push   eax
c0022129:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002212d:	50                   	push   eax
c002212e:	56                   	push   esi
c002212f:	e8 cd fd ff ff       	call   c0021f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022134:	83 c4 20             	add    esp,0x20
c0022137:	84 c0                	test   al,al
c0022139:	74 07                	je     c0022142 <ISO9660::openDir(char const*, void**)+0x4c>
c002213b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022140:	75 0b                	jne    c002214d <ISO9660::openDir(char const*, void**)+0x57>
c0022142:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022146:	b8 01 00 00 00       	mov    eax,0x1
c002214b:	eb 3b                	jmp    c0022188 <ISO9660::openDir(char const*, void**)+0x92>
c002214d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022151:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022155:	89 03                	mov    DWORD PTR [ebx],eax
c0022157:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002215e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022169:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022170:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022173:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002217a:	8a 06                	mov    al,BYTE PTR [esi]
c002217c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002217f:	31 c0                	xor    eax,eax
c0022181:	eb 05                	jmp    c0022188 <ISO9660::openDir(char const*, void**)+0x92>
c0022183:	b8 04 00 00 00       	mov    eax,0x4
c0022188:	83 c4 10             	add    esp,0x10
c002218b:	5b                   	pop    ebx
c002218c:	5e                   	pop    esi
c002218d:	5f                   	pop    edi
c002218e:	c3                   	ret    
c002218f:	90                   	nop

c0022190 <ISO9660::ISO9660()>:
c0022190:	83 ec 0c             	sub    esp,0xc
c0022193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022197:	83 ec 0c             	sub    esp,0xc
c002219a:	50                   	push   eax
c002219b:	e8 76 0b ff ff       	call   c0012d16 <Filesystem::Filesystem()>
c00221a0:	83 c4 10             	add    esp,0x10
c00221a3:	ba a0 cb 02 c0       	mov    edx,0xc002cba0
c00221a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ac:	89 10                	mov    DWORD PTR [eax],edx
c00221ae:	90                   	nop
c00221af:	83 c4 0c             	add    esp,0xc
c00221b2:	c3                   	ret    
c00221b3:	90                   	nop

c00221b4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221b4:	83 ec 1c             	sub    esp,0x1c
c00221b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00221bf:	89 10                	mov    DWORD PTR [eax],edx
c00221c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00221c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221d7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00221dc:	75 23                	jne    c0022201 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00221de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00221e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221eb:	0f af c2             	imul   eax,edx
c00221ee:	85 c0                	test   eax,eax
c00221f0:	79 03                	jns    c00221f5 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00221f2:	83 c0 03             	add    eax,0x3
c00221f5:	c1 f8 02             	sar    eax,0x2
c00221f8:	05 a0 0f 00 00       	add    eax,0xfa0
c00221fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022205:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022209:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002220c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022210:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022226:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022229:	c1 e0 02             	shl    eax,0x2
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	50                   	push   eax
c0022230:	e8 7e d7 fe ff       	call   c000f9b3 <malloc>
c0022235:	83 c4 10             	add    esp,0x10
c0022238:	89 c2                	mov    edx,eax
c002223a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002223e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022241:	83 ec 04             	sub    esp,0x4
c0022244:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022248:	50                   	push   eax
c0022249:	6a 01                	push   0x1
c002224b:	6a 04                	push   0x4
c002224d:	e8 49 6b fe ff       	call   c0008d9b <src_new>
c0022252:	83 c4 10             	add    esp,0x10
c0022255:	89 c2                	mov    edx,eax
c0022257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002225b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002225e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022262:	85 c0                	test   eax,eax
c0022264:	74 10                	je     c0022276 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0022266:	83 ec 0c             	sub    esp,0xc
c0022269:	68 00 cc 02 c0       	push   0xc002cc00
c002226e:	e8 36 81 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0022273:	83 c4 10             	add    esp,0x10
c0022276:	a0 80 09 03 c0       	mov    al,ds:0xc0030980
c002227b:	83 f0 01             	xor    eax,0x1
c002227e:	84 c0                	test   al,al
c0022280:	74 57                	je     c00222d9 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0022282:	a1 1c cc 02 c0       	mov    eax,ds:0xc002cc1c
c0022287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002228b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022293:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002229b:	7f 35                	jg     c00222d2 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c002229d:	83 ec 0c             	sub    esp,0xc
c00222a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222a4:	e8 66 54 00 00       	call   c002770f <__floatsisf>
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	8b 15 1c cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc1c
c00222b2:	83 ec 08             	sub    esp,0x8
c00222b5:	52                   	push   edx
c00222b6:	50                   	push   eax
c00222b7:	e8 65 50 00 00       	call   c0027321 <__mulsf3>
c00222bc:	83 c4 10             	add    esp,0x10
c00222bf:	89 c2                	mov    edx,eax
c00222c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222c5:	89 14 85 80 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa80],edx
c00222cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00222d0:	eb c1                	jmp    c0022293 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c00222d2:	c6 05 80 09 03 c0 01 	mov    BYTE PTR ds:0xc0030980,0x1
c00222d9:	90                   	nop
c00222da:	83 c4 1c             	add    esp,0x1c
c00222dd:	c3                   	ret    

c00222de <SoundChannel::~SoundChannel()>:
c00222de:	83 ec 0c             	sub    esp,0xc
c00222e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222e8:	83 ec 0c             	sub    esp,0xc
c00222eb:	50                   	push   eax
c00222ec:	e8 d2 d6 fe ff       	call   c000f9c3 <free>
c00222f1:	83 c4 10             	add    esp,0x10
c00222f4:	90                   	nop
c00222f5:	83 c4 0c             	add    esp,0xc
c00222f8:	c3                   	ret    
c00222f9:	90                   	nop

c00222fa <SoundChannel::getSampleRate()>:
c00222fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0022300:	c3                   	ret    
c0022301:	90                   	nop

c0022302 <SoundChannel::getBits()>:
c0022302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022309:	c3                   	ret    

c002230a <SoundChannel::getBufferUsed()>:
c002230a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022311:	c3                   	ret    

c0022312 <SoundChannel::getBufferSize()>:
c0022312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022316:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022319:	c3                   	ret    

c002231a <SoundChannel::unbuffer(float*, int, int)>:
c002231a:	56                   	push   esi
c002231b:	53                   	push   ebx
c002231c:	83 ec 40             	sub    esp,0x40
c002231f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022323:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022326:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002232a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002232d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022331:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022335:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022339:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002233d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022341:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022345:	e8 c5 53 00 00       	call   c002770f <__floatsisf>
c002234a:	5a                   	pop    edx
c002234b:	89 c6                	mov    esi,eax
c002234d:	ff 33                	push   DWORD PTR [ebx]
c002234f:	e8 bb 53 00 00       	call   c002770f <__floatsisf>
c0022354:	59                   	pop    ecx
c0022355:	5a                   	pop    edx
c0022356:	50                   	push   eax
c0022357:	56                   	push   esi
c0022358:	e8 87 51 00 00       	call   c00274e4 <__divsf3>
c002235d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022360:	e8 7a 66 00 00       	call   c00289df <__extendsfdf2>
c0022365:	59                   	pop    ecx
c0022366:	5e                   	pop    esi
c0022367:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002236b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002236f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022377:	8d 44 24 14          	lea    eax,[esp+0x14]
c002237b:	50                   	push   eax
c002237c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002237f:	e8 0c 66 fe ff       	call   c0008990 <src_process>
c0022384:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022388:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002238b:	83 c4 0c             	add    esp,0xc
c002238e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022391:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022394:	29 d0                	sub    eax,edx
c0022396:	c1 e0 02             	shl    eax,0x2
c0022399:	50                   	push   eax
c002239a:	8d 04 91             	lea    eax,[ecx+edx*4]
c002239d:	50                   	push   eax
c002239e:	51                   	push   ecx
c002239f:	e8 e4 e2 fd ff       	call   c0000688 <memmove>
c00223a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00223a8:	83 c4 44             	add    esp,0x44
c00223ab:	5b                   	pop    ebx
c00223ac:	5e                   	pop    esi
c00223ad:	c3                   	ret    

c00223ae <SoundChannel::buffer16(short*, int)>:
c00223ae:	55                   	push   ebp
c00223af:	57                   	push   edi
c00223b0:	56                   	push   esi
c00223b1:	53                   	push   ebx
c00223b2:	83 ec 1c             	sub    esp,0x1c
c00223b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00223b9:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223bc:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223bf:	0f 84 d2 00 00 00    	je     c0022497 <SoundChannel::buffer16(short*, int)+0xe9>
c00223c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00223c9:	85 ed                	test   ebp,ebp
c00223cb:	0f 8e c6 00 00 00    	jle    c0022497 <SoundChannel::buffer16(short*, int)+0xe9>
c00223d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223d5:	bd 00 00 00 38       	mov    ebp,0x38000000
c00223da:	83 ec 0c             	sub    esp,0xc
c00223dd:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00223e0:	50                   	push   eax
c00223e1:	e8 29 53 00 00       	call   c002770f <__floatsisf>
c00223e6:	59                   	pop    ecx
c00223e7:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223ea:	5f                   	pop    edi
c00223eb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223ee:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223f1:	55                   	push   ebp
c00223f2:	50                   	push   eax
c00223f3:	e8 29 4f 00 00       	call   c0027321 <__mulsf3>
c00223f8:	83 c4 10             	add    esp,0x10
c00223fb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223fe:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022401:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022404:	0f 84 99 00 00 00    	je     c00224a3 <SoundChannel::buffer16(short*, int)+0xf5>
c002240a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002240f:	74 78                	je     c0022489 <SoundChannel::buffer16(short*, int)+0xdb>
c0022411:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022415:	83 ec 0c             	sub    esp,0xc
c0022418:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c002241c:	50                   	push   eax
c002241d:	e8 ed 52 00 00       	call   c002770f <__floatsisf>
c0022422:	5f                   	pop    edi
c0022423:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022426:	5a                   	pop    edx
c0022427:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002242a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002242d:	55                   	push   ebp
c002242e:	50                   	push   eax
c002242f:	e8 ed 4e 00 00       	call   c0027321 <__mulsf3>
c0022434:	83 c4 10             	add    esp,0x10
c0022437:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002243a:	be 02 00 00 00       	mov    esi,0x2
c002243f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022442:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022445:	74 46                	je     c002248d <SoundChannel::buffer16(short*, int)+0xdf>
c0022447:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002244b:	eb 36                	jmp    c0022483 <SoundChannel::buffer16(short*, int)+0xd5>
c002244d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022451:	83 ec 0c             	sub    esp,0xc
c0022454:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022458:	46                   	inc    esi
c0022459:	50                   	push   eax
c002245a:	e8 b0 52 00 00       	call   c002770f <__floatsisf>
c002245f:	5a                   	pop    edx
c0022460:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022463:	59                   	pop    ecx
c0022464:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022467:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002246a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002246e:	50                   	push   eax
c002246f:	e8 ad 4e 00 00       	call   c0027321 <__mulsf3>
c0022474:	83 c4 10             	add    esp,0x10
c0022477:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c002247b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002247e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022481:	74 0a                	je     c002248d <SoundChannel::buffer16(short*, int)+0xdf>
c0022483:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022487:	75 c4                	jne    c002244d <SoundChannel::buffer16(short*, int)+0x9f>
c0022489:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002248d:	83 c4 1c             	add    esp,0x1c
c0022490:	89 f0                	mov    eax,esi
c0022492:	5b                   	pop    ebx
c0022493:	5e                   	pop    esi
c0022494:	5f                   	pop    edi
c0022495:	5d                   	pop    ebp
c0022496:	c3                   	ret    
c0022497:	83 c4 1c             	add    esp,0x1c
c002249a:	31 f6                	xor    esi,esi
c002249c:	5b                   	pop    ebx
c002249d:	89 f0                	mov    eax,esi
c002249f:	5e                   	pop    esi
c00224a0:	5f                   	pop    edi
c00224a1:	5d                   	pop    ebp
c00224a2:	c3                   	ret    
c00224a3:	be 01 00 00 00       	mov    esi,0x1
c00224a8:	eb e3                	jmp    c002248d <SoundChannel::buffer16(short*, int)+0xdf>

c00224aa <SoundChannel::buffer8(unsigned char*, int)>:
c00224aa:	55                   	push   ebp
c00224ab:	57                   	push   edi
c00224ac:	56                   	push   esi
c00224ad:	53                   	push   ebx
c00224ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224b2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224b6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224bd:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224c0:	74 7a                	je     c002253c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224c2:	85 ff                	test   edi,edi
c00224c4:	7e 76                	jle    c002253c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224c6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224ca:	8d 70 01             	lea    esi,[eax+0x1]
c00224cd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224d0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224d3:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c00224da:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224dd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224e0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224e3:	74 5e                	je     c0022543 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224e5:	83 ff 01             	cmp    edi,0x1
c00224e8:	74 4b                	je     c0022535 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224ea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224ee:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224f1:	8d 70 01             	lea    esi,[eax+0x1]
c00224f4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224f7:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c00224fe:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022501:	b8 02 00 00 00       	mov    eax,0x2
c0022506:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022509:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002250c:	75 23                	jne    c0022531 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002250e:	eb 27                	jmp    c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022510:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022515:	8d 71 01             	lea    esi,[ecx+0x1]
c0022518:	40                   	inc    eax
c0022519:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002251c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002251f:	8b 1c 9d 80 05 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfa80]
c0022526:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022529:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002252c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002252f:	74 06                	je     c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022531:	39 c7                	cmp    edi,eax
c0022533:	75 db                	jne    c0022510 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022535:	89 f8                	mov    eax,edi
c0022537:	5b                   	pop    ebx
c0022538:	5e                   	pop    esi
c0022539:	5f                   	pop    edi
c002253a:	5d                   	pop    ebp
c002253b:	c3                   	ret    
c002253c:	5b                   	pop    ebx
c002253d:	31 c0                	xor    eax,eax
c002253f:	5e                   	pop    esi
c0022540:	5f                   	pop    edi
c0022541:	5d                   	pop    ebp
c0022542:	c3                   	ret    
c0022543:	b8 01 00 00 00       	mov    eax,0x1
c0022548:	eb ed                	jmp    c0022537 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002254a <SoundDevice::SoundDevice(char const*)>:
c002254a:	83 ec 1c             	sub    esp,0x1c
c002254d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022551:	83 ec 08             	sub    esp,0x8
c0022554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022558:	50                   	push   eax
c0022559:	e8 ea 1a ff ff       	call   c0014048 <Device::Device(char const*)>
c002255e:	83 c4 10             	add    esp,0x10
c0022561:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c0022566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256a:	89 10                	mov    DWORD PTR [eax],edx
c002256c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022570:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022588:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022590:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022595:	7f 19                	jg     c00225b0 <SoundDevice::SoundDevice(char const*)+0x66>
c0022597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002259f:	83 c2 54             	add    edx,0x54
c00225a2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ae:	eb e0                	jmp    c0022590 <SoundDevice::SoundDevice(char const*)+0x46>
c00225b0:	90                   	nop
c00225b1:	83 c4 1c             	add    esp,0x1c
c00225b4:	c3                   	ret    
c00225b5:	90                   	nop

c00225b6 <SoundDevice::~SoundDevice()>:
c00225b6:	53                   	push   ebx
c00225b7:	83 ec 18             	sub    esp,0x18
c00225ba:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c00225bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c3:	89 10                	mov    DWORD PTR [eax],edx
c00225c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225cd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225d2:	7f 46                	jg     c002261a <SoundDevice::~SoundDevice()+0x64>
c00225d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225dc:	83 c2 54             	add    edx,0x54
c00225df:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225e3:	85 c0                	test   eax,eax
c00225e5:	74 2d                	je     c0022614 <SoundDevice::~SoundDevice()+0x5e>
c00225e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ef:	83 c2 54             	add    edx,0x54
c00225f2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225f6:	85 db                	test   ebx,ebx
c00225f8:	74 1a                	je     c0022614 <SoundDevice::~SoundDevice()+0x5e>
c00225fa:	83 ec 0c             	sub    esp,0xc
c00225fd:	53                   	push   ebx
c00225fe:	e8 db fc ff ff       	call   c00222de <SoundChannel::~SoundChannel()>
c0022603:	83 c4 10             	add    esp,0x10
c0022606:	83 ec 08             	sub    esp,0x8
c0022609:	6a 2c                	push   0x2c
c002260b:	53                   	push   ebx
c002260c:	e8 22 03 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0022611:	83 c4 10             	add    esp,0x10
c0022614:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022618:	eb b3                	jmp    c00225cd <SoundDevice::~SoundDevice()+0x17>
c002261a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002261e:	83 ec 0c             	sub    esp,0xc
c0022621:	50                   	push   eax
c0022622:	e8 eb 16 ff ff       	call   c0013d12 <Device::~Device()>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	90                   	nop
c002262b:	83 c4 18             	add    esp,0x18
c002262e:	5b                   	pop    ebx
c002262f:	c3                   	ret    

c0022630 <SoundDevice::~SoundDevice()>:
c0022630:	83 ec 0c             	sub    esp,0xc
c0022633:	83 ec 0c             	sub    esp,0xc
c0022636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263a:	e8 77 ff ff ff       	call   c00225b6 <SoundDevice::~SoundDevice()>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	83 ec 08             	sub    esp,0x8
c0022645:	68 e4 01 00 00       	push   0x1e4
c002264a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264e:	e8 e0 02 ff ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 c4 0c             	add    esp,0xc
c0022659:	c3                   	ret    

c002265a <SoundDevice::getFreeChannelNum()>:
c002265a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002265e:	31 c0                	xor    eax,eax
c0022660:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022668:	74 09                	je     c0022673 <SoundDevice::getFreeChannelNum()+0x19>
c002266a:	40                   	inc    eax
c002266b:	83 f8 20             	cmp    eax,0x20
c002266e:	75 f0                	jne    c0022660 <SoundDevice::getFreeChannelNum()+0x6>
c0022670:	83 c8 ff             	or     eax,0xffffffff
c0022673:	c3                   	ret    

c0022674 <SoundDevice::addChannel(SoundChannel*)>:
c0022674:	56                   	push   esi
c0022675:	53                   	push   ebx
c0022676:	51                   	push   ecx
c0022677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002267b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002267f:	53                   	push   ebx
c0022680:	e8 d5 ff ff ff       	call   c002265a <SoundDevice::getFreeChannelNum()>
c0022685:	5a                   	pop    edx
c0022686:	83 f8 ff             	cmp    eax,0xffffffff
c0022689:	74 51                	je     c00226dc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002268b:	85 f6                	test   esi,esi
c002268d:	74 4d                	je     c00226dc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002268f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022696:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002269d:	75 30                	jne    c00226cf <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002269f:	83 ec 0c             	sub    esp,0xc
c00226a2:	56                   	push   esi
c00226a3:	e8 52 fc ff ff       	call   c00222fa <SoundChannel::getSampleRate()>
c00226a8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00226b1:	e8 4c fc ff ff       	call   c0022302 <SoundChannel::getBits()>
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226c1:	50                   	push   eax
c00226c2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226c8:	53                   	push   ebx
c00226c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00226cc:	83 c4 10             	add    esp,0x10
c00226cf:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226d5:	b8 01 00 00 00       	mov    eax,0x1
c00226da:	eb 03                	jmp    c00226df <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226dc:	83 c8 ff             	or     eax,0xffffffff
c00226df:	5a                   	pop    edx
c00226e0:	5b                   	pop    ebx
c00226e1:	5e                   	pop    esi
c00226e2:	c3                   	ret    
c00226e3:	90                   	nop

c00226e4 <SoundDevice::removeChannel(int)>:
c00226e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226ec:	83 fa 1f             	cmp    edx,0x1f
c00226ef:	77 23                	ja     c0022714 <SoundDevice::removeChannel(int)+0x30>
c00226f1:	8d 14 90             	lea    edx,[eax+edx*4]
c00226f4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226fb:	74 17                	je     c0022714 <SoundDevice::removeChannel(int)+0x30>
c00226fd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022707:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002270d:	75 05                	jne    c0022714 <SoundDevice::removeChannel(int)+0x30>
c002270f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022711:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022714:	c3                   	ret    
c0022715:	90                   	nop

c0022716 <SoundDevice::floatTo16(float*, short*, int)>:
c0022716:	57                   	push   edi
c0022717:	56                   	push   esi
c0022718:	53                   	push   ebx
c0022719:	31 db                	xor    ebx,ebx
c002271b:	83 ec 10             	sub    esp,0x10
c002271e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022722:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022726:	0f 8d d0 00 00 00    	jge    c00227fc <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002272c:	83 ec 0c             	sub    esp,0xc
c002272f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022733:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022736:	e8 a4 62 00 00       	call   c00289df <__extendsfdf2>
c002273b:	83 c4 10             	add    esp,0x10
c002273e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022742:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022746:	68 00 00 f0 3f       	push   0x3ff00000
c002274b:	6a 00                	push   0x0
c002274d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022755:	e8 11 52 00 00       	call   c002796b <__adddf3>
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022761:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022765:	68 00 00 e0 3f       	push   0x3fe00000
c002276a:	6a 00                	push   0x0
c002276c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022774:	e8 6f 58 00 00       	call   c0027fe8 <__muldf3>
c0022779:	83 c4 10             	add    esp,0x10
c002277c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022784:	68 c0 ff df 40       	push   0x40dfffc0
c0022789:	6a 00                	push   0x0
c002278b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002278f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022793:	e8 50 58 00 00       	call   c0027fe8 <__muldf3>
c0022798:	59                   	pop    ecx
c0022799:	5f                   	pop    edi
c002279a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002279e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227aa:	e8 0c 61 00 00       	call   c00288bb <__truncdfsf2>
c00227af:	5a                   	pop    edx
c00227b0:	89 c7                	mov    edi,eax
c00227b2:	59                   	pop    ecx
c00227b3:	68 00 fe ff 46       	push   0x46fffe00
c00227b8:	50                   	push   eax
c00227b9:	e8 a7 51 00 00       	call   c0027965 <__gesf2>
c00227be:	83 c4 10             	add    esp,0x10
c00227c1:	85 c0                	test   eax,eax
c00227c3:	78 08                	js     c00227cd <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00227c5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00227cb:	eb 29                	jmp    c00227f6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00227cd:	50                   	push   eax
c00227ce:	50                   	push   eax
c00227cf:	6a 00                	push   0x0
c00227d1:	57                   	push   edi
c00227d2:	e8 92 51 00 00       	call   c0027969 <__lesf2>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	85 c0                	test   eax,eax
c00227dc:	7f 08                	jg     c00227e6 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00227de:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00227e4:	eb 10                	jmp    c00227f6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00227e6:	83 ec 0c             	sub    esp,0xc
c00227e9:	57                   	push   edi
c00227ea:	e8 8d 62 00 00       	call   c0028a7c <lrintf>
c00227ef:	83 c4 10             	add    esp,0x10
c00227f2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00227f6:	43                   	inc    ebx
c00227f7:	e9 26 ff ff ff       	jmp    c0022722 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00227fc:	83 c4 10             	add    esp,0x10
c00227ff:	5b                   	pop    ebx
c0022800:	5e                   	pop    esi
c0022801:	5f                   	pop    edi
c0022802:	c3                   	ret    
c0022803:	90                   	nop

c0022804 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022804:	57                   	push   edi
c0022805:	56                   	push   esi
c0022806:	53                   	push   ebx
c0022807:	31 db                	xor    ebx,ebx
c0022809:	83 ec 10             	sub    esp,0x10
c002280c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022810:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022814:	0f 8d cb 00 00 00    	jge    c00228e5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002281a:	83 ec 0c             	sub    esp,0xc
c002281d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022821:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022824:	e8 b6 61 00 00       	call   c00289df <__extendsfdf2>
c0022829:	83 c4 10             	add    esp,0x10
c002282c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022834:	68 00 00 f0 3f       	push   0x3ff00000
c0022839:	6a 00                	push   0x0
c002283b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002283f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022843:	e8 23 51 00 00       	call   c002796b <__adddf3>
c0022848:	83 c4 10             	add    esp,0x10
c002284b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002284f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022853:	68 00 00 e0 3f       	push   0x3fe00000
c0022858:	6a 00                	push   0x0
c002285a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022862:	e8 81 57 00 00       	call   c0027fe8 <__muldf3>
c0022867:	83 c4 10             	add    esp,0x10
c002286a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002286e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022872:	68 00 00 60 40       	push   0x40600000
c0022877:	6a 00                	push   0x0
c0022879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002287d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022881:	e8 62 57 00 00       	call   c0027fe8 <__muldf3>
c0022886:	59                   	pop    ecx
c0022887:	5f                   	pop    edi
c0022888:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002288c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022898:	e8 1e 60 00 00       	call   c00288bb <__truncdfsf2>
c002289d:	5a                   	pop    edx
c002289e:	89 c7                	mov    edi,eax
c00228a0:	59                   	pop    ecx
c00228a1:	68 00 00 fe 42       	push   0x42fe0000
c00228a6:	50                   	push   eax
c00228a7:	e8 b9 50 00 00       	call   c0027965 <__gesf2>
c00228ac:	83 c4 10             	add    esp,0x10
c00228af:	85 c0                	test   eax,eax
c00228b1:	78 06                	js     c00228b9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00228b3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00228b7:	eb 26                	jmp    c00228df <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228b9:	50                   	push   eax
c00228ba:	50                   	push   eax
c00228bb:	6a 00                	push   0x0
c00228bd:	57                   	push   edi
c00228be:	e8 a6 50 00 00       	call   c0027969 <__lesf2>
c00228c3:	83 c4 10             	add    esp,0x10
c00228c6:	85 c0                	test   eax,eax
c00228c8:	7f 06                	jg     c00228d0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00228ca:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00228ce:	eb 0f                	jmp    c00228df <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228d0:	83 ec 0c             	sub    esp,0xc
c00228d3:	57                   	push   edi
c00228d4:	e8 a3 61 00 00       	call   c0028a7c <lrintf>
c00228d9:	83 c4 10             	add    esp,0x10
c00228dc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00228df:	43                   	inc    ebx
c00228e0:	e9 2b ff ff ff       	jmp    c0022810 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00228e5:	83 c4 10             	add    esp,0x10
c00228e8:	5b                   	pop    ebx
c00228e9:	5e                   	pop    esi
c00228ea:	5f                   	pop    edi
c00228eb:	c3                   	ret    

c00228ec <SoundDevice::getAudio(int, float*, float*)>:
c00228ec:	55                   	push   ebp
c00228ed:	31 ed                	xor    ebp,ebp
c00228ef:	57                   	push   edi
c00228f0:	56                   	push   esi
c00228f1:	31 f6                	xor    esi,esi
c00228f3:	53                   	push   ebx
c00228f4:	83 ec 20             	sub    esp,0x20
c00228f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228ff:	c1 e0 02             	shl    eax,0x2
c0022902:	50                   	push   eax
c0022903:	6a 00                	push   0x0
c0022905:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022909:	e8 42 de fd ff       	call   c0000750 <memset>
c002290e:	83 c4 10             	add    esp,0x10
c0022911:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022919:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022920:	85 c9                	test   ecx,ecx
c0022922:	74 52                	je     c0022976 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022924:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022928:	99                   	cdq    
c0022929:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002292f:	50                   	push   eax
c0022930:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022936:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002293a:	51                   	push   ecx
c002293b:	e8 da f9 ff ff       	call   c002231a <SoundChannel::unbuffer(float*, int, int)>
c0022940:	31 d2                	xor    edx,edx
c0022942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022946:	83 c4 10             	add    esp,0x10
c0022949:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002294d:	7d 1e                	jge    c002296d <SoundDevice::getAudio(int, float*, float*)+0x81>
c002294f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022957:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002295a:	89 cf                	mov    edi,ecx
c002295c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022962:	0f af ca             	imul   ecx,edx
c0022965:	42                   	inc    edx
c0022966:	01 e9                	add    ecx,ebp
c0022968:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002296b:	eb dc                	jmp    c0022949 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002296d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022971:	45                   	inc    ebp
c0022972:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022976:	46                   	inc    esi
c0022977:	83 fe 20             	cmp    esi,0x20
c002297a:	75 9d                	jne    c0022919 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002297c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022980:	83 c4 1c             	add    esp,0x1c
c0022983:	5b                   	pop    ebx
c0022984:	5e                   	pop    esi
c0022985:	5f                   	pop    edi
c0022986:	5d                   	pop    ebp
c0022987:	c3                   	ret    

c0022988 <PCI::open(int, int, void*)>:
c0022988:	83 ec 18             	sub    esp,0x18
c002298b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002298f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022993:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022999:	8b 10                	mov    edx,DWORD PTR [eax]
c002299b:	50                   	push   eax
c002299c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002299f:	31 c0                	xor    eax,eax
c00229a1:	83 c4 1c             	add    esp,0x1c
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PCI::close(int, int, void*)>:
c00229a6:	31 c0                	xor    eax,eax
c00229a8:	c3                   	ret    
c00229a9:	90                   	nop

c00229aa <PCI::PCI()>:
c00229aa:	83 ec 0c             	sub    esp,0xc
c00229ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b1:	83 ec 08             	sub    esp,0x8
c00229b4:	68 58 cc 02 c0       	push   0xc002cc58
c00229b9:	50                   	push   eax
c00229ba:	e8 ed 0c ff ff       	call   c00136ac <Bus::Bus(char const*)>
c00229bf:	83 c4 10             	add    esp,0x10
c00229c2:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c00229c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cb:	89 10                	mov    DWORD PTR [eax],edx
c00229cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00229db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229df:	a3 84 09 03 c0       	mov    ds:0xc0030984,eax
c00229e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229ee:	0f b6 d0             	movzx  edx,al
c00229f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a06:	0f b6 d0             	movzx  edx,al
c0022a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a1c:	8d 50 01             	lea    edx,[eax+0x1]
c0022a1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a29:	0f b6 d0             	movzx  edx,al
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a34:	83 c9 c0             	or     ecx,0xffffffc0
c0022a37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a3b:	90                   	nop
c0022a3c:	83 c4 0c             	add    esp,0xc
c0022a3f:	c3                   	ret    

c0022a40 <PCI::readBAR8(unsigned int, int)>:
c0022a40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a48:	f6 c2 01             	test   dl,0x1
c0022a4b:	74 07                	je     c0022a54 <PCI::readBAR8(unsigned int, int)+0x14>
c0022a4d:	83 e2 fc             	and    edx,0xfffffffc
c0022a50:	01 c2                	add    edx,eax
c0022a52:	ec                   	in     al,dx
c0022a53:	c3                   	ret    
c0022a54:	83 e2 f0             	and    edx,0xfffffff0
c0022a57:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022a5a:	c3                   	ret    
c0022a5b:	90                   	nop

c0022a5c <PCI::readBAR16(unsigned int, int)>:
c0022a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a64:	f6 c2 01             	test   dl,0x1
c0022a67:	74 08                	je     c0022a71 <PCI::readBAR16(unsigned int, int)+0x15>
c0022a69:	83 e2 fc             	and    edx,0xfffffffc
c0022a6c:	01 c2                	add    edx,eax
c0022a6e:	66 ed                	in     ax,dx
c0022a70:	c3                   	ret    
c0022a71:	83 e2 f0             	and    edx,0xfffffff0
c0022a74:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022a78:	c3                   	ret    
c0022a79:	90                   	nop

c0022a7a <PCI::readBAR32(unsigned int, int)>:
c0022a7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a82:	f6 c2 01             	test   dl,0x1
c0022a85:	74 07                	je     c0022a8e <PCI::readBAR32(unsigned int, int)+0x14>
c0022a87:	83 e2 fc             	and    edx,0xfffffffc
c0022a8a:	01 c2                	add    edx,eax
c0022a8c:	ed                   	in     eax,dx
c0022a8d:	c3                   	ret    
c0022a8e:	83 e2 f0             	and    edx,0xfffffff0
c0022a91:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022a94:	c3                   	ret    
c0022a95:	90                   	nop

c0022a96 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022a96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022aa2:	f6 c2 01             	test   dl,0x1
c0022aa5:	74 07                	je     c0022aae <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022aa7:	83 e2 fc             	and    edx,0xfffffffc
c0022aaa:	01 ca                	add    edx,ecx
c0022aac:	ee                   	out    dx,al
c0022aad:	c3                   	ret    
c0022aae:	83 e2 f0             	and    edx,0xfffffff0
c0022ab1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022ab4:	c3                   	ret    
c0022ab5:	90                   	nop

c0022ab6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022ab6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ac2:	f6 c2 01             	test   dl,0x1
c0022ac5:	74 08                	je     c0022acf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022ac7:	83 e2 fc             	and    edx,0xfffffffc
c0022aca:	01 ca                	add    edx,ecx
c0022acc:	66 ef                	out    dx,ax
c0022ace:	c3                   	ret    
c0022acf:	83 e2 f0             	and    edx,0xfffffff0
c0022ad2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022ad6:	c3                   	ret    
c0022ad7:	90                   	nop

c0022ad8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022ad8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ae4:	f6 c2 01             	test   dl,0x1
c0022ae7:	74 07                	je     c0022af0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022ae9:	83 e2 fc             	and    edx,0xfffffffc
c0022aec:	01 ca                	add    edx,ecx
c0022aee:	ef                   	out    dx,eax
c0022aef:	c3                   	ret    
c0022af0:	83 e2 f0             	and    edx,0xfffffff0
c0022af3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022af6:	c3                   	ret    
c0022af7:	90                   	nop

c0022af8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022af8:	55                   	push   ebp
c0022af9:	57                   	push   edi
c0022afa:	56                   	push   esi
c0022afb:	53                   	push   ebx
c0022afc:	83 ec 0c             	sub    esp,0xc
c0022aff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022b03:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022b07:	89 f0                	mov    eax,esi
c0022b09:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022b0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b11:	3c 07                	cmp    al,0x7
c0022b13:	76 10                	jbe    c0022b25 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022b15:	83 ec 0c             	sub    esp,0xc
c0022b18:	68 60 cc 02 c0       	push   0xc002cc60
c0022b1d:	e8 87 78 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	80 fb 0f             	cmp    bl,0xf
c0022b28:	76 10                	jbe    c0022b3a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022b2a:	83 ec 0c             	sub    esp,0xc
c0022b2d:	68 90 cc 02 c0       	push   0xc002cc90
c0022b32:	e8 72 78 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0022b37:	83 c4 10             	add    esp,0x10
c0022b3a:	8d 04 36             	lea    eax,[esi+esi*1]
c0022b3d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b42:	83 c8 f0             	or     eax,0xfffffff0
c0022b45:	ee                   	out    dx,al
c0022b46:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022b4b:	89 e8                	mov    eax,ebp
c0022b4d:	ee                   	out    dx,al
c0022b4e:	83 c4 0c             	add    esp,0xc
c0022b51:	89 d8                	mov    eax,ebx
c0022b53:	66 81 e7 fc 00       	and    di,0xfc
c0022b58:	5b                   	pop    ebx
c0022b59:	c1 e0 08             	shl    eax,0x8
c0022b5c:	5e                   	pop    esi
c0022b5d:	09 f8                	or     eax,edi
c0022b5f:	5f                   	pop    edi
c0022b60:	66 0d 00 c0          	or     ax,0xc000
c0022b64:	5d                   	pop    ebp
c0022b65:	c3                   	ret    

c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b66:	57                   	push   edi
c0022b67:	56                   	push   esi
c0022b68:	53                   	push   ebx
c0022b69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b71:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022b77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022b7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022b83:	83 ff 01             	cmp    edi,0x1
c0022b86:	75 3e                	jne    c0022bc6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022b88:	89 de                	mov    esi,ebx
c0022b8a:	0f b6 c0             	movzx  eax,al
c0022b8d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022b93:	c1 e0 10             	shl    eax,0x10
c0022b96:	0f b6 c9             	movzx  ecx,cl
c0022b99:	09 f0                	or     eax,esi
c0022b9b:	c1 e1 08             	shl    ecx,0x8
c0022b9e:	0f b6 d2             	movzx  edx,dl
c0022ba1:	09 c8                	or     eax,ecx
c0022ba3:	c1 e2 0b             	shl    edx,0xb
c0022ba6:	09 d0                	or     eax,edx
c0022ba8:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bad:	0d 00 00 00 80       	or     eax,0x80000000
c0022bb2:	ef                   	out    dx,eax
c0022bb3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bb8:	ed                   	in     eax,dx
c0022bb9:	83 e3 02             	and    ebx,0x2
c0022bbc:	0f b6 cb             	movzx  ecx,bl
c0022bbf:	c1 e1 03             	shl    ecx,0x3
c0022bc2:	d3 e8                	shr    eax,cl
c0022bc4:	eb 43                	jmp    c0022c09 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022bc6:	83 ff 02             	cmp    edi,0x2
c0022bc9:	75 2c                	jne    c0022bf7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022bcb:	83 ec 0c             	sub    esp,0xc
c0022bce:	0f b6 c9             	movzx  ecx,cl
c0022bd1:	0f b6 d2             	movzx  edx,dl
c0022bd4:	0f b6 fb             	movzx  edi,bl
c0022bd7:	0f b6 c0             	movzx  eax,al
c0022bda:	57                   	push   edi
c0022bdb:	51                   	push   ecx
c0022bdc:	52                   	push   edx
c0022bdd:	50                   	push   eax
c0022bde:	56                   	push   esi
c0022bdf:	e8 14 ff ff ff       	call   c0022af8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022be4:	89 c2                	mov    edx,eax
c0022be6:	ed                   	in     eax,dx
c0022be7:	83 e3 02             	and    ebx,0x2
c0022bea:	83 c4 20             	add    esp,0x20
c0022bed:	0f b6 cb             	movzx  ecx,bl
c0022bf0:	c1 e1 03             	shl    ecx,0x3
c0022bf3:	d3 e8                	shr    eax,cl
c0022bf5:	eb 12                	jmp    c0022c09 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022bf7:	83 ec 0c             	sub    esp,0xc
c0022bfa:	68 c0 cc 02 c0       	push   0xc002ccc0
c0022bff:	e8 a5 77 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0022c04:	83 c4 10             	add    esp,0x10
c0022c07:	31 c0                	xor    eax,eax
c0022c09:	5b                   	pop    ebx
c0022c0a:	5e                   	pop    esi
c0022c0b:	5f                   	pop    edi
c0022c0c:	c3                   	ret    
c0022c0d:	90                   	nop

c0022c0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022c0e:	83 ec 18             	sub    esp,0x18
c0022c11:	6a 00                	push   0x0
c0022c13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c18:	50                   	push   eax
c0022c19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c1e:	50                   	push   eax
c0022c1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c24:	50                   	push   eax
c0022c25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c29:	e8 38 ff ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c2e:	83 c4 2c             	add    esp,0x2c
c0022c31:	c3                   	ret    

c0022c32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022c32:	83 ec 18             	sub    esp,0x18
c0022c35:	6a 0e                	push   0xe
c0022c37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c3c:	50                   	push   eax
c0022c3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c42:	50                   	push   eax
c0022c43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022c48:	50                   	push   eax
c0022c49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c4d:	e8 14 ff ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c52:	83 c4 2c             	add    esp,0x2c
c0022c55:	0f b6 c0             	movzx  eax,al
c0022c58:	c3                   	ret    
c0022c59:	90                   	nop

c0022c5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022c5a:	55                   	push   ebp
c0022c5b:	57                   	push   edi
c0022c5c:	56                   	push   esi
c0022c5d:	53                   	push   ebx
c0022c5e:	83 ec 18             	sub    esp,0x18
c0022c61:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022c66:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022c6b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022c70:	6a 0a                	push   0xa
c0022c72:	56                   	push   esi
c0022c73:	55                   	push   ebp
c0022c74:	57                   	push   edi
c0022c75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c79:	e8 e8 fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c7e:	83 c4 14             	add    esp,0x14
c0022c81:	89 c3                	mov    ebx,eax
c0022c83:	6a 0a                	push   0xa
c0022c85:	0f b6 db             	movzx  ebx,bl
c0022c88:	56                   	push   esi
c0022c89:	55                   	push   ebp
c0022c8a:	57                   	push   edi
c0022c8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c8f:	e8 d2 fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c94:	83 c4 2c             	add    esp,0x2c
c0022c97:	25 00 ff 00 00       	and    eax,0xff00
c0022c9c:	09 d8                	or     eax,ebx
c0022c9e:	5b                   	pop    ebx
c0022c9f:	5e                   	pop    esi
c0022ca0:	5f                   	pop    edi
c0022ca1:	5d                   	pop    ebp
c0022ca2:	c3                   	ret    
c0022ca3:	90                   	nop

c0022ca4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022ca4:	83 ec 18             	sub    esp,0x18
c0022ca7:	6a 08                	push   0x8
c0022ca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cae:	50                   	push   eax
c0022caf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cb4:	50                   	push   eax
c0022cb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cba:	50                   	push   eax
c0022cbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cbf:	e8 a2 fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc4:	83 c4 2c             	add    esp,0x2c
c0022cc7:	0f b6 c4             	movzx  eax,ah
c0022cca:	c3                   	ret    
c0022ccb:	90                   	nop

c0022ccc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022ccc:	83 ec 18             	sub    esp,0x18
c0022ccf:	6a 08                	push   0x8
c0022cd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd6:	50                   	push   eax
c0022cd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cdc:	50                   	push   eax
c0022cdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ce2:	50                   	push   eax
c0022ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ce7:	e8 7a fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cec:	83 c4 2c             	add    esp,0x2c
c0022cef:	c3                   	ret    

c0022cf0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022cf0:	83 ec 18             	sub    esp,0x18
c0022cf3:	6a 3c                	push   0x3c
c0022cf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cfa:	50                   	push   eax
c0022cfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d00:	50                   	push   eax
c0022d01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d06:	50                   	push   eax
c0022d07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d0b:	e8 56 fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d10:	83 c4 2c             	add    esp,0x2c
c0022d13:	c3                   	ret    

c0022d14 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022d14:	83 ec 18             	sub    esp,0x18
c0022d17:	6a 18                	push   0x18
c0022d19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d1e:	50                   	push   eax
c0022d1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d24:	50                   	push   eax
c0022d25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d2a:	50                   	push   eax
c0022d2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d2f:	e8 32 fe ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d34:	83 c4 2c             	add    esp,0x2c
c0022d37:	0f b6 c4             	movzx  eax,ah
c0022d3a:	c3                   	ret    
c0022d3b:	90                   	nop

c0022d3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022d3c:	55                   	push   ebp
c0022d3d:	57                   	push   edi
c0022d3e:	56                   	push   esi
c0022d3f:	53                   	push   ebx
c0022d40:	83 ec 28             	sub    esp,0x28
c0022d43:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022d47:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022d4c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022d51:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022d56:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022d5d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022d60:	83 c3 10             	add    ebx,0x10
c0022d63:	0f b6 c0             	movzx  eax,al
c0022d66:	0f b6 db             	movzx  ebx,bl
c0022d69:	50                   	push   eax
c0022d6a:	51                   	push   ecx
c0022d6b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022d6f:	57                   	push   edi
c0022d70:	55                   	push   ebp
c0022d71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d75:	e8 ec fd ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d7a:	83 c4 14             	add    esp,0x14
c0022d7d:	89 c6                	mov    esi,eax
c0022d7f:	53                   	push   ebx
c0022d80:	c1 e6 10             	shl    esi,0x10
c0022d83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d87:	51                   	push   ecx
c0022d88:	57                   	push   edi
c0022d89:	55                   	push   ebp
c0022d8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022d8e:	e8 d3 fd ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d93:	83 c4 3c             	add    esp,0x3c
c0022d96:	0f b7 c0             	movzx  eax,ax
c0022d99:	5b                   	pop    ebx
c0022d9a:	09 f0                	or     eax,esi
c0022d9c:	5e                   	pop    esi
c0022d9d:	5f                   	pop    edi
c0022d9e:	5d                   	pop    ebp
c0022d9f:	c3                   	ret    

c0022da0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022da0:	55                   	push   ebp
c0022da1:	57                   	push   edi
c0022da2:	56                   	push   esi
c0022da3:	53                   	push   ebx
c0022da4:	83 ec 0c             	sub    esp,0xc
c0022da7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022dab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022daf:	89 f5                	mov    ebp,esi
c0022db1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022dbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022dbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022dc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022dc7:	83 f9 01             	cmp    ecx,0x1
c0022dca:	75 5d                	jne    c0022e29 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022dcc:	0f b6 c8             	movzx  ecx,al
c0022dcf:	0f b6 d2             	movzx  edx,dl
c0022dd2:	c1 e1 10             	shl    ecx,0x10
c0022dd5:	c1 e2 0b             	shl    edx,0xb
c0022dd8:	89 f0                	mov    eax,esi
c0022dda:	25 fc 00 00 00       	and    eax,0xfc
c0022ddf:	09 c1                	or     ecx,eax
c0022de1:	89 e8                	mov    eax,ebp
c0022de3:	0f b6 c0             	movzx  eax,al
c0022de6:	c1 e0 08             	shl    eax,0x8
c0022de9:	09 c1                	or     ecx,eax
c0022deb:	09 d1                	or     ecx,edx
c0022ded:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022df2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022df8:	89 c8                	mov    eax,ecx
c0022dfa:	ef                   	out    dx,eax
c0022dfb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e00:	ed                   	in     eax,dx
c0022e01:	0f b7 db             	movzx  ebx,bx
c0022e04:	83 e6 02             	and    esi,0x2
c0022e07:	74 0a                	je     c0022e13 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022e09:	0f b7 d0             	movzx  edx,ax
c0022e0c:	c1 e3 10             	shl    ebx,0x10
c0022e0f:	09 d3                	or     ebx,edx
c0022e11:	eb 05                	jmp    c0022e18 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022e13:	66 31 c0             	xor    ax,ax
c0022e16:	09 c3                	or     ebx,eax
c0022e18:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e1d:	89 c8                	mov    eax,ecx
c0022e1f:	ef                   	out    dx,eax
c0022e20:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e25:	89 d8                	mov    eax,ebx
c0022e27:	eb 41                	jmp    c0022e6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e29:	83 f9 02             	cmp    ecx,0x2
c0022e2c:	75 45                	jne    c0022e73 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022e2e:	83 ec 0c             	sub    esp,0xc
c0022e31:	0f b6 d2             	movzx  edx,dl
c0022e34:	89 f1                	mov    ecx,esi
c0022e36:	0f b6 c0             	movzx  eax,al
c0022e39:	0f b6 f1             	movzx  esi,cl
c0022e3c:	89 e9                	mov    ecx,ebp
c0022e3e:	56                   	push   esi
c0022e3f:	0f b6 c9             	movzx  ecx,cl
c0022e42:	51                   	push   ecx
c0022e43:	52                   	push   edx
c0022e44:	50                   	push   eax
c0022e45:	57                   	push   edi
c0022e46:	e8 ad fc ff ff       	call   c0022af8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e4b:	89 c2                	mov    edx,eax
c0022e4d:	ed                   	in     eax,dx
c0022e4e:	83 c4 20             	add    esp,0x20
c0022e51:	0f b7 db             	movzx  ebx,bx
c0022e54:	f6 c2 02             	test   dl,0x2
c0022e57:	74 0c                	je     c0022e65 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022e59:	0f b7 c8             	movzx  ecx,ax
c0022e5c:	89 d8                	mov    eax,ebx
c0022e5e:	c1 e0 10             	shl    eax,0x10
c0022e61:	09 c8                	or     eax,ecx
c0022e63:	eb 05                	jmp    c0022e6a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022e65:	66 31 c0             	xor    ax,ax
c0022e68:	09 d8                	or     eax,ebx
c0022e6a:	ef                   	out    dx,eax
c0022e6b:	83 c4 0c             	add    esp,0xc
c0022e6e:	5b                   	pop    ebx
c0022e6f:	5e                   	pop    esi
c0022e70:	5f                   	pop    edi
c0022e71:	5d                   	pop    ebp
c0022e72:	c3                   	ret    
c0022e73:	c7 44 24 20 c0 cc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ccc0
c0022e7b:	83 c4 0c             	add    esp,0xc
c0022e7e:	5b                   	pop    ebx
c0022e7f:	5e                   	pop    esi
c0022e80:	5f                   	pop    edi
c0022e81:	5d                   	pop    ebp
c0022e82:	e9 22 75 ff ff       	jmp    c001a3a9 <Krnl::panic(char const*)>
c0022e87:	90                   	nop

c0022e88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022e88:	55                   	push   ebp
c0022e89:	57                   	push   edi
c0022e8a:	56                   	push   esi
c0022e8b:	53                   	push   ebx
c0022e8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e92:	80 3d 90 09 03 c0 00 	cmp    BYTE PTR ds:0xc0030990,0x0
c0022e99:	0f 85 84 00 00 00    	jne    c0022f23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022e9f:	83 ec 0c             	sub    esp,0xc
c0022ea2:	68 14 01 00 00       	push   0x114
c0022ea7:	e8 07 cb fe ff       	call   c000f9b3 <malloc>
c0022eac:	83 c4 0c             	add    esp,0xc
c0022eaf:	89 c3                	mov    ebx,eax
c0022eb1:	ff 35 90 fb 02 c0    	push   DWORD PTR ds:0xc002fb90
c0022eb7:	68 c6 cc 02 c0       	push   0xc002ccc6
c0022ebc:	50                   	push   eax
c0022ebd:	e8 a8 00 ff ff       	call   c0012f6a <File::File(char const*, Process*)>
c0022ec2:	5a                   	pop    edx
c0022ec3:	59                   	pop    ecx
c0022ec4:	6a 01                	push   0x1
c0022ec6:	53                   	push   ebx
c0022ec7:	e8 02 01 ff ff       	call   c0012fce <File::open(FileOpenMode)>
c0022ecc:	83 c4 0c             	add    esp,0xc
c0022ecf:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022ed3:	50                   	push   eax
c0022ed4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022ed8:	50                   	push   eax
c0022ed9:	53                   	push   ebx
c0022eda:	e8 9b 03 ff ff       	call   c001327a <File::stat(unsigned long long*, bool*)>
c0022edf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ee3:	40                   	inc    eax
c0022ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ee7:	e8 c7 ca fe ff       	call   c000f9b3 <malloc>
c0022eec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022ef0:	a3 8c 09 03 c0       	mov    ds:0xc003098c,eax
c0022ef5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022ef9:	5e                   	pop    esi
c0022efa:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022efc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022f00:	51                   	push   ecx
c0022f01:	50                   	push   eax
c0022f02:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022f06:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022f0a:	53                   	push   ebx
c0022f0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022f0e:	83 c4 14             	add    esp,0x14
c0022f11:	53                   	push   ebx
c0022f12:	e8 15 01 ff ff       	call   c001302c <File::close()>
c0022f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f1b:	83 c4 10             	add    esp,0x10
c0022f1e:	a3 88 09 03 c0       	mov    ds:0xc0030988,eax
c0022f23:	a1 88 09 03 c0       	mov    eax,ds:0xc0030988
c0022f28:	8b 15 8c 09 03 c0    	mov    edx,DWORD PTR ds:0xc003098c
c0022f2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f31:	31 ff                	xor    edi,edi
c0022f33:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022f3b:	31 f6                	xor    esi,esi
c0022f3d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022f42:	31 db                	xor    ebx,ebx
c0022f44:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022f4c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022f51:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022f58:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022f5c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022f63:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022f67:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022f6a:	0f 8e 6b 01 00 00    	jle    c00230db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022f70:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022f73:	d4 40                	aam    0x40
c0022f75:	d5 39                	aad    0x39
c0022f77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022f7b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022f7f:	d4 40                	aam    0x40
c0022f81:	d5 39                	aad    0x39
c0022f83:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022f87:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022f8b:	d4 40                	aam    0x40
c0022f8d:	d5 39                	aad    0x39
c0022f8f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022f93:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022f97:	d4 40                	aam    0x40
c0022f99:	d5 39                	aad    0x39
c0022f9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022f9f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022fa3:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022fa7:	3c 56                	cmp    al,0x56
c0022fa9:	74 45                	je     c0022ff0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022fab:	d4 40                	aam    0x40
c0022fad:	d5 39                	aad    0x39
c0022faf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022fb2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022fb6:	0f b6 c9             	movzx  ecx,cl
c0022fb9:	c1 e1 04             	shl    ecx,0x4
c0022fbc:	d4 40                	aam    0x40
c0022fbe:	d5 39                	aad    0x39
c0022fc0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022fc3:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022fc7:	0f b6 db             	movzx  ebx,bl
c0022fca:	09 cb                	or     ebx,ecx
c0022fcc:	c1 e3 04             	shl    ebx,0x4
c0022fcf:	d4 40                	aam    0x40
c0022fd1:	d5 39                	aad    0x39
c0022fd3:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022fd6:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022fda:	0f b6 c9             	movzx  ecx,cl
c0022fdd:	09 cb                	or     ebx,ecx
c0022fdf:	c1 e3 04             	shl    ebx,0x4
c0022fe2:	89 d9                	mov    ecx,ebx
c0022fe4:	d4 40                	aam    0x40
c0022fe6:	d5 39                	aad    0x39
c0022fe8:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022feb:	0f b6 db             	movzx  ebx,bl
c0022fee:	09 cb                	or     ebx,ecx
c0022ff0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022ff4:	80 f9 44             	cmp    cl,0x44
c0022ff7:	74 47                	je     c0023040 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022ff9:	88 c8                	mov    al,cl
c0022ffb:	d4 40                	aam    0x40
c0022ffd:	d5 39                	aad    0x39
c0022fff:	83 e8 30             	sub    eax,0x30
c0023002:	0f b6 e8             	movzx  ebp,al
c0023005:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023009:	c1 e5 04             	shl    ebp,0x4
c002300c:	d4 40                	aam    0x40
c002300e:	d5 39                	aad    0x39
c0023010:	83 e8 30             	sub    eax,0x30
c0023013:	0f b6 f0             	movzx  esi,al
c0023016:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002301a:	09 ee                	or     esi,ebp
c002301c:	c1 e6 04             	shl    esi,0x4
c002301f:	d4 40                	aam    0x40
c0023021:	d5 39                	aad    0x39
c0023023:	83 e8 30             	sub    eax,0x30
c0023026:	0f b6 e8             	movzx  ebp,al
c0023029:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002302d:	09 ee                	or     esi,ebp
c002302f:	c1 e6 04             	shl    esi,0x4
c0023032:	89 f5                	mov    ebp,esi
c0023034:	d4 40                	aam    0x40
c0023036:	d5 39                	aad    0x39
c0023038:	83 e8 30             	sub    eax,0x30
c002303b:	0f b6 f0             	movzx  esi,al
c002303e:	09 ee                	or     esi,ebp
c0023040:	83 c7 10             	add    edi,0x10
c0023043:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023047:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002304a:	3c 0a                	cmp    al,0xa
c002304c:	74 09                	je     c0023057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002304e:	45                   	inc    ebp
c002304f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023052:	75 16                	jne    c002306a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0023054:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023057:	3c 0a                	cmp    al,0xa
c0023059:	0f 94 c0             	sete   al
c002305c:	0f b6 c0             	movzx  eax,al
c002305f:	01 c7                	add    edi,eax
c0023061:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023066:	75 0c                	jne    c0023074 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0023068:	eb 15                	jmp    c002307f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c002306a:	47                   	inc    edi
c002306b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002306e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023072:	eb d3                	jmp    c0023047 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0023074:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023079:	0f 85 e8 fe ff ff    	jne    c0022f67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002307f:	80 f9 44             	cmp    cl,0x44
c0023082:	74 0b                	je     c002308f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0023084:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023089:	0f 85 d8 fe ff ff    	jne    c0022f67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002308f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023093:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0023097:	c1 e1 04             	shl    ecx,0x4
c002309a:	83 e8 30             	sub    eax,0x30
c002309d:	09 c8                	or     eax,ecx
c002309f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00230a3:	0f 85 be fe ff ff    	jne    c0022f67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230a9:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00230ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230b1:	c1 e1 04             	shl    ecx,0x4
c00230b4:	83 e8 30             	sub    eax,0x30
c00230b7:	09 c8                	or     eax,ecx
c00230b9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00230bd:	0f 85 a4 fe ff ff    	jne    c0022f67 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00230c3:	50                   	push   eax
c00230c4:	50                   	push   eax
c00230c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00230c9:	50                   	push   eax
c00230ca:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00230d1:	e8 36 d7 fd ff       	call   c000080c <strcpy>
c00230d6:	83 c4 10             	add    esp,0x10
c00230d9:	eb 15                	jmp    c00230f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00230db:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230e2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00230ed:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00230f0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00230f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00230fd:	5b                   	pop    ebx
c00230fe:	5e                   	pop    esi
c00230ff:	5f                   	pop    edi
c0023100:	5d                   	pop    ebp
c0023101:	c3                   	ret    

c0023102 <PCI::checkBus(unsigned char)>:
c0023102:	56                   	push   esi
c0023103:	53                   	push   ebx
c0023104:	31 db                	xor    ebx,ebx
c0023106:	51                   	push   ecx
c0023107:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002310c:	52                   	push   edx
c002310d:	53                   	push   ebx
c002310e:	43                   	inc    ebx
c002310f:	56                   	push   esi
c0023110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023114:	e8 37 03 00 00       	call   c0023450 <PCI::checkDevice(unsigned char, unsigned char)>
c0023119:	83 c4 10             	add    esp,0x10
c002311c:	83 fb 20             	cmp    ebx,0x20
c002311f:	75 eb                	jne    c002310c <PCI::checkBus(unsigned char)+0xa>
c0023121:	58                   	pop    eax
c0023122:	5b                   	pop    ebx
c0023123:	5e                   	pop    esi
c0023124:	c3                   	ret    
c0023125:	90                   	nop

c0023126 <PCI::foundDevice(PCIDeviceInfo)>:
c0023126:	55                   	push   ebp
c0023127:	57                   	push   edi
c0023128:	56                   	push   esi
c0023129:	53                   	push   ebx
c002312a:	83 ec 1c             	sub    esp,0x1c
c002312d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023131:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023137:	0f 84 52 01 00 00    	je     c002328f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002313d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023141:	66 81 f9 06 04       	cmp    cx,0x406
c0023146:	75 2c                	jne    c0023174 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023148:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002314d:	50                   	push   eax
c002314e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023153:	50                   	push   eax
c0023154:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023159:	50                   	push   eax
c002315a:	56                   	push   esi
c002315b:	e8 b4 fb ff ff       	call   c0022d14 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023160:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023164:	0f b6 c0             	movzx  eax,al
c0023167:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002316b:	83 c4 2c             	add    esp,0x2c
c002316e:	5b                   	pop    ebx
c002316f:	5e                   	pop    esi
c0023170:	5f                   	pop    edi
c0023171:	5d                   	pop    ebp
c0023172:	eb 8e                	jmp    c0023102 <PCI::checkBus(unsigned char)>
c0023174:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023178:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002317e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023182:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023186:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002318a:	88 d3                	mov    bl,dl
c002318c:	85 c0                	test   eax,eax
c002318e:	74 33                	je     c00231c3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023193:	85 d2                	test   edx,edx
c0023195:	74 28                	je     c00231bf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023197:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002319d:	31 ef                	xor    edi,ebp
c002319f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00231a5:	75 18                	jne    c00231bf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231a7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00231ab:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00231b1:	75 0c                	jne    c00231bf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00231b3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00231b9:	0f 84 d0 00 00 00    	je     c002328f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00231bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00231c1:	eb c9                	jmp    c002318c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00231c3:	66 81 f9 01 06       	cmp    cx,0x601
c00231c8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00231cc:	75 19                	jne    c00231e7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00231ce:	83 ec 0c             	sub    esp,0xc
c00231d1:	68 64 01 00 00       	push   0x164
c00231d6:	e8 d8 c7 fe ff       	call   c000f9b3 <malloc>
c00231db:	89 c5                	mov    ebp,eax
c00231dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00231e0:	e8 85 0e 00 00       	call   c002406a <SATABus::SATABus()>
c00231e5:	eb 1e                	jmp    c0023205 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00231e7:	66 81 f9 01 01       	cmp    cx,0x101
c00231ec:	75 60                	jne    c002324e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00231ee:	83 ec 0c             	sub    esp,0xc
c00231f1:	68 70 02 00 00       	push   0x270
c00231f6:	e8 b8 c7 fe ff       	call   c000f9b3 <malloc>
c00231fb:	89 c5                	mov    ebp,eax
c00231fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0023200:	e8 0f 03 00 00       	call   c0023514 <IDE::IDE()>
c0023205:	58                   	pop    eax
c0023206:	5a                   	pop    edx
c0023207:	55                   	push   ebp
c0023208:	56                   	push   esi
c0023209:	e8 36 0c ff ff       	call   c0013e44 <Device::addChild(Device*)>
c002320e:	83 ec 1c             	sub    esp,0x1c
c0023211:	b9 09 00 00 00       	mov    ecx,0x9
c0023216:	fc                   	cld    
c0023217:	89 e7                	mov    edi,esp
c0023219:	89 de                	mov    esi,ebx
c002321b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002321d:	55                   	push   ebp
c002321e:	e8 33 0b ff ff       	call   c0013d56 <Device::preOpenPCI(PCIDeviceInfo)>
c0023223:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023226:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002322a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023232:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002323a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023245:	83 c4 4c             	add    esp,0x4c
c0023248:	5b                   	pop    ebx
c0023249:	5e                   	pop    esi
c002324a:	5f                   	pop    edi
c002324b:	5d                   	pop    ebp
c002324c:	ff e0                	jmp    eax
c002324e:	83 ec 0c             	sub    esp,0xc
c0023251:	68 58 01 00 00       	push   0x158
c0023256:	e8 58 c7 fe ff       	call   c000f9b3 <malloc>
c002325b:	89 c5                	mov    ebp,eax
c002325d:	58                   	pop    eax
c002325e:	5a                   	pop    edx
c002325f:	68 df cc 02 c0       	push   0xc002ccdf
c0023264:	55                   	push   ebp
c0023265:	e8 e4 0e ff ff       	call   c001414e <DriverlessDevice::DriverlessDevice(char const*)>
c002326a:	59                   	pop    ecx
c002326b:	5f                   	pop    edi
c002326c:	55                   	push   ebp
c002326d:	56                   	push   esi
c002326e:	e8 d1 0b ff ff       	call   c0013e44 <Device::addChild(Device*)>
c0023273:	b9 09 00 00 00       	mov    ecx,0x9
c0023278:	fc                   	cld    
c0023279:	89 df                	mov    edi,ebx
c002327b:	89 de                	mov    esi,ebx
c002327d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002327f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023283:	83 c4 2c             	add    esp,0x2c
c0023286:	5b                   	pop    ebx
c0023287:	5e                   	pop    esi
c0023288:	5f                   	pop    edi
c0023289:	5d                   	pop    ebp
c002328a:	e9 c7 0a ff ff       	jmp    c0013d56 <Device::preOpenPCI(PCIDeviceInfo)>
c002328f:	83 c4 1c             	add    esp,0x1c
c0023292:	5b                   	pop    ebx
c0023293:	5e                   	pop    esi
c0023294:	5f                   	pop    edi
c0023295:	5d                   	pop    ebp
c0023296:	c3                   	ret    
c0023297:	90                   	nop

c0023298 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023298:	55                   	push   ebp
c0023299:	57                   	push   edi
c002329a:	56                   	push   esi
c002329b:	53                   	push   ebx
c002329c:	83 ec 68             	sub    esp,0x68
c002329f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00232a3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00232aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232ae:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00232b5:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00232ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00232be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00232c5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00232ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00232ce:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00232d3:	6a 0c                	push   0xc
c00232d5:	57                   	push   edi
c00232d6:	53                   	push   ebx
c00232d7:	56                   	push   esi
c00232d8:	55                   	push   ebp
c00232d9:	e8 88 f8 ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232de:	83 c4 20             	add    esp,0x20
c00232e1:	57                   	push   edi
c00232e2:	53                   	push   ebx
c00232e3:	56                   	push   esi
c00232e4:	55                   	push   ebp
c00232e5:	e8 70 f9 ff ff       	call   c0022c5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00232ea:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00232ef:	57                   	push   edi
c00232f0:	53                   	push   ebx
c00232f1:	56                   	push   esi
c00232f2:	55                   	push   ebp
c00232f3:	e8 f8 f9 ff ff       	call   c0022cf0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00232f8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00232fc:	83 c4 14             	add    esp,0x14
c00232ff:	6a 3c                	push   0x3c
c0023301:	57                   	push   edi
c0023302:	53                   	push   ebx
c0023303:	56                   	push   esi
c0023304:	55                   	push   ebp
c0023305:	e8 5c f8 ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002330a:	0f b6 c4             	movzx  eax,ah
c002330d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023311:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023315:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023319:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c002331e:	83 c4 20             	add    esp,0x20
c0023321:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023327:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002332e:	74 7c                	je     c00233ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023330:	31 c0                	xor    eax,eax
c0023332:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0023338:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002333e:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023344:	7e 66                	jle    c00233ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023346:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023349:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023350:	39 cb                	cmp    ebx,ecx
c0023352:	75 55                	jne    c00233a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023354:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002335b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002335f:	75 48                	jne    c00233a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023361:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023365:	83 ec 0c             	sub    esp,0xc
c0023368:	68 f9 cc 02 c0       	push   0xc002ccf9
c002336d:	e8 99 f6 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0023372:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023376:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c002337c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023380:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023386:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c002338e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023392:	52                   	push   edx
c0023393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023397:	53                   	push   ebx
c0023398:	68 1e cd 02 c0       	push   0xc002cd1e
c002339d:	e8 69 f6 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00233a2:	83 c4 20             	add    esp,0x20
c00233a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233a9:	40                   	inc    eax
c00233aa:	eb 86                	jmp    c0023332 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00233ac:	31 d2                	xor    edx,edx
c00233ae:	83 ec 0c             	sub    esp,0xc
c00233b1:	57                   	push   edi
c00233b2:	53                   	push   ebx
c00233b3:	56                   	push   esi
c00233b4:	52                   	push   edx
c00233b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00233b9:	55                   	push   ebp
c00233ba:	e8 7d f9 ff ff       	call   c0022d3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00233c3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00233c7:	42                   	inc    edx
c00233c8:	83 c4 20             	add    esp,0x20
c00233cb:	83 fa 06             	cmp    edx,0x6
c00233ce:	75 de                	jne    c00233ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00233d0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00233d5:	83 ec 0c             	sub    esp,0xc
c00233d8:	86 e0                	xchg   al,ah
c00233da:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00233df:	6a 02                	push   0x2
c00233e1:	57                   	push   edi
c00233e2:	53                   	push   ebx
c00233e3:	56                   	push   esi
c00233e4:	55                   	push   ebp
c00233e5:	e8 7c f7 ff ff       	call   c0022b66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233ea:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00233ef:	83 c4 20             	add    esp,0x20
c00233f2:	57                   	push   edi
c00233f3:	53                   	push   ebx
c00233f4:	56                   	push   esi
c00233f5:	55                   	push   ebp
c00233f6:	e8 a9 f8 ff ff       	call   c0022ca4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00233fb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00233ff:	57                   	push   edi
c0023400:	53                   	push   ebx
c0023401:	56                   	push   esi
c0023402:	55                   	push   ebp
c0023403:	e8 06 f8 ff ff       	call   c0022c0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023408:	b9 09 00 00 00       	mov    ecx,0x9
c002340d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023412:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023416:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002341a:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c002341e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023422:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023426:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002342a:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002342e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023432:	83 ec 0c             	sub    esp,0xc
c0023435:	fc                   	cld    
c0023436:	89 e7                	mov    edi,esp
c0023438:	8d 74 24 58          	lea    esi,[esp+0x58]
c002343c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002343e:	55                   	push   ebp
c002343f:	e8 e2 fc ff ff       	call   c0023126 <PCI::foundDevice(PCIDeviceInfo)>
c0023444:	81 c4 8c 00 00 00    	add    esp,0x8c
c002344a:	5b                   	pop    ebx
c002344b:	5e                   	pop    esi
c002344c:	5f                   	pop    edi
c002344d:	5d                   	pop    ebp
c002344e:	c3                   	ret    
c002344f:	90                   	nop

c0023450 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023450:	55                   	push   ebp
c0023451:	57                   	push   edi
c0023452:	56                   	push   esi
c0023453:	53                   	push   ebx
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002345b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023460:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023465:	6a 00                	push   0x0
c0023467:	56                   	push   esi
c0023468:	57                   	push   edi
c0023469:	55                   	push   ebp
c002346a:	e8 9f f7 ff ff       	call   c0022c0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002346f:	6a 00                	push   0x0
c0023471:	56                   	push   esi
c0023472:	57                   	push   edi
c0023473:	55                   	push   ebp
c0023474:	e8 1f fe ff ff       	call   c0023298 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023479:	83 c4 20             	add    esp,0x20
c002347c:	6a 00                	push   0x0
c002347e:	56                   	push   esi
c002347f:	57                   	push   edi
c0023480:	55                   	push   ebp
c0023481:	e8 ac f7 ff ff       	call   c0022c32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023486:	83 c4 10             	add    esp,0x10
c0023489:	84 c0                	test   al,al
c002348b:	79 27                	jns    c00234b4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002348d:	bb 01 00 00 00       	mov    ebx,0x1
c0023492:	53                   	push   ebx
c0023493:	56                   	push   esi
c0023494:	57                   	push   edi
c0023495:	55                   	push   ebp
c0023496:	e8 73 f7 ff ff       	call   c0022c0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002349b:	83 c4 10             	add    esp,0x10
c002349e:	66 40                	inc    ax
c00234a0:	74 0c                	je     c00234ae <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00234a2:	53                   	push   ebx
c00234a3:	56                   	push   esi
c00234a4:	57                   	push   edi
c00234a5:	55                   	push   ebp
c00234a6:	e8 ed fd ff ff       	call   c0023298 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00234ab:	83 c4 10             	add    esp,0x10
c00234ae:	43                   	inc    ebx
c00234af:	83 fb 08             	cmp    ebx,0x8
c00234b2:	75 de                	jne    c0023492 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00234b4:	83 c4 0c             	add    esp,0xc
c00234b7:	5b                   	pop    ebx
c00234b8:	5e                   	pop    esi
c00234b9:	5f                   	pop    edi
c00234ba:	5d                   	pop    ebp
c00234bb:	c3                   	ret    

c00234bc <PCI::detect()>:
c00234bc:	56                   	push   esi
c00234bd:	53                   	push   ebx
c00234be:	53                   	push   ebx
c00234bf:	31 db                	xor    ebx,ebx
c00234c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234c5:	6a 00                	push   0x0
c00234c7:	6a 00                	push   0x0
c00234c9:	6a 00                	push   0x0
c00234cb:	56                   	push   esi
c00234cc:	e8 61 f7 ff ff       	call   c0022c32 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00234d1:	83 c4 10             	add    esp,0x10
c00234d4:	a8 80                	test   al,0x80
c00234d6:	75 21                	jne    c00234f9 <PCI::detect()+0x3d>
c00234d8:	51                   	push   ecx
c00234d9:	51                   	push   ecx
c00234da:	6a 00                	push   0x0
c00234dc:	56                   	push   esi
c00234dd:	e8 20 fc ff ff       	call   c0023102 <PCI::checkBus(unsigned char)>
c00234e2:	83 c4 10             	add    esp,0x10
c00234e5:	eb 24                	jmp    c002350b <PCI::detect()+0x4f>
c00234e7:	52                   	push   edx
c00234e8:	52                   	push   edx
c00234e9:	53                   	push   ebx
c00234ea:	43                   	inc    ebx
c00234eb:	56                   	push   esi
c00234ec:	e8 11 fc ff ff       	call   c0023102 <PCI::checkBus(unsigned char)>
c00234f1:	83 c4 10             	add    esp,0x10
c00234f4:	83 fb 08             	cmp    ebx,0x8
c00234f7:	74 12                	je     c002350b <PCI::detect()+0x4f>
c00234f9:	53                   	push   ebx
c00234fa:	6a 00                	push   0x0
c00234fc:	6a 00                	push   0x0
c00234fe:	56                   	push   esi
c00234ff:	e8 0a f7 ff ff       	call   c0022c0e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023504:	83 c4 10             	add    esp,0x10
c0023507:	66 40                	inc    ax
c0023509:	74 dc                	je     c00234e7 <PCI::detect()+0x2b>
c002350b:	58                   	pop    eax
c002350c:	5b                   	pop    ebx
c002350d:	5e                   	pop    esi
c002350e:	c3                   	ret    
c002350f:	90                   	nop

c0023510 <IDE::close(int, int, void*)>:
c0023510:	83 c8 ff             	or     eax,0xffffffff
c0023513:	c3                   	ret    

c0023514 <IDE::IDE()>:
c0023514:	83 ec 0c             	sub    esp,0xc
c0023517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351b:	83 ec 08             	sub    esp,0x8
c002351e:	68 68 cd 02 c0       	push   0xc002cd68
c0023523:	50                   	push   eax
c0023524:	e8 c9 0c ff ff       	call   c00141f2 <HardDiskController::HardDiskController(char const*)>
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c0023531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023535:	89 10                	mov    DWORD PTR [eax],edx
c0023537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023542:	90                   	nop
c0023543:	83 c4 0c             	add    esp,0xc
c0023546:	c3                   	ret    
c0023547:	90                   	nop

c0023548 <IDE::prepareInterrupt(unsigned char)>:
c0023548:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002354d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023551:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023559:	c3                   	ret    

c002355a <selectDrive(unsigned char, unsigned char)>:
c002355a:	c3                   	ret    
c002355b:	90                   	nop

c002355c <IDE::getBase(unsigned char)>:
c002355c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023565:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002356d:	c3                   	ret    

c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002356e:	55                   	push   ebp
c002356f:	57                   	push   edi
c0023570:	56                   	push   esi
c0023571:	53                   	push   ebx
c0023572:	83 ec 1c             	sub    esp,0x1c
c0023575:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023579:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002357d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023580:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023584:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023588:	80 f9 03             	cmp    cl,0x3
c002358b:	77 51                	ja     c00235de <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002358d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023591:	0f b6 f2             	movzx  esi,dl
c0023594:	0f b6 db             	movzx  ebx,bl
c0023597:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002359a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002359e:	83 ca 80             	or     edx,0xffffff80
c00235a1:	0f b6 d2             	movzx  edx,dl
c00235a4:	52                   	push   edx
c00235a5:	6a 0c                	push   0xc
c00235a7:	56                   	push   esi
c00235a8:	57                   	push   edi
c00235a9:	e8 c0 ff ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ae:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00235b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00235b7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00235bb:	ee                   	out    dx,al
c00235bc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00235c1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00235c5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00235c9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235cd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235d5:	83 c4 2c             	add    esp,0x2c
c00235d8:	5b                   	pop    ebx
c00235d9:	5e                   	pop    esi
c00235da:	5f                   	pop    edi
c00235db:	5d                   	pop    ebp
c00235dc:	eb 90                	jmp    c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235de:	80 fb 07             	cmp    bl,0x7
c00235e1:	77 12                	ja     c00235f5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00235e3:	0f b6 d2             	movzx  edx,dl
c00235e6:	0f b6 db             	movzx  ebx,bl
c00235e9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00235f1:	89 da                	mov    edx,ebx
c00235f3:	eb 2f                	jmp    c0023624 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00235f5:	80 fb 0d             	cmp    bl,0xd
c00235f8:	77 13                	ja     c002360d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00235fa:	0f b6 d2             	movzx  edx,dl
c00235fd:	0f b6 db             	movzx  ebx,bl
c0023600:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023607:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002360b:	eb 17                	jmp    c0023624 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002360d:	80 fb 15             	cmp    bl,0x15
c0023610:	77 13                	ja     c0023625 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023612:	0f b6 d2             	movzx  edx,dl
c0023615:	0f b6 db             	movzx  ebx,bl
c0023618:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023620:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023624:	ee                   	out    dx,al
c0023625:	83 c4 1c             	add    esp,0x1c
c0023628:	5b                   	pop    ebx
c0023629:	5e                   	pop    esi
c002362a:	5f                   	pop    edi
c002362b:	5d                   	pop    ebp
c002362c:	c3                   	ret    
c002362d:	90                   	nop

c002362e <IDE::read(unsigned char, unsigned char)>:
c002362e:	55                   	push   ebp
c002362f:	57                   	push   edi
c0023630:	56                   	push   esi
c0023631:	53                   	push   ebx
c0023632:	83 ec 1c             	sub    esp,0x1c
c0023635:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023639:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002363d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023640:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023644:	3c 03                	cmp    al,0x3
c0023646:	77 43                	ja     c002368b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023648:	0f b6 f2             	movzx  esi,dl
c002364b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002364e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023652:	83 c8 80             	or     eax,0xffffff80
c0023655:	0f b6 c0             	movzx  eax,al
c0023658:	50                   	push   eax
c0023659:	6a 0c                	push   0xc
c002365b:	56                   	push   esi
c002365c:	57                   	push   edi
c002365d:	e8 0c ff ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023662:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023667:	0f b6 c3             	movzx  eax,bl
c002366a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002366e:	ec                   	in     al,dx
c002366f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023673:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023678:	52                   	push   edx
c0023679:	6a 0c                	push   0xc
c002367b:	56                   	push   esi
c002367c:	57                   	push   edi
c002367d:	e8 ec fe ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023682:	83 c4 20             	add    esp,0x20
c0023685:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023689:	eb 49                	jmp    c00236d4 <IDE::read(unsigned char, unsigned char)+0xa6>
c002368b:	80 fb 07             	cmp    bl,0x7
c002368e:	77 12                	ja     c00236a2 <IDE::read(unsigned char, unsigned char)+0x74>
c0023690:	0f b6 d2             	movzx  edx,dl
c0023693:	0f b6 c3             	movzx  eax,bl
c0023696:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002369e:	89 c2                	mov    edx,eax
c00236a0:	eb 31                	jmp    c00236d3 <IDE::read(unsigned char, unsigned char)+0xa5>
c00236a2:	80 fb 0d             	cmp    bl,0xd
c00236a5:	77 13                	ja     c00236ba <IDE::read(unsigned char, unsigned char)+0x8c>
c00236a7:	0f b6 d2             	movzx  edx,dl
c00236aa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00236b1:	0f b6 d3             	movzx  edx,bl
c00236b4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00236b8:	eb 19                	jmp    c00236d3 <IDE::read(unsigned char, unsigned char)+0xa5>
c00236ba:	31 c0                	xor    eax,eax
c00236bc:	80 fb 15             	cmp    bl,0x15
c00236bf:	77 13                	ja     c00236d4 <IDE::read(unsigned char, unsigned char)+0xa6>
c00236c1:	0f b6 d2             	movzx  edx,dl
c00236c4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00236cc:	0f b6 d3             	movzx  edx,bl
c00236cf:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00236d3:	ec                   	in     al,dx
c00236d4:	83 c4 1c             	add    esp,0x1c
c00236d7:	5b                   	pop    ebx
c00236d8:	5e                   	pop    esi
c00236d9:	5f                   	pop    edi
c00236da:	5d                   	pop    ebp
c00236db:	c3                   	ret    

c00236dc <IDE::waitInterrupt(unsigned char)>:
c00236dc:	55                   	push   ebp
c00236dd:	57                   	push   edi
c00236de:	56                   	push   esi
c00236df:	53                   	push   ebx
c00236e0:	31 db                	xor    ebx,ebx
c00236e2:	83 ec 0c             	sub    esp,0xc
c00236e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00236e9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00236ee:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00236f6:	89 e8                	mov    eax,ebp
c00236f8:	84 c0                	test   al,al
c00236fa:	75 34                	jne    c0023730 <IDE::waitInterrupt(unsigned char)+0x54>
c00236fc:	52                   	push   edx
c00236fd:	6a 0c                	push   0xc
c00236ff:	56                   	push   esi
c0023700:	57                   	push   edi
c0023701:	e8 28 ff ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023706:	83 c4 10             	add    esp,0x10
c0023709:	a8 01                	test   al,0x1
c002370b:	75 2b                	jne    c0023738 <IDE::waitInterrupt(unsigned char)+0x5c>
c002370d:	f6 c3 04             	test   bl,0x4
c0023710:	75 16                	jne    c0023728 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023712:	83 fb 32             	cmp    ebx,0x32
c0023715:	7e 11                	jle    c0023728 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023717:	50                   	push   eax
c0023718:	50                   	push   eax
c0023719:	6a 00                	push   0x0
c002371b:	68 80 96 98 00       	push   0x989680
c0023720:	e8 f0 aa ff ff       	call   c001e215 <nanoSleep(unsigned long long)>
c0023725:	83 c4 10             	add    esp,0x10
c0023728:	83 fb 3c             	cmp    ebx,0x3c
c002372b:	74 0b                	je     c0023738 <IDE::waitInterrupt(unsigned char)+0x5c>
c002372d:	43                   	inc    ebx
c002372e:	eb be                	jmp    c00236ee <IDE::waitInterrupt(unsigned char)+0x12>
c0023730:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023738:	83 c4 0c             	add    esp,0xc
c002373b:	89 e8                	mov    eax,ebp
c002373d:	5b                   	pop    ebx
c002373e:	5e                   	pop    esi
c002373f:	5f                   	pop    edi
c0023740:	5d                   	pop    ebp
c0023741:	c3                   	ret    

c0023742 <ideChannel0IRQHandler(regs*, void*)>:
c0023742:	83 ec 10             	sub    esp,0x10
c0023745:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023749:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023750:	6a 07                	push   0x7
c0023752:	6a 00                	push   0x0
c0023754:	50                   	push   eax
c0023755:	e8 d4 fe ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c002375a:	83 c4 1c             	add    esp,0x1c
c002375d:	c3                   	ret    

c002375e <ideChannel1IRQHandler(regs*, void*)>:
c002375e:	83 ec 10             	sub    esp,0x10
c0023761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023765:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002376c:	6a 07                	push   0x7
c002376e:	6a 01                	push   0x1
c0023770:	50                   	push   eax
c0023771:	e8 b8 fe ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023776:	83 c4 1c             	add    esp,0x1c
c0023779:	c3                   	ret    

c002377a <IDE::enableIRQs(unsigned char, bool)>:
c002377a:	57                   	push   edi
c002377b:	56                   	push   esi
c002377c:	be 04 00 00 00       	mov    esi,0x4
c0023781:	53                   	push   ebx
c0023782:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023787:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002378b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023790:	0f 94 c0             	sete   al
c0023793:	d1 e0                	shl    eax,1
c0023795:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002379c:	0f b6 c0             	movzx  eax,al
c002379f:	50                   	push   eax
c00237a0:	6a 0c                	push   0xc
c00237a2:	57                   	push   edi
c00237a3:	53                   	push   ebx
c00237a4:	e8 c5 fd ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237a9:	83 c4 10             	add    esp,0x10
c00237ac:	50                   	push   eax
c00237ad:	6a 0c                	push   0xc
c00237af:	57                   	push   edi
c00237b0:	53                   	push   ebx
c00237b1:	e8 78 fe ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c00237b6:	83 c4 10             	add    esp,0x10
c00237b9:	4e                   	dec    esi
c00237ba:	75 f0                	jne    c00237ac <IDE::enableIRQs(unsigned char, bool)+0x32>
c00237bc:	5b                   	pop    ebx
c00237bd:	5e                   	pop    esi
c00237be:	5f                   	pop    edi
c00237bf:	c3                   	ret    

c00237c0 <IDE::open(int, int, void*)>:
c00237c0:	55                   	push   ebp
c00237c1:	57                   	push   edi
c00237c2:	56                   	push   esi
c00237c3:	53                   	push   ebx
c00237c4:	83 ec 1c             	sub    esp,0x1c
c00237c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00237cb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00237d4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00237dd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00237e4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00237eb:	0f 85 b0 02 00 00    	jne    c0023aa1 <IDE::open(int, int, void*)+0x2e1>
c00237f1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00237f7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00237fb:	83 e0 7f             	and    eax,0x7f
c00237fe:	3c 05                	cmp    al,0x5
c0023800:	74 04                	je     c0023806 <IDE::open(int, int, void*)+0x46>
c0023802:	3c 0f                	cmp    al,0xf
c0023804:	75 32                	jne    c0023838 <IDE::open(int, int, void*)+0x78>
c0023806:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002380c:	83 e0 fc             	and    eax,0xfffffffc
c002380f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023816:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002381c:	83 e0 fc             	and    eax,0xfffffffc
c002381f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023826:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002382c:	83 e0 fc             	and    eax,0xfffffffc
c002382f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023836:	eb 14                	jmp    c002384c <IDE::open(int, int, void*)+0x8c>
c0023838:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023842:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002384c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023853:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002385a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002385e:	89 c6                	mov    esi,eax
c0023860:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023865:	c1 e6 10             	shl    esi,0x10
c0023868:	89 e8                	mov    eax,ebp
c002386a:	89 fa                	mov    edx,edi
c002386c:	c1 e0 0b             	shl    eax,0xb
c002386f:	09 f0                	or     eax,esi
c0023871:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023878:	c1 e6 08             	shl    esi,0x8
c002387b:	09 c6                	or     esi,eax
c002387d:	89 f0                	mov    eax,esi
c002387f:	0d 08 00 00 80       	or     eax,0x80000008
c0023884:	ef                   	out    dx,eax
c0023885:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002388a:	89 ca                	mov    edx,ecx
c002388c:	ed                   	in     eax,dx
c002388d:	c1 e8 10             	shr    eax,0x10
c0023890:	3d ff ff 00 00       	cmp    eax,0xffff
c0023895:	0f 84 f5 00 00 00    	je     c0023990 <IDE::open(int, int, void*)+0x1d0>
c002389b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00238a1:	89 fa                	mov    edx,edi
c00238a3:	89 f0                	mov    eax,esi
c00238a5:	ef                   	out    dx,eax
c00238a6:	b0 fe                	mov    al,0xfe
c00238a8:	89 ca                	mov    edx,ecx
c00238aa:	ee                   	out    dx,al
c00238ab:	89 f0                	mov    eax,esi
c00238ad:	89 fa                	mov    edx,edi
c00238af:	ef                   	out    dx,eax
c00238b0:	89 ca                	mov    edx,ecx
c00238b2:	ed                   	in     eax,dx
c00238b3:	3c fe                	cmp    al,0xfe
c00238b5:	0f 85 a9 00 00 00    	jne    c0023964 <IDE::open(int, int, void*)+0x1a4>
c00238bb:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00238c1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00238c8:	74 33                	je     c00238fd <IDE::open(int, int, void*)+0x13d>
c00238ca:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00238d0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00238d4:	40                   	inc    eax
c00238d5:	83 ec 0c             	sub    esp,0xc
c00238d8:	0f b6 c0             	movzx  eax,al
c00238db:	50                   	push   eax
c00238dc:	55                   	push   ebp
c00238dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00238e1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00238e7:	51                   	push   ecx
c00238e8:	e8 e5 46 ff ff       	call   c0017fd2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00238ed:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00238f2:	83 c4 1c             	add    esp,0x1c
c00238f5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00238fb:	eb 0a                	jmp    c0023907 <IDE::open(int, int, void*)+0x147>
c00238fd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023907:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002390e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023915:	c1 e1 10             	shl    ecx,0x10
c0023918:	c1 e0 08             	shl    eax,0x8
c002391b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023920:	09 c1                	or     ecx,eax
c0023922:	89 fa                	mov    edx,edi
c0023924:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002392b:	c1 e0 0b             	shl    eax,0xb
c002392e:	09 c1                	or     ecx,eax
c0023930:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023936:	89 c8                	mov    eax,ecx
c0023938:	ef                   	out    dx,eax
c0023939:	be fc 0c 00 00       	mov    esi,0xcfc
c002393e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023944:	89 f2                	mov    edx,esi
c0023946:	ee                   	out    dx,al
c0023947:	89 c8                	mov    eax,ecx
c0023949:	89 fa                	mov    edx,edi
c002394b:	ef                   	out    dx,eax
c002394c:	89 f2                	mov    edx,esi
c002394e:	ed                   	in     eax,dx
c002394f:	0f b6 c0             	movzx  eax,al
c0023952:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023958:	74 46                	je     c00239a0 <IDE::open(int, int, void*)+0x1e0>
c002395a:	83 ec 0c             	sub    esp,0xc
c002395d:	68 80 cd 02 c0       	push   0xc002cd80
c0023962:	eb 34                	jmp    c0023998 <IDE::open(int, int, void*)+0x1d8>
c0023964:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002396d:	75 17                	jne    c0023986 <IDE::open(int, int, void*)+0x1c6>
c002396f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023974:	74 07                	je     c002397d <IDE::open(int, int, void*)+0x1bd>
c0023976:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002397b:	75 09                	jne    c0023986 <IDE::open(int, int, void*)+0x1c6>
c002397d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023984:	eb 1a                	jmp    c00239a0 <IDE::open(int, int, void*)+0x1e0>
c0023986:	83 ec 0c             	sub    esp,0xc
c0023989:	68 88 cd 02 c0       	push   0xc002cd88
c002398e:	eb 08                	jmp    c0023998 <IDE::open(int, int, void*)+0x1d8>
c0023990:	83 ec 0c             	sub    esp,0xc
c0023993:	68 b9 cd 02 c0       	push   0xc002cdb9
c0023998:	e8 0c 6a ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c002399d:	83 c4 10             	add    esp,0x10
c00239a0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00239a7:	79 1a                	jns    c00239c3 <IDE::open(int, int, void*)+0x203>
c00239a9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00239af:	83 e0 fc             	and    eax,0xfffffffc
c00239b2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00239b9:	83 c0 08             	add    eax,0x8
c00239bc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00239c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00239c9:	89 c2                	mov    edx,eax
c00239cb:	83 e2 0f             	and    edx,0xf
c00239ce:	66 83 fa 08          	cmp    dx,0x8
c00239d2:	75 0a                	jne    c00239de <IDE::open(int, int, void*)+0x21e>
c00239d4:	83 e8 02             	sub    eax,0x2
c00239d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00239de:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00239e4:	89 c2                	mov    edx,eax
c00239e6:	83 e2 0f             	and    edx,0xf
c00239e9:	66 83 fa 08          	cmp    dx,0x8
c00239ed:	75 0a                	jne    c00239f9 <IDE::open(int, int, void*)+0x239>
c00239ef:	83 e8 02             	sub    eax,0x2
c00239f2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00239f9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023a00:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023a07:	89 d0                	mov    eax,edx
c0023a09:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a0c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a10:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023a14:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023a17:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a1c:	0f b6 c9             	movzx  ecx,cl
c0023a1f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023a26:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a29:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a2d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023a31:	8d 50 02             	lea    edx,[eax+0x2]
c0023a34:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a39:	0f b6 d2             	movzx  edx,dl
c0023a3c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023a42:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a45:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a49:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023a4d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023a50:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a55:	0f b6 c9             	movzx  ecx,cl
c0023a58:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023a5e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023a61:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023a65:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023a69:	8d 50 04             	lea    edx,[eax+0x4]
c0023a6c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023a72:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023a77:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023a7e:	66 85 f6             	test   si,si
c0023a81:	74 5b                	je     c0023ade <IDE::open(int, int, void*)+0x31e>
c0023a83:	0f b6 d2             	movzx  edx,dl
c0023a86:	83 c0 05             	add    eax,0x5
c0023a89:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023a8c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023a90:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023a94:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023a9a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023a9f:	eb 3d                	jmp    c0023ade <IDE::open(int, int, void*)+0x31e>
c0023aa1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023aa7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023aae:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023ab5:	66 05 06 02          	add    ax,0x206
c0023ab9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ac0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023ac7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ace:	66 05 06 02          	add    ax,0x206
c0023ad2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023ad9:	e9 e5 fe ff ff       	jmp    c00239c3 <IDE::open(int, int, void*)+0x203>
c0023ade:	50                   	push   eax
c0023adf:	50                   	push   eax
c0023ae0:	6a 00                	push   0x0
c0023ae2:	53                   	push   ebx
c0023ae3:	e8 60 fa ff ff       	call   c0023548 <IDE::prepareInterrupt(unsigned char)>
c0023ae8:	5a                   	pop    edx
c0023ae9:	59                   	pop    ecx
c0023aea:	6a 01                	push   0x1
c0023aec:	53                   	push   ebx
c0023aed:	e8 56 fa ff ff       	call   c0023548 <IDE::prepareInterrupt(unsigned char)>
c0023af2:	83 c4 0c             	add    esp,0xc
c0023af5:	6a 00                	push   0x0
c0023af7:	6a 00                	push   0x0
c0023af9:	53                   	push   ebx
c0023afa:	e8 7b fc ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c0023aff:	83 c4 0c             	add    esp,0xc
c0023b02:	6a 00                	push   0x0
c0023b04:	6a 01                	push   0x1
c0023b06:	53                   	push   ebx
c0023b07:	e8 6e fc ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c0023b0c:	83 c4 10             	add    esp,0x10
c0023b0f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023b16:	74 34                	je     c0023b4c <IDE::open(int, int, void*)+0x38c>
c0023b18:	83 ec 0c             	sub    esp,0xc
c0023b1b:	53                   	push   ebx
c0023b1c:	6a 01                	push   0x1
c0023b1e:	68 42 37 02 c0       	push   0xc0023742
c0023b23:	6a 0e                	push   0xe
c0023b25:	53                   	push   ebx
c0023b26:	e8 91 02 ff ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b2b:	83 c4 14             	add    esp,0x14
c0023b2e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b34:	53                   	push   ebx
c0023b35:	6a 01                	push   0x1
c0023b37:	68 5e 37 02 c0       	push   0xc002375e
c0023b3c:	6a 0f                	push   0xf
c0023b3e:	53                   	push   ebx
c0023b3f:	e8 78 02 ff ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b44:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023b4a:	eb 38                	jmp    c0023b84 <IDE::open(int, int, void*)+0x3c4>
c0023b4c:	83 ec 0c             	sub    esp,0xc
c0023b4f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023b59:	53                   	push   ebx
c0023b5a:	6a 00                	push   0x0
c0023b5c:	68 42 37 02 c0       	push   0xc0023742
c0023b61:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023b67:	53                   	push   ebx
c0023b68:	e8 4f 02 ff ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b6d:	83 c4 14             	add    esp,0x14
c0023b70:	53                   	push   ebx
c0023b71:	6a 00                	push   0x0
c0023b73:	68 5e 37 02 c0       	push   0xc002375e
c0023b78:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023b7e:	53                   	push   ebx
c0023b7f:	e8 38 02 ff ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023b84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b86:	83 c4 20             	add    esp,0x20
c0023b89:	83 ec 0c             	sub    esp,0xc
c0023b8c:	53                   	push   ebx
c0023b8d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023b90:	83 c4 0c             	add    esp,0xc
c0023b93:	6a 07                	push   0x7
c0023b95:	6a 00                	push   0x0
c0023b97:	53                   	push   ebx
c0023b98:	e8 91 fa ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023b9d:	83 c4 0c             	add    esp,0xc
c0023ba0:	6a 07                	push   0x7
c0023ba2:	6a 01                	push   0x1
c0023ba4:	53                   	push   ebx
c0023ba5:	e8 84 fa ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023baa:	83 c4 0c             	add    esp,0xc
c0023bad:	6a 01                	push   0x1
c0023baf:	6a 00                	push   0x0
c0023bb1:	53                   	push   ebx
c0023bb2:	e8 c3 fb ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c0023bb7:	83 c4 0c             	add    esp,0xc
c0023bba:	6a 01                	push   0x1
c0023bbc:	6a 01                	push   0x1
c0023bbe:	53                   	push   ebx
c0023bbf:	e8 b6 fb ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c0023bc4:	83 c4 2c             	add    esp,0x2c
c0023bc7:	31 c0                	xor    eax,eax
c0023bc9:	5b                   	pop    ebx
c0023bca:	5e                   	pop    esi
c0023bcb:	5f                   	pop    edi
c0023bcc:	5d                   	pop    ebp
c0023bcd:	c3                   	ret    

c0023bce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023bce:	55                   	push   ebp
c0023bcf:	57                   	push   edi
c0023bd0:	56                   	push   esi
c0023bd1:	53                   	push   ebx
c0023bd2:	83 ec 1c             	sub    esp,0x1c
c0023bd5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023bd9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023bdd:	8d 50 f8             	lea    edx,[eax-0x8]
c0023be0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023be4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023be8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023bec:	80 fa 03             	cmp    dl,0x3
c0023bef:	77 5d                	ja     c0023c4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023bf1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023bf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023bf9:	0f b6 db             	movzx  ebx,bl
c0023bfc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023bff:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023c03:	83 ca 80             	or     edx,0xffffff80
c0023c06:	0f b6 d2             	movzx  edx,dl
c0023c09:	52                   	push   edx
c0023c0a:	6a 0c                	push   0xc
c0023c0c:	53                   	push   ebx
c0023c0d:	56                   	push   esi
c0023c0e:	e8 5b f9 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c13:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023c18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023c20:	0f b6 c0             	movzx  eax,al
c0023c23:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023c27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c29:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023c2e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023c32:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023c36:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023c3a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023c42:	83 c4 2c             	add    esp,0x2c
c0023c45:	5b                   	pop    ebx
c0023c46:	5e                   	pop    esi
c0023c47:	5f                   	pop    edi
c0023c48:	5d                   	pop    ebp
c0023c49:	e9 20 f9 ff ff       	jmp    c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c4e:	3c 07                	cmp    al,0x7
c0023c50:	77 10                	ja     c0023c62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023c52:	0f b6 db             	movzx  ebx,bl
c0023c55:	0f b6 d0             	movzx  edx,al
c0023c58:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023c60:	eb 2d                	jmp    c0023c8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c62:	3c 0d                	cmp    al,0xd
c0023c64:	77 13                	ja     c0023c79 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023c66:	0f b6 db             	movzx  ebx,bl
c0023c69:	0f b6 c0             	movzx  eax,al
c0023c6c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023c73:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023c77:	eb 16                	jmp    c0023c8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023c79:	3c 15                	cmp    al,0x15
c0023c7b:	77 14                	ja     c0023c91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023c7d:	0f b6 db             	movzx  ebx,bl
c0023c80:	0f b6 c0             	movzx  eax,al
c0023c83:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023c8b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023c8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023c91:	83 c4 1c             	add    esp,0x1c
c0023c94:	5b                   	pop    ebx
c0023c95:	5e                   	pop    esi
c0023c96:	5f                   	pop    edi
c0023c97:	5d                   	pop    ebp
c0023c98:	c3                   	ret    
c0023c99:	90                   	nop

c0023c9a <IDE::detect()>:
c0023c9a:	55                   	push   ebp
c0023c9b:	57                   	push   edi
c0023c9c:	56                   	push   esi
c0023c9d:	53                   	push   ebx
c0023c9e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023ca4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023cab:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023cb2:	0f 85 9d 02 00 00    	jne    c0023f55 <IDE::detect()+0x2bb>
c0023cb8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023cbf:	31 f6                	xor    esi,esi
c0023cc1:	31 ed                	xor    ebp,ebp
c0023cc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023ccb:	89 e8                	mov    eax,ebp
c0023ccd:	c1 e0 06             	shl    eax,0x6
c0023cd0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023cd8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023cdc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023ce0:	c1 e0 04             	shl    eax,0x4
c0023ce3:	83 c8 a0             	or     eax,0xffffffa0
c0023ce6:	0f b6 c0             	movzx  eax,al
c0023ce9:	50                   	push   eax
c0023cea:	6a 06                	push   0x6
c0023cec:	56                   	push   esi
c0023ced:	53                   	push   ebx
c0023cee:	e8 7b f8 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cf3:	83 c4 0c             	add    esp,0xc
c0023cf6:	6a 0c                	push   0xc
c0023cf8:	56                   	push   esi
c0023cf9:	53                   	push   ebx
c0023cfa:	e8 2f f9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	6a 0c                	push   0xc
c0023d04:	56                   	push   esi
c0023d05:	53                   	push   ebx
c0023d06:	e8 23 f9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d0b:	83 c4 0c             	add    esp,0xc
c0023d0e:	6a 0c                	push   0xc
c0023d10:	56                   	push   esi
c0023d11:	53                   	push   ebx
c0023d12:	e8 17 f9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d17:	83 c4 0c             	add    esp,0xc
c0023d1a:	6a 0c                	push   0xc
c0023d1c:	56                   	push   esi
c0023d1d:	53                   	push   ebx
c0023d1e:	e8 0b f9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d23:	68 ec 00 00 00       	push   0xec
c0023d28:	6a 07                	push   0x7
c0023d2a:	56                   	push   esi
c0023d2b:	53                   	push   ebx
c0023d2c:	e8 3d f8 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d31:	83 c4 1c             	add    esp,0x1c
c0023d34:	6a 0c                	push   0xc
c0023d36:	56                   	push   esi
c0023d37:	53                   	push   ebx
c0023d38:	e8 f1 f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d3d:	83 c4 0c             	add    esp,0xc
c0023d40:	6a 0c                	push   0xc
c0023d42:	56                   	push   esi
c0023d43:	53                   	push   ebx
c0023d44:	e8 e5 f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d49:	83 c4 0c             	add    esp,0xc
c0023d4c:	6a 0c                	push   0xc
c0023d4e:	56                   	push   esi
c0023d4f:	53                   	push   ebx
c0023d50:	e8 d9 f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d55:	83 c4 0c             	add    esp,0xc
c0023d58:	6a 0c                	push   0xc
c0023d5a:	56                   	push   esi
c0023d5b:	53                   	push   ebx
c0023d5c:	e8 cd f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d61:	83 c4 0c             	add    esp,0xc
c0023d64:	6a 0c                	push   0xc
c0023d66:	56                   	push   esi
c0023d67:	53                   	push   ebx
c0023d68:	e8 c1 f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d6d:	83 c4 10             	add    esp,0x10
c0023d70:	84 c0                	test   al,al
c0023d72:	0f 84 63 01 00 00    	je     c0023edb <IDE::detect()+0x241>
c0023d78:	31 ff                	xor    edi,edi
c0023d7a:	50                   	push   eax
c0023d7b:	6a 0c                	push   0xc
c0023d7d:	56                   	push   esi
c0023d7e:	53                   	push   ebx
c0023d7f:	e8 aa f8 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023d84:	83 c4 10             	add    esp,0x10
c0023d87:	a8 01                	test   al,0x1
c0023d89:	0f 85 6d 01 00 00    	jne    c0023efc <IDE::detect()+0x262>
c0023d8f:	84 c0                	test   al,al
c0023d91:	78 04                	js     c0023d97 <IDE::detect()+0xfd>
c0023d93:	a8 08                	test   al,0x8
c0023d95:	75 27                	jne    c0023dbe <IDE::detect()+0x124>
c0023d97:	47                   	inc    edi
c0023d98:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023d9e:	7e da                	jle    c0023d7a <IDE::detect()+0xe0>
c0023da0:	50                   	push   eax
c0023da1:	50                   	push   eax
c0023da2:	6a 00                	push   0x0
c0023da4:	68 40 4b 4c 00       	push   0x4c4b40
c0023da9:	e8 67 a4 ff ff       	call   c001e215 <nanoSleep(unsigned long long)>
c0023dae:	83 c4 10             	add    esp,0x10
c0023db1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023db7:	75 c1                	jne    c0023d7a <IDE::detect()+0xe0>
c0023db9:	e9 3e 01 00 00       	jmp    c0023efc <IDE::detect()+0x262>
c0023dbe:	31 c9                	xor    ecx,ecx
c0023dc0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023dc4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023dc8:	83 ec 0c             	sub    esp,0xc
c0023dcb:	68 80 00 00 00       	push   0x80
c0023dd0:	57                   	push   edi
c0023dd1:	6a 00                	push   0x0
c0023dd3:	56                   	push   esi
c0023dd4:	53                   	push   ebx
c0023dd5:	e8 f4 fd ff ff       	call   c0023bce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023dda:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023ddf:	89 e8                	mov    eax,ebp
c0023de1:	89 d1                	mov    ecx,edx
c0023de3:	c1 e0 06             	shl    eax,0x6
c0023de6:	01 d8                	add    eax,ebx
c0023de8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023def:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023df6:	89 f2                	mov    edx,esi
c0023df8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023dfe:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023e02:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023e08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e0c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023e13:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023e1b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023e22:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023e2a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023e30:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023e37:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023e3d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023e41:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023e45:	83 c4 20             	add    esp,0x20
c0023e48:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023e4b:	83 c0 02             	add    eax,0x2
c0023e4e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023e54:	83 c7 02             	add    edi,0x2
c0023e57:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023e5a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023e60:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023e64:	75 e2                	jne    c0023e48 <IDE::detect()+0x1ae>
c0023e66:	89 e8                	mov    eax,ebp
c0023e68:	c1 e0 06             	shl    eax,0x6
c0023e6b:	01 d8                	add    eax,ebx
c0023e6d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023e73:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023e7a:	66 c1 ea 09          	shr    dx,0x9
c0023e7e:	83 e2 01             	and    edx,0x1
c0023e81:	84 c9                	test   cl,cl
c0023e83:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023e89:	75 22                	jne    c0023ead <IDE::detect()+0x213>
c0023e8b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023e92:	74 46                	je     c0023eda <IDE::detect()+0x240>
c0023e94:	83 ec 0c             	sub    esp,0xc
c0023e97:	68 7c 01 00 00       	push   0x17c
c0023e9c:	e8 12 bb fe ff       	call   c000f9b3 <malloc>
c0023ea1:	89 c7                	mov    edi,eax
c0023ea3:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ea6:	e8 15 05 00 00       	call   c00243c0 <ATA::ATA()>
c0023eab:	eb 17                	jmp    c0023ec4 <IDE::detect()+0x22a>
c0023ead:	83 ec 0c             	sub    esp,0xc
c0023eb0:	68 80 01 00 00       	push   0x180
c0023eb5:	e8 f9 ba fe ff       	call   c000f9b3 <malloc>
c0023eba:	89 c7                	mov    edi,eax
c0023ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ebf:	e8 88 0b 00 00       	call   c0024a4c <ATAPI::ATAPI()>
c0023ec4:	5a                   	pop    edx
c0023ec5:	59                   	pop    ecx
c0023ec6:	57                   	push   edi
c0023ec7:	53                   	push   ebx
c0023ec8:	e8 77 ff fe ff       	call   c0013e44 <Device::addChild(Device*)>
c0023ecd:	8b 07                	mov    eax,DWORD PTR [edi]
c0023ecf:	53                   	push   ebx
c0023ed0:	55                   	push   ebp
c0023ed1:	6a 00                	push   0x0
c0023ed3:	57                   	push   edi
c0023ed4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ed7:	83 c4 20             	add    esp,0x20
c0023eda:	45                   	inc    ebp
c0023edb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023ee0:	74 0d                	je     c0023eef <IDE::detect()+0x255>
c0023ee2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023eea:	e9 dc fd ff ff       	jmp    c0023ccb <IDE::detect()+0x31>
c0023eef:	4e                   	dec    esi
c0023ef0:	74 63                	je     c0023f55 <IDE::detect()+0x2bb>
c0023ef2:	be 01 00 00 00       	mov    esi,0x1
c0023ef7:	e9 c7 fd ff ff       	jmp    c0023cc3 <IDE::detect()+0x29>
c0023efc:	50                   	push   eax
c0023efd:	6a 04                	push   0x4
c0023eff:	56                   	push   esi
c0023f00:	53                   	push   ebx
c0023f01:	e8 28 f7 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023f06:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023f0a:	83 c4 0c             	add    esp,0xc
c0023f0d:	6a 05                	push   0x5
c0023f0f:	56                   	push   esi
c0023f10:	53                   	push   ebx
c0023f11:	e8 18 f7 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023f16:	83 c4 10             	add    esp,0x10
c0023f19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023f1d:	80 fa 14             	cmp    dl,0x14
c0023f20:	75 04                	jne    c0023f26 <IDE::detect()+0x28c>
c0023f22:	3c eb                	cmp    al,0xeb
c0023f24:	eb 07                	jmp    c0023f2d <IDE::detect()+0x293>
c0023f26:	3c 96                	cmp    al,0x96
c0023f28:	75 b1                	jne    c0023edb <IDE::detect()+0x241>
c0023f2a:	80 fa 69             	cmp    dl,0x69
c0023f2d:	75 ac                	jne    c0023edb <IDE::detect()+0x241>
c0023f2f:	68 a1 00 00 00       	push   0xa1
c0023f34:	6a 07                	push   0x7
c0023f36:	56                   	push   esi
c0023f37:	53                   	push   ebx
c0023f38:	e8 31 f6 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f3d:	5f                   	pop    edi
c0023f3e:	58                   	pop    eax
c0023f3f:	6a 00                	push   0x0
c0023f41:	68 40 42 0f 00       	push   0xf4240
c0023f46:	e8 ca a2 ff ff       	call   c001e215 <nanoSleep(unsigned long long)>
c0023f4b:	83 c4 10             	add    esp,0x10
c0023f4e:	b1 01                	mov    cl,0x1
c0023f50:	e9 6b fe ff ff       	jmp    c0023dc0 <IDE::detect()+0x126>
c0023f55:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023f5b:	5b                   	pop    ebx
c0023f5c:	5e                   	pop    esi
c0023f5d:	5f                   	pop    edi
c0023f5e:	5d                   	pop    ebp
c0023f5f:	c3                   	ret    

c0023f60 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023f60:	55                   	push   ebp
c0023f61:	57                   	push   edi
c0023f62:	56                   	push   esi
c0023f63:	53                   	push   ebx
c0023f64:	83 ec 1c             	sub    esp,0x1c
c0023f67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023f6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023f6f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023f73:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023f77:	88 c3                	mov    bl,al
c0023f79:	84 c0                	test   al,al
c0023f7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f7f:	0f 84 81 00 00 00    	je     c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023f85:	83 ec 0c             	sub    esp,0xc
c0023f88:	68 e3 cd 02 c0       	push   0xc002cde3
c0023f8d:	e8 79 ea fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0023f92:	83 c4 10             	add    esp,0x10
c0023f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f99:	3c 01                	cmp    al,0x1
c0023f9b:	74 63                	je     c0024000 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023f9d:	3c 02                	cmp    al,0x2
c0023f9f:	75 53                	jne    c0023ff4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023fa1:	d1 e6                	shl    esi,1
c0023fa3:	09 ee                	or     esi,ebp
c0023fa5:	50                   	push   eax
c0023fa6:	89 f0                	mov    eax,esi
c0023fa8:	6a 01                	push   0x1
c0023faa:	0f b6 f0             	movzx  esi,al
c0023fad:	c1 e6 06             	shl    esi,0x6
c0023fb0:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023fb8:	50                   	push   eax
c0023fb9:	57                   	push   edi
c0023fba:	e8 6f f6 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0023fbf:	83 c4 10             	add    esp,0x10
c0023fc2:	a8 01                	test   al,0x1
c0023fc4:	74 02                	je     c0023fc8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023fc6:	b3 07                	mov    bl,0x7
c0023fc8:	a8 02                	test   al,0x2
c0023fca:	74 02                	je     c0023fce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023fcc:	b3 03                	mov    bl,0x3
c0023fce:	a8 04                	test   al,0x4
c0023fd0:	74 02                	je     c0023fd4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023fd2:	b3 14                	mov    bl,0x14
c0023fd4:	a8 08                	test   al,0x8
c0023fd6:	74 02                	je     c0023fda <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023fd8:	b3 03                	mov    bl,0x3
c0023fda:	a8 10                	test   al,0x10
c0023fdc:	74 02                	je     c0023fe0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023fde:	b3 15                	mov    bl,0x15
c0023fe0:	a8 20                	test   al,0x20
c0023fe2:	74 02                	je     c0023fe6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023fe4:	b3 03                	mov    bl,0x3
c0023fe6:	a8 40                	test   al,0x40
c0023fe8:	74 02                	je     c0023fec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023fea:	b3 16                	mov    bl,0x16
c0023fec:	84 c0                	test   al,al
c0023fee:	79 16                	jns    c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ff0:	b3 0d                	mov    bl,0xd
c0023ff2:	eb 12                	jmp    c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ff4:	3c 03                	cmp    al,0x3
c0023ff6:	74 0c                	je     c0024004 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023ff8:	3c 04                	cmp    al,0x4
c0023ffa:	75 0a                	jne    c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ffc:	b3 08                	mov    bl,0x8
c0023ffe:	eb 06                	jmp    c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024000:	b3 13                	mov    bl,0x13
c0024002:	eb 02                	jmp    c0024006 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0024004:	b3 17                	mov    bl,0x17
c0024006:	83 c4 1c             	add    esp,0x1c
c0024009:	88 d8                	mov    al,bl
c002400b:	5b                   	pop    ebx
c002400c:	5e                   	pop    esi
c002400d:	5f                   	pop    edi
c002400e:	5d                   	pop    ebp
c002400f:	c3                   	ret    

c0024010 <IDE::polling(unsigned char, unsigned int)>:
c0024010:	57                   	push   edi
c0024011:	56                   	push   esi
c0024012:	53                   	push   ebx
c0024013:	bb 04 00 00 00       	mov    ebx,0x4
c0024018:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002401c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024021:	52                   	push   edx
c0024022:	6a 0c                	push   0xc
c0024024:	56                   	push   esi
c0024025:	57                   	push   edi
c0024026:	e8 03 f6 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c002402b:	83 c4 10             	add    esp,0x10
c002402e:	4b                   	dec    ebx
c002402f:	75 f0                	jne    c0024021 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024031:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024036:	50                   	push   eax
c0024037:	6a 0c                	push   0xc
c0024039:	56                   	push   esi
c002403a:	57                   	push   edi
c002403b:	e8 ee f5 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0024040:	83 c4 10             	add    esp,0x10
c0024043:	a8 01                	test   al,0x1
c0024045:	75 17                	jne    c002405e <IDE::polling(unsigned char, unsigned int)+0x4e>
c0024047:	a8 20                	test   al,0x20
c0024049:	75 0f                	jne    c002405a <IDE::polling(unsigned char, unsigned int)+0x4a>
c002404b:	4b                   	dec    ebx
c002404c:	74 10                	je     c002405e <IDE::polling(unsigned char, unsigned int)+0x4e>
c002404e:	84 c0                	test   al,al
c0024050:	78 e4                	js     c0024036 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024052:	a8 08                	test   al,0x8
c0024054:	74 e0                	je     c0024036 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024056:	31 c0                	xor    eax,eax
c0024058:	eb 06                	jmp    c0024060 <IDE::polling(unsigned char, unsigned int)+0x50>
c002405a:	b0 01                	mov    al,0x1
c002405c:	eb 02                	jmp    c0024060 <IDE::polling(unsigned char, unsigned int)+0x50>
c002405e:	b0 02                	mov    al,0x2
c0024060:	5b                   	pop    ebx
c0024061:	5e                   	pop    esi
c0024062:	5f                   	pop    edi
c0024063:	c3                   	ret    

c0024064 <SATABus::close(int, int, void*)>:
c0024064:	31 c0                	xor    eax,eax
c0024066:	c3                   	ret    
c0024067:	90                   	nop

c0024068 <SATABus::detect()>:
c0024068:	c3                   	ret    
c0024069:	90                   	nop

c002406a <SATABus::SATABus()>:
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	83 ec 08             	sub    esp,0x8
c0024074:	68 1c ce 02 c0       	push   0xc002ce1c
c0024079:	50                   	push   eax
c002407a:	e8 73 01 ff ff       	call   c00141f2 <HardDiskController::HardDiskController(char const*)>
c002407f:	83 c4 10             	add    esp,0x10
c0024082:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c0024087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002408b:	89 10                	mov    DWORD PTR [eax],edx
c002408d:	83 ec 0c             	sub    esp,0xc
c0024090:	6a 50                	push   0x50
c0024092:	e8 10 be fe ff       	call   c000fea7 <Phys::allocateContiguousPages(int)>
c0024097:	83 c4 10             	add    esp,0x10
c002409a:	89 c2                	mov    edx,eax
c002409c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00240a6:	83 ec 0c             	sub    esp,0xc
c00240a9:	6a 50                	push   0x50
c00240ab:	e8 89 d5 fe ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c00240b0:	83 c4 10             	add    esp,0x10
c00240b3:	89 c2                	mov    edx,eax
c00240b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240b9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00240bf:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c00240c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00240c8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00240ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00240d2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00240d8:	83 ec 0c             	sub    esp,0xc
c00240db:	6a 03                	push   0x3
c00240dd:	6a 50                	push   0x50
c00240df:	51                   	push   ecx
c00240e0:	52                   	push   edx
c00240e1:	50                   	push   eax
c00240e2:	e8 ef de fe ff       	call   c0011fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00240e7:	83 c4 20             	add    esp,0x20
c00240ea:	90                   	nop
c00240eb:	83 c4 0c             	add    esp,0xc
c00240ee:	c3                   	ret    
c00240ef:	90                   	nop

c00240f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00240f0:	83 ec 0c             	sub    esp,0xc
c00240f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240f7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00240fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00240fd:	09 c2                	or     edx,eax
c00240ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024103:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024109:	8b 08                	mov    ecx,DWORD PTR [eax]
c002410b:	31 c0                	xor    eax,eax
c002410d:	c1 e9 08             	shr    ecx,0x8
c0024110:	83 e1 0f             	and    ecx,0xf
c0024113:	39 c8                	cmp    eax,ecx
c0024115:	74 0a                	je     c0024121 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024117:	f6 c2 01             	test   dl,0x1
c002411a:	74 18                	je     c0024134 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002411c:	d1 ea                	shr    edx,1
c002411e:	40                   	inc    eax
c002411f:	eb f2                	jmp    c0024113 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024121:	83 ec 0c             	sub    esp,0xc
c0024124:	68 40 ce 02 c0       	push   0xc002ce40
c0024129:	e8 7b 62 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c002412e:	83 c4 10             	add    esp,0x10
c0024131:	83 c8 ff             	or     eax,0xffffffff
c0024134:	83 c4 0c             	add    esp,0xc
c0024137:	c3                   	ret    

c0024138 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024138:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002413c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002413f:	89 c2                	mov    edx,eax
c0024141:	c1 ea 08             	shr    edx,0x8
c0024144:	83 e2 0f             	and    edx,0xf
c0024147:	fe ca                	dec    dl
c0024149:	75 31                	jne    c002417c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002414b:	83 e0 0f             	and    eax,0xf
c002414e:	3c 03                	cmp    al,0x3
c0024150:	75 2a                	jne    c002417c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024152:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024155:	b8 02 00 00 00       	mov    eax,0x2
c002415a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024160:	74 1c                	je     c002417e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024162:	b8 04 00 00 00       	mov    eax,0x4
c0024167:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002416d:	74 0f                	je     c002417e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002416f:	31 c0                	xor    eax,eax
c0024171:	83 fa 03             	cmp    edx,0x3
c0024174:	0f 94 c0             	sete   al
c0024177:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002417b:	c3                   	ret    
c002417c:	31 c0                	xor    eax,eax
c002417e:	c3                   	ret    
c002417f:	90                   	nop

c0024180 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024184:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024187:	0f ba e2 0f          	bt     edx,0xf
c002418b:	72 f7                	jb     c0024184 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002418d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024190:	83 ca 10             	or     edx,0x10
c0024193:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024196:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024199:	83 ca 01             	or     edx,0x1
c002419c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002419f:	c3                   	ret    

c00241a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00241a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241a7:	83 e2 fe             	and    edx,0xfffffffe
c00241aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241b0:	83 e2 ef             	and    edx,0xffffffef
c00241b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00241b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241b9:	0f ba e2 0e          	bt     edx,0xe
c00241bd:	72 f7                	jb     c00241b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00241c2:	0f ba e2 0f          	bt     edx,0xf
c00241c6:	72 ee                	jb     c00241b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00241c8:	c3                   	ret    
c00241c9:	90                   	nop

c00241ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00241ca:	55                   	push   ebp
c00241cb:	57                   	push   edi
c00241cc:	56                   	push   esi
c00241cd:	53                   	push   ebx
c00241ce:	83 ec 1c             	sub    esp,0x1c
c00241d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00241d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00241d9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00241dd:	53                   	push   ebx
c00241de:	89 fd                	mov    ebp,edi
c00241e0:	56                   	push   esi
c00241e1:	c1 e5 0a             	shl    ebp,0xa
c00241e4:	e8 b7 ff ff ff       	call   c00241a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00241e9:	83 ec 0c             	sub    esp,0xc
c00241ec:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00241f2:	01 e8                	add    eax,ebp
c00241f4:	89 03                	mov    DWORD PTR [ebx],eax
c00241f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241f8:	68 00 04 00 00       	push   0x400
c00241fd:	6a 00                	push   0x0
c00241ff:	50                   	push   eax
c0024200:	e8 4b c5 fd ff       	call   c0000750 <memset>
c0024205:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002420b:	89 fa                	mov    edx,edi
c002420d:	01 e8                	add    eax,ebp
c002420f:	c1 e7 0d             	shl    edi,0xd
c0024212:	89 03                	mov    DWORD PTR [ebx],eax
c0024214:	c1 e2 08             	shl    edx,0x8
c0024217:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002421e:	81 c2 00 80 00 00    	add    edx,0x8000
c0024224:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024228:	89 d0                	mov    eax,edx
c002422a:	83 c4 1c             	add    esp,0x1c
c002422d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024233:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024236:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024239:	68 00 01 00 00       	push   0x100
c002423e:	6a 00                	push   0x0
c0024240:	50                   	push   eax
c0024241:	e8 0a c5 fd ff       	call   c0000750 <memset>
c0024246:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002424a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024250:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024256:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002425a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002425d:	83 c4 10             	add    esp,0x10
c0024260:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024267:	31 ff                	xor    edi,edi
c0024269:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002426f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024279:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002427f:	83 c5 20             	add    ebp,0x20
c0024282:	01 f8                	add    eax,edi
c0024284:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024287:	52                   	push   edx
c0024288:	68 00 01 00 00       	push   0x100
c002428d:	6a 00                	push   0x0
c002428f:	50                   	push   eax
c0024290:	e8 bb c4 fd ff       	call   c0000750 <memset>
c0024295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024299:	83 c4 10             	add    esp,0x10
c002429c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00242a2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00242a9:	01 f8                	add    eax,edi
c00242ab:	81 c7 00 01 00 00    	add    edi,0x100
c00242b1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00242b4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00242ba:	75 b3                	jne    c002426f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00242bc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00242c0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00242c4:	83 c4 1c             	add    esp,0x1c
c00242c7:	5b                   	pop    ebx
c00242c8:	5e                   	pop    esi
c00242c9:	5f                   	pop    edi
c00242ca:	5d                   	pop    ebp
c00242cb:	e9 b0 fe ff ff       	jmp    c0024180 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00242d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00242d0:	55                   	push   ebp
c00242d1:	57                   	push   edi
c00242d2:	56                   	push   esi
c00242d3:	53                   	push   ebx
c00242d4:	31 db                	xor    ebx,ebx
c00242d6:	83 ec 0c             	sub    esp,0xc
c00242d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242e1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00242e4:	f7 c7 01 00 00 00    	test   edi,0x1
c00242ea:	74 7a                	je     c0024366 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00242ec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00242f0:	89 d8                	mov    eax,ebx
c00242f2:	c1 e0 07             	shl    eax,0x7
c00242f5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00242fc:	55                   	push   ebp
c00242fd:	56                   	push   esi
c00242fe:	e8 35 fe ff ff       	call   c0024138 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024303:	5a                   	pop    edx
c0024304:	83 f8 01             	cmp    eax,0x1
c0024307:	59                   	pop    ecx
c0024308:	75 21                	jne    c002432b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002430a:	50                   	push   eax
c002430b:	53                   	push   ebx
c002430c:	55                   	push   ebp
c002430d:	56                   	push   esi
c002430e:	e8 b7 fe ff ff       	call   c00241ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024313:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002431a:	e8 94 b6 fe ff       	call   c000f9b3 <malloc>
c002431f:	89 c5                	mov    ebp,eax
c0024321:	89 04 24             	mov    DWORD PTR [esp],eax
c0024324:	e8 87 0d 00 00       	call   c00250b0 <SATA::SATA()>
c0024329:	eb 24                	jmp    c002434f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002432b:	83 f8 04             	cmp    eax,0x4
c002432e:	75 36                	jne    c0024366 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024330:	51                   	push   ecx
c0024331:	53                   	push   ebx
c0024332:	55                   	push   ebp
c0024333:	56                   	push   esi
c0024334:	e8 91 fe ff ff       	call   c00241ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024339:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024340:	e8 6e b6 fe ff       	call   c000f9b3 <malloc>
c0024345:	89 c5                	mov    ebp,eax
c0024347:	89 04 24             	mov    DWORD PTR [esp],eax
c002434a:	e8 d7 10 00 00       	call   c0025426 <SATAPI::SATAPI()>
c002434f:	58                   	pop    eax
c0024350:	5a                   	pop    edx
c0024351:	55                   	push   ebp
c0024352:	56                   	push   esi
c0024353:	e8 ec fa fe ff       	call   c0013e44 <Device::addChild(Device*)>
c0024358:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002435b:	56                   	push   esi
c002435c:	6a 00                	push   0x0
c002435e:	53                   	push   ebx
c002435f:	55                   	push   ebp
c0024360:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0024363:	83 c4 20             	add    esp,0x20
c0024366:	d1 ef                	shr    edi,1
c0024368:	43                   	inc    ebx
c0024369:	83 fb 20             	cmp    ebx,0x20
c002436c:	0f 85 72 ff ff ff    	jne    c00242e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024372:	83 c4 0c             	add    esp,0xc
c0024375:	5b                   	pop    ebx
c0024376:	5e                   	pop    esi
c0024377:	5f                   	pop    edi
c0024378:	5d                   	pop    ebp
c0024379:	c3                   	ret    

c002437a <SATABus::open(int, int, void*)>:
c002437a:	83 ec 14             	sub    esp,0x14
c002437d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024381:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024387:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002438d:	52                   	push   edx
c002438e:	50                   	push   eax
c002438f:	e8 3c ff ff ff       	call   c00242d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024394:	31 c0                	xor    eax,eax
c0024396:	83 c4 1c             	add    esp,0x1c
c0024399:	c3                   	ret    

c002439a <ATA::close(int, int, void*)>:
c002439a:	83 ec 0c             	sub    esp,0xc
c002439d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243a7:	85 c0                	test   eax,eax
c00243a9:	74 0c                	je     c00243b7 <ATA::close(int, int, void*)+0x1d>
c00243ab:	83 ec 0c             	sub    esp,0xc
c00243ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00243b0:	50                   	push   eax
c00243b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00243b4:	83 c4 10             	add    esp,0x10
c00243b7:	31 c0                	xor    eax,eax
c00243b9:	83 c4 0c             	add    esp,0xc
c00243bc:	c3                   	ret    
c00243bd:	90                   	nop

c00243be <ATA::powerSaving(PowerSavingLevel)>:
c00243be:	c3                   	ret    
c00243bf:	90                   	nop

c00243c0 <ATA::ATA()>:
c00243c0:	83 ec 0c             	sub    esp,0xc
c00243c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243c7:	83 ec 04             	sub    esp,0x4
c00243ca:	68 00 02 00 00       	push   0x200
c00243cf:	68 65 cf 02 c0       	push   0xc002cf65
c00243d4:	50                   	push   eax
c00243d5:	e8 a0 fe fe ff       	call   c001427a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243da:	83 c4 10             	add    esp,0x10
c00243dd:	ba e8 ce 02 c0       	mov    edx,0xc002cee8
c00243e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243e6:	89 10                	mov    DWORD PTR [eax],edx
c00243e8:	90                   	nop
c00243e9:	83 c4 0c             	add    esp,0xc
c00243ec:	c3                   	ret    
c00243ed:	90                   	nop

c00243ee <ATA::flush(bool)>:
c00243ee:	53                   	push   ebx
c00243ef:	83 ec 08             	sub    esp,0x8
c00243f2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00243f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243fb:	19 c0                	sbb    eax,eax
c00243fd:	83 e0 fd             	and    eax,0xfffffffd
c0024400:	05 ea 00 00 00       	add    eax,0xea
c0024405:	50                   	push   eax
c0024406:	6a 07                	push   0x7
c0024408:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002440f:	50                   	push   eax
c0024410:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024416:	e8 53 f1 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002441b:	83 c4 0c             	add    esp,0xc
c002441e:	6a 00                	push   0x0
c0024420:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024427:	50                   	push   eax
c0024428:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002442e:	e8 dd fb ff ff       	call   c0024010 <IDE::polling(unsigned char, unsigned int)>
c0024433:	83 c4 18             	add    esp,0x18
c0024436:	5b                   	pop    ebx
c0024437:	c3                   	ret    

c0024438 <ATA::readyForCommand()>:
c0024438:	56                   	push   esi
c0024439:	53                   	push   ebx
c002443a:	31 db                	xor    ebx,ebx
c002443c:	50                   	push   eax
c002443d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024441:	50                   	push   eax
c0024442:	6a 0c                	push   0xc
c0024444:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002444b:	50                   	push   eax
c002444c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024452:	e8 d7 f1 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0024457:	83 c4 10             	add    esp,0x10
c002445a:	a8 88                	test   al,0x88
c002445c:	74 23                	je     c0024481 <ATA::readyForCommand()+0x49>
c002445e:	43                   	inc    ebx
c002445f:	83 fb 63             	cmp    ebx,0x63
c0024462:	7e dd                	jle    c0024441 <ATA::readyForCommand()+0x9>
c0024464:	51                   	push   ecx
c0024465:	51                   	push   ecx
c0024466:	6a 00                	push   0x0
c0024468:	68 40 42 0f 00       	push   0xf4240
c002446d:	e8 a3 9d ff ff       	call   c001e215 <nanoSleep(unsigned long long)>
c0024472:	83 c4 10             	add    esp,0x10
c0024475:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002447b:	75 c4                	jne    c0024441 <ATA::readyForCommand()+0x9>
c002447d:	31 c0                	xor    eax,eax
c002447f:	eb 02                	jmp    c0024483 <ATA::readyForCommand()+0x4b>
c0024481:	b0 01                	mov    al,0x1
c0024483:	5a                   	pop    edx
c0024484:	5b                   	pop    ebx
c0024485:	5e                   	pop    esi
c0024486:	c3                   	ret    
c0024487:	90                   	nop

c0024488 <ATA::access(unsigned long long, int, void*, bool)>:
c0024488:	55                   	push   ebp
c0024489:	57                   	push   edi
c002448a:	56                   	push   esi
c002448b:	53                   	push   ebx
c002448c:	83 ec 38             	sub    esp,0x38
c002448f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024493:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0024497:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002449b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002449f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00244a3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00244a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00244ab:	68 94 ce 02 c0       	push   0xc002ce94
c00244b0:	e8 56 e5 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00244b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00244bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244bf:	83 c4 10             	add    esp,0x10
c00244c2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244cc:	c1 e0 06             	shl    eax,0x6
c00244cf:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00244d7:	74 5d                	je     c0024536 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c00244d9:	89 fa                	mov    edx,edi
c00244db:	89 f0                	mov    eax,esi
c00244dd:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00244e1:	c1 ea 1c             	shr    edx,0x1c
c00244e4:	89 d1                	mov    ecx,edx
c00244e6:	09 c1                	or     ecx,eax
c00244e8:	74 25                	je     c002450f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c00244ea:	31 ed                	xor    ebp,ebp
c00244ec:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00244f3:	89 fa                	mov    edx,edi
c00244f5:	89 f0                	mov    eax,esi
c00244f7:	0f ad d0             	shrd   eax,edx,cl
c00244fa:	d3 ea                	shr    edx,cl
c00244fc:	f6 c1 20             	test   cl,0x20
c00244ff:	74 02                	je     c0024503 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024501:	89 d0                	mov    eax,edx
c0024503:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024507:	45                   	inc    ebp
c0024508:	83 fd 06             	cmp    ebp,0x6
c002450b:	75 df                	jne    c00244ec <ATA::access(unsigned long long, int, void*, bool)+0x64>
c002450d:	eb 76                	jmp    c0024585 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c002450f:	89 f0                	mov    eax,esi
c0024511:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024516:	89 fa                	mov    edx,edi
c0024518:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002451f:	0f ac d0 10          	shrd   eax,edx,0x10
c0024523:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024528:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002452c:	c1 ee 18             	shr    esi,0x18
c002452f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024534:	eb 56                	jmp    c002458c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024536:	6a 00                	push   0x0
c0024538:	6a 3f                	push   0x3f
c002453a:	57                   	push   edi
c002453b:	56                   	push   esi
c002453c:	e8 a3 29 00 00       	call   c0026ee4 <__umoddi3>
c0024541:	83 c4 10             	add    esp,0x10
c0024544:	40                   	inc    eax
c0024545:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024549:	6a 00                	push   0x0
c002454b:	68 f0 03 00 00       	push   0x3f0
c0024550:	57                   	push   edi
c0024551:	56                   	push   esi
c0024552:	e8 8d 28 00 00       	call   c0026de4 <__udivdi3>
c0024557:	83 c4 10             	add    esp,0x10
c002455a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002455f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024566:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002456b:	6a 00                	push   0x0
c002456d:	6a 3f                	push   0x3f
c002456f:	57                   	push   edi
c0024570:	56                   	push   esi
c0024571:	e8 6e 28 00 00       	call   c0026de4 <__udivdi3>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	89 c6                	mov    esi,eax
c002457b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024580:	83 e6 0f             	and    esi,0xf
c0024583:	eb 07                	jmp    c002458c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c0024585:	31 f6                	xor    esi,esi
c0024587:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002458c:	bf 01 00 00 00       	mov    edi,0x1
c0024591:	50                   	push   eax
c0024592:	6a 00                	push   0x0
c0024594:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002459b:	50                   	push   eax
c002459c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245a0:	e8 d5 f1 ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c00245a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245a8:	e8 8b fe ff ff       	call   c0024438 <ATA::readyForCommand()>
c00245ad:	83 c4 10             	add    esp,0x10
c00245b0:	84 c0                	test   al,al
c00245b2:	0f 84 bc 02 00 00    	je     c0024874 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00245b8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00245be:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245c4:	c1 e0 04             	shl    eax,0x4
c00245c7:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00245ce:	09 c6                	or     esi,eax
c00245d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00245d5:	75 05                	jne    c00245dc <ATA::access(unsigned long long, int, void*, bool)+0x154>
c00245d7:	83 ce a0             	or     esi,0xffffffa0
c00245da:	eb 03                	jmp    c00245df <ATA::access(unsigned long long, int, void*, bool)+0x157>
c00245dc:	83 ce e0             	or     esi,0xffffffe0
c00245df:	89 f0                	mov    eax,esi
c00245e1:	0f b6 f0             	movzx  esi,al
c00245e4:	56                   	push   esi
c00245e5:	6a 06                	push   0x6
c00245e7:	51                   	push   ecx
c00245e8:	52                   	push   edx
c00245e9:	e8 80 ef ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ee:	83 c4 10             	add    esp,0x10
c00245f1:	6a 00                	push   0x0
c00245f3:	6a 01                	push   0x1
c00245f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245fc:	50                   	push   eax
c00245fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024603:	e8 66 ef ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024610:	75 6e                	jne    c0024680 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024612:	6a 00                	push   0x0
c0024614:	6a 08                	push   0x8
c0024616:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002461d:	50                   	push   eax
c002461e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024624:	e8 45 ef ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024629:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002462e:	50                   	push   eax
c002462f:	6a 09                	push   0x9
c0024631:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024638:	50                   	push   eax
c0024639:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002463f:	e8 2a ef ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024644:	83 c4 20             	add    esp,0x20
c0024647:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002464c:	50                   	push   eax
c002464d:	6a 0a                	push   0xa
c002464f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024656:	50                   	push   eax
c0024657:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002465d:	e8 0c ef ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024662:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024667:	50                   	push   eax
c0024668:	6a 0b                	push   0xb
c002466a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024671:	50                   	push   eax
c0024672:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024678:	e8 f1 ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002467d:	83 c4 20             	add    esp,0x20
c0024680:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024685:	50                   	push   eax
c0024686:	6a 02                	push   0x2
c0024688:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002468f:	50                   	push   eax
c0024690:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024696:	e8 d3 ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002469b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00246a0:	50                   	push   eax
c00246a1:	6a 03                	push   0x3
c00246a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246aa:	50                   	push   eax
c00246ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246b1:	e8 b8 ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b6:	83 c4 20             	add    esp,0x20
c00246b9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00246be:	50                   	push   eax
c00246bf:	6a 04                	push   0x4
c00246c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246c8:	50                   	push   eax
c00246c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246cf:	e8 9a ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00246d9:	50                   	push   eax
c00246da:	6a 05                	push   0x5
c00246dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246e3:	50                   	push   eax
c00246e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246ea:	e8 7f ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ef:	83 c4 20             	add    esp,0x20
c00246f2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00246f7:	0f 94 c0             	sete   al
c00246fa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00246ff:	74 09                	je     c002470a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024701:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024708:	eb 07                	jmp    c0024711 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002470a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024711:	0f b6 c0             	movzx  eax,al
c0024714:	50                   	push   eax
c0024715:	6a 07                	push   0x7
c0024717:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002471e:	50                   	push   eax
c002471f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024725:	e8 44 ee ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002472a:	c7 04 24 a1 ce 02 c0 	mov    DWORD PTR [esp],0xc002cea1
c0024731:	e8 d5 e2 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024736:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002473a:	83 c4 10             	add    esp,0x10
c002473d:	85 f6                	test   esi,esi
c002473f:	0f 84 f7 00 00 00    	je     c002483c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0024745:	83 ec 0c             	sub    esp,0xc
c0024748:	68 a4 ce 02 c0       	push   0xc002cea4
c002474d:	e8 b9 e2 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024752:	83 c4 0c             	add    esp,0xc
c0024755:	6a 01                	push   0x1
c0024757:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002475e:	50                   	push   eax
c002475f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024765:	e8 a6 f8 ff ff       	call   c0024010 <IDE::polling(unsigned char, unsigned int)>
c002476a:	c7 04 24 a7 ce 02 c0 	mov    DWORD PTR [esp],0xc002cea7
c0024771:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0024775:	e8 91 e2 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c002477a:	83 c4 10             	add    esp,0x10
c002477d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0024781:	84 c0                	test   al,al
c0024783:	74 2b                	je     c00247b0 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0024785:	0f b6 f8             	movzx  edi,al
c0024788:	57                   	push   edi
c0024789:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024790:	50                   	push   eax
c0024791:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024798:	50                   	push   eax
c0024799:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002479f:	e8 bc f7 ff ff       	call   c0023f60 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247a4:	c7 04 24 aa ce 02 c0 	mov    DWORD PTR [esp],0xc002ceaa
c00247ab:	e9 bc 00 00 00       	jmp    c002486c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c00247b0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00247b5:	74 50                	je     c0024807 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c00247b7:	83 ec 0c             	sub    esp,0xc
c00247ba:	31 ed                	xor    ebp,ebp
c00247bc:	68 b5 ce 02 c0       	push   0xc002ceb5
c00247c1:	e8 45 e2 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00247c6:	83 c4 10             	add    esp,0x10
c00247c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00247cd:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00247d1:	50                   	push   eax
c00247d2:	50                   	push   eax
c00247d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247da:	50                   	push   eax
c00247db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247e1:	e8 76 ed ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c00247e6:	89 c2                	mov    edx,eax
c00247e8:	89 f8                	mov    eax,edi
c00247ea:	66 ef                	out    dx,ax
c00247ec:	45                   	inc    ebp
c00247ed:	83 c4 10             	add    esp,0x10
c00247f0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00247f6:	75 d1                	jne    c00247c9 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00247f8:	83 ec 0c             	sub    esp,0xc
c00247fb:	68 b8 ce 02 c0       	push   0xc002ceb8
c0024800:	e8 06 e2 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024805:	eb 24                	jmp    c002482b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0024807:	51                   	push   ecx
c0024808:	51                   	push   ecx
c0024809:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024810:	50                   	push   eax
c0024811:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024817:	e8 40 ed ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c002481c:	b9 00 01 00 00       	mov    ecx,0x100
c0024821:	89 c2                	mov    edx,eax
c0024823:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024827:	fc                   	cld    
c0024828:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002482b:	83 c4 10             	add    esp,0x10
c002482e:	4e                   	dec    esi
c002482f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024837:	e9 01 ff ff ff       	jmp    c002473d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c002483c:	31 ff                	xor    edi,edi
c002483e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024843:	74 2f                	je     c0024874 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0024845:	83 ec 0c             	sub    esp,0xc
c0024848:	68 bb ce 02 c0       	push   0xc002cebb
c002484d:	e8 b9 e1 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024852:	58                   	pop    eax
c0024853:	31 c0                	xor    eax,eax
c0024855:	5a                   	pop    edx
c0024856:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002485b:	0f 94 c0             	sete   al
c002485e:	50                   	push   eax
c002485f:	53                   	push   ebx
c0024860:	e8 89 fb ff ff       	call   c00243ee <ATA::flush(bool)>
c0024865:	c7 04 24 be ce 02 c0 	mov    DWORD PTR [esp],0xc002cebe
c002486c:	e8 9a e1 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024871:	83 c4 10             	add    esp,0x10
c0024874:	83 c4 2c             	add    esp,0x2c
c0024877:	89 f8                	mov    eax,edi
c0024879:	5b                   	pop    ebx
c002487a:	5e                   	pop    esi
c002487b:	5f                   	pop    edi
c002487c:	5d                   	pop    ebp
c002487d:	c3                   	ret    

c002487e <ATA::read(unsigned long long, int, void*)>:
c002487e:	57                   	push   edi
c002487f:	b8 04 00 00 00       	mov    eax,0x4
c0024884:	56                   	push   esi
c0024885:	53                   	push   ebx
c0024886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002488a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002488e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024891:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024895:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024899:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002489f:	77 25                	ja     c00248c6 <ATA::read(unsigned long long, int, void*)+0x48>
c00248a1:	b8 06 00 00 00       	mov    eax,0x6
c00248a6:	85 f6                	test   esi,esi
c00248a8:	74 1c                	je     c00248c6 <ATA::read(unsigned long long, int, void*)+0x48>
c00248aa:	50                   	push   eax
c00248ab:	50                   	push   eax
c00248ac:	6a 00                	push   0x0
c00248ae:	56                   	push   esi
c00248af:	52                   	push   edx
c00248b0:	53                   	push   ebx
c00248b1:	51                   	push   ecx
c00248b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248b6:	e8 cd fb ff ff       	call   c0024488 <ATA::access(unsigned long long, int, void*, bool)>
c00248bb:	83 c4 20             	add    esp,0x20
c00248be:	85 c0                	test   eax,eax
c00248c0:	0f 95 c0             	setne  al
c00248c3:	0f b6 c0             	movzx  eax,al
c00248c6:	5b                   	pop    ebx
c00248c7:	5e                   	pop    esi
c00248c8:	5f                   	pop    edi
c00248c9:	c3                   	ret    

c00248ca <ATA::write(unsigned long long, int, void*)>:
c00248ca:	55                   	push   ebp
c00248cb:	57                   	push   edi
c00248cc:	56                   	push   esi
c00248cd:	53                   	push   ebx
c00248ce:	83 ec 18             	sub    esp,0x18
c00248d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00248d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00248d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00248dd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00248e1:	68 c1 ce 02 c0       	push   0xc002cec1
c00248e6:	e8 20 e1 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c00248eb:	8d 53 ff             	lea    edx,[ebx-0x1]
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	b8 04 00 00 00       	mov    eax,0x4
c00248f6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00248fc:	77 25                	ja     c0024923 <ATA::write(unsigned long long, int, void*)+0x59>
c00248fe:	b8 06 00 00 00       	mov    eax,0x6
c0024903:	85 f6                	test   esi,esi
c0024905:	74 1c                	je     c0024923 <ATA::write(unsigned long long, int, void*)+0x59>
c0024907:	50                   	push   eax
c0024908:	50                   	push   eax
c0024909:	6a 01                	push   0x1
c002490b:	56                   	push   esi
c002490c:	53                   	push   ebx
c002490d:	55                   	push   ebp
c002490e:	57                   	push   edi
c002490f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024913:	e8 70 fb ff ff       	call   c0024488 <ATA::access(unsigned long long, int, void*, bool)>
c0024918:	83 c4 20             	add    esp,0x20
c002491b:	85 c0                	test   eax,eax
c002491d:	0f 95 c0             	setne  al
c0024920:	0f b6 c0             	movzx  eax,al
c0024923:	83 c4 0c             	add    esp,0xc
c0024926:	5b                   	pop    ebx
c0024927:	5e                   	pop    esi
c0024928:	5f                   	pop    edi
c0024929:	5d                   	pop    ebp
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <ATA::detectCHS()>:
c002492c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024930:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024936:	c1 e0 06             	shl    eax,0x6
c0024939:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002493f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024949:	c7 44 24 04 cd ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cecd
c0024951:	e9 53 5a ff ff       	jmp    c001a3a9 <Krnl::panic(char const*)>

c0024956 <ATA::open(int, int, void*)>:
c0024956:	53                   	push   ebx
c0024957:	83 ec 08             	sub    esp,0x8
c002495a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002495e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024962:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024966:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002496c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024972:	c1 e0 06             	shl    eax,0x6
c0024975:	01 d0                	add    eax,edx
c0024977:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002497e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024984:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002498b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024995:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002499b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00249a2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00249a9:	75 0c                	jne    c00249b7 <ATA::open(int, int, void*)+0x61>
c00249ab:	83 ec 0c             	sub    esp,0xc
c00249ae:	53                   	push   ebx
c00249af:	e8 78 ff ff ff       	call   c002492c <ATA::detectCHS()>
c00249b4:	83 c4 10             	add    esp,0x10
c00249b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249bd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00249c3:	c1 e0 06             	shl    eax,0x6
c00249c6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00249cd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00249d7:	d1 e8                	shr    eax,1
c00249d9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00249df:	6a 04                	push   0x4
c00249e1:	6a 0c                	push   0xc
c00249e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249ea:	50                   	push   eax
c00249eb:	52                   	push   edx
c00249ec:	e8 7d eb ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f1:	90                   	nop
c00249f2:	90                   	nop
c00249f3:	6a 00                	push   0x0
c00249f5:	6a 0c                	push   0xc
c00249f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249fe:	50                   	push   eax
c00249ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a05:	e8 64 eb ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a0a:	83 c4 14             	add    esp,0x14
c0024a0d:	53                   	push   ebx
c0024a0e:	e8 cf f8 fe ff       	call   c00142e2 <PhysicalDisk::startCache()>
c0024a13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a16:	e8 4f 1b ff ff       	call   c001656a <createPartitionsForDisk(PhysicalDisk*)>
c0024a1b:	31 c0                	xor    eax,eax
c0024a1d:	83 c4 18             	add    esp,0x18
c0024a20:	5b                   	pop    ebx
c0024a21:	c3                   	ret    

c0024a22 <ATAPI::write(unsigned long long, int, void*)>:
c0024a22:	b8 03 00 00 00       	mov    eax,0x3
c0024a27:	c3                   	ret    

c0024a28 <ATAPI::close(int, int, void*)>:
c0024a28:	83 ec 0c             	sub    esp,0xc
c0024a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a35:	85 c0                	test   eax,eax
c0024a37:	74 0c                	je     c0024a45 <ATAPI::close(int, int, void*)+0x1d>
c0024a39:	83 ec 0c             	sub    esp,0xc
c0024a3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a3e:	50                   	push   eax
c0024a3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a42:	83 c4 10             	add    esp,0x10
c0024a45:	31 c0                	xor    eax,eax
c0024a47:	83 c4 0c             	add    esp,0xc
c0024a4a:	c3                   	ret    
c0024a4b:	90                   	nop

c0024a4c <ATAPI::ATAPI()>:
c0024a4c:	83 ec 0c             	sub    esp,0xc
c0024a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a53:	83 ec 04             	sub    esp,0x4
c0024a56:	68 00 08 00 00       	push   0x800
c0024a5b:	68 05 d0 02 c0       	push   0xc002d005
c0024a60:	50                   	push   eax
c0024a61:	e8 14 f8 fe ff       	call   c001427a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a66:	83 c4 10             	add    esp,0x10
c0024a69:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0024a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a72:	89 10                	mov    DWORD PTR [eax],edx
c0024a74:	90                   	nop
c0024a75:	83 c4 0c             	add    esp,0xc
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <ATAPI::readyForCommand()>:
c0024a7a:	56                   	push   esi
c0024a7b:	53                   	push   ebx
c0024a7c:	31 db                	xor    ebx,ebx
c0024a7e:	50                   	push   eax
c0024a7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a83:	50                   	push   eax
c0024a84:	6a 0c                	push   0xc
c0024a86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024a8d:	50                   	push   eax
c0024a8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a94:	e8 95 eb ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0024a99:	83 c4 10             	add    esp,0x10
c0024a9c:	a8 88                	test   al,0x88
c0024a9e:	74 23                	je     c0024ac3 <ATAPI::readyForCommand()+0x49>
c0024aa0:	43                   	inc    ebx
c0024aa1:	83 fb 63             	cmp    ebx,0x63
c0024aa4:	7e dd                	jle    c0024a83 <ATAPI::readyForCommand()+0x9>
c0024aa6:	51                   	push   ecx
c0024aa7:	51                   	push   ecx
c0024aa8:	6a 00                	push   0x0
c0024aaa:	68 40 42 0f 00       	push   0xf4240
c0024aaf:	e8 61 97 ff ff       	call   c001e215 <nanoSleep(unsigned long long)>
c0024ab4:	83 c4 10             	add    esp,0x10
c0024ab7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024abd:	75 c4                	jne    c0024a83 <ATAPI::readyForCommand()+0x9>
c0024abf:	31 c0                	xor    eax,eax
c0024ac1:	eb 02                	jmp    c0024ac5 <ATAPI::readyForCommand()+0x4b>
c0024ac3:	b0 01                	mov    al,0x1
c0024ac5:	5a                   	pop    edx
c0024ac6:	5b                   	pop    ebx
c0024ac7:	5e                   	pop    esi
c0024ac8:	c3                   	ret    
c0024ac9:	90                   	nop

c0024aca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024aca:	55                   	push   ebp
c0024acb:	57                   	push   edi
c0024acc:	56                   	push   esi
c0024acd:	53                   	push   ebx
c0024ace:	83 ec 20             	sub    esp,0x20
c0024ad1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ad5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ad9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024add:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ae1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024ae5:	6a 01                	push   0x1
c0024ae7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024aee:	50                   	push   eax
c0024aef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024af5:	e8 80 ec ff ff       	call   c002377a <IDE::enableIRQs(unsigned char, bool)>
c0024afa:	5e                   	pop    esi
c0024afb:	58                   	pop    eax
c0024afc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b03:	50                   	push   eax
c0024b04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b0a:	e8 39 ea ff ff       	call   c0023548 <IDE::prepareInterrupt(unsigned char)>
c0024b0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024b12:	e8 63 ff ff ff       	call   c0024a7a <ATAPI::readyForCommand()>
c0024b17:	83 c4 10             	add    esp,0x10
c0024b1a:	84 c0                	test   al,al
c0024b1c:	75 0a                	jne    c0024b28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024b1e:	bb 01 00 00 00       	mov    ebx,0x1
c0024b23:	e9 57 02 00 00       	jmp    c0024d7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024b28:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024b2e:	c1 e0 04             	shl    eax,0x4
c0024b31:	0f b6 c0             	movzx  eax,al
c0024b34:	50                   	push   eax
c0024b35:	6a 06                	push   0x6
c0024b37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b3e:	50                   	push   eax
c0024b3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b45:	e8 24 ea ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b4a:	6a 00                	push   0x0
c0024b4c:	6a 01                	push   0x1
c0024b4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b55:	50                   	push   eax
c0024b56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b5c:	e8 0d ea ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b61:	83 c4 20             	add    esp,0x20
c0024b64:	0f b6 c3             	movzx  eax,bl
c0024b67:	0f b6 df             	movzx  ebx,bh
c0024b6a:	50                   	push   eax
c0024b6b:	6a 04                	push   0x4
c0024b6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b74:	50                   	push   eax
c0024b75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b7b:	e8 ee e9 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b80:	53                   	push   ebx
c0024b81:	6a 05                	push   0x5
c0024b83:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024b8a:	50                   	push   eax
c0024b8b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b91:	e8 d8 e9 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b96:	83 c4 20             	add    esp,0x20
c0024b99:	68 a0 00 00 00       	push   0xa0
c0024b9e:	6a 07                	push   0x7
c0024ba0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ba7:	50                   	push   eax
c0024ba8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bae:	e8 bb e9 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb3:	83 c4 0c             	add    esp,0xc
c0024bb6:	6a 01                	push   0x1
c0024bb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bbf:	50                   	push   eax
c0024bc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bc6:	e8 45 f4 ff ff       	call   c0024010 <IDE::polling(unsigned char, unsigned int)>
c0024bcb:	83 c4 10             	add    esp,0x10
c0024bce:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024bd4:	84 c0                	test   al,al
c0024bd6:	74 23                	je     c0024bfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024bd8:	0f b6 d8             	movzx  ebx,al
c0024bdb:	0f b6 d2             	movzx  edx,dl
c0024bde:	53                   	push   ebx
c0024bdf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024be6:	50                   	push   eax
c0024be7:	52                   	push   edx
c0024be8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bee:	e8 6d f3 ff ff       	call   c0023f60 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024bf3:	83 c4 10             	add    esp,0x10
c0024bf6:	e9 84 01 00 00       	jmp    c0024d7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024bfb:	0f b6 d2             	movzx  edx,dl
c0024bfe:	53                   	push   ebx
c0024bff:	53                   	push   ebx
c0024c00:	52                   	push   edx
c0024c01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c07:	e8 50 e9 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024c0c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024c10:	b9 06 00 00 00       	mov    ecx,0x6
c0024c15:	89 c2                	mov    edx,eax
c0024c17:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024c1a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024c1e:	83 c4 10             	add    esp,0x10
c0024c21:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024c27:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024c2e:	85 db                	test   ebx,ebx
c0024c30:	0f 84 ec 00 00 00    	je     c0024d22 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024c36:	51                   	push   ecx
c0024c37:	51                   	push   ecx
c0024c38:	52                   	push   edx
c0024c39:	50                   	push   eax
c0024c3a:	e8 9d ea ff ff       	call   c00236dc <IDE::waitInterrupt(unsigned char)>
c0024c3f:	83 c4 10             	add    esp,0x10
c0024c42:	84 c0                	test   al,al
c0024c44:	0f 84 d4 fe ff ff    	je     c0024b1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024c4a:	56                   	push   esi
c0024c4b:	56                   	push   esi
c0024c4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c53:	50                   	push   eax
c0024c54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c5a:	e8 e9 e8 ff ff       	call   c0023548 <IDE::prepareInterrupt(unsigned char)>
c0024c5f:	83 c4 0c             	add    esp,0xc
c0024c62:	6a 04                	push   0x4
c0024c64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c6b:	50                   	push   eax
c0024c6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c72:	e8 b7 e9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0024c77:	83 c4 0c             	add    esp,0xc
c0024c7a:	89 c6                	mov    esi,eax
c0024c7c:	6a 05                	push   0x5
c0024c7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024c85:	50                   	push   eax
c0024c86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024c8c:	e8 9d e9 ff ff       	call   c002362e <IDE::read(unsigned char, unsigned char)>
c0024c91:	89 f1                	mov    ecx,esi
c0024c93:	0f b6 c0             	movzx  eax,al
c0024c96:	0f b6 f1             	movzx  esi,cl
c0024c99:	c1 e0 08             	shl    eax,0x8
c0024c9c:	09 c6                	or     esi,eax
c0024c9e:	d1 fe                	sar    esi,1
c0024ca0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024ca4:	83 c4 10             	add    esp,0x10
c0024ca7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024cac:	74 41                	je     c0024cef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024cae:	31 c9                	xor    ecx,ecx
c0024cb0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024cb6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024cbd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024cc1:	75 0a                	jne    c0024ccd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024cc3:	01 c9                	add    ecx,ecx
c0024cc5:	01 cd                	add    ebp,ecx
c0024cc7:	4b                   	dec    ebx
c0024cc8:	e9 54 ff ff ff       	jmp    c0024c21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024ccd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024cd6:	51                   	push   ecx
c0024cd7:	51                   	push   ecx
c0024cd8:	52                   	push   edx
c0024cd9:	50                   	push   eax
c0024cda:	e8 7d e8 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024cdf:	89 c2                	mov    edx,eax
c0024ce1:	89 f0                	mov    eax,esi
c0024ce3:	66 ef                	out    dx,ax
c0024ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024ce9:	83 c4 10             	add    esp,0x10
c0024cec:	41                   	inc    ecx
c0024ced:	eb c1                	jmp    c0024cb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024cef:	31 f6                	xor    esi,esi
c0024cf1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024cf7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024cfe:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024d02:	75 06                	jne    c0024d0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024d04:	01 f6                	add    esi,esi
c0024d06:	01 f5                	add    ebp,esi
c0024d08:	eb bd                	jmp    c0024cc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024d0a:	51                   	push   ecx
c0024d0b:	51                   	push   ecx
c0024d0c:	52                   	push   edx
c0024d0d:	50                   	push   eax
c0024d0e:	e8 49 e8 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024d13:	89 c2                	mov    edx,eax
c0024d15:	66 ed                	in     ax,dx
c0024d17:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024d1c:	83 c4 10             	add    esp,0x10
c0024d1f:	46                   	inc    esi
c0024d20:	eb cf                	jmp    c0024cf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024d22:	51                   	push   ecx
c0024d23:	51                   	push   ecx
c0024d24:	52                   	push   edx
c0024d25:	50                   	push   eax
c0024d26:	e8 b1 e9 ff ff       	call   c00236dc <IDE::waitInterrupt(unsigned char)>
c0024d2b:	83 c4 10             	add    esp,0x10
c0024d2e:	84 c0                	test   al,al
c0024d30:	0f 84 e8 fd ff ff    	je     c0024b1e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024d36:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024d3b:	52                   	push   edx
c0024d3c:	52                   	push   edx
c0024d3d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d44:	50                   	push   eax
c0024d45:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d4b:	e8 f8 e7 ff ff       	call   c0023548 <IDE::prepareInterrupt(unsigned char)>
c0024d50:	83 c4 10             	add    esp,0x10
c0024d53:	50                   	push   eax
c0024d54:	50                   	push   eax
c0024d55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d5c:	50                   	push   eax
c0024d5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d63:	e8 f4 e7 ff ff       	call   c002355c <IDE::getBase(unsigned char)>
c0024d68:	8d 50 07             	lea    edx,[eax+0x7]
c0024d6b:	ec                   	in     al,dx
c0024d6c:	83 c4 10             	add    esp,0x10
c0024d6f:	a8 88                	test   al,0x88
c0024d71:	74 0a                	je     c0024d7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024d73:	4b                   	dec    ebx
c0024d74:	75 dd                	jne    c0024d53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024d76:	bb 02 00 00 00       	mov    ebx,0x2
c0024d7b:	eb 02                	jmp    c0024d7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024d7d:	31 db                	xor    ebx,ebx
c0024d7f:	83 c4 1c             	add    esp,0x1c
c0024d82:	89 d8                	mov    eax,ebx
c0024d84:	5b                   	pop    ebx
c0024d85:	5e                   	pop    esi
c0024d86:	5f                   	pop    edi
c0024d87:	5d                   	pop    ebp
c0024d88:	c3                   	ret    
c0024d89:	90                   	nop

c0024d8a <ATAPI::diskRemoved()>:
c0024d8a:	83 ec 18             	sub    esp,0x18
c0024d8d:	68 11 d0 02 c0       	push   0xc002d011
c0024d92:	e8 74 dc fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d9b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024da2:	83 c4 1c             	add    esp,0x1c
c0024da5:	c3                   	ret    

c0024da6 <ATAPI::eject()>:
c0024da6:	57                   	push   edi
c0024da7:	b9 03 00 00 00       	mov    ecx,0x3
c0024dac:	53                   	push   ebx
c0024dad:	83 ec 14             	sub    esp,0x14
c0024db0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024db4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024db8:	fc                   	cld    
c0024db9:	31 c0                	xor    eax,eax
c0024dbb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024dbd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024dc2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024dc7:	50                   	push   eax
c0024dc8:	50                   	push   eax
c0024dc9:	6a 00                	push   0x0
c0024dcb:	6a 00                	push   0x0
c0024dcd:	6a 00                	push   0x0
c0024dcf:	6a 02                	push   0x2
c0024dd1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024dd5:	50                   	push   eax
c0024dd6:	53                   	push   ebx
c0024dd7:	e8 ee fc ff ff       	call   c0024aca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ddc:	83 c4 14             	add    esp,0x14
c0024ddf:	53                   	push   ebx
c0024de0:	e8 a5 ff ff ff       	call   c0024d8a <ATAPI::diskRemoved()>
c0024de5:	83 c4 24             	add    esp,0x24
c0024de8:	31 c0                	xor    eax,eax
c0024dea:	5b                   	pop    ebx
c0024deb:	5f                   	pop    edi
c0024dec:	c3                   	ret    
c0024ded:	90                   	nop

c0024dee <ATAPI::diskInserted()>:
c0024dee:	53                   	push   ebx
c0024def:	83 ec 14             	sub    esp,0x14
c0024df2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024df6:	68 28 d0 02 c0       	push   0xc002d028
c0024dfb:	e8 0b dc fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0024e00:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024e07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e0a:	e8 d3 f4 fe ff       	call   c00142e2 <PhysicalDisk::startCache()>
c0024e0f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e13:	83 c4 18             	add    esp,0x18
c0024e16:	5b                   	pop    ebx
c0024e17:	e9 4e 17 ff ff       	jmp    c001656a <createPartitionsForDisk(PhysicalDisk*)>

c0024e1c <ATAPI::detectMedia()>:
c0024e1c:	56                   	push   esi
c0024e1d:	53                   	push   ebx
c0024e1e:	83 ec 28             	sub    esp,0x28
c0024e21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e25:	6a 0c                	push   0xc
c0024e27:	6a 00                	push   0x0
c0024e29:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e2d:	56                   	push   esi
c0024e2e:	e8 1d b9 fd ff       	call   c0000750 <memset>
c0024e33:	58                   	pop    eax
c0024e34:	5a                   	pop    edx
c0024e35:	6a 00                	push   0x0
c0024e37:	6a 00                	push   0x0
c0024e39:	6a 00                	push   0x0
c0024e3b:	6a 00                	push   0x0
c0024e3d:	56                   	push   esi
c0024e3e:	53                   	push   ebx
c0024e3f:	e8 86 fc ff ff       	call   c0024aca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e44:	83 c4 1c             	add    esp,0x1c
c0024e47:	6a 0c                	push   0xc
c0024e49:	6a 00                	push   0x0
c0024e4b:	56                   	push   esi
c0024e4c:	e8 ff b8 fd ff       	call   c0000750 <memset>
c0024e51:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e56:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e5b:	59                   	pop    ecx
c0024e5c:	58                   	pop    eax
c0024e5d:	6a 01                	push   0x1
c0024e5f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024e63:	50                   	push   eax
c0024e64:	6a 00                	push   0x0
c0024e66:	6a 12                	push   0x12
c0024e68:	56                   	push   esi
c0024e69:	53                   	push   ebx
c0024e6a:	e8 5b fc ff ff       	call   c0024aca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e6f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e73:	83 c4 20             	add    esp,0x20
c0024e76:	83 e0 7f             	and    eax,0x7f
c0024e79:	3c 70                	cmp    al,0x70
c0024e7b:	74 15                	je     c0024e92 <ATAPI::detectMedia()+0x76>
c0024e7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024e84:	75 0c                	jne    c0024e92 <ATAPI::detectMedia()+0x76>
c0024e86:	83 ec 0c             	sub    esp,0xc
c0024e89:	53                   	push   ebx
c0024e8a:	e8 5f ff ff ff       	call   c0024dee <ATAPI::diskInserted()>
c0024e8f:	83 c4 10             	add    esp,0x10
c0024e92:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024e96:	83 e0 0f             	and    eax,0xf
c0024e99:	3c 02                	cmp    al,0x2
c0024e9b:	75 1b                	jne    c0024eb8 <ATAPI::detectMedia()+0x9c>
c0024e9d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ea2:	75 2d                	jne    c0024ed1 <ATAPI::detectMedia()+0xb5>
c0024ea4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024eab:	74 24                	je     c0024ed1 <ATAPI::detectMedia()+0xb5>
c0024ead:	83 ec 0c             	sub    esp,0xc
c0024eb0:	53                   	push   ebx
c0024eb1:	e8 d4 fe ff ff       	call   c0024d8a <ATAPI::diskRemoved()>
c0024eb6:	eb 16                	jmp    c0024ece <ATAPI::detectMedia()+0xb2>
c0024eb8:	84 c0                	test   al,al
c0024eba:	75 15                	jne    c0024ed1 <ATAPI::detectMedia()+0xb5>
c0024ebc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ec3:	75 0c                	jne    c0024ed1 <ATAPI::detectMedia()+0xb5>
c0024ec5:	83 ec 0c             	sub    esp,0xc
c0024ec8:	53                   	push   ebx
c0024ec9:	e8 20 ff ff ff       	call   c0024dee <ATAPI::diskInserted()>
c0024ece:	83 c4 10             	add    esp,0x10
c0024ed1:	83 c4 24             	add    esp,0x24
c0024ed4:	5b                   	pop    ebx
c0024ed5:	5e                   	pop    esi
c0024ed6:	c3                   	ret    
c0024ed7:	90                   	nop

c0024ed8 <ATAPI::open(int, int, void*)>:
c0024ed8:	53                   	push   ebx
c0024ed9:	83 ec 08             	sub    esp,0x8
c0024edc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ee4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ee8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024eee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ef4:	c1 e0 06             	shl    eax,0x6
c0024ef7:	01 d0                	add    eax,edx
c0024ef9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024f00:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024f06:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024f0d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f17:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024f1d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f24:	6a 04                	push   0x4
c0024f26:	6a 0c                	push   0xc
c0024f28:	51                   	push   ecx
c0024f29:	52                   	push   edx
c0024f2a:	e8 3f e6 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f2f:	90                   	nop
c0024f30:	90                   	nop
c0024f31:	6a 00                	push   0x0
c0024f33:	6a 0c                	push   0xc
c0024f35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f3c:	50                   	push   eax
c0024f3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f43:	e8 26 e6 ff ff       	call   c002356e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024f4f:	83 c4 14             	add    esp,0x14
c0024f52:	53                   	push   ebx
c0024f53:	e8 c4 fe ff ff       	call   c0024e1c <ATAPI::detectMedia()>
c0024f58:	31 c0                	xor    eax,eax
c0024f5a:	83 c4 18             	add    esp,0x18
c0024f5d:	5b                   	pop    ebx
c0024f5e:	c3                   	ret    
c0024f5f:	90                   	nop

c0024f60 <ATAPI::read(unsigned long long, int, void*)>:
c0024f60:	55                   	push   ebp
c0024f61:	57                   	push   edi
c0024f62:	56                   	push   esi
c0024f63:	53                   	push   ebx
c0024f64:	83 ec 1c             	sub    esp,0x1c
c0024f67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024f6b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f6f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f73:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024f7a:	74 41                	je     c0024fbd <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024f7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f80:	b9 03 00 00 00       	mov    ecx,0x3
c0024f85:	fc                   	cld    
c0024f86:	31 c0                	xor    eax,eax
c0024f88:	86 fb                	xchg   bl,bh
c0024f8a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f8c:	c1 c3 10             	rol    ebx,0x10
c0024f8f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024f94:	89 e8                	mov    eax,ebp
c0024f96:	86 fb                	xchg   bl,bh
c0024f98:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024f9c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024fa0:	50                   	push   eax
c0024fa1:	50                   	push   eax
c0024fa2:	55                   	push   ebp
c0024fa3:	c1 e5 0b             	shl    ebp,0xb
c0024fa6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024faa:	6a 00                	push   0x0
c0024fac:	55                   	push   ebp
c0024fad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fb1:	50                   	push   eax
c0024fb2:	56                   	push   esi
c0024fb3:	e8 12 fb ff ff       	call   c0024aca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024fb8:	83 c4 20             	add    esp,0x20
c0024fbb:	eb 1a                	jmp    c0024fd7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024fbd:	83 ec 0c             	sub    esp,0xc
c0024fc0:	56                   	push   esi
c0024fc1:	e8 56 fe ff ff       	call   c0024e1c <ATAPI::detectMedia()>
c0024fc6:	83 c4 10             	add    esp,0x10
c0024fc9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024fd0:	75 aa                	jne    c0024f7c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024fd2:	b8 02 00 00 00       	mov    eax,0x2
c0024fd7:	83 c4 1c             	add    esp,0x1c
c0024fda:	5b                   	pop    ebx
c0024fdb:	5e                   	pop    esi
c0024fdc:	5f                   	pop    edi
c0024fdd:	5d                   	pop    ebp
c0024fde:	c3                   	ret    
c0024fdf:	90                   	nop

c0024fe0 <SATA::close(int, int, void*)>:
c0024fe0:	83 ec 0c             	sub    esp,0xc
c0024fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fed:	85 c0                	test   eax,eax
c0024fef:	74 0c                	je     c0024ffd <SATA::close(int, int, void*)+0x1d>
c0024ff1:	83 ec 0c             	sub    esp,0xc
c0024ff4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ff6:	50                   	push   eax
c0024ff7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ffa:	83 c4 10             	add    esp,0x10
c0024ffd:	31 c0                	xor    eax,eax
c0024fff:	83 c4 0c             	add    esp,0xc
c0025002:	c3                   	ret    
c0025003:	90                   	nop

c0025004 <SATA::powerSaving(PowerSavingLevel)>:
c0025004:	c3                   	ret    
c0025005:	90                   	nop

c0025006 <SATA::open(int, int, void*)>:
c0025006:	56                   	push   esi
c0025007:	53                   	push   ebx
c0025008:	50                   	push   eax
c0025009:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002500d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025011:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002501b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025021:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002502b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002502f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025039:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002503f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025046:	e8 64 ad fe ff       	call   c000fdaf <Phys::allocatePage()>
c002504b:	89 c6                	mov    esi,eax
c002504d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025053:	81 c6 00 10 00 00    	add    esi,0x1000
c0025059:	e8 51 ad fe ff       	call   c000fdaf <Phys::allocatePage()>
c002505e:	39 c6                	cmp    esi,eax
c0025060:	74 10                	je     c0025072 <SATA::open(int, int, void*)+0x6c>
c0025062:	83 ec 0c             	sub    esp,0xc
c0025065:	68 50 cf 02 c0       	push   0xc002cf50
c002506a:	e8 3a 53 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c002506f:	83 c4 10             	add    esp,0x10
c0025072:	83 ec 0c             	sub    esp,0xc
c0025075:	6a 02                	push   0x2
c0025077:	e8 bd c5 fe ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c002507c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025082:	6a 03                	push   0x3
c0025084:	50                   	push   eax
c0025085:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002508b:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c0025091:	e8 4a cc fe ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025096:	83 c4 14             	add    esp,0x14
c0025099:	53                   	push   ebx
c002509a:	e8 43 f2 fe ff       	call   c00142e2 <PhysicalDisk::startCache()>
c002509f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250a2:	e8 c3 14 ff ff       	call   c001656a <createPartitionsForDisk(PhysicalDisk*)>
c00250a7:	83 c4 14             	add    esp,0x14
c00250aa:	31 c0                	xor    eax,eax
c00250ac:	5b                   	pop    ebx
c00250ad:	5e                   	pop    esi
c00250ae:	c3                   	ret    
c00250af:	90                   	nop

c00250b0 <SATA::SATA()>:
c00250b0:	83 ec 0c             	sub    esp,0xc
c00250b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b7:	83 ec 04             	sub    esp,0x4
c00250ba:	68 00 02 00 00       	push   0x200
c00250bf:	68 64 cf 02 c0       	push   0xc002cf64
c00250c4:	50                   	push   eax
c00250c5:	e8 b0 f1 fe ff       	call   c001427a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250ca:	83 c4 10             	add    esp,0x10
c00250cd:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c00250d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d6:	89 10                	mov    DWORD PTR [eax],edx
c00250d8:	90                   	nop
c00250d9:	83 c4 0c             	add    esp,0xc
c00250dc:	c3                   	ret    
c00250dd:	90                   	nop

c00250de <SATA::access(unsigned long long, int, void*, bool)>:
c00250de:	55                   	push   ebp
c00250df:	57                   	push   edi
c00250e0:	56                   	push   esi
c00250e1:	53                   	push   ebx
c00250e2:	83 ec 2c             	sub    esp,0x2c
c00250e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00250ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00250f1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00250f9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00250fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025102:	7e 10                	jle    c0025114 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025104:	83 ec 0c             	sub    esp,0xc
c0025107:	68 74 cf 02 c0       	push   0xc002cf74
c002510c:	e8 98 52 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0025111:	83 c4 10             	add    esp,0x10
c0025114:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002511a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025126:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002512a:	89 d0                	mov    eax,edx
c002512c:	c1 e0 07             	shl    eax,0x7
c002512f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025133:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002513d:	51                   	push   ecx
c002513e:	8d 42 02             	lea    eax,[edx+0x2]
c0025141:	51                   	push   ecx
c0025142:	c1 e0 07             	shl    eax,0x7
c0025145:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025149:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002514d:	50                   	push   eax
c002514e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025154:	e8 97 ef ff ff       	call   c00240f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025159:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002515d:	83 c4 10             	add    esp,0x10
c0025160:	b8 01 00 00 00       	mov    eax,0x1
c0025165:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002516a:	0f 84 cb 01 00 00    	je     c002533b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025170:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025178:	c1 e0 09             	shl    eax,0x9
c002517b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025180:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025184:	74 0e                	je     c0025194 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025186:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002518c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025190:	89 c1                	mov    ecx,eax
c0025192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025198:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002519e:	8d 42 02             	lea    eax,[edx+0x2]
c00251a1:	c1 e0 07             	shl    eax,0x7
c00251a4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00251aa:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251b0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251ba:	c1 e1 05             	shl    ecx,0x5
c00251bd:	01 c8                	add    eax,ecx
c00251bf:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00251c3:	83 e1 01             	and    ecx,0x1
c00251c6:	89 ce                	mov    esi,ecx
c00251c8:	8a 08                	mov    cl,BYTE PTR [eax]
c00251ca:	c1 e6 06             	shl    esi,0x6
c00251cd:	83 e1 bf             	and    ecx,0xffffffbf
c00251d0:	09 f1                	or     ecx,esi
c00251d2:	88 08                	mov    BYTE PTR [eax],cl
c00251d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251d6:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00251dc:	81 c9 05 00 01 00    	or     ecx,0x10005
c00251e2:	89 08                	mov    DWORD PTR [eax],ecx
c00251e4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00251ea:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00251f0:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00251f6:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00251f9:	50                   	push   eax
c00251fa:	68 90 00 00 00       	push   0x90
c00251ff:	6a 00                	push   0x0
c0025201:	56                   	push   esi
c0025202:	e8 49 b5 fd ff       	call   c0000750 <memset>
c0025207:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002520d:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025211:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025217:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002521b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002521f:	83 c4 10             	add    esp,0x10
c0025222:	48                   	dec    eax
c0025223:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025228:	89 c1                	mov    ecx,eax
c002522a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025230:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025235:	09 c8                	or     eax,ecx
c0025237:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002523d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025240:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025247:	66 25 00 7f          	and    ax,0x7f00
c002524b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002524f:	66 0d 27 80          	or     ax,0x8027
c0025253:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025258:	66 89 06             	mov    WORD PTR [esi],ax
c002525b:	19 c0                	sbb    eax,eax
c002525d:	83 e0 f0             	and    eax,0xfffffff0
c0025260:	83 c0 35             	add    eax,0x35
c0025263:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025266:	89 e8                	mov    eax,ebp
c0025268:	c1 e8 10             	shr    eax,0x10
c002526b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002526e:	89 e8                	mov    eax,ebp
c0025270:	c1 e8 18             	shr    eax,0x18
c0025273:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025276:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002527a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002527d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025281:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025284:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025288:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002528c:	89 d6                	mov    esi,edx
c002528e:	31 c0                	xor    eax,eax
c0025290:	c1 e6 07             	shl    esi,0x7
c0025293:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025297:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002529d:	80 e1 88             	and    cl,0x88
c00252a0:	74 0a                	je     c00252ac <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00252a2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252a7:	74 0a                	je     c00252b3 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00252a9:	40                   	inc    eax
c00252aa:	eb eb                	jmp    c0025297 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00252ac:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252b1:	75 0a                	jne    c00252bd <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00252b3:	83 ec 0c             	sub    esp,0xc
c00252b6:	68 ad cf 02 c0       	push   0xc002cfad
c00252bb:	eb 56                	jmp    c0025313 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00252bd:	b8 01 00 00 00       	mov    eax,0x1
c00252c2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00252c6:	c1 e2 07             	shl    edx,0x7
c00252c9:	d3 e0                	shl    eax,cl
c00252cb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00252cf:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00252d5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00252db:	85 c8                	test   eax,ecx
c00252dd:	74 20                	je     c00252ff <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00252df:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00252e5:	0f ba e1 1e          	bt     ecx,0x1e
c00252e9:	73 ea                	jae    c00252d5 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00252eb:	83 ec 0c             	sub    esp,0xc
c00252ee:	68 bb cf 02 c0       	push   0xc002cfbb
c00252f3:	e8 b1 50 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c00252f8:	83 c4 10             	add    esp,0x10
c00252fb:	31 c0                	xor    eax,eax
c00252fd:	eb 3c                	jmp    c002533b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00252ff:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025305:	0f ba e0 1e          	bt     eax,0x1e
c0025309:	73 17                	jae    c0025322 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002530b:	83 ec 0c             	sub    esp,0xc
c002530e:	68 bb cf 02 c0       	push   0xc002cfbb
c0025313:	e8 91 50 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0025318:	83 c4 10             	add    esp,0x10
c002531b:	b8 01 00 00 00       	mov    eax,0x1
c0025320:	eb 19                	jmp    c002533b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025322:	31 c0                	xor    eax,eax
c0025324:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025329:	75 10                	jne    c002533b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002532b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025331:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025335:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025339:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002533b:	83 c4 2c             	add    esp,0x2c
c002533e:	5b                   	pop    ebx
c002533f:	5e                   	pop    esi
c0025340:	5f                   	pop    edi
c0025341:	5d                   	pop    ebp
c0025342:	c3                   	ret    
c0025343:	90                   	nop

c0025344 <SATA::read(unsigned long long, int, void*)>:
c0025344:	57                   	push   edi
c0025345:	b8 04 00 00 00       	mov    eax,0x4
c002534a:	56                   	push   esi
c002534b:	53                   	push   ebx
c002534c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025350:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025354:	8d 7a ff             	lea    edi,[edx-0x1]
c0025357:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002535b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002535f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025365:	77 25                	ja     c002538c <SATA::read(unsigned long long, int, void*)+0x48>
c0025367:	b8 06 00 00 00       	mov    eax,0x6
c002536c:	85 f6                	test   esi,esi
c002536e:	74 1c                	je     c002538c <SATA::read(unsigned long long, int, void*)+0x48>
c0025370:	50                   	push   eax
c0025371:	50                   	push   eax
c0025372:	6a 00                	push   0x0
c0025374:	56                   	push   esi
c0025375:	52                   	push   edx
c0025376:	53                   	push   ebx
c0025377:	51                   	push   ecx
c0025378:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002537c:	e8 5d fd ff ff       	call   c00250de <SATA::access(unsigned long long, int, void*, bool)>
c0025381:	83 c4 20             	add    esp,0x20
c0025384:	85 c0                	test   eax,eax
c0025386:	0f 95 c0             	setne  al
c0025389:	0f b6 c0             	movzx  eax,al
c002538c:	5b                   	pop    ebx
c002538d:	5e                   	pop    esi
c002538e:	5f                   	pop    edi
c002538f:	c3                   	ret    

c0025390 <SATA::write(unsigned long long, int, void*)>:
c0025390:	55                   	push   ebp
c0025391:	b8 04 00 00 00       	mov    eax,0x4
c0025396:	57                   	push   edi
c0025397:	56                   	push   esi
c0025398:	53                   	push   ebx
c0025399:	83 ec 0c             	sub    esp,0xc
c002539c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00253a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00253a4:	8d 73 ff             	lea    esi,[ebx-0x1]
c00253a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00253ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253af:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00253b5:	77 3d                	ja     c00253f4 <SATA::write(unsigned long long, int, void*)+0x64>
c00253b7:	b8 06 00 00 00       	mov    eax,0x6
c00253bc:	85 ed                	test   ebp,ebp
c00253be:	74 34                	je     c00253f4 <SATA::write(unsigned long long, int, void*)+0x64>
c00253c0:	c1 e3 09             	shl    ebx,0x9
c00253c3:	01 eb                	add    ebx,ebp
c00253c5:	89 d6                	mov    esi,edx
c00253c7:	89 cf                	mov    edi,ecx
c00253c9:	83 c6 01             	add    esi,0x1
c00253cc:	83 d7 00             	adc    edi,0x0
c00253cf:	50                   	push   eax
c00253d0:	50                   	push   eax
c00253d1:	6a 01                	push   0x1
c00253d3:	55                   	push   ebp
c00253d4:	81 c5 00 02 00 00    	add    ebp,0x200
c00253da:	6a 01                	push   0x1
c00253dc:	51                   	push   ecx
c00253dd:	52                   	push   edx
c00253de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00253e2:	e8 f7 fc ff ff       	call   c00250de <SATA::access(unsigned long long, int, void*, bool)>
c00253e7:	83 c4 20             	add    esp,0x20
c00253ea:	89 f2                	mov    edx,esi
c00253ec:	89 f9                	mov    ecx,edi
c00253ee:	39 dd                	cmp    ebp,ebx
c00253f0:	75 d3                	jne    c00253c5 <SATA::write(unsigned long long, int, void*)+0x35>
c00253f2:	31 c0                	xor    eax,eax
c00253f4:	83 c4 0c             	add    esp,0xc
c00253f7:	5b                   	pop    ebx
c00253f8:	5e                   	pop    esi
c00253f9:	5f                   	pop    edi
c00253fa:	5d                   	pop    ebp
c00253fb:	c3                   	ret    

c00253fc <SATAPI::write(unsigned long long, int, void*)>:
c00253fc:	b8 03 00 00 00       	mov    eax,0x3
c0025401:	c3                   	ret    

c0025402 <SATAPI::close(int, int, void*)>:
c0025402:	83 ec 0c             	sub    esp,0xc
c0025405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025409:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002540f:	85 c0                	test   eax,eax
c0025411:	74 0c                	je     c002541f <SATAPI::close(int, int, void*)+0x1d>
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	8b 10                	mov    edx,DWORD PTR [eax]
c0025418:	50                   	push   eax
c0025419:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	31 c0                	xor    eax,eax
c0025421:	83 c4 0c             	add    esp,0xc
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <SATAPI::SATAPI()>:
c0025426:	83 ec 0c             	sub    esp,0xc
c0025429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542d:	83 ec 04             	sub    esp,0x4
c0025430:	68 00 08 00 00       	push   0x800
c0025435:	68 04 d0 02 c0       	push   0xc002d004
c002543a:	50                   	push   eax
c002543b:	e8 3a ee fe ff       	call   c001427a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025440:	83 c4 10             	add    esp,0x10
c0025443:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c0025448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544c:	89 10                	mov    DWORD PTR [eax],edx
c002544e:	90                   	nop
c002544f:	83 c4 0c             	add    esp,0xc
c0025452:	c3                   	ret    
c0025453:	90                   	nop

c0025454 <SATAPI::diskRemoved()>:
c0025454:	83 ec 18             	sub    esp,0x18
c0025457:	68 10 d0 02 c0       	push   0xc002d010
c002545c:	e8 aa d5 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0025461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025465:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002546c:	83 c4 1c             	add    esp,0x1c
c002546f:	c3                   	ret    

c0025470 <SATAPI::diskInserted()>:
c0025470:	53                   	push   ebx
c0025471:	83 ec 14             	sub    esp,0x14
c0025474:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025478:	68 27 d0 02 c0       	push   0xc002d027
c002547d:	e8 89 d5 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0025482:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025489:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002548c:	e8 51 ee fe ff       	call   c00142e2 <PhysicalDisk::startCache()>
c0025491:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025495:	83 c4 18             	add    esp,0x18
c0025498:	5b                   	pop    ebx
c0025499:	e9 cc 10 ff ff       	jmp    c001656a <createPartitionsForDisk(PhysicalDisk*)>

c002549e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002549e:	55                   	push   ebp
c002549f:	57                   	push   edi
c00254a0:	56                   	push   esi
c00254a1:	53                   	push   ebx
c00254a2:	83 ec 34             	sub    esp,0x34
c00254a5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00254a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00254ad:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00254b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00254b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00254b9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00254c9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00254cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00254d3:	c1 e0 07             	shl    eax,0x7
c00254d6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00254da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00254de:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ec:	8d 58 02             	lea    ebx,[eax+0x2]
c00254ef:	c1 e3 07             	shl    ebx,0x7
c00254f2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00254f6:	53                   	push   ebx
c00254f7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254fd:	e8 ee eb ff ff       	call   c00240f0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025502:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025506:	83 c4 10             	add    esp,0x10
c0025509:	b8 01 00 00 00       	mov    eax,0x1
c002550e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025513:	0f 84 85 01 00 00    	je     c002569e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025519:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002551f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025521:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025527:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002552d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025531:	c1 e1 05             	shl    ecx,0x5
c0025534:	01 c8                	add    eax,ecx
c0025536:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025538:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002553e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025544:	89 08                	mov    DWORD PTR [eax],ecx
c0025546:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002554c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025552:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025558:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002555b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002555e:	50                   	push   eax
c002555f:	68 90 00 00 00       	push   0x90
c0025564:	6a 00                	push   0x0
c0025566:	53                   	push   ebx
c0025567:	e8 e4 b1 fd ff       	call   c0000750 <memset>
c002556c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025570:	b9 0c 00 00 00       	mov    ecx,0xc
c0025575:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025577:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c002557d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025581:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025587:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002558b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002558f:	48                   	dec    eax
c0025590:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025595:	89 c1                	mov    ecx,eax
c0025597:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002559d:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255a2:	09 c8                	or     eax,ecx
c00255a4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255aa:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255ad:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255b4:	66 25 00 7f          	and    ax,0x7f00
c00255b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00255bc:	66 0d 27 80          	or     ax,0x8027
c00255c0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00255c4:	66 89 03             	mov    WORD PTR [ebx],ax
c00255c7:	89 d0                	mov    eax,edx
c00255c9:	c1 ea 18             	shr    edx,0x18
c00255cc:	c1 e8 10             	shr    eax,0x10
c00255cf:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00255d2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00255d5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00255d9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00255dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255e0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00255e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00255e7:	83 c4 10             	add    esp,0x10
c00255ea:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00255ee:	31 c0                	xor    eax,eax
c00255f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00255f4:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00255fa:	80 e2 88             	and    dl,0x88
c00255fd:	74 0a                	je     c0025609 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00255ff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025604:	74 0a                	je     c0025610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025606:	40                   	inc    eax
c0025607:	eb eb                	jmp    c00255f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025609:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002560e:	75 0f                	jne    c002561f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	68 ad cf 02 c0       	push   0xc002cfad
c0025618:	e8 8c 4d ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c002561d:	eb 3f                	jmp    c002565e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c002561f:	ba 01 00 00 00       	mov    edx,0x1
c0025624:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002562c:	d3 e2                	shl    edx,cl
c002562e:	c1 e0 07             	shl    eax,0x7
c0025631:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025637:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002563b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025641:	85 ca                	test   edx,ecx
c0025643:	74 23                	je     c0025668 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025645:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c002564b:	0f ba e1 1e          	bt     ecx,0x1e
c002564f:	73 ea                	jae    c002563b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025651:	83 ec 0c             	sub    esp,0xc
c0025654:	68 3f d0 02 c0       	push   0xc002d03f
c0025659:	e8 ad d3 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c002565e:	83 c4 10             	add    esp,0x10
c0025661:	b8 01 00 00 00       	mov    eax,0x1
c0025666:	eb 36                	jmp    c002569e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025668:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002566e:	0f ba e0 1e          	bt     eax,0x1e
c0025672:	73 0a                	jae    c002567e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025674:	83 ec 0c             	sub    esp,0xc
c0025677:	68 52 d0 02 c0       	push   0xc002d052
c002567c:	eb db                	jmp    c0025659 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c002567e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025683:	74 17                	je     c002569c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025685:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002568a:	74 10                	je     c002569c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002568c:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025692:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025696:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002569a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002569c:	31 c0                	xor    eax,eax
c002569e:	83 c4 2c             	add    esp,0x2c
c00256a1:	5b                   	pop    ebx
c00256a2:	5e                   	pop    esi
c00256a3:	5f                   	pop    edi
c00256a4:	5d                   	pop    ebp
c00256a5:	c3                   	ret    

c00256a6 <SATAPI::eject()>:
c00256a6:	57                   	push   edi
c00256a7:	b9 03 00 00 00       	mov    ecx,0x3
c00256ac:	53                   	push   ebx
c00256ad:	83 ec 14             	sub    esp,0x14
c00256b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00256b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00256b8:	fc                   	cld    
c00256b9:	31 c0                	xor    eax,eax
c00256bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00256bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00256c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00256c7:	50                   	push   eax
c00256c8:	6a 00                	push   0x0
c00256ca:	6a 00                	push   0x0
c00256cc:	6a 00                	push   0x0
c00256ce:	6a 00                	push   0x0
c00256d0:	6a 02                	push   0x2
c00256d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00256d6:	50                   	push   eax
c00256d7:	53                   	push   ebx
c00256d8:	e8 c1 fd ff ff       	call   c002549e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00256dd:	83 c4 14             	add    esp,0x14
c00256e0:	53                   	push   ebx
c00256e1:	e8 6e fd ff ff       	call   c0025454 <SATAPI::diskRemoved()>
c00256e6:	83 c4 24             	add    esp,0x24
c00256e9:	31 c0                	xor    eax,eax
c00256eb:	5b                   	pop    ebx
c00256ec:	5f                   	pop    edi
c00256ed:	c3                   	ret    

c00256ee <SATAPI::detectMedia()>:
c00256ee:	56                   	push   esi
c00256ef:	53                   	push   ebx
c00256f0:	83 ec 28             	sub    esp,0x28
c00256f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256f7:	6a 0c                	push   0xc
c00256f9:	6a 00                	push   0x0
c00256fb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00256ff:	56                   	push   esi
c0025700:	e8 4b b0 fd ff       	call   c0000750 <memset>
c0025705:	83 c4 0c             	add    esp,0xc
c0025708:	6a 00                	push   0x0
c002570a:	6a 00                	push   0x0
c002570c:	6a 00                	push   0x0
c002570e:	6a 00                	push   0x0
c0025710:	6a 00                	push   0x0
c0025712:	56                   	push   esi
c0025713:	53                   	push   ebx
c0025714:	e8 85 fd ff ff       	call   c002549e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025719:	83 c4 1c             	add    esp,0x1c
c002571c:	6a 0c                	push   0xc
c002571e:	6a 00                	push   0x0
c0025720:	56                   	push   esi
c0025721:	e8 2a b0 fd ff       	call   c0000750 <memset>
c0025726:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002572b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025730:	83 c4 0c             	add    esp,0xc
c0025733:	6a 01                	push   0x1
c0025735:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025739:	50                   	push   eax
c002573a:	6a 00                	push   0x0
c002573c:	6a 00                	push   0x0
c002573e:	6a 12                	push   0x12
c0025740:	56                   	push   esi
c0025741:	53                   	push   ebx
c0025742:	e8 57 fd ff ff       	call   c002549e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025747:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002574b:	83 c4 20             	add    esp,0x20
c002574e:	83 e0 7f             	and    eax,0x7f
c0025751:	3c 70                	cmp    al,0x70
c0025753:	74 15                	je     c002576a <SATAPI::detectMedia()+0x7c>
c0025755:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002575c:	75 0c                	jne    c002576a <SATAPI::detectMedia()+0x7c>
c002575e:	83 ec 0c             	sub    esp,0xc
c0025761:	53                   	push   ebx
c0025762:	e8 09 fd ff ff       	call   c0025470 <SATAPI::diskInserted()>
c0025767:	83 c4 10             	add    esp,0x10
c002576a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002576e:	83 e0 0f             	and    eax,0xf
c0025771:	3c 02                	cmp    al,0x2
c0025773:	75 1b                	jne    c0025790 <SATAPI::detectMedia()+0xa2>
c0025775:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002577a:	75 2d                	jne    c00257a9 <SATAPI::detectMedia()+0xbb>
c002577c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025783:	74 24                	je     c00257a9 <SATAPI::detectMedia()+0xbb>
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	53                   	push   ebx
c0025789:	e8 c6 fc ff ff       	call   c0025454 <SATAPI::diskRemoved()>
c002578e:	eb 16                	jmp    c00257a6 <SATAPI::detectMedia()+0xb8>
c0025790:	84 c0                	test   al,al
c0025792:	75 15                	jne    c00257a9 <SATAPI::detectMedia()+0xbb>
c0025794:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002579b:	75 0c                	jne    c00257a9 <SATAPI::detectMedia()+0xbb>
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	53                   	push   ebx
c00257a1:	e8 ca fc ff ff       	call   c0025470 <SATAPI::diskInserted()>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	83 c4 24             	add    esp,0x24
c00257ac:	5b                   	pop    ebx
c00257ad:	5e                   	pop    esi
c00257ae:	c3                   	ret    
c00257af:	90                   	nop

c00257b0 <SATAPI::open(int, int, void*)>:
c00257b0:	56                   	push   esi
c00257b1:	53                   	push   ebx
c00257b2:	50                   	push   eax
c00257b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00257b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00257bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00257c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00257cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00257d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00257e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00257e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00257f0:	e8 ba a5 fe ff       	call   c000fdaf <Phys::allocatePage()>
c00257f5:	89 c6                	mov    esi,eax
c00257f7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00257fd:	81 c6 00 10 00 00    	add    esi,0x1000
c0025803:	e8 a7 a5 fe ff       	call   c000fdaf <Phys::allocatePage()>
c0025808:	39 c6                	cmp    esi,eax
c002580a:	74 10                	je     c002581c <SATAPI::open(int, int, void*)+0x6c>
c002580c:	83 ec 0c             	sub    esp,0xc
c002580f:	68 67 d0 02 c0       	push   0xc002d067
c0025814:	e8 90 4b ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0025819:	83 c4 10             	add    esp,0x10
c002581c:	83 ec 0c             	sub    esp,0xc
c002581f:	6a 02                	push   0x2
c0025821:	e8 13 be fe ff       	call   c0011639 <Virt::allocateKernelVirtualPages(int)>
c0025826:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002582c:	6a 03                	push   0x3
c002582e:	50                   	push   eax
c002582f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025835:	ff 35 d0 e7 02 c0    	push   DWORD PTR ds:0xc002e7d0
c002583b:	e8 a0 c4 fe ff       	call   c0011ce0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025840:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025847:	83 c4 14             	add    esp,0x14
c002584a:	53                   	push   ebx
c002584b:	e8 9e fe ff ff       	call   c00256ee <SATAPI::detectMedia()>
c0025850:	83 c4 14             	add    esp,0x14
c0025853:	31 c0                	xor    eax,eax
c0025855:	5b                   	pop    ebx
c0025856:	5e                   	pop    esi
c0025857:	c3                   	ret    

c0025858 <SATAPI::read(unsigned long long, int, void*)>:
c0025858:	55                   	push   ebp
c0025859:	57                   	push   edi
c002585a:	56                   	push   esi
c002585b:	53                   	push   ebx
c002585c:	83 ec 1c             	sub    esp,0x1c
c002585f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025863:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025867:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002586b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025872:	74 19                	je     c002588d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025874:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025879:	7e 2e                	jle    c00258a9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002587b:	83 ec 0c             	sub    esp,0xc
c002587e:	68 7d d0 02 c0       	push   0xc002d07d
c0025883:	e8 21 4b ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0025888:	83 c4 10             	add    esp,0x10
c002588b:	eb 1c                	jmp    c00258a9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002588d:	83 ec 0c             	sub    esp,0xc
c0025890:	55                   	push   ebp
c0025891:	e8 58 fe ff ff       	call   c00256ee <SATAPI::detectMedia()>
c0025896:	83 c4 10             	add    esp,0x10
c0025899:	b8 02 00 00 00       	mov    eax,0x2
c002589e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00258a5:	75 cd                	jne    c0025874 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00258a7:	eb 49                	jmp    c00258f2 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00258a9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00258ad:	b9 03 00 00 00       	mov    ecx,0x3
c00258b2:	fc                   	cld    
c00258b3:	31 c0                	xor    eax,eax
c00258b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00258b7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00258bc:	89 d8                	mov    eax,ebx
c00258be:	86 e0                	xchg   al,ah
c00258c0:	c1 c0 10             	rol    eax,0x10
c00258c3:	86 e0                	xchg   al,ah
c00258c5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00258c9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00258cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00258d1:	50                   	push   eax
c00258d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00258d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00258da:	56                   	push   esi
c00258db:	53                   	push   ebx
c00258dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00258e0:	c1 e0 0b             	shl    eax,0xb
c00258e3:	50                   	push   eax
c00258e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00258e8:	50                   	push   eax
c00258e9:	55                   	push   ebp
c00258ea:	e8 af fb ff ff       	call   c002549e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00258ef:	83 c4 20             	add    esp,0x20
c00258f2:	83 c4 1c             	add    esp,0x1c
c00258f5:	5b                   	pop    ebx
c00258f6:	5e                   	pop    esi
c00258f7:	5f                   	pop    edi
c00258f8:	5d                   	pop    ebp
c00258f9:	c3                   	ret    

c00258fa <AVX::open(int, int, void*)>:
c00258fa:	83 ec 0c             	sub    esp,0xc
c00258fd:	e8 46 11 00 00       	call   c0026a48 <avxInit>
c0025902:	b8 00 00 00 00       	mov    eax,0x0
c0025907:	83 c4 0c             	add    esp,0xc
c002590a:	c3                   	ret    
c002590b:	90                   	nop

c002590c <AVX::close(int, int, void*)>:
c002590c:	83 ec 0c             	sub    esp,0xc
c002590f:	e8 35 11 00 00       	call   c0026a49 <avxClose>
c0025914:	b8 00 00 00 00       	mov    eax,0x0
c0025919:	83 c4 0c             	add    esp,0xc
c002591c:	c3                   	ret    
c002591d:	90                   	nop

c002591e <AVX::available()>:
c002591e:	83 ec 0c             	sub    esp,0xc
c0025921:	e8 1a 11 00 00       	call   c0026a40 <avxDetect>
c0025926:	85 c0                	test   eax,eax
c0025928:	0f 95 c0             	setne  al
c002592b:	83 c4 0c             	add    esp,0xc
c002592e:	c3                   	ret    
c002592f:	90                   	nop

c0025930 <AVX::save(void*)>:
c0025930:	83 ec 0c             	sub    esp,0xc
c0025933:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025937:	83 ec 0c             	sub    esp,0xc
c002593a:	50                   	push   eax
c002593b:	e8 06 11 00 00       	call   c0026a46 <avxSave>
c0025940:	83 c4 10             	add    esp,0x10
c0025943:	90                   	nop
c0025944:	83 c4 0c             	add    esp,0xc
c0025947:	c3                   	ret    

c0025948 <AVX::load(void*)>:
c0025948:	83 ec 0c             	sub    esp,0xc
c002594b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002594f:	83 ec 0c             	sub    esp,0xc
c0025952:	50                   	push   eax
c0025953:	e8 ef 10 00 00       	call   c0026a47 <avxLoad>
c0025958:	83 c4 10             	add    esp,0x10
c002595b:	90                   	nop
c002595c:	83 c4 0c             	add    esp,0xc
c002595f:	c3                   	ret    

c0025960 <AVX::AVX()>:
c0025960:	83 ec 0c             	sub    esp,0xc
c0025963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025967:	83 ec 08             	sub    esp,0x8
c002596a:	68 e0 d0 02 c0       	push   0xc002d0e0
c002596f:	50                   	push   eax
c0025970:	e8 e3 e9 fe ff       	call   c0014358 <FPU::FPU(char const*)>
c0025975:	83 c4 10             	add    esp,0x10
c0025978:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c002597d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025981:	89 10                	mov    DWORD PTR [eax],edx
c0025983:	90                   	nop
c0025984:	83 c4 0c             	add    esp,0xc
c0025987:	c3                   	ret    

c0025988 <MMX::available()>:
c0025988:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c002598d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025993:	83 e0 20             	and    eax,0x20
c0025996:	84 c0                	test   al,al
c0025998:	0f 95 c0             	setne  al
c002599b:	c3                   	ret    

c002599c <MMX::open(int, int, void*)>:
c002599c:	83 ec 0c             	sub    esp,0xc
c002599f:	e8 2e 11 00 00       	call   c0026ad2 <x87Init>
c00259a4:	b8 00 00 00 00       	mov    eax,0x0
c00259a9:	83 c4 0c             	add    esp,0xc
c00259ac:	c3                   	ret    
c00259ad:	90                   	nop

c00259ae <MMX::close(int, int, void*)>:
c00259ae:	83 ec 0c             	sub    esp,0xc
c00259b1:	e8 36 11 00 00       	call   c0026aec <x87Close>
c00259b6:	b8 00 00 00 00       	mov    eax,0x0
c00259bb:	83 c4 0c             	add    esp,0xc
c00259be:	c3                   	ret    
c00259bf:	90                   	nop

c00259c0 <MMX::save(void*)>:
c00259c0:	83 ec 0c             	sub    esp,0xc
c00259c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259c7:	83 ec 0c             	sub    esp,0xc
c00259ca:	50                   	push   eax
c00259cb:	e8 f1 10 00 00       	call   c0026ac1 <x87Save>
c00259d0:	83 c4 10             	add    esp,0x10
c00259d3:	90                   	nop
c00259d4:	83 c4 0c             	add    esp,0xc
c00259d7:	c3                   	ret    

c00259d8 <MMX::load(void*)>:
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	50                   	push   eax
c00259e3:	e8 e2 10 00 00       	call   c0026aca <x87Load>
c00259e8:	83 c4 10             	add    esp,0x10
c00259eb:	90                   	nop
c00259ec:	83 c4 0c             	add    esp,0xc
c00259ef:	c3                   	ret    

c00259f0 <MMX::MMX()>:
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f7:	83 ec 08             	sub    esp,0x8
c00259fa:	68 20 d1 02 c0       	push   0xc002d120
c00259ff:	50                   	push   eax
c0025a00:	e8 53 e9 fe ff       	call   c0014358 <FPU::FPU(char const*)>
c0025a05:	83 c4 10             	add    esp,0x10
c0025a08:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0025a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a11:	89 10                	mov    DWORD PTR [eax],edx
c0025a13:	90                   	nop
c0025a14:	83 c4 0c             	add    esp,0xc
c0025a17:	c3                   	ret    

c0025a18 <SSE::open(int, int, void*)>:
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	e8 64 10 00 00       	call   c0026a84 <sseInit>
c0025a20:	b8 00 00 00 00       	mov    eax,0x0
c0025a25:	83 c4 0c             	add    esp,0xc
c0025a28:	c3                   	ret    
c0025a29:	90                   	nop

c0025a2a <SSE::close(int, int, void*)>:
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	e8 62 10 00 00       	call   c0026a94 <sseClose>
c0025a32:	b8 00 00 00 00       	mov    eax,0x0
c0025a37:	83 c4 0c             	add    esp,0xc
c0025a3a:	c3                   	ret    
c0025a3b:	90                   	nop

c0025a3c <SSE::available()>:
c0025a3c:	83 ec 1c             	sub    esp,0x1c
c0025a3f:	e8 1c 10 00 00       	call   c0026a60 <absolutelyNoChanceInHell>
c0025a44:	85 c0                	test   eax,eax
c0025a46:	0f 95 c0             	setne  al
c0025a49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025a4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025a51:	83 c4 1c             	add    esp,0x1c
c0025a54:	c3                   	ret    
c0025a55:	90                   	nop

c0025a56 <SSE::save(void*)>:
c0025a56:	83 ec 0c             	sub    esp,0xc
c0025a59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a5d:	83 ec 0c             	sub    esp,0xc
c0025a60:	50                   	push   eax
c0025a61:	e8 12 10 00 00       	call   c0026a78 <sseSave>
c0025a66:	83 c4 10             	add    esp,0x10
c0025a69:	90                   	nop
c0025a6a:	83 c4 0c             	add    esp,0xc
c0025a6d:	c3                   	ret    

c0025a6e <SSE::load(void*)>:
c0025a6e:	83 ec 0c             	sub    esp,0xc
c0025a71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a75:	83 ec 0c             	sub    esp,0xc
c0025a78:	50                   	push   eax
c0025a79:	e8 00 10 00 00       	call   c0026a7e <sseLoad>
c0025a7e:	83 c4 10             	add    esp,0x10
c0025a81:	90                   	nop
c0025a82:	83 c4 0c             	add    esp,0xc
c0025a85:	c3                   	ret    

c0025a86 <SSE::SSE()>:
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a8d:	83 ec 08             	sub    esp,0x8
c0025a90:	68 60 d1 02 c0       	push   0xc002d160
c0025a95:	50                   	push   eax
c0025a96:	e8 bd e8 fe ff       	call   c0014358 <FPU::FPU(char const*)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c0025aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa7:	89 10                	mov    DWORD PTR [eax],edx
c0025aa9:	90                   	nop
c0025aaa:	83 c4 0c             	add    esp,0xc
c0025aad:	c3                   	ret    

c0025aae <x87::open(int, int, void*)>:
c0025aae:	83 ec 0c             	sub    esp,0xc
c0025ab1:	e8 1c 10 00 00       	call   c0026ad2 <x87Init>
c0025ab6:	b8 00 00 00 00       	mov    eax,0x0
c0025abb:	83 c4 0c             	add    esp,0xc
c0025abe:	c3                   	ret    
c0025abf:	90                   	nop

c0025ac0 <x87::close(int, int, void*)>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	e8 24 10 00 00       	call   c0026aec <x87Close>
c0025ac8:	b8 00 00 00 00       	mov    eax,0x0
c0025acd:	83 c4 0c             	add    esp,0xc
c0025ad0:	c3                   	ret    
c0025ad1:	90                   	nop

c0025ad2 <x87::available()>:
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	e8 cc 0f 00 00       	call   c0026aa6 <x87Detect>
c0025ada:	85 c0                	test   eax,eax
c0025adc:	0f 95 c0             	setne  al
c0025adf:	83 c4 0c             	add    esp,0xc
c0025ae2:	c3                   	ret    
c0025ae3:	90                   	nop

c0025ae4 <x87::save(void*)>:
c0025ae4:	83 ec 0c             	sub    esp,0xc
c0025ae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025aeb:	83 ec 0c             	sub    esp,0xc
c0025aee:	50                   	push   eax
c0025aef:	e8 cd 0f 00 00       	call   c0026ac1 <x87Save>
c0025af4:	83 c4 10             	add    esp,0x10
c0025af7:	90                   	nop
c0025af8:	83 c4 0c             	add    esp,0xc
c0025afb:	c3                   	ret    

c0025afc <x87::load(void*)>:
c0025afc:	83 ec 0c             	sub    esp,0xc
c0025aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b03:	83 ec 0c             	sub    esp,0xc
c0025b06:	50                   	push   eax
c0025b07:	e8 be 0f 00 00       	call   c0026aca <x87Load>
c0025b0c:	83 c4 10             	add    esp,0x10
c0025b0f:	90                   	nop
c0025b10:	83 c4 0c             	add    esp,0xc
c0025b13:	c3                   	ret    

c0025b14 <x87::x87()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1b:	83 ec 08             	sub    esp,0x8
c0025b1e:	68 a0 d1 02 c0       	push   0xc002d1a0
c0025b23:	50                   	push   eax
c0025b24:	e8 2f e8 fe ff       	call   c0014358 <FPU::FPU(char const*)>
c0025b29:	83 c4 10             	add    esp,0x10
c0025b2c:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c0025b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b35:	89 10                	mov    DWORD PTR [eax],edx
c0025b37:	90                   	nop
c0025b38:	83 c4 0c             	add    esp,0xc
c0025b3b:	c3                   	ret    

c0025b3c <APIC::disable()>:
c0025b3c:	90                   	nop
c0025b3d:	c3                   	ret    

c0025b3e <APIC::close(int, int, void*)>:
c0025b3e:	55                   	push   ebp
c0025b3f:	89 e5                	mov    ebp,esp
c0025b41:	83 ec 08             	sub    esp,0x8
c0025b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b49:	83 c0 3c             	add    eax,0x3c
c0025b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b4e:	83 ec 0c             	sub    esp,0xc
c0025b51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b54:	ff d0                	call   eax
c0025b56:	83 c4 10             	add    esp,0x10
c0025b59:	b8 00 00 00 00       	mov    eax,0x0
c0025b5e:	c9                   	leave  
c0025b5f:	c3                   	ret    

c0025b60 <IOAPIC::close(int, int, void*)>:
c0025b60:	b8 00 00 00 00       	mov    eax,0x0
c0025b65:	c3                   	ret    

c0025b66 <APIC::io_wait()>:
c0025b66:	eb 00                	jmp    c0025b68 <APIC::io_wait()+0x2>
c0025b68:	eb 00                	jmp    c0025b6a <APIC::io_wait()+0x4>
c0025b6a:	90                   	nop
c0025b6b:	c3                   	ret    

c0025b6c <APIC::getBase()>:
c0025b6c:	55                   	push   ebp
c0025b6d:	89 e5                	mov    ebp,esp
c0025b6f:	83 ec 18             	sub    esp,0x18
c0025b72:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025b77:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b7d:	83 e0 08             	and    eax,0x8
c0025b80:	84 c0                	test   al,al
c0025b82:	75 07                	jne    c0025b8b <APIC::getBase()+0x1f>
c0025b84:	b8 00 00 00 00       	mov    eax,0x0
c0025b89:	eb 21                	jmp    c0025bac <APIC::getBase()+0x40>
c0025b8b:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025b90:	83 ec 08             	sub    esp,0x8
c0025b93:	6a 1b                	push   0x1b
c0025b95:	50                   	push   eax
c0025b96:	e8 e7 91 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025b9b:	83 c4 10             	add    esp,0x10
c0025b9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ba1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ba4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ba7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025bac:	c9                   	leave  
c0025bad:	c3                   	ret    

c0025bae <APIC::eoi(unsigned char)>:
c0025bae:	55                   	push   ebp
c0025baf:	89 e5                	mov    ebp,esp
c0025bb1:	83 ec 28             	sub    esp,0x28
c0025bb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bba:	83 ec 0c             	sub    esp,0xc
c0025bbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bc0:	e8 a7 ff ff ff       	call   c0025b6c <APIC::getBase()>
c0025bc5:	83 c4 10             	add    esp,0x10
c0025bc8:	05 b0 00 00 00       	add    eax,0xb0
c0025bcd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025bd3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025bd9:	90                   	nop
c0025bda:	c9                   	leave  
c0025bdb:	c3                   	ret    

c0025bdc <APIC::open(int, int, void*)>:
c0025bdc:	55                   	push   ebp
c0025bdd:	89 e5                	mov    ebp,esp
c0025bdf:	57                   	push   edi
c0025be0:	56                   	push   esi
c0025be1:	53                   	push   ebx
c0025be2:	83 ec 2c             	sub    esp,0x2c
c0025be5:	83 ec 0c             	sub    esp,0xc
c0025be8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025beb:	e8 7c ff ff ff       	call   c0025b6c <APIC::getBase()>
c0025bf0:	83 c4 10             	add    esp,0x10
c0025bf3:	89 c2                	mov    edx,eax
c0025bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bfe:	0f b6 f8             	movzx  edi,al
c0025c01:	89 d0                	mov    eax,edx
c0025c03:	ba 00 00 00 00       	mov    edx,0x0
c0025c08:	89 c1                	mov    ecx,eax
c0025c0a:	80 e5 ff             	and    ch,0xff
c0025c0d:	89 cb                	mov    ebx,ecx
c0025c0f:	0f b6 f2             	movzx  esi,dl
c0025c12:	89 d8                	mov    eax,ebx
c0025c14:	89 f2                	mov    edx,esi
c0025c16:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c19:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c1c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c20:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c24:	83 e0 00             	and    eax,0x0
c0025c27:	09 d0                	or     eax,edx
c0025c29:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c30:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c36:	8d 50 01             	lea    edx,[eax+0x1]
c0025c39:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c3c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c42:	0f b6 d0             	movzx  edx,al
c0025c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c48:	83 c2 08             	add    edx,0x8
c0025c4b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c4f:	0f b6 c9             	movzx  ecx,cl
c0025c52:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025c58:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c5c:	83 ec 0c             	sub    esp,0xc
c0025c5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c62:	e8 05 ff ff ff       	call   c0025b6c <APIC::getBase()>
c0025c67:	83 c4 10             	add    esp,0x10
c0025c6a:	05 f0 00 00 00       	add    eax,0xf0
c0025c6f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c7a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025c81:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025c88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c8b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c8e:	89 10                	mov    DWORD PTR [eax],edx
c0025c90:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025c97:	a1 10 ef 02 c0       	mov    eax,ds:0xc002ef10
c0025c9c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025c9f:	7d 7c                	jge    c0025d1d <APIC::open(int, int, void*)+0x141>
c0025ca1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ca4:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025cab:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025cae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cb1:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025cb8:	c1 e8 08             	shr    eax,0x8
c0025cbb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025cbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025cc2:	8b 04 85 20 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10e0]
c0025cc9:	c1 e8 18             	shr    eax,0x18
c0025ccc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025ccf:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025cd3:	75 40                	jne    c0025d15 <APIC::open(int, int, void*)+0x139>
c0025cd5:	83 ec 0c             	sub    esp,0xc
c0025cd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cdb:	e8 8c fe ff ff       	call   c0025b6c <APIC::getBase()>
c0025ce0:	83 c4 10             	add    esp,0x10
c0025ce3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025ce7:	75 07                	jne    c0025cf0 <APIC::open(int, int, void*)+0x114>
c0025ce9:	ba 60 03 00 00       	mov    edx,0x360
c0025cee:	eb 05                	jmp    c0025cf5 <APIC::open(int, int, void*)+0x119>
c0025cf0:	ba 50 03 00 00       	mov    edx,0x350
c0025cf5:	01 d0                	add    eax,edx
c0025cf7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025cfa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cff:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025d02:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025d09:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025d0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025d10:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d13:	89 10                	mov    DWORD PTR [eax],edx
c0025d15:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025d18:	e9 7a ff ff ff       	jmp    c0025c97 <APIC::open(int, int, void*)+0xbb>
c0025d1d:	b8 00 00 00 00       	mov    eax,0x0
c0025d22:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d25:	5b                   	pop    ebx
c0025d26:	5e                   	pop    esi
c0025d27:	5f                   	pop    edi
c0025d28:	5d                   	pop    ebp
c0025d29:	c3                   	ret    

c0025d2a <IOAPIC::IOAPIC()>:
c0025d2a:	83 ec 0c             	sub    esp,0xc
c0025d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d31:	83 ec 08             	sub    esp,0x8
c0025d34:	68 e0 d1 02 c0       	push   0xc002d1e0
c0025d39:	50                   	push   eax
c0025d3a:	e8 09 e3 fe ff       	call   c0014048 <Device::Device(char const*)>
c0025d3f:	83 c4 10             	add    esp,0x10
c0025d42:	ba 08 d3 02 c0       	mov    edx,0xc002d308
c0025d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4b:	89 10                	mov    DWORD PTR [eax],edx
c0025d4d:	90                   	nop
c0025d4e:	83 c4 0c             	add    esp,0xc
c0025d51:	c3                   	ret    

c0025d52 <APIC::APIC()>:
c0025d52:	53                   	push   ebx
c0025d53:	83 ec 18             	sub    esp,0x18
c0025d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d5a:	83 ec 08             	sub    esp,0x8
c0025d5d:	68 e8 d1 02 c0       	push   0xc002d1e8
c0025d62:	50                   	push   eax
c0025d63:	e8 4a ea fe ff       	call   c00147b2 <InterruptController::InterruptController(char const*)>
c0025d68:	83 c4 10             	add    esp,0x10
c0025d6b:	ba c0 d2 02 c0       	mov    edx,0xc002d2c0
c0025d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025d74:	89 10                	mov    DWORD PTR [eax],edx
c0025d76:	a0 e0 09 03 c0       	mov    al,ds:0xc00309e0
c0025d7b:	83 f0 01             	xor    eax,0x1
c0025d7e:	84 c0                	test   al,al
c0025d80:	0f 84 a1 00 00 00    	je     c0025e27 <APIC::APIC()+0xd5>
c0025d86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025d8b:	a0 c0 ef 02 c0       	mov    al,ds:0xc002efc0
c0025d90:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025d94:	0f 83 86 00 00 00    	jae    c0025e20 <APIC::APIC()+0xce>
c0025d9a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025da2:	83 ec 0c             	sub    esp,0xc
c0025da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025da9:	e8 05 9c fe ff       	call   c000f9b3 <malloc>
c0025dae:	83 c4 10             	add    esp,0x10
c0025db1:	89 c3                	mov    ebx,eax
c0025db3:	83 ec 0c             	sub    esp,0xc
c0025db6:	53                   	push   ebx
c0025db7:	e8 6e ff ff ff       	call   c0025d2a <IOAPIC::IOAPIC()>
c0025dbc:	83 c4 10             	add    esp,0x10
c0025dbf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025dc3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025dc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025dcc:	89 14 85 c0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf640],edx
c0025dd3:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0025dd8:	40                   	inc    eax
c0025dd9:	a3 a0 09 03 c0       	mov    ds:0xc00309a0,eax
c0025dde:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025de3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025de9:	83 ec 08             	sub    esp,0x8
c0025dec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025df0:	50                   	push   eax
c0025df1:	e8 4e e0 fe ff       	call   c0013e44 <Device::addChild(Device*)>
c0025df6:	83 c4 10             	add    esp,0x10
c0025df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dff:	83 c0 08             	add    eax,0x8
c0025e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e04:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025e09:	6a 00                	push   0x0
c0025e0b:	6a 00                	push   0x0
c0025e0d:	52                   	push   edx
c0025e0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025e12:	ff d0                	call   eax
c0025e14:	83 c4 10             	add    esp,0x10
c0025e17:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025e1b:	e9 6b ff ff ff       	jmp    c0025d8b <APIC::APIC()+0x39>
c0025e20:	c6 05 e0 09 03 c0 01 	mov    BYTE PTR ds:0xc00309e0,0x1
c0025e27:	90                   	nop
c0025e28:	83 c4 18             	add    esp,0x18
c0025e2b:	5b                   	pop    ebx
c0025e2c:	c3                   	ret    
c0025e2d:	90                   	nop

c0025e2e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025e2e:	55                   	push   ebp
c0025e2f:	89 e5                	mov    ebp,esp
c0025e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e3a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e3d:	72 1d                	jb     c0025e5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e42:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e4b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025e51:	01 d0                	add    eax,edx
c0025e53:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025e56:	73 04                	jae    c0025e5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025e58:	b0 01                	mov    al,0x1
c0025e5a:	eb 02                	jmp    c0025e5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025e5c:	b0 00                	mov    al,0x0
c0025e5e:	5d                   	pop    ebp
c0025e5f:	c3                   	ret    

c0025e60 <IOAPIC::read(int)>:
c0025e60:	55                   	push   ebp
c0025e61:	89 e5                	mov    ebp,esp
c0025e63:	83 ec 10             	sub    esp,0x10
c0025e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e75:	0f b6 d0             	movzx  edx,al
c0025e78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e7b:	89 10                	mov    DWORD PTR [eax],edx
c0025e7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e80:	83 c0 10             	add    eax,0x10
c0025e83:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e85:	c9                   	leave  
c0025e86:	c3                   	ret    
c0025e87:	90                   	nop

c0025e88 <IOAPIC::open(int, int, void*)>:
c0025e88:	55                   	push   ebp
c0025e89:	89 e5                	mov    ebp,esp
c0025e8b:	57                   	push   edi
c0025e8c:	56                   	push   esi
c0025e8d:	53                   	push   ebx
c0025e8e:	83 ec 0c             	sub    esp,0xc
c0025e91:	83 ec 0c             	sub    esp,0xc
c0025e94:	68 13 d2 02 c0       	push   0xc002d213
c0025e99:	e8 6d cb fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0025e9e:	83 c4 10             	add    esp,0x10
c0025ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ea4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ea7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025eb6:	8b 14 85 00 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1000]
c0025ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ec0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ec9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ecf:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0025ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ee2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ef1:	0f b6 f8             	movzx  edi,al
c0025ef4:	89 d0                	mov    eax,edx
c0025ef6:	ba 00 00 00 00       	mov    edx,0x0
c0025efb:	89 c1                	mov    ecx,eax
c0025efd:	80 e5 ff             	and    ch,0xff
c0025f00:	89 cb                	mov    ebx,ecx
c0025f02:	0f b6 f2             	movzx  esi,dl
c0025f05:	89 d8                	mov    eax,ebx
c0025f07:	89 f2                	mov    edx,esi
c0025f09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f0c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f0f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f13:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f17:	83 e0 00             	and    eax,0x0
c0025f1a:	09 d0                	or     eax,edx
c0025f1c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f23:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f29:	8d 50 01             	lea    edx,[eax+0x1]
c0025f2c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f2f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f35:	0f b6 d0             	movzx  edx,al
c0025f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f3b:	83 c2 08             	add    edx,0x8
c0025f3e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f42:	0f b6 c9             	movzx  ecx,cl
c0025f45:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025f4b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f4f:	83 ec 08             	sub    esp,0x8
c0025f52:	6a 01                	push   0x1
c0025f54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f57:	e8 04 ff ff ff       	call   c0025e60 <IOAPIC::read(int)>
c0025f5c:	83 c4 10             	add    esp,0x10
c0025f5f:	c1 f8 10             	sar    eax,0x10
c0025f62:	0f b6 c0             	movzx  eax,al
c0025f65:	8d 50 01             	lea    edx,[eax+0x1]
c0025f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f6b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025f71:	b8 00 00 00 00       	mov    eax,0x0
c0025f76:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f79:	5b                   	pop    ebx
c0025f7a:	5e                   	pop    esi
c0025f7b:	5f                   	pop    edi
c0025f7c:	5d                   	pop    ebp
c0025f7d:	c3                   	ret    

c0025f7e <IOAPIC::write(int, int)>:
c0025f7e:	55                   	push   ebp
c0025f7f:	89 e5                	mov    ebp,esp
c0025f81:	83 ec 10             	sub    esp,0x10
c0025f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025f90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f93:	0f b6 d0             	movzx  edx,al
c0025f96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f99:	89 10                	mov    DWORD PTR [eax],edx
c0025f9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f9e:	8d 50 10             	lea    edx,[eax+0x10]
c0025fa1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025fa4:	89 02                	mov    DWORD PTR [edx],eax
c0025fa6:	90                   	nop
c0025fa7:	c9                   	leave  
c0025fa8:	c3                   	ret    
c0025fa9:	90                   	nop

c0025faa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025faa:	55                   	push   ebp
c0025fab:	89 e5                	mov    ebp,esp
c0025fad:	53                   	push   ebx
c0025fae:	83 ec 2c             	sub    esp,0x2c
c0025fb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025fb7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025fba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025fbd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025fc3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025fc6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025fc9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025fcc:	88 d8                	mov    al,bl
c0025fce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025fd1:	88 c8                	mov    al,cl
c0025fd3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025fd6:	88 d0                	mov    al,dl
c0025fd8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025fdb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025fdf:	83 c0 08             	add    eax,0x8
c0025fe2:	01 c0                	add    eax,eax
c0025fe4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fe7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025feb:	83 c0 08             	add    eax,0x8
c0025fee:	01 c0                	add    eax,eax
c0025ff0:	40                   	inc    eax
c0025ff1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ff4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ff7:	50                   	push   eax
c0025ff8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ffb:	e8 60 fe ff ff       	call   c0025e60 <IOAPIC::read(int)>
c0026000:	83 c4 08             	add    esp,0x8
c0026003:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026006:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002600d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026010:	c1 e0 18             	shl    eax,0x18
c0026013:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026016:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026019:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002601c:	52                   	push   edx
c002601d:	50                   	push   eax
c002601e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026021:	e8 58 ff ff ff       	call   c0025f7e <IOAPIC::write(int, int)>
c0026026:	83 c4 0c             	add    esp,0xc
c0026029:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002602c:	50                   	push   eax
c002602d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026030:	e8 2b fe ff ff       	call   c0025e60 <IOAPIC::read(int)>
c0026035:	83 c4 08             	add    esp,0x8
c0026038:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002603b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026042:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026049:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026050:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026054:	74 09                	je     c002605f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026056:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002605d:	eb 07                	jmp    c0026066 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002605f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026066:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002606a:	74 09                	je     c0026075 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002606c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026073:	eb 07                	jmp    c002607c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026075:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002607c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026083:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026087:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002608a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002608d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026090:	52                   	push   edx
c0026091:	50                   	push   eax
c0026092:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026095:	e8 e4 fe ff ff       	call   c0025f7e <IOAPIC::write(int, int)>
c002609a:	83 c4 0c             	add    esp,0xc
c002609d:	90                   	nop
c002609e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00260a1:	c9                   	leave  
c00260a2:	c3                   	ret    
c00260a3:	90                   	nop

c00260a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00260a4:	55                   	push   ebp
c00260a5:	89 e5                	mov    ebp,esp
c00260a7:	57                   	push   edi
c00260a8:	56                   	push   esi
c00260a9:	53                   	push   ebx
c00260aa:	83 ec 2c             	sub    esp,0x2c
c00260ad:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00260b0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00260b3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00260b7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00260bb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00260bf:	74 5a                	je     c002611b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00260c1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00260c5:	7f 44                	jg     c002610b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00260c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260ca:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c00260cf:	8a 00                	mov    al,BYTE PTR [eax]
c00260d1:	0f b6 c0             	movzx  eax,al
c00260d4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00260d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260da:	66 8b 84 00 a0 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1060]
c00260e2:	0f b7 c0             	movzx  eax,ax
c00260e5:	83 e0 02             	and    eax,0x2
c00260e8:	85 c0                	test   eax,eax
c00260ea:	74 04                	je     c00260f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00260ec:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00260f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260f3:	66 8b 84 00 a0 ef 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd1060]
c00260fb:	0f b7 c0             	movzx  eax,ax
c00260fe:	83 e0 08             	and    eax,0x8
c0026101:	85 c0                	test   eax,eax
c0026103:	74 16                	je     c002611b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026105:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026109:	eb 10                	jmp    c002611b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002610b:	83 ec 0c             	sub    esp,0xc
c002610e:	68 24 d2 02 c0       	push   0xc002d224
c0026113:	e8 91 42 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0026118:	83 c4 10             	add    esp,0x10
c002611b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002611f:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0026124:	83 ec 08             	sub    esp,0x8
c0026127:	50                   	push   eax
c0026128:	68 5c d2 02 c0       	push   0xc002d25c
c002612d:	e8 d9 c8 fe ff       	call   c0012a0b <Dbg::kprintf(char const*, ...)>
c0026132:	83 c4 10             	add    esp,0x10
c0026135:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002613c:	a1 a0 09 03 c0       	mov    eax,ds:0xc00309a0
c0026141:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026144:	7d 67                	jge    c00261ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026146:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026149:	8b 04 85 c0 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf640]
c0026150:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026153:	83 ec 08             	sub    esp,0x8
c0026156:	52                   	push   edx
c0026157:	50                   	push   eax
c0026158:	e8 d1 fc ff ff       	call   c0025e2e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002615d:	83 c4 10             	add    esp,0x10
c0026160:	84 c0                	test   al,al
c0026162:	74 44                	je     c00261a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026164:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026167:	8b 1c 85 c0 09 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf640]
c002616e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026172:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026175:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026179:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002617c:	83 c0 20             	add    eax,0x20
c002617f:	0f b6 f0             	movzx  esi,al
c0026182:	b8 00 00 00 00       	mov    eax,0x0
c0026187:	99                   	cdq    
c0026188:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002618b:	0f b6 c9             	movzx  ecx,cl
c002618e:	83 ec 04             	sub    esp,0x4
c0026191:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026194:	57                   	push   edi
c0026195:	56                   	push   esi
c0026196:	52                   	push   edx
c0026197:	50                   	push   eax
c0026198:	51                   	push   ecx
c0026199:	53                   	push   ebx
c002619a:	e8 0b fe ff ff       	call   c0025faa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002619f:	83 c4 20             	add    esp,0x20
c00261a2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00261a6:	eb 05                	jmp    c00261ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00261a8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00261ab:	eb 8f                	jmp    c002613c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00261ad:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00261b0:	83 f0 01             	xor    eax,0x1
c00261b3:	84 c0                	test   al,al
c00261b5:	74 10                	je     c00261c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00261b7:	83 ec 0c             	sub    esp,0xc
c00261ba:	68 73 d2 02 c0       	push   0xc002d273
c00261bf:	e8 e5 41 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c00261c4:	83 c4 10             	add    esp,0x10
c00261c7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00261cb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00261d2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00261d6:	7f 65                	jg     c002623d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00261d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261db:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261de:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00261e5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261e8:	01 ca                	add    edx,ecx
c00261ea:	83 c2 54             	add    edx,0x54
c00261ed:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00261f1:	85 c0                	test   eax,eax
c00261f3:	75 43                	jne    c0026238 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00261f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026202:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026205:	01 ca                	add    edx,ecx
c0026207:	8d 4a 54             	lea    ecx,[edx+0x54]
c002620a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002620d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026214:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026217:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002621e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026221:	01 ca                	add    edx,ecx
c0026223:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026229:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002622c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026230:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026233:	83 e8 20             	sub    eax,0x20
c0026236:	eb 1a                	jmp    c0026252 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026238:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002623b:	eb 95                	jmp    c00261d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002623d:	83 ec 0c             	sub    esp,0xc
c0026240:	68 80 d2 02 c0       	push   0xc002d280
c0026245:	e8 5f 41 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c002624a:	83 c4 10             	add    esp,0x10
c002624d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026252:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026255:	5b                   	pop    ebx
c0026256:	5e                   	pop    esi
c0026257:	5f                   	pop    edi
c0026258:	5d                   	pop    ebp
c0026259:	c3                   	ret    

c002625a <PIC::disable()>:
c002625a:	55                   	push   ebp
c002625b:	89 e5                	mov    ebp,esp
c002625d:	83 ec 10             	sub    esp,0x10
c0026260:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026266:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002626a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002626d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026271:	ee                   	out    dx,al
c0026272:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026278:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002627c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002627f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026283:	ee                   	out    dx,al
c0026284:	90                   	nop
c0026285:	c9                   	leave  
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <PIC::close(int, int, void*)>:
c0026288:	55                   	push   ebp
c0026289:	89 e5                	mov    ebp,esp
c002628b:	83 ec 08             	sub    esp,0x8
c002628e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026291:	8b 00                	mov    eax,DWORD PTR [eax]
c0026293:	83 c0 3c             	add    eax,0x3c
c0026296:	8b 00                	mov    eax,DWORD PTR [eax]
c0026298:	83 ec 0c             	sub    esp,0xc
c002629b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629e:	ff d0                	call   eax
c00262a0:	83 c4 10             	add    esp,0x10
c00262a3:	b8 00 00 00 00       	mov    eax,0x0
c00262a8:	c9                   	leave  
c00262a9:	c3                   	ret    

c00262aa <PIC::PIC()>:
c00262aa:	83 ec 0c             	sub    esp,0xc
c00262ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b1:	83 ec 08             	sub    esp,0x8
c00262b4:	68 2c d3 02 c0       	push   0xc002d32c
c00262b9:	50                   	push   eax
c00262ba:	e8 f3 e4 fe ff       	call   c00147b2 <InterruptController::InterruptController(char const*)>
c00262bf:	83 c4 10             	add    esp,0x10
c00262c2:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00262c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cb:	89 10                	mov    DWORD PTR [eax],edx
c00262cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262d7:	0f b6 d0             	movzx  edx,al
c00262da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262de:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00262e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262ef:	0f b6 d0             	movzx  edx,al
c00262f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00262fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026305:	8d 50 01             	lea    edx,[eax+0x1]
c0026308:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002630c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026312:	0f b6 d0             	movzx  edx,al
c0026315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026319:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002631d:	83 e1 3f             	and    ecx,0x3f
c0026320:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026328:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002632e:	0f b6 d0             	movzx  edx,al
c0026331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026335:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002633c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026346:	0f b6 d0             	movzx  edx,al
c0026349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026356:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002635c:	8d 50 01             	lea    edx,[eax+0x1]
c002635f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026363:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026369:	0f b6 d0             	movzx  edx,al
c002636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026370:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026374:	83 e1 3f             	and    ecx,0x3f
c0026377:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002637b:	90                   	nop
c002637c:	83 c4 0c             	add    esp,0xc
c002637f:	c3                   	ret    

c0026380 <PIC::ioWait()>:
c0026380:	eb 00                	jmp    c0026382 <PIC::ioWait()+0x2>
c0026382:	eb 00                	jmp    c0026384 <PIC::ioWait()+0x4>
c0026384:	90                   	nop
c0026385:	c3                   	ret    

c0026386 <PIC::getIRQReg(int)>:
c0026386:	55                   	push   ebp
c0026387:	89 e5                	mov    ebp,esp
c0026389:	83 ec 10             	sub    esp,0x10
c002638c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002638f:	0f b6 c0             	movzx  eax,al
c0026392:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026398:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002639b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002639e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00263a2:	ee                   	out    dx,al
c00263a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263a6:	0f b6 c0             	movzx  eax,al
c00263a9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00263af:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00263b2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00263b5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00263b9:	ee                   	out    dx,al
c00263ba:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00263c0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00263c4:	89 c2                	mov    edx,eax
c00263c6:	ec                   	in     al,dx
c00263c7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00263ca:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00263cd:	0f b6 c0             	movzx  eax,al
c00263d0:	c1 e0 08             	shl    eax,0x8
c00263d3:	89 c1                	mov    ecx,eax
c00263d5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00263db:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00263df:	89 c2                	mov    edx,eax
c00263e1:	ec                   	in     al,dx
c00263e2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00263e5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00263e8:	0f b6 c0             	movzx  eax,al
c00263eb:	09 c8                	or     eax,ecx
c00263ed:	c9                   	leave  
c00263ee:	c3                   	ret    
c00263ef:	90                   	nop

c00263f0 <PIC::eoi(unsigned char)>:
c00263f0:	55                   	push   ebp
c00263f1:	89 e5                	mov    ebp,esp
c00263f3:	83 ec 14             	sub    esp,0x14
c00263f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263f9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00263fc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026400:	75 1e                	jne    c0026420 <PIC::eoi(unsigned char)+0x30>
c0026402:	6a 0b                	push   0xb
c0026404:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026407:	e8 7a ff ff ff       	call   c0026386 <PIC::getIRQReg(int)>
c002640c:	83 c4 08             	add    esp,0x8
c002640f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026413:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026417:	25 80 00 00 00       	and    eax,0x80
c002641c:	85 c0                	test   eax,eax
c002641e:	74 5f                	je     c002647f <PIC::eoi(unsigned char)+0x8f>
c0026420:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026424:	75 2d                	jne    c0026453 <PIC::eoi(unsigned char)+0x63>
c0026426:	6a 0b                	push   0xb
c0026428:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002642b:	e8 56 ff ff ff       	call   c0026386 <PIC::getIRQReg(int)>
c0026430:	83 c4 08             	add    esp,0x8
c0026433:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026437:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002643a:	66 85 c0             	test   ax,ax
c002643d:	78 14                	js     c0026453 <PIC::eoi(unsigned char)+0x63>
c002643f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026445:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026449:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002644c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026450:	ee                   	out    dx,al
c0026451:	eb 2d                	jmp    c0026480 <PIC::eoi(unsigned char)+0x90>
c0026453:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026457:	76 12                	jbe    c002646b <PIC::eoi(unsigned char)+0x7b>
c0026459:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002645f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026463:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026466:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002646a:	ee                   	out    dx,al
c002646b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026471:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026475:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026478:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002647c:	ee                   	out    dx,al
c002647d:	eb 01                	jmp    c0026480 <PIC::eoi(unsigned char)+0x90>
c002647f:	90                   	nop
c0026480:	c9                   	leave  
c0026481:	c3                   	ret    

c0026482 <PIC::remap()>:
c0026482:	55                   	push   ebp
c0026483:	89 e5                	mov    ebp,esp
c0026485:	83 ec 48             	sub    esp,0x48
c0026488:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002648f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026496:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002649c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002649f:	89 c2                	mov    edx,eax
c00264a1:	ec                   	in     al,dx
c00264a2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00264a5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00264a8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00264ab:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00264b1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00264b4:	89 c2                	mov    edx,eax
c00264b6:	ec                   	in     al,dx
c00264b7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00264ba:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00264bd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00264c0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00264c6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00264ca:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00264cd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00264d0:	ee                   	out    dx,al
c00264d1:	83 ec 0c             	sub    esp,0xc
c00264d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264d7:	e8 a4 fe ff ff       	call   c0026380 <PIC::ioWait()>
c00264dc:	83 c4 10             	add    esp,0x10
c00264df:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00264e5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00264e9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00264ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00264ef:	ee                   	out    dx,al
c00264f0:	83 ec 0c             	sub    esp,0xc
c00264f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264f6:	e8 85 fe ff ff       	call   c0026380 <PIC::ioWait()>
c00264fb:	83 c4 10             	add    esp,0x10
c00264fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026501:	0f b6 c0             	movzx  eax,al
c0026504:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002650a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002650d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026510:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026513:	ee                   	out    dx,al
c0026514:	83 ec 0c             	sub    esp,0xc
c0026517:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002651a:	e8 61 fe ff ff       	call   c0026380 <PIC::ioWait()>
c002651f:	83 c4 10             	add    esp,0x10
c0026522:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026525:	0f b6 c0             	movzx  eax,al
c0026528:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002652e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026531:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026534:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026537:	ee                   	out    dx,al
c0026538:	83 ec 0c             	sub    esp,0xc
c002653b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002653e:	e8 3d fe ff ff       	call   c0026380 <PIC::ioWait()>
c0026543:	83 c4 10             	add    esp,0x10
c0026546:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002654c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026550:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026553:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026556:	ee                   	out    dx,al
c0026557:	83 ec 0c             	sub    esp,0xc
c002655a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002655d:	e8 1e fe ff ff       	call   c0026380 <PIC::ioWait()>
c0026562:	83 c4 10             	add    esp,0x10
c0026565:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002656b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002656f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026572:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026575:	ee                   	out    dx,al
c0026576:	83 ec 0c             	sub    esp,0xc
c0026579:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002657c:	e8 ff fd ff ff       	call   c0026380 <PIC::ioWait()>
c0026581:	83 c4 10             	add    esp,0x10
c0026584:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002658a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002658e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026591:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026594:	ee                   	out    dx,al
c0026595:	83 ec 0c             	sub    esp,0xc
c0026598:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002659b:	e8 e0 fd ff ff       	call   c0026380 <PIC::ioWait()>
c00265a0:	83 c4 10             	add    esp,0x10
c00265a3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00265a9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00265ad:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00265b0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00265b3:	ee                   	out    dx,al
c00265b4:	83 ec 0c             	sub    esp,0xc
c00265b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ba:	e8 c1 fd ff ff       	call   c0026380 <PIC::ioWait()>
c00265bf:	83 c4 10             	add    esp,0x10
c00265c2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00265c6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00265cc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00265cf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00265d2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00265d5:	ee                   	out    dx,al
c00265d6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00265da:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00265e0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00265e3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00265e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00265e9:	ee                   	out    dx,al
c00265ea:	90                   	nop
c00265eb:	c9                   	leave  
c00265ec:	c3                   	ret    
c00265ed:	90                   	nop

c00265ee <PIC::open(int, int, void*)>:
c00265ee:	55                   	push   ebp
c00265ef:	89 e5                	mov    ebp,esp
c00265f1:	83 ec 18             	sub    esp,0x18
c00265f4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00265fa:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00265fe:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026601:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026605:	ee                   	out    dx,al
c0026606:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002660c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026610:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026613:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026617:	ee                   	out    dx,al
c0026618:	83 ec 0c             	sub    esp,0xc
c002661b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002661e:	e8 5f fe ff ff       	call   c0026482 <PIC::remap()>
c0026623:	83 c4 10             	add    esp,0x10
c0026626:	b8 00 00 00 00       	mov    eax,0x0
c002662b:	c9                   	leave  
c002662c:	c3                   	ret    
c002662d:	90                   	nop

c002662e <APICTimer::close(int, int, void*)>:
c002662e:	b8 00 00 00 00       	mov    eax,0x0
c0026633:	c3                   	ret    

c0026634 <apicTimerHandler(regs*, void*)>:
c0026634:	83 ec 0c             	sub    esp,0xc
c0026637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002663b:	8b 00                	mov    eax,DWORD PTR [eax]
c002663d:	99                   	cdq    
c002663e:	52                   	push   edx
c002663f:	50                   	push   eax
c0026640:	6a 00                	push   0x0
c0026642:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026647:	e8 98 07 00 00       	call   c0026de4 <__udivdi3>
c002664c:	83 c4 10             	add    esp,0x10
c002664f:	83 ec 08             	sub    esp,0x8
c0026652:	52                   	push   edx
c0026653:	50                   	push   eax
c0026654:	e8 b6 02 ff ff       	call   c001690f <timerHandler(unsigned long long)>
c0026659:	83 c4 10             	add    esp,0x10
c002665c:	90                   	nop
c002665d:	83 c4 0c             	add    esp,0xc
c0026660:	c3                   	ret    
c0026661:	90                   	nop

c0026662 <APICTimer::write(int)>:
c0026662:	53                   	push   ebx
c0026663:	83 ec 28             	sub    esp,0x28
c0026666:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002666a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002666e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026674:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0026679:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002667f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026685:	83 ec 0c             	sub    esp,0xc
c0026688:	50                   	push   eax
c0026689:	e8 de f4 ff ff       	call   c0025b6c <APIC::getBase()>
c002668e:	83 c4 10             	add    esp,0x10
c0026691:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026695:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c002669a:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c00266a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00266a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00266a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266ac:	05 e0 03 00 00       	add    eax,0x3e0
c00266b1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00266b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266bb:	05 80 03 00 00       	add    eax,0x380
c00266c0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00266c6:	fb                   	sti    
c00266c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266cf:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00266d4:	83 d2 00             	adc    edx,0x0
c00266d7:	89 c1                	mov    ecx,eax
c00266d9:	89 d3                	mov    ebx,edx
c00266db:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c00266e0:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c00266e6:	39 c8                	cmp    eax,ecx
c00266e8:	89 d0                	mov    eax,edx
c00266ea:	19 d8                	sbb    eax,ebx
c00266ec:	73 02                	jae    c00266f0 <APICTimer::write(int)+0x8e>
c00266ee:	eb d7                	jmp    c00266c7 <APICTimer::write(int)+0x65>
c00266f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00266f4:	05 20 03 00 00       	add    eax,0x320
c00266f9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00266ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026703:	05 90 03 00 00       	add    eax,0x390
c0026708:	8b 00                	mov    eax,DWORD PTR [eax]
c002670a:	f7 d0                	not    eax
c002670c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026710:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026718:	ba 00 00 00 00       	mov    edx,0x0
c002671d:	f7 f3                	div    ebx
c002671f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026727:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002672d:	0d 00 00 02 00       	or     eax,0x20000
c0026732:	89 c2                	mov    edx,eax
c0026734:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026738:	05 20 03 00 00       	add    eax,0x320
c002673d:	89 10                	mov    DWORD PTR [eax],edx
c002673f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026743:	05 e0 03 00 00       	add    eax,0x3e0
c0026748:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002674e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026752:	05 80 03 00 00       	add    eax,0x380
c0026757:	89 c2                	mov    edx,eax
c0026759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002675d:	89 02                	mov    DWORD PTR [edx],eax
c002675f:	90                   	nop
c0026760:	83 c4 28             	add    esp,0x28
c0026763:	5b                   	pop    ebx
c0026764:	c3                   	ret    
c0026765:	90                   	nop

c0026766 <APICTimer::open(int, int, void*)>:
c0026766:	57                   	push   edi
c0026767:	56                   	push   esi
c0026768:	53                   	push   ebx
c0026769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676d:	8b 00                	mov    eax,DWORD PTR [eax]
c002676f:	83 c0 24             	add    eax,0x24
c0026772:	8b 00                	mov    eax,DWORD PTR [eax]
c0026774:	83 ec 08             	sub    esp,0x8
c0026777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002677b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002677f:	ff d0                	call   eax
c0026781:	83 c4 10             	add    esp,0x10
c0026784:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0026789:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002678f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026795:	83 ec 0c             	sub    esp,0xc
c0026798:	50                   	push   eax
c0026799:	e8 ce f3 ff ff       	call   c0025b6c <APIC::getBase()>
c002679e:	83 c4 10             	add    esp,0x10
c00267a1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00267a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267b1:	0f b6 f8             	movzx  edi,al
c00267b4:	89 d0                	mov    eax,edx
c00267b6:	ba 00 00 00 00       	mov    edx,0x0
c00267bb:	89 c1                	mov    ecx,eax
c00267bd:	80 e5 ff             	and    ch,0xff
c00267c0:	89 cb                	mov    ebx,ecx
c00267c2:	0f b6 f2             	movzx  esi,dl
c00267c5:	89 d8                	mov    eax,ebx
c00267c7:	89 f2                	mov    edx,esi
c00267c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267cd:	8d 5f 08             	lea    ebx,[edi+0x8]
c00267d0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00267d4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00267d8:	83 e0 00             	and    eax,0x0
c00267db:	09 d0                	or     eax,edx
c00267dd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00267e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00267eb:	8d 50 01             	lea    edx,[eax+0x1]
c00267ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267f2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00267f8:	0f b6 d0             	movzx  edx,al
c00267fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ff:	83 c2 08             	add    edx,0x8
c0026802:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026806:	0f b6 c9             	movzx  ecx,cl
c0026809:	81 c9 00 00 01 00    	or     ecx,0x10000
c002680f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026817:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002681b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026825:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026829:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002682f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026833:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026839:	83 ec 0c             	sub    esp,0xc
c002683c:	51                   	push   ecx
c002683d:	6a 01                	push   0x1
c002683f:	68 34 66 02 c0       	push   0xc0026634
c0026844:	52                   	push   edx
c0026845:	50                   	push   eax
c0026846:	e8 71 d5 fe ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002684b:	83 c4 20             	add    esp,0x20
c002684e:	89 c2                	mov    edx,eax
c0026850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026854:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002685a:	b8 00 00 00 00       	mov    eax,0x0
c002685f:	5b                   	pop    ebx
c0026860:	5e                   	pop    esi
c0026861:	5f                   	pop    edi
c0026862:	c3                   	ret    
c0026863:	90                   	nop

c0026864 <APICTimer::APICTimer()>:
c0026864:	83 ec 0c             	sub    esp,0xc
c0026867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002686b:	83 ec 08             	sub    esp,0x8
c002686e:	68 98 d3 02 c0       	push   0xc002d398
c0026873:	50                   	push   eax
c0026874:	e8 07 00 ff ff       	call   c0016880 <Timer::Timer(char const*)>
c0026879:	83 c4 10             	add    esp,0x10
c002687c:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0026881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026885:	89 10                	mov    DWORD PTR [eax],edx
c0026887:	90                   	nop
c0026888:	83 c4 0c             	add    esp,0xc
c002688b:	c3                   	ret    

c002688c <PIT::write(int)>:
c002688c:	83 ec 10             	sub    esp,0x10
c002688f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026897:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002689d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00268a1:	a3 e4 09 03 c0       	mov    ds:0xc00309e4,eax
c00268a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00268ab:	99                   	cdq    
c00268ac:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00268b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268b4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00268bb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00268c0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00268c4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00268c9:	ee                   	out    dx,al
c00268ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268ce:	0f b6 c0             	movzx  eax,al
c00268d1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00268d8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00268dc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00268e0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00268e5:	ee                   	out    dx,al
c00268e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268ea:	c1 f8 08             	sar    eax,0x8
c00268ed:	0f b6 c0             	movzx  eax,al
c00268f0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00268f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00268fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00268ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026904:	ee                   	out    dx,al
c0026905:	90                   	nop
c0026906:	83 c4 10             	add    esp,0x10
c0026909:	c3                   	ret    

c002690a <pitHandler(regs*, void*)>:
c002690a:	83 ec 0c             	sub    esp,0xc
c002690d:	a1 e4 09 03 c0       	mov    eax,ds:0xc00309e4
c0026912:	99                   	cdq    
c0026913:	52                   	push   edx
c0026914:	50                   	push   eax
c0026915:	6a 00                	push   0x0
c0026917:	68 00 ca 9a 3b       	push   0x3b9aca00
c002691c:	e8 c3 04 00 00       	call   c0026de4 <__udivdi3>
c0026921:	83 c4 10             	add    esp,0x10
c0026924:	83 ec 08             	sub    esp,0x8
c0026927:	52                   	push   edx
c0026928:	50                   	push   eax
c0026929:	e8 e1 ff fe ff       	call   c001690f <timerHandler(unsigned long long)>
c002692e:	83 c4 10             	add    esp,0x10
c0026931:	90                   	nop
c0026932:	83 c4 0c             	add    esp,0xc
c0026935:	c3                   	ret    

c0026936 <PIT::open(int, int, void*)>:
c0026936:	83 ec 0c             	sub    esp,0xc
c0026939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002693d:	8b 00                	mov    eax,DWORD PTR [eax]
c002693f:	83 c0 24             	add    eax,0x24
c0026942:	8b 00                	mov    eax,DWORD PTR [eax]
c0026944:	83 ec 08             	sub    esp,0x8
c0026947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002694b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002694f:	ff d0                	call   eax
c0026951:	83 c4 10             	add    esp,0x10
c0026954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026958:	83 ec 0c             	sub    esp,0xc
c002695b:	6a 00                	push   0x0
c002695d:	6a 01                	push   0x1
c002695f:	68 0a 69 02 c0       	push   0xc002690a
c0026964:	6a 00                	push   0x0
c0026966:	50                   	push   eax
c0026967:	e8 50 d4 fe ff       	call   c0013dbc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002696c:	83 c4 20             	add    esp,0x20
c002696f:	89 c2                	mov    edx,eax
c0026971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026975:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002697b:	b8 00 00 00 00       	mov    eax,0x0
c0026980:	83 c4 0c             	add    esp,0xc
c0026983:	c3                   	ret    

c0026984 <PIT::close(int, int, void*)>:
c0026984:	83 ec 0c             	sub    esp,0xc
c0026987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026999:	6a 01                	push   0x1
c002699b:	68 0a 69 02 c0       	push   0xc002690a
c00269a0:	6a 00                	push   0x0
c00269a2:	50                   	push   eax
c00269a3:	e8 5e d4 fe ff       	call   c0013e06 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00269a8:	83 c4 10             	add    esp,0x10
c00269ab:	b8 00 00 00 00       	mov    eax,0x0
c00269b0:	83 c4 0c             	add    esp,0xc
c00269b3:	c3                   	ret    

c00269b4 <PIT::PIT()>:
c00269b4:	83 ec 0c             	sub    esp,0xc
c00269b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bb:	83 ec 08             	sub    esp,0x8
c00269be:	68 d4 d3 02 c0       	push   0xc002d3d4
c00269c3:	50                   	push   eax
c00269c4:	e8 b7 fe fe ff       	call   c0016880 <Timer::Timer(char const*)>
c00269c9:	83 c4 10             	add    esp,0x10
c00269cc:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c00269d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d5:	89 10                	mov    DWORD PTR [eax],edx
c00269d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269e1:	0f b6 d0             	movzx  edx,al
c00269e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00269ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269f9:	0f b6 d0             	movzx  edx,al
c00269fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a00:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026a0f:	8d 50 01             	lea    edx,[eax+0x1]
c0026a12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a16:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026a1c:	0f b6 d0             	movzx  edx,al
c0026a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a23:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a27:	83 e1 3f             	and    ecx,0x3f
c0026a2a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a2e:	90                   	nop
c0026a2f:	83 c4 0c             	add    esp,0xc
c0026a32:	c3                   	ret    
c0026a33:	66 90                	xchg   ax,ax
c0026a35:	66 90                	xchg   ax,ax
c0026a37:	66 90                	xchg   ax,ax
c0026a39:	66 90                	xchg   ax,ax
c0026a3b:	66 90                	xchg   ax,ax
c0026a3d:	66 90                	xchg   ax,ax
c0026a3f:	90                   	nop

c0026a40 <avxDetect>:
c0026a40:	b8 00 00 00 00       	mov    eax,0x0
c0026a45:	c3                   	ret    

c0026a46 <avxSave>:
c0026a46:	c3                   	ret    

c0026a47 <avxLoad>:
c0026a47:	c3                   	ret    

c0026a48 <avxInit>:
c0026a48:	c3                   	ret    

c0026a49 <avxClose>:
c0026a49:	c3                   	ret    

c0026a4a <wouldSheSayYes>:
c0026a4a:	c3                   	ret    
c0026a4b:	49                   	dec    ecx
c0026a4c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026a50:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026a54:	75 20                	jne    c0026a76 <sseDetect.noSSE+0x1>
c0026a56:	4e                   	dec    esi
c0026a57:	79 61                	jns    c0026aba <x87Detect+0x14>
c0026a59:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026a5e:	66 90                	xchg   ax,ax

c0026a60 <absolutelyNoChanceInHell>:
c0026a60:	b8 01 00 00 00       	mov    eax,0x1
c0026a65:	0f a2                	cpuid  
c0026a67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026a6d:	74 06                	je     c0026a75 <sseDetect.noSSE>
c0026a6f:	b8 01 00 00 00       	mov    eax,0x1
c0026a74:	c3                   	ret    

c0026a75 <sseDetect.noSSE>:
c0026a75:	31 c0                	xor    eax,eax
c0026a77:	c3                   	ret    

c0026a78 <sseSave>:
c0026a78:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026a7d:	c3                   	ret    

c0026a7e <sseLoad>:
c0026a7e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026a83:	c3                   	ret    

c0026a84 <sseInit>:
c0026a84:	e8 49 00 00 00       	call   c0026ad2 <x87Init>
c0026a89:	0f 20 e0             	mov    eax,cr4
c0026a8c:	66 0d 00 06          	or     ax,0x600
c0026a90:	0f 22 e0             	mov    cr4,eax
c0026a93:	c3                   	ret    

c0026a94 <sseClose>:
c0026a94:	c3                   	ret    
c0026a95:	66 90                	xchg   ax,ax
c0026a97:	66 90                	xchg   ax,ax
c0026a99:	66 90                	xchg   ax,ax
c0026a9b:	66 90                	xchg   ax,ax
c0026a9d:	66 90                	xchg   ax,ax
c0026a9f:	90                   	nop

c0026aa0 <value_37F>:
c0026aa0:	7f 03                	jg     c0026aa5 <value_37A+0x1>

c0026aa2 <value_37E>:
c0026aa2:	7e 03                	jle    c0026aa7 <x87Detect+0x1>

c0026aa4 <value_37A>:
c0026aa4:	7a 03                	jp     c0026aa9 <x87Detect+0x3>

c0026aa6 <x87Detect>:
c0026aa6:	b8 01 00 00 00       	mov    eax,0x1
c0026aab:	0f a2                	cpuid  
c0026aad:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ab3:	74 06                	je     c0026abb <x87Detect.nox87>
c0026ab5:	b8 01 00 00 00       	mov    eax,0x1
c0026aba:	c3                   	ret    

c0026abb <x87Detect.nox87>:
c0026abb:	b8 00 00 00 00       	mov    eax,0x0
c0026ac0:	c3                   	ret    

c0026ac1 <x87Save>:
c0026ac1:	55                   	push   ebp
c0026ac2:	89 e5                	mov    ebp,esp
c0026ac4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ac8:	c9                   	leave  
c0026ac9:	c3                   	ret    

c0026aca <x87Load>:
c0026aca:	55                   	push   ebp
c0026acb:	89 e5                	mov    ebp,esp
c0026acd:	dd 65 08             	frstor [ebp+0x8]
c0026ad0:	c9                   	leave  
c0026ad1:	c3                   	ret    

c0026ad2 <x87Init>:
c0026ad2:	9b db e3             	finit  
c0026ad5:	0f 20 c0             	mov    eax,cr0
c0026ad8:	66 25 fb ff          	and    ax,0xfffb
c0026adc:	66 0d 22 00          	or     ax,0x22
c0026ae0:	0f 22 c0             	mov    cr0,eax
c0026ae3:	0f 06                	clts   
c0026ae5:	d9 2d a4 6a 02 c0    	fldcw  WORD PTR ds:0xc0026aa4
c0026aeb:	c3                   	ret    

c0026aec <x87Close>:
c0026aec:	c3                   	ret    
c0026aed:	66 90                	xchg   ax,ax
c0026aef:	90                   	nop

c0026af0 <__do_global_ctors_aux>:
c0026af0:	a1 e4 96 02 c0       	mov    eax,ds:0xc00296e4
c0026af5:	83 f8 ff             	cmp    eax,0xffffffff
c0026af8:	74 1a                	je     c0026b14 <__do_global_ctors_aux+0x24>
c0026afa:	55                   	push   ebp
c0026afb:	89 e5                	mov    ebp,esp
c0026afd:	53                   	push   ebx
c0026afe:	52                   	push   edx
c0026aff:	bb e4 96 02 c0       	mov    ebx,0xc00296e4
c0026b04:	ff d0                	call   eax
c0026b06:	83 eb 04             	sub    ebx,0x4
c0026b09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026b0b:	83 f8 ff             	cmp    eax,0xffffffff
c0026b0e:	75 f4                	jne    c0026b04 <__do_global_ctors_aux+0x14>
c0026b10:	58                   	pop    eax
c0026b11:	5b                   	pop    ebx
c0026b12:	5d                   	pop    ebp
c0026b13:	c3                   	ret    
c0026b14:	c3                   	ret    
c0026b15:	66 90                	xchg   ax,ax
c0026b17:	90                   	nop

c0026b18 <__divdi3>:
c0026b18:	55                   	push   ebp
c0026b19:	57                   	push   edi
c0026b1a:	56                   	push   esi
c0026b1b:	53                   	push   ebx
c0026b1c:	83 ec 1c             	sub    esp,0x1c
c0026b1f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026b23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b2a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026b2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026b32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b36:	85 db                	test   ebx,ebx
c0026b38:	0f 88 8e 00 00 00    	js     c0026bcc <__divdi3+0xb4>
c0026b3e:	89 dd                	mov    ebp,ebx
c0026b40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026b48:	89 d3                	mov    ebx,edx
c0026b4a:	85 d2                	test   edx,edx
c0026b4c:	79 0d                	jns    c0026b5b <__divdi3+0x43>
c0026b4e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026b52:	f7 d8                	neg    eax
c0026b54:	83 d2 00             	adc    edx,0x0
c0026b57:	f7 da                	neg    edx
c0026b59:	89 d3                	mov    ebx,edx
c0026b5b:	89 c7                	mov    edi,eax
c0026b5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026b60:	85 db                	test   ebx,ebx
c0026b62:	75 48                	jne    c0026bac <__divdi3+0x94>
c0026b64:	39 ef                	cmp    edi,ebp
c0026b66:	76 24                	jbe    c0026b8c <__divdi3+0x74>
c0026b68:	89 ea                	mov    edx,ebp
c0026b6a:	f7 f7                	div    edi
c0026b6c:	89 c1                	mov    ecx,eax
c0026b6e:	31 f6                	xor    esi,esi
c0026b70:	89 c8                	mov    eax,ecx
c0026b72:	89 f2                	mov    edx,esi
c0026b74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b78:	85 c9                	test   ecx,ecx
c0026b7a:	74 07                	je     c0026b83 <__divdi3+0x6b>
c0026b7c:	f7 d8                	neg    eax
c0026b7e:	83 d2 00             	adc    edx,0x0
c0026b81:	f7 da                	neg    edx
c0026b83:	83 c4 1c             	add    esp,0x1c
c0026b86:	5b                   	pop    ebx
c0026b87:	5e                   	pop    esi
c0026b88:	5f                   	pop    edi
c0026b89:	5d                   	pop    ebp
c0026b8a:	c3                   	ret    
c0026b8b:	90                   	nop
c0026b8c:	85 ff                	test   edi,edi
c0026b8e:	75 0b                	jne    c0026b9b <__divdi3+0x83>
c0026b90:	b8 01 00 00 00       	mov    eax,0x1
c0026b95:	31 d2                	xor    edx,edx
c0026b97:	f7 f3                	div    ebx
c0026b99:	89 c7                	mov    edi,eax
c0026b9b:	31 d2                	xor    edx,edx
c0026b9d:	89 e8                	mov    eax,ebp
c0026b9f:	f7 f7                	div    edi
c0026ba1:	89 c6                	mov    esi,eax
c0026ba3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026ba6:	f7 f7                	div    edi
c0026ba8:	89 c1                	mov    ecx,eax
c0026baa:	eb c4                	jmp    c0026b70 <__divdi3+0x58>
c0026bac:	39 eb                	cmp    ebx,ebp
c0026bae:	77 3c                	ja     c0026bec <__divdi3+0xd4>
c0026bb0:	0f bd f3             	bsr    esi,ebx
c0026bb3:	83 f6 1f             	xor    esi,0x1f
c0026bb6:	75 40                	jne    c0026bf8 <__divdi3+0xe0>
c0026bb8:	39 eb                	cmp    ebx,ebp
c0026bba:	72 09                	jb     c0026bc5 <__divdi3+0xad>
c0026bbc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026bbf:	0f 87 97 00 00 00    	ja     c0026c5c <__divdi3+0x144>
c0026bc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bca:	eb a4                	jmp    c0026b70 <__divdi3+0x58>
c0026bcc:	f7 d9                	neg    ecx
c0026bce:	83 d3 00             	adc    ebx,0x0
c0026bd1:	f7 db                	neg    ebx
c0026bd3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026bd6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026bda:	89 dd                	mov    ebp,ebx
c0026bdc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026be4:	e9 5f ff ff ff       	jmp    c0026b48 <__divdi3+0x30>
c0026be9:	8d 76 00             	lea    esi,[esi+0x0]
c0026bec:	31 f6                	xor    esi,esi
c0026bee:	31 c9                	xor    ecx,ecx
c0026bf0:	e9 7b ff ff ff       	jmp    c0026b70 <__divdi3+0x58>
c0026bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf8:	b8 20 00 00 00       	mov    eax,0x20
c0026bfd:	29 f0                	sub    eax,esi
c0026bff:	89 f1                	mov    ecx,esi
c0026c01:	d3 e3                	shl    ebx,cl
c0026c03:	89 fa                	mov    edx,edi
c0026c05:	88 c1                	mov    cl,al
c0026c07:	d3 ea                	shr    edx,cl
c0026c09:	09 da                	or     edx,ebx
c0026c0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c0f:	89 f1                	mov    ecx,esi
c0026c11:	d3 e7                	shl    edi,cl
c0026c13:	89 eb                	mov    ebx,ebp
c0026c15:	88 c1                	mov    cl,al
c0026c17:	d3 eb                	shr    ebx,cl
c0026c19:	89 f1                	mov    ecx,esi
c0026c1b:	d3 e5                	shl    ebp,cl
c0026c1d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026c20:	88 c1                	mov    cl,al
c0026c22:	d3 ea                	shr    edx,cl
c0026c24:	09 d5                	or     ebp,edx
c0026c26:	89 e8                	mov    eax,ebp
c0026c28:	89 da                	mov    edx,ebx
c0026c2a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026c2e:	89 d3                	mov    ebx,edx
c0026c30:	89 c5                	mov    ebp,eax
c0026c32:	f7 e7                	mul    edi
c0026c34:	39 d3                	cmp    ebx,edx
c0026c36:	72 18                	jb     c0026c50 <__divdi3+0x138>
c0026c38:	74 0a                	je     c0026c44 <__divdi3+0x12c>
c0026c3a:	89 e9                	mov    ecx,ebp
c0026c3c:	31 f6                	xor    esi,esi
c0026c3e:	e9 2d ff ff ff       	jmp    c0026b70 <__divdi3+0x58>
c0026c43:	90                   	nop
c0026c44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026c47:	89 f1                	mov    ecx,esi
c0026c49:	d3 e7                	shl    edi,cl
c0026c4b:	39 c7                	cmp    edi,eax
c0026c4d:	73 eb                	jae    c0026c3a <__divdi3+0x122>
c0026c4f:	90                   	nop
c0026c50:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026c53:	31 f6                	xor    esi,esi
c0026c55:	e9 16 ff ff ff       	jmp    c0026b70 <__divdi3+0x58>
c0026c5a:	66 90                	xchg   ax,ax
c0026c5c:	31 c9                	xor    ecx,ecx
c0026c5e:	e9 0d ff ff ff       	jmp    c0026b70 <__divdi3+0x58>
c0026c63:	90                   	nop

c0026c64 <__moddi3>:
c0026c64:	55                   	push   ebp
c0026c65:	57                   	push   edi
c0026c66:	56                   	push   esi
c0026c67:	53                   	push   ebx
c0026c68:	83 ec 2c             	sub    esp,0x2c
c0026c6b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026c6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026c73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026c77:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026c7b:	85 db                	test   ebx,ebx
c0026c7d:	0f 88 85 00 00 00    	js     c0026d08 <__moddi3+0xa4>
c0026c83:	89 de                	mov    esi,ebx
c0026c85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026c8d:	89 d7                	mov    edi,edx
c0026c8f:	85 d2                	test   edx,edx
c0026c91:	79 09                	jns    c0026c9c <__moddi3+0x38>
c0026c93:	f7 d8                	neg    eax
c0026c95:	83 d2 00             	adc    edx,0x0
c0026c98:	f7 da                	neg    edx
c0026c9a:	89 d7                	mov    edi,edx
c0026c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ca0:	89 cd                	mov    ebp,ecx
c0026ca2:	85 ff                	test   edi,edi
c0026ca4:	75 52                	jne    c0026cf8 <__moddi3+0x94>
c0026ca6:	89 c3                	mov    ebx,eax
c0026ca8:	39 f0                	cmp    eax,esi
c0026caa:	76 24                	jbe    c0026cd0 <__moddi3+0x6c>
c0026cac:	89 c8                	mov    eax,ecx
c0026cae:	89 f2                	mov    edx,esi
c0026cb0:	f7 f3                	div    ebx
c0026cb2:	89 d6                	mov    esi,edx
c0026cb4:	89 f0                	mov    eax,esi
c0026cb6:	31 d2                	xor    edx,edx
c0026cb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026cbc:	85 c9                	test   ecx,ecx
c0026cbe:	74 07                	je     c0026cc7 <__moddi3+0x63>
c0026cc0:	f7 d8                	neg    eax
c0026cc2:	83 d2 00             	adc    edx,0x0
c0026cc5:	f7 da                	neg    edx
c0026cc7:	83 c4 2c             	add    esp,0x2c
c0026cca:	5b                   	pop    ebx
c0026ccb:	5e                   	pop    esi
c0026ccc:	5f                   	pop    edi
c0026ccd:	5d                   	pop    ebp
c0026cce:	c3                   	ret    
c0026ccf:	90                   	nop
c0026cd0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026cd4:	85 db                	test   ebx,ebx
c0026cd6:	75 0d                	jne    c0026ce5 <__moddi3+0x81>
c0026cd8:	b8 01 00 00 00       	mov    eax,0x1
c0026cdd:	31 d2                	xor    edx,edx
c0026cdf:	f7 f7                	div    edi
c0026ce1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ce5:	89 f0                	mov    eax,esi
c0026ce7:	31 d2                	xor    edx,edx
c0026ce9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026ced:	f7 f7                	div    edi
c0026cef:	89 e8                	mov    eax,ebp
c0026cf1:	f7 f7                	div    edi
c0026cf3:	89 d6                	mov    esi,edx
c0026cf5:	eb bd                	jmp    c0026cb4 <__moddi3+0x50>
c0026cf7:	90                   	nop
c0026cf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026cfc:	39 f7                	cmp    edi,esi
c0026cfe:	76 20                	jbe    c0026d20 <__moddi3+0xbc>
c0026d00:	89 c8                	mov    eax,ecx
c0026d02:	89 f2                	mov    edx,esi
c0026d04:	eb b2                	jmp    c0026cb8 <__moddi3+0x54>
c0026d06:	66 90                	xchg   ax,ax
c0026d08:	f7 d9                	neg    ecx
c0026d0a:	83 d3 00             	adc    ebx,0x0
c0026d0d:	f7 db                	neg    ebx
c0026d0f:	89 de                	mov    esi,ebx
c0026d11:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026d19:	e9 6f ff ff ff       	jmp    c0026c8d <__moddi3+0x29>
c0026d1e:	66 90                	xchg   ax,ax
c0026d20:	0f bd c7             	bsr    eax,edi
c0026d23:	83 f0 1f             	xor    eax,0x1f
c0026d26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026d2a:	75 24                	jne    c0026d50 <__moddi3+0xec>
c0026d2c:	39 f7                	cmp    edi,esi
c0026d2e:	72 06                	jb     c0026d36 <__moddi3+0xd2>
c0026d30:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026d34:	77 0c                	ja     c0026d42 <__moddi3+0xde>
c0026d36:	89 e9                	mov    ecx,ebp
c0026d38:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026d3c:	19 fe                	sbb    esi,edi
c0026d3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026d42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d46:	89 f2                	mov    edx,esi
c0026d48:	e9 6b ff ff ff       	jmp    c0026cb8 <__moddi3+0x54>
c0026d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0026d50:	b8 20 00 00 00       	mov    eax,0x20
c0026d55:	89 c2                	mov    edx,eax
c0026d57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026d5b:	29 da                	sub    edx,ebx
c0026d5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026d61:	88 d9                	mov    cl,bl
c0026d63:	d3 e7                	shl    edi,cl
c0026d65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d69:	88 d1                	mov    cl,dl
c0026d6b:	d3 e8                	shr    eax,cl
c0026d6d:	09 c7                	or     edi,eax
c0026d6f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026d73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026d77:	89 d8                	mov    eax,ebx
c0026d79:	88 d9                	mov    cl,bl
c0026d7b:	d3 e7                	shl    edi,cl
c0026d7d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d81:	89 f3                	mov    ebx,esi
c0026d83:	88 d1                	mov    cl,dl
c0026d85:	d3 eb                	shr    ebx,cl
c0026d87:	89 c7                	mov    edi,eax
c0026d89:	88 c1                	mov    cl,al
c0026d8b:	d3 e6                	shl    esi,cl
c0026d8d:	89 e8                	mov    eax,ebp
c0026d8f:	88 d1                	mov    cl,dl
c0026d91:	d3 e8                	shr    eax,cl
c0026d93:	09 f0                	or     eax,esi
c0026d95:	89 f9                	mov    ecx,edi
c0026d97:	d3 e5                	shl    ebp,cl
c0026d99:	89 da                	mov    edx,ebx
c0026d9b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026d9f:	89 d3                	mov    ebx,edx
c0026da1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026da5:	89 c6                	mov    esi,eax
c0026da7:	89 d1                	mov    ecx,edx
c0026da9:	39 d3                	cmp    ebx,edx
c0026dab:	72 27                	jb     c0026dd4 <__moddi3+0x170>
c0026dad:	74 21                	je     c0026dd0 <__moddi3+0x16c>
c0026daf:	29 f5                	sub    ebp,esi
c0026db1:	19 cb                	sbb    ebx,ecx
c0026db3:	89 de                	mov    esi,ebx
c0026db5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026db9:	d3 e6                	shl    esi,cl
c0026dbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026dbf:	89 f9                	mov    ecx,edi
c0026dc1:	d3 ed                	shr    ebp,cl
c0026dc3:	09 ee                	or     esi,ebp
c0026dc5:	89 f0                	mov    eax,esi
c0026dc7:	d3 eb                	shr    ebx,cl
c0026dc9:	89 da                	mov    edx,ebx
c0026dcb:	e9 e8 fe ff ff       	jmp    c0026cb8 <__moddi3+0x54>
c0026dd0:	39 c5                	cmp    ebp,eax
c0026dd2:	73 db                	jae    c0026daf <__moddi3+0x14b>
c0026dd4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026dd8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026ddc:	89 d1                	mov    ecx,edx
c0026dde:	89 c6                	mov    esi,eax
c0026de0:	eb cd                	jmp    c0026daf <__moddi3+0x14b>
c0026de2:	66 90                	xchg   ax,ax

c0026de4 <__udivdi3>:
c0026de4:	55                   	push   ebp
c0026de5:	57                   	push   edi
c0026de6:	56                   	push   esi
c0026de7:	53                   	push   ebx
c0026de8:	83 ec 1c             	sub    esp,0x1c
c0026deb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026def:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026df3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026df7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026dfb:	85 d2                	test   edx,edx
c0026dfd:	75 41                	jne    c0026e40 <__udivdi3+0x5c>
c0026dff:	39 f7                	cmp    edi,esi
c0026e01:	76 15                	jbe    c0026e18 <__udivdi3+0x34>
c0026e03:	89 e8                	mov    eax,ebp
c0026e05:	89 f2                	mov    edx,esi
c0026e07:	f7 f7                	div    edi
c0026e09:	31 db                	xor    ebx,ebx
c0026e0b:	89 da                	mov    edx,ebx
c0026e0d:	83 c4 1c             	add    esp,0x1c
c0026e10:	5b                   	pop    ebx
c0026e11:	5e                   	pop    esi
c0026e12:	5f                   	pop    edi
c0026e13:	5d                   	pop    ebp
c0026e14:	c3                   	ret    
c0026e15:	8d 76 00             	lea    esi,[esi+0x0]
c0026e18:	89 f9                	mov    ecx,edi
c0026e1a:	85 ff                	test   edi,edi
c0026e1c:	75 0b                	jne    c0026e29 <__udivdi3+0x45>
c0026e1e:	b8 01 00 00 00       	mov    eax,0x1
c0026e23:	31 d2                	xor    edx,edx
c0026e25:	f7 f7                	div    edi
c0026e27:	89 c1                	mov    ecx,eax
c0026e29:	31 d2                	xor    edx,edx
c0026e2b:	89 f0                	mov    eax,esi
c0026e2d:	f7 f1                	div    ecx
c0026e2f:	89 c3                	mov    ebx,eax
c0026e31:	89 e8                	mov    eax,ebp
c0026e33:	f7 f1                	div    ecx
c0026e35:	89 da                	mov    edx,ebx
c0026e37:	83 c4 1c             	add    esp,0x1c
c0026e3a:	5b                   	pop    ebx
c0026e3b:	5e                   	pop    esi
c0026e3c:	5f                   	pop    edi
c0026e3d:	5d                   	pop    ebp
c0026e3e:	c3                   	ret    
c0026e3f:	90                   	nop
c0026e40:	39 f2                	cmp    edx,esi
c0026e42:	77 1c                	ja     c0026e60 <__udivdi3+0x7c>
c0026e44:	0f bd da             	bsr    ebx,edx
c0026e47:	83 f3 1f             	xor    ebx,0x1f
c0026e4a:	75 24                	jne    c0026e70 <__udivdi3+0x8c>
c0026e4c:	39 f2                	cmp    edx,esi
c0026e4e:	72 08                	jb     c0026e58 <__udivdi3+0x74>
c0026e50:	39 ef                	cmp    edi,ebp
c0026e52:	0f 87 84 00 00 00    	ja     c0026edc <__udivdi3+0xf8>
c0026e58:	b8 01 00 00 00       	mov    eax,0x1
c0026e5d:	eb ac                	jmp    c0026e0b <__udivdi3+0x27>
c0026e5f:	90                   	nop
c0026e60:	31 db                	xor    ebx,ebx
c0026e62:	31 c0                	xor    eax,eax
c0026e64:	89 da                	mov    edx,ebx
c0026e66:	83 c4 1c             	add    esp,0x1c
c0026e69:	5b                   	pop    ebx
c0026e6a:	5e                   	pop    esi
c0026e6b:	5f                   	pop    edi
c0026e6c:	5d                   	pop    ebp
c0026e6d:	c3                   	ret    
c0026e6e:	66 90                	xchg   ax,ax
c0026e70:	b8 20 00 00 00       	mov    eax,0x20
c0026e75:	29 d8                	sub    eax,ebx
c0026e77:	88 d9                	mov    cl,bl
c0026e79:	d3 e2                	shl    edx,cl
c0026e7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026e7f:	89 fa                	mov    edx,edi
c0026e81:	88 c1                	mov    cl,al
c0026e83:	d3 ea                	shr    edx,cl
c0026e85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026e89:	09 d1                	or     ecx,edx
c0026e8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026e8f:	88 d9                	mov    cl,bl
c0026e91:	d3 e7                	shl    edi,cl
c0026e93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e97:	89 f7                	mov    edi,esi
c0026e99:	88 c1                	mov    cl,al
c0026e9b:	d3 ef                	shr    edi,cl
c0026e9d:	88 d9                	mov    cl,bl
c0026e9f:	d3 e6                	shl    esi,cl
c0026ea1:	89 ea                	mov    edx,ebp
c0026ea3:	88 c1                	mov    cl,al
c0026ea5:	d3 ea                	shr    edx,cl
c0026ea7:	09 d6                	or     esi,edx
c0026ea9:	89 f0                	mov    eax,esi
c0026eab:	89 fa                	mov    edx,edi
c0026ead:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026eb1:	89 d7                	mov    edi,edx
c0026eb3:	89 c6                	mov    esi,eax
c0026eb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026eb9:	39 d7                	cmp    edi,edx
c0026ebb:	72 13                	jb     c0026ed0 <__udivdi3+0xec>
c0026ebd:	74 09                	je     c0026ec8 <__udivdi3+0xe4>
c0026ebf:	89 f0                	mov    eax,esi
c0026ec1:	31 db                	xor    ebx,ebx
c0026ec3:	e9 43 ff ff ff       	jmp    c0026e0b <__udivdi3+0x27>
c0026ec8:	88 d9                	mov    cl,bl
c0026eca:	d3 e5                	shl    ebp,cl
c0026ecc:	39 c5                	cmp    ebp,eax
c0026ece:	73 ef                	jae    c0026ebf <__udivdi3+0xdb>
c0026ed0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026ed3:	31 db                	xor    ebx,ebx
c0026ed5:	e9 31 ff ff ff       	jmp    c0026e0b <__udivdi3+0x27>
c0026eda:	66 90                	xchg   ax,ax
c0026edc:	31 c0                	xor    eax,eax
c0026ede:	e9 28 ff ff ff       	jmp    c0026e0b <__udivdi3+0x27>
c0026ee3:	90                   	nop

c0026ee4 <__umoddi3>:
c0026ee4:	55                   	push   ebp
c0026ee5:	57                   	push   edi
c0026ee6:	56                   	push   esi
c0026ee7:	53                   	push   ebx
c0026ee8:	83 ec 1c             	sub    esp,0x1c
c0026eeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026eef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ef3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026ef7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026efb:	89 da                	mov    edx,ebx
c0026efd:	85 c0                	test   eax,eax
c0026eff:	75 37                	jne    c0026f38 <__umoddi3+0x54>
c0026f01:	39 df                	cmp    edi,ebx
c0026f03:	76 13                	jbe    c0026f18 <__umoddi3+0x34>
c0026f05:	89 f0                	mov    eax,esi
c0026f07:	f7 f7                	div    edi
c0026f09:	89 d0                	mov    eax,edx
c0026f0b:	31 d2                	xor    edx,edx
c0026f0d:	83 c4 1c             	add    esp,0x1c
c0026f10:	5b                   	pop    ebx
c0026f11:	5e                   	pop    esi
c0026f12:	5f                   	pop    edi
c0026f13:	5d                   	pop    ebp
c0026f14:	c3                   	ret    
c0026f15:	8d 76 00             	lea    esi,[esi+0x0]
c0026f18:	89 fd                	mov    ebp,edi
c0026f1a:	85 ff                	test   edi,edi
c0026f1c:	75 0b                	jne    c0026f29 <__umoddi3+0x45>
c0026f1e:	b8 01 00 00 00       	mov    eax,0x1
c0026f23:	31 d2                	xor    edx,edx
c0026f25:	f7 f7                	div    edi
c0026f27:	89 c5                	mov    ebp,eax
c0026f29:	89 d8                	mov    eax,ebx
c0026f2b:	31 d2                	xor    edx,edx
c0026f2d:	f7 f5                	div    ebp
c0026f2f:	89 f0                	mov    eax,esi
c0026f31:	f7 f5                	div    ebp
c0026f33:	89 d0                	mov    eax,edx
c0026f35:	eb d4                	jmp    c0026f0b <__umoddi3+0x27>
c0026f37:	90                   	nop
c0026f38:	89 f1                	mov    ecx,esi
c0026f3a:	39 d8                	cmp    eax,ebx
c0026f3c:	76 0a                	jbe    c0026f48 <__umoddi3+0x64>
c0026f3e:	89 f0                	mov    eax,esi
c0026f40:	83 c4 1c             	add    esp,0x1c
c0026f43:	5b                   	pop    ebx
c0026f44:	5e                   	pop    esi
c0026f45:	5f                   	pop    edi
c0026f46:	5d                   	pop    ebp
c0026f47:	c3                   	ret    
c0026f48:	0f bd e8             	bsr    ebp,eax
c0026f4b:	83 f5 1f             	xor    ebp,0x1f
c0026f4e:	75 1c                	jne    c0026f6c <__umoddi3+0x88>
c0026f50:	39 d8                	cmp    eax,ebx
c0026f52:	72 04                	jb     c0026f58 <__umoddi3+0x74>
c0026f54:	39 f7                	cmp    edi,esi
c0026f56:	77 08                	ja     c0026f60 <__umoddi3+0x7c>
c0026f58:	89 da                	mov    edx,ebx
c0026f5a:	29 fe                	sub    esi,edi
c0026f5c:	19 c2                	sbb    edx,eax
c0026f5e:	89 f1                	mov    ecx,esi
c0026f60:	89 c8                	mov    eax,ecx
c0026f62:	83 c4 1c             	add    esp,0x1c
c0026f65:	5b                   	pop    ebx
c0026f66:	5e                   	pop    esi
c0026f67:	5f                   	pop    edi
c0026f68:	5d                   	pop    ebp
c0026f69:	c3                   	ret    
c0026f6a:	66 90                	xchg   ax,ax
c0026f6c:	ba 20 00 00 00       	mov    edx,0x20
c0026f71:	29 ea                	sub    edx,ebp
c0026f73:	89 e9                	mov    ecx,ebp
c0026f75:	d3 e0                	shl    eax,cl
c0026f77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f7b:	89 f8                	mov    eax,edi
c0026f7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026f81:	88 d1                	mov    cl,dl
c0026f83:	d3 e8                	shr    eax,cl
c0026f85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f89:	09 c1                	or     ecx,eax
c0026f8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026f8f:	89 e9                	mov    ecx,ebp
c0026f91:	d3 e7                	shl    edi,cl
c0026f93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026f97:	89 d8                	mov    eax,ebx
c0026f99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f9d:	88 d1                	mov    cl,dl
c0026f9f:	d3 e8                	shr    eax,cl
c0026fa1:	89 c7                	mov    edi,eax
c0026fa3:	89 e9                	mov    ecx,ebp
c0026fa5:	d3 e3                	shl    ebx,cl
c0026fa7:	89 f0                	mov    eax,esi
c0026fa9:	88 d1                	mov    cl,dl
c0026fab:	d3 e8                	shr    eax,cl
c0026fad:	09 d8                	or     eax,ebx
c0026faf:	89 e9                	mov    ecx,ebp
c0026fb1:	d3 e6                	shl    esi,cl
c0026fb3:	89 f3                	mov    ebx,esi
c0026fb5:	89 fa                	mov    edx,edi
c0026fb7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026fbb:	89 d1                	mov    ecx,edx
c0026fbd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026fc1:	89 c6                	mov    esi,eax
c0026fc3:	89 d7                	mov    edi,edx
c0026fc5:	39 d1                	cmp    ecx,edx
c0026fc7:	72 27                	jb     c0026ff0 <__umoddi3+0x10c>
c0026fc9:	74 21                	je     c0026fec <__umoddi3+0x108>
c0026fcb:	89 ca                	mov    edx,ecx
c0026fcd:	29 f3                	sub    ebx,esi
c0026fcf:	19 fa                	sbb    edx,edi
c0026fd1:	89 d0                	mov    eax,edx
c0026fd3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026fd7:	d3 e0                	shl    eax,cl
c0026fd9:	89 e9                	mov    ecx,ebp
c0026fdb:	d3 eb                	shr    ebx,cl
c0026fdd:	09 d8                	or     eax,ebx
c0026fdf:	d3 ea                	shr    edx,cl
c0026fe1:	83 c4 1c             	add    esp,0x1c
c0026fe4:	5b                   	pop    ebx
c0026fe5:	5e                   	pop    esi
c0026fe6:	5f                   	pop    edi
c0026fe7:	5d                   	pop    ebp
c0026fe8:	c3                   	ret    
c0026fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fec:	39 c3                	cmp    ebx,eax
c0026fee:	73 db                	jae    c0026fcb <__umoddi3+0xe7>
c0026ff0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ff4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026ff8:	89 d7                	mov    edi,edx
c0026ffa:	89 c6                	mov    esi,eax
c0026ffc:	eb cd                	jmp    c0026fcb <__umoddi3+0xe7>

c0026ffe <__addsf3>:
c0026ffe:	55                   	push   ebp
c0026fff:	89 e5                	mov    ebp,esp
c0027001:	57                   	push   edi
c0027002:	56                   	push   esi
c0027003:	53                   	push   ebx
c0027004:	83 ec 08             	sub    esp,0x8
c0027007:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002700a:	89 fa                	mov    edx,edi
c002700c:	89 f8                	mov    eax,edi
c002700e:	c1 f8 17             	sar    eax,0x17
c0027011:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027014:	c1 e2 08             	shl    edx,0x8
c0027017:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002701d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027020:	89 de                	mov    esi,ebx
c0027022:	c1 fe 17             	sar    esi,0x17
c0027025:	c1 e3 08             	shl    ebx,0x8
c0027028:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002702e:	31 f0                	xor    eax,esi
c0027030:	0f 88 3b 01 00 00    	js     c0027171 <__addsf3+0x173>
c0027036:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027039:	29 f1                	sub    ecx,esi
c002703b:	85 c9                	test   ecx,ecx
c002703d:	7e 54                	jle    c0027093 <__addsf3+0x95>
c002703f:	89 f0                	mov    eax,esi
c0027041:	84 c0                	test   al,al
c0027043:	75 10                	jne    c0027055 <__addsf3+0x57>
c0027045:	85 db                	test   ebx,ebx
c0027047:	0f 84 aa 02 00 00    	je     c00272f7 <__addsf3+0x2f9>
c002704d:	49                   	dec    ecx
c002704e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027051:	74 38                	je     c002708b <__addsf3+0x8d>
c0027053:	eb 13                	jmp    c0027068 <__addsf3+0x6a>
c0027055:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027058:	f7 d0                	not    eax
c002705a:	84 c0                	test   al,al
c002705c:	0f 84 95 02 00 00    	je     c00272f7 <__addsf3+0x2f9>
c0027062:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027068:	83 f9 1f             	cmp    ecx,0x1f
c002706b:	0f 8f 86 02 00 00    	jg     c00272f7 <__addsf3+0x2f9>
c0027071:	89 de                	mov    esi,ebx
c0027073:	d3 ee                	shr    esi,cl
c0027075:	b8 20 00 00 00       	mov    eax,0x20
c002707a:	29 c8                	sub    eax,ecx
c002707c:	89 c1                	mov    ecx,eax
c002707e:	d3 e3                	shl    ebx,cl
c0027080:	31 c0                	xor    eax,eax
c0027082:	85 db                	test   ebx,ebx
c0027084:	0f 95 c0             	setne  al
c0027087:	09 f0                	or     eax,esi
c0027089:	01 d0                	add    eax,edx
c002708b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002708e:	e9 b6 00 00 00       	jmp    c0027149 <__addsf3+0x14b>
c0027093:	74 5c                	je     c00270f1 <__addsf3+0xf3>
c0027095:	89 f1                	mov    ecx,esi
c0027097:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002709a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002709d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00270a1:	75 14                	jne    c00270b7 <__addsf3+0xb9>
c00270a3:	85 d2                	test   edx,edx
c00270a5:	0f 84 4c 02 00 00    	je     c00272f7 <__addsf3+0x2f9>
c00270ab:	49                   	dec    ecx
c00270ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00270af:	0f 84 94 00 00 00    	je     c0027149 <__addsf3+0x14b>
c00270b5:	eb 12                	jmp    c00270c9 <__addsf3+0xcb>
c00270b7:	89 f0                	mov    eax,esi
c00270b9:	f7 d0                	not    eax
c00270bb:	84 c0                	test   al,al
c00270bd:	0f 84 34 02 00 00    	je     c00272f7 <__addsf3+0x2f9>
c00270c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270cc:	83 f9 1f             	cmp    ecx,0x1f
c00270cf:	0f 8f 22 02 00 00    	jg     c00272f7 <__addsf3+0x2f9>
c00270d5:	89 d7                	mov    edi,edx
c00270d7:	d3 ef                	shr    edi,cl
c00270d9:	b8 20 00 00 00       	mov    eax,0x20
c00270de:	29 c8                	sub    eax,ecx
c00270e0:	89 c1                	mov    ecx,eax
c00270e2:	d3 e2                	shl    edx,cl
c00270e4:	31 c0                	xor    eax,eax
c00270e6:	85 d2                	test   edx,edx
c00270e8:	0f 95 c0             	setne  al
c00270eb:	09 f8                	or     eax,edi
c00270ed:	01 d8                	add    eax,ebx
c00270ef:	eb 58                	jmp    c0027149 <__addsf3+0x14b>
c00270f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270f4:	8d 70 01             	lea    esi,[eax+0x1]
c00270f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00270fd:	75 32                	jne    c0027131 <__addsf3+0x133>
c00270ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027103:	75 1f                	jne    c0027124 <__addsf3+0x126>
c0027105:	85 d2                	test   edx,edx
c0027107:	0f 84 e0 01 00 00    	je     c00272ed <__addsf3+0x2ef>
c002710d:	85 db                	test   ebx,ebx
c002710f:	0f 84 e2 01 00 00    	je     c00272f7 <__addsf3+0x2f9>
c0027115:	89 d0                	mov    eax,edx
c0027117:	01 d8                	add    eax,ebx
c0027119:	0f 89 a9 01 00 00    	jns    c00272c8 <__addsf3+0x2ca>
c002711f:	e9 9d 01 00 00       	jmp    c00272c1 <__addsf3+0x2c3>
c0027124:	85 d2                	test   edx,edx
c0027126:	0f 85 cb 01 00 00    	jne    c00272f7 <__addsf3+0x2f9>
c002712c:	e9 bc 01 00 00       	jmp    c00272ed <__addsf3+0x2ef>
c0027131:	31 c0                	xor    eax,eax
c0027133:	89 f1                	mov    ecx,esi
c0027135:	f7 d1                	not    ecx
c0027137:	84 c9                	test   cl,cl
c0027139:	0f 84 90 01 00 00    	je     c00272cf <__addsf3+0x2d1>
c002713f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027142:	d1 e8                	shr    eax,1
c0027144:	e9 86 01 00 00       	jmp    c00272cf <__addsf3+0x2d1>
c0027149:	85 c0                	test   eax,eax
c002714b:	0f 89 7e 01 00 00    	jns    c00272cf <__addsf3+0x2d1>
c0027151:	46                   	inc    esi
c0027152:	89 f2                	mov    edx,esi
c0027154:	f7 d2                	not    edx
c0027156:	84 d2                	test   dl,dl
c0027158:	0f 84 6f 01 00 00    	je     c00272cd <__addsf3+0x2cf>
c002715e:	89 c2                	mov    edx,eax
c0027160:	83 e2 01             	and    edx,0x1
c0027163:	d1 e8                	shr    eax,1
c0027165:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002716a:	09 d0                	or     eax,edx
c002716c:	e9 5e 01 00 00       	jmp    c00272cf <__addsf3+0x2d1>
c0027171:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027175:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027178:	89 f0                	mov    eax,esi
c002717a:	0f b6 c0             	movzx  eax,al
c002717d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027180:	29 c1                	sub    ecx,eax
c0027182:	85 c9                	test   ecx,ecx
c0027184:	7e 55                	jle    c00271db <__addsf3+0x1dd>
c0027186:	85 c0                	test   eax,eax
c0027188:	75 11                	jne    c002719b <__addsf3+0x19d>
c002718a:	85 db                	test   ebx,ebx
c002718c:	0f 84 65 01 00 00    	je     c00272f7 <__addsf3+0x2f9>
c0027192:	49                   	dec    ecx
c0027193:	75 19                	jne    c00271ae <__addsf3+0x1b0>
c0027195:	89 d0                	mov    eax,edx
c0027197:	29 d8                	sub    eax,ebx
c0027199:	eb 38                	jmp    c00271d3 <__addsf3+0x1d5>
c002719b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002719e:	f7 d0                	not    eax
c00271a0:	84 c0                	test   al,al
c00271a2:	0f 84 4f 01 00 00    	je     c00272f7 <__addsf3+0x2f9>
c00271a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271ae:	83 f9 1f             	cmp    ecx,0x1f
c00271b1:	0f 8f 40 01 00 00    	jg     c00272f7 <__addsf3+0x2f9>
c00271b7:	89 de                	mov    esi,ebx
c00271b9:	d3 ee                	shr    esi,cl
c00271bb:	b8 20 00 00 00       	mov    eax,0x20
c00271c0:	29 c8                	sub    eax,ecx
c00271c2:	89 c1                	mov    ecx,eax
c00271c4:	d3 e3                	shl    ebx,cl
c00271c6:	31 c0                	xor    eax,eax
c00271c8:	85 db                	test   ebx,ebx
c00271ca:	0f 95 c0             	setne  al
c00271cd:	09 f0                	or     eax,esi
c00271cf:	29 c2                	sub    edx,eax
c00271d1:	89 d0                	mov    eax,edx
c00271d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00271d6:	e9 af 00 00 00       	jmp    c002728a <__addsf3+0x28c>
c00271db:	74 5c                	je     c0027239 <__addsf3+0x23b>
c00271dd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00271e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00271e3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00271e7:	75 14                	jne    c00271fd <__addsf3+0x1ff>
c00271e9:	85 d2                	test   edx,edx
c00271eb:	0f 84 06 01 00 00    	je     c00272f7 <__addsf3+0x2f9>
c00271f1:	48                   	dec    eax
c00271f2:	75 1b                	jne    c002720f <__addsf3+0x211>
c00271f4:	89 d8                	mov    eax,ebx
c00271f6:	29 d0                	sub    eax,edx
c00271f8:	e9 8d 00 00 00       	jmp    c002728a <__addsf3+0x28c>
c00271fd:	89 f1                	mov    ecx,esi
c00271ff:	f7 d1                	not    ecx
c0027201:	84 c9                	test   cl,cl
c0027203:	0f 84 ee 00 00 00    	je     c00272f7 <__addsf3+0x2f9>
c0027209:	81 ca 00 00 00 80    	or     edx,0x80000000
c002720f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027212:	83 f8 1f             	cmp    eax,0x1f
c0027215:	0f 8f dc 00 00 00    	jg     c00272f7 <__addsf3+0x2f9>
c002721b:	89 d7                	mov    edi,edx
c002721d:	88 c1                	mov    cl,al
c002721f:	d3 ef                	shr    edi,cl
c0027221:	b9 20 00 00 00       	mov    ecx,0x20
c0027226:	29 c1                	sub    ecx,eax
c0027228:	d3 e2                	shl    edx,cl
c002722a:	31 c0                	xor    eax,eax
c002722c:	85 d2                	test   edx,edx
c002722e:	0f 95 c0             	setne  al
c0027231:	09 f8                	or     eax,edi
c0027233:	29 c3                	sub    ebx,eax
c0027235:	89 d8                	mov    eax,ebx
c0027237:	eb 51                	jmp    c002728a <__addsf3+0x28c>
c0027239:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002723c:	40                   	inc    eax
c002723d:	a8 fe                	test   al,0xfe
c002723f:	75 3d                	jne    c002727e <__addsf3+0x280>
c0027241:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027245:	0f 85 a7 00 00 00    	jne    c00272f2 <__addsf3+0x2f4>
c002724b:	85 d2                	test   edx,edx
c002724d:	75 12                	jne    c0027261 <__addsf3+0x263>
c002724f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027252:	85 db                	test   ebx,ebx
c0027254:	0f 85 9d 00 00 00    	jne    c00272f7 <__addsf3+0x2f9>
c002725a:	31 ff                	xor    edi,edi
c002725c:	e9 96 00 00 00       	jmp    c00272f7 <__addsf3+0x2f9>
c0027261:	85 db                	test   ebx,ebx
c0027263:	0f 84 8e 00 00 00    	je     c00272f7 <__addsf3+0x2f9>
c0027269:	89 d0                	mov    eax,edx
c002726b:	29 d8                	sub    eax,ebx
c002726d:	79 06                	jns    c0027275 <__addsf3+0x277>
c002726f:	89 d8                	mov    eax,ebx
c0027271:	29 d0                	sub    eax,edx
c0027273:	eb 5a                	jmp    c00272cf <__addsf3+0x2d1>
c0027275:	bf 00 00 00 00       	mov    edi,0x0
c002727a:	74 7b                	je     c00272f7 <__addsf3+0x2f9>
c002727c:	eb 4a                	jmp    c00272c8 <__addsf3+0x2ca>
c002727e:	89 d0                	mov    eax,edx
c0027280:	29 d8                	sub    eax,ebx
c0027282:	79 12                	jns    c0027296 <__addsf3+0x298>
c0027284:	89 d8                	mov    eax,ebx
c0027286:	29 d0                	sub    eax,edx
c0027288:	eb 09                	jmp    c0027293 <__addsf3+0x295>
c002728a:	85 c0                	test   eax,eax
c002728c:	79 41                	jns    c00272cf <__addsf3+0x2d1>
c002728e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027293:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027296:	31 f6                	xor    esi,esi
c0027298:	85 c0                	test   eax,eax
c002729a:	74 33                	je     c00272cf <__addsf3+0x2d1>
c002729c:	0f bd c8             	bsr    ecx,eax
c002729f:	83 f1 1f             	xor    ecx,0x1f
c00272a2:	d3 e0                	shl    eax,cl
c00272a4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00272a8:	39 ca                	cmp    edx,ecx
c00272aa:	7f 10                	jg     c00272bc <__addsf3+0x2be>
c00272ac:	29 d1                	sub    ecx,edx
c00272ae:	41                   	inc    ecx
c00272af:	d3 e8                	shr    eax,cl
c00272b1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272b4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00272ba:	eb 13                	jmp    c00272cf <__addsf3+0x2d1>
c00272bc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272bf:	29 ce                	sub    esi,ecx
c00272c1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c6:	eb 07                	jmp    c00272cf <__addsf3+0x2d1>
c00272c8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00272cb:	eb 02                	jmp    c00272cf <__addsf3+0x2d1>
c00272cd:	31 c0                	xor    eax,eax
c00272cf:	89 c2                	mov    edx,eax
c00272d1:	c1 ea 08             	shr    edx,0x8
c00272d4:	a8 7f                	test   al,0x7f
c00272d6:	0f 95 c1             	setne  cl
c00272d9:	09 d1                	or     ecx,edx
c00272db:	83 e1 01             	and    ecx,0x1
c00272de:	c1 e8 07             	shr    eax,0x7
c00272e1:	21 c8                	and    eax,ecx
c00272e3:	c1 e6 17             	shl    esi,0x17
c00272e6:	09 d6                	or     esi,edx
c00272e8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00272eb:	eb 0a                	jmp    c00272f7 <__addsf3+0x2f9>
c00272ed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00272f0:	eb 05                	jmp    c00272f7 <__addsf3+0x2f9>
c00272f2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00272f7:	89 f8                	mov    eax,edi
c00272f9:	5a                   	pop    edx
c00272fa:	59                   	pop    ecx
c00272fb:	5b                   	pop    ebx
c00272fc:	5e                   	pop    esi
c00272fd:	5f                   	pop    edi
c00272fe:	5d                   	pop    ebp
c00272ff:	c3                   	ret    

c0027300 <__subsf3>:
c0027300:	55                   	push   ebp
c0027301:	89 e5                	mov    ebp,esp
c0027303:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027306:	05 00 00 00 80       	add    eax,0x80000000
c002730b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002730e:	5d                   	pop    ebp
c002730f:	e9 ea fc ff ff       	jmp    c0026ffe <__addsf3>

c0027314 <__negsf2>:
c0027314:	55                   	push   ebp
c0027315:	89 e5                	mov    ebp,esp
c0027317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002731a:	05 00 00 00 80       	add    eax,0x80000000
c002731f:	5d                   	pop    ebp
c0027320:	c3                   	ret    

c0027321 <__mulsf3>:
c0027321:	55                   	push   ebp
c0027322:	89 e5                	mov    ebp,esp
c0027324:	57                   	push   edi
c0027325:	56                   	push   esi
c0027326:	53                   	push   ebx
c0027327:	83 ec 1c             	sub    esp,0x1c
c002732a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002732d:	89 f0                	mov    eax,esi
c002732f:	89 f1                	mov    ecx,esi
c0027331:	c1 f9 17             	sar    ecx,0x17
c0027334:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027337:	c1 e0 08             	shl    eax,0x8
c002733a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002733f:	89 c1                	mov    ecx,eax
c0027341:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027344:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027347:	89 c7                	mov    edi,eax
c0027349:	c1 ff 17             	sar    edi,0x17
c002734c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027350:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027353:	89 f8                	mov    eax,edi
c0027355:	0f b6 c0             	movzx  eax,al
c0027358:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002735b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002735f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027362:	42                   	inc    edx
c0027363:	80 e2 fe             	and    dl,0xfe
c0027366:	75 7b                	jne    c00273e3 <__mulsf3+0xc2>
c0027368:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002736c:	74 54                	je     c00273c2 <__mulsf3+0xa1>
c002736e:	85 c9                	test   ecx,ecx
c0027370:	0f 85 64 01 00 00    	jne    c00274da <__mulsf3+0x1b9>
c0027376:	8d 57 01             	lea    edx,[edi+0x1]
c0027379:	80 e2 fe             	and    dl,0xfe
c002737c:	75 1f                	jne    c002739d <__mulsf3+0x7c>
c002737e:	85 c0                	test   eax,eax
c0027380:	b8 00 00 00 00       	mov    eax,0x0
c0027385:	74 29                	je     c00273b0 <__mulsf3+0x8f>
c0027387:	53                   	push   ebx
c0027388:	53                   	push   ebx
c0027389:	50                   	push   eax
c002738a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002738d:	e8 96 05 00 00       	call   c0027928 <__nesf2>
c0027392:	83 c4 10             	add    esp,0x10
c0027395:	85 c0                	test   eax,eax
c0027397:	0f 85 3a 01 00 00    	jne    c00274d7 <__mulsf3+0x1b6>
c002739d:	85 ff                	test   edi,edi
c002739f:	0f 89 35 01 00 00    	jns    c00274da <__mulsf3+0x1b9>
c00273a5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00273ab:	e9 2a 01 00 00       	jmp    c00274da <__mulsf3+0x1b9>
c00273b0:	51                   	push   ecx
c00273b1:	51                   	push   ecx
c00273b2:	50                   	push   eax
c00273b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273b6:	e8 6d 05 00 00       	call   c0027928 <__nesf2>
c00273bb:	83 c4 10             	add    esp,0x10
c00273be:	85 c0                	test   eax,eax
c00273c0:	eb 15                	jmp    c00273d7 <__mulsf3+0xb6>
c00273c2:	85 c9                	test   ecx,ecx
c00273c4:	74 0b                	je     c00273d1 <__mulsf3+0xb0>
c00273c6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00273c9:	01 c9                	add    ecx,ecx
c00273cb:	78 16                	js     c00273e3 <__mulsf3+0xc2>
c00273cd:	89 d3                	mov    ebx,edx
c00273cf:	eb f5                	jmp    c00273c6 <__mulsf3+0xa5>
c00273d1:	89 f8                	mov    eax,edi
c00273d3:	f7 d0                	not    eax
c00273d5:	84 c0                	test   al,al
c00273d7:	75 c4                	jne    c002739d <__mulsf3+0x7c>
c00273d9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00273de:	e9 f7 00 00 00       	jmp    c00274da <__mulsf3+0x1b9>
c00273e3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00273e6:	c1 e6 08             	shl    esi,0x8
c00273e9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00273ef:	8d 57 01             	lea    edx,[edi+0x1]
c00273f2:	80 e2 fe             	and    dl,0xfe
c00273f5:	75 63                	jne    c002745a <__mulsf3+0x139>
c00273f7:	85 c0                	test   eax,eax
c00273f9:	74 2f                	je     c002742a <__mulsf3+0x109>
c00273fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00273ff:	0f 89 d2 00 00 00    	jns    c00274d7 <__mulsf3+0x1b6>
c0027405:	52                   	push   edx
c0027406:	52                   	push   edx
c0027407:	6a 00                	push   0x0
c0027409:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002740c:	e8 dc 04 00 00       	call   c00278ed <__eqsf2>
c0027411:	83 c4 10             	add    esp,0x10
c0027414:	85 c0                	test   eax,eax
c0027416:	0f 85 bb 00 00 00    	jne    c00274d7 <__mulsf3+0x1b6>
c002741c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002741f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027425:	e9 b0 00 00 00       	jmp    c00274da <__mulsf3+0x1b9>
c002742a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002742d:	50                   	push   eax
c002742e:	50                   	push   eax
c002742f:	6a 00                	push   0x0
c0027431:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027434:	e8 b4 04 00 00       	call   c00278ed <__eqsf2>
c0027439:	83 c4 10             	add    esp,0x10
c002743c:	85 c0                	test   eax,eax
c002743e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027441:	75 0c                	jne    c002744f <__mulsf3+0x12e>
c0027443:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027447:	0f 89 8a 00 00 00    	jns    c00274d7 <__mulsf3+0x1b6>
c002744d:	eb cd                	jmp    c002741c <__mulsf3+0xfb>
c002744f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027452:	01 f6                	add    esi,esi
c0027454:	78 04                	js     c002745a <__mulsf3+0x139>
c0027456:	89 c3                	mov    ebx,eax
c0027458:	eb f5                	jmp    c002744f <__mulsf3+0x12e>
c002745a:	89 c8                	mov    eax,ecx
c002745c:	0d 00 00 00 80       	or     eax,0x80000000
c0027461:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027467:	f7 e6                	mul    esi
c0027469:	85 c0                	test   eax,eax
c002746b:	0f 95 c0             	setne  al
c002746e:	0f b6 c0             	movzx  eax,al
c0027471:	09 c2                	or     edx,eax
c0027473:	78 03                	js     c0027478 <__mulsf3+0x157>
c0027475:	01 d2                	add    edx,edx
c0027477:	4b                   	dec    ebx
c0027478:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002747e:	7f 22                	jg     c00274a2 <__mulsf3+0x181>
c0027480:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027486:	85 db                	test   ebx,ebx
c0027488:	7f 23                	jg     c00274ad <__mulsf3+0x18c>
c002748a:	83 fb e9             	cmp    ebx,0xffffffe9
c002748d:	7c 1a                	jl     c00274a9 <__mulsf3+0x188>
c002748f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027495:	b9 01 00 00 00       	mov    ecx,0x1
c002749a:	29 d9                	sub    ecx,ebx
c002749c:	d3 ea                	shr    edx,cl
c002749e:	31 db                	xor    ebx,ebx
c00274a0:	eb 0b                	jmp    c00274ad <__mulsf3+0x18c>
c00274a2:	bb ff 00 00 00       	mov    ebx,0xff
c00274a7:	eb 02                	jmp    c00274ab <__mulsf3+0x18a>
c00274a9:	31 db                	xor    ebx,ebx
c00274ab:	31 d2                	xor    edx,edx
c00274ad:	89 d0                	mov    eax,edx
c00274af:	c1 e8 08             	shr    eax,0x8
c00274b2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00274b5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00274bb:	09 fb                	or     ebx,edi
c00274bd:	c1 e3 17             	shl    ebx,0x17
c00274c0:	09 c3                	or     ebx,eax
c00274c2:	f6 c2 7f             	test   dl,0x7f
c00274c5:	0f 95 c1             	setne  cl
c00274c8:	09 c8                	or     eax,ecx
c00274ca:	83 e0 01             	and    eax,0x1
c00274cd:	c1 ea 07             	shr    edx,0x7
c00274d0:	21 c2                	and    edx,eax
c00274d2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00274d5:	eb 03                	jmp    c00274da <__mulsf3+0x1b9>
c00274d7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00274da:	89 f0                	mov    eax,esi
c00274dc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274df:	5b                   	pop    ebx
c00274e0:	5e                   	pop    esi
c00274e1:	5f                   	pop    edi
c00274e2:	5d                   	pop    ebp
c00274e3:	c3                   	ret    

c00274e4 <__divsf3>:
c00274e4:	55                   	push   ebp
c00274e5:	89 e5                	mov    ebp,esp
c00274e7:	57                   	push   edi
c00274e8:	56                   	push   esi
c00274e9:	53                   	push   ebx
c00274ea:	83 ec 1c             	sub    esp,0x1c
c00274ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00274f0:	89 d8                	mov    eax,ebx
c00274f2:	89 d9                	mov    ecx,ebx
c00274f4:	c1 f9 17             	sar    ecx,0x17
c00274f7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00274fa:	c1 e0 08             	shl    eax,0x8
c00274fd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027502:	89 c1                	mov    ecx,eax
c0027504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027507:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002750a:	89 c7                	mov    edi,eax
c002750c:	c1 ff 17             	sar    edi,0x17
c002750f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027513:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027516:	89 f8                	mov    eax,edi
c0027518:	0f b6 c0             	movzx  eax,al
c002751b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002751e:	29 c6                	sub    esi,eax
c0027520:	83 c6 7f             	add    esi,0x7f
c0027523:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027526:	42                   	inc    edx
c0027527:	80 e2 fe             	and    dl,0xfe
c002752a:	0f 85 9c 00 00 00    	jne    c00275cc <__divsf3+0xe8>
c0027530:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027534:	74 33                	je     c0027569 <__divsf3+0x85>
c0027536:	85 c9                	test   ecx,ecx
c0027538:	0f 85 c7 01 00 00    	jne    c0027705 <__divsf3+0x221>
c002753e:	8d 57 01             	lea    edx,[edi+0x1]
c0027541:	80 e2 fe             	and    dl,0xfe
c0027544:	75 2f                	jne    c0027575 <__divsf3+0x91>
c0027546:	85 c0                	test   eax,eax
c0027548:	74 2b                	je     c0027575 <__divsf3+0x91>
c002754a:	51                   	push   ecx
c002754b:	51                   	push   ecx
c002754c:	6a 00                	push   0x0
c002754e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027551:	e8 d2 03 00 00       	call   c0027928 <__nesf2>
c0027556:	83 c4 10             	add    esp,0x10
c0027559:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002755c:	85 c0                	test   eax,eax
c002755e:	0f 85 a1 01 00 00    	jne    c0027705 <__divsf3+0x221>
c0027564:	e9 92 01 00 00       	jmp    c00276fb <__divsf3+0x217>
c0027569:	85 c9                	test   ecx,ecx
c002756b:	75 1b                	jne    c0027588 <__divsf3+0xa4>
c002756d:	8d 57 01             	lea    edx,[edi+0x1]
c0027570:	80 e2 fe             	and    dl,0xfe
c0027573:	74 1e                	je     c0027593 <__divsf3+0xaf>
c0027575:	85 ff                	test   edi,edi
c0027577:	0f 89 88 01 00 00    	jns    c0027705 <__divsf3+0x221>
c002757d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027583:	e9 7d 01 00 00       	jmp    c0027705 <__divsf3+0x221>
c0027588:	8d 56 ff             	lea    edx,[esi-0x1]
c002758b:	01 c9                	add    ecx,ecx
c002758d:	78 3d                	js     c00275cc <__divsf3+0xe8>
c002758f:	89 d6                	mov    esi,edx
c0027591:	eb f5                	jmp    c0027588 <__divsf3+0xa4>
c0027593:	85 c0                	test   eax,eax
c0027595:	b8 00 00 00 00       	mov    eax,0x0
c002759a:	74 18                	je     c00275b4 <__divsf3+0xd0>
c002759c:	52                   	push   edx
c002759d:	52                   	push   edx
c002759e:	50                   	push   eax
c002759f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275a2:	e8 81 03 00 00       	call   c0027928 <__nesf2>
c00275a7:	83 c4 10             	add    esp,0x10
c00275aa:	85 c0                	test   eax,eax
c00275ac:	0f 85 50 01 00 00    	jne    c0027702 <__divsf3+0x21e>
c00275b2:	eb c1                	jmp    c0027575 <__divsf3+0x91>
c00275b4:	56                   	push   esi
c00275b5:	56                   	push   esi
c00275b6:	50                   	push   eax
c00275b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275ba:	e8 69 03 00 00       	call   c0027928 <__nesf2>
c00275bf:	83 c4 10             	add    esp,0x10
c00275c2:	85 c0                	test   eax,eax
c00275c4:	0f 84 31 01 00 00    	je     c00276fb <__divsf3+0x217>
c00275ca:	eb a9                	jmp    c0027575 <__divsf3+0x91>
c00275cc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00275cf:	c1 e3 08             	shl    ebx,0x8
c00275d2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275d8:	8d 57 01             	lea    edx,[edi+0x1]
c00275db:	80 e2 fe             	and    dl,0xfe
c00275de:	75 71                	jne    c0027651 <__divsf3+0x16d>
c00275e0:	85 c0                	test   eax,eax
c00275e2:	ba 00 00 00 00       	mov    edx,0x0
c00275e7:	74 2f                	je     c0027618 <__divsf3+0x134>
c00275e9:	51                   	push   ecx
c00275ea:	51                   	push   ecx
c00275eb:	52                   	push   edx
c00275ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275ef:	e8 f9 02 00 00       	call   c00278ed <__eqsf2>
c00275f4:	83 c4 10             	add    esp,0x10
c00275f7:	85 c0                	test   eax,eax
c00275f9:	0f 85 03 01 00 00    	jne    c0027702 <__divsf3+0x21e>
c00275ff:	31 d2                	xor    edx,edx
c0027601:	89 d3                	mov    ebx,edx
c0027603:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027606:	31 f8                	xor    eax,edi
c0027608:	0f 89 f7 00 00 00    	jns    c0027705 <__divsf3+0x221>
c002760e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027613:	e9 ed 00 00 00       	jmp    c0027705 <__divsf3+0x221>
c0027618:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002761b:	50                   	push   eax
c002761c:	50                   	push   eax
c002761d:	52                   	push   edx
c002761e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027621:	e8 c7 02 00 00       	call   c00278ed <__eqsf2>
c0027626:	83 c4 10             	add    esp,0x10
c0027629:	85 c0                	test   eax,eax
c002762b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002762e:	75 16                	jne    c0027646 <__divsf3+0x162>
c0027630:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027633:	31 fb                	xor    ebx,edi
c0027635:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002763b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027641:	e9 bf 00 00 00       	jmp    c0027705 <__divsf3+0x221>
c0027646:	8d 46 01             	lea    eax,[esi+0x1]
c0027649:	01 db                	add    ebx,ebx
c002764b:	78 04                	js     c0027651 <__divsf3+0x16d>
c002764d:	89 c6                	mov    esi,eax
c002764f:	eb f5                	jmp    c0027646 <__divsf3+0x162>
c0027651:	89 c8                	mov    eax,ecx
c0027653:	0d 00 00 00 80       	or     eax,0x80000000
c0027658:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002765e:	31 d2                	xor    edx,edx
c0027660:	39 d8                	cmp    eax,ebx
c0027662:	72 07                	jb     c002766b <__divsf3+0x187>
c0027664:	29 d8                	sub    eax,ebx
c0027666:	ba 01 00 00 00       	mov    edx,0x1
c002766b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027672:	01 d2                	add    edx,edx
c0027674:	89 c1                	mov    ecx,eax
c0027676:	01 c0                	add    eax,eax
c0027678:	85 c9                	test   ecx,ecx
c002767a:	78 04                	js     c0027680 <__divsf3+0x19c>
c002767c:	39 c3                	cmp    ebx,eax
c002767e:	77 05                	ja     c0027685 <__divsf3+0x1a1>
c0027680:	29 d8                	sub    eax,ebx
c0027682:	83 ca 01             	or     edx,0x1
c0027685:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027688:	75 e8                	jne    c0027672 <__divsf3+0x18e>
c002768a:	85 c0                	test   eax,eax
c002768c:	0f 95 c0             	setne  al
c002768f:	0f b6 c0             	movzx  eax,al
c0027692:	c1 e2 06             	shl    edx,0x6
c0027695:	09 c2                	or     edx,eax
c0027697:	78 03                	js     c002769c <__divsf3+0x1b8>
c0027699:	01 d2                	add    edx,edx
c002769b:	4e                   	dec    esi
c002769c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00276a2:	7f 22                	jg     c00276c6 <__divsf3+0x1e2>
c00276a4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00276aa:	85 f6                	test   esi,esi
c00276ac:	7f 23                	jg     c00276d1 <__divsf3+0x1ed>
c00276ae:	83 fe e9             	cmp    esi,0xffffffe9
c00276b1:	7c 1a                	jl     c00276cd <__divsf3+0x1e9>
c00276b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276b9:	b9 01 00 00 00       	mov    ecx,0x1
c00276be:	29 f1                	sub    ecx,esi
c00276c0:	d3 ea                	shr    edx,cl
c00276c2:	31 f6                	xor    esi,esi
c00276c4:	eb 0b                	jmp    c00276d1 <__divsf3+0x1ed>
c00276c6:	be ff 00 00 00       	mov    esi,0xff
c00276cb:	eb 02                	jmp    c00276cf <__divsf3+0x1eb>
c00276cd:	31 f6                	xor    esi,esi
c00276cf:	31 d2                	xor    edx,edx
c00276d1:	89 d0                	mov    eax,edx
c00276d3:	c1 e8 08             	shr    eax,0x8
c00276d6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00276d9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00276df:	09 fe                	or     esi,edi
c00276e1:	c1 e6 17             	shl    esi,0x17
c00276e4:	09 c6                	or     esi,eax
c00276e6:	f6 c2 7f             	test   dl,0x7f
c00276e9:	0f 95 c1             	setne  cl
c00276ec:	09 c8                	or     eax,ecx
c00276ee:	83 e0 01             	and    eax,0x1
c00276f1:	c1 ea 07             	shr    edx,0x7
c00276f4:	21 c2                	and    edx,eax
c00276f6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00276f9:	eb 0a                	jmp    c0027705 <__divsf3+0x221>
c00276fb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027700:	eb 03                	jmp    c0027705 <__divsf3+0x221>
c0027702:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027705:	89 d8                	mov    eax,ebx
c0027707:	8d 65 f4             	lea    esp,[ebp-0xc]
c002770a:	5b                   	pop    ebx
c002770b:	5e                   	pop    esi
c002770c:	5f                   	pop    edi
c002770d:	5d                   	pop    ebp
c002770e:	c3                   	ret    

c002770f <__floatsisf>:
c002770f:	55                   	push   ebp
c0027710:	89 e5                	mov    ebp,esp
c0027712:	53                   	push   ebx
c0027713:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027716:	85 d2                	test   edx,edx
c0027718:	7e 2b                	jle    c0027745 <__floatsisf+0x36>
c002771a:	0f bd ca             	bsr    ecx,edx
c002771d:	83 f1 1f             	xor    ecx,0x1f
c0027720:	d3 e2                	shl    edx,cl
c0027722:	89 d0                	mov    eax,edx
c0027724:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027729:	89 c3                	mov    ebx,eax
c002772b:	c1 eb 08             	shr    ebx,0x8
c002772e:	80 e2 7f             	and    dl,0x7f
c0027731:	0f 95 c2             	setne  dl
c0027734:	09 da                	or     edx,ebx
c0027736:	83 e2 01             	and    edx,0x1
c0027739:	c1 e8 07             	shr    eax,0x7
c002773c:	21 c2                	and    edx,eax
c002773e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027743:	eb 32                	jmp    c0027777 <__floatsisf+0x68>
c0027745:	b8 00 00 00 00       	mov    eax,0x0
c002774a:	74 34                	je     c0027780 <__floatsisf+0x71>
c002774c:	f7 da                	neg    edx
c002774e:	0f bd ca             	bsr    ecx,edx
c0027751:	83 f1 1f             	xor    ecx,0x1f
c0027754:	d3 e2                	shl    edx,cl
c0027756:	89 d0                	mov    eax,edx
c0027758:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002775d:	89 c3                	mov    ebx,eax
c002775f:	c1 eb 08             	shr    ebx,0x8
c0027762:	80 e2 7f             	and    dl,0x7f
c0027765:	0f 95 c2             	setne  dl
c0027768:	09 da                	or     edx,ebx
c002776a:	83 e2 01             	and    edx,0x1
c002776d:	c1 e8 07             	shr    eax,0x7
c0027770:	21 c2                	and    edx,eax
c0027772:	b8 9e 01 00 00       	mov    eax,0x19e
c0027777:	29 c8                	sub    eax,ecx
c0027779:	c1 e0 17             	shl    eax,0x17
c002777c:	09 d8                	or     eax,ebx
c002777e:	01 d0                	add    eax,edx
c0027780:	5b                   	pop    ebx
c0027781:	5d                   	pop    ebp
c0027782:	c3                   	ret    

c0027783 <__floatunsisf>:
c0027783:	55                   	push   ebp
c0027784:	89 e5                	mov    ebp,esp
c0027786:	53                   	push   ebx
c0027787:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002778a:	31 c0                	xor    eax,eax
c002778c:	85 d2                	test   edx,edx
c002778e:	74 32                	je     c00277c2 <__floatunsisf+0x3f>
c0027790:	0f bd ca             	bsr    ecx,edx
c0027793:	83 f1 1f             	xor    ecx,0x1f
c0027796:	d3 e2                	shl    edx,cl
c0027798:	89 d0                	mov    eax,edx
c002779a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002779f:	89 c3                	mov    ebx,eax
c00277a1:	c1 eb 08             	shr    ebx,0x8
c00277a4:	80 e2 7f             	and    dl,0x7f
c00277a7:	0f 95 c2             	setne  dl
c00277aa:	09 da                	or     edx,ebx
c00277ac:	83 e2 01             	and    edx,0x1
c00277af:	c1 e8 07             	shr    eax,0x7
c00277b2:	21 c2                	and    edx,eax
c00277b4:	b8 9e 00 00 00       	mov    eax,0x9e
c00277b9:	29 c8                	sub    eax,ecx
c00277bb:	c1 e0 17             	shl    eax,0x17
c00277be:	09 d8                	or     eax,ebx
c00277c0:	01 d0                	add    eax,edx
c00277c2:	5b                   	pop    ebx
c00277c3:	5d                   	pop    ebp
c00277c4:	c3                   	ret    

c00277c5 <__fixsfsi>:
c00277c5:	55                   	push   ebp
c00277c6:	89 e5                	mov    ebp,esp
c00277c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00277cb:	89 d1                	mov    ecx,edx
c00277cd:	c1 e1 08             	shl    ecx,0x8
c00277d0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00277d6:	c1 fa 17             	sar    edx,0x17
c00277d9:	78 1c                	js     c00277f7 <__fixsfsi+0x32>
c00277db:	83 ea 7f             	sub    edx,0x7f
c00277de:	31 c0                	xor    eax,eax
c00277e0:	83 fa 1e             	cmp    edx,0x1e
c00277e3:	77 40                	ja     c0027825 <__fixsfsi+0x60>
c00277e5:	89 c8                	mov    eax,ecx
c00277e7:	0d 00 00 00 80       	or     eax,0x80000000
c00277ec:	b9 1f 00 00 00       	mov    ecx,0x1f
c00277f1:	29 d1                	sub    ecx,edx
c00277f3:	d3 e8                	shr    eax,cl
c00277f5:	eb 2e                	jmp    c0027825 <__fixsfsi+0x60>
c00277f7:	31 c0                	xor    eax,eax
c00277f9:	81 c2 81 00 00 00    	add    edx,0x81
c00277ff:	78 24                	js     c0027825 <__fixsfsi+0x60>
c0027801:	83 fa 1e             	cmp    edx,0x1e
c0027804:	7e 09                	jle    c002780f <__fixsfsi+0x4a>
c0027806:	83 fa 1f             	cmp    edx,0x1f
c0027809:	75 18                	jne    c0027823 <__fixsfsi+0x5e>
c002780b:	85 c9                	test   ecx,ecx
c002780d:	75 14                	jne    c0027823 <__fixsfsi+0x5e>
c002780f:	89 c8                	mov    eax,ecx
c0027811:	0d 00 00 00 80       	or     eax,0x80000000
c0027816:	b9 1f 00 00 00       	mov    ecx,0x1f
c002781b:	29 d1                	sub    ecx,edx
c002781d:	d3 e8                	shr    eax,cl
c002781f:	f7 d8                	neg    eax
c0027821:	eb 02                	jmp    c0027825 <__fixsfsi+0x60>
c0027823:	31 c0                	xor    eax,eax
c0027825:	5d                   	pop    ebp
c0027826:	c3                   	ret    

c0027827 <__fixunssfsi>:
c0027827:	55                   	push   ebp
c0027828:	89 e5                	mov    ebp,esp
c002782a:	53                   	push   ebx
c002782b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002782e:	89 d3                	mov    ebx,edx
c0027830:	c1 fb 17             	sar    ebx,0x17
c0027833:	83 eb 7f             	sub    ebx,0x7f
c0027836:	31 c0                	xor    eax,eax
c0027838:	83 fb 1f             	cmp    ebx,0x1f
c002783b:	77 18                	ja     c0027855 <__fixunssfsi+0x2e>
c002783d:	89 d0                	mov    eax,edx
c002783f:	c1 e0 08             	shl    eax,0x8
c0027842:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027847:	0d 00 00 00 80       	or     eax,0x80000000
c002784c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027851:	29 d9                	sub    ecx,ebx
c0027853:	d3 e8                	shr    eax,cl
c0027855:	5b                   	pop    ebx
c0027856:	5d                   	pop    ebp
c0027857:	c3                   	ret    

c0027858 <__cmpsf2>:
c0027858:	55                   	push   ebp
c0027859:	89 e5                	mov    ebp,esp
c002785b:	57                   	push   edi
c002785c:	56                   	push   esi
c002785d:	53                   	push   ebx
c002785e:	83 ec 24             	sub    esp,0x24
c0027861:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027867:	e8 4f 10 00 00       	call   c00288bb <__truncdfsf2>
c002786c:	5a                   	pop    edx
c002786d:	59                   	pop    ecx
c002786e:	89 c3                	mov    ebx,eax
c0027870:	c1 e8 17             	shr    eax,0x17
c0027873:	0f b6 f0             	movzx  esi,al
c0027876:	89 d8                	mov    eax,ebx
c0027878:	c1 e8 1f             	shr    eax,0x1f
c002787b:	31 c6                	xor    esi,eax
c002787d:	c1 e3 08             	shl    ebx,0x8
c0027880:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027883:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027886:	e8 30 10 00 00       	call   c00288bb <__truncdfsf2>
c002788b:	83 c4 10             	add    esp,0x10
c002788e:	89 c1                	mov    ecx,eax
c0027890:	c1 e9 17             	shr    ecx,0x17
c0027893:	0f b6 c9             	movzx  ecx,cl
c0027896:	89 c7                	mov    edi,eax
c0027898:	c1 ef 1f             	shr    edi,0x1f
c002789b:	89 ca                	mov    edx,ecx
c002789d:	31 fa                	xor    edx,edi
c002789f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00278a2:	c1 e0 08             	shl    eax,0x8
c00278a5:	89 c2                	mov    edx,eax
c00278a7:	89 d8                	mov    eax,ebx
c00278a9:	09 d0                	or     eax,edx
c00278ab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278b0:	09 f0                	or     eax,esi
c00278b2:	75 08                	jne    c00278bc <__cmpsf2+0x64>
c00278b4:	31 c0                	xor    eax,eax
c00278b6:	39 f9                	cmp    ecx,edi
c00278b8:	75 0c                	jne    c00278c6 <__cmpsf2+0x6e>
c00278ba:	eb 29                	jmp    c00278e5 <__cmpsf2+0x8d>
c00278bc:	b8 01 00 00 00       	mov    eax,0x1
c00278c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278c4:	7f 1f                	jg     c00278e5 <__cmpsf2+0x8d>
c00278c6:	83 c8 ff             	or     eax,0xffffffff
c00278c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00278cc:	7c 17                	jl     c00278e5 <__cmpsf2+0x8d>
c00278ce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00278d4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00278da:	b8 01 00 00 00       	mov    eax,0x1
c00278df:	39 d3                	cmp    ebx,edx
c00278e1:	77 02                	ja     c00278e5 <__cmpsf2+0x8d>
c00278e3:	19 c0                	sbb    eax,eax
c00278e5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278e8:	5b                   	pop    ebx
c00278e9:	5e                   	pop    esi
c00278ea:	5f                   	pop    edi
c00278eb:	5d                   	pop    ebp
c00278ec:	c3                   	ret    

c00278ed <__eqsf2>:
c00278ed:	55                   	push   ebp
c00278ee:	89 e5                	mov    ebp,esp
c00278f0:	83 ec 24             	sub    esp,0x24
c00278f3:	6a 01                	push   0x1
c00278f5:	83 ec 0c             	sub    esp,0xc
c00278f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278fb:	e8 df 10 00 00       	call   c00289df <__extendsfdf2>
c0027900:	83 c4 10             	add    esp,0x10
c0027903:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027906:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027909:	52                   	push   edx
c002790a:	50                   	push   eax
c002790b:	50                   	push   eax
c002790c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002790f:	e8 cb 10 00 00       	call   c00289df <__extendsfdf2>
c0027914:	59                   	pop    ecx
c0027915:	59                   	pop    ecx
c0027916:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027919:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002791c:	52                   	push   edx
c002791d:	50                   	push   eax
c002791e:	e8 35 ff ff ff       	call   c0027858 <__cmpsf2>
c0027923:	83 c4 20             	add    esp,0x20
c0027926:	c9                   	leave  
c0027927:	c3                   	ret    

c0027928 <__nesf2>:
c0027928:	eb c3                	jmp    c00278ed <__eqsf2>

c002792a <__gtsf2>:
c002792a:	55                   	push   ebp
c002792b:	89 e5                	mov    ebp,esp
c002792d:	83 ec 24             	sub    esp,0x24
c0027930:	6a ff                	push   0xffffffff
c0027932:	83 ec 0c             	sub    esp,0xc
c0027935:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027938:	e8 a2 10 00 00       	call   c00289df <__extendsfdf2>
c002793d:	83 c4 10             	add    esp,0x10
c0027940:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027943:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027946:	52                   	push   edx
c0027947:	50                   	push   eax
c0027948:	50                   	push   eax
c0027949:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002794c:	e8 8e 10 00 00       	call   c00289df <__extendsfdf2>
c0027951:	59                   	pop    ecx
c0027952:	59                   	pop    ecx
c0027953:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027956:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027959:	52                   	push   edx
c002795a:	50                   	push   eax
c002795b:	e8 f8 fe ff ff       	call   c0027858 <__cmpsf2>
c0027960:	83 c4 20             	add    esp,0x20
c0027963:	c9                   	leave  
c0027964:	c3                   	ret    

c0027965 <__gesf2>:
c0027965:	eb c3                	jmp    c002792a <__gtsf2>

c0027967 <__ltsf2>:
c0027967:	eb 84                	jmp    c00278ed <__eqsf2>

c0027969 <__lesf2>:
c0027969:	eb 82                	jmp    c00278ed <__eqsf2>

c002796b <__adddf3>:
c002796b:	55                   	push   ebp
c002796c:	89 e5                	mov    ebp,esp
c002796e:	57                   	push   edi
c002796f:	56                   	push   esi
c0027970:	53                   	push   ebx
c0027971:	83 ec 24             	sub    esp,0x24
c0027974:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027977:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002797a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002797d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027980:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027983:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027986:	89 c8                	mov    eax,ecx
c0027988:	89 ce                	mov    esi,ecx
c002798a:	c1 fe 14             	sar    esi,0x14
c002798d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027990:	89 fb                	mov    ebx,edi
c0027992:	89 fa                	mov    edx,edi
c0027994:	c1 e2 0b             	shl    edx,0xb
c0027997:	c1 e0 0b             	shl    eax,0xb
c002799a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002799f:	c1 eb 15             	shr    ebx,0x15
c00279a2:	09 d8                	or     eax,ebx
c00279a4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00279aa:	c1 fe 14             	sar    esi,0x14
c00279ad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00279b0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00279b3:	89 f3                	mov    ebx,esi
c00279b5:	c1 e3 0b             	shl    ebx,0xb
c00279b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00279bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279be:	c1 e3 0b             	shl    ebx,0xb
c00279c1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00279c7:	c1 ee 15             	shr    esi,0x15
c00279ca:	09 f3                	or     ebx,esi
c00279cc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00279cf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279d2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00279d5:	0f 88 5f 02 00 00    	js     c0027c3a <__adddf3+0x2cf>
c00279db:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279de:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00279e1:	85 db                	test   ebx,ebx
c00279e3:	0f 8e c7 00 00 00    	jle    c0027ab0 <__adddf3+0x145>
c00279e9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00279f0:	75 1a                	jne    c0027a0c <__adddf3+0xa1>
c00279f2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279f5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00279f8:	0f 84 b2 05 00 00    	je     c0027fb0 <__adddf3+0x645>
c00279fe:	4b                   	dec    ebx
c00279ff:	75 23                	jne    c0027a24 <__adddf3+0xb9>
c0027a01:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a04:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a07:	e9 99 00 00 00       	jmp    c0027aa5 <__adddf3+0x13a>
c0027a0c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a0f:	f7 d6                	not    esi
c0027a11:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a17:	0f 84 93 05 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027a1d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027a24:	83 fb 1f             	cmp    ebx,0x1f
c0027a27:	7e 42                	jle    c0027a6b <__adddf3+0x100>
c0027a29:	83 fb 3f             	cmp    ebx,0x3f
c0027a2c:	0f 8f 7e 05 00 00    	jg     c0027fb0 <__adddf3+0x645>
c0027a32:	83 e3 1f             	and    ebx,0x1f
c0027a35:	89 d9                	mov    ecx,ebx
c0027a37:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a3a:	d3 ef                	shr    edi,cl
c0027a3c:	31 db                	xor    ebx,ebx
c0027a3e:	85 c9                	test   ecx,ecx
c0027a40:	74 15                	je     c0027a57 <__adddf3+0xec>
c0027a42:	be 20 00 00 00       	mov    esi,0x20
c0027a47:	29 ce                	sub    esi,ecx
c0027a49:	89 f1                	mov    ecx,esi
c0027a4b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a4e:	d3 e6                	shl    esi,cl
c0027a50:	31 db                	xor    ebx,ebx
c0027a52:	85 f6                	test   esi,esi
c0027a54:	0f 95 c3             	setne  bl
c0027a57:	31 c9                	xor    ecx,ecx
c0027a59:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a5d:	0f 95 c1             	setne  cl
c0027a60:	09 cf                	or     edi,ecx
c0027a62:	09 fb                	or     ebx,edi
c0027a64:	01 da                	add    edx,ebx
c0027a66:	83 d0 00             	adc    eax,0x0
c0027a69:	eb 3a                	jmp    c0027aa5 <__adddf3+0x13a>
c0027a6b:	bf 20 00 00 00       	mov    edi,0x20
c0027a70:	29 df                	sub    edi,ebx
c0027a72:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a75:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a78:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a7b:	d3 e6                	shl    esi,cl
c0027a7d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a80:	88 d9                	mov    cl,bl
c0027a82:	d3 ef                	shr    edi,cl
c0027a84:	09 fe                	or     esi,edi
c0027a86:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a89:	88 d9                	mov    cl,bl
c0027a8b:	d3 ef                	shr    edi,cl
c0027a8d:	89 fb                	mov    ebx,edi
c0027a8f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a92:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a95:	d3 e7                	shl    edi,cl
c0027a97:	85 ff                	test   edi,edi
c0027a99:	0f 95 c1             	setne  cl
c0027a9c:	0f b6 c9             	movzx  ecx,cl
c0027a9f:	09 ce                	or     esi,ecx
c0027aa1:	01 f2                	add    edx,esi
c0027aa3:	11 d8                	adc    eax,ebx
c0027aa5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aab:	e9 52 01 00 00       	jmp    c0027c02 <__adddf3+0x297>
c0027ab0:	0f 84 d5 00 00 00    	je     c0027b8b <__adddf3+0x220>
c0027ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ab9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027abc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027abf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ac9:	75 20                	jne    c0027aeb <__adddf3+0x180>
c0027acb:	89 d6                	mov    esi,edx
c0027acd:	09 c6                	or     esi,eax
c0027acf:	0f 84 db 04 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027ad5:	4b                   	dec    ebx
c0027ad6:	75 29                	jne    c0027b01 <__adddf3+0x196>
c0027ad8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027adb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ade:	01 d1                	add    ecx,edx
c0027ae0:	11 c6                	adc    esi,eax
c0027ae2:	89 f0                	mov    eax,esi
c0027ae4:	89 ca                	mov    edx,ecx
c0027ae6:	e9 17 01 00 00       	jmp    c0027c02 <__adddf3+0x297>
c0027aeb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027aee:	f7 d6                	not    esi
c0027af0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027af6:	0f 84 b4 04 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027afc:	0d 00 00 00 80       	or     eax,0x80000000
c0027b01:	83 fb 1f             	cmp    ebx,0x1f
c0027b04:	7e 48                	jle    c0027b4e <__adddf3+0x1e3>
c0027b06:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b09:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b0c:	83 fb 3f             	cmp    ebx,0x3f
c0027b0f:	0f 8f 9b 04 00 00    	jg     c0027fb0 <__adddf3+0x645>
c0027b15:	83 e3 1f             	and    ebx,0x1f
c0027b18:	89 d9                	mov    ecx,ebx
c0027b1a:	89 c7                	mov    edi,eax
c0027b1c:	d3 ef                	shr    edi,cl
c0027b1e:	31 db                	xor    ebx,ebx
c0027b20:	85 c9                	test   ecx,ecx
c0027b22:	74 12                	je     c0027b36 <__adddf3+0x1cb>
c0027b24:	be 20 00 00 00       	mov    esi,0x20
c0027b29:	29 ce                	sub    esi,ecx
c0027b2b:	89 f1                	mov    ecx,esi
c0027b2d:	d3 e0                	shl    eax,cl
c0027b2f:	31 db                	xor    ebx,ebx
c0027b31:	85 c0                	test   eax,eax
c0027b33:	0f 95 c3             	setne  bl
c0027b36:	31 c0                	xor    eax,eax
c0027b38:	85 d2                	test   edx,edx
c0027b3a:	0f 95 c0             	setne  al
c0027b3d:	09 c7                	or     edi,eax
c0027b3f:	09 fb                	or     ebx,edi
c0027b41:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b44:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b47:	01 da                	add    edx,ebx
c0027b49:	83 d6 00             	adc    esi,0x0
c0027b4c:	eb 39                	jmp    c0027b87 <__adddf3+0x21c>
c0027b4e:	be 20 00 00 00       	mov    esi,0x20
c0027b53:	29 de                	sub    esi,ebx
c0027b55:	89 c7                	mov    edi,eax
c0027b57:	89 f1                	mov    ecx,esi
c0027b59:	d3 e7                	shl    edi,cl
c0027b5b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b5e:	89 d7                	mov    edi,edx
c0027b60:	88 d9                	mov    cl,bl
c0027b62:	d3 ef                	shr    edi,cl
c0027b64:	89 f9                	mov    ecx,edi
c0027b66:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b69:	09 cf                	or     edi,ecx
c0027b6b:	88 d9                	mov    cl,bl
c0027b6d:	d3 e8                	shr    eax,cl
c0027b6f:	89 f1                	mov    ecx,esi
c0027b71:	d3 e2                	shl    edx,cl
c0027b73:	85 d2                	test   edx,edx
c0027b75:	0f 95 c2             	setne  dl
c0027b78:	0f b6 d2             	movzx  edx,dl
c0027b7b:	09 d7                	or     edi,edx
c0027b7d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b80:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b83:	01 fa                	add    edx,edi
c0027b85:	11 c6                	adc    esi,eax
c0027b87:	89 f0                	mov    eax,esi
c0027b89:	eb 77                	jmp    c0027c02 <__adddf3+0x297>
c0027b8b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b8e:	46                   	inc    esi
c0027b8f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027b92:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b98:	75 41                	jne    c0027bdb <__adddf3+0x270>
c0027b9a:	89 d3                	mov    ebx,edx
c0027b9c:	09 c3                	or     ebx,eax
c0027b9e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ba5:	75 27                	jne    c0027bce <__adddf3+0x263>
c0027ba7:	85 db                	test   ebx,ebx
c0027ba9:	0f 84 fb 03 00 00    	je     c0027faa <__adddf3+0x63f>
c0027baf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bb2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027bb5:	0f 84 f5 03 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027bbb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bbe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027bc1:	85 c0                	test   eax,eax
c0027bc3:	0f 89 91 03 00 00    	jns    c0027f5a <__adddf3+0x5ef>
c0027bc9:	e9 85 03 00 00       	jmp    c0027f53 <__adddf3+0x5e8>
c0027bce:	85 db                	test   ebx,ebx
c0027bd0:	0f 85 da 03 00 00    	jne    c0027fb0 <__adddf3+0x645>
c0027bd6:	e9 cf 03 00 00       	jmp    c0027faa <__adddf3+0x63f>
c0027bdb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bde:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027be1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027be4:	f7 d1                	not    ecx
c0027be6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027bec:	0f 84 70 03 00 00    	je     c0027f62 <__adddf3+0x5f7>
c0027bf2:	d1 ea                	shr    edx,1
c0027bf4:	89 c1                	mov    ecx,eax
c0027bf6:	c1 e1 1f             	shl    ecx,0x1f
c0027bf9:	09 ca                	or     edx,ecx
c0027bfb:	d1 e8                	shr    eax,1
c0027bfd:	e9 6f 03 00 00       	jmp    c0027f71 <__adddf3+0x606>
c0027c02:	85 c0                	test   eax,eax
c0027c04:	0f 89 67 03 00 00    	jns    c0027f71 <__adddf3+0x606>
c0027c0a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027c0d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c10:	f7 d1                	not    ecx
c0027c12:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027c18:	0f 84 44 03 00 00    	je     c0027f62 <__adddf3+0x5f7>
c0027c1e:	89 d1                	mov    ecx,edx
c0027c20:	d1 e9                	shr    ecx,1
c0027c22:	83 e2 01             	and    edx,0x1
c0027c25:	09 ca                	or     edx,ecx
c0027c27:	89 c1                	mov    ecx,eax
c0027c29:	c1 e1 1f             	shl    ecx,0x1f
c0027c2c:	09 ca                	or     edx,ecx
c0027c2e:	d1 e8                	shr    eax,1
c0027c30:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027c35:	e9 37 03 00 00       	jmp    c0027f71 <__adddf3+0x606>
c0027c3a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027c3d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027c43:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027c46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c49:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c4f:	29 de                	sub    esi,ebx
c0027c51:	85 f6                	test   esi,esi
c0027c53:	0f 8e bd 00 00 00    	jle    c0027d16 <__adddf3+0x3ab>
c0027c59:	85 db                	test   ebx,ebx
c0027c5b:	75 17                	jne    c0027c74 <__adddf3+0x309>
c0027c5d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c60:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c63:	0f 84 47 03 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027c69:	4e                   	dec    esi
c0027c6a:	75 20                	jne    c0027c8c <__adddf3+0x321>
c0027c6c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c6f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c72:	eb 5b                	jmp    c0027ccf <__adddf3+0x364>
c0027c74:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c77:	f7 d3                	not    ebx
c0027c79:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c7f:	0f 84 2b 03 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027c85:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027c8c:	83 fe 1f             	cmp    esi,0x1f
c0027c8f:	7e 49                	jle    c0027cda <__adddf3+0x36f>
c0027c91:	83 fe 3f             	cmp    esi,0x3f
c0027c94:	0f 8f 16 03 00 00    	jg     c0027fb0 <__adddf3+0x645>
c0027c9a:	83 e6 1f             	and    esi,0x1f
c0027c9d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ca0:	89 f1                	mov    ecx,esi
c0027ca2:	d3 ef                	shr    edi,cl
c0027ca4:	31 db                	xor    ebx,ebx
c0027ca6:	85 f6                	test   esi,esi
c0027ca8:	74 13                	je     c0027cbd <__adddf3+0x352>
c0027caa:	b9 20 00 00 00       	mov    ecx,0x20
c0027caf:	29 f1                	sub    ecx,esi
c0027cb1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027cb4:	d3 e6                	shl    esi,cl
c0027cb6:	31 db                	xor    ebx,ebx
c0027cb8:	85 f6                	test   esi,esi
c0027cba:	0f 95 c3             	setne  bl
c0027cbd:	31 c9                	xor    ecx,ecx
c0027cbf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027cc3:	0f 95 c1             	setne  cl
c0027cc6:	09 cf                	or     edi,ecx
c0027cc8:	09 fb                	or     ebx,edi
c0027cca:	29 da                	sub    edx,ebx
c0027ccc:	83 d8 00             	sbb    eax,0x0
c0027ccf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cd2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cd5:	e9 aa 01 00 00       	jmp    c0027e84 <__adddf3+0x519>
c0027cda:	bf 20 00 00 00       	mov    edi,0x20
c0027cdf:	29 f7                	sub    edi,esi
c0027ce1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ce4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ce7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027cea:	d3 e3                	shl    ebx,cl
c0027cec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cef:	89 f1                	mov    ecx,esi
c0027cf1:	d3 ef                	shr    edi,cl
c0027cf3:	09 fb                	or     ebx,edi
c0027cf5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027cf8:	89 f1                	mov    ecx,esi
c0027cfa:	d3 ef                	shr    edi,cl
c0027cfc:	89 fe                	mov    esi,edi
c0027cfe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d01:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027d04:	d3 e7                	shl    edi,cl
c0027d06:	85 ff                	test   edi,edi
c0027d08:	0f 95 c1             	setne  cl
c0027d0b:	0f b6 c9             	movzx  ecx,cl
c0027d0e:	09 cb                	or     ebx,ecx
c0027d10:	29 da                	sub    edx,ebx
c0027d12:	19 f0                	sbb    eax,esi
c0027d14:	eb b9                	jmp    c0027ccf <__adddf3+0x364>
c0027d16:	0f 84 cd 00 00 00    	je     c0027de9 <__adddf3+0x47e>
c0027d1c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027d1f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d22:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d25:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d29:	75 1b                	jne    c0027d46 <__adddf3+0x3db>
c0027d2b:	89 d6                	mov    esi,edx
c0027d2d:	09 c6                	or     esi,eax
c0027d2f:	0f 84 7b 02 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027d35:	4b                   	dec    ebx
c0027d36:	75 24                	jne    c0027d5c <__adddf3+0x3f1>
c0027d38:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d3e:	29 d1                	sub    ecx,edx
c0027d40:	19 c6                	sbb    esi,eax
c0027d42:	89 ca                	mov    edx,ecx
c0027d44:	eb 61                	jmp    c0027da7 <__adddf3+0x43c>
c0027d46:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d49:	f7 d6                	not    esi
c0027d4b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027d51:	0f 84 59 02 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027d57:	0d 00 00 00 80       	or     eax,0x80000000
c0027d5c:	83 fb 1f             	cmp    ebx,0x1f
c0027d5f:	7e 4d                	jle    c0027dae <__adddf3+0x443>
c0027d61:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027d64:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d67:	83 fb 3f             	cmp    ebx,0x3f
c0027d6a:	0f 8f 40 02 00 00    	jg     c0027fb0 <__adddf3+0x645>
c0027d70:	83 e3 1f             	and    ebx,0x1f
c0027d73:	89 d9                	mov    ecx,ebx
c0027d75:	89 c7                	mov    edi,eax
c0027d77:	d3 ef                	shr    edi,cl
c0027d79:	31 db                	xor    ebx,ebx
c0027d7b:	85 c9                	test   ecx,ecx
c0027d7d:	74 12                	je     c0027d91 <__adddf3+0x426>
c0027d7f:	be 20 00 00 00       	mov    esi,0x20
c0027d84:	29 ce                	sub    esi,ecx
c0027d86:	89 f1                	mov    ecx,esi
c0027d88:	d3 e0                	shl    eax,cl
c0027d8a:	31 db                	xor    ebx,ebx
c0027d8c:	85 c0                	test   eax,eax
c0027d8e:	0f 95 c3             	setne  bl
c0027d91:	31 c0                	xor    eax,eax
c0027d93:	85 d2                	test   edx,edx
c0027d95:	0f 95 c0             	setne  al
c0027d98:	09 c7                	or     edi,eax
c0027d9a:	09 fb                	or     ebx,edi
c0027d9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d9f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027da2:	29 da                	sub    edx,ebx
c0027da4:	83 de 00             	sbb    esi,0x0
c0027da7:	89 f0                	mov    eax,esi
c0027da9:	e9 d6 00 00 00       	jmp    c0027e84 <__adddf3+0x519>
c0027dae:	be 20 00 00 00       	mov    esi,0x20
c0027db3:	29 de                	sub    esi,ebx
c0027db5:	89 c7                	mov    edi,eax
c0027db7:	89 f1                	mov    ecx,esi
c0027db9:	d3 e7                	shl    edi,cl
c0027dbb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027dbe:	89 d7                	mov    edi,edx
c0027dc0:	88 d9                	mov    cl,bl
c0027dc2:	d3 ef                	shr    edi,cl
c0027dc4:	89 f9                	mov    ecx,edi
c0027dc6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027dc9:	09 cf                	or     edi,ecx
c0027dcb:	88 d9                	mov    cl,bl
c0027dcd:	d3 e8                	shr    eax,cl
c0027dcf:	89 f1                	mov    ecx,esi
c0027dd1:	d3 e2                	shl    edx,cl
c0027dd3:	85 d2                	test   edx,edx
c0027dd5:	0f 95 c2             	setne  dl
c0027dd8:	0f b6 d2             	movzx  edx,dl
c0027ddb:	09 d7                	or     edi,edx
c0027ddd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027de0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027de3:	29 fa                	sub    edx,edi
c0027de5:	19 c6                	sbb    esi,eax
c0027de7:	eb be                	jmp    c0027da7 <__adddf3+0x43c>
c0027de9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dec:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027def:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027df5:	75 6a                	jne    c0027e61 <__adddf3+0x4f6>
c0027df7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dfb:	75 58                	jne    c0027e55 <__adddf3+0x4ea>
c0027dfd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027e00:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027e03:	89 d6                	mov    esi,edx
c0027e05:	09 c6                	or     esi,eax
c0027e07:	75 17                	jne    c0027e20 <__adddf3+0x4b5>
c0027e09:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e0c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e0f:	85 db                	test   ebx,ebx
c0027e11:	0f 85 99 01 00 00    	jne    c0027fb0 <__adddf3+0x645>
c0027e17:	31 ff                	xor    edi,edi
c0027e19:	31 c9                	xor    ecx,ecx
c0027e1b:	e9 90 01 00 00       	jmp    c0027fb0 <__adddf3+0x645>
c0027e20:	85 db                	test   ebx,ebx
c0027e22:	0f 84 88 01 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027e28:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027e2b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027e2e:	85 c0                	test   eax,eax
c0027e30:	79 10                	jns    c0027e42 <__adddf3+0x4d7>
c0027e32:	31 c9                	xor    ecx,ecx
c0027e34:	f7 da                	neg    edx
c0027e36:	0f 95 c1             	setne  cl
c0027e39:	01 c8                	add    eax,ecx
c0027e3b:	f7 d8                	neg    eax
c0027e3d:	e9 2f 01 00 00       	jmp    c0027f71 <__adddf3+0x606>
c0027e42:	31 ff                	xor    edi,edi
c0027e44:	31 c9                	xor    ecx,ecx
c0027e46:	89 c3                	mov    ebx,eax
c0027e48:	09 d3                	or     ebx,edx
c0027e4a:	0f 84 60 01 00 00    	je     c0027fb0 <__adddf3+0x645>
c0027e50:	e9 05 01 00 00       	jmp    c0027f5a <__adddf3+0x5ef>
c0027e55:	31 ff                	xor    edi,edi
c0027e57:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e5c:	e9 4f 01 00 00       	jmp    c0027fb0 <__adddf3+0x645>
c0027e61:	89 c1                	mov    ecx,eax
c0027e63:	89 d0                	mov    eax,edx
c0027e65:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027e68:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027e6b:	89 ca                	mov    edx,ecx
c0027e6d:	85 c9                	test   ecx,ecx
c0027e6f:	79 2c                	jns    c0027e9d <__adddf3+0x532>
c0027e71:	31 c9                	xor    ecx,ecx
c0027e73:	f7 d8                	neg    eax
c0027e75:	0f 95 c1             	setne  cl
c0027e78:	01 ca                	add    edx,ecx
c0027e7a:	f7 da                	neg    edx
c0027e7c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e7f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027e82:	eb 19                	jmp    c0027e9d <__adddf3+0x532>
c0027e84:	85 c0                	test   eax,eax
c0027e86:	0f 89 e5 00 00 00    	jns    c0027f71 <__adddf3+0x606>
c0027e8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e91:	89 c1                	mov    ecx,eax
c0027e93:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e96:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e99:	89 d0                	mov    eax,edx
c0027e9b:	89 ca                	mov    edx,ecx
c0027e9d:	85 d2                	test   edx,edx
c0027e9f:	74 59                	je     c0027efa <__adddf3+0x58f>
c0027ea1:	0f bd da             	bsr    ebx,edx
c0027ea4:	83 f3 1f             	xor    ebx,0x1f
c0027ea7:	88 d9                	mov    cl,bl
c0027ea9:	d3 e2                	shl    edx,cl
c0027eab:	bf 20 00 00 00       	mov    edi,0x20
c0027eb0:	89 f9                	mov    ecx,edi
c0027eb2:	29 d9                	sub    ecx,ebx
c0027eb4:	89 c6                	mov    esi,eax
c0027eb6:	d3 ee                	shr    esi,cl
c0027eb8:	09 d6                	or     esi,edx
c0027eba:	88 d9                	mov    cl,bl
c0027ebc:	d3 e0                	shl    eax,cl
c0027ebe:	89 c2                	mov    edx,eax
c0027ec0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ec3:	25 ff 07 00 00       	and    eax,0x7ff
c0027ec8:	39 d8                	cmp    eax,ebx
c0027eca:	7f 22                	jg     c0027eee <__adddf3+0x583>
c0027ecc:	29 c3                	sub    ebx,eax
c0027ece:	43                   	inc    ebx
c0027ecf:	88 d9                	mov    cl,bl
c0027ed1:	d3 ea                	shr    edx,cl
c0027ed3:	29 df                	sub    edi,ebx
c0027ed5:	89 f9                	mov    ecx,edi
c0027ed7:	89 f0                	mov    eax,esi
c0027ed9:	d3 e0                	shl    eax,cl
c0027edb:	09 c2                	or     edx,eax
c0027edd:	89 f0                	mov    eax,esi
c0027edf:	88 d9                	mov    cl,bl
c0027ee1:	d3 e8                	shr    eax,cl
c0027ee3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ee6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027eec:	eb 6f                	jmp    c0027f5d <__adddf3+0x5f2>
c0027eee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ef1:	29 d8                	sub    eax,ebx
c0027ef3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ef6:	89 f0                	mov    eax,esi
c0027ef8:	eb 59                	jmp    c0027f53 <__adddf3+0x5e8>
c0027efa:	85 c0                	test   eax,eax
c0027efc:	74 6a                	je     c0027f68 <__adddf3+0x5fd>
c0027efe:	0f bd c8             	bsr    ecx,eax
c0027f01:	83 f1 1f             	xor    ecx,0x1f
c0027f04:	d3 e0                	shl    eax,cl
c0027f06:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f0f:	83 c1 20             	add    ecx,0x20
c0027f12:	39 cb                	cmp    ebx,ecx
c0027f14:	7f 35                	jg     c0027f4b <__adddf3+0x5e0>
c0027f16:	29 d9                	sub    ecx,ebx
c0027f18:	8d 71 01             	lea    esi,[ecx+0x1]
c0027f1b:	83 fe 1f             	cmp    esi,0x1f
c0027f1e:	7e 09                	jle    c0027f29 <__adddf3+0x5be>
c0027f20:	83 e9 1f             	sub    ecx,0x1f
c0027f23:	d3 e8                	shr    eax,cl
c0027f25:	89 c3                	mov    ebx,eax
c0027f27:	eb 11                	jmp    c0027f3a <__adddf3+0x5cf>
c0027f29:	b9 20 00 00 00       	mov    ecx,0x20
c0027f2e:	29 f1                	sub    ecx,esi
c0027f30:	89 c3                	mov    ebx,eax
c0027f32:	d3 e3                	shl    ebx,cl
c0027f34:	89 f1                	mov    ecx,esi
c0027f36:	d3 e8                	shr    eax,cl
c0027f38:	89 c2                	mov    edx,eax
c0027f3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f3d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f45:	89 d0                	mov    eax,edx
c0027f47:	89 da                	mov    edx,ebx
c0027f49:	eb 26                	jmp    c0027f71 <__adddf3+0x606>
c0027f4b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f4e:	29 cf                	sub    edi,ecx
c0027f50:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f53:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f58:	eb 17                	jmp    c0027f71 <__adddf3+0x606>
c0027f5a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f5d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f60:	eb 0f                	jmp    c0027f71 <__adddf3+0x606>
c0027f62:	31 d2                	xor    edx,edx
c0027f64:	31 c0                	xor    eax,eax
c0027f66:	eb 09                	jmp    c0027f71 <__adddf3+0x606>
c0027f68:	89 c2                	mov    edx,eax
c0027f6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027f71:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f74:	c1 e1 14             	shl    ecx,0x14
c0027f77:	89 c3                	mov    ebx,eax
c0027f79:	c1 eb 0b             	shr    ebx,0xb
c0027f7c:	09 d9                	or     ecx,ebx
c0027f7e:	89 d3                	mov    ebx,edx
c0027f80:	c1 eb 0b             	shr    ebx,0xb
c0027f83:	c1 e0 15             	shl    eax,0x15
c0027f86:	09 d8                	or     eax,ebx
c0027f88:	89 c7                	mov    edi,eax
c0027f8a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027f90:	0f 95 c0             	setne  al
c0027f93:	89 c6                	mov    esi,eax
c0027f95:	09 f3                	or     ebx,esi
c0027f97:	83 e3 01             	and    ebx,0x1
c0027f9a:	c1 ea 0a             	shr    edx,0xa
c0027f9d:	21 da                	and    edx,ebx
c0027f9f:	89 f8                	mov    eax,edi
c0027fa1:	01 d0                	add    eax,edx
c0027fa3:	83 d1 00             	adc    ecx,0x0
c0027fa6:	89 c7                	mov    edi,eax
c0027fa8:	eb 06                	jmp    c0027fb0 <__adddf3+0x645>
c0027faa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fb0:	89 f8                	mov    eax,edi
c0027fb2:	89 ca                	mov    edx,ecx
c0027fb4:	83 c4 24             	add    esp,0x24
c0027fb7:	5b                   	pop    ebx
c0027fb8:	5e                   	pop    esi
c0027fb9:	5f                   	pop    edi
c0027fba:	5d                   	pop    ebp
c0027fbb:	c3                   	ret    

c0027fbc <__subdf3>:
c0027fbc:	55                   	push   ebp
c0027fbd:	89 e5                	mov    ebp,esp
c0027fbf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fc2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027fc5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fcb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027fce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027fd1:	5d                   	pop    ebp
c0027fd2:	e9 94 f9 ff ff       	jmp    c002796b <__adddf3>

c0027fd7 <__negdf2>:
c0027fd7:	55                   	push   ebp
c0027fd8:	89 e5                	mov    ebp,esp
c0027fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027fdd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fe0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fe6:	5d                   	pop    ebp
c0027fe7:	c3                   	ret    

c0027fe8 <__muldf3>:
c0027fe8:	55                   	push   ebp
c0027fe9:	89 e5                	mov    ebp,esp
c0027feb:	57                   	push   edi
c0027fec:	56                   	push   esi
c0027fed:	53                   	push   ebx
c0027fee:	83 ec 24             	sub    esp,0x24
c0027ff1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027ff7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ffa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ffd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028000:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028003:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028006:	89 c8                	mov    eax,ecx
c0028008:	c1 f8 14             	sar    eax,0x14
c002800b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002800e:	89 f8                	mov    eax,edi
c0028010:	89 fb                	mov    ebx,edi
c0028012:	c1 e3 0b             	shl    ebx,0xb
c0028015:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028018:	c1 e1 0b             	shl    ecx,0xb
c002801b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028021:	c1 e8 15             	shr    eax,0x15
c0028024:	09 c1                	or     ecx,eax
c0028026:	89 d6                	mov    esi,edx
c0028028:	89 d0                	mov    eax,edx
c002802a:	c1 f8 14             	sar    eax,0x14
c002802d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028030:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028033:	89 c3                	mov    ebx,eax
c0028035:	c1 e3 0b             	shl    ebx,0xb
c0028038:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002803b:	c1 e6 0b             	shl    esi,0xb
c002803e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028044:	c1 e8 15             	shr    eax,0x15
c0028047:	09 c6                	or     esi,eax
c0028049:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002804c:	25 ff 07 00 00       	and    eax,0x7ff
c0028051:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028054:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028057:	25 ff 07 00 00       	and    eax,0x7ff
c002805c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002805f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028062:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028065:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002806c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002806f:	40                   	inc    eax
c0028070:	a9 fe 07 00 00       	test   eax,0x7fe
c0028075:	0f 85 8d 00 00 00    	jne    c0028108 <__muldf3+0x120>
c002807b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002807e:	09 c8                	or     eax,ecx
c0028080:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028084:	74 44                	je     c00280ca <__muldf3+0xe2>
c0028086:	85 c0                	test   eax,eax
c0028088:	0f 85 31 02 00 00    	jne    c00282bf <__muldf3+0x2d7>
c002808e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028091:	40                   	inc    eax
c0028092:	a9 fe 07 00 00       	test   eax,0x7fe
c0028097:	75 13                	jne    c00280ac <__muldf3+0xc4>
c0028099:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002809c:	09 f1                	or     ecx,esi
c002809e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280a2:	74 22                	je     c00280c6 <__muldf3+0xde>
c00280a4:	85 c9                	test   ecx,ecx
c00280a6:	0f 85 0d 02 00 00    	jne    c00282b9 <__muldf3+0x2d1>
c00280ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00280b0:	0f 89 09 02 00 00    	jns    c00282bf <__muldf3+0x2d7>
c00280b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00280b9:	05 00 00 00 80       	add    eax,0x80000000
c00280be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280c1:	e9 f9 01 00 00       	jmp    c00282bf <__muldf3+0x2d7>
c00280c6:	85 c9                	test   ecx,ecx
c00280c8:	eb 2e                	jmp    c00280f8 <__muldf3+0x110>
c00280ca:	85 c0                	test   eax,eax
c00280cc:	74 20                	je     c00280ee <__muldf3+0x106>
c00280ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00280d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280d7:	c1 ef 1f             	shr    edi,0x1f
c00280da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00280dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00280e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00280e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e6:	09 f9                	or     ecx,edi
c00280e8:	78 1e                	js     c0028108 <__muldf3+0x120>
c00280ea:	89 c3                	mov    ebx,eax
c00280ec:	eb e0                	jmp    c00280ce <__muldf3+0xe6>
c00280ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280f1:	f7 d0                	not    eax
c00280f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00280f8:	75 b2                	jne    c00280ac <__muldf3+0xc4>
c00280fa:	31 ff                	xor    edi,edi
c00280fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028103:	e9 b7 01 00 00       	jmp    c00282bf <__muldf3+0x2d7>
c0028108:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002810b:	40                   	inc    eax
c002810c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028111:	75 57                	jne    c002816a <__muldf3+0x182>
c0028113:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028116:	09 f0                	or     eax,esi
c0028118:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002811c:	74 23                	je     c0028141 <__muldf3+0x159>
c002811e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028122:	0f 89 91 01 00 00    	jns    c00282b9 <__muldf3+0x2d1>
c0028128:	85 c0                	test   eax,eax
c002812a:	0f 85 89 01 00 00    	jne    c00282b9 <__muldf3+0x2d1>
c0028130:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028133:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028139:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002813c:	e9 7e 01 00 00       	jmp    c00282bf <__muldf3+0x2d7>
c0028141:	85 c0                	test   eax,eax
c0028143:	75 0c                	jne    c0028151 <__muldf3+0x169>
c0028145:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028149:	0f 89 6a 01 00 00    	jns    c00282b9 <__muldf3+0x2d1>
c002814f:	eb df                	jmp    c0028130 <__muldf3+0x148>
c0028151:	01 f6                	add    esi,esi
c0028153:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028156:	c1 ea 1f             	shr    edx,0x1f
c0028159:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002815c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002815f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028162:	09 d6                	or     esi,edx
c0028164:	78 04                	js     c002816a <__muldf3+0x182>
c0028166:	89 c3                	mov    ebx,eax
c0028168:	eb e7                	jmp    c0028151 <__muldf3+0x169>
c002816a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028170:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028176:	89 c8                	mov    eax,ecx
c0028178:	f7 e6                	mul    esi
c002817a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002817d:	89 c7                	mov    edi,eax
c002817f:	89 c8                	mov    eax,ecx
c0028181:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028184:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028187:	89 c1                	mov    ecx,eax
c0028189:	89 f0                	mov    eax,esi
c002818b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002818e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028191:	89 c6                	mov    esi,eax
c0028193:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028196:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028199:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002819c:	31 c0                	xor    eax,eax
c002819e:	01 f1                	add    ecx,esi
c00281a0:	0f 92 c0             	setb   al
c00281a3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00281a6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00281a9:	83 d6 00             	adc    esi,0x0
c00281ac:	01 c7                	add    edi,eax
c00281ae:	83 d6 00             	adc    esi,0x0
c00281b1:	01 ca                	add    edx,ecx
c00281b3:	0f 92 c1             	setb   cl
c00281b6:	0f b6 c9             	movzx  ecx,cl
c00281b9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00281bc:	83 d6 00             	adc    esi,0x0
c00281bf:	01 cf                	add    edi,ecx
c00281c1:	83 d6 00             	adc    esi,0x0
c00281c4:	31 c9                	xor    ecx,ecx
c00281c6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00281c9:	0f 95 c1             	setne  cl
c00281cc:	09 cf                	or     edi,ecx
c00281ce:	85 f6                	test   esi,esi
c00281d0:	78 0c                	js     c00281de <__muldf3+0x1f6>
c00281d2:	01 f6                	add    esi,esi
c00281d4:	89 f8                	mov    eax,edi
c00281d6:	c1 e8 1f             	shr    eax,0x1f
c00281d9:	09 c6                	or     esi,eax
c00281db:	01 ff                	add    edi,edi
c00281dd:	4b                   	dec    ebx
c00281de:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00281e4:	0f 8f 85 00 00 00    	jg     c002826f <__muldf3+0x287>
c00281ea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00281f0:	85 db                	test   ebx,ebx
c00281f2:	0f 8f 84 00 00 00    	jg     c002827c <__muldf3+0x294>
c00281f8:	83 fb cc             	cmp    ebx,0xffffffcc
c00281fb:	7c 79                	jl     c0028276 <__muldf3+0x28e>
c00281fd:	ba 01 00 00 00       	mov    edx,0x1
c0028202:	29 da                	sub    edx,ebx
c0028204:	81 ce 00 00 00 80    	or     esi,0x80000000
c002820a:	83 fa 1f             	cmp    edx,0x1f
c002820d:	7e 30                	jle    c002823f <__muldf3+0x257>
c002820f:	83 fa 20             	cmp    edx,0x20
c0028212:	75 0b                	jne    c002821f <__muldf3+0x237>
c0028214:	31 c0                	xor    eax,eax
c0028216:	85 ff                	test   edi,edi
c0028218:	0f 95 c0             	setne  al
c002821b:	89 c7                	mov    edi,eax
c002821d:	eb 1a                	jmp    c0028239 <__muldf3+0x251>
c002821f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028222:	89 f0                	mov    eax,esi
c0028224:	d3 e0                	shl    eax,cl
c0028226:	09 f8                	or     eax,edi
c0028228:	0f 95 c0             	setne  al
c002822b:	0f b6 c0             	movzx  eax,al
c002822e:	89 c7                	mov    edi,eax
c0028230:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028235:	29 d9                	sub    ecx,ebx
c0028237:	d3 ee                	shr    esi,cl
c0028239:	09 f7                	or     edi,esi
c002823b:	31 db                	xor    ebx,ebx
c002823d:	eb 3b                	jmp    c002827a <__muldf3+0x292>
c002823f:	83 c3 1f             	add    ebx,0x1f
c0028242:	89 f0                	mov    eax,esi
c0028244:	88 d9                	mov    cl,bl
c0028246:	d3 e0                	shl    eax,cl
c0028248:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002824b:	89 f8                	mov    eax,edi
c002824d:	88 d1                	mov    cl,dl
c002824f:	d3 e8                	shr    eax,cl
c0028251:	89 c1                	mov    ecx,eax
c0028253:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028256:	09 c8                	or     eax,ecx
c0028258:	88 d9                	mov    cl,bl
c002825a:	d3 e7                	shl    edi,cl
c002825c:	31 db                	xor    ebx,ebx
c002825e:	85 ff                	test   edi,edi
c0028260:	0f 95 c3             	setne  bl
c0028263:	89 df                	mov    edi,ebx
c0028265:	09 c7                	or     edi,eax
c0028267:	88 d1                	mov    cl,dl
c0028269:	d3 ee                	shr    esi,cl
c002826b:	31 db                	xor    ebx,ebx
c002826d:	eb 0d                	jmp    c002827c <__muldf3+0x294>
c002826f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028274:	eb 02                	jmp    c0028278 <__muldf3+0x290>
c0028276:	31 db                	xor    ebx,ebx
c0028278:	31 ff                	xor    edi,edi
c002827a:	31 f6                	xor    esi,esi
c002827c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002827f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028282:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028287:	09 c3                	or     ebx,eax
c0028289:	c1 e3 14             	shl    ebx,0x14
c002828c:	89 f0                	mov    eax,esi
c002828e:	c1 e8 0b             	shr    eax,0xb
c0028291:	09 c3                	or     ebx,eax
c0028293:	89 f8                	mov    eax,edi
c0028295:	c1 e8 0b             	shr    eax,0xb
c0028298:	c1 e6 15             	shl    esi,0x15
c002829b:	09 c6                	or     esi,eax
c002829d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00282a3:	0f 95 c1             	setne  cl
c00282a6:	09 c8                	or     eax,ecx
c00282a8:	83 e0 01             	and    eax,0x1
c00282ab:	c1 ef 0a             	shr    edi,0xa
c00282ae:	21 c7                	and    edi,eax
c00282b0:	01 f7                	add    edi,esi
c00282b2:	83 d3 00             	adc    ebx,0x0
c00282b5:	89 da                	mov    edx,ebx
c00282b7:	eb 03                	jmp    c00282bc <__muldf3+0x2d4>
c00282b9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00282bc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282bf:	89 f8                	mov    eax,edi
c00282c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282c4:	83 c4 24             	add    esp,0x24
c00282c7:	5b                   	pop    ebx
c00282c8:	5e                   	pop    esi
c00282c9:	5f                   	pop    edi
c00282ca:	5d                   	pop    ebp
c00282cb:	c3                   	ret    

c00282cc <__divdf3>:
c00282cc:	55                   	push   ebp
c00282cd:	89 e5                	mov    ebp,esp
c00282cf:	57                   	push   edi
c00282d0:	56                   	push   esi
c00282d1:	53                   	push   ebx
c00282d2:	83 ec 2c             	sub    esp,0x2c
c00282d5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00282d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00282de:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00282e1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00282e4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00282e7:	89 ce                	mov    esi,ecx
c00282e9:	89 c8                	mov    eax,ecx
c00282eb:	c1 f8 14             	sar    eax,0x14
c00282ee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00282f1:	89 f8                	mov    eax,edi
c00282f3:	89 fb                	mov    ebx,edi
c00282f5:	c1 e3 0b             	shl    ebx,0xb
c00282f8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00282fb:	c1 e6 0b             	shl    esi,0xb
c00282fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028304:	c1 e8 15             	shr    eax,0x15
c0028307:	09 c6                	or     esi,eax
c0028309:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002830c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002830f:	89 c2                	mov    edx,eax
c0028311:	c1 fa 14             	sar    edx,0x14
c0028314:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028317:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002831a:	89 de                	mov    esi,ebx
c002831c:	c1 e6 0b             	shl    esi,0xb
c002831f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028322:	c1 e0 0b             	shl    eax,0xb
c0028325:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002832a:	c1 eb 15             	shr    ebx,0x15
c002832d:	09 d8                	or     eax,ebx
c002832f:	89 c2                	mov    edx,eax
c0028331:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028334:	25 ff 07 00 00       	and    eax,0x7ff
c0028339:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002833c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002833f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028345:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028348:	29 d8                	sub    eax,ebx
c002834a:	05 ff 03 00 00       	add    eax,0x3ff
c002834f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028352:	46                   	inc    esi
c0028353:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028359:	0f 85 a5 00 00 00    	jne    c0028404 <__divdf3+0x138>
c002835f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028362:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028365:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028369:	74 2a                	je     c0028395 <__divdf3+0xc9>
c002836b:	85 f6                	test   esi,esi
c002836d:	0f 85 cc 02 00 00    	jne    c002863f <__divdf3+0x373>
c0028373:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028376:	40                   	inc    eax
c0028377:	a9 fe 07 00 00       	test   eax,0x7fe
c002837c:	75 26                	jne    c00283a4 <__divdf3+0xd8>
c002837e:	85 db                	test   ebx,ebx
c0028380:	74 22                	je     c00283a4 <__divdf3+0xd8>
c0028382:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028385:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028388:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002838b:	09 d0                	or     eax,edx
c002838d:	0f 85 ac 02 00 00    	jne    c002863f <__divdf3+0x373>
c0028393:	eb 63                	jmp    c00283f8 <__divdf3+0x12c>
c0028395:	85 f6                	test   esi,esi
c0028397:	75 22                	jne    c00283bb <__divdf3+0xef>
c0028399:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002839c:	40                   	inc    eax
c002839d:	a9 fe 07 00 00       	test   eax,0x7fe
c00283a2:	74 36                	je     c00283da <__divdf3+0x10e>
c00283a4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00283a8:	0f 89 91 02 00 00    	jns    c002863f <__divdf3+0x373>
c00283ae:	89 f8                	mov    eax,edi
c00283b0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283b6:	e9 80 02 00 00       	jmp    c002863b <__divdf3+0x36f>
c00283bb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283be:	01 f6                	add    esi,esi
c00283c0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00283c3:	c1 ef 1f             	shr    edi,0x1f
c00283c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283c9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00283cc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00283cf:	09 f7                	or     edi,esi
c00283d1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00283d4:	78 2e                	js     c0028404 <__divdf3+0x138>
c00283d6:	89 c8                	mov    eax,ecx
c00283d8:	eb e1                	jmp    c00283bb <__divdf3+0xef>
c00283da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00283dd:	09 d0                	or     eax,edx
c00283df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00283e3:	74 0f                	je     c00283f4 <__divdf3+0x128>
c00283e5:	85 c0                	test   eax,eax
c00283e7:	74 bb                	je     c00283a4 <__divdf3+0xd8>
c00283e9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00283ec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00283ef:	e9 4b 02 00 00       	jmp    c002863f <__divdf3+0x373>
c00283f4:	85 c0                	test   eax,eax
c00283f6:	75 ac                	jne    c00283a4 <__divdf3+0xd8>
c00283f8:	31 ff                	xor    edi,edi
c00283fa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00283ff:	e9 3b 02 00 00       	jmp    c002863f <__divdf3+0x373>
c0028404:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028407:	8d 4f 01             	lea    ecx,[edi+0x1]
c002840a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028410:	75 6b                	jne    c002847d <__divdf3+0x1b1>
c0028412:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028415:	09 d6                	or     esi,edx
c0028417:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002841b:	74 28                	je     c0028445 <__divdf3+0x179>
c002841d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028420:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028423:	85 f6                	test   esi,esi
c0028425:	0f 85 14 02 00 00    	jne    c002863f <__divdf3+0x373>
c002842b:	31 ff                	xor    edi,edi
c002842d:	31 c9                	xor    ecx,ecx
c002842f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028432:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028435:	0f 89 04 02 00 00    	jns    c002863f <__divdf3+0x373>
c002843b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028440:	e9 fa 01 00 00       	jmp    c002863f <__divdf3+0x373>
c0028445:	85 f6                	test   esi,esi
c0028447:	75 1b                	jne    c0028464 <__divdf3+0x198>
c0028449:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002844c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002844f:	25 00 00 00 80       	and    eax,0x80000000
c0028454:	31 c9                	xor    ecx,ecx
c0028456:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002845b:	89 cf                	mov    edi,ecx
c002845d:	89 c1                	mov    ecx,eax
c002845f:	e9 db 01 00 00       	jmp    c002863f <__divdf3+0x373>
c0028464:	01 d2                	add    edx,edx
c0028466:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028469:	c1 eb 1f             	shr    ebx,0x1f
c002846c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002846f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028472:	8d 48 01             	lea    ecx,[eax+0x1]
c0028475:	09 da                	or     edx,ebx
c0028477:	78 04                	js     c002847d <__divdf3+0x1b1>
c0028479:	89 c8                	mov    eax,ecx
c002847b:	eb e7                	jmp    c0028464 <__divdf3+0x198>
c002847d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028480:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028486:	81 ca 00 00 00 80    	or     edx,0x80000000
c002848c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002848f:	39 d6                	cmp    esi,edx
c0028491:	77 0d                	ja     c00284a0 <__divdf3+0x1d4>
c0028493:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028496:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028499:	72 1b                	jb     c00284b6 <__divdf3+0x1ea>
c002849b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002849e:	75 16                	jne    c00284b6 <__divdf3+0x1ea>
c00284a0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00284a6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00284a9:	83 de 00             	sbb    esi,0x0
c00284ac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00284af:	ba 01 00 00 00       	mov    edx,0x1
c00284b4:	eb 02                	jmp    c00284b8 <__divdf3+0x1ec>
c00284b6:	31 d2                	xor    edx,edx
c00284b8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00284bf:	31 ff                	xor    edi,edi
c00284c1:	01 ff                	add    edi,edi
c00284c3:	89 d1                	mov    ecx,edx
c00284c5:	c1 e9 1f             	shr    ecx,0x1f
c00284c8:	09 cf                	or     edi,ecx
c00284ca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00284cd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00284d0:	89 da                	mov    edx,ebx
c00284d2:	89 f3                	mov    ebx,esi
c00284d4:	8d 34 36             	lea    esi,[esi+esi*1]
c00284d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284da:	c1 e9 1f             	shr    ecx,0x1f
c00284dd:	09 ce                	or     esi,ecx
c00284df:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284e2:	01 c9                	add    ecx,ecx
c00284e4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00284e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00284ea:	85 db                	test   ebx,ebx
c00284ec:	78 29                	js     c0028517 <__divdf3+0x24b>
c00284ee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00284f1:	72 07                	jb     c00284fa <__divdf3+0x22e>
c00284f3:	75 3c                	jne    c0028531 <__divdf3+0x265>
c00284f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284f8:	77 37                	ja     c0028531 <__divdf3+0x265>
c00284fa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00284fd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028500:	31 d2                	xor    edx,edx
c0028502:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028505:	0f 97 c2             	seta   dl
c0028508:	29 d6                	sub    esi,edx
c002850a:	89 d9                	mov    ecx,ebx
c002850c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002850f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028512:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028515:	eb 17                	jmp    c002852e <__divdf3+0x262>
c0028517:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002851a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002851d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028520:	0f 97 c1             	seta   cl
c0028523:	0f b6 c9             	movzx  ecx,cl
c0028526:	29 ce                	sub    esi,ecx
c0028528:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002852b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002852e:	83 ca 01             	or     edx,0x1
c0028531:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028534:	75 8b                	jne    c00284c1 <__divdf3+0x1f5>
c0028536:	c1 e7 09             	shl    edi,0x9
c0028539:	89 d1                	mov    ecx,edx
c002853b:	c1 e9 17             	shr    ecx,0x17
c002853e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028541:	09 f3                	or     ebx,esi
c0028543:	0f 95 c3             	setne  bl
c0028546:	0f b6 db             	movzx  ebx,bl
c0028549:	c1 e2 09             	shl    edx,0x9
c002854c:	09 d3                	or     ebx,edx
c002854e:	89 ca                	mov    edx,ecx
c0028550:	09 fa                	or     edx,edi
c0028552:	78 0c                	js     c0028560 <__divdf3+0x294>
c0028554:	01 d2                	add    edx,edx
c0028556:	89 d9                	mov    ecx,ebx
c0028558:	c1 e9 1f             	shr    ecx,0x1f
c002855b:	09 ca                	or     edx,ecx
c002855d:	01 db                	add    ebx,ebx
c002855f:	48                   	dec    eax
c0028560:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028565:	0f 8f 83 00 00 00    	jg     c00285ee <__divdf3+0x322>
c002856b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028571:	85 c0                	test   eax,eax
c0028573:	0f 8f 82 00 00 00    	jg     c00285fb <__divdf3+0x32f>
c0028579:	83 f8 cc             	cmp    eax,0xffffffcc
c002857c:	7c 77                	jl     c00285f5 <__divdf3+0x329>
c002857e:	be 01 00 00 00       	mov    esi,0x1
c0028583:	29 c6                	sub    esi,eax
c0028585:	81 ca 00 00 00 80    	or     edx,0x80000000
c002858b:	83 fe 1f             	cmp    esi,0x1f
c002858e:	7e 2f                	jle    c00285bf <__divdf3+0x2f3>
c0028590:	83 fe 20             	cmp    esi,0x20
c0028593:	75 0a                	jne    c002859f <__divdf3+0x2d3>
c0028595:	85 db                	test   ebx,ebx
c0028597:	0f 95 c3             	setne  bl
c002859a:	0f b6 db             	movzx  ebx,bl
c002859d:	eb 1a                	jmp    c00285b9 <__divdf3+0x2ed>
c002859f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00285a2:	89 d7                	mov    edi,edx
c00285a4:	d3 e7                	shl    edi,cl
c00285a6:	89 f9                	mov    ecx,edi
c00285a8:	09 d9                	or     ecx,ebx
c00285aa:	0f 95 c3             	setne  bl
c00285ad:	0f b6 db             	movzx  ebx,bl
c00285b0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285b5:	29 c1                	sub    ecx,eax
c00285b7:	d3 ea                	shr    edx,cl
c00285b9:	09 d3                	or     ebx,edx
c00285bb:	31 c0                	xor    eax,eax
c00285bd:	eb 3a                	jmp    c00285f9 <__divdf3+0x32d>
c00285bf:	83 c0 1f             	add    eax,0x1f
c00285c2:	89 d7                	mov    edi,edx
c00285c4:	88 c1                	mov    cl,al
c00285c6:	d3 e7                	shl    edi,cl
c00285c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285cb:	89 df                	mov    edi,ebx
c00285cd:	89 f1                	mov    ecx,esi
c00285cf:	d3 ef                	shr    edi,cl
c00285d1:	89 f9                	mov    ecx,edi
c00285d3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00285d6:	09 cf                	or     edi,ecx
c00285d8:	88 c1                	mov    cl,al
c00285da:	d3 e3                	shl    ebx,cl
c00285dc:	85 db                	test   ebx,ebx
c00285de:	0f 95 c3             	setne  bl
c00285e1:	0f b6 db             	movzx  ebx,bl
c00285e4:	09 fb                	or     ebx,edi
c00285e6:	89 f1                	mov    ecx,esi
c00285e8:	d3 ea                	shr    edx,cl
c00285ea:	31 c0                	xor    eax,eax
c00285ec:	eb 0d                	jmp    c00285fb <__divdf3+0x32f>
c00285ee:	b8 ff 07 00 00       	mov    eax,0x7ff
c00285f3:	eb 02                	jmp    c00285f7 <__divdf3+0x32b>
c00285f5:	31 c0                	xor    eax,eax
c00285f7:	31 db                	xor    ebx,ebx
c00285f9:	31 d2                	xor    edx,edx
c00285fb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00285fe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028601:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028607:	09 c8                	or     eax,ecx
c0028609:	c1 e0 14             	shl    eax,0x14
c002860c:	89 d1                	mov    ecx,edx
c002860e:	c1 e9 0b             	shr    ecx,0xb
c0028611:	09 c8                	or     eax,ecx
c0028613:	89 c6                	mov    esi,eax
c0028615:	89 d9                	mov    ecx,ebx
c0028617:	c1 e9 0b             	shr    ecx,0xb
c002861a:	c1 e2 15             	shl    edx,0x15
c002861d:	09 ca                	or     edx,ecx
c002861f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028625:	0f 95 c0             	setne  al
c0028628:	09 c1                	or     ecx,eax
c002862a:	83 e1 01             	and    ecx,0x1
c002862d:	c1 eb 0a             	shr    ebx,0xa
c0028630:	21 cb                	and    ebx,ecx
c0028632:	01 d3                	add    ebx,edx
c0028634:	89 d8                	mov    eax,ebx
c0028636:	83 d6 00             	adc    esi,0x0
c0028639:	89 f2                	mov    edx,esi
c002863b:	89 c7                	mov    edi,eax
c002863d:	89 d1                	mov    ecx,edx
c002863f:	89 f8                	mov    eax,edi
c0028641:	89 ca                	mov    edx,ecx
c0028643:	83 c4 2c             	add    esp,0x2c
c0028646:	5b                   	pop    ebx
c0028647:	5e                   	pop    esi
c0028648:	5f                   	pop    edi
c0028649:	5d                   	pop    ebp
c002864a:	c3                   	ret    

c002864b <__floatsidf>:
c002864b:	55                   	push   ebp
c002864c:	89 e5                	mov    ebp,esp
c002864e:	56                   	push   esi
c002864f:	53                   	push   ebx
c0028650:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028653:	85 db                	test   ebx,ebx
c0028655:	7e 15                	jle    c002866c <__floatsidf+0x21>
c0028657:	0f bd cb             	bsr    ecx,ebx
c002865a:	83 f1 1f             	xor    ecx,0x1f
c002865d:	d3 e3                	shl    ebx,cl
c002865f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028665:	b8 1e 04 00 00       	mov    eax,0x41e
c002866a:	eb 21                	jmp    c002868d <__floatsidf+0x42>
c002866c:	b8 00 00 00 00       	mov    eax,0x0
c0028671:	ba 00 00 00 00       	mov    edx,0x0
c0028676:	74 2a                	je     c00286a2 <__floatsidf+0x57>
c0028678:	f7 db                	neg    ebx
c002867a:	0f bd cb             	bsr    ecx,ebx
c002867d:	83 f1 1f             	xor    ecx,0x1f
c0028680:	d3 e3                	shl    ebx,cl
c0028682:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028688:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002868d:	29 c8                	sub    eax,ecx
c002868f:	c1 e0 14             	shl    eax,0x14
c0028692:	89 c1                	mov    ecx,eax
c0028694:	89 de                	mov    esi,ebx
c0028696:	c1 ee 0b             	shr    esi,0xb
c0028699:	09 f1                	or     ecx,esi
c002869b:	89 ca                	mov    edx,ecx
c002869d:	c1 e3 15             	shl    ebx,0x15
c00286a0:	89 d8                	mov    eax,ebx
c00286a2:	5b                   	pop    ebx
c00286a3:	5e                   	pop    esi
c00286a4:	5d                   	pop    ebp
c00286a5:	c3                   	ret    

c00286a6 <__floatunsidf>:
c00286a6:	55                   	push   ebp
c00286a7:	89 e5                	mov    ebp,esp
c00286a9:	56                   	push   esi
c00286aa:	53                   	push   ebx
c00286ab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00286ae:	85 db                	test   ebx,ebx
c00286b0:	74 2a                	je     c00286dc <__floatunsidf+0x36>
c00286b2:	0f bd cb             	bsr    ecx,ebx
c00286b5:	83 f1 1f             	xor    ecx,0x1f
c00286b8:	d3 e3                	shl    ebx,cl
c00286ba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00286c0:	b8 1e 04 00 00       	mov    eax,0x41e
c00286c5:	29 c8                	sub    eax,ecx
c00286c7:	c1 e0 14             	shl    eax,0x14
c00286ca:	89 c1                	mov    ecx,eax
c00286cc:	89 de                	mov    esi,ebx
c00286ce:	c1 ee 0b             	shr    esi,0xb
c00286d1:	09 f1                	or     ecx,esi
c00286d3:	89 ca                	mov    edx,ecx
c00286d5:	c1 e3 15             	shl    ebx,0x15
c00286d8:	89 d8                	mov    eax,ebx
c00286da:	eb 04                	jmp    c00286e0 <__floatunsidf+0x3a>
c00286dc:	31 c0                	xor    eax,eax
c00286de:	31 d2                	xor    edx,edx
c00286e0:	5b                   	pop    ebx
c00286e1:	5e                   	pop    esi
c00286e2:	5d                   	pop    ebp
c00286e3:	c3                   	ret    

c00286e4 <__fixdfsi>:
c00286e4:	55                   	push   ebp
c00286e5:	89 e5                	mov    ebp,esp
c00286e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00286ea:	89 d1                	mov    ecx,edx
c00286ec:	c1 e1 0b             	shl    ecx,0xb
c00286ef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00286f8:	c1 e8 15             	shr    eax,0x15
c00286fb:	09 c1                	or     ecx,eax
c00286fd:	c1 fa 14             	sar    edx,0x14
c0028700:	78 1f                	js     c0028721 <__fixdfsi+0x3d>
c0028702:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028708:	31 c0                	xor    eax,eax
c002870a:	83 fa 1e             	cmp    edx,0x1e
c002870d:	77 40                	ja     c002874f <__fixdfsi+0x6b>
c002870f:	89 c8                	mov    eax,ecx
c0028711:	0d 00 00 00 80       	or     eax,0x80000000
c0028716:	b9 1f 00 00 00       	mov    ecx,0x1f
c002871b:	29 d1                	sub    ecx,edx
c002871d:	d3 e8                	shr    eax,cl
c002871f:	eb 2e                	jmp    c002874f <__fixdfsi+0x6b>
c0028721:	31 c0                	xor    eax,eax
c0028723:	81 c2 01 04 00 00    	add    edx,0x401
c0028729:	78 24                	js     c002874f <__fixdfsi+0x6b>
c002872b:	83 fa 1e             	cmp    edx,0x1e
c002872e:	7e 09                	jle    c0028739 <__fixdfsi+0x55>
c0028730:	83 fa 1f             	cmp    edx,0x1f
c0028733:	75 18                	jne    c002874d <__fixdfsi+0x69>
c0028735:	85 c9                	test   ecx,ecx
c0028737:	75 14                	jne    c002874d <__fixdfsi+0x69>
c0028739:	89 c8                	mov    eax,ecx
c002873b:	0d 00 00 00 80       	or     eax,0x80000000
c0028740:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028745:	29 d1                	sub    ecx,edx
c0028747:	d3 e8                	shr    eax,cl
c0028749:	f7 d8                	neg    eax
c002874b:	eb 02                	jmp    c002874f <__fixdfsi+0x6b>
c002874d:	31 c0                	xor    eax,eax
c002874f:	5d                   	pop    ebp
c0028750:	c3                   	ret    

c0028751 <__fixunsdfsi>:
c0028751:	55                   	push   ebp
c0028752:	89 e5                	mov    ebp,esp
c0028754:	53                   	push   ebx
c0028755:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028758:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002875b:	89 d3                	mov    ebx,edx
c002875d:	c1 fb 14             	sar    ebx,0x14
c0028760:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028766:	31 c0                	xor    eax,eax
c0028768:	83 fb 1f             	cmp    ebx,0x1f
c002876b:	77 1d                	ja     c002878a <__fixunsdfsi+0x39>
c002876d:	89 d0                	mov    eax,edx
c002876f:	c1 e0 0b             	shl    eax,0xb
c0028772:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028777:	c1 e9 15             	shr    ecx,0x15
c002877a:	09 c8                	or     eax,ecx
c002877c:	0d 00 00 00 80       	or     eax,0x80000000
c0028781:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028786:	29 d9                	sub    ecx,ebx
c0028788:	d3 e8                	shr    eax,cl
c002878a:	5b                   	pop    ebx
c002878b:	5d                   	pop    ebp
c002878c:	c3                   	ret    

c002878d <__cmpdf2>:
c002878d:	55                   	push   ebp
c002878e:	89 e5                	mov    ebp,esp
c0028790:	57                   	push   edi
c0028791:	56                   	push   esi
c0028792:	53                   	push   ebx
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028799:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002879c:	89 ca                	mov    edx,ecx
c002879e:	c1 ea 14             	shr    edx,0x14
c00287a1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00287a7:	89 cb                	mov    ebx,ecx
c00287a9:	c1 fb 1f             	sar    ebx,0x1f
c00287ac:	31 da                	xor    edx,ebx
c00287ae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00287b1:	89 df                	mov    edi,ebx
c00287b3:	c1 e7 0b             	shl    edi,0xb
c00287b6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00287b9:	c1 e1 0b             	shl    ecx,0xb
c00287bc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287c2:	c1 eb 15             	shr    ebx,0x15
c00287c5:	09 d9                	or     ecx,ebx
c00287c7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00287ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287cd:	89 ce                	mov    esi,ecx
c00287cf:	c1 ee 14             	shr    esi,0x14
c00287d2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00287d8:	89 cb                	mov    ebx,ecx
c00287da:	c1 fb 1f             	sar    ebx,0x1f
c00287dd:	31 de                	xor    esi,ebx
c00287df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00287e2:	89 df                	mov    edi,ebx
c00287e4:	c1 e7 0b             	shl    edi,0xb
c00287e7:	c1 e1 0b             	shl    ecx,0xb
c00287ea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00287f0:	c1 eb 15             	shr    ebx,0x15
c00287f3:	09 d9                	or     ecx,ebx
c00287f5:	89 d3                	mov    ebx,edx
c00287f7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00287fd:	43                   	inc    ebx
c00287fe:	83 fb 01             	cmp    ebx,0x1
c0028801:	77 08                	ja     c002880b <__cmpdf2+0x7e>
c0028803:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028806:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028809:	75 68                	jne    c0028873 <__cmpdf2+0xe6>
c002880b:	89 f3                	mov    ebx,esi
c002880d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028813:	43                   	inc    ebx
c0028814:	83 fb 01             	cmp    ebx,0x1
c0028817:	77 06                	ja     c002881f <__cmpdf2+0x92>
c0028819:	89 fb                	mov    ebx,edi
c002881b:	09 cb                	or     ebx,ecx
c002881d:	75 54                	jne    c0028873 <__cmpdf2+0xe6>
c002881f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028822:	09 f8                	or     eax,edi
c0028824:	09 c8                	or     eax,ecx
c0028826:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028829:	75 12                	jne    c002883d <__cmpdf2+0xb0>
c002882b:	8d 42 01             	lea    eax,[edx+0x1]
c002882e:	83 f8 01             	cmp    eax,0x1
c0028831:	77 0a                	ja     c002883d <__cmpdf2+0xb0>
c0028833:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028836:	31 c0                	xor    eax,eax
c0028838:	83 fb 01             	cmp    ebx,0x1
c002883b:	76 36                	jbe    c0028873 <__cmpdf2+0xe6>
c002883d:	b8 01 00 00 00       	mov    eax,0x1
c0028842:	39 f2                	cmp    edx,esi
c0028844:	7f 2d                	jg     c0028873 <__cmpdf2+0xe6>
c0028846:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002884b:	7c 26                	jl     c0028873 <__cmpdf2+0xe6>
c002884d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028850:	77 07                	ja     c0028859 <__cmpdf2+0xcc>
c0028852:	72 16                	jb     c002886a <__cmpdf2+0xdd>
c0028854:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028857:	76 0a                	jbe    c0028863 <__cmpdf2+0xd6>
c0028859:	89 d0                	mov    eax,edx
c002885b:	c1 f8 1f             	sar    eax,0x1f
c002885e:	83 c8 01             	or     eax,0x1
c0028861:	eb 10                	jmp    c0028873 <__cmpdf2+0xe6>
c0028863:	b8 00 00 00 00       	mov    eax,0x0
c0028868:	73 09                	jae    c0028873 <__cmpdf2+0xe6>
c002886a:	89 d0                	mov    eax,edx
c002886c:	c1 f8 1f             	sar    eax,0x1f
c002886f:	83 e0 02             	and    eax,0x2
c0028872:	48                   	dec    eax
c0028873:	83 c4 0c             	add    esp,0xc
c0028876:	5b                   	pop    ebx
c0028877:	5e                   	pop    esi
c0028878:	5f                   	pop    edi
c0028879:	5d                   	pop    ebp
c002887a:	c3                   	ret    

c002887b <__eqdf2>:
c002887b:	55                   	push   ebp
c002887c:	89 e5                	mov    ebp,esp
c002887e:	50                   	push   eax
c002887f:	6a 01                	push   0x1
c0028881:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028884:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028887:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002888a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002888d:	e8 fb fe ff ff       	call   c002878d <__cmpdf2>
c0028892:	83 c4 18             	add    esp,0x18
c0028895:	c9                   	leave  
c0028896:	c3                   	ret    

c0028897 <__nedf2>:
c0028897:	eb e2                	jmp    c002887b <__eqdf2>

c0028899 <__gtdf2>:
c0028899:	55                   	push   ebp
c002889a:	89 e5                	mov    ebp,esp
c002889c:	50                   	push   eax
c002889d:	6a ff                	push   0xffffffff
c002889f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00288a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00288a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00288a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00288ab:	e8 dd fe ff ff       	call   c002878d <__cmpdf2>
c00288b0:	83 c4 18             	add    esp,0x18
c00288b3:	c9                   	leave  
c00288b4:	c3                   	ret    

c00288b5 <__gedf2>:
c00288b5:	eb e2                	jmp    c0028899 <__gtdf2>

c00288b7 <__ltdf2>:
c00288b7:	eb c2                	jmp    c002887b <__eqdf2>

c00288b9 <__ledf2>:
c00288b9:	eb c0                	jmp    c002887b <__eqdf2>

c00288bb <__truncdfsf2>:
c00288bb:	55                   	push   ebp
c00288bc:	89 e5                	mov    ebp,esp
c00288be:	57                   	push   edi
c00288bf:	56                   	push   esi
c00288c0:	53                   	push   ebx
c00288c1:	83 ec 0c             	sub    esp,0xc
c00288c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00288c7:	89 d1                	mov    ecx,edx
c00288c9:	c1 f9 14             	sar    ecx,0x14
c00288cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00288cf:	89 df                	mov    edi,ebx
c00288d1:	c1 e7 0b             	shl    edi,0xb
c00288d4:	89 d0                	mov    eax,edx
c00288d6:	c1 e0 0b             	shl    eax,0xb
c00288d9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00288de:	c1 eb 15             	shr    ebx,0x15
c00288e1:	09 d8                	or     eax,ebx
c00288e3:	89 cb                	mov    ebx,ecx
c00288e5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00288eb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00288f1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00288f7:	0f 86 9e 00 00 00    	jbe    c002899b <__truncdfsf2+0xe0>
c00288fd:	85 db                	test   ebx,ebx
c00288ff:	75 0a                	jne    c002890b <__truncdfsf2+0x50>
c0028901:	c1 fa 17             	sar    edx,0x17
c0028904:	30 d2                	xor    dl,dl
c0028906:	e9 84 00 00 00       	jmp    c002898f <__truncdfsf2+0xd4>
c002890b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028911:	83 fe 83             	cmp    esi,0xffffff83
c0028914:	7d 4b                	jge    c0028961 <__truncdfsf2+0xa6>
c0028916:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002891b:	29 f1                	sub    ecx,esi
c002891d:	83 f9 1f             	cmp    ecx,0x1f
c0028920:	7f 6b                	jg     c002898d <__truncdfsf2+0xd2>
c0028922:	0d 00 00 00 80       	or     eax,0x80000000
c0028927:	89 c3                	mov    ebx,eax
c0028929:	d3 eb                	shr    ebx,cl
c002892b:	be 01 00 00 00       	mov    esi,0x1
c0028930:	d3 e6                	shl    esi,cl
c0028932:	4e                   	dec    esi
c0028933:	21 f0                	and    eax,esi
c0028935:	09 f8                	or     eax,edi
c0028937:	0f 95 c0             	setne  al
c002893a:	0f b6 c0             	movzx  eax,al
c002893d:	09 c3                	or     ebx,eax
c002893f:	89 d9                	mov    ecx,ebx
c0028941:	c1 e9 08             	shr    ecx,0x8
c0028944:	f6 c3 7f             	test   bl,0x7f
c0028947:	0f 95 c0             	setne  al
c002894a:	09 c8                	or     eax,ecx
c002894c:	83 e0 01             	and    eax,0x1
c002894f:	c1 eb 07             	shr    ebx,0x7
c0028952:	21 c3                	and    ebx,eax
c0028954:	81 e2 00 00 00 80    	and    edx,0x80000000
c002895a:	09 d1                	or     ecx,edx
c002895c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002895f:	eb 76                	jmp    c00289d7 <__truncdfsf2+0x11c>
c0028961:	83 c6 80             	add    esi,0xffffff80
c0028964:	7e 1d                	jle    c0028983 <__truncdfsf2+0xc8>
c0028966:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002896c:	75 0b                	jne    c0028979 <__truncdfsf2+0xbe>
c002896e:	09 f8                	or     eax,edi
c0028970:	74 09                	je     c002897b <__truncdfsf2+0xc0>
c0028972:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028977:	eb 02                	jmp    c002897b <__truncdfsf2+0xc0>
c0028979:	31 c0                	xor    eax,eax
c002897b:	c1 fa 17             	sar    edx,0x17
c002897e:	80 ca ff             	or     dl,0xff
c0028981:	eb 0e                	jmp    c0028991 <__truncdfsf2+0xd6>
c0028983:	c1 fa 1f             	sar    edx,0x1f
c0028986:	c1 e2 08             	shl    edx,0x8
c0028989:	09 ca                	or     edx,ecx
c002898b:	eb 04                	jmp    c0028991 <__truncdfsf2+0xd6>
c002898d:	31 d2                	xor    edx,edx
c002898f:	31 c0                	xor    eax,eax
c0028991:	c1 e2 17             	shl    edx,0x17
c0028994:	c1 e8 08             	shr    eax,0x8
c0028997:	09 d0                	or     eax,edx
c0028999:	eb 3c                	jmp    c00289d7 <__truncdfsf2+0x11c>
c002899b:	81 e9 80 03 00 00    	sub    ecx,0x380
c00289a1:	89 ca                	mov    edx,ecx
c00289a3:	c1 fa 0b             	sar    edx,0xb
c00289a6:	c1 e2 08             	shl    edx,0x8
c00289a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00289ac:	31 db                	xor    ebx,ebx
c00289ae:	85 ff                	test   edi,edi
c00289b0:	0f 95 c3             	setne  bl
c00289b3:	09 d8                	or     eax,ebx
c00289b5:	89 c3                	mov    ebx,eax
c00289b7:	c1 eb 08             	shr    ebx,0x8
c00289ba:	a8 7f                	test   al,0x7f
c00289bc:	0f 95 c2             	setne  dl
c00289bf:	89 d6                	mov    esi,edx
c00289c1:	09 de                	or     esi,ebx
c00289c3:	83 e6 01             	and    esi,0x1
c00289c6:	c1 e8 07             	shr    eax,0x7
c00289c9:	21 f0                	and    eax,esi
c00289cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00289ce:	09 ca                	or     edx,ecx
c00289d0:	c1 e2 17             	shl    edx,0x17
c00289d3:	09 da                	or     edx,ebx
c00289d5:	01 d0                	add    eax,edx
c00289d7:	83 c4 0c             	add    esp,0xc
c00289da:	5b                   	pop    ebx
c00289db:	5e                   	pop    esi
c00289dc:	5f                   	pop    edi
c00289dd:	5d                   	pop    ebp
c00289de:	c3                   	ret    

c00289df <__extendsfdf2>:
c00289df:	55                   	push   ebp
c00289e0:	89 e5                	mov    ebp,esp
c00289e2:	57                   	push   edi
c00289e3:	56                   	push   esi
c00289e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00289e7:	89 d1                	mov    ecx,edx
c00289e9:	c1 f9 17             	sar    ecx,0x17
c00289ec:	c1 e2 08             	shl    edx,0x8
c00289ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00289f5:	89 c8                	mov    eax,ecx
c00289f7:	80 e4 f8             	and    ah,0xf8
c00289fa:	8d 71 01             	lea    esi,[ecx+0x1]
c00289fd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028a03:	75 27                	jne    c0028a2c <__extendsfdf2+0x4d>
c0028a05:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028a0b:	75 18                	jne    c0028a25 <__extendsfdf2+0x46>
c0028a0d:	85 d2                	test   edx,edx
c0028a0f:	74 20                	je     c0028a31 <__extendsfdf2+0x52>
c0028a11:	41                   	inc    ecx
c0028a12:	01 d2                	add    edx,edx
c0028a14:	79 fb                	jns    c0028a11 <__extendsfdf2+0x32>
c0028a16:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a1c:	29 c8                	sub    eax,ecx
c0028a1e:	05 81 03 00 00       	add    eax,0x381
c0028a23:	eb 0c                	jmp    c0028a31 <__extendsfdf2+0x52>
c0028a25:	05 00 07 00 00       	add    eax,0x700
c0028a2a:	eb 05                	jmp    c0028a31 <__extendsfdf2+0x52>
c0028a2c:	05 80 03 00 00       	add    eax,0x380
c0028a31:	c1 e0 14             	shl    eax,0x14
c0028a34:	89 c1                	mov    ecx,eax
c0028a36:	89 d0                	mov    eax,edx
c0028a38:	c1 e8 0b             	shr    eax,0xb
c0028a3b:	09 c1                	or     ecx,eax
c0028a3d:	c1 e2 15             	shl    edx,0x15
c0028a40:	89 d0                	mov    eax,edx
c0028a42:	89 ca                	mov    edx,ecx
c0028a44:	5e                   	pop    esi
c0028a45:	5f                   	pop    edi
c0028a46:	5d                   	pop    ebp
c0028a47:	c3                   	ret    
c0028a48:	66 90                	xchg   ax,ax
c0028a4a:	66 90                	xchg   ax,ax
c0028a4c:	66 90                	xchg   ax,ax
c0028a4e:	66 90                	xchg   ax,ax

c0028a50 <fabs>:
c0028a50:	83 ec 0c             	sub    esp,0xc
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	89 04 24             	mov    DWORD PTR [esp],eax
c0028a5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a5e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028a67:	dd 04 24             	fld    QWORD PTR [esp]
c0028a6a:	83 c4 0c             	add    esp,0xc
c0028a6d:	c3                   	ret    
c0028a6e:	66 90                	xchg   ax,ax

c0028a70 <lrint>:
c0028a70:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028a74:	83 ec 04             	sub    esp,0x4
c0028a77:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a7a:	58                   	pop    eax
c0028a7b:	c3                   	ret    

c0028a7c <lrintf>:
c0028a7c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028a80:	83 ec 04             	sub    esp,0x4
c0028a83:	db 1c 24             	fistp  DWORD PTR [esp]
c0028a86:	58                   	pop    eax
c0028a87:	c3                   	ret    

Disassembly of section .init:

c0028a88 <_init>:
c0028a88:	55                   	push   ebp
c0028a89:	89 e5                	mov    ebp,esp
c0028a8b:	e8 88 76 fd ff       	call   c0000118 <frame_dummy>
c0028a90:	e8 5b e0 ff ff       	call   c0026af0 <__do_global_ctors_aux>
c0028a95:	5d                   	pop    ebp
c0028a96:	c3                   	ret    

Disassembly of section .fini:

c0028a97 <_fini>:
c0028a97:	55                   	push   ebp
c0028a98:	89 e5                	mov    ebp,esp
c0028a9a:	e8 09 76 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028a9f:	5d                   	pop    ebp
c0028aa0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028aa2 <Computer::~Computer()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 10                	mov    DWORD PTR [eax],edx
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	50                   	push   eax
c0028ab8:	e8 55 b2 fe ff       	call   c0013d12 <Device::~Device()>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	90                   	nop
c0028ac1:	83 c4 0c             	add    esp,0xc
c0028ac4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ac6 <Computer::~Computer()>:
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	83 ec 0c             	sub    esp,0xc
c0028acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad0:	e8 cd ff ff ff       	call   c0028aa2 <Computer::~Computer()>
c0028ad5:	83 c4 10             	add    esp,0x10
c0028ad8:	83 ec 08             	sub    esp,0x8
c0028adb:	68 ec 01 00 00       	push   0x1ec
c0028ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae4:	e8 4a 9e fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0028ae9:	83 c4 10             	add    esp,0x10
c0028aec:	83 c4 0c             	add    esp,0xc
c0028aef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028af0 <idleCommon()>:
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	fa                   	cli    
c0028af4:	ff 05 68 fb 02 c0    	inc    DWORD PTR ds:0xc002fb68
c0028afa:	e8 3c 54 ff ff       	call   c001df3b <schedule()>
c0028aff:	a1 68 fb 02 c0       	mov    eax,ds:0xc002fb68
c0028b04:	48                   	dec    eax
c0028b05:	a3 68 fb 02 c0       	mov    ds:0xc002fb68,eax
c0028b0a:	75 01                	jne    c0028b0d <idleCommon()+0x1d>
c0028b0c:	fb                   	sti    
c0028b0d:	83 c4 0c             	add    esp,0xc
c0028b10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028b12 <LinkedList<UnixFile>::~LinkedList()>:
c0028b12:	90                   	nop
c0028b13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028b14 <LinkedList<UnixFile>::LinkedList()>:
c0028b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b54:	90                   	nop
c0028b55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028b56 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028b56:	83 ec 0c             	sub    esp,0xc
c0028b59:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b5e:	75 10                	jne    c0028b70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028b60:	83 ec 0c             	sub    esp,0xc
c0028b63:	68 90 aa 02 c0       	push   0xc002aa90
c0028b68:	e8 3c 18 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028b6d:	83 c4 10             	add    esp,0x10
c0028b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b76:	85 c0                	test   eax,eax
c0028b78:	74 34                	je     c0028bae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b81:	85 c0                	test   eax,eax
c0028b83:	74 29                	je     c0028bae <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bac:	eb 65                	jmp    c0028c13 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb4:	85 c0                	test   eax,eax
c0028bb6:	75 4b                	jne    c0028c03 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbf:	85 c0                	test   eax,eax
c0028bc1:	75 40                	jne    c0028c03 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bcb:	89 10                	mov    DWORD PTR [eax],edx
c0028bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bd5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bed:	85 c0                	test   eax,eax
c0028bef:	74 22                	je     c0028c13 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028bf1:	83 ec 0c             	sub    esp,0xc
c0028bf4:	68 b2 aa 02 c0       	push   0xc002aab2
c0028bf9:	e8 ab 17 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028bfe:	83 c4 10             	add    esp,0x10
c0028c01:	eb 10                	jmp    c0028c13 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028c03:	83 ec 0c             	sub    esp,0xc
c0028c06:	68 bc aa 02 c0       	push   0xc002aabc
c0028c0b:	e8 99 17 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028c10:	83 c4 10             	add    esp,0x10
c0028c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c1a:	8d 50 01             	lea    edx,[eax+0x1]
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c24:	90                   	nop
c0028c25:	83 c4 0c             	add    esp,0xc
c0028c28:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028c2a <LinkedList<UnixFile>::getFirstElement()>:
c0028c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028c32 <LinkedList<UnixFile>::removeFirst()>:
c0028c32:	83 ec 0c             	sub    esp,0xc
c0028c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c3b:	85 c0                	test   eax,eax
c0028c3d:	75 12                	jne    c0028c51 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028c3f:	83 ec 0c             	sub    esp,0xc
c0028c42:	68 c8 aa 02 c0       	push   0xc002aac8
c0028c47:	e8 5d 17 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028c4c:	83 c4 10             	add    esp,0x10
c0028c4f:	eb 7e                	jmp    c0028ccf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c5b:	85 c0                	test   eax,eax
c0028c5d:	74 10                	je     c0028c6f <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028c5f:	83 ec 0c             	sub    esp,0xc
c0028c62:	68 13 ab 02 c0       	push   0xc002ab13
c0028c67:	e8 3d 17 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028c6c:	83 c4 10             	add    esp,0x10
c0028c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c78:	85 c0                	test   eax,eax
c0028c7a:	75 33                	jne    c0028caf <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c95:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c98:	83 f8 01             	cmp    eax,0x1
c0028c9b:	74 21                	je     c0028cbe <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028c9d:	83 ec 0c             	sub    esp,0xc
c0028ca0:	68 ec aa 02 c0       	push   0xc002aaec
c0028ca5:	e8 ff 16 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028caa:	83 c4 10             	add    esp,0x10
c0028cad:	eb 0f                	jmp    c0028cbe <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cb5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbc:	89 10                	mov    DWORD PTR [eax],edx
c0028cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cc5:	8d 50 ff             	lea    edx,[eax-0x1]
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ccf:	83 c4 0c             	add    esp,0xc
c0028cd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028cd4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cdb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028cdc <DriverlessDevice::~DriverlessDevice()>:
c0028cdc:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0028ce1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce5:	89 10                	mov    DWORD PTR [eax],edx
c0028ce7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ceb:	50                   	push   eax
c0028cec:	e8 21 b0 fe ff       	call   c0013d12 <Device::~Device()>
c0028cf1:	83 c4 04             	add    esp,0x4
c0028cf4:	90                   	nop
c0028cf5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028cf6 <DriverlessDevice::~DriverlessDevice()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 d7 ff ff ff       	call   c0028cdc <DriverlessDevice::~DriverlessDevice()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 58 01 00 00       	push   0x158
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 1a 9c fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028d20 <LinkedList<Device>::addElement(Device*)>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d28:	75 10                	jne    c0028d3a <LinkedList<Device>::addElement(Device*)+0x1a>
c0028d2a:	83 ec 0c             	sub    esp,0xc
c0028d2d:	68 90 aa 02 c0       	push   0xc002aa90
c0028d32:	e8 72 16 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d40:	85 c0                	test   eax,eax
c0028d42:	74 3a                	je     c0028d7e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d4b:	85 c0                	test   eax,eax
c0028d4d:	74 2f                	je     c0028d7e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d5a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d72:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028d7c:	eb 68                	jmp    c0028de6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d84:	85 c0                	test   eax,eax
c0028d86:	75 4e                	jne    c0028dd6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d8f:	85 c0                	test   eax,eax
c0028d91:	75 43                	jne    c0028dd6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d9b:	89 10                	mov    DWORD PTR [eax],edx
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028da5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028daf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028dc0:	85 c0                	test   eax,eax
c0028dc2:	74 22                	je     c0028de6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	68 b2 aa 02 c0       	push   0xc002aab2
c0028dcc:	e8 d8 15 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028dd1:	83 c4 10             	add    esp,0x10
c0028dd4:	eb 10                	jmp    c0028de6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	68 bc aa 02 c0       	push   0xc002aabc
c0028dde:	e8 c6 15 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ded:	8d 50 01             	lea    edx,[eax+0x1]
c0028df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028df7:	90                   	nop
c0028df8:	83 c4 0c             	add    esp,0xc
c0028dfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028dfc <LinkedList<Device>::LinkedList()>:
c0028dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e35:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e3c:	90                   	nop
c0028e3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028e3e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028e3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e44:	85 c0                	test   eax,eax
c0028e46:	75 0e                	jne    c0028e56 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e4f:	85 c0                	test   eax,eax
c0028e51:	75 03                	jne    c0028e56 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028e53:	b0 01                	mov    al,0x1
c0028e55:	c3                   	ret    
c0028e56:	b0 00                	mov    al,0x0
c0028e58:	90                   	nop
c0028e59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028e5a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028e5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028e62 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e6b:	85 c0                	test   eax,eax
c0028e6d:	75 15                	jne    c0028e84 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028e6f:	83 ec 0c             	sub    esp,0xc
c0028e72:	68 c8 aa 02 c0       	push   0xc002aac8
c0028e77:	e8 2d 15 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028e7c:	83 c4 10             	add    esp,0x10
c0028e7f:	e9 88 00 00 00       	jmp    c0028f0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e8e:	85 c0                	test   eax,eax
c0028e90:	0f 95 c0             	setne  al
c0028e93:	84 c0                	test   al,al
c0028e95:	74 10                	je     c0028ea7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028e97:	83 ec 0c             	sub    esp,0xc
c0028e9a:	68 13 ab 02 c0       	push   0xc002ab13
c0028e9f:	e8 05 15 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028ea4:	83 c4 10             	add    esp,0x10
c0028ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ead:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028eb0:	85 c0                	test   eax,eax
c0028eb2:	0f 94 c0             	sete   al
c0028eb5:	84 c0                	test   al,al
c0028eb7:	74 33                	je     c0028eec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ed5:	83 f8 01             	cmp    eax,0x1
c0028ed8:	74 21                	je     c0028efb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028eda:	83 ec 0c             	sub    esp,0xc
c0028edd:	68 ec aa 02 c0       	push   0xc002aaec
c0028ee2:	e8 c2 14 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	eb 0f                	jmp    c0028efb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ef2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef9:	89 10                	mov    DWORD PTR [eax],edx
c0028efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f02:	8d 50 ff             	lea    edx,[eax-0x1]
c0028f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f09:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f0c:	83 c4 0c             	add    esp,0xc
c0028f0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028f10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028f10:	83 ec 0c             	sub    esp,0xc
c0028f13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f18:	75 10                	jne    c0028f2a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	68 90 aa 02 c0       	push   0xc002aa90
c0028f22:	e8 82 14 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f30:	85 c0                	test   eax,eax
c0028f32:	74 34                	je     c0028f68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f3b:	85 c0                	test   eax,eax
c0028f3d:	74 29                	je     c0028f68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f5f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028f66:	eb 65                	jmp    c0028fcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f6e:	85 c0                	test   eax,eax
c0028f70:	75 4b                	jne    c0028fbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f79:	85 c0                	test   eax,eax
c0028f7b:	75 40                	jne    c0028fbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f85:	89 10                	mov    DWORD PTR [eax],edx
c0028f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fa7:	85 c0                	test   eax,eax
c0028fa9:	74 22                	je     c0028fcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028fab:	83 ec 0c             	sub    esp,0xc
c0028fae:	68 b2 aa 02 c0       	push   0xc002aab2
c0028fb3:	e8 f1 13 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028fb8:	83 c4 10             	add    esp,0x10
c0028fbb:	eb 10                	jmp    c0028fcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028fbd:	83 ec 0c             	sub    esp,0xc
c0028fc0:	68 bc aa 02 c0       	push   0xc002aabc
c0028fc5:	e8 df 13 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0028fca:	83 c4 10             	add    esp,0x10
c0028fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fd4:	8d 50 01             	lea    edx,[eax+0x1]
c0028fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fde:	90                   	nop
c0028fdf:	83 c4 0c             	add    esp,0xc
c0028fe2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028fe4 <ACPI::~ACPI()>:
c0028fe4:	83 ec 0c             	sub    esp,0xc
c0028fe7:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	89 10                	mov    DWORD PTR [eax],edx
c0028ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	50                   	push   eax
c0028ffa:	e8 13 ad fe ff       	call   c0013d12 <Device::~Device()>
c0028fff:	83 c4 10             	add    esp,0x10
c0029002:	90                   	nop
c0029003:	83 c4 0c             	add    esp,0xc
c0029006:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029008 <ACPI::~ACPI()>:
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	83 ec 0c             	sub    esp,0xc
c002900e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029012:	e8 cd ff ff ff       	call   c0028fe4 <ACPI::~ACPI()>
c0029017:	83 c4 10             	add    esp,0x10
c002901a:	83 ec 08             	sub    esp,0x8
c002901d:	68 64 12 00 00       	push   0x1264
c0029022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029026:	e8 08 99 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c002902b:	83 c4 10             	add    esp,0x10
c002902e:	83 c4 0c             	add    esp,0xc
c0029031:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029032 <LinkedList<Device>::~LinkedList()>:
c0029032:	90                   	nop
c0029033:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029034 <LinkedList<Device>::isEmpty()>:
c0029034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029038:	8b 00                	mov    eax,DWORD PTR [eax]
c002903a:	85 c0                	test   eax,eax
c002903c:	75 0e                	jne    c002904c <LinkedList<Device>::isEmpty()+0x18>
c002903e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029045:	85 c0                	test   eax,eax
c0029047:	75 03                	jne    c002904c <LinkedList<Device>::isEmpty()+0x18>
c0029049:	b0 01                	mov    al,0x1
c002904b:	c3                   	ret    
c002904c:	b0 00                	mov    al,0x0
c002904e:	90                   	nop
c002904f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029050 <LinkedList<Device>::getFirstElement()>:
c0029050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029054:	8b 00                	mov    eax,DWORD PTR [eax]
c0029056:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029058 <LinkedList<Device>::removeFirst()>:
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029061:	85 c0                	test   eax,eax
c0029063:	75 15                	jne    c002907a <LinkedList<Device>::removeFirst()+0x22>
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	68 c8 aa 02 c0       	push   0xc002aac8
c002906d:	e8 37 13 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0029072:	83 c4 10             	add    esp,0x10
c0029075:	e9 87 00 00 00       	jmp    c0029101 <LinkedList<Device>::removeFirst()+0xa9>
c002907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029081:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029087:	85 c0                	test   eax,eax
c0029089:	74 10                	je     c002909b <LinkedList<Device>::removeFirst()+0x43>
c002908b:	83 ec 0c             	sub    esp,0xc
c002908e:	68 13 ab 02 c0       	push   0xc002ab13
c0029093:	e8 11 13 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c0029098:	83 c4 10             	add    esp,0x10
c002909b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909f:	8b 00                	mov    eax,DWORD PTR [eax]
c00290a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00290a7:	85 c0                	test   eax,eax
c00290a9:	75 33                	jne    c00290de <LinkedList<Device>::removeFirst()+0x86>
c00290ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290c7:	83 f8 01             	cmp    eax,0x1
c00290ca:	74 24                	je     c00290f0 <LinkedList<Device>::removeFirst()+0x98>
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	68 ec aa 02 c0       	push   0xc002aaec
c00290d4:	e8 d0 12 ff ff       	call   c001a3a9 <Krnl::panic(char const*)>
c00290d9:	83 c4 10             	add    esp,0x10
c00290dc:	eb 12                	jmp    c00290f0 <LinkedList<Device>::removeFirst()+0x98>
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00290e4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	89 10                	mov    DWORD PTR [eax],edx
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00290fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029101:	83 c4 0c             	add    esp,0xc
c0029104:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029106 <CPU::~CPU()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	ba f8 c1 02 c0       	mov    edx,0xc002c1f8
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 10                	mov    DWORD PTR [eax],edx
c0029114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	50                   	push   eax
c002911c:	e8 f1 ab fe ff       	call   c0013d12 <Device::~Device()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	90                   	nop
c0029125:	83 c4 0c             	add    esp,0xc
c0029128:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002912a <CPU::~CPU()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	83 ec 0c             	sub    esp,0xc
c0029130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029134:	e8 cd ff ff ff       	call   c0029106 <CPU::~CPU()>
c0029139:	83 c4 10             	add    esp,0x10
c002913c:	83 ec 08             	sub    esp,0x8
c002913f:	68 98 11 00 00       	push   0x1198
c0029144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029148:	e8 e6 97 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	83 c4 0c             	add    esp,0xc
c0029153:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029154 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029154:	90                   	nop
c0029155:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029156 <ThreadControlBlock::ThreadControlBlock()>:
c0029156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002915a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029165:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002916c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029170:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002917b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029186:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002918d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029191:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029195:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029199:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002919d:	90                   	nop
c002919e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00291a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00291a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291e0:	90                   	nop
c00291e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00291e2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00291e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00291e9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00291ea <Vm::_FPUState::_FPUState()>:
c00291ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291ee:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00291f5:	90                   	nop
c00291f6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00291f8 <PCI::~PCI()>:
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c0029200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029204:	89 10                	mov    DWORD PTR [eax],edx
c0029206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	50                   	push   eax
c002920e:	e8 cf a4 fe ff       	call   c00136e2 <Bus::~Bus()>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	90                   	nop
c0029217:	83 c4 0c             	add    esp,0xc
c002921a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002921c <PCI::~PCI()>:
c002921c:	83 ec 0c             	sub    esp,0xc
c002921f:	83 ec 0c             	sub    esp,0xc
c0029222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029226:	e8 cd ff ff ff       	call   c00291f8 <PCI::~PCI()>
c002922b:	83 c4 10             	add    esp,0x10
c002922e:	83 ec 08             	sub    esp,0x8
c0029231:	68 5c 01 00 00       	push   0x15c
c0029236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002923a:	e8 f4 96 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c002923f:	83 c4 10             	add    esp,0x10
c0029242:	83 c4 0c             	add    esp,0xc
c0029245:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029246 <IDE::~IDE()>:
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	ba f8 cd 02 c0       	mov    edx,0xc002cdf8
c002924e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029252:	89 10                	mov    DWORD PTR [eax],edx
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	83 ec 0c             	sub    esp,0xc
c002925b:	50                   	push   eax
c002925c:	e8 c7 af fe ff       	call   c0014228 <HardDiskController::~HardDiskController()>
c0029261:	83 c4 10             	add    esp,0x10
c0029264:	90                   	nop
c0029265:	83 c4 0c             	add    esp,0xc
c0029268:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002926a <IDE::~IDE()>:
c002926a:	83 ec 0c             	sub    esp,0xc
c002926d:	83 ec 0c             	sub    esp,0xc
c0029270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029274:	e8 cd ff ff ff       	call   c0029246 <IDE::~IDE()>
c0029279:	83 c4 10             	add    esp,0x10
c002927c:	83 ec 08             	sub    esp,0x8
c002927f:	68 70 02 00 00       	push   0x270
c0029284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029288:	e8 a6 96 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c002928d:	83 c4 10             	add    esp,0x10
c0029290:	83 c4 0c             	add    esp,0xc
c0029293:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029294 <SATABus::~SATABus()>:
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c002929c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a0:	89 10                	mov    DWORD PTR [eax],edx
c00292a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a6:	83 ec 0c             	sub    esp,0xc
c00292a9:	50                   	push   eax
c00292aa:	e8 79 af fe ff       	call   c0014228 <HardDiskController::~HardDiskController()>
c00292af:	83 c4 10             	add    esp,0x10
c00292b2:	90                   	nop
c00292b3:	83 c4 0c             	add    esp,0xc
c00292b6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00292b8 <SATABus::~SATABus()>:
c00292b8:	83 ec 0c             	sub    esp,0xc
c00292bb:	83 ec 0c             	sub    esp,0xc
c00292be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c2:	e8 cd ff ff ff       	call   c0029294 <SATABus::~SATABus()>
c00292c7:	83 c4 10             	add    esp,0x10
c00292ca:	83 ec 08             	sub    esp,0x8
c00292cd:	68 64 01 00 00       	push   0x164
c00292d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d6:	e8 58 96 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00292db:	83 c4 10             	add    esp,0x10
c00292de:	83 c4 0c             	add    esp,0xc
c00292e1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00292e2 <ATA::~ATA()>:
c00292e2:	83 ec 0c             	sub    esp,0xc
c00292e5:	ba e8 ce 02 c0       	mov    edx,0xc002cee8
c00292ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ee:	89 10                	mov    DWORD PTR [eax],edx
c00292f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f4:	83 ec 0c             	sub    esp,0xc
c00292f7:	50                   	push   eax
c00292f8:	e8 0d b0 fe ff       	call   c001430a <PhysicalDisk::~PhysicalDisk()>
c00292fd:	83 c4 10             	add    esp,0x10
c0029300:	90                   	nop
c0029301:	83 c4 0c             	add    esp,0xc
c0029304:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029306 <ATA::~ATA()>:
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	83 ec 0c             	sub    esp,0xc
c002930c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029310:	e8 cd ff ff ff       	call   c00292e2 <ATA::~ATA()>
c0029315:	83 c4 10             	add    esp,0x10
c0029318:	83 ec 08             	sub    esp,0x8
c002931b:	68 7c 01 00 00       	push   0x17c
c0029320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029324:	e8 0a 96 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029329:	83 c4 10             	add    esp,0x10
c002932c:	83 c4 0c             	add    esp,0xc
c002932f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029330 <ATAPI::~ATAPI()>:
c0029330:	83 ec 0c             	sub    esp,0xc
c0029333:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0029338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933c:	89 10                	mov    DWORD PTR [eax],edx
c002933e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029342:	83 ec 0c             	sub    esp,0xc
c0029345:	50                   	push   eax
c0029346:	e8 bf af fe ff       	call   c001430a <PhysicalDisk::~PhysicalDisk()>
c002934b:	83 c4 10             	add    esp,0x10
c002934e:	90                   	nop
c002934f:	83 c4 0c             	add    esp,0xc
c0029352:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029354 <ATAPI::~ATAPI()>:
c0029354:	83 ec 0c             	sub    esp,0xc
c0029357:	83 ec 0c             	sub    esp,0xc
c002935a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002935e:	e8 cd ff ff ff       	call   c0029330 <ATAPI::~ATAPI()>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	83 ec 08             	sub    esp,0x8
c0029369:	68 80 01 00 00       	push   0x180
c002936e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029372:	e8 bc 95 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029377:	83 c4 10             	add    esp,0x10
c002937a:	83 c4 0c             	add    esp,0xc
c002937d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002937e <SATA::~SATA()>:
c002937e:	83 ec 0c             	sub    esp,0xc
c0029381:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c0029386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938a:	89 10                	mov    DWORD PTR [eax],edx
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	83 ec 0c             	sub    esp,0xc
c0029393:	50                   	push   eax
c0029394:	e8 71 af fe ff       	call   c001430a <PhysicalDisk::~PhysicalDisk()>
c0029399:	83 c4 10             	add    esp,0x10
c002939c:	90                   	nop
c002939d:	83 c4 0c             	add    esp,0xc
c00293a0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00293a2 <SATA::~SATA()>:
c00293a2:	83 ec 0c             	sub    esp,0xc
c00293a5:	83 ec 0c             	sub    esp,0xc
c00293a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ac:	e8 cd ff ff ff       	call   c002937e <SATA::~SATA()>
c00293b1:	83 c4 10             	add    esp,0x10
c00293b4:	83 ec 08             	sub    esp,0x8
c00293b7:	68 7c 01 00 00       	push   0x17c
c00293bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293c0:	e8 6e 95 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00293c5:	83 c4 10             	add    esp,0x10
c00293c8:	83 c4 0c             	add    esp,0xc
c00293cb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00293cc <SATAPI::~SATAPI()>:
c00293cc:	83 ec 0c             	sub    esp,0xc
c00293cf:	ba b0 d0 02 c0       	mov    edx,0xc002d0b0
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	89 10                	mov    DWORD PTR [eax],edx
c00293da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293de:	83 ec 0c             	sub    esp,0xc
c00293e1:	50                   	push   eax
c00293e2:	e8 23 af fe ff       	call   c001430a <PhysicalDisk::~PhysicalDisk()>
c00293e7:	83 c4 10             	add    esp,0x10
c00293ea:	90                   	nop
c00293eb:	83 c4 0c             	add    esp,0xc
c00293ee:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00293f0 <SATAPI::~SATAPI()>:
c00293f0:	83 ec 0c             	sub    esp,0xc
c00293f3:	83 ec 0c             	sub    esp,0xc
c00293f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fa:	e8 cd ff ff ff       	call   c00293cc <SATAPI::~SATAPI()>
c00293ff:	83 c4 10             	add    esp,0x10
c0029402:	83 ec 08             	sub    esp,0x8
c0029405:	68 80 01 00 00       	push   0x180
c002940a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002940e:	e8 20 95 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	83 c4 0c             	add    esp,0xc
c0029419:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002941a <AVX::~AVX()>:
c002941a:	83 ec 0c             	sub    esp,0xc
c002941d:	ba f0 d0 02 c0       	mov    edx,0xc002d0f0
c0029422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029426:	89 10                	mov    DWORD PTR [eax],edx
c0029428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942c:	83 ec 0c             	sub    esp,0xc
c002942f:	50                   	push   eax
c0029430:	e8 59 af fe ff       	call   c001438e <FPU::~FPU()>
c0029435:	83 c4 10             	add    esp,0x10
c0029438:	90                   	nop
c0029439:	83 c4 0c             	add    esp,0xc
c002943c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002943e <AVX::~AVX()>:
c002943e:	83 ec 0c             	sub    esp,0xc
c0029441:	83 ec 0c             	sub    esp,0xc
c0029444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029448:	e8 cd ff ff ff       	call   c002941a <AVX::~AVX()>
c002944d:	83 c4 10             	add    esp,0x10
c0029450:	83 ec 08             	sub    esp,0x8
c0029453:	68 58 01 00 00       	push   0x158
c0029458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945c:	e8 d2 94 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029461:	83 c4 10             	add    esp,0x10
c0029464:	83 c4 0c             	add    esp,0xc
c0029467:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029468 <MMX::~MMX()>:
c0029468:	83 ec 0c             	sub    esp,0xc
c002946b:	ba 30 d1 02 c0       	mov    edx,0xc002d130
c0029470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029474:	89 10                	mov    DWORD PTR [eax],edx
c0029476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947a:	83 ec 0c             	sub    esp,0xc
c002947d:	50                   	push   eax
c002947e:	e8 0b af fe ff       	call   c001438e <FPU::~FPU()>
c0029483:	83 c4 10             	add    esp,0x10
c0029486:	90                   	nop
c0029487:	83 c4 0c             	add    esp,0xc
c002948a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002948c <MMX::~MMX()>:
c002948c:	83 ec 0c             	sub    esp,0xc
c002948f:	83 ec 0c             	sub    esp,0xc
c0029492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029496:	e8 cd ff ff ff       	call   c0029468 <MMX::~MMX()>
c002949b:	83 c4 10             	add    esp,0x10
c002949e:	83 ec 08             	sub    esp,0x8
c00294a1:	68 58 01 00 00       	push   0x158
c00294a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294aa:	e8 84 94 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00294af:	83 c4 10             	add    esp,0x10
c00294b2:	83 c4 0c             	add    esp,0xc
c00294b5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00294b6 <SSE::~SSE()>:
c00294b6:	83 ec 0c             	sub    esp,0xc
c00294b9:	ba 70 d1 02 c0       	mov    edx,0xc002d170
c00294be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c2:	89 10                	mov    DWORD PTR [eax],edx
c00294c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c8:	83 ec 0c             	sub    esp,0xc
c00294cb:	50                   	push   eax
c00294cc:	e8 bd ae fe ff       	call   c001438e <FPU::~FPU()>
c00294d1:	83 c4 10             	add    esp,0x10
c00294d4:	90                   	nop
c00294d5:	83 c4 0c             	add    esp,0xc
c00294d8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00294da <SSE::~SSE()>:
c00294da:	83 ec 0c             	sub    esp,0xc
c00294dd:	83 ec 0c             	sub    esp,0xc
c00294e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294e4:	e8 cd ff ff ff       	call   c00294b6 <SSE::~SSE()>
c00294e9:	83 c4 10             	add    esp,0x10
c00294ec:	83 ec 08             	sub    esp,0x8
c00294ef:	68 58 01 00 00       	push   0x158
c00294f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294f8:	e8 36 94 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00294fd:	83 c4 10             	add    esp,0x10
c0029500:	83 c4 0c             	add    esp,0xc
c0029503:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029504 <x87::~x87()>:
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c002950c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029510:	89 10                	mov    DWORD PTR [eax],edx
c0029512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029516:	83 ec 0c             	sub    esp,0xc
c0029519:	50                   	push   eax
c002951a:	e8 6f ae fe ff       	call   c001438e <FPU::~FPU()>
c002951f:	83 c4 10             	add    esp,0x10
c0029522:	90                   	nop
c0029523:	83 c4 0c             	add    esp,0xc
c0029526:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029528 <x87::~x87()>:
c0029528:	83 ec 0c             	sub    esp,0xc
c002952b:	83 ec 0c             	sub    esp,0xc
c002952e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029532:	e8 cd ff ff ff       	call   c0029504 <x87::~x87()>
c0029537:	83 c4 10             	add    esp,0x10
c002953a:	83 ec 08             	sub    esp,0x8
c002953d:	68 58 01 00 00       	push   0x158
c0029542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029546:	e8 e8 93 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c002954b:	83 c4 10             	add    esp,0x10
c002954e:	83 c4 0c             	add    esp,0xc
c0029551:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029552 <IOAPIC::~IOAPIC()>:
c0029552:	83 ec 0c             	sub    esp,0xc
c0029555:	ba 08 d3 02 c0       	mov    edx,0xc002d308
c002955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955e:	89 10                	mov    DWORD PTR [eax],edx
c0029560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029564:	83 ec 0c             	sub    esp,0xc
c0029567:	50                   	push   eax
c0029568:	e8 a5 a7 fe ff       	call   c0013d12 <Device::~Device()>
c002956d:	83 c4 10             	add    esp,0x10
c0029570:	90                   	nop
c0029571:	83 c4 0c             	add    esp,0xc
c0029574:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029576 <IOAPIC::~IOAPIC()>:
c0029576:	83 ec 0c             	sub    esp,0xc
c0029579:	83 ec 0c             	sub    esp,0xc
c002957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029580:	e8 cd ff ff ff       	call   c0029552 <IOAPIC::~IOAPIC()>
c0029585:	83 c4 10             	add    esp,0x10
c0029588:	83 ec 08             	sub    esp,0x8
c002958b:	68 68 01 00 00       	push   0x168
c0029590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029594:	e8 9a 93 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029599:	83 c4 10             	add    esp,0x10
c002959c:	83 c4 0c             	add    esp,0xc
c002959f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00295a0 <APIC::~APIC()>:
c00295a0:	83 ec 0c             	sub    esp,0xc
c00295a3:	ba c0 d2 02 c0       	mov    edx,0xc002d2c0
c00295a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ac:	89 10                	mov    DWORD PTR [eax],edx
c00295ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b2:	83 ec 0c             	sub    esp,0xc
c00295b5:	50                   	push   eax
c00295b6:	e8 9d b2 fe ff       	call   c0014858 <InterruptController::~InterruptController()>
c00295bb:	83 c4 10             	add    esp,0x10
c00295be:	90                   	nop
c00295bf:	83 c4 0c             	add    esp,0xc
c00295c2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00295c4 <APIC::~APIC()>:
c00295c4:	83 ec 0c             	sub    esp,0xc
c00295c7:	83 ec 0c             	sub    esp,0xc
c00295ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295ce:	e8 cd ff ff ff       	call   c00295a0 <APIC::~APIC()>
c00295d3:	83 c4 10             	add    esp,0x10
c00295d6:	83 ec 08             	sub    esp,0x8
c00295d9:	68 58 21 00 00       	push   0x2158
c00295de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e2:	e8 4c 93 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00295e7:	83 c4 10             	add    esp,0x10
c00295ea:	83 c4 0c             	add    esp,0xc
c00295ed:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00295ee <PIC::~PIC()>:
c00295ee:	83 ec 0c             	sub    esp,0xc
c00295f1:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00295f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fa:	89 10                	mov    DWORD PTR [eax],edx
c00295fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029600:	83 ec 0c             	sub    esp,0xc
c0029603:	50                   	push   eax
c0029604:	e8 4f b2 fe ff       	call   c0014858 <InterruptController::~InterruptController()>
c0029609:	83 c4 10             	add    esp,0x10
c002960c:	90                   	nop
c002960d:	83 c4 0c             	add    esp,0xc
c0029610:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029612 <PIC::~PIC()>:
c0029612:	83 ec 0c             	sub    esp,0xc
c0029615:	83 ec 0c             	sub    esp,0xc
c0029618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002961c:	e8 cd ff ff ff       	call   c00295ee <PIC::~PIC()>
c0029621:	83 c4 10             	add    esp,0x10
c0029624:	83 ec 08             	sub    esp,0x8
c0029627:	68 58 21 00 00       	push   0x2158
c002962c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029630:	e8 fe 92 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029635:	83 c4 10             	add    esp,0x10
c0029638:	83 c4 0c             	add    esp,0xc
c002963b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002963c <APICTimer::~APICTimer()>:
c002963c:	83 ec 0c             	sub    esp,0xc
c002963f:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0029644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029648:	89 10                	mov    DWORD PTR [eax],edx
c002964a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964e:	83 ec 0c             	sub    esp,0xc
c0029651:	50                   	push   eax
c0029652:	e8 5f d2 fe ff       	call   c00168b6 <Timer::~Timer()>
c0029657:	83 c4 10             	add    esp,0x10
c002965a:	90                   	nop
c002965b:	83 c4 0c             	add    esp,0xc
c002965e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029660 <APICTimer::~APICTimer()>:
c0029660:	83 ec 0c             	sub    esp,0xc
c0029663:	83 ec 0c             	sub    esp,0xc
c0029666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002966a:	e8 cd ff ff ff       	call   c002963c <APICTimer::~APICTimer()>
c002966f:	83 c4 10             	add    esp,0x10
c0029672:	83 ec 08             	sub    esp,0x8
c0029675:	68 60 01 00 00       	push   0x160
c002967a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002967e:	e8 b0 92 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c0029683:	83 c4 10             	add    esp,0x10
c0029686:	83 c4 0c             	add    esp,0xc
c0029689:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002968a <PIT::~PIT()>:
c002968a:	83 ec 0c             	sub    esp,0xc
c002968d:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c0029692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029696:	89 10                	mov    DWORD PTR [eax],edx
c0029698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969c:	83 ec 0c             	sub    esp,0xc
c002969f:	50                   	push   eax
c00296a0:	e8 11 d2 fe ff       	call   c00168b6 <Timer::~Timer()>
c00296a5:	83 c4 10             	add    esp,0x10
c00296a8:	90                   	nop
c00296a9:	83 c4 0c             	add    esp,0xc
c00296ac:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00296ae <PIT::~PIT()>:
c00296ae:	83 ec 0c             	sub    esp,0xc
c00296b1:	83 ec 0c             	sub    esp,0xc
c00296b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296b8:	e8 cd ff ff ff       	call   c002968a <PIT::~PIT()>
c00296bd:	83 c4 10             	add    esp,0x10
c00296c0:	83 ec 08             	sub    esp,0x8
c00296c3:	68 5c 01 00 00       	push   0x15c
c00296c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296cc:	e8 62 92 fe ff       	call   c0012933 <operator delete(void*, unsigned long)>
c00296d1:	83 c4 10             	add    esp,0x10
c00296d4:	83 c4 0c             	add    esp,0xc
c00296d7:	c3                   	ret    
